// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_showcase.proto

#include "dota_gcmessages_client_showcase.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgShowcaseEconItemReference::CMsgShowcaseEconItemReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.original_id_)*/uint64_t{0u}
  , /*decltype(_impl_.definition_index_)*/0u} {}
struct CMsgShowcaseEconItemReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseEconItemReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseEconItemReferenceDefaultTypeInternal() {}
  union {
    CMsgShowcaseEconItemReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseEconItemReferenceDefaultTypeInternal _CMsgShowcaseEconItemReference_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_Trophy_Data::CMsgShowcaseItem_Trophy_Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trophy_score_)*/0u} {}
struct CMsgShowcaseItem_Trophy_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_Trophy_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_Trophy_DataDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_Trophy_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_Trophy_DataDefaultTypeInternal _CMsgShowcaseItem_Trophy_Data_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_Trophy::CMsgShowcaseItem_Trophy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.trophy_id_)*/0u} {}
struct CMsgShowcaseItem_TrophyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_TrophyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_TrophyDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_Trophy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_TrophyDefaultTypeInternal _CMsgShowcaseItem_Trophy_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_EconItem_Data::CMsgShowcaseItem_EconItem_Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.econ_item_)*/nullptr} {}
struct CMsgShowcaseItem_EconItem_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_EconItem_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_EconItem_DataDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_EconItem_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_EconItem_DataDefaultTypeInternal _CMsgShowcaseItem_EconItem_Data_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_EconItem::CMsgShowcaseItem_EconItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.ref_)*/nullptr} {}
struct CMsgShowcaseItem_EconItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_EconItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_EconItemDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_EconItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_EconItemDefaultTypeInternal _CMsgShowcaseItem_EconItem_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_Hero_Data::CMsgShowcaseItem_Hero_Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.econ_items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgShowcaseItem_Hero_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_Hero_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_Hero_DataDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_Hero_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_Hero_DataDefaultTypeInternal _CMsgShowcaseItem_Hero_Data_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_Hero::CMsgShowcaseItem_Hero(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.econ_item_refs_)*/{}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.hero_id_)*/0u} {}
struct CMsgShowcaseItem_HeroDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_HeroDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_HeroDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_Hero _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_HeroDefaultTypeInternal _CMsgShowcaseItem_Hero_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_PlayerMatch_Data::CMsgShowcaseItem_PlayerMatch_Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.timestamp_)*/0u
  , /*decltype(_impl_.duration_)*/0u
  , /*decltype(_impl_.game_mode_)*/0
  , /*decltype(_impl_.outcome_)*/0
  , /*decltype(_impl_.kills_)*/0u
  , /*decltype(_impl_.deaths_)*/0u
  , /*decltype(_impl_.assists_)*/0u} {}
struct CMsgShowcaseItem_PlayerMatch_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_PlayerMatch_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_PlayerMatch_DataDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_PlayerMatch_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_PlayerMatch_DataDefaultTypeInternal _CMsgShowcaseItem_PlayerMatch_Data_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_PlayerMatch::CMsgShowcaseItem_PlayerMatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.player_slot_)*/0u} {}
struct CMsgShowcaseItem_PlayerMatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_PlayerMatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_PlayerMatchDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_PlayerMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_PlayerMatchDefaultTypeInternal _CMsgShowcaseItem_PlayerMatch_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_ChatWheel_Data::CMsgShowcaseItem_ChatWheel_Data(
    ::_pbi::ConstantInitialized) {}
struct CMsgShowcaseItem_ChatWheel_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_ChatWheel_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_ChatWheel_DataDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_ChatWheel_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_ChatWheel_DataDefaultTypeInternal _CMsgShowcaseItem_ChatWheel_Data_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_ChatWheel::CMsgShowcaseItem_ChatWheel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.chat_wheel_message_id_)*/4294967295u} {}
struct CMsgShowcaseItem_ChatWheelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_ChatWheelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_ChatWheelDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_ChatWheel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_ChatWheelDefaultTypeInternal _CMsgShowcaseItem_ChatWheel_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_Emoticon_Data::CMsgShowcaseItem_Emoticon_Data(
    ::_pbi::ConstantInitialized) {}
struct CMsgShowcaseItem_Emoticon_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_Emoticon_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_Emoticon_DataDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_Emoticon_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_Emoticon_DataDefaultTypeInternal _CMsgShowcaseItem_Emoticon_Data_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_Emoticon::CMsgShowcaseItem_Emoticon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.emoticon_id_)*/0u} {}
struct CMsgShowcaseItem_EmoticonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_EmoticonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_EmoticonDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_Emoticon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_EmoticonDefaultTypeInternal _CMsgShowcaseItem_Emoticon_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_Widget_Data::CMsgShowcaseItem_Widget_Data(
    ::_pbi::ConstantInitialized) {}
struct CMsgShowcaseItem_Widget_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_Widget_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_Widget_DataDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_Widget_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_Widget_DataDefaultTypeInternal _CMsgShowcaseItem_Widget_Data_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem_Widget::CMsgShowcaseItem_Widget(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.widget_)*/1} {}
struct CMsgShowcaseItem_WidgetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItem_WidgetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItem_WidgetDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem_Widget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItem_WidgetDefaultTypeInternal _CMsgShowcaseItem_Widget_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseBackground_Data::CMsgShowcaseBackground_Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.loading_screen_)*/nullptr} {}
struct CMsgShowcaseBackground_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseBackground_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseBackground_DataDefaultTypeInternal() {}
  union {
    CMsgShowcaseBackground_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseBackground_DataDefaultTypeInternal _CMsgShowcaseBackground_Data_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseBackground::CMsgShowcaseBackground(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.loading_screen_ref_)*/nullptr} {}
struct CMsgShowcaseBackgroundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseBackgroundDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseBackgroundDefaultTypeInternal() {}
  union {
    CMsgShowcaseBackground _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseBackgroundDefaultTypeInternal _CMsgShowcaseBackground_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItemData::CMsgShowcaseItemData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CMsgShowcaseItemDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItemDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItemDataDefaultTypeInternal() {}
  union {
    CMsgShowcaseItemData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItemDataDefaultTypeInternal _CMsgShowcaseItemData_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItemPosition::CMsgShowcaseItemPosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_x_)*/0
  , /*decltype(_impl_.position_y_)*/0
  , /*decltype(_impl_.scale_)*/0u} {}
struct CMsgShowcaseItemPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItemPositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItemPositionDefaultTypeInternal() {}
  union {
    CMsgShowcaseItemPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItemPositionDefaultTypeInternal _CMsgShowcaseItemPosition_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcaseItem::CMsgShowcaseItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_position_)*/nullptr
  , /*decltype(_impl_.item_data_)*/nullptr
  , /*decltype(_impl_.showcase_item_id_)*/0u
  , /*decltype(_impl_.state_)*/0} {}
struct CMsgShowcaseItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseItemDefaultTypeInternal() {}
  union {
    CMsgShowcaseItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseItemDefaultTypeInternal _CMsgShowcaseItem_default_instance_;
PROTOBUF_CONSTEXPR CMsgShowcase::CMsgShowcase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.showcase_items_)*/{}
  , /*decltype(_impl_.background_)*/nullptr} {}
struct CMsgShowcaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgShowcaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgShowcaseDefaultTypeInternal() {}
  union {
    CMsgShowcase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgShowcaseDefaultTypeInternal _CMsgShowcase_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseGetUserData::CMsgClientToGCShowcaseGetUserData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.showcase_type_)*/0} {}
struct CMsgClientToGCShowcaseGetUserDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseGetUserDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseGetUserDataDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseGetUserData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseGetUserDataDefaultTypeInternal _CMsgClientToGCShowcaseGetUserData_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseGetUserDataResponse::CMsgClientToGCShowcaseGetUserDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.showcase_)*/nullptr
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCShowcaseGetUserDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseGetUserDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseGetUserDataResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseGetUserDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseGetUserDataResponseDefaultTypeInternal _CMsgClientToGCShowcaseGetUserDataResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseSetUserData::CMsgClientToGCShowcaseSetUserData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.showcase_)*/nullptr
  , /*decltype(_impl_.showcase_type_)*/0} {}
struct CMsgClientToGCShowcaseSetUserDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseSetUserDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseSetUserDataDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseSetUserData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseSetUserDataDefaultTypeInternal _CMsgClientToGCShowcaseSetUserData_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseSetUserDataResponse::CMsgClientToGCShowcaseSetUserDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.validated_showcase_)*/nullptr
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgClientToGCShowcaseSetUserDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseSetUserDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCShowcaseSetUserDataResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCShowcaseSetUserDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCShowcaseSetUserDataResponseDefaultTypeInternal _CMsgClientToGCShowcaseSetUserDataResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[25];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[6];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto = nullptr;

const uint32_t TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseEconItemReference, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseEconItemReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseEconItemReference, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseEconItemReference, _impl_.original_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseEconItemReference, _impl_.definition_index_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Trophy_Data, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Trophy_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Trophy_Data, _impl_.trophy_score_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Trophy, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Trophy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Trophy, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Trophy, _impl_.trophy_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_EconItem_Data, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_EconItem_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_EconItem_Data, _impl_.econ_item_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_EconItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_EconItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_EconItem, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_EconItem, _impl_.ref_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero_Data, _impl_.econ_items_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Hero, _impl_.econ_item_refs_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch_Data, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch_Data, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch_Data, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch_Data, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch_Data, _impl_.game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch_Data, _impl_.outcome_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch_Data, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch_Data, _impl_.deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch_Data, _impl_.assists_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_PlayerMatch, _impl_.player_slot_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_ChatWheel_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_ChatWheel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_ChatWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_ChatWheel, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_ChatWheel, _impl_.chat_wheel_message_id_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Emoticon_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Emoticon, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Emoticon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Emoticon, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Emoticon, _impl_.emoticon_id_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Widget_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Widget, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Widget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Widget, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem_Widget, _impl_.widget_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseBackground_Data, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseBackground_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseBackground_Data, _impl_.loading_screen_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseBackground, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseBackground, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseBackground, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseBackground, _impl_.loading_screen_ref_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItemData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItemData, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItemData, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItemPosition, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItemPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItemPosition, _impl_.position_x_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItemPosition, _impl_.position_y_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItemPosition, _impl_.scale_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem, _impl_.showcase_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem, _impl_.item_position_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem, _impl_.item_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcaseItem, _impl_.state_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgShowcase, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgShowcase, _impl_.showcase_items_),
  PROTOBUF_FIELD_OFFSET(::CMsgShowcase, _impl_.background_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseGetUserData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseGetUserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseGetUserData, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseGetUserData, _impl_.showcase_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseGetUserDataResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseGetUserDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseGetUserDataResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseGetUserDataResponse, _impl_.showcase_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSetUserData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSetUserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSetUserData, _impl_.showcase_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSetUserData, _impl_.showcase_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSetUserDataResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSetUserDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSetUserDataResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCShowcaseSetUserDataResponse, _impl_.validated_showcase_),
  1,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::CMsgShowcaseEconItemReference)},
  { 12, 19, -1, sizeof(::CMsgShowcaseItem_Trophy_Data)},
  { 20, 28, -1, sizeof(::CMsgShowcaseItem_Trophy)},
  { 30, 37, -1, sizeof(::CMsgShowcaseItem_EconItem_Data)},
  { 38, 46, -1, sizeof(::CMsgShowcaseItem_EconItem)},
  { 48, -1, -1, sizeof(::CMsgShowcaseItem_Hero_Data)},
  { 55, 64, -1, sizeof(::CMsgShowcaseItem_Hero)},
  { 67, 81, -1, sizeof(::CMsgShowcaseItem_PlayerMatch_Data)},
  { 89, 98, -1, sizeof(::CMsgShowcaseItem_PlayerMatch)},
  { 101, -1, -1, sizeof(::CMsgShowcaseItem_ChatWheel_Data)},
  { 107, 115, -1, sizeof(::CMsgShowcaseItem_ChatWheel)},
  { 117, -1, -1, sizeof(::CMsgShowcaseItem_Emoticon_Data)},
  { 123, 131, -1, sizeof(::CMsgShowcaseItem_Emoticon)},
  { 133, -1, -1, sizeof(::CMsgShowcaseItem_Widget_Data)},
  { 139, 147, -1, sizeof(::CMsgShowcaseItem_Widget)},
  { 149, 156, -1, sizeof(::CMsgShowcaseBackground_Data)},
  { 157, 165, -1, sizeof(::CMsgShowcaseBackground)},
  { 167, -1, -1, sizeof(::CMsgShowcaseItemData)},
  { 184, 193, -1, sizeof(::CMsgShowcaseItemPosition)},
  { 196, 206, -1, sizeof(::CMsgShowcaseItem)},
  { 210, 218, -1, sizeof(::CMsgShowcase)},
  { 220, 228, -1, sizeof(::CMsgClientToGCShowcaseGetUserData)},
  { 230, 238, -1, sizeof(::CMsgClientToGCShowcaseGetUserDataResponse)},
  { 240, 248, -1, sizeof(::CMsgClientToGCShowcaseSetUserData)},
  { 250, 258, -1, sizeof(::CMsgClientToGCShowcaseSetUserDataResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgShowcaseEconItemReference_default_instance_._instance,
  &::_CMsgShowcaseItem_Trophy_Data_default_instance_._instance,
  &::_CMsgShowcaseItem_Trophy_default_instance_._instance,
  &::_CMsgShowcaseItem_EconItem_Data_default_instance_._instance,
  &::_CMsgShowcaseItem_EconItem_default_instance_._instance,
  &::_CMsgShowcaseItem_Hero_Data_default_instance_._instance,
  &::_CMsgShowcaseItem_Hero_default_instance_._instance,
  &::_CMsgShowcaseItem_PlayerMatch_Data_default_instance_._instance,
  &::_CMsgShowcaseItem_PlayerMatch_default_instance_._instance,
  &::_CMsgShowcaseItem_ChatWheel_Data_default_instance_._instance,
  &::_CMsgShowcaseItem_ChatWheel_default_instance_._instance,
  &::_CMsgShowcaseItem_Emoticon_Data_default_instance_._instance,
  &::_CMsgShowcaseItem_Emoticon_default_instance_._instance,
  &::_CMsgShowcaseItem_Widget_Data_default_instance_._instance,
  &::_CMsgShowcaseItem_Widget_default_instance_._instance,
  &::_CMsgShowcaseBackground_Data_default_instance_._instance,
  &::_CMsgShowcaseBackground_default_instance_._instance,
  &::_CMsgShowcaseItemData_default_instance_._instance,
  &::_CMsgShowcaseItemPosition_default_instance_._instance,
  &::_CMsgShowcaseItem_default_instance_._instance,
  &::_CMsgShowcase_default_instance_._instance,
  &::_CMsgClientToGCShowcaseGetUserData_default_instance_._instance,
  &::_CMsgClientToGCShowcaseGetUserDataResponse_default_instance_._instance,
  &::_CMsgClientToGCShowcaseSetUserData_default_instance_._instance,
  &::_CMsgClientToGCShowcaseSetUserDataResponse_default_instance_._instance,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fclient_5fshowcase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%dota_gcmessages_client_showcase.proto\032"
  "\023steammessages.proto\032\027dota_shared_enums."
  "proto\032\034dota_gcmessages_common.proto\032\034dot"
  "a_gcmessages_webapi.proto\032\026gcsdk_gcmessa"
  "ges.proto\032\025base_gcmessages.proto\032\025econ_g"
  "cmessages.proto\032\034dota_gcmessages_client."
  "proto\032\025valveextensions.proto\"Z\n\035CMsgShow"
  "caseEconItemReference\022\n\n\002id\030\001 \001(\004\022\023\n\013ori"
  "ginal_id\030\002 \001(\004\022\030\n\020definition_index\030\003 \001(\r"
  "\"w\n\027CMsgShowcaseItem_Trophy\022+\n\004data\030\001 \001("
  "\0132\035.CMsgShowcaseItem_Trophy.Data\022\021\n\ttrop"
  "hy_id\030\002 \001(\r\032\034\n\004Data\022\024\n\014trophy_score\030\001 \001("
  "\r\"\240\001\n\031CMsgShowcaseItem_EconItem\022-\n\004data\030"
  "\001 \001(\0132\037.CMsgShowcaseItem_EconItem.Data\022+"
  "\n\003ref\030\002 \001(\0132\036.CMsgShowcaseEconItemRefere"
  "nce\032\'\n\004Data\022\037\n\tecon_item\030\001 \001(\0132\014.CSOEcon"
  "Item\"\265\001\n\025CMsgShowcaseItem_Hero\022)\n\004data\030\001"
  " \001(\0132\033.CMsgShowcaseItem_Hero.Data\022\017\n\007her"
  "o_id\030\002 \001(\r\0226\n\016econ_item_refs\030\003 \003(\0132\036.CMs"
  "gShowcaseEconItemReference\032(\n\004Data\022 \n\nec"
  "on_items\030\001 \003(\0132\014.CSOEconItem\"\265\003\n\034CMsgSho"
  "wcaseItem_PlayerMatch\0220\n\004data\030\001 \001(\0132\".CM"
  "sgShowcaseItem_PlayerMatch.Data\022\020\n\010match"
  "_id\030\002 \001(\004\022\023\n\013player_slot\030\003 \001(\r\032\356\001\n\004Data\022"
  "\017\n\007hero_id\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\r\022\020\n\010d"
  "uration\030\003 \001(\r\0225\n\tgame_mode\030\004 \001(\0162\016.DOTA_"
  "GameMode:\022DOTA_GAMEMODE_NONE\022I\n\007outcome\030"
  "\005 \001(\0162,.CMsgShowcaseItem_PlayerMatch.EPl"
  "ayerOutcome:\nk_eInvalid\022\r\n\005kills\030\006 \001(\r\022\016"
  "\n\006deaths\030\007 \001(\r\022\017\n\007assists\030\010 \001(\r\"K\n\016EPlay"
  "erOutcome\022\016\n\nk_eInvalid\020\000\022\n\n\006k_eWin\020\001\022\013\n"
  "\007k_eLoss\020\002\022\020\n\014k_eNotScored\020\003\"\177\n\032CMsgShow"
  "caseItem_ChatWheel\022.\n\004data\030\001 \001(\0132 .CMsgS"
  "howcaseItem_ChatWheel.Data\022)\n\025chat_wheel"
  "_message_id\030\002 \001(\r:\n4294967295\032\006\n\004Data\"g\n"
  "\031CMsgShowcaseItem_Emoticon\022-\n\004data\030\001 \001(\013"
  "2\037.CMsgShowcaseItem_Emoticon.Data\022\023\n\013emo"
  "ticon_id\030\002 \001(\r\032\006\n\004Data\"\321\001\n\027CMsgShowcaseI"
  "tem_Widget\022+\n\004data\030\001 \001(\0132\035.CMsgShowcaseI"
  "tem_Widget.Data\022>\n\006widget\030\002 \001(\0162 .CMsgSh"
  "owcaseItem_Widget.EWidget:\014kSpiderGraph\032"
  "\006\n\004Data\"A\n\007EWidget\022\020\n\014kSpiderGraph\020\001\022\r\n\t"
  "kUserFeed\020\002\022\025\n\021kAllHeroChallenge\020\003\"\256\001\n\026C"
  "MsgShowcaseBackground\022*\n\004data\030\001 \001(\0132\034.CM"
  "sgShowcaseBackground.Data\022:\n\022loading_scr"
  "een_ref\030\002 \001(\0132\036.CMsgShowcaseEconItemRefe"
  "rence\032,\n\004Data\022$\n\016loading_screen\030\001 \001(\0132\014."
  "CSOEconItem\"\200\004\n\024CMsgShowcaseItemData\022*\n\006"
  "trophy\030\001 \001(\0132\030.CMsgShowcaseItem_TrophyH\000"
  "\0224\n\016econ_item_icon\030\002 \001(\0132\032.CMsgShowcaseI"
  "tem_EconItemH\000\022-\n\007sticker\030\003 \001(\0132\032.CMsgSh"
  "owcaseItem_EconItemH\000\022,\n\nhero_model\030\004 \001("
  "\0132\026.CMsgShowcaseItem_HeroH\000\0225\n\014player_ma"
  "tch\030\005 \001(\0132\035.CMsgShowcaseItem_PlayerMatch"
  "H\000\0221\n\nchat_wheel\030\006 \001(\0132\033.CMsgShowcaseIte"
  "m_ChatWheelH\000\022,\n\005spray\030\007 \001(\0132\033.CMsgShowc"
  "aseItem_ChatWheelH\000\022.\n\010emoticon\030\010 \001(\0132\032."
  "CMsgShowcaseItem_EmoticonH\000\022*\n\006widget\030\t "
  "\001(\0132\030.CMsgShowcaseItem_WidgetH\000\022-\n\nbackg"
  "round\030d \001(\0132\027.CMsgShowcaseBackgroundH\000B\006"
  "\n\004item\"Q\n\030CMsgShowcaseItemPosition\022\022\n\npo"
  "sition_x\030\001 \001(\005\022\022\n\nposition_y\030\002 \001(\005\022\r\n\005sc"
  "ale\030\003 \001(\r\"\305\001\n\020CMsgShowcaseItem\022\030\n\020showca"
  "se_item_id\030\001 \001(\r\0220\n\ritem_position\030\002 \001(\0132"
  "\031.CMsgShowcaseItemPosition\022(\n\titem_data\030"
  "\003 \001(\0132\025.CMsgShowcaseItemData\022;\n\005state\030\004 "
  "\001(\0162\023.EShowcaseItemState:\027k_eShowcaseIte"
  "mState_Ok\"`\n\014CMsgShowcase\022)\n\016showcase_it"
  "ems\030\001 \003(\0132\021.CMsgShowcaseItem\022%\n\nbackgrou"
  "nd\030\003 \001(\0132\021.CMsgShowcaseItem\"w\n!CMsgClien"
  "tToGCShowcaseGetUserData\022\022\n\naccount_id\030\001"
  " \001(\r\022>\n\rshowcase_type\030\002 \001(\0162\016.EShowcaseT"
  "ype:\027k_eShowcaseType_Invalid\"\212\002\n)CMsgCli"
  "entToGCShowcaseGetUserDataResponse\022X\n\010re"
  "sponse\030\001 \001(\01624.CMsgClientToGCShowcaseGet"
  "UserDataResponse.EResponse:\020k_eInternalE"
  "rror\022\037\n\010showcase\030\002 \001(\0132\r.CMsgShowcase\"b\n"
  "\tEResponse\022\024\n\020k_eInternalError\020\000\022\016\n\nk_eS"
  "uccess\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013k_eDisabled\020"
  "\003\022\016\n\nk_eTimeout\020\004\"\204\001\n!CMsgClientToGCShow"
  "caseSetUserData\022>\n\rshowcase_type\030\001 \001(\0162\016"
  ".EShowcaseType:\027k_eShowcaseType_Invalid\022"
  "\037\n\010showcase\030\002 \001(\0132\r.CMsgShowcase\"\244\002\n)CMs"
  "gClientToGCShowcaseSetUserDataResponse\022X"
  "\n\010response\030\001 \001(\01624.CMsgClientToGCShowcas"
  "eSetUserDataResponse.EResponse:\020k_eInter"
  "nalError\022)\n\022validated_showcase\030\002 \001(\0132\r.C"
  "MsgShowcase\"r\n\tEResponse\022\024\n\020k_eInternalE"
  "rror\020\000\022\016\n\nk_eSuccess\020\001\022\016\n\nk_eTooBusy\020\002\022\017"
  "\n\013k_eDisabled\020\003\022\016\n\nk_eTimeout\020\004\022\016\n\nk_eIn"
  "valid\020\005*j\n\rEShowcaseType\022\033\n\027k_eShowcaseT"
  "ype_Invalid\020\000\022\033\n\027k_eShowcaseType_Profile"
  "\020\001\022\037\n\033k_eShowcaseType_MiniProfile\020\002*\237\001\n\022"
  "EShowcaseItemState\022\033\n\027k_eShowcaseItemSta"
  "te_Ok\020\000\022(\n$k_eShowcaseItemState_Validity"
  "Unknown\020\001\022 \n\034k_eShowcaseItemState_Failur"
  "e\020\002\022 \n\034k_eShowcaseItemState_Invalid\020\003"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_deps[9] = {
  &::descriptor_table_base_5fgcmessages_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fclient_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fcommon_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fwebapi_2eproto,
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
  &::descriptor_table_econ_5fgcmessages_2eproto,
  &::descriptor_table_gcsdk_5fgcmessages_2eproto,
  &::descriptor_table_steammessages_2eproto,
  &::descriptor_table_valveextensions_2eproto,
};
static ::_pbi::once_flag descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto = {
    false, false, 3877, descriptor_table_protodef_dota_5fgcmessages_5fclient_5fshowcase_2eproto,
    "dota_gcmessages_client_showcase.proto",
    &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once, descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_deps, 9, 25,
    schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto::offsets,
    file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto,
    file_level_service_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter() {
  return &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fclient_5fshowcase_2eproto(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[0];
}
bool CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgShowcaseItem_PlayerMatch_EPlayerOutcome CMsgShowcaseItem_PlayerMatch::k_eInvalid;
constexpr CMsgShowcaseItem_PlayerMatch_EPlayerOutcome CMsgShowcaseItem_PlayerMatch::k_eWin;
constexpr CMsgShowcaseItem_PlayerMatch_EPlayerOutcome CMsgShowcaseItem_PlayerMatch::k_eLoss;
constexpr CMsgShowcaseItem_PlayerMatch_EPlayerOutcome CMsgShowcaseItem_PlayerMatch::k_eNotScored;
constexpr CMsgShowcaseItem_PlayerMatch_EPlayerOutcome CMsgShowcaseItem_PlayerMatch::EPlayerOutcome_MIN;
constexpr CMsgShowcaseItem_PlayerMatch_EPlayerOutcome CMsgShowcaseItem_PlayerMatch::EPlayerOutcome_MAX;
constexpr int CMsgShowcaseItem_PlayerMatch::EPlayerOutcome_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgShowcaseItem_Widget_EWidget_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[1];
}
bool CMsgShowcaseItem_Widget_EWidget_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgShowcaseItem_Widget_EWidget CMsgShowcaseItem_Widget::kSpiderGraph;
constexpr CMsgShowcaseItem_Widget_EWidget CMsgShowcaseItem_Widget::kUserFeed;
constexpr CMsgShowcaseItem_Widget_EWidget CMsgShowcaseItem_Widget::kAllHeroChallenge;
constexpr CMsgShowcaseItem_Widget_EWidget CMsgShowcaseItem_Widget::EWidget_MIN;
constexpr CMsgShowcaseItem_Widget_EWidget CMsgShowcaseItem_Widget::EWidget_MAX;
constexpr int CMsgShowcaseItem_Widget::EWidget_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseGetUserDataResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[2];
}
bool CMsgClientToGCShowcaseGetUserDataResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCShowcaseGetUserDataResponse_EResponse CMsgClientToGCShowcaseGetUserDataResponse::k_eInternalError;
constexpr CMsgClientToGCShowcaseGetUserDataResponse_EResponse CMsgClientToGCShowcaseGetUserDataResponse::k_eSuccess;
constexpr CMsgClientToGCShowcaseGetUserDataResponse_EResponse CMsgClientToGCShowcaseGetUserDataResponse::k_eTooBusy;
constexpr CMsgClientToGCShowcaseGetUserDataResponse_EResponse CMsgClientToGCShowcaseGetUserDataResponse::k_eDisabled;
constexpr CMsgClientToGCShowcaseGetUserDataResponse_EResponse CMsgClientToGCShowcaseGetUserDataResponse::k_eTimeout;
constexpr CMsgClientToGCShowcaseGetUserDataResponse_EResponse CMsgClientToGCShowcaseGetUserDataResponse::EResponse_MIN;
constexpr CMsgClientToGCShowcaseGetUserDataResponse_EResponse CMsgClientToGCShowcaseGetUserDataResponse::EResponse_MAX;
constexpr int CMsgClientToGCShowcaseGetUserDataResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseSetUserDataResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[3];
}
bool CMsgClientToGCShowcaseSetUserDataResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse::k_eInternalError;
constexpr CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse::k_eSuccess;
constexpr CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse::k_eTooBusy;
constexpr CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse::k_eDisabled;
constexpr CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse::k_eTimeout;
constexpr CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse::k_eInvalid;
constexpr CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse::EResponse_MIN;
constexpr CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse::EResponse_MAX;
constexpr int CMsgClientToGCShowcaseSetUserDataResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EShowcaseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[4];
}
bool EShowcaseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EShowcaseItemState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fshowcase_2eproto[5];
}
bool EShowcaseItemState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgShowcaseEconItemReference::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseEconItemReference>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_original_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_definition_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgShowcaseEconItemReference::CMsgShowcaseEconItemReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseEconItemReference)
}
CMsgShowcaseEconItemReference::CMsgShowcaseEconItemReference(const CMsgShowcaseEconItemReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseEconItemReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.original_id_){}
    , decltype(_impl_.definition_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.definition_index_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.definition_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseEconItemReference)
}

inline void CMsgShowcaseEconItemReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.original_id_){uint64_t{0u}}
    , decltype(_impl_.definition_index_){0u}
  };
}

CMsgShowcaseEconItemReference::~CMsgShowcaseEconItemReference() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseEconItemReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseEconItemReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgShowcaseEconItemReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseEconItemReference::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseEconItemReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.definition_index_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.definition_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseEconItemReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 original_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_original_id(&has_bits);
          _impl_.original_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 definition_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_definition_index(&has_bits);
          _impl_.definition_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseEconItemReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseEconItemReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional uint64 original_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_original_id(), target);
  }

  // optional uint32 definition_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_definition_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseEconItemReference)
  return target;
}

size_t CMsgShowcaseEconItemReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseEconItemReference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
    }

    // optional uint64 original_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_original_id());
    }

    // optional uint32 definition_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_definition_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseEconItemReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseEconItemReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseEconItemReference::GetClassData() const { return &_class_data_; }


void CMsgShowcaseEconItemReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseEconItemReference*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseEconItemReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseEconItemReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.original_id_ = from._impl_.original_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.definition_index_ = from._impl_.definition_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseEconItemReference::CopyFrom(const CMsgShowcaseEconItemReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseEconItemReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseEconItemReference::IsInitialized() const {
  return true;
}

void CMsgShowcaseEconItemReference::InternalSwap(CMsgShowcaseEconItemReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseEconItemReference, _impl_.definition_index_)
      + sizeof(CMsgShowcaseEconItemReference::_impl_.definition_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseEconItemReference, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseEconItemReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[0]);
}

// ===================================================================

class CMsgShowcaseItem_Trophy_Data::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_Trophy_Data>()._impl_._has_bits_);
  static void set_has_trophy_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgShowcaseItem_Trophy_Data::CMsgShowcaseItem_Trophy_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_Trophy.Data)
}
CMsgShowcaseItem_Trophy_Data::CMsgShowcaseItem_Trophy_Data(const CMsgShowcaseItem_Trophy_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_Trophy_Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trophy_score_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.trophy_score_ = from._impl_.trophy_score_;
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_Trophy.Data)
}

inline void CMsgShowcaseItem_Trophy_Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trophy_score_){0u}
  };
}

CMsgShowcaseItem_Trophy_Data::~CMsgShowcaseItem_Trophy_Data() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_Trophy.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_Trophy_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgShowcaseItem_Trophy_Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_Trophy_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_Trophy.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trophy_score_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_Trophy_Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 trophy_score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_trophy_score(&has_bits);
          _impl_.trophy_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_Trophy_Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_Trophy.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 trophy_score = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_trophy_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_Trophy.Data)
  return target;
}

size_t CMsgShowcaseItem_Trophy_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_Trophy.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 trophy_score = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_trophy_score());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_Trophy_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_Trophy_Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_Trophy_Data::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_Trophy_Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_Trophy_Data*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_Trophy_Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_Trophy.Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_trophy_score()) {
    _this->_internal_set_trophy_score(from._internal_trophy_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_Trophy_Data::CopyFrom(const CMsgShowcaseItem_Trophy_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_Trophy.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_Trophy_Data::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_Trophy_Data::InternalSwap(CMsgShowcaseItem_Trophy_Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.trophy_score_, other->_impl_.trophy_score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_Trophy_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[1]);
}

// ===================================================================

class CMsgShowcaseItem_Trophy::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_Trophy>()._impl_._has_bits_);
  static const ::CMsgShowcaseItem_Trophy_Data& data(const CMsgShowcaseItem_Trophy* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trophy_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgShowcaseItem_Trophy_Data&
CMsgShowcaseItem_Trophy::_Internal::data(const CMsgShowcaseItem_Trophy* msg) {
  return *msg->_impl_.data_;
}
CMsgShowcaseItem_Trophy::CMsgShowcaseItem_Trophy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_Trophy)
}
CMsgShowcaseItem_Trophy::CMsgShowcaseItem_Trophy(const CMsgShowcaseItem_Trophy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_Trophy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.trophy_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::CMsgShowcaseItem_Trophy_Data(*from._impl_.data_);
  }
  _this->_impl_.trophy_id_ = from._impl_.trophy_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_Trophy)
}

inline void CMsgShowcaseItem_Trophy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.trophy_id_){0u}
  };
}

CMsgShowcaseItem_Trophy::~CMsgShowcaseItem_Trophy() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_Trophy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_Trophy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void CMsgShowcaseItem_Trophy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_Trophy::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_Trophy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_.trophy_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_Trophy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgShowcaseItem_Trophy.Data data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 trophy_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_trophy_id(&has_bits);
          _impl_.trophy_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_Trophy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_Trophy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgShowcaseItem_Trophy.Data data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // optional uint32 trophy_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_trophy_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_Trophy)
  return target;
}

size_t CMsgShowcaseItem_Trophy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_Trophy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgShowcaseItem_Trophy.Data data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

    // optional uint32 trophy_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_trophy_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_Trophy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_Trophy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_Trophy::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_Trophy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_Trophy*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_Trophy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_Trophy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_data()->::CMsgShowcaseItem_Trophy_Data::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.trophy_id_ = from._impl_.trophy_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_Trophy::CopyFrom(const CMsgShowcaseItem_Trophy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_Trophy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_Trophy::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_Trophy::InternalSwap(CMsgShowcaseItem_Trophy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_Trophy, _impl_.trophy_id_)
      + sizeof(CMsgShowcaseItem_Trophy::_impl_.trophy_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_Trophy, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_Trophy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[2]);
}

// ===================================================================

class CMsgShowcaseItem_EconItem_Data::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_EconItem_Data>()._impl_._has_bits_);
  static const ::CSOEconItem& econ_item(const CMsgShowcaseItem_EconItem_Data* msg);
  static void set_has_econ_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CSOEconItem&
CMsgShowcaseItem_EconItem_Data::_Internal::econ_item(const CMsgShowcaseItem_EconItem_Data* msg) {
  return *msg->_impl_.econ_item_;
}
void CMsgShowcaseItem_EconItem_Data::clear_econ_item() {
  if (_impl_.econ_item_ != nullptr) _impl_.econ_item_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgShowcaseItem_EconItem_Data::CMsgShowcaseItem_EconItem_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_EconItem.Data)
}
CMsgShowcaseItem_EconItem_Data::CMsgShowcaseItem_EconItem_Data(const CMsgShowcaseItem_EconItem_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_EconItem_Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.econ_item_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_econ_item()) {
    _this->_impl_.econ_item_ = new ::CSOEconItem(*from._impl_.econ_item_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_EconItem.Data)
}

inline void CMsgShowcaseItem_EconItem_Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.econ_item_){nullptr}
  };
}

CMsgShowcaseItem_EconItem_Data::~CMsgShowcaseItem_EconItem_Data() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_EconItem.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_EconItem_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.econ_item_;
}

void CMsgShowcaseItem_EconItem_Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_EconItem_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_EconItem.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.econ_item_ != nullptr);
    _impl_.econ_item_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_EconItem_Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CSOEconItem econ_item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_econ_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_EconItem_Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_EconItem.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CSOEconItem econ_item = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::econ_item(this),
        _Internal::econ_item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_EconItem.Data)
  return target;
}

size_t CMsgShowcaseItem_EconItem_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_EconItem.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CSOEconItem econ_item = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.econ_item_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_EconItem_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_EconItem_Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_EconItem_Data::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_EconItem_Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_EconItem_Data*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_EconItem_Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_EconItem.Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_econ_item()) {
    _this->_internal_mutable_econ_item()->::CSOEconItem::MergeFrom(
        from._internal_econ_item());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_EconItem_Data::CopyFrom(const CMsgShowcaseItem_EconItem_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_EconItem.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_EconItem_Data::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_EconItem_Data::InternalSwap(CMsgShowcaseItem_EconItem_Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.econ_item_, other->_impl_.econ_item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_EconItem_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[3]);
}

// ===================================================================

class CMsgShowcaseItem_EconItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_EconItem>()._impl_._has_bits_);
  static const ::CMsgShowcaseItem_EconItem_Data& data(const CMsgShowcaseItem_EconItem* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgShowcaseEconItemReference& ref(const CMsgShowcaseItem_EconItem* msg);
  static void set_has_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgShowcaseItem_EconItem_Data&
CMsgShowcaseItem_EconItem::_Internal::data(const CMsgShowcaseItem_EconItem* msg) {
  return *msg->_impl_.data_;
}
const ::CMsgShowcaseEconItemReference&
CMsgShowcaseItem_EconItem::_Internal::ref(const CMsgShowcaseItem_EconItem* msg) {
  return *msg->_impl_.ref_;
}
CMsgShowcaseItem_EconItem::CMsgShowcaseItem_EconItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_EconItem)
}
CMsgShowcaseItem_EconItem::CMsgShowcaseItem_EconItem(const CMsgShowcaseItem_EconItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_EconItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.ref_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::CMsgShowcaseItem_EconItem_Data(*from._impl_.data_);
  }
  if (from._internal_has_ref()) {
    _this->_impl_.ref_ = new ::CMsgShowcaseEconItemReference(*from._impl_.ref_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_EconItem)
}

inline void CMsgShowcaseItem_EconItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.ref_){nullptr}
  };
}

CMsgShowcaseItem_EconItem::~CMsgShowcaseItem_EconItem() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_EconItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_EconItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.ref_;
}

void CMsgShowcaseItem_EconItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_EconItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_EconItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.ref_ != nullptr);
      _impl_.ref_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_EconItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgShowcaseItem_EconItem.Data data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcaseEconItemReference ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_EconItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_EconItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgShowcaseItem_EconItem.Data data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgShowcaseEconItemReference ref = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ref(this),
        _Internal::ref(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_EconItem)
  return target;
}

size_t CMsgShowcaseItem_EconItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_EconItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgShowcaseItem_EconItem.Data data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

    // optional .CMsgShowcaseEconItemReference ref = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ref_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_EconItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_EconItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_EconItem::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_EconItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_EconItem*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_EconItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_EconItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_data()->::CMsgShowcaseItem_EconItem_Data::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_ref()->::CMsgShowcaseEconItemReference::MergeFrom(
          from._internal_ref());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_EconItem::CopyFrom(const CMsgShowcaseItem_EconItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_EconItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_EconItem::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_EconItem::InternalSwap(CMsgShowcaseItem_EconItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_EconItem, _impl_.ref_)
      + sizeof(CMsgShowcaseItem_EconItem::_impl_.ref_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_EconItem, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_EconItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[4]);
}

// ===================================================================

class CMsgShowcaseItem_Hero_Data::_Internal {
 public:
};

void CMsgShowcaseItem_Hero_Data::clear_econ_items() {
  _impl_.econ_items_.Clear();
}
CMsgShowcaseItem_Hero_Data::CMsgShowcaseItem_Hero_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_Hero.Data)
}
CMsgShowcaseItem_Hero_Data::CMsgShowcaseItem_Hero_Data(const CMsgShowcaseItem_Hero_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_Hero_Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.econ_items_){from._impl_.econ_items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_Hero.Data)
}

inline void CMsgShowcaseItem_Hero_Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.econ_items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgShowcaseItem_Hero_Data::~CMsgShowcaseItem_Hero_Data() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_Hero.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_Hero_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.econ_items_.~RepeatedPtrField();
}

void CMsgShowcaseItem_Hero_Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_Hero_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_Hero.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.econ_items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_Hero_Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CSOEconItem econ_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_econ_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_Hero_Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_Hero.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CSOEconItem econ_items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_econ_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_econ_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_Hero.Data)
  return target;
}

size_t CMsgShowcaseItem_Hero_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_Hero.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSOEconItem econ_items = 1;
  total_size += 1UL * this->_internal_econ_items_size();
  for (const auto& msg : this->_impl_.econ_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_Hero_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_Hero_Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_Hero_Data::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_Hero_Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_Hero_Data*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_Hero_Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_Hero.Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.econ_items_.MergeFrom(from._impl_.econ_items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_Hero_Data::CopyFrom(const CMsgShowcaseItem_Hero_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_Hero.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_Hero_Data::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_Hero_Data::InternalSwap(CMsgShowcaseItem_Hero_Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.econ_items_.InternalSwap(&other->_impl_.econ_items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_Hero_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[5]);
}

// ===================================================================

class CMsgShowcaseItem_Hero::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_Hero>()._impl_._has_bits_);
  static const ::CMsgShowcaseItem_Hero_Data& data(const CMsgShowcaseItem_Hero* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgShowcaseItem_Hero_Data&
CMsgShowcaseItem_Hero::_Internal::data(const CMsgShowcaseItem_Hero* msg) {
  return *msg->_impl_.data_;
}
CMsgShowcaseItem_Hero::CMsgShowcaseItem_Hero(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_Hero)
}
CMsgShowcaseItem_Hero::CMsgShowcaseItem_Hero(const CMsgShowcaseItem_Hero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_Hero* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.econ_item_refs_){from._impl_.econ_item_refs_}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.hero_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::CMsgShowcaseItem_Hero_Data(*from._impl_.data_);
  }
  _this->_impl_.hero_id_ = from._impl_.hero_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_Hero)
}

inline void CMsgShowcaseItem_Hero::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.econ_item_refs_){arena}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.hero_id_){0u}
  };
}

CMsgShowcaseItem_Hero::~CMsgShowcaseItem_Hero() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_Hero)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_Hero::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.econ_item_refs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.data_;
}

void CMsgShowcaseItem_Hero::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_Hero::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_Hero)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.econ_item_refs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_Hero::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgShowcaseItem_Hero.Data data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgShowcaseEconItemReference econ_item_refs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_econ_item_refs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_Hero::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_Hero)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgShowcaseItem_Hero.Data data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  // repeated .CMsgShowcaseEconItemReference econ_item_refs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_econ_item_refs_size()); i < n; i++) {
    const auto& repfield = this->_internal_econ_item_refs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_Hero)
  return target;
}

size_t CMsgShowcaseItem_Hero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_Hero)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgShowcaseEconItemReference econ_item_refs = 3;
  total_size += 1UL * this->_internal_econ_item_refs_size();
  for (const auto& msg : this->_impl_.econ_item_refs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgShowcaseItem_Hero.Data data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_Hero::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_Hero::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_Hero::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_Hero::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_Hero*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_Hero&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_Hero)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.econ_item_refs_.MergeFrom(from._impl_.econ_item_refs_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_data()->::CMsgShowcaseItem_Hero_Data::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_Hero::CopyFrom(const CMsgShowcaseItem_Hero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_Hero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_Hero::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_Hero::InternalSwap(CMsgShowcaseItem_Hero* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.econ_item_refs_.InternalSwap(&other->_impl_.econ_item_refs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_Hero, _impl_.hero_id_)
      + sizeof(CMsgShowcaseItem_Hero::_impl_.hero_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_Hero, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_Hero::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[6]);
}

// ===================================================================

class CMsgShowcaseItem_PlayerMatch_Data::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_PlayerMatch_Data>()._impl_._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_outcome(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgShowcaseItem_PlayerMatch_Data::CMsgShowcaseItem_PlayerMatch_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_PlayerMatch.Data)
}
CMsgShowcaseItem_PlayerMatch_Data::CMsgShowcaseItem_PlayerMatch_Data(const CMsgShowcaseItem_PlayerMatch_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_PlayerMatch_Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.game_mode_){}
    , decltype(_impl_.outcome_){}
    , decltype(_impl_.kills_){}
    , decltype(_impl_.deaths_){}
    , decltype(_impl_.assists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hero_id_, &from._impl_.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.assists_) -
    reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.assists_));
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_PlayerMatch.Data)
}

inline void CMsgShowcaseItem_PlayerMatch_Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.timestamp_){0u}
    , decltype(_impl_.duration_){0u}
    , decltype(_impl_.game_mode_){0}
    , decltype(_impl_.outcome_){0}
    , decltype(_impl_.kills_){0u}
    , decltype(_impl_.deaths_){0u}
    , decltype(_impl_.assists_){0u}
  };
}

CMsgShowcaseItem_PlayerMatch_Data::~CMsgShowcaseItem_PlayerMatch_Data() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_PlayerMatch.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_PlayerMatch_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgShowcaseItem_PlayerMatch_Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_PlayerMatch_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_PlayerMatch.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.assists_) -
        reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.assists_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_PlayerMatch_Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GameMode_IsValid(val))) {
            _internal_set_game_mode(static_cast<::DOTA_GameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcaseItem_PlayerMatch.EPlayerOutcome outcome = 5 [default = k_eInvalid];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_IsValid(val))) {
            _internal_set_outcome(static_cast<::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kills = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_kills(&has_bits);
          _impl_.kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deaths = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_deaths(&has_bits);
          _impl_.deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 assists = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_assists(&has_bits);
          _impl_.assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_PlayerMatch_Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_PlayerMatch.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_duration(), target);
  }

  // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_game_mode(), target);
  }

  // optional .CMsgShowcaseItem_PlayerMatch.EPlayerOutcome outcome = 5 [default = k_eInvalid];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_outcome(), target);
  }

  // optional uint32 kills = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_assists(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_PlayerMatch.Data)
  return target;
}

size_t CMsgShowcaseItem_PlayerMatch_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_PlayerMatch.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

    // optional uint32 duration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
    }

    // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_game_mode());
    }

    // optional .CMsgShowcaseItem_PlayerMatch.EPlayerOutcome outcome = 5 [default = k_eInvalid];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_outcome());
    }

    // optional uint32 kills = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kills());
    }

    // optional uint32 deaths = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deaths());
    }

    // optional uint32 assists = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_assists());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_PlayerMatch_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_PlayerMatch_Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_PlayerMatch_Data::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_PlayerMatch_Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_PlayerMatch_Data*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_PlayerMatch_Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_PlayerMatch.Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.game_mode_ = from._impl_.game_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.outcome_ = from._impl_.outcome_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.kills_ = from._impl_.kills_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.deaths_ = from._impl_.deaths_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.assists_ = from._impl_.assists_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_PlayerMatch_Data::CopyFrom(const CMsgShowcaseItem_PlayerMatch_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_PlayerMatch.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_PlayerMatch_Data::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_PlayerMatch_Data::InternalSwap(CMsgShowcaseItem_PlayerMatch_Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_PlayerMatch_Data, _impl_.assists_)
      + sizeof(CMsgShowcaseItem_PlayerMatch_Data::_impl_.assists_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_PlayerMatch_Data, _impl_.hero_id_)>(
          reinterpret_cast<char*>(&_impl_.hero_id_),
          reinterpret_cast<char*>(&other->_impl_.hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_PlayerMatch_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[7]);
}

// ===================================================================

class CMsgShowcaseItem_PlayerMatch::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_PlayerMatch>()._impl_._has_bits_);
  static const ::CMsgShowcaseItem_PlayerMatch_Data& data(const CMsgShowcaseItem_PlayerMatch* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgShowcaseItem_PlayerMatch_Data&
CMsgShowcaseItem_PlayerMatch::_Internal::data(const CMsgShowcaseItem_PlayerMatch* msg) {
  return *msg->_impl_.data_;
}
CMsgShowcaseItem_PlayerMatch::CMsgShowcaseItem_PlayerMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_PlayerMatch)
}
CMsgShowcaseItem_PlayerMatch::CMsgShowcaseItem_PlayerMatch(const CMsgShowcaseItem_PlayerMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_PlayerMatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.player_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::CMsgShowcaseItem_PlayerMatch_Data(*from._impl_.data_);
  }
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_slot_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.player_slot_));
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_PlayerMatch)
}

inline void CMsgShowcaseItem_PlayerMatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.player_slot_){0u}
  };
}

CMsgShowcaseItem_PlayerMatch::~CMsgShowcaseItem_PlayerMatch() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_PlayerMatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_PlayerMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void CMsgShowcaseItem_PlayerMatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_PlayerMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_PlayerMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.player_slot_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.player_slot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_PlayerMatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgShowcaseItem_PlayerMatch.Data data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_PlayerMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_PlayerMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgShowcaseItem_PlayerMatch.Data data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional uint32 player_slot = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_player_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_PlayerMatch)
  return target;
}

size_t CMsgShowcaseItem_PlayerMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_PlayerMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgShowcaseItem_PlayerMatch.Data data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 player_slot = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_PlayerMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_PlayerMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_PlayerMatch::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_PlayerMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_PlayerMatch*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_PlayerMatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_PlayerMatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_data()->::CMsgShowcaseItem_PlayerMatch_Data::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_PlayerMatch::CopyFrom(const CMsgShowcaseItem_PlayerMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_PlayerMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_PlayerMatch::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_PlayerMatch::InternalSwap(CMsgShowcaseItem_PlayerMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_PlayerMatch, _impl_.player_slot_)
      + sizeof(CMsgShowcaseItem_PlayerMatch::_impl_.player_slot_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_PlayerMatch, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_PlayerMatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[8]);
}

// ===================================================================

class CMsgShowcaseItem_ChatWheel_Data::_Internal {
 public:
};

CMsgShowcaseItem_ChatWheel_Data::CMsgShowcaseItem_ChatWheel_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_ChatWheel.Data)
}
CMsgShowcaseItem_ChatWheel_Data::CMsgShowcaseItem_ChatWheel_Data(const CMsgShowcaseItem_ChatWheel_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgShowcaseItem_ChatWheel_Data* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_ChatWheel.Data)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_ChatWheel_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_ChatWheel_Data::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_ChatWheel_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[9]);
}

// ===================================================================

class CMsgShowcaseItem_ChatWheel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_ChatWheel>()._impl_._has_bits_);
  static const ::CMsgShowcaseItem_ChatWheel_Data& data(const CMsgShowcaseItem_ChatWheel* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chat_wheel_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgShowcaseItem_ChatWheel_Data&
CMsgShowcaseItem_ChatWheel::_Internal::data(const CMsgShowcaseItem_ChatWheel* msg) {
  return *msg->_impl_.data_;
}
CMsgShowcaseItem_ChatWheel::CMsgShowcaseItem_ChatWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_ChatWheel)
}
CMsgShowcaseItem_ChatWheel::CMsgShowcaseItem_ChatWheel(const CMsgShowcaseItem_ChatWheel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_ChatWheel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.chat_wheel_message_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::CMsgShowcaseItem_ChatWheel_Data(*from._impl_.data_);
  }
  _this->_impl_.chat_wheel_message_id_ = from._impl_.chat_wheel_message_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_ChatWheel)
}

inline void CMsgShowcaseItem_ChatWheel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.chat_wheel_message_id_){4294967295u}
  };
}

CMsgShowcaseItem_ChatWheel::~CMsgShowcaseItem_ChatWheel() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_ChatWheel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_ChatWheel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void CMsgShowcaseItem_ChatWheel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_ChatWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_ChatWheel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
    _impl_.chat_wheel_message_id_ = 4294967295u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_ChatWheel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgShowcaseItem_ChatWheel.Data data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 chat_wheel_message_id = 2 [default = 4294967295];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_wheel_message_id(&has_bits);
          _impl_.chat_wheel_message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_ChatWheel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_ChatWheel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgShowcaseItem_ChatWheel.Data data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // optional uint32 chat_wheel_message_id = 2 [default = 4294967295];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_chat_wheel_message_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_ChatWheel)
  return target;
}

size_t CMsgShowcaseItem_ChatWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_ChatWheel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgShowcaseItem_ChatWheel.Data data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

    // optional uint32 chat_wheel_message_id = 2 [default = 4294967295];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chat_wheel_message_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_ChatWheel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_ChatWheel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_ChatWheel::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_ChatWheel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_ChatWheel*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_ChatWheel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_ChatWheel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_data()->::CMsgShowcaseItem_ChatWheel_Data::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.chat_wheel_message_id_ = from._impl_.chat_wheel_message_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_ChatWheel::CopyFrom(const CMsgShowcaseItem_ChatWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_ChatWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_ChatWheel::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_ChatWheel::InternalSwap(CMsgShowcaseItem_ChatWheel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_.chat_wheel_message_id_, other->_impl_.chat_wheel_message_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_ChatWheel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[10]);
}

// ===================================================================

class CMsgShowcaseItem_Emoticon_Data::_Internal {
 public:
};

CMsgShowcaseItem_Emoticon_Data::CMsgShowcaseItem_Emoticon_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_Emoticon.Data)
}
CMsgShowcaseItem_Emoticon_Data::CMsgShowcaseItem_Emoticon_Data(const CMsgShowcaseItem_Emoticon_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgShowcaseItem_Emoticon_Data* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_Emoticon.Data)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_Emoticon_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_Emoticon_Data::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_Emoticon_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[11]);
}

// ===================================================================

class CMsgShowcaseItem_Emoticon::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_Emoticon>()._impl_._has_bits_);
  static const ::CMsgShowcaseItem_Emoticon_Data& data(const CMsgShowcaseItem_Emoticon* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_emoticon_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgShowcaseItem_Emoticon_Data&
CMsgShowcaseItem_Emoticon::_Internal::data(const CMsgShowcaseItem_Emoticon* msg) {
  return *msg->_impl_.data_;
}
CMsgShowcaseItem_Emoticon::CMsgShowcaseItem_Emoticon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_Emoticon)
}
CMsgShowcaseItem_Emoticon::CMsgShowcaseItem_Emoticon(const CMsgShowcaseItem_Emoticon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_Emoticon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.emoticon_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::CMsgShowcaseItem_Emoticon_Data(*from._impl_.data_);
  }
  _this->_impl_.emoticon_id_ = from._impl_.emoticon_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_Emoticon)
}

inline void CMsgShowcaseItem_Emoticon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.emoticon_id_){0u}
  };
}

CMsgShowcaseItem_Emoticon::~CMsgShowcaseItem_Emoticon() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_Emoticon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_Emoticon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void CMsgShowcaseItem_Emoticon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_Emoticon::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_Emoticon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_.emoticon_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_Emoticon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgShowcaseItem_Emoticon.Data data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 emoticon_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_emoticon_id(&has_bits);
          _impl_.emoticon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_Emoticon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_Emoticon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgShowcaseItem_Emoticon.Data data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // optional uint32 emoticon_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_emoticon_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_Emoticon)
  return target;
}

size_t CMsgShowcaseItem_Emoticon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_Emoticon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgShowcaseItem_Emoticon.Data data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

    // optional uint32 emoticon_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_emoticon_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_Emoticon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_Emoticon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_Emoticon::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_Emoticon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_Emoticon*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_Emoticon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_Emoticon)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_data()->::CMsgShowcaseItem_Emoticon_Data::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.emoticon_id_ = from._impl_.emoticon_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_Emoticon::CopyFrom(const CMsgShowcaseItem_Emoticon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_Emoticon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_Emoticon::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_Emoticon::InternalSwap(CMsgShowcaseItem_Emoticon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_Emoticon, _impl_.emoticon_id_)
      + sizeof(CMsgShowcaseItem_Emoticon::_impl_.emoticon_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem_Emoticon, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_Emoticon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[12]);
}

// ===================================================================

class CMsgShowcaseItem_Widget_Data::_Internal {
 public:
};

CMsgShowcaseItem_Widget_Data::CMsgShowcaseItem_Widget_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_Widget.Data)
}
CMsgShowcaseItem_Widget_Data::CMsgShowcaseItem_Widget_Data(const CMsgShowcaseItem_Widget_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgShowcaseItem_Widget_Data* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_Widget.Data)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_Widget_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_Widget_Data::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_Widget_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[13]);
}

// ===================================================================

class CMsgShowcaseItem_Widget::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem_Widget>()._impl_._has_bits_);
  static const ::CMsgShowcaseItem_Widget_Data& data(const CMsgShowcaseItem_Widget* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_widget(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgShowcaseItem_Widget_Data&
CMsgShowcaseItem_Widget::_Internal::data(const CMsgShowcaseItem_Widget* msg) {
  return *msg->_impl_.data_;
}
CMsgShowcaseItem_Widget::CMsgShowcaseItem_Widget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem_Widget)
}
CMsgShowcaseItem_Widget::CMsgShowcaseItem_Widget(const CMsgShowcaseItem_Widget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem_Widget* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.widget_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::CMsgShowcaseItem_Widget_Data(*from._impl_.data_);
  }
  _this->_impl_.widget_ = from._impl_.widget_;
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem_Widget)
}

inline void CMsgShowcaseItem_Widget::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.widget_){1}
  };
}

CMsgShowcaseItem_Widget::~CMsgShowcaseItem_Widget() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem_Widget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem_Widget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void CMsgShowcaseItem_Widget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem_Widget::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem_Widget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
    _impl_.widget_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem_Widget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgShowcaseItem_Widget.Data data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcaseItem_Widget.EWidget widget = 2 [default = kSpiderGraph];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgShowcaseItem_Widget_EWidget_IsValid(val))) {
            _internal_set_widget(static_cast<::CMsgShowcaseItem_Widget_EWidget>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem_Widget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem_Widget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgShowcaseItem_Widget.Data data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgShowcaseItem_Widget.EWidget widget = 2 [default = kSpiderGraph];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_widget(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem_Widget)
  return target;
}

size_t CMsgShowcaseItem_Widget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem_Widget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgShowcaseItem_Widget.Data data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

    // optional .CMsgShowcaseItem_Widget.EWidget widget = 2 [default = kSpiderGraph];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_widget());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem_Widget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem_Widget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem_Widget::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem_Widget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem_Widget*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem_Widget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem_Widget)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_data()->::CMsgShowcaseItem_Widget_Data::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.widget_ = from._impl_.widget_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem_Widget::CopyFrom(const CMsgShowcaseItem_Widget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem_Widget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem_Widget::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem_Widget::InternalSwap(CMsgShowcaseItem_Widget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_.widget_, other->_impl_.widget_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem_Widget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[14]);
}

// ===================================================================

class CMsgShowcaseBackground_Data::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseBackground_Data>()._impl_._has_bits_);
  static const ::CSOEconItem& loading_screen(const CMsgShowcaseBackground_Data* msg);
  static void set_has_loading_screen(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CSOEconItem&
CMsgShowcaseBackground_Data::_Internal::loading_screen(const CMsgShowcaseBackground_Data* msg) {
  return *msg->_impl_.loading_screen_;
}
void CMsgShowcaseBackground_Data::clear_loading_screen() {
  if (_impl_.loading_screen_ != nullptr) _impl_.loading_screen_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgShowcaseBackground_Data::CMsgShowcaseBackground_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseBackground.Data)
}
CMsgShowcaseBackground_Data::CMsgShowcaseBackground_Data(const CMsgShowcaseBackground_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseBackground_Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.loading_screen_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_loading_screen()) {
    _this->_impl_.loading_screen_ = new ::CSOEconItem(*from._impl_.loading_screen_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseBackground.Data)
}

inline void CMsgShowcaseBackground_Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.loading_screen_){nullptr}
  };
}

CMsgShowcaseBackground_Data::~CMsgShowcaseBackground_Data() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseBackground.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseBackground_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.loading_screen_;
}

void CMsgShowcaseBackground_Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseBackground_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseBackground.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.loading_screen_ != nullptr);
    _impl_.loading_screen_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseBackground_Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CSOEconItem loading_screen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_loading_screen(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseBackground_Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseBackground.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CSOEconItem loading_screen = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::loading_screen(this),
        _Internal::loading_screen(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseBackground.Data)
  return target;
}

size_t CMsgShowcaseBackground_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseBackground.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CSOEconItem loading_screen = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.loading_screen_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseBackground_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseBackground_Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseBackground_Data::GetClassData() const { return &_class_data_; }


void CMsgShowcaseBackground_Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseBackground_Data*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseBackground_Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseBackground.Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_loading_screen()) {
    _this->_internal_mutable_loading_screen()->::CSOEconItem::MergeFrom(
        from._internal_loading_screen());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseBackground_Data::CopyFrom(const CMsgShowcaseBackground_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseBackground.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseBackground_Data::IsInitialized() const {
  return true;
}

void CMsgShowcaseBackground_Data::InternalSwap(CMsgShowcaseBackground_Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.loading_screen_, other->_impl_.loading_screen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseBackground_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[15]);
}

// ===================================================================

class CMsgShowcaseBackground::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseBackground>()._impl_._has_bits_);
  static const ::CMsgShowcaseBackground_Data& data(const CMsgShowcaseBackground* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgShowcaseEconItemReference& loading_screen_ref(const CMsgShowcaseBackground* msg);
  static void set_has_loading_screen_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgShowcaseBackground_Data&
CMsgShowcaseBackground::_Internal::data(const CMsgShowcaseBackground* msg) {
  return *msg->_impl_.data_;
}
const ::CMsgShowcaseEconItemReference&
CMsgShowcaseBackground::_Internal::loading_screen_ref(const CMsgShowcaseBackground* msg) {
  return *msg->_impl_.loading_screen_ref_;
}
CMsgShowcaseBackground::CMsgShowcaseBackground(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseBackground)
}
CMsgShowcaseBackground::CMsgShowcaseBackground(const CMsgShowcaseBackground& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseBackground* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.loading_screen_ref_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::CMsgShowcaseBackground_Data(*from._impl_.data_);
  }
  if (from._internal_has_loading_screen_ref()) {
    _this->_impl_.loading_screen_ref_ = new ::CMsgShowcaseEconItemReference(*from._impl_.loading_screen_ref_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseBackground)
}

inline void CMsgShowcaseBackground::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.loading_screen_ref_){nullptr}
  };
}

CMsgShowcaseBackground::~CMsgShowcaseBackground() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseBackground)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseBackground::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.loading_screen_ref_;
}

void CMsgShowcaseBackground::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseBackground::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseBackground)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.loading_screen_ref_ != nullptr);
      _impl_.loading_screen_ref_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseBackground::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgShowcaseBackground.Data data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcaseEconItemReference loading_screen_ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_loading_screen_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseBackground::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseBackground)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgShowcaseBackground.Data data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgShowcaseEconItemReference loading_screen_ref = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::loading_screen_ref(this),
        _Internal::loading_screen_ref(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseBackground)
  return target;
}

size_t CMsgShowcaseBackground::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseBackground)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgShowcaseBackground.Data data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

    // optional .CMsgShowcaseEconItemReference loading_screen_ref = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.loading_screen_ref_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseBackground::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseBackground::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseBackground::GetClassData() const { return &_class_data_; }


void CMsgShowcaseBackground::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseBackground*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseBackground&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseBackground)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_data()->::CMsgShowcaseBackground_Data::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_loading_screen_ref()->::CMsgShowcaseEconItemReference::MergeFrom(
          from._internal_loading_screen_ref());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseBackground::CopyFrom(const CMsgShowcaseBackground& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseBackground)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseBackground::IsInitialized() const {
  return true;
}

void CMsgShowcaseBackground::InternalSwap(CMsgShowcaseBackground* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseBackground, _impl_.loading_screen_ref_)
      + sizeof(CMsgShowcaseBackground::_impl_.loading_screen_ref_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseBackground, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseBackground::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[16]);
}

// ===================================================================

class CMsgShowcaseItemData::_Internal {
 public:
  static const ::CMsgShowcaseItem_Trophy& trophy(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_EconItem& econ_item_icon(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_EconItem& sticker(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_Hero& hero_model(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_PlayerMatch& player_match(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_ChatWheel& chat_wheel(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_ChatWheel& spray(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_Emoticon& emoticon(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseItem_Widget& widget(const CMsgShowcaseItemData* msg);
  static const ::CMsgShowcaseBackground& background(const CMsgShowcaseItemData* msg);
};

const ::CMsgShowcaseItem_Trophy&
CMsgShowcaseItemData::_Internal::trophy(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.trophy_;
}
const ::CMsgShowcaseItem_EconItem&
CMsgShowcaseItemData::_Internal::econ_item_icon(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.econ_item_icon_;
}
const ::CMsgShowcaseItem_EconItem&
CMsgShowcaseItemData::_Internal::sticker(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.sticker_;
}
const ::CMsgShowcaseItem_Hero&
CMsgShowcaseItemData::_Internal::hero_model(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.hero_model_;
}
const ::CMsgShowcaseItem_PlayerMatch&
CMsgShowcaseItemData::_Internal::player_match(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.player_match_;
}
const ::CMsgShowcaseItem_ChatWheel&
CMsgShowcaseItemData::_Internal::chat_wheel(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.chat_wheel_;
}
const ::CMsgShowcaseItem_ChatWheel&
CMsgShowcaseItemData::_Internal::spray(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.spray_;
}
const ::CMsgShowcaseItem_Emoticon&
CMsgShowcaseItemData::_Internal::emoticon(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.emoticon_;
}
const ::CMsgShowcaseItem_Widget&
CMsgShowcaseItemData::_Internal::widget(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.widget_;
}
const ::CMsgShowcaseBackground&
CMsgShowcaseItemData::_Internal::background(const CMsgShowcaseItemData* msg) {
  return *msg->_impl_.item_.background_;
}
void CMsgShowcaseItemData::set_allocated_trophy(::CMsgShowcaseItem_Trophy* trophy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (trophy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trophy);
    if (message_arena != submessage_arena) {
      trophy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trophy, submessage_arena);
    }
    set_has_trophy();
    _impl_.item_.trophy_ = trophy;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.trophy)
}
void CMsgShowcaseItemData::set_allocated_econ_item_icon(::CMsgShowcaseItem_EconItem* econ_item_icon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (econ_item_icon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(econ_item_icon);
    if (message_arena != submessage_arena) {
      econ_item_icon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, econ_item_icon, submessage_arena);
    }
    set_has_econ_item_icon();
    _impl_.item_.econ_item_icon_ = econ_item_icon;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.econ_item_icon)
}
void CMsgShowcaseItemData::set_allocated_sticker(::CMsgShowcaseItem_EconItem* sticker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (sticker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sticker);
    if (message_arena != submessage_arena) {
      sticker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sticker, submessage_arena);
    }
    set_has_sticker();
    _impl_.item_.sticker_ = sticker;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.sticker)
}
void CMsgShowcaseItemData::set_allocated_hero_model(::CMsgShowcaseItem_Hero* hero_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (hero_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hero_model);
    if (message_arena != submessage_arena) {
      hero_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hero_model, submessage_arena);
    }
    set_has_hero_model();
    _impl_.item_.hero_model_ = hero_model;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.hero_model)
}
void CMsgShowcaseItemData::set_allocated_player_match(::CMsgShowcaseItem_PlayerMatch* player_match) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (player_match) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_match);
    if (message_arena != submessage_arena) {
      player_match = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_match, submessage_arena);
    }
    set_has_player_match();
    _impl_.item_.player_match_ = player_match;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.player_match)
}
void CMsgShowcaseItemData::set_allocated_chat_wheel(::CMsgShowcaseItem_ChatWheel* chat_wheel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (chat_wheel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chat_wheel);
    if (message_arena != submessage_arena) {
      chat_wheel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat_wheel, submessage_arena);
    }
    set_has_chat_wheel();
    _impl_.item_.chat_wheel_ = chat_wheel;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.chat_wheel)
}
void CMsgShowcaseItemData::set_allocated_spray(::CMsgShowcaseItem_ChatWheel* spray) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (spray) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spray);
    if (message_arena != submessage_arena) {
      spray = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spray, submessage_arena);
    }
    set_has_spray();
    _impl_.item_.spray_ = spray;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.spray)
}
void CMsgShowcaseItemData::set_allocated_emoticon(::CMsgShowcaseItem_Emoticon* emoticon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (emoticon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(emoticon);
    if (message_arena != submessage_arena) {
      emoticon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emoticon, submessage_arena);
    }
    set_has_emoticon();
    _impl_.item_.emoticon_ = emoticon;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.emoticon)
}
void CMsgShowcaseItemData::set_allocated_widget(::CMsgShowcaseItem_Widget* widget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (widget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(widget);
    if (message_arena != submessage_arena) {
      widget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, widget, submessage_arena);
    }
    set_has_widget();
    _impl_.item_.widget_ = widget;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.widget)
}
void CMsgShowcaseItemData::set_allocated_background(::CMsgShowcaseBackground* background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(background);
    if (message_arena != submessage_arena) {
      background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background, submessage_arena);
    }
    set_has_background();
    _impl_.item_.background_ = background;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItemData.background)
}
CMsgShowcaseItemData::CMsgShowcaseItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItemData)
}
CMsgShowcaseItemData::CMsgShowcaseItemData(const CMsgShowcaseItemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItemData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_item();
  switch (from.item_case()) {
    case kTrophy: {
      _this->_internal_mutable_trophy()->::CMsgShowcaseItem_Trophy::MergeFrom(
          from._internal_trophy());
      break;
    }
    case kEconItemIcon: {
      _this->_internal_mutable_econ_item_icon()->::CMsgShowcaseItem_EconItem::MergeFrom(
          from._internal_econ_item_icon());
      break;
    }
    case kSticker: {
      _this->_internal_mutable_sticker()->::CMsgShowcaseItem_EconItem::MergeFrom(
          from._internal_sticker());
      break;
    }
    case kHeroModel: {
      _this->_internal_mutable_hero_model()->::CMsgShowcaseItem_Hero::MergeFrom(
          from._internal_hero_model());
      break;
    }
    case kPlayerMatch: {
      _this->_internal_mutable_player_match()->::CMsgShowcaseItem_PlayerMatch::MergeFrom(
          from._internal_player_match());
      break;
    }
    case kChatWheel: {
      _this->_internal_mutable_chat_wheel()->::CMsgShowcaseItem_ChatWheel::MergeFrom(
          from._internal_chat_wheel());
      break;
    }
    case kSpray: {
      _this->_internal_mutable_spray()->::CMsgShowcaseItem_ChatWheel::MergeFrom(
          from._internal_spray());
      break;
    }
    case kEmoticon: {
      _this->_internal_mutable_emoticon()->::CMsgShowcaseItem_Emoticon::MergeFrom(
          from._internal_emoticon());
      break;
    }
    case kWidget: {
      _this->_internal_mutable_widget()->::CMsgShowcaseItem_Widget::MergeFrom(
          from._internal_widget());
      break;
    }
    case kBackground: {
      _this->_internal_mutable_background()->::CMsgShowcaseBackground::MergeFrom(
          from._internal_background());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItemData)
}

inline void CMsgShowcaseItemData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_item();
}

CMsgShowcaseItemData::~CMsgShowcaseItemData() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItemData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItemData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_item()) {
    clear_item();
  }
}

void CMsgShowcaseItemData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItemData::clear_item() {
// @@protoc_insertion_point(one_of_clear_start:CMsgShowcaseItemData)
  switch (item_case()) {
    case kTrophy: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.trophy_;
      }
      break;
    }
    case kEconItemIcon: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.econ_item_icon_;
      }
      break;
    }
    case kSticker: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.sticker_;
      }
      break;
    }
    case kHeroModel: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.hero_model_;
      }
      break;
    }
    case kPlayerMatch: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.player_match_;
      }
      break;
    }
    case kChatWheel: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.chat_wheel_;
      }
      break;
    }
    case kSpray: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.spray_;
      }
      break;
    }
    case kEmoticon: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.emoticon_;
      }
      break;
    }
    case kWidget: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.widget_;
      }
      break;
    }
    case kBackground: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.background_;
      }
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ITEM_NOT_SET;
}


void CMsgShowcaseItemData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItemData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_item();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItemData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CMsgShowcaseItem_Trophy trophy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trophy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_EconItem econ_item_icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_econ_item_icon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_EconItem sticker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sticker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_Hero hero_model = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hero_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_PlayerMatch player_match = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_match(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_ChatWheel chat_wheel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_wheel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_ChatWheel spray = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_spray(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_Emoticon emoticon = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_emoticon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseItem_Widget widget = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_widget(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CMsgShowcaseBackground background = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_background(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItemData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItemData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (item_case()) {
    case kTrophy: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::trophy(this),
          _Internal::trophy(this).GetCachedSize(), target, stream);
      break;
    }
    case kEconItemIcon: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::econ_item_icon(this),
          _Internal::econ_item_icon(this).GetCachedSize(), target, stream);
      break;
    }
    case kSticker: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::sticker(this),
          _Internal::sticker(this).GetCachedSize(), target, stream);
      break;
    }
    case kHeroModel: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::hero_model(this),
          _Internal::hero_model(this).GetCachedSize(), target, stream);
      break;
    }
    case kPlayerMatch: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::player_match(this),
          _Internal::player_match(this).GetCachedSize(), target, stream);
      break;
    }
    case kChatWheel: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::chat_wheel(this),
          _Internal::chat_wheel(this).GetCachedSize(), target, stream);
      break;
    }
    case kSpray: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::spray(this),
          _Internal::spray(this).GetCachedSize(), target, stream);
      break;
    }
    case kEmoticon: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::emoticon(this),
          _Internal::emoticon(this).GetCachedSize(), target, stream);
      break;
    }
    case kWidget: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::widget(this),
          _Internal::widget(this).GetCachedSize(), target, stream);
      break;
    }
    case kBackground: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(100, _Internal::background(this),
          _Internal::background(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItemData)
  return target;
}

size_t CMsgShowcaseItemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItemData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (item_case()) {
    // .CMsgShowcaseItem_Trophy trophy = 1;
    case kTrophy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.trophy_);
      break;
    }
    // .CMsgShowcaseItem_EconItem econ_item_icon = 2;
    case kEconItemIcon: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.econ_item_icon_);
      break;
    }
    // .CMsgShowcaseItem_EconItem sticker = 3;
    case kSticker: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.sticker_);
      break;
    }
    // .CMsgShowcaseItem_Hero hero_model = 4;
    case kHeroModel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.hero_model_);
      break;
    }
    // .CMsgShowcaseItem_PlayerMatch player_match = 5;
    case kPlayerMatch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.player_match_);
      break;
    }
    // .CMsgShowcaseItem_ChatWheel chat_wheel = 6;
    case kChatWheel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.chat_wheel_);
      break;
    }
    // .CMsgShowcaseItem_ChatWheel spray = 7;
    case kSpray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.spray_);
      break;
    }
    // .CMsgShowcaseItem_Emoticon emoticon = 8;
    case kEmoticon: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.emoticon_);
      break;
    }
    // .CMsgShowcaseItem_Widget widget = 9;
    case kWidget: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.widget_);
      break;
    }
    // .CMsgShowcaseBackground background = 100;
    case kBackground: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.background_);
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItemData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItemData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItemData::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItemData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItemData*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItemData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItemData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.item_case()) {
    case kTrophy: {
      _this->_internal_mutable_trophy()->::CMsgShowcaseItem_Trophy::MergeFrom(
          from._internal_trophy());
      break;
    }
    case kEconItemIcon: {
      _this->_internal_mutable_econ_item_icon()->::CMsgShowcaseItem_EconItem::MergeFrom(
          from._internal_econ_item_icon());
      break;
    }
    case kSticker: {
      _this->_internal_mutable_sticker()->::CMsgShowcaseItem_EconItem::MergeFrom(
          from._internal_sticker());
      break;
    }
    case kHeroModel: {
      _this->_internal_mutable_hero_model()->::CMsgShowcaseItem_Hero::MergeFrom(
          from._internal_hero_model());
      break;
    }
    case kPlayerMatch: {
      _this->_internal_mutable_player_match()->::CMsgShowcaseItem_PlayerMatch::MergeFrom(
          from._internal_player_match());
      break;
    }
    case kChatWheel: {
      _this->_internal_mutable_chat_wheel()->::CMsgShowcaseItem_ChatWheel::MergeFrom(
          from._internal_chat_wheel());
      break;
    }
    case kSpray: {
      _this->_internal_mutable_spray()->::CMsgShowcaseItem_ChatWheel::MergeFrom(
          from._internal_spray());
      break;
    }
    case kEmoticon: {
      _this->_internal_mutable_emoticon()->::CMsgShowcaseItem_Emoticon::MergeFrom(
          from._internal_emoticon());
      break;
    }
    case kWidget: {
      _this->_internal_mutable_widget()->::CMsgShowcaseItem_Widget::MergeFrom(
          from._internal_widget());
      break;
    }
    case kBackground: {
      _this->_internal_mutable_background()->::CMsgShowcaseBackground::MergeFrom(
          from._internal_background());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItemData::CopyFrom(const CMsgShowcaseItemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItemData::IsInitialized() const {
  return true;
}

void CMsgShowcaseItemData::InternalSwap(CMsgShowcaseItemData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.item_, other->_impl_.item_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItemData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[17]);
}

// ===================================================================

class CMsgShowcaseItemPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItemPosition>()._impl_._has_bits_);
  static void set_has_position_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_position_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgShowcaseItemPosition::CMsgShowcaseItemPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItemPosition)
}
CMsgShowcaseItemPosition::CMsgShowcaseItemPosition(const CMsgShowcaseItemPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItemPosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_x_){}
    , decltype(_impl_.position_y_){}
    , decltype(_impl_.scale_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.position_x_, &from._impl_.position_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scale_) -
    reinterpret_cast<char*>(&_impl_.position_x_)) + sizeof(_impl_.scale_));
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItemPosition)
}

inline void CMsgShowcaseItemPosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_x_){0}
    , decltype(_impl_.position_y_){0}
    , decltype(_impl_.scale_){0u}
  };
}

CMsgShowcaseItemPosition::~CMsgShowcaseItemPosition() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItemPosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItemPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgShowcaseItemPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItemPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItemPosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.position_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.scale_) -
        reinterpret_cast<char*>(&_impl_.position_x_)) + sizeof(_impl_.scale_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItemPosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 position_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_position_x(&has_bits);
          _impl_.position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 position_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_position_y(&has_bits);
          _impl_.position_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_scale(&has_bits);
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItemPosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItemPosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 position_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_position_x(), target);
  }

  // optional int32 position_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_position_y(), target);
  }

  // optional uint32 scale = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItemPosition)
  return target;
}

size_t CMsgShowcaseItemPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItemPosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 position_x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_position_x());
    }

    // optional int32 position_y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_position_y());
    }

    // optional uint32 scale = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_scale());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItemPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItemPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItemPosition::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItemPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItemPosition*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItemPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItemPosition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.position_x_ = from._impl_.position_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.position_y_ = from._impl_.position_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.scale_ = from._impl_.scale_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItemPosition::CopyFrom(const CMsgShowcaseItemPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItemPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItemPosition::IsInitialized() const {
  return true;
}

void CMsgShowcaseItemPosition::InternalSwap(CMsgShowcaseItemPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseItemPosition, _impl_.scale_)
      + sizeof(CMsgShowcaseItemPosition::_impl_.scale_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseItemPosition, _impl_.position_x_)>(
          reinterpret_cast<char*>(&_impl_.position_x_),
          reinterpret_cast<char*>(&other->_impl_.position_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItemPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[18]);
}

// ===================================================================

class CMsgShowcaseItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcaseItem>()._impl_._has_bits_);
  static void set_has_showcase_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgShowcaseItemPosition& item_position(const CMsgShowcaseItem* msg);
  static void set_has_item_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgShowcaseItemData& item_data(const CMsgShowcaseItem* msg);
  static void set_has_item_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CMsgShowcaseItemPosition&
CMsgShowcaseItem::_Internal::item_position(const CMsgShowcaseItem* msg) {
  return *msg->_impl_.item_position_;
}
const ::CMsgShowcaseItemData&
CMsgShowcaseItem::_Internal::item_data(const CMsgShowcaseItem* msg) {
  return *msg->_impl_.item_data_;
}
CMsgShowcaseItem::CMsgShowcaseItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcaseItem)
}
CMsgShowcaseItem::CMsgShowcaseItem(const CMsgShowcaseItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcaseItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_position_){nullptr}
    , decltype(_impl_.item_data_){nullptr}
    , decltype(_impl_.showcase_item_id_){}
    , decltype(_impl_.state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item_position()) {
    _this->_impl_.item_position_ = new ::CMsgShowcaseItemPosition(*from._impl_.item_position_);
  }
  if (from._internal_has_item_data()) {
    _this->_impl_.item_data_ = new ::CMsgShowcaseItemData(*from._impl_.item_data_);
  }
  ::memcpy(&_impl_.showcase_item_id_, &from._impl_.showcase_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.showcase_item_id_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:CMsgShowcaseItem)
}

inline void CMsgShowcaseItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_position_){nullptr}
    , decltype(_impl_.item_data_){nullptr}
    , decltype(_impl_.showcase_item_id_){0u}
    , decltype(_impl_.state_){0}
  };
}

CMsgShowcaseItem::~CMsgShowcaseItem() {
  // @@protoc_insertion_point(destructor:CMsgShowcaseItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcaseItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_position_;
  if (this != internal_default_instance()) delete _impl_.item_data_;
}

void CMsgShowcaseItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcaseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcaseItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.item_position_ != nullptr);
      _impl_.item_position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.item_data_ != nullptr);
      _impl_.item_data_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.showcase_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.state_) -
        reinterpret_cast<char*>(&_impl_.showcase_item_id_)) + sizeof(_impl_.state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcaseItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 showcase_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_showcase_item_id(&has_bits);
          _impl_.showcase_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcaseItemPosition item_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcaseItemData item_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EShowcaseItemState state = 4 [default = k_eShowcaseItemState_Ok];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EShowcaseItemState_IsValid(val))) {
            _internal_set_state(static_cast<::EShowcaseItemState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcaseItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcaseItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 showcase_item_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_showcase_item_id(), target);
  }

  // optional .CMsgShowcaseItemPosition item_position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::item_position(this),
        _Internal::item_position(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgShowcaseItemData item_data = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::item_data(this),
        _Internal::item_data(this).GetCachedSize(), target, stream);
  }

  // optional .EShowcaseItemState state = 4 [default = k_eShowcaseItemState_Ok];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcaseItem)
  return target;
}

size_t CMsgShowcaseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcaseItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgShowcaseItemPosition item_position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_position_);
    }

    // optional .CMsgShowcaseItemData item_data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_data_);
    }

    // optional uint32 showcase_item_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_showcase_item_id());
    }

    // optional .EShowcaseItemState state = 4 [default = k_eShowcaseItemState_Ok];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcaseItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcaseItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcaseItem::GetClassData() const { return &_class_data_; }


void CMsgShowcaseItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcaseItem*>(&to_msg);
  auto& from = static_cast<const CMsgShowcaseItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcaseItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_item_position()->::CMsgShowcaseItemPosition::MergeFrom(
          from._internal_item_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_item_data()->::CMsgShowcaseItemData::MergeFrom(
          from._internal_item_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.showcase_item_id_ = from._impl_.showcase_item_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcaseItem::CopyFrom(const CMsgShowcaseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcaseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcaseItem::IsInitialized() const {
  return true;
}

void CMsgShowcaseItem::InternalSwap(CMsgShowcaseItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem, _impl_.state_)
      + sizeof(CMsgShowcaseItem::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(CMsgShowcaseItem, _impl_.item_position_)>(
          reinterpret_cast<char*>(&_impl_.item_position_),
          reinterpret_cast<char*>(&other->_impl_.item_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcaseItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[19]);
}

// ===================================================================

class CMsgShowcase::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgShowcase>()._impl_._has_bits_);
  static const ::CMsgShowcaseItem& background(const CMsgShowcase* msg);
  static void set_has_background(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgShowcaseItem&
CMsgShowcase::_Internal::background(const CMsgShowcase* msg) {
  return *msg->_impl_.background_;
}
CMsgShowcase::CMsgShowcase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgShowcase)
}
CMsgShowcase::CMsgShowcase(const CMsgShowcase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgShowcase* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.showcase_items_){from._impl_.showcase_items_}
    , decltype(_impl_.background_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_background()) {
    _this->_impl_.background_ = new ::CMsgShowcaseItem(*from._impl_.background_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgShowcase)
}

inline void CMsgShowcase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.showcase_items_){arena}
    , decltype(_impl_.background_){nullptr}
  };
}

CMsgShowcase::~CMsgShowcase() {
  // @@protoc_insertion_point(destructor:CMsgShowcase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgShowcase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.showcase_items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.background_;
}

void CMsgShowcase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgShowcase::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgShowcase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.showcase_items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.background_ != nullptr);
    _impl_.background_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgShowcase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgShowcaseItem showcase_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_showcase_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcaseItem background = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_background(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgShowcase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgShowcase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgShowcaseItem showcase_items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_showcase_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_showcase_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgShowcaseItem background = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::background(this),
        _Internal::background(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgShowcase)
  return target;
}

size_t CMsgShowcase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgShowcase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgShowcaseItem showcase_items = 1;
  total_size += 1UL * this->_internal_showcase_items_size();
  for (const auto& msg : this->_impl_.showcase_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CMsgShowcaseItem background = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.background_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgShowcase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgShowcase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgShowcase::GetClassData() const { return &_class_data_; }


void CMsgShowcase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgShowcase*>(&to_msg);
  auto& from = static_cast<const CMsgShowcase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgShowcase)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.showcase_items_.MergeFrom(from._impl_.showcase_items_);
  if (from._internal_has_background()) {
    _this->_internal_mutable_background()->::CMsgShowcaseItem::MergeFrom(
        from._internal_background());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgShowcase::CopyFrom(const CMsgShowcase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgShowcase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowcase::IsInitialized() const {
  return true;
}

void CMsgShowcase::InternalSwap(CMsgShowcase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.showcase_items_.InternalSwap(&other->_impl_.showcase_items_);
  swap(_impl_.background_, other->_impl_.background_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgShowcase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[20]);
}

// ===================================================================

class CMsgClientToGCShowcaseGetUserData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseGetUserData>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_showcase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCShowcaseGetUserData::CMsgClientToGCShowcaseGetUserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseGetUserData)
}
CMsgClientToGCShowcaseGetUserData::CMsgClientToGCShowcaseGetUserData(const CMsgClientToGCShowcaseGetUserData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseGetUserData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.showcase_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.showcase_type_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.showcase_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseGetUserData)
}

inline void CMsgClientToGCShowcaseGetUserData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.showcase_type_){0}
  };
}

CMsgClientToGCShowcaseGetUserData::~CMsgClientToGCShowcaseGetUserData() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseGetUserData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseGetUserData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCShowcaseGetUserData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseGetUserData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseGetUserData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.showcase_type_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.showcase_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseGetUserData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EShowcaseType_IsValid(val))) {
            _internal_set_showcase_type(static_cast<::EShowcaseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseGetUserData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseGetUserData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_showcase_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseGetUserData)
  return target;
}

size_t CMsgClientToGCShowcaseGetUserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseGetUserData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_showcase_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseGetUserData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseGetUserData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseGetUserData::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseGetUserData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseGetUserData*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseGetUserData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseGetUserData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.showcase_type_ = from._impl_.showcase_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseGetUserData::CopyFrom(const CMsgClientToGCShowcaseGetUserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseGetUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseGetUserData::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseGetUserData::InternalSwap(CMsgClientToGCShowcaseGetUserData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseGetUserData, _impl_.showcase_type_)
      + sizeof(CMsgClientToGCShowcaseGetUserData::_impl_.showcase_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseGetUserData, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseGetUserData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[21]);
}

// ===================================================================

class CMsgClientToGCShowcaseGetUserDataResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseGetUserDataResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgShowcase& showcase(const CMsgClientToGCShowcaseGetUserDataResponse* msg);
  static void set_has_showcase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgShowcase&
CMsgClientToGCShowcaseGetUserDataResponse::_Internal::showcase(const CMsgClientToGCShowcaseGetUserDataResponse* msg) {
  return *msg->_impl_.showcase_;
}
CMsgClientToGCShowcaseGetUserDataResponse::CMsgClientToGCShowcaseGetUserDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseGetUserDataResponse)
}
CMsgClientToGCShowcaseGetUserDataResponse::CMsgClientToGCShowcaseGetUserDataResponse(const CMsgClientToGCShowcaseGetUserDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseGetUserDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.showcase_){nullptr}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_showcase()) {
    _this->_impl_.showcase_ = new ::CMsgShowcase(*from._impl_.showcase_);
  }
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseGetUserDataResponse)
}

inline void CMsgClientToGCShowcaseGetUserDataResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.showcase_){nullptr}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCShowcaseGetUserDataResponse::~CMsgClientToGCShowcaseGetUserDataResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseGetUserDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseGetUserDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.showcase_;
}

void CMsgClientToGCShowcaseGetUserDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseGetUserDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseGetUserDataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.showcase_ != nullptr);
    _impl_.showcase_->Clear();
  }
  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseGetUserDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCShowcaseGetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCShowcaseGetUserDataResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCShowcaseGetUserDataResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcase showcase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_showcase(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseGetUserDataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseGetUserDataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCShowcaseGetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // optional .CMsgShowcase showcase = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::showcase(this),
        _Internal::showcase(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseGetUserDataResponse)
  return target;
}

size_t CMsgClientToGCShowcaseGetUserDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseGetUserDataResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgShowcase showcase = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.showcase_);
    }

    // optional .CMsgClientToGCShowcaseGetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseGetUserDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseGetUserDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseGetUserDataResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseGetUserDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseGetUserDataResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseGetUserDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseGetUserDataResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_showcase()->::CMsgShowcase::MergeFrom(
          from._internal_showcase());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseGetUserDataResponse::CopyFrom(const CMsgClientToGCShowcaseGetUserDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseGetUserDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseGetUserDataResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseGetUserDataResponse::InternalSwap(CMsgClientToGCShowcaseGetUserDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseGetUserDataResponse, _impl_.response_)
      + sizeof(CMsgClientToGCShowcaseGetUserDataResponse::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseGetUserDataResponse, _impl_.showcase_)>(
          reinterpret_cast<char*>(&_impl_.showcase_),
          reinterpret_cast<char*>(&other->_impl_.showcase_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseGetUserDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[22]);
}

// ===================================================================

class CMsgClientToGCShowcaseSetUserData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseSetUserData>()._impl_._has_bits_);
  static void set_has_showcase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgShowcase& showcase(const CMsgClientToGCShowcaseSetUserData* msg);
  static void set_has_showcase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgShowcase&
CMsgClientToGCShowcaseSetUserData::_Internal::showcase(const CMsgClientToGCShowcaseSetUserData* msg) {
  return *msg->_impl_.showcase_;
}
CMsgClientToGCShowcaseSetUserData::CMsgClientToGCShowcaseSetUserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseSetUserData)
}
CMsgClientToGCShowcaseSetUserData::CMsgClientToGCShowcaseSetUserData(const CMsgClientToGCShowcaseSetUserData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseSetUserData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.showcase_){nullptr}
    , decltype(_impl_.showcase_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_showcase()) {
    _this->_impl_.showcase_ = new ::CMsgShowcase(*from._impl_.showcase_);
  }
  _this->_impl_.showcase_type_ = from._impl_.showcase_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseSetUserData)
}

inline void CMsgClientToGCShowcaseSetUserData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.showcase_){nullptr}
    , decltype(_impl_.showcase_type_){0}
  };
}

CMsgClientToGCShowcaseSetUserData::~CMsgClientToGCShowcaseSetUserData() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseSetUserData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseSetUserData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.showcase_;
}

void CMsgClientToGCShowcaseSetUserData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseSetUserData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseSetUserData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.showcase_ != nullptr);
    _impl_.showcase_->Clear();
  }
  _impl_.showcase_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseSetUserData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EShowcaseType showcase_type = 1 [default = k_eShowcaseType_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EShowcaseType_IsValid(val))) {
            _internal_set_showcase_type(static_cast<::EShowcaseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcase showcase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_showcase(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseSetUserData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseSetUserData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .EShowcaseType showcase_type = 1 [default = k_eShowcaseType_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_showcase_type(), target);
  }

  // optional .CMsgShowcase showcase = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::showcase(this),
        _Internal::showcase(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseSetUserData)
  return target;
}

size_t CMsgClientToGCShowcaseSetUserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseSetUserData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgShowcase showcase = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.showcase_);
    }

    // optional .EShowcaseType showcase_type = 1 [default = k_eShowcaseType_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_showcase_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseSetUserData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseSetUserData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseSetUserData::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseSetUserData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseSetUserData*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseSetUserData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseSetUserData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_showcase()->::CMsgShowcase::MergeFrom(
          from._internal_showcase());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.showcase_type_ = from._impl_.showcase_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseSetUserData::CopyFrom(const CMsgClientToGCShowcaseSetUserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseSetUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseSetUserData::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseSetUserData::InternalSwap(CMsgClientToGCShowcaseSetUserData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseSetUserData, _impl_.showcase_type_)
      + sizeof(CMsgClientToGCShowcaseSetUserData::_impl_.showcase_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseSetUserData, _impl_.showcase_)>(
          reinterpret_cast<char*>(&_impl_.showcase_),
          reinterpret_cast<char*>(&other->_impl_.showcase_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseSetUserData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[23]);
}

// ===================================================================

class CMsgClientToGCShowcaseSetUserDataResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCShowcaseSetUserDataResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgShowcase& validated_showcase(const CMsgClientToGCShowcaseSetUserDataResponse* msg);
  static void set_has_validated_showcase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgShowcase&
CMsgClientToGCShowcaseSetUserDataResponse::_Internal::validated_showcase(const CMsgClientToGCShowcaseSetUserDataResponse* msg) {
  return *msg->_impl_.validated_showcase_;
}
CMsgClientToGCShowcaseSetUserDataResponse::CMsgClientToGCShowcaseSetUserDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCShowcaseSetUserDataResponse)
}
CMsgClientToGCShowcaseSetUserDataResponse::CMsgClientToGCShowcaseSetUserDataResponse(const CMsgClientToGCShowcaseSetUserDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCShowcaseSetUserDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.validated_showcase_){nullptr}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_validated_showcase()) {
    _this->_impl_.validated_showcase_ = new ::CMsgShowcase(*from._impl_.validated_showcase_);
  }
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCShowcaseSetUserDataResponse)
}

inline void CMsgClientToGCShowcaseSetUserDataResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.validated_showcase_){nullptr}
    , decltype(_impl_.response_){0}
  };
}

CMsgClientToGCShowcaseSetUserDataResponse::~CMsgClientToGCShowcaseSetUserDataResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCShowcaseSetUserDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCShowcaseSetUserDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.validated_showcase_;
}

void CMsgClientToGCShowcaseSetUserDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCShowcaseSetUserDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCShowcaseSetUserDataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.validated_showcase_ != nullptr);
    _impl_.validated_showcase_->Clear();
  }
  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCShowcaseSetUserDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgClientToGCShowcaseSetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCShowcaseSetUserDataResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCShowcaseSetUserDataResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgShowcase validated_showcase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_validated_showcase(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCShowcaseSetUserDataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCShowcaseSetUserDataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientToGCShowcaseSetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // optional .CMsgShowcase validated_showcase = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::validated_showcase(this),
        _Internal::validated_showcase(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCShowcaseSetUserDataResponse)
  return target;
}

size_t CMsgClientToGCShowcaseSetUserDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCShowcaseSetUserDataResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgShowcase validated_showcase = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.validated_showcase_);
    }

    // optional .CMsgClientToGCShowcaseSetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCShowcaseSetUserDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCShowcaseSetUserDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCShowcaseSetUserDataResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCShowcaseSetUserDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCShowcaseSetUserDataResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCShowcaseSetUserDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCShowcaseSetUserDataResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_validated_showcase()->::CMsgShowcase::MergeFrom(
          from._internal_validated_showcase());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCShowcaseSetUserDataResponse::CopyFrom(const CMsgClientToGCShowcaseSetUserDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCShowcaseSetUserDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCShowcaseSetUserDataResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCShowcaseSetUserDataResponse::InternalSwap(CMsgClientToGCShowcaseSetUserDataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseSetUserDataResponse, _impl_.response_)
      + sizeof(CMsgClientToGCShowcaseSetUserDataResponse::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCShowcaseSetUserDataResponse, _impl_.validated_showcase_)>(
          reinterpret_cast<char*>(&_impl_.validated_showcase_),
          reinterpret_cast<char*>(&other->_impl_.validated_showcase_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCShowcaseSetUserDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fshowcase_2eproto[24]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgShowcaseEconItemReference*
Arena::CreateMaybeMessage< ::CMsgShowcaseEconItemReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseEconItemReference >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_Trophy_Data*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_Trophy_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_Trophy_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_Trophy*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_Trophy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_Trophy >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_EconItem_Data*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_EconItem_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_EconItem_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_EconItem*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_EconItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_EconItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_Hero_Data*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_Hero_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_Hero_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_Hero*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_Hero >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_Hero >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_PlayerMatch_Data*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_PlayerMatch_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_PlayerMatch_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_PlayerMatch*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_PlayerMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_PlayerMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_ChatWheel_Data*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_ChatWheel_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_ChatWheel_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_ChatWheel*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_ChatWheel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_ChatWheel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_Emoticon_Data*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_Emoticon_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_Emoticon_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_Emoticon*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_Emoticon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_Emoticon >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_Widget_Data*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_Widget_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_Widget_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem_Widget*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem_Widget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem_Widget >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseBackground_Data*
Arena::CreateMaybeMessage< ::CMsgShowcaseBackground_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseBackground_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseBackground*
Arena::CreateMaybeMessage< ::CMsgShowcaseBackground >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseBackground >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItemData*
Arena::CreateMaybeMessage< ::CMsgShowcaseItemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItemData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItemPosition*
Arena::CreateMaybeMessage< ::CMsgShowcaseItemPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItemPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcaseItem*
Arena::CreateMaybeMessage< ::CMsgShowcaseItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcaseItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgShowcase*
Arena::CreateMaybeMessage< ::CMsgShowcase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgShowcase >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseGetUserData*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseGetUserData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseGetUserData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseGetUserDataResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseGetUserDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseGetUserDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseSetUserData*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseSetUserData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseSetUserData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCShowcaseSetUserDataResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCShowcaseSetUserDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCShowcaseSetUserDataResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
