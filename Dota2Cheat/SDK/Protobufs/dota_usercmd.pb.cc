// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_usercmd.proto

#include "dota_usercmd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CDota2UserCmdPB::CDota2UserCmdPB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.crosshairtrace_)*/nullptr
  , /*decltype(_impl_.spectator_query_unit_entindex_)*/0
  , /*decltype(_impl_.cameraposition_x_)*/0
  , /*decltype(_impl_.cameraposition_y_)*/0
  , /*decltype(_impl_.clickbehavior_)*/0u
  , /*decltype(_impl_.statspanel_)*/0u
  , /*decltype(_impl_.shoppanel_)*/0u
  , /*decltype(_impl_.stats_dropdown_)*/0u
  , /*decltype(_impl_.stats_dropdown_sort_)*/0u} {}
struct CDota2UserCmdPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDota2UserCmdPBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDota2UserCmdPBDefaultTypeInternal() {}
  union {
    CDota2UserCmdPB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDota2UserCmdPBDefaultTypeInternal _CDota2UserCmdPB_default_instance_;
static ::_pb::Metadata file_level_metadata_dota_5fusercmd_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_dota_5fusercmd_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dota_5fusercmd_2eproto = nullptr;

const uint32_t TableStruct_dota_5fusercmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CDota2UserCmdPB, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDota2UserCmdPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDota2UserCmdPB, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::CDota2UserCmdPB, _impl_.spectator_query_unit_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDota2UserCmdPB, _impl_.crosshairtrace_),
  PROTOBUF_FIELD_OFFSET(::CDota2UserCmdPB, _impl_.cameraposition_x_),
  PROTOBUF_FIELD_OFFSET(::CDota2UserCmdPB, _impl_.cameraposition_y_),
  PROTOBUF_FIELD_OFFSET(::CDota2UserCmdPB, _impl_.clickbehavior_),
  PROTOBUF_FIELD_OFFSET(::CDota2UserCmdPB, _impl_.statspanel_),
  PROTOBUF_FIELD_OFFSET(::CDota2UserCmdPB, _impl_.shoppanel_),
  PROTOBUF_FIELD_OFFSET(::CDota2UserCmdPB, _impl_.stats_dropdown_),
  PROTOBUF_FIELD_OFFSET(::CDota2UserCmdPB, _impl_.stats_dropdown_sort_),
  0,
  2,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, -1, sizeof(::CDota2UserCmdPB)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CDota2UserCmdPB_default_instance_._instance,
};

const char descriptor_table_protodef_dota_5fusercmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022dota_usercmd.proto\032\026networkbasetypes.p"
  "roto\032\rusercmd.proto\"\243\002\n\017CDota2UserCmdPB\022"
  "\035\n\004base\030\001 \001(\0132\017.CBaseUserCmdPB\022%\n\035specta"
  "tor_query_unit_entindex\030\002 \001(\005\022#\n\016crossha"
  "irtrace\030\003 \001(\0132\013.CMsgVector\022\030\n\020cameraposi"
  "tion_x\030\004 \001(\005\022\030\n\020cameraposition_y\030\005 \001(\005\022\025"
  "\n\rclickbehavior\030\006 \001(\r\022\022\n\nstatspanel\030\007 \001("
  "\r\022\021\n\tshoppanel\030\010 \001(\r\022\026\n\016stats_dropdown\030\t"
  " \001(\r\022\033\n\023stats_dropdown_sort\030\n \001(\r"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dota_5fusercmd_2eproto_deps[2] = {
  &::descriptor_table_networkbasetypes_2eproto,
  &::descriptor_table_usercmd_2eproto,
};
static ::_pbi::once_flag descriptor_table_dota_5fusercmd_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dota_5fusercmd_2eproto = {
    false, false, 353, descriptor_table_protodef_dota_5fusercmd_2eproto,
    "dota_usercmd.proto",
    &descriptor_table_dota_5fusercmd_2eproto_once, descriptor_table_dota_5fusercmd_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_dota_5fusercmd_2eproto::offsets,
    file_level_metadata_dota_5fusercmd_2eproto, file_level_enum_descriptors_dota_5fusercmd_2eproto,
    file_level_service_descriptors_dota_5fusercmd_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dota_5fusercmd_2eproto_getter() {
  return &descriptor_table_dota_5fusercmd_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dota_5fusercmd_2eproto(&descriptor_table_dota_5fusercmd_2eproto);

// ===================================================================

class CDota2UserCmdPB::_Internal {
 public:
  using HasBits = decltype(std::declval<CDota2UserCmdPB>()._impl_._has_bits_);
  static const ::CBaseUserCmdPB& base(const CDota2UserCmdPB* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_spectator_query_unit_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgVector& crosshairtrace(const CDota2UserCmdPB* msg);
  static void set_has_crosshairtrace(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cameraposition_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cameraposition_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_clickbehavior(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_statspanel(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_shoppanel(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_stats_dropdown(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_stats_dropdown_sort(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::CBaseUserCmdPB&
CDota2UserCmdPB::_Internal::base(const CDota2UserCmdPB* msg) {
  return *msg->_impl_.base_;
}
const ::CMsgVector&
CDota2UserCmdPB::_Internal::crosshairtrace(const CDota2UserCmdPB* msg) {
  return *msg->_impl_.crosshairtrace_;
}
void CDota2UserCmdPB::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CDota2UserCmdPB::clear_crosshairtrace() {
  if (_impl_.crosshairtrace_ != nullptr) _impl_.crosshairtrace_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CDota2UserCmdPB::CDota2UserCmdPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDota2UserCmdPB)
}
CDota2UserCmdPB::CDota2UserCmdPB(const CDota2UserCmdPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDota2UserCmdPB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.crosshairtrace_){nullptr}
    , decltype(_impl_.spectator_query_unit_entindex_){}
    , decltype(_impl_.cameraposition_x_){}
    , decltype(_impl_.cameraposition_y_){}
    , decltype(_impl_.clickbehavior_){}
    , decltype(_impl_.statspanel_){}
    , decltype(_impl_.shoppanel_){}
    , decltype(_impl_.stats_dropdown_){}
    , decltype(_impl_.stats_dropdown_sort_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::CBaseUserCmdPB(*from._impl_.base_);
  }
  if (from._internal_has_crosshairtrace()) {
    _this->_impl_.crosshairtrace_ = new ::CMsgVector(*from._impl_.crosshairtrace_);
  }
  ::memcpy(&_impl_.spectator_query_unit_entindex_, &from._impl_.spectator_query_unit_entindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stats_dropdown_sort_) -
    reinterpret_cast<char*>(&_impl_.spectator_query_unit_entindex_)) + sizeof(_impl_.stats_dropdown_sort_));
  // @@protoc_insertion_point(copy_constructor:CDota2UserCmdPB)
}

inline void CDota2UserCmdPB::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.crosshairtrace_){nullptr}
    , decltype(_impl_.spectator_query_unit_entindex_){0}
    , decltype(_impl_.cameraposition_x_){0}
    , decltype(_impl_.cameraposition_y_){0}
    , decltype(_impl_.clickbehavior_){0u}
    , decltype(_impl_.statspanel_){0u}
    , decltype(_impl_.shoppanel_){0u}
    , decltype(_impl_.stats_dropdown_){0u}
    , decltype(_impl_.stats_dropdown_sort_){0u}
  };
}

CDota2UserCmdPB::~CDota2UserCmdPB() {
  // @@protoc_insertion_point(destructor:CDota2UserCmdPB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDota2UserCmdPB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.crosshairtrace_;
}

void CDota2UserCmdPB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDota2UserCmdPB::Clear() {
// @@protoc_insertion_point(message_clear_start:CDota2UserCmdPB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.base_ != nullptr);
      _impl_.base_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.crosshairtrace_ != nullptr);
      _impl_.crosshairtrace_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.spectator_query_unit_entindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shoppanel_) -
        reinterpret_cast<char*>(&_impl_.spectator_query_unit_entindex_)) + sizeof(_impl_.shoppanel_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.stats_dropdown_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.stats_dropdown_sort_) -
        reinterpret_cast<char*>(&_impl_.stats_dropdown_)) + sizeof(_impl_.stats_dropdown_sort_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDota2UserCmdPB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CBaseUserCmdPB base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 spectator_query_unit_entindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_spectator_query_unit_entindex(&has_bits);
          _impl_.spectator_query_unit_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector crosshairtrace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_crosshairtrace(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cameraposition_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cameraposition_x(&has_bits);
          _impl_.cameraposition_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cameraposition_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_cameraposition_y(&has_bits);
          _impl_.cameraposition_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 clickbehavior = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_clickbehavior(&has_bits);
          _impl_.clickbehavior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 statspanel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_statspanel(&has_bits);
          _impl_.statspanel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 shoppanel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_shoppanel(&has_bits);
          _impl_.shoppanel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stats_dropdown = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_stats_dropdown(&has_bits);
          _impl_.stats_dropdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stats_dropdown_sort = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_stats_dropdown_sort(&has_bits);
          _impl_.stats_dropdown_sort_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDota2UserCmdPB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDota2UserCmdPB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CBaseUserCmdPB base = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // optional int32 spectator_query_unit_entindex = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_spectator_query_unit_entindex(), target);
  }

  // optional .CMsgVector crosshairtrace = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::crosshairtrace(this),
        _Internal::crosshairtrace(this).GetCachedSize(), target, stream);
  }

  // optional int32 cameraposition_x = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_cameraposition_x(), target);
  }

  // optional int32 cameraposition_y = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_cameraposition_y(), target);
  }

  // optional uint32 clickbehavior = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_clickbehavior(), target);
  }

  // optional uint32 statspanel = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_statspanel(), target);
  }

  // optional uint32 shoppanel = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_shoppanel(), target);
  }

  // optional uint32 stats_dropdown = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_stats_dropdown(), target);
  }

  // optional uint32 stats_dropdown_sort = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_stats_dropdown_sort(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDota2UserCmdPB)
  return target;
}

size_t CDota2UserCmdPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDota2UserCmdPB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CBaseUserCmdPB base = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.base_);
    }

    // optional .CMsgVector crosshairtrace = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.crosshairtrace_);
    }

    // optional int32 spectator_query_unit_entindex = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_spectator_query_unit_entindex());
    }

    // optional int32 cameraposition_x = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cameraposition_x());
    }

    // optional int32 cameraposition_y = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cameraposition_y());
    }

    // optional uint32 clickbehavior = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_clickbehavior());
    }

    // optional uint32 statspanel = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_statspanel());
    }

    // optional uint32 shoppanel = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_shoppanel());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 stats_dropdown = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stats_dropdown());
    }

    // optional uint32 stats_dropdown_sort = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stats_dropdown_sort());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDota2UserCmdPB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDota2UserCmdPB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDota2UserCmdPB::GetClassData() const { return &_class_data_; }


void CDota2UserCmdPB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDota2UserCmdPB*>(&to_msg);
  auto& from = static_cast<const CDota2UserCmdPB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDota2UserCmdPB)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_base()->::CBaseUserCmdPB::MergeFrom(
          from._internal_base());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_crosshairtrace()->::CMsgVector::MergeFrom(
          from._internal_crosshairtrace());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.spectator_query_unit_entindex_ = from._impl_.spectator_query_unit_entindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cameraposition_x_ = from._impl_.cameraposition_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.cameraposition_y_ = from._impl_.cameraposition_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.clickbehavior_ = from._impl_.clickbehavior_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.statspanel_ = from._impl_.statspanel_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.shoppanel_ = from._impl_.shoppanel_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.stats_dropdown_ = from._impl_.stats_dropdown_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.stats_dropdown_sort_ = from._impl_.stats_dropdown_sort_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDota2UserCmdPB::CopyFrom(const CDota2UserCmdPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDota2UserCmdPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDota2UserCmdPB::IsInitialized() const {
  return true;
}

void CDota2UserCmdPB::InternalSwap(CDota2UserCmdPB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDota2UserCmdPB, _impl_.stats_dropdown_sort_)
      + sizeof(CDota2UserCmdPB::_impl_.stats_dropdown_sort_)
      - PROTOBUF_FIELD_OFFSET(CDota2UserCmdPB, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDota2UserCmdPB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fusercmd_2eproto_getter, &descriptor_table_dota_5fusercmd_2eproto_once,
      file_level_metadata_dota_5fusercmd_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CDota2UserCmdPB*
Arena::CreateMaybeMessage< ::CDota2UserCmdPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDota2UserCmdPB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
