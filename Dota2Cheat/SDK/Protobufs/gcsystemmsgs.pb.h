// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gcsystemmsgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gcsystemmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gcsystemmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gcsystemmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gcsystemmsgs_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gcsystemmsgs_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

enum ESOMsg : int {
  k_ESOMsg_Create = 21,
  k_ESOMsg_Update = 22,
  k_ESOMsg_Destroy = 23,
  k_ESOMsg_CacheSubscribed = 24,
  k_ESOMsg_CacheUnsubscribed = 25,
  k_ESOMsg_UpdateMultiple = 26,
  k_ESOMsg_CacheSubscriptionRefresh = 28,
  k_ESOMsg_CacheSubscribedUpToDate = 29
};
bool ESOMsg_IsValid(int value);
constexpr ESOMsg ESOMsg_MIN = k_ESOMsg_Create;
constexpr ESOMsg ESOMsg_MAX = k_ESOMsg_CacheSubscribedUpToDate;
constexpr int ESOMsg_ARRAYSIZE = ESOMsg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESOMsg_descriptor();
template<typename T>
inline const std::string& ESOMsg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ESOMsg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ESOMsg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ESOMsg_descriptor(), enum_t_value);
}
inline bool ESOMsg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ESOMsg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ESOMsg>(
    ESOMsg_descriptor(), name, value);
}
enum EGCBaseClientMsg : int {
  k_EMsgGCPingRequest = 3001,
  k_EMsgGCPingResponse = 3002,
  k_EMsgGCToClientPollConvarRequest = 3003,
  k_EMsgGCToClientPollConvarResponse = 3004,
  k_EMsgGCCompressedMsgToClient = 3005,
  k_EMsgGCCompressedMsgToClient_Legacy = 523,
  k_EMsgGCToClientRequestDropped = 3006,
  k_EMsgGCClientWelcome = 4004,
  k_EMsgGCServerWelcome = 4005,
  k_EMsgGCClientHello = 4006,
  k_EMsgGCServerHello = 4007,
  k_EMsgGCClientConnectionStatus = 4009,
  k_EMsgGCServerConnectionStatus = 4010
};
bool EGCBaseClientMsg_IsValid(int value);
constexpr EGCBaseClientMsg EGCBaseClientMsg_MIN = k_EMsgGCCompressedMsgToClient_Legacy;
constexpr EGCBaseClientMsg EGCBaseClientMsg_MAX = k_EMsgGCServerConnectionStatus;
constexpr int EGCBaseClientMsg_ARRAYSIZE = EGCBaseClientMsg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCBaseClientMsg_descriptor();
template<typename T>
inline const std::string& EGCBaseClientMsg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGCBaseClientMsg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGCBaseClientMsg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGCBaseClientMsg_descriptor(), enum_t_value);
}
inline bool EGCBaseClientMsg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGCBaseClientMsg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGCBaseClientMsg>(
    EGCBaseClientMsg_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ESOMsg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESOMsg>() {
  return ::ESOMsg_descriptor();
}
template <> struct is_proto_enum< ::EGCBaseClientMsg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EGCBaseClientMsg>() {
  return ::EGCBaseClientMsg_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gcsystemmsgs_2eproto
