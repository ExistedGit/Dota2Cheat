// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common_match_management.proto

#include "dota_gcmessages_common_match_management.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CSODOTAPartyMember::CSODOTAPartyMember(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.region_ping_codes_)*/{}
  , /*decltype(_impl_._region_ping_codes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.region_ping_times_)*/{}
  , /*decltype(_impl_._region_ping_times_cached_byte_size_)*/{0}
  , /*decltype(_impl_.region_ping_failed_bitmask_)*/0u
  , /*decltype(_impl_.tourney_skill_level_)*/0u
  , /*decltype(_impl_.tourney_buyin_)*/0u
  , /*decltype(_impl_.tourney_prevent_until_)*/0u
  , /*decltype(_impl_.is_coach_)*/false
  , /*decltype(_impl_.is_plus_subscriber_)*/false
  , /*decltype(_impl_.mm_data_valid_)*/false
  , /*decltype(_impl_.high_priority_disabled_)*/false
  , /*decltype(_impl_.lane_selection_flags_)*/0u
  , /*decltype(_impl_.has_hp_resource_)*/false
  , /*decltype(_impl_.joined_from_partyfinder_)*/false
  , /*decltype(_impl_.is_steam_china_)*/false} {}
struct CSODOTAPartyMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSODOTAPartyMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSODOTAPartyMemberDefaultTypeInternal() {}
  union {
    CSODOTAPartyMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSODOTAPartyMemberDefaultTypeInternal _CSODOTAPartyMember_default_instance_;
PROTOBUF_CONSTEXPR CSODOTAParty::CSODOTAParty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.member_ids_)*/{}
  , /*decltype(_impl_.members_)*/{}
  , /*decltype(_impl_.sent_invites_)*/{}
  , /*decltype(_impl_.recv_invites_)*/{}
  , /*decltype(_impl_.team_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ready_check_)*/nullptr
  , /*decltype(_impl_.party_id_)*/uint64_t{0u}
  , /*decltype(_impl_.leader_id_)*/uint64_t{0u}
  , /*decltype(_impl_.game_modes_)*/0u
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.effective_started_matchmaking_time_)*/0u
  , /*decltype(_impl_.matchgroups_)*/0u
  , /*decltype(_impl_.low_priority_account_id_)*/0u
  , /*decltype(_impl_.match_type_)*/0
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_.match_disabled_until_date_)*/0u
  , /*decltype(_impl_.match_disabled_account_id_)*/0u
  , /*decltype(_impl_.matchmaking_max_range_minutes_)*/0u
  , /*decltype(_impl_.matchlanguages_)*/0u
  , /*decltype(_impl_.raw_started_matchmaking_time_)*/0u
  , /*decltype(_impl_.attempt_start_time_)*/0u
  , /*decltype(_impl_.attempt_num_)*/0u
  , /*decltype(_impl_.low_priority_games_remaining_)*/0u
  , /*decltype(_impl_.account_flags_)*/0u
  , /*decltype(_impl_.region_select_flags_)*/0u
  , /*decltype(_impl_.exclusive_tournament_id_)*/0u
  , /*decltype(_impl_.tourney_division_id_)*/0u
  , /*decltype(_impl_.tourney_schedule_time_)*/0u
  , /*decltype(_impl_.tourney_skill_level_)*/0u
  , /*decltype(_impl_.tourney_bracket_round_)*/0u
  , /*decltype(_impl_.team_ui_logo_)*/uint64_t{0u}
  , /*decltype(_impl_.team_base_logo_)*/uint64_t{0u}
  , /*decltype(_impl_.tourney_queue_deadline_time_)*/0u
  , /*decltype(_impl_.tourney_queue_deadline_state_)*/0
  , /*decltype(_impl_.party_builder_slots_to_fill_)*/0u
  , /*decltype(_impl_.party_builder_match_groups_)*/0u
  , /*decltype(_impl_.open_for_join_requests_)*/false
  , /*decltype(_impl_.solo_queue_)*/false
  , /*decltype(_impl_.is_challenge_match_)*/false
  , /*decltype(_impl_.party_search_beacon_active_)*/false
  , /*decltype(_impl_.party_builder_start_time_)*/0u
  , /*decltype(_impl_.steam_clan_account_id_)*/0u
  , /*decltype(_impl_.custom_game_disabled_until_date_)*/0u
  , /*decltype(_impl_.custom_game_disabled_account_id_)*/0u
  , /*decltype(_impl_.matchmaking_flags_)*/0u
  , /*decltype(_impl_.high_priority_state_)*/0
  , /*decltype(_impl_.custom_game_difficulty_mask_)*/0u
  , /*decltype(_impl_.lane_selections_enabled_)*/false
  , /*decltype(_impl_.is_steam_china_)*/false
  , /*decltype(_impl_.bot_difficulty_mask_)*/0u
  , /*decltype(_impl_.bot_script_index_mask_)*/0u} {}
struct CSODOTAPartyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSODOTAPartyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSODOTAPartyDefaultTypeInternal() {}
  union {
    CSODOTAParty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSODOTAPartyDefaultTypeInternal _CSODOTAParty_default_instance_;
PROTOBUF_CONSTEXPR CSODOTAPartyInvite_PartyMember::CSODOTAPartyInvite_PartyMember(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.is_coach_)*/false} {}
struct CSODOTAPartyInvite_PartyMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSODOTAPartyInvite_PartyMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSODOTAPartyInvite_PartyMemberDefaultTypeInternal() {}
  union {
    CSODOTAPartyInvite_PartyMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSODOTAPartyInvite_PartyMemberDefaultTypeInternal _CSODOTAPartyInvite_PartyMember_default_instance_;
PROTOBUF_CONSTEXPR CSODOTAPartyInvite::CSODOTAPartyInvite(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.members_)*/{}
  , /*decltype(_impl_.sender_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_id_)*/uint64_t{0u}
  , /*decltype(_impl_.sender_id_)*/uint64_t{0u}
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_.low_priority_status_)*/false
  , /*decltype(_impl_.as_coach_)*/false
  , /*decltype(_impl_.invite_gid_)*/uint64_t{0u}} {}
struct CSODOTAPartyInviteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSODOTAPartyInviteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSODOTAPartyInviteDefaultTypeInternal() {}
  union {
    CSODOTAPartyInvite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSODOTAPartyInviteDefaultTypeInternal _CSODOTAPartyInvite_default_instance_;
PROTOBUF_CONSTEXPR CMsgLeaverState::CMsgLeaverState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lobby_state_)*/0u
  , /*decltype(_impl_.game_state_)*/0
  , /*decltype(_impl_.leaver_detected_)*/false
  , /*decltype(_impl_.first_blood_happened_)*/false
  , /*decltype(_impl_.discard_match_results_)*/false
  , /*decltype(_impl_.mass_disconnect_)*/false} {}
struct CMsgLeaverStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLeaverStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLeaverStateDefaultTypeInternal() {}
  union {
    CMsgLeaverState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLeaverStateDefaultTypeInternal _CMsgLeaverState_default_instance_;
PROTOBUF_CONSTEXPR CMsgReadyCheckStatus_ReadyMember::CMsgReadyCheckStatus_ReadyMember(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.ready_status_)*/0} {}
struct CMsgReadyCheckStatus_ReadyMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgReadyCheckStatus_ReadyMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgReadyCheckStatus_ReadyMemberDefaultTypeInternal() {}
  union {
    CMsgReadyCheckStatus_ReadyMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgReadyCheckStatus_ReadyMemberDefaultTypeInternal _CMsgReadyCheckStatus_ReadyMember_default_instance_;
PROTOBUF_CONSTEXPR CMsgReadyCheckStatus::CMsgReadyCheckStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ready_members_)*/{}
  , /*decltype(_impl_.start_timestamp_)*/0u
  , /*decltype(_impl_.finish_timestamp_)*/0u
  , /*decltype(_impl_.initiator_account_id_)*/0u} {}
struct CMsgReadyCheckStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgReadyCheckStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgReadyCheckStatusDefaultTypeInternal() {}
  union {
    CMsgReadyCheckStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgReadyCheckStatusDefaultTypeInternal _CMsgReadyCheckStatus_default_instance_;
PROTOBUF_CONSTEXPR CMsgPartyReadyCheckRequest::CMsgPartyReadyCheckRequest(
    ::_pbi::ConstantInitialized) {}
struct CMsgPartyReadyCheckRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPartyReadyCheckRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPartyReadyCheckRequestDefaultTypeInternal() {}
  union {
    CMsgPartyReadyCheckRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPartyReadyCheckRequestDefaultTypeInternal _CMsgPartyReadyCheckRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgPartyReadyCheckResponse::CMsgPartyReadyCheckResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/0} {}
struct CMsgPartyReadyCheckResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPartyReadyCheckResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPartyReadyCheckResponseDefaultTypeInternal() {}
  union {
    CMsgPartyReadyCheckResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPartyReadyCheckResponseDefaultTypeInternal _CMsgPartyReadyCheckResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgPartyReadyCheckAcknowledge::CMsgPartyReadyCheckAcknowledge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ready_status_)*/0} {}
struct CMsgPartyReadyCheckAcknowledgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPartyReadyCheckAcknowledgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPartyReadyCheckAcknowledgeDefaultTypeInternal() {}
  union {
    CMsgPartyReadyCheckAcknowledge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPartyReadyCheckAcknowledgeDefaultTypeInternal _CMsgPartyReadyCheckAcknowledge_default_instance_;
PROTOBUF_CONSTEXPR CMsgLobbyEventGameDetails::CMsgLobbyEventGameDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kv_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CMsgLobbyEventGameDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLobbyEventGameDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLobbyEventGameDetailsDefaultTypeInternal() {}
  union {
    CMsgLobbyEventGameDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLobbyEventGameDetailsDefaultTypeInternal _CMsgLobbyEventGameDetails_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchMatchmakingStats::CMsgMatchMatchmakingStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.average_queue_time_)*/0u
  , /*decltype(_impl_.maximum_queue_time_)*/0u
  , /*decltype(_impl_.behavior_score_variance_)*/0} {}
struct CMsgMatchMatchmakingStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchMatchmakingStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchMatchmakingStatsDefaultTypeInternal() {}
  union {
    CMsgMatchMatchmakingStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchMatchmakingStatsDefaultTypeInternal _CMsgMatchMatchmakingStats_default_instance_;
PROTOBUF_CONSTEXPR CMvpData_MvpDatum_MvpAccolade::CMvpData_MvpDatum_MvpAccolade(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.detail_value_)*/0
  , /*decltype(_impl_.type_)*/1} {}
struct CMvpData_MvpDatum_MvpAccoladeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMvpData_MvpDatum_MvpAccoladeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMvpData_MvpDatum_MvpAccoladeDefaultTypeInternal() {}
  union {
    CMvpData_MvpDatum_MvpAccolade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMvpData_MvpDatum_MvpAccoladeDefaultTypeInternal _CMvpData_MvpDatum_MvpAccolade_default_instance_;
PROTOBUF_CONSTEXPR CMvpData_MvpDatum::CMvpData_MvpDatum(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.accolades_)*/{}
  , /*decltype(_impl_.player_slot_)*/0u} {}
struct CMvpData_MvpDatumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMvpData_MvpDatumDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMvpData_MvpDatumDefaultTypeInternal() {}
  union {
    CMvpData_MvpDatum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMvpData_MvpDatumDefaultTypeInternal _CMvpData_MvpDatum_default_instance_;
PROTOBUF_CONSTEXPR CMvpData::CMvpData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mvps_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMvpDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMvpDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMvpDataDefaultTypeInternal() {}
  union {
    CMvpData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMvpDataDefaultTypeInternal _CMvpData_default_instance_;
static ::_pb::Metadata file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[15];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[9];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto = nullptr;

const uint32_t TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, _impl_.is_coach_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, _impl_.region_ping_codes_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, _impl_.region_ping_times_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, _impl_.region_ping_failed_bitmask_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, _impl_.is_plus_subscriber_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, _impl_.tourney_skill_level_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, _impl_.tourney_buyin_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, _impl_.tourney_prevent_until_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, _impl_.mm_data_valid_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, _impl_.lane_selection_flags_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, _impl_.high_priority_disabled_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, _impl_.has_hp_resource_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, _impl_.joined_from_partyfinder_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, _impl_.is_steam_china_),
  4,
  ~0u,
  ~0u,
  0,
  5,
  1,
  2,
  3,
  6,
  8,
  7,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.party_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.leader_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.member_ids_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.game_modes_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.effective_started_matchmaking_time_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.raw_started_matchmaking_time_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.attempt_start_time_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.attempt_num_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.matchgroups_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.low_priority_account_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.match_type_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.team_name_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.team_ui_logo_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.team_base_logo_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.match_disabled_until_date_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.match_disabled_account_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.matchmaking_max_range_minutes_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.matchlanguages_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.members_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.low_priority_games_remaining_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.open_for_join_requests_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.sent_invites_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.recv_invites_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.account_flags_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.region_select_flags_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.exclusive_tournament_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.tourney_division_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.tourney_schedule_time_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.tourney_skill_level_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.tourney_bracket_round_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.tourney_queue_deadline_time_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.tourney_queue_deadline_state_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.party_builder_slots_to_fill_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.party_builder_match_groups_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.party_builder_start_time_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.solo_queue_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.steam_clan_account_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.ready_check_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.custom_game_disabled_until_date_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.custom_game_disabled_account_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.is_challenge_match_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.party_search_beacon_active_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.matchmaking_flags_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.high_priority_state_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.lane_selections_enabled_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.custom_game_difficulty_mask_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.is_steam_china_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.bot_difficulty_mask_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _impl_.bot_script_index_mask_),
  2,
  3,
  ~0u,
  4,
  5,
  6,
  15,
  16,
  17,
  7,
  8,
  9,
  10,
  0,
  26,
  27,
  11,
  12,
  13,
  14,
  ~0u,
  18,
  32,
  ~0u,
  ~0u,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  28,
  29,
  30,
  31,
  36,
  33,
  37,
  1,
  38,
  39,
  34,
  35,
  40,
  41,
  43,
  42,
  44,
  45,
  46,
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite_PartyMember, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite_PartyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite_PartyMember, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite_PartyMember, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite_PartyMember, _impl_.is_coach_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite, _impl_.sender_name_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite, _impl_.members_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite, _impl_.low_priority_status_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite, _impl_.as_coach_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite, _impl_.invite_gid_),
  1,
  2,
  0,
  ~0u,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverState, _impl_.lobby_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverState, _impl_.game_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverState, _impl_.leaver_detected_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverState, _impl_.first_blood_happened_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverState, _impl_.discard_match_results_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverState, _impl_.mass_disconnect_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgReadyCheckStatus_ReadyMember, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyCheckStatus_ReadyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgReadyCheckStatus_ReadyMember, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyCheckStatus_ReadyMember, _impl_.ready_status_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgReadyCheckStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyCheckStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgReadyCheckStatus, _impl_.start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyCheckStatus, _impl_.finish_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyCheckStatus, _impl_.initiator_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyCheckStatus, _impl_.ready_members_),
  0,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyReadyCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyReadyCheckResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyReadyCheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyReadyCheckResponse, _impl_.result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPartyReadyCheckAcknowledge, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyReadyCheckAcknowledge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyReadyCheckAcknowledge, _impl_.ready_status_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventGameDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventGameDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventGameDetails, _impl_.kv_data_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMatchmakingStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMatchmakingStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMatchmakingStats, _impl_.average_queue_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMatchmakingStats, _impl_.maximum_queue_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMatchmakingStats, _impl_.behavior_score_variance_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMvpData_MvpDatum_MvpAccolade, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMvpData_MvpDatum_MvpAccolade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMvpData_MvpDatum_MvpAccolade, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CMvpData_MvpDatum_MvpAccolade, _impl_.detail_value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMvpData_MvpDatum, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMvpData_MvpDatum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMvpData_MvpDatum, _impl_.player_slot_),
  PROTOBUF_FIELD_OFFSET(::CMvpData_MvpDatum, _impl_.accolades_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMvpData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMvpData, _impl_.mvps_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, -1, sizeof(::CSODOTAPartyMember)},
  { 34, 91, -1, sizeof(::CSODOTAParty)},
  { 142, 151, -1, sizeof(::CSODOTAPartyInvite_PartyMember)},
  { 154, 168, -1, sizeof(::CSODOTAPartyInvite)},
  { 176, 188, -1, sizeof(::CMsgLeaverState)},
  { 194, 202, -1, sizeof(::CMsgReadyCheckStatus_ReadyMember)},
  { 204, 214, -1, sizeof(::CMsgReadyCheckStatus)},
  { 218, -1, -1, sizeof(::CMsgPartyReadyCheckRequest)},
  { 224, 231, -1, sizeof(::CMsgPartyReadyCheckResponse)},
  { 232, 239, -1, sizeof(::CMsgPartyReadyCheckAcknowledge)},
  { 240, 247, -1, sizeof(::CMsgLobbyEventGameDetails)},
  { 248, 257, -1, sizeof(::CMsgMatchMatchmakingStats)},
  { 260, 268, -1, sizeof(::CMvpData_MvpDatum_MvpAccolade)},
  { 270, 278, -1, sizeof(::CMvpData_MvpDatum)},
  { 280, -1, -1, sizeof(::CMvpData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CSODOTAPartyMember_default_instance_._instance,
  &::_CSODOTAParty_default_instance_._instance,
  &::_CSODOTAPartyInvite_PartyMember_default_instance_._instance,
  &::_CSODOTAPartyInvite_default_instance_._instance,
  &::_CMsgLeaverState_default_instance_._instance,
  &::_CMsgReadyCheckStatus_ReadyMember_default_instance_._instance,
  &::_CMsgReadyCheckStatus_default_instance_._instance,
  &::_CMsgPartyReadyCheckRequest_default_instance_._instance,
  &::_CMsgPartyReadyCheckResponse_default_instance_._instance,
  &::_CMsgPartyReadyCheckAcknowledge_default_instance_._instance,
  &::_CMsgLobbyEventGameDetails_default_instance_._instance,
  &::_CMsgMatchMatchmakingStats_default_instance_._instance,
  &::_CMvpData_MvpDatum_MvpAccolade_default_instance_._instance,
  &::_CMvpData_MvpDatum_default_instance_._instance,
  &::_CMvpData_default_instance_._instance,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-dota_gcmessages_common_match_managemen"
  "t.proto\032\023steammessages.proto\032\026gcsdk_gcme"
  "ssages.proto\032\027dota_shared_enums.proto\"\236\003"
  "\n\022CSODOTAPartyMember\022\020\n\010is_coach\030\002 \001(\010\022\035"
  "\n\021region_ping_codes\030\004 \003(\rB\002\020\001\022\035\n\021region_"
  "ping_times\030\005 \003(\rB\002\020\001\022\"\n\032region_ping_fail"
  "ed_bitmask\030\006 \001(\r\022\032\n\022is_plus_subscriber\030\n"
  " \001(\010\022\033\n\023tourney_skill_level\030\007 \001(\r\022\025\n\rtou"
  "rney_buyin\030\010 \001(\r\022\035\n\025tourney_prevent_unti"
  "l\030\t \001(\r\022\025\n\rmm_data_valid\030\r \001(\010\022\034\n\024lane_s"
  "election_flags\030\013 \001(\r\022\036\n\026high_priority_di"
  "sabled\030\016 \001(\010\022\027\n\017has_hp_resource\030\017 \001(\010\022\037\n"
  "\027joined_from_partyfinder\030\014 \001(\010\022\026\n\016is_ste"
  "am_china\030\020 \001(\010\"\372\r\n\014CSODOTAParty\022\026\n\010party"
  "_id\030\001 \001(\004B\004\200\246\035\001\022\021\n\tleader_id\030\002 \001(\006\022\022\n\nme"
  "mber_ids\030\003 \003(\006\022\022\n\ngame_modes\030\004 \001(\r\022&\n\005st"
  "ate\030\006 \001(\0162\023.CSODOTAParty.State:\002UI\022*\n\"ef"
  "fective_started_matchmaking_time\030\007 \001(\r\022$"
  "\n\034raw_started_matchmaking_time\030  \001(\r\022\032\n\022"
  "attempt_start_time\030! \001(\r\022\023\n\013attempt_num\030"
  "\" \001(\r\022\023\n\013matchgroups\030\013 \001(\r\022\037\n\027low_priori"
  "ty_account_id\030\023 \001(\r\0221\n\nmatch_type\030\025 \001(\0162"
  "\n.MatchType:\021MATCH_TYPE_CASUAL\022\017\n\007team_i"
  "d\030\027 \001(\r\022\021\n\tteam_name\0303 \001(\t\022\024\n\014team_ui_lo"
  "go\0304 \001(\004\022\026\n\016team_base_logo\0305 \001(\004\022!\n\031matc"
  "h_disabled_until_date\030\030 \001(\r\022!\n\031match_dis"
  "abled_account_id\030\031 \001(\r\022%\n\035matchmaking_ma"
  "x_range_minutes\030\032 \001(\r\022\026\n\016matchlanguages\030"
  "\033 \001(\r\022$\n\007members\030\035 \003(\0132\023.CSODOTAPartyMem"
  "ber\022$\n\034low_priority_games_remaining\030# \001("
  "\r\022\036\n\026open_for_join_requests\030( \001(\010\022)\n\014sen"
  "t_invites\030) \003(\0132\023.CSODOTAPartyInvite\022)\n\014"
  "recv_invites\030* \003(\0132\023.CSODOTAPartyInvite\022"
  "\025\n\raccount_flags\030+ \001(\r\022\033\n\023region_select_"
  "flags\030, \001(\r\022\037\n\027exclusive_tournament_id\030-"
  " \001(\r\022\033\n\023tourney_division_id\030/ \001(\r\022\035\n\025tou"
  "rney_schedule_time\0300 \001(\r\022\033\n\023tourney_skil"
  "l_level\0301 \001(\r\022\035\n\025tourney_bracket_round\0302"
  " \001(\r\022#\n\033tourney_queue_deadline_time\0306 \001("
  "\r\022f\n\034tourney_queue_deadline_state\0307 \001(\0162"
  "\033.ETourneyQueueDeadlineState:#k_ETourney"
  "QueueDeadlineState_Normal\022#\n\033party_build"
  "er_slots_to_fill\0308 \001(\r\022\"\n\032party_builder_"
  "match_groups\0309 \001(\r\022 \n\030party_builder_star"
  "t_time\030: \001(\r\022\022\n\nsolo_queue\030; \001(\010\022\035\n\025stea"
  "m_clan_account_id\030= \001(\r\022*\n\013ready_check\030>"
  " \001(\0132\025.CMsgReadyCheckStatus\022\'\n\037custom_ga"
  "me_disabled_until_date\030\? \001(\r\022\'\n\037custom_g"
  "ame_disabled_account_id\030@ \001(\r\022\032\n\022is_chal"
  "lenge_match\030A \001(\010\022\"\n\032party_search_beacon"
  "_active\030B \001(\010\022\031\n\021matchmaking_flags\030C \001(\r"
  "\022M\n\023high_priority_state\030D \001(\0162\025.EHighPri"
  "orityMMState:\031k_EHighPriorityMM_Unknown\022"
  "\037\n\027lane_selections_enabled\030E \001(\010\022#\n\033cust"
  "om_game_difficulty_mask\030F \001(\r\022\026\n\016is_stea"
  "m_china\030G \001(\010\022\033\n\023bot_difficulty_mask\030H \001"
  "(\r\022\035\n\025bot_script_index_mask\030I \001(\r\"0\n\005Sta"
  "te\022\006\n\002UI\020\000\022\021\n\rFINDING_MATCH\020\001\022\014\n\010IN_MATC"
  "H\020\002\"\233\002\n\022CSODOTAPartyInvite\022\026\n\010group_id\030\001"
  " \001(\004B\004\200\246\035\001\022\021\n\tsender_id\030\002 \001(\006\022\023\n\013sender_"
  "name\030\003 \001(\t\0220\n\007members\030\004 \003(\0132\037.CSODOTAPar"
  "tyInvite.PartyMember\022\017\n\007team_id\030\005 \001(\r\022\033\n"
  "\023low_priority_status\030\006 \001(\010\022\020\n\010as_coach\030\007"
  " \001(\010\022\022\n\ninvite_gid\030\010 \001(\006\032\?\n\013PartyMember\022"
  "\014\n\004name\030\001 \001(\t\022\020\n\010steam_id\030\002 \001(\006\022\020\n\010is_co"
  "ach\030\004 \001(\010\"\325\001\n\017CMsgLeaverState\022\023\n\013lobby_s"
  "tate\030\001 \001(\r\022>\n\ngame_state\030\002 \001(\0162\017.DOTA_Ga"
  "meState:\031DOTA_GAMERULES_STATE_INIT\022\027\n\017le"
  "aver_detected\030\003 \001(\010\022\034\n\024first_blood_happe"
  "ned\030\004 \001(\010\022\035\n\025discard_match_results\030\005 \001(\010"
  "\022\027\n\017mass_disconnect\030\006 \001(\010\"\213\002\n\024CMsgReadyC"
  "heckStatus\022\027\n\017start_timestamp\030\001 \001(\r\022\030\n\020f"
  "inish_timestamp\030\002 \001(\r\022\034\n\024initiator_accou"
  "nt_id\030\003 \001(\r\0228\n\rready_members\030\004 \003(\0132!.CMs"
  "gReadyCheckStatus.ReadyMember\032h\n\013ReadyMe"
  "mber\022\022\n\naccount_id\030\001 \001(\r\022E\n\014ready_status"
  "\030\002 \001(\0162\022.EReadyCheckStatus:\033k_EReadyChec"
  "kStatus_Unknown\"\034\n\032CMsgPartyReadyCheckRe"
  "quest\"l\n\033CMsgPartyReadyCheckResponse\022M\n\006"
  "result\030\001 \001(\0162\031.EReadyCheckRequestResult:"
  "\"k_EReadyCheckRequestResult_Success\"g\n\036C"
  "MsgPartyReadyCheckAcknowledge\022E\n\014ready_s"
  "tatus\030\001 \001(\0162\022.EReadyCheckStatus:\033k_ERead"
  "yCheckStatus_Unknown\",\n\031CMsgLobbyEventGa"
  "meDetails\022\017\n\007kv_data\030\001 \001(\014\"\271\001\n\031CMsgMatch"
  "MatchmakingStats\022\032\n\022average_queue_time\030\001"
  " \001(\r\022\032\n\022maximum_queue_time\030\002 \001(\r\022d\n\027beha"
  "vior_score_variance\030\003 \001(\0162\034.EMatchBehavi"
  "orScoreVariance:%k_EMatchBehaviorScoreVa"
  "riance_Invalid\"\347j\n\010CMvpData\022 \n\004mvps\030\001 \003("
  "\0132\022.CMvpData.MvpDatum\032\270j\n\010MvpDatum\022\023\n\013pl"
  "ayer_slot\030\001 \001(\r\0221\n\taccolades\030\002 \003(\0132\036.CMv"
  "pData.MvpDatum.MvpAccolade\032\343i\n\013MvpAccola"
  "de\022C\n\004type\030\001 \001(\0162..CMvpData.MvpDatum.Mvp"
  "Accolade.MvpAccoladeType:\005kills\022\024\n\014detai"
  "l_value\030\002 \001(\002\"\370h\n\017MvpAccoladeType\022\t\n\005kil"
  "ls\020\001\022\n\n\006deaths\020\002\022\013\n\007assists\020\003\022\r\n\tnet_wor"
  "th\020\005\022\016\n\nitem_value\020\006\022\026\n\022support_gold_spe"
  "nt\020\007\022\020\n\014wards_placed\020\010\022\013\n\007dewards\020\t\022\021\n\rc"
  "amps_stacked\020\n\022\r\n\tlast_hits\020\013\022\n\n\006denies\020"
  "\014\022\"\n\036kKillEaterEvent_Killing_Sprees\020\r\022\033\n"
  "\027kKillEaterEvent_Godlike\020\016\022$\n kKillEater"
  "Event_Towers_Destroyed\020\017\022.\n*kKillEaterEv"
  "entType_Invoker_SunstrikeKills\020\020\022!\n\035kKil"
  "lEaterEventType_Axe_Culls\020\021\022-\n)kKillEate"
  "rEventType_Axe_BattleHungerKills\020\022\022&\n\"kK"
  "illEaterEventType_LowHealthKills\020\023\022,\n(kK"
  "illEaterEventType_Invoker_TornadoKills\020\024"
  "\022(\n$kKillEaterEventType_Sven_DoubleStuns"
  "\020\025\022*\n&kKillEaterEventType_Sven_WarcryAss"
  "ists\020\026\022.\n*kKillEaterEventType_Sven_Cleav"
  "eDoubleKills\020\027\022/\n+kKillEaterEventType_Sv"
  "en_TeleportInterrupts\020\030\022,\n(kKillEaterEve"
  "ntType_Faceless_MultiChrono\020\031\022,\n(kKillEa"
  "terEventType_Faceless_ChronoKills\020\032\022(\n$k"
  "KillEaterEventType_Ursa_MultiShocks\020\033\022#\n"
  "\037kKillEaterEventType_RoshanKills\020\034\022(\n$kK"
  "illEaterEventType_Lion_FingerKills\020\035\022,\n("
  "kKillEaterEventType_Riki_SmokedHeroKills"
  "\020 \022.\n*kKillEaterEventType_HeroesRevealed"
  "WithDust\020!\0227\n3kKillEaterEventType_Skelet"
  "onKing_ReincarnationKills\020\"\022+\n\'kKillEate"
  "rEventType_Skywrath_FlareKills\020#\022/\n+kKil"
  "lEaterEventType_Leshrac_SplitEarthStuns\020"
  "$\022,\n(kKillEaterEventType_Mirana_MaxStunA"
  "rrows\020%\0228\n4kKillEaterEventType_PhantomAs"
  "sassin_CoupdeGraceCrits\020&\0223\n/kKillEaterE"
  "ventType_PhantomAssassin_DaggerCrits\020\'\022("
  "\n$kKillEaterEventType_Meepo_Earthbinds\020("
  "\0220\n,kKillEaterEventType_Bloodseeker_Rupt"
  "ureKills\020)\022,\n(kKillEaterEventType_Slark_"
  "LeashedEnemies\020*\0222\n.kKillEaterEventType_"
  "Disruptor_FountainGlimpses\020+\022+\n\'kKillEat"
  "erEventType_Rubick_SpellsStolen\020,\022.\n*kKi"
  "llEaterEventType_Rubick_UltimatesStolen\020"
  "-\022*\n&kKillEaterEventType_Doom_EnemiesDoo"
  "med\020.\0220\n,kKillEaterEventType_Omniknight_"
  "Purifications\020/\0221\n-kKillEaterEventType_O"
  "mniknight_AlliesRepelled\0200\0222\n.kKillEater"
  "EventType_Omniknight_EnemiesRepelled\0201\0222"
  "\n.kKillEaterEventType_Warlock_FiveHeroFa"
  "talBonds\0202\0228\n4kKillEaterEventType_Crysta"
  "lMaiden_FrostbittenEnemies\0203\0222\n.kKillEat"
  "erEventType_CrystalMaiden_CrystalNovas\0204"
  "\0221\n-kKillEaterEventType_Kunkka_DoubleHer"
  "oTorrents\0205\0223\n/kKillEaterEventType_Kunkk"
  "a_TripleHeroGhostShips\0206\0221\n-kKillEaterEv"
  "entType_NagaSiren_EnemiesEnsnared\0207\0224\n0k"
  "KillEaterEventType_NagaSiren_TripleHeroR"
  "ipTides\0208\0223\n/kKillEaterEventType_Lycan_K"
  "illsDuringShapeshift\0209\022,\n(kKillEaterEven"
  "tType_Pudge_DismemberKills\020:\022/\n+kKillEat"
  "erEventType_Pudge_EnemyHeroesHooked\020;\022\'\n"
  "#kKillEaterEventType_Pudge_HookKills\020<\0225"
  "\n1kKillEaterEventType_Pudge_UnseenEnemyH"
  "eroesHooked\020=\0222\n.kKillEaterEventType_Dro"
  "wRanger_EnemiesSilenced\020>\0224\n0kKillEaterE"
  "ventType_DrowRanger_MultiHeroSilences\020\?\022"
  "0\n,kKillEaterEventType_DrowRanger_Silenc"
  "edKills\020@\0222\n.kKillEaterEventType_DrowRan"
  "ger_FrostArrowKills\020A\0226\n2kKillEaterEvent"
  "Type_DragonKnight_KillsInDragonForm\020B\0225\n"
  "1kKillEaterEventType_DragonKnight_Breath"
  "eFireKills\020C\0220\n,kKillEaterEventType_Drag"
  "onKnight_SplashKills\020D\022-\n)kKillEaterEven"
  "tType_WitchDoctor_CaskStuns\020E\0221\n-kKillEa"
  "terEventType_WitchDoctor_MaledictKills\020F"
  "\0226\n2kKillEaterEventType_WitchDoctor_Mult"
  "iHeroMaledicts\020G\0222\n.kKillEaterEventType_"
  "WitchDoctor_DeathWardKills\020H\0224\n0kKillEat"
  "erEventType_Disruptor_ThunderStrikeKills"
  "\020I\0220\n,kKillEaterEventType_Disruptor_Hero"
  "esGlimpsed\020J\0228\n4kKillEaterEventType_Crys"
  "talMaiden_FreezingFieldKills\020K\022/\n+kKillE"
  "aterEventType_Medusa_EnemiesPetrified\020M\022"
  "/\n+kKillEaterEventType_Warlock_FatalBond"
  "sKills\020N\022*\n&kKillEaterEventType_Warlock_"
  "GolemKills\020O\022*\n&kKillEaterEventType_Tusk"
  "_WalrusPunches\020P\022*\n&kKillEaterEventType_"
  "Tusk_SnowballStuns\020Q\0220\n,kKillEaterEventT"
  "ype_Earthshaker_FissureStuns\020R\0222\n.kKillE"
  "aterEventType_Earthshaker_3HeroEchoslams"
  "\020S\0222\n.kKillEaterEventType_SandKing_Burro"
  "wstrikeStuns\020T\022/\n+kKillEaterEventType_Sa"
  "ndKing_EpicenterKills\020U\0225\n1kKillEaterEve"
  "ntType_SkywrathMage_AncientSealKills\020V\0228"
  "\n4kKillEaterEventType_SkywrathMage_Concu"
  "ssiveShotKills\020W\022,\n(kKillEaterEventType_"
  "Luna_LucentBeamKills\020X\022)\n%kKillEaterEven"
  "tType_Luna_EclipseKills\020Y\0228\n4kKillEaterE"
  "ventType_KeeperOfTheLight_IlluminateKill"
  "s\020Z\0226\n2kKillEaterEventType_KeeperOfTheLi"
  "ght_ManaLeakStuns\020[\022:\n6kKillEaterEventTy"
  "pe_KeeperOfTheLight_TeammatesRecalled\020\\\022"
  "0\n,kKillEaterEventType_LegionCommander_D"
  "uelsWon\020]\022-\n)kKillEaterEventType_Beastma"
  "ster_RoarKills\020^\0222\n.kKillEaterEventType_"
  "Beastmaster_RoarMultiKills\020_\0225\n1kKillEat"
  "erEventType_Windrunner_FocusFireBuilding"
  "s\020`\0221\n-kKillEaterEventType_Windrunner_Po"
  "wershotKills\020a\0226\n2kKillEaterEventType_Ph"
  "antomAssassin_DaggerLastHits\020b\022:\n6kKillE"
  "aterEventType_PhantomAssassin_PhantomStr"
  "ikeKills\020c\0224\n0kKillEaterEventType_DeathP"
  "rophet_CryptSwarmKills\020d\022:\n6kKillEaterEv"
  "entType_DeathProphet_ExorcismBuildingKil"
  "ls\020e\022<\n8kKillEaterEventType_DeathProphet"
  "_ExorcismSpiritsSummoned\020f\0226\n2kKillEater"
  "EventType_DeathProphet_MultiHeroSilences"
  "\020g\022-\n)kKillEaterEventType_Abaddon_MistCo"
  "ilKills\020h\022.\n*kKillEaterEventType_Abaddon"
  "_MistCoilHealed\020i\0222\n.kKillEaterEventType"
  "_Abaddon_AphoticShieldKills\020j\0222\n.kKillEa"
  "terEventType_Lich_ChainFrostTripleKills\020"
  "k\0221\n-kKillEaterEventType_Lich_ChainFrost"
  "MultiKills\020l\022.\n*kKillEaterEventType_Lich"
  "_ChainFrostBounces\020m\022)\n%kKillEaterEventT"
  "ype_Ursa_EnragedKills\020n\022,\n(kKillEaterEve"
  "ntType_Ursa_EarthshockKills\020o\022-\n)kKillEa"
  "terEventType_Lina_LagunaBladeKills\020p\022-\n)"
  "kKillEaterEventType_Lina_DragonSlaveKill"
  "s\020q\0222\n.kKillEaterEventType_Lina_LightStr"
  "ikeArrayStuns\020r\022&\n\"kKillEaterEvent_Barra"
  "cks_Destroyed\020s\022-\n)kKillEaterEvent_Templ"
  "arAssassin_MeldKills\020t\0220\n,kKillEaterEven"
  "t_TemplarAssassin_HeroesSlowed\020u\022-\n)kKil"
  "lEaterEvent_Sniper_AssassinationKills\020v\022"
  "(\n$kKillEaterEvent_Sniper_HeadshotStuns\020"
  "w\022*\n&kKillEaterEvent_EarthSpirit_SmashSt"
  "uns\020x\022,\n(kKillEaterEvent_EarthSpirit_Gri"
  "pSilences\020y\022-\n)kKillEaterEvent_ShadowSha"
  "man_ShackleKills\020z\022)\n%kKillEaterEvent_Sh"
  "adowShaman_HexKills\020{\022*\n&kKillEaterEvent"
  "_Centaur_EnemiesStomped\020|\022+\n\'kKillEaterE"
  "vent_Centaur_DoubleEdgeKills\020}\022\'\n#kKillE"
  "aterEvent_Centaur_ReturnKills\020~\022.\n*kKill"
  "EaterEvent_EmberSpirit_EnemiesChained\020\177\022"
  "8\n3kKillEaterEvent_EmberSpirit_SleightOf"
  "FistMultiKills\020\200\001\022\"\n\035kKillEaterEvent_Puc"
  "k_OrbKills\020\201\001\0222\n-kKillEaterEvent_Vengefu"
  "lSpirit_EnemiesStunned\020\202\001\022*\n%kKillEaterE"
  "vent_Lifestealer_RageKills\020\203\001\0220\n+kKillEa"
  "terEvent_Lifestealer_OpenWoundsKills\020\204\001\022"
  ",\n\'kKillEaterEvent_Lifestealer_InfestKil"
  "ls\020\205\001\022+\n&kKillEaterEvent_ElderTitan_Spir"
  "itKills\020\206\001\022*\n%kKillEaterEvent_ElderTitan"
  "_GoodStomps\020\207\001\022*\n%kKillEaterEvent_Clockw"
  "erk_RocketKills\020\210\001\022/\n*kKillEaterEvent_Cl"
  "ockwerk_BlindRocketKills\020\211\001\022*\n%kKillEate"
  "rEvent_StormSpirit_BallKills\020\212\001\0223\n.kKill"
  "EaterEvent_StormSpirit_DoubleRemnantKill"
  "s\020\213\001\022,\n\'kKillEaterEvent_StormSpirit_Vort"
  "exKills\020\214\001\022.\n)kKillEaterEvent_Tinker_Dou"
  "bleMissileKills\020\215\001\022&\n!kKillEaterEvent_Ti"
  "nker_LaserKills\020\216\001\022)\n$kKillEaterEvent_Te"
  "chies_SuicideKills\020\217\001\022*\n%kKillEaterEvent"
  "_Techies_LandMineKills\020\220\001\022,\n\'kKillEaterE"
  "vent_Techies_StatisTrapStuns\020\221\001\022,\n\'kKill"
  "EaterEvent_Techies_RemoteMineKills\020\222\001\0220\n"
  "+kKillEaterEvent_ShadowFiend_TripleRazeK"
  "ills\020\223\001\0222\n-kKillEaterEvent_ShadowFiend_R"
  "equiemMultiKills\020\224\001\022+\n&kKillEaterEvent_S"
  "hadowFiend_QRazeKills\020\225\001\022+\n&kKillEaterEv"
  "ent_ShadowFiend_WRazeKills\020\226\001\022+\n&kKillEa"
  "terEvent_ShadowFiend_ERazeKills\020\227\001\022+\n&kK"
  "illEaterEvent_Oracle_FatesEdictKills\020\230\001\022"
  "-\n(kKillEaterEvent_Oracle_FalsePromiseSa"
  "ves\020\231\001\022.\n)kKillEaterEvent_Juggernaut_Omn"
  "islashKills\020\232\001\0227\n2kKillEaterEventType_Sk"
  "eletonKing_SkeletonHeroKills\020\235\001\022:\n5kKill"
  "EaterEventType_DarkWillow_CursedCrownTri"
  "pleStuns\020\236\001\0221\n,kKillEaterEventType_Dazzl"
  "e_ShallowGraveSaves\020\237\001\0220\n+kKillEaterEven"
  "tType_Dazzle_PoisonTouchKills\020\240\001\022%\n kKil"
  "lEaterEventType_ThreeManMeks\020\241\001\0220\n+kKill"
  "EaterEventType_Viper_PoisonAttackKills\020\242"
  "\001\0221\n,kKillEaterEventType_Viper_Corrosive"
  "SkinKills\020\243\001\022\'\n\"kKillEaterEventType_Thre"
  "eHeroVeils\020\244\001\0225\n0kKillEaterEventType_Vip"
  "er_KillsDuringViperStrike\020\245\001\022(\n#kKillEat"
  "erEventType_SolarCrestKills\020\246\001\022,\n\'kKillE"
  "aterEventType_Tiny_TreeThrowKills\020\247\001\022+\n&"
  "kKillEaterEventType_Riki_BackstabKills\020\250"
  "\001\0228\n3kKillEaterEventType_Phoenix_ThreeHe"
  "roSupernovaStuns\020\251\001\0227\n2kKillEaterEventTy"
  "pe_Terrorblade_MetamorphosisKills\020\252\001\022.\n)"
  "kKillEaterEventType_Lion_GreatFingerKill"
  "s\020\253\001\022;\n6kKillEaterEventType_Antimage_Spe"
  "llsBlockedWithAghanims\020\254\001\0223\n.kKillEaterE"
  "ventType_Antimage_ThreeManManaVoids\020\255\001\0225"
  "\n0kKillEaterEventType_ArcWarden_TempestD"
  "oubleKills\020\256\001\0223\n.kKillEaterEventType_Arc"
  "Warden_SparkWraithKills\020\257\001\022+\n&kKillEater"
  "EventType_Bane_BrainSapKills\020\260\001\022-\n(kKill"
  "EaterEventType_Bane_FiendsGripKills\020\261\001\0227"
  "\n2kKillEaterEventType_Batrider_TripleHer"
  "oFlamebreaks\020\262\001\0223\n.kKillEaterEventType_B"
  "atrider_DoubleHeroLassoes\020\263\001\022:\n5kKillEat"
  "erEventType_Brewmaster_KillsDuringPrimal"
  "Split\020\264\001\022>\n9kKillEaterEventType_Bristleb"
  "ack_KillsUnderFourQuillStacks\020\265\001\0227\n2kKil"
  "lEaterEventType_Bristleback_TripleHeroNa"
  "salGoo\020\266\001\0228\n3kKillEaterEventType_Broodmo"
  "ther_SpiderlingHeroKills\020\267\001\0223\n.kKillEate"
  "rEventType_Broodmother_KillsInsideWeb\020\270\001"
  "\0222\n-kKillEaterEventType_Centaur_ThreeHer"
  "oStampede\020\271\001\0225\n0kKillEaterEventType_Chao"
  "sKnight_RealityRiftKills\020\272\001\0220\n+kKillEate"
  "rEventType_Chen_KillsWithPenitence\020\273\001\022:\n"
  "5kKillEaterEventType_CrystalMaiden_TwoHe"
  "roCrystalNovas\020\274\001\022>\n9kKillEaterEventType"
  "_CrystalMaiden_ThreeHeroFreezingFields\020\275"
  "\001\022/\n*kKillEaterEventType_Dazzle_ShadowWa"
  "veKills\020\276\001\0221\n,kKillEaterEventType_DeathP"
  "rophet_SiphonKills\020\277\001\022=\n8kKillEaterEvent"
  "Type_DeathProphet_ExorcismKillsDuringEul"
  "s\020\300\001\022C\n>kKillEaterEventType_Disruptor_Th"
  "reeHeroKineticFieldStaticStorm\020\301\001\0224\n/kKi"
  "llEaterEventType_Doom_InfernalBladeBurnK"
  "ills\020\302\001\022@\n;kKillEaterEventType_DrowRange"
  "r_PrecisionAuraCreepTowerKills\020\303\001\0221\n,kKi"
  "llEaterEventType_EmberSpirit_RemnantKill"
  "s\020\304\001\0227\n2kKillEaterEventType_EmberSpirit_"
  "SleightOfFistKills\020\305\001\022<\n7kKillEaterEvent"
  "Type_Enigma_MidnightPulseBlackHoleCombos"
  "\020\306\001\0222\n-kKillEaterEventType_Enigma_ThreeM"
  "anBlackHoles\020\307\001\022;\n6kKillEaterEventType_F"
  "acelessVoid_MultiHeroTimeDilation\020\310\001\0227\n2"
  "kKillEaterEventType_Gyrocopter_ThreeHero"
  "FlakCannon\020\311\001\0226\n1kKillEaterEventType_Gyr"
  "ocopter_HomingMissileKills\020\312\001\0226\n1kKillEa"
  "terEventType_Gyrocopter_RocketBarrageKil"
  "ls\020\313\001\0224\n/kKillEaterEventType_Huskar_Kill"
  "sDuringLifeBreak\020\314\001\0221\n,kKillEaterEventTy"
  "pe_Huskar_BurningSpearKills\020\315\001\0221\n,kKillE"
  "aterEventType_Invoker_MultiHeroIceWall\020\316"
  "\001\022-\n(kKillEaterEventType_Invoker_ThreeHe"
  "roEMP\020\317\001\0228\n3kKillEaterEventType_Invoker_"
  "ThreeHeroDeafeningBlast\020\320\001\0225\n0kKillEater"
  "EventType_Invoker_MultiHeroChaosMeteor\020\321"
  "\001\0223\n.kKillEaterEventType_Jakiro_MultiHer"
  "oDualBreath\020\322\001\0226\n1kKillEaterEventType_Ja"
  "kiro_IcePathMacropyreCombos\020\323\001\022/\n*kKillE"
  "aterEventType_Leshrac_PulseNovaKills\020\324\001\022"
  "8\n3kKillEaterEventType_Leshrac_ThreeHero"
  "LightningStorm\020\325\001\0224\n/kKillEaterEventType"
  "_Lion_ThreeHeroFingerOfDeath\020\326\001\022(\n#kKill"
  "EaterEventType_Meepo_PoofKills\020\327\001\0222\n-kKi"
  "llEaterEventType_Meepo_MultiHeroEarthbin"
  "ds\020\330\001\0224\n/kKillEaterEventType_NightStalke"
  "r_NighttimeKills\020\331\001\0227\n2kKillEaterEventTy"
  "pe_Morphling_KillsDuringReplicate\020\332\001\0220\n+"
  "kKillEaterEventType_OgreMagi_FireblastKi"
  "lls\020\333\001\022-\n(kKillEaterEventType_OgreMagi_I"
  "gniteKills\020\334\001\022.\n)kKillEaterEventType_Dom"
  "inatingKillStreaks\020\335\001\022(\n#kKillEaterEvent"
  "Type_MegaKillStreaks\020\336\001\0220\n+kKillEaterEve"
  "ntType_Alchemist_AghanimsGiven\020\337\001\022,\n\'kKi"
  "llEaterEventType_VeilsLeadingToKills\020\340\001\022"
  "+\n&kKillEaterEventType_DustLeadingToKill"
  "s\020\341\001\0227\n2kKillEaterEventType_WitchDoctor_"
  "MultiHeroCaskStuns\020\342\001\022-\n(kKillEaterEvent"
  "Type_Weaver_ShukuchiKills\020\343\001\0229\n4kKillEat"
  "erEventType_Windrunner_ShackleFocusFireK"
  "ills\020\344\001\022B\n=kKillEaterEventType_VengefulS"
  "pirit_VengeanceAuraIllusionKills\020\345\001\022.\n)k"
  "KillEaterEventType_Tusk_WalrusPunchKills"
  "\020\346\001\022/\n*kKillEaterEventType_Tinker_MultiH"
  "eroLasers\020\347\001\022;\n6kKillEaterEventType_Temp"
  "larAssassin_MultiHeroPsiBlades\020\350\001\0225\n0kKi"
  "llEaterEventType_Sven_KillsDuringGodsStr"
  "ength\020\351\001\0222\n-kKillEaterEventType_Sniper_T"
  "hreeHeroShrapnels\020\352\001\0225\n0kKillEaterEventT"
  "ype_Slark_KillsDuringShadowDance\020\353\001\022:\n5k"
  "KillEaterEventType_ShadowShaman_MultiHer"
  "oEtherShocks\020\354\001\022=\n8kKillEaterEventType_S"
  "hadowShaman_SerpentWardShackleKills\020\355\001\0227"
  "\n2kKillEaterEventType_Riki_ThreeHeroTric"
  "ksOfTheTrade\020\356\001\0221\n,kKillEaterEventType_R"
  "azor_EyeOfTheStormKills\020\357\001\022-\n(kKillEater"
  "EventType_Pugna_LifeDrainKills\020\360\001\022>\n9kKi"
  "llEaterEventType_ObsidianDestroyer_Sanit"
  "ysEclipseKills\020\361\001\0224\n/kKillEaterEventType"
  "_Oracle_MultiHeroFortunesEnd\020\362\001\0225\n0kKill"
  "EaterEventType_Omniknight_PurificationKi"
  "lls\020\363\001\022C\n>kKillEaterEventType_NightStalk"
  "er_EnemyMissesUnderCripplingFear\020\364\001\0224\n/k"
  "KillEaterEventType_Warlock_ThreeHeroFata"
  "lBonds\020\365\001\0223\n.kKillEaterEventType_Riki_Tr"
  "icksOfTheTradeKills\020\366\001\0225\n0kKillEaterEven"
  "tType_Earthshaker_AftershockHits10\020\367\001\0223\n"
  ".kKillEaterEventType_Earthshaker_5HeroEc"
  "hoslams\020\370\001\0222\n-kKillEaterEventType_Lina_L"
  "agunaBladeHeroKills\020\371\001\0222\n-kKillEaterEven"
  "tType_Lina_LightStrikeHeroStuns\020\372\001\0226\n1kK"
  "illEaterEventType_Earthshaker_FissureMul"
  "tiStuns\020\373\001\022/\n*kKillEaterEventType_Earths"
  "haker_TotemKills\020\374\001\0223\n.kKillEaterEventTy"
  "pe_Pangolier_SwashbuckleKills\020\375\001\0222\n-kKil"
  "lEaterEventType_Furion_EnemyHeroesTrappe"
  "d\020\376\001\0224\n/kKillEaterEventType_Pangolier_He"
  "artpiercerKills\020\377\001\0222\n-kKillEaterEventTyp"
  "e_Medusa_MultiHeroStoneGaze\020\200\002\022.\n)kKillE"
  "aterEventType_Medusa_SplitShotKills\020\201\002\0222"
  "\n-kKillEaterEventType_Mirana_MultiHeroSt"
  "arstorm\020\202\002\0228\n3kKillEaterEventType_Mirana"
  "_KillsFromMoonlightShadow\020\203\002\0220\n+kKillEat"
  "erEventType_Magnus_MultiHeroSkewers\020\204\002\0228"
  "\n3kKillEaterEventType_Magnus_MultiHeroRe"
  "versePolarity\020\205\002\0229\n4kKillEaterEventType_"
  "Magnus_HeroesSlowedWithShockwave\020\206\002\0220\n+k"
  "KillEaterEventType_NagaSiren_MultiHeroSo"
  "ng\020\207\002\0225\n0kKillEaterEventType_NagaSiren_A"
  "lliesHealedBySong\020\210\002\0220\n+kKillEaterEventT"
  "ype_LoneDruid_MultiHeroRoar\020\211\002\0221\n,kKillE"
  "aterEventType_LoneDruid_BattleCryKills\020\212"
  "\002\0225\n0kKillEaterEventType_WinterWyvern_Th"
  "reeHeroCurses\020\213\002\022\?\n:kKillEaterEventType_"
  "Antimage_SpellsBlockedWithCounterspell\020\214"
  "\002\0222\n-kKillEaterEventType_Mars_EnemiesKil"
  "ledInArena\020\215\002\0221\n,kKillEaterEventType_Mar"
  "s_MultiHeroGodsRebuke\020\216\002\022-\n(kKillEaterEv"
  "entType_Mars_GodsRebukeKills\020\217\002\0222\n-kKill"
  "EaterEventType_Snapfire_LizardBlobsKills"
  "\020\220\002\0224\n/kKillEaterEventType_Snapfire_TwoH"
  "eroCookieStuns\020\221\002\022\026\n\021Custom_KillStreak\020\222"
  "\002\022-\n(kKillEaterEventType_Muerta_DeadShot"
  "Kills\020\223\002\0222\n-kKillEaterEventType_Muerta_P"
  "ierceTheVeilKills\020\224\002\0221\n,kKillEaterEventT"
  "ype_Muerta_MultiHeroDeadShot\020\225\002\0227\n2kKill"
  "EaterEventType_Muerta_DeadShotsIntoTheCa"
  "lling\020\226\002*\261\001\n\016ELaneSelection\022\035\n\031k_ELaneSe"
  "lection_SAFELANE\020\000\022\034\n\030k_ELaneSelection_O"
  "FFLANE\020\001\022\034\n\030k_ELaneSelection_MIDLANE\020\002\022!"
  "\n\035k_ELaneSelection_SUPPORT_SOFT\020\003\022!\n\035k_E"
  "LaneSelection_SUPPORT_HARD\020\004*\321\002\n\023ELaneSe"
  "lectionFlags\022\036\n\032k_ELaneSelectionFlags_No"
  "ne\020\000\022\"\n\036k_ELaneSelectionFlags_SAFELANE\020\001"
  "\022!\n\035k_ELaneSelectionFlags_OFFLANE\020\002\022!\n\035k"
  "_ELaneSelectionFlags_MIDLANE\020\004\022&\n\"k_ELan"
  "eSelectionFlags_SUPPORT_SOFT\020\010\022&\n\"k_ELan"
  "eSelectionFlags_SUPPORT_HARD\020\020\022\036\n\032k_ELan"
  "eSelectionFlags_CORE\020\007\022!\n\035k_ELaneSelecti"
  "onFlags_SUPPORT\020\030\022\035\n\031k_ELaneSelectionFla"
  "gs_ALL\020\037*i\n\026EPartyMatchmakingFlags\022!\n\035k_"
  "EPartyMatchmakingFlags_None\020\000\022,\n(k_EPart"
  "yMatchmakingFlags_LargeRankSpread\020\001*\334\002\n\024"
  "EHighPriorityMMState\022\035\n\031k_EHighPriorityM"
  "M_Unknown\020\000\022#\n\037k_EHighPriorityMM_Missing"
  "MMData\020\001\022%\n!k_EHighPriorityMM_ResourceMi"
  "ssing\020\002\022&\n\"k_EHighPriorityMM_ManuallyDis"
  "abled\020\003\022!\n\035k_EHighPriorityMM_Min_Enabled"
  "\020@\022&\n\"k_EHighPriorityMM_AllRolesSelected"
  "\020A\022#\n\037k_EHighPriorityMM_UsingResource\020B\022"
  "\037\n\033k_EHighPriorityMM_FiveStack\020C\022 \n\034k_EH"
  "ighPriorityMM_HighDemand\020D*u\n\021EReadyChec"
  "kStatus\022\037\n\033k_EReadyCheckStatus_Unknown\020\000"
  "\022 \n\034k_EReadyCheckStatus_NotReady\020\001\022\035\n\031k_"
  "EReadyCheckStatus_Ready\020\002*\366\001\n\030EReadyChec"
  "kRequestResult\022&\n\"k_EReadyCheckRequestRe"
  "sult_Success\020\000\0220\n,k_EReadyCheckRequestRe"
  "sult_AlreadyInProgress\020\001\022)\n%k_EReadyChec"
  "kRequestResult_NotInParty\020\002\022(\n$k_EReadyC"
  "heckRequestResult_SendError\020\003\022+\n\'k_ERead"
  "yCheckRequestResult_UnknownError\020\004*\301\001\n\033E"
  "MatchBehaviorScoreVariance\022)\n%k_EMatchBe"
  "haviorScoreVariance_Invalid\020\000\022%\n!k_EMatc"
  "hBehaviorScoreVariance_Low\020\001\022(\n$k_EMatch"
  "BehaviorScoreVariance_Medium\020\002\022&\n\"k_EMat"
  "chBehaviorScoreVariance_High\020\003"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_deps[3] = {
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
  &::descriptor_table_gcsdk_5fgcmessages_2eproto,
  &::descriptor_table_steammessages_2eproto,
};
static ::_pbi::once_flag descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto = {
    false, false, 18790, descriptor_table_protodef_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto,
    "dota_gcmessages_common_match_management.proto",
    &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_once, descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_deps, 3, 15,
    schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::offsets,
    file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto,
    file_level_service_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_getter() {
  return &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSODOTAParty_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[0];
}
bool CSODOTAParty_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CSODOTAParty_State CSODOTAParty::UI;
constexpr CSODOTAParty_State CSODOTAParty::FINDING_MATCH;
constexpr CSODOTAParty_State CSODOTAParty::IN_MATCH;
constexpr CSODOTAParty_State CSODOTAParty::State_MIN;
constexpr CSODOTAParty_State CSODOTAParty::State_MAX;
constexpr int CSODOTAParty::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[1];
}
bool CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::deaths;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::assists;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::net_worth;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::item_value;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::support_gold_spent;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::wards_placed;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::dewards;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::camps_stacked;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::last_hits;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::denies;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Killing_Sprees;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Godlike;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Towers_Destroyed;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Invoker_SunstrikeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Axe_Culls;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Axe_BattleHungerKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_LowHealthKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Invoker_TornadoKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Sven_DoubleStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Sven_WarcryAssists;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Sven_CleaveDoubleKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Sven_TeleportInterrupts;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Faceless_MultiChrono;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Faceless_ChronoKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Ursa_MultiShocks;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_RoshanKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lion_FingerKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Riki_SmokedHeroKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_HeroesRevealedWithDust;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_SkeletonKing_ReincarnationKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Skywrath_FlareKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Leshrac_SplitEarthStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Mirana_MaxStunArrows;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_PhantomAssassin_DaggerCrits;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Meepo_Earthbinds;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Bloodseeker_RuptureKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Slark_LeashedEnemies;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Disruptor_FountainGlimpses;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Rubick_SpellsStolen;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Rubick_UltimatesStolen;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Doom_EnemiesDoomed;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Omniknight_Purifications;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Omniknight_AlliesRepelled;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Omniknight_EnemiesRepelled;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Warlock_FiveHeroFatalBonds;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_CrystalMaiden_FrostbittenEnemies;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_CrystalMaiden_CrystalNovas;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Kunkka_DoubleHeroTorrents;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Kunkka_TripleHeroGhostShips;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_NagaSiren_EnemiesEnsnared;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_NagaSiren_TripleHeroRipTides;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lycan_KillsDuringShapeshift;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Pudge_DismemberKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Pudge_EnemyHeroesHooked;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Pudge_HookKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DrowRanger_EnemiesSilenced;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DrowRanger_MultiHeroSilences;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DrowRanger_SilencedKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DrowRanger_FrostArrowKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DragonKnight_KillsInDragonForm;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DragonKnight_BreatheFireKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DragonKnight_SplashKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_WitchDoctor_CaskStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_WitchDoctor_MaledictKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_WitchDoctor_MultiHeroMaledicts;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_WitchDoctor_DeathWardKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Disruptor_ThunderStrikeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Disruptor_HeroesGlimpsed;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_CrystalMaiden_FreezingFieldKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Medusa_EnemiesPetrified;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Warlock_FatalBondsKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Warlock_GolemKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Tusk_WalrusPunches;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Tusk_SnowballStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Earthshaker_FissureStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Earthshaker_3HeroEchoslams;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_SandKing_BurrowstrikeStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_SandKing_EpicenterKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_SkywrathMage_AncientSealKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_SkywrathMage_ConcussiveShotKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Luna_LucentBeamKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Luna_EclipseKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_KeeperOfTheLight_IlluminateKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_LegionCommander_DuelsWon;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Beastmaster_RoarKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Beastmaster_RoarMultiKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Windrunner_FocusFireBuildings;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Windrunner_PowershotKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_PhantomAssassin_DaggerLastHits;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_PhantomAssassin_PhantomStrikeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DeathProphet_CryptSwarmKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DeathProphet_ExorcismBuildingKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DeathProphet_MultiHeroSilences;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Abaddon_MistCoilKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Abaddon_MistCoilHealed;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Abaddon_AphoticShieldKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lich_ChainFrostTripleKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lich_ChainFrostMultiKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lich_ChainFrostBounces;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Ursa_EnragedKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Ursa_EarthshockKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lina_LagunaBladeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lina_DragonSlaveKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lina_LightStrikeArrayStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Barracks_Destroyed;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_TemplarAssassin_MeldKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_TemplarAssassin_HeroesSlowed;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Sniper_AssassinationKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Sniper_HeadshotStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_EarthSpirit_SmashStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_EarthSpirit_GripSilences;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_ShadowShaman_ShackleKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_ShadowShaman_HexKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Centaur_EnemiesStomped;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Centaur_DoubleEdgeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Centaur_ReturnKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_EmberSpirit_EnemiesChained;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Puck_OrbKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_VengefulSpirit_EnemiesStunned;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Lifestealer_RageKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Lifestealer_OpenWoundsKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Lifestealer_InfestKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_ElderTitan_SpiritKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_ElderTitan_GoodStomps;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Clockwerk_RocketKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Clockwerk_BlindRocketKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_StormSpirit_BallKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_StormSpirit_DoubleRemnantKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_StormSpirit_VortexKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Tinker_DoubleMissileKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Tinker_LaserKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Techies_SuicideKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Techies_LandMineKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Techies_StatisTrapStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Techies_RemoteMineKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_ShadowFiend_TripleRazeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_ShadowFiend_RequiemMultiKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_ShadowFiend_QRazeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_ShadowFiend_WRazeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_ShadowFiend_ERazeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Oracle_FatesEdictKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Oracle_FalsePromiseSaves;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Juggernaut_OmnislashKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_SkeletonKing_SkeletonHeroKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DarkWillow_CursedCrownTripleStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Dazzle_ShallowGraveSaves;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Dazzle_PoisonTouchKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_ThreeManMeks;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Viper_PoisonAttackKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Viper_CorrosiveSkinKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_ThreeHeroVeils;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Viper_KillsDuringViperStrike;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_SolarCrestKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Tiny_TreeThrowKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Riki_BackstabKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Terrorblade_MetamorphosisKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lion_GreatFingerKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Antimage_SpellsBlockedWithAghanims;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Antimage_ThreeManManaVoids;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_ArcWarden_TempestDoubleKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_ArcWarden_SparkWraithKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Bane_BrainSapKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Bane_FiendsGripKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Batrider_TripleHeroFlamebreaks;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Batrider_DoubleHeroLassoes;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Bristleback_TripleHeroNasalGoo;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Broodmother_SpiderlingHeroKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Broodmother_KillsInsideWeb;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Centaur_ThreeHeroStampede;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_ChaosKnight_RealityRiftKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Chen_KillsWithPenitence;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Dazzle_ShadowWaveKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DeathProphet_SiphonKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Doom_InfernalBladeBurnKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_EmberSpirit_RemnantKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_EmberSpirit_SleightOfFistKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Enigma_ThreeManBlackHoles;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Gyrocopter_HomingMissileKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Gyrocopter_RocketBarrageKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Huskar_KillsDuringLifeBreak;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Huskar_BurningSpearKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Invoker_MultiHeroIceWall;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Invoker_ThreeHeroEMP;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Invoker_MultiHeroChaosMeteor;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Jakiro_MultiHeroDualBreath;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Jakiro_IcePathMacropyreCombos;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Leshrac_PulseNovaKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Leshrac_ThreeHeroLightningStorm;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lion_ThreeHeroFingerOfDeath;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Meepo_PoofKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Meepo_MultiHeroEarthbinds;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_NightStalker_NighttimeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Morphling_KillsDuringReplicate;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_OgreMagi_FireblastKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_OgreMagi_IgniteKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DominatingKillStreaks;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_MegaKillStreaks;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Alchemist_AghanimsGiven;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_VeilsLeadingToKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DustLeadingToKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Weaver_ShukuchiKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Windrunner_ShackleFocusFireKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Tusk_WalrusPunchKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Tinker_MultiHeroLasers;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Sven_KillsDuringGodsStrength;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Sniper_ThreeHeroShrapnels;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Slark_KillsDuringShadowDance;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_ShadowShaman_SerpentWardShackleKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Razor_EyeOfTheStormKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Pugna_LifeDrainKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Oracle_MultiHeroFortunesEnd;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Omniknight_PurificationKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Warlock_ThreeHeroFatalBonds;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Riki_TricksOfTheTradeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Earthshaker_AftershockHits10;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Earthshaker_5HeroEchoslams;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lina_LagunaBladeHeroKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lina_LightStrikeHeroStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Earthshaker_FissureMultiStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Earthshaker_TotemKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Pangolier_SwashbuckleKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Furion_EnemyHeroesTrapped;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Pangolier_HeartpiercerKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Medusa_MultiHeroStoneGaze;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Medusa_SplitShotKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Mirana_MultiHeroStarstorm;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Mirana_KillsFromMoonlightShadow;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Magnus_MultiHeroSkewers;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Magnus_MultiHeroReversePolarity;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Magnus_HeroesSlowedWithShockwave;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_NagaSiren_MultiHeroSong;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_NagaSiren_AlliesHealedBySong;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_LoneDruid_MultiHeroRoar;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_LoneDruid_BattleCryKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_WinterWyvern_ThreeHeroCurses;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Mars_EnemiesKilledInArena;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Mars_MultiHeroGodsRebuke;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Mars_GodsRebukeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Snapfire_LizardBlobsKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Snapfire_TwoHeroCookieStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::Custom_KillStreak;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Muerta_DeadShotKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Muerta_PierceTheVeilKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Muerta_MultiHeroDeadShot;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Muerta_DeadShotsIntoTheCalling;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::MvpAccoladeType_MIN;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::MvpAccoladeType_MAX;
constexpr int CMvpData_MvpDatum_MvpAccolade::MvpAccoladeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELaneSelection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[2];
}
bool ELaneSelection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELaneSelectionFlags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[3];
}
bool ELaneSelectionFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 7:
    case 8:
    case 16:
    case 24:
    case 31:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPartyMatchmakingFlags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[4];
}
bool EPartyMatchmakingFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHighPriorityMMState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[5];
}
bool EHighPriorityMMState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EReadyCheckStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[6];
}
bool EReadyCheckStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EReadyCheckRequestResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[7];
}
bool EReadyCheckRequestResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMatchBehaviorScoreVariance_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[8];
}
bool EMatchBehaviorScoreVariance_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CSODOTAPartyMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CSODOTAPartyMember>()._impl_._has_bits_);
  static void set_has_is_coach(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_region_ping_failed_bitmask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_plus_subscriber(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tourney_skill_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tourney_buyin(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tourney_prevent_until(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mm_data_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lane_selection_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_high_priority_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_has_hp_resource(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_joined_from_partyfinder(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_steam_china(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

CSODOTAPartyMember::CSODOTAPartyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSODOTAPartyMember)
}
CSODOTAPartyMember::CSODOTAPartyMember(const CSODOTAPartyMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSODOTAPartyMember* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.region_ping_codes_){from._impl_.region_ping_codes_}
    , /*decltype(_impl_._region_ping_codes_cached_byte_size_)*/{0}
    , decltype(_impl_.region_ping_times_){from._impl_.region_ping_times_}
    , /*decltype(_impl_._region_ping_times_cached_byte_size_)*/{0}
    , decltype(_impl_.region_ping_failed_bitmask_){}
    , decltype(_impl_.tourney_skill_level_){}
    , decltype(_impl_.tourney_buyin_){}
    , decltype(_impl_.tourney_prevent_until_){}
    , decltype(_impl_.is_coach_){}
    , decltype(_impl_.is_plus_subscriber_){}
    , decltype(_impl_.mm_data_valid_){}
    , decltype(_impl_.high_priority_disabled_){}
    , decltype(_impl_.lane_selection_flags_){}
    , decltype(_impl_.has_hp_resource_){}
    , decltype(_impl_.joined_from_partyfinder_){}
    , decltype(_impl_.is_steam_china_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.region_ping_failed_bitmask_, &from._impl_.region_ping_failed_bitmask_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_steam_china_) -
    reinterpret_cast<char*>(&_impl_.region_ping_failed_bitmask_)) + sizeof(_impl_.is_steam_china_));
  // @@protoc_insertion_point(copy_constructor:CSODOTAPartyMember)
}

inline void CSODOTAPartyMember::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.region_ping_codes_){arena}
    , /*decltype(_impl_._region_ping_codes_cached_byte_size_)*/{0}
    , decltype(_impl_.region_ping_times_){arena}
    , /*decltype(_impl_._region_ping_times_cached_byte_size_)*/{0}
    , decltype(_impl_.region_ping_failed_bitmask_){0u}
    , decltype(_impl_.tourney_skill_level_){0u}
    , decltype(_impl_.tourney_buyin_){0u}
    , decltype(_impl_.tourney_prevent_until_){0u}
    , decltype(_impl_.is_coach_){false}
    , decltype(_impl_.is_plus_subscriber_){false}
    , decltype(_impl_.mm_data_valid_){false}
    , decltype(_impl_.high_priority_disabled_){false}
    , decltype(_impl_.lane_selection_flags_){0u}
    , decltype(_impl_.has_hp_resource_){false}
    , decltype(_impl_.joined_from_partyfinder_){false}
    , decltype(_impl_.is_steam_china_){false}
  };
}

CSODOTAPartyMember::~CSODOTAPartyMember() {
  // @@protoc_insertion_point(destructor:CSODOTAPartyMember)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSODOTAPartyMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.region_ping_codes_.~RepeatedField();
  _impl_.region_ping_times_.~RepeatedField();
}

void CSODOTAPartyMember::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSODOTAPartyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTAPartyMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.region_ping_codes_.Clear();
  _impl_.region_ping_times_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.region_ping_failed_bitmask_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.high_priority_disabled_) -
        reinterpret_cast<char*>(&_impl_.region_ping_failed_bitmask_)) + sizeof(_impl_.high_priority_disabled_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.lane_selection_flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_steam_china_) -
        reinterpret_cast<char*>(&_impl_.lane_selection_flags_)) + sizeof(_impl_.is_steam_china_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTAPartyMember::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_coach = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_coach(&has_bits);
          _impl_.is_coach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 region_ping_codes = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_region_ping_codes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_region_ping_codes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 region_ping_times = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_region_ping_times(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_region_ping_times(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 region_ping_failed_bitmask = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_region_ping_failed_bitmask(&has_bits);
          _impl_.region_ping_failed_bitmask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tourney_skill_level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tourney_skill_level(&has_bits);
          _impl_.tourney_skill_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tourney_buyin = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_tourney_buyin(&has_bits);
          _impl_.tourney_buyin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tourney_prevent_until = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_tourney_prevent_until(&has_bits);
          _impl_.tourney_prevent_until_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_plus_subscriber = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_is_plus_subscriber(&has_bits);
          _impl_.is_plus_subscriber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lane_selection_flags = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_lane_selection_flags(&has_bits);
          _impl_.lane_selection_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool joined_from_partyfinder = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_joined_from_partyfinder(&has_bits);
          _impl_.joined_from_partyfinder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mm_data_valid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_mm_data_valid(&has_bits);
          _impl_.mm_data_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool high_priority_disabled = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_high_priority_disabled(&has_bits);
          _impl_.high_priority_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_hp_resource = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_has_hp_resource(&has_bits);
          _impl_.has_hp_resource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_steam_china = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_is_steam_china(&has_bits);
          _impl_.is_steam_china_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSODOTAPartyMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAPartyMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_coach = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_coach(), target);
  }

  // repeated uint32 region_ping_codes = 4 [packed = true];
  {
    int byte_size = _impl_._region_ping_codes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_region_ping_codes(), byte_size, target);
    }
  }

  // repeated uint32 region_ping_times = 5 [packed = true];
  {
    int byte_size = _impl_._region_ping_times_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_region_ping_times(), byte_size, target);
    }
  }

  // optional uint32 region_ping_failed_bitmask = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_region_ping_failed_bitmask(), target);
  }

  // optional uint32 tourney_skill_level = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_tourney_skill_level(), target);
  }

  // optional uint32 tourney_buyin = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_tourney_buyin(), target);
  }

  // optional uint32 tourney_prevent_until = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_tourney_prevent_until(), target);
  }

  // optional bool is_plus_subscriber = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_is_plus_subscriber(), target);
  }

  // optional uint32 lane_selection_flags = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_lane_selection_flags(), target);
  }

  // optional bool joined_from_partyfinder = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_joined_from_partyfinder(), target);
  }

  // optional bool mm_data_valid = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_mm_data_valid(), target);
  }

  // optional bool high_priority_disabled = 14;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_high_priority_disabled(), target);
  }

  // optional bool has_hp_resource = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_has_hp_resource(), target);
  }

  // optional bool is_steam_china = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_is_steam_china(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAPartyMember)
  return target;
}

size_t CSODOTAPartyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTAPartyMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 region_ping_codes = 4 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.region_ping_codes_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._region_ping_codes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 region_ping_times = 5 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.region_ping_times_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._region_ping_times_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 region_ping_failed_bitmask = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_region_ping_failed_bitmask());
    }

    // optional uint32 tourney_skill_level = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tourney_skill_level());
    }

    // optional uint32 tourney_buyin = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tourney_buyin());
    }

    // optional uint32 tourney_prevent_until = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tourney_prevent_until());
    }

    // optional bool is_coach = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_plus_subscriber = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool mm_data_valid = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool high_priority_disabled = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 lane_selection_flags = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lane_selection_flags());
    }

    // optional bool has_hp_resource = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool joined_from_partyfinder = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_steam_china = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSODOTAPartyMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSODOTAPartyMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSODOTAPartyMember::GetClassData() const { return &_class_data_; }


void CSODOTAPartyMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSODOTAPartyMember*>(&to_msg);
  auto& from = static_cast<const CSODOTAPartyMember&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSODOTAPartyMember)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.region_ping_codes_.MergeFrom(from._impl_.region_ping_codes_);
  _this->_impl_.region_ping_times_.MergeFrom(from._impl_.region_ping_times_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.region_ping_failed_bitmask_ = from._impl_.region_ping_failed_bitmask_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tourney_skill_level_ = from._impl_.tourney_skill_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tourney_buyin_ = from._impl_.tourney_buyin_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tourney_prevent_until_ = from._impl_.tourney_prevent_until_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_coach_ = from._impl_.is_coach_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.is_plus_subscriber_ = from._impl_.is_plus_subscriber_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.mm_data_valid_ = from._impl_.mm_data_valid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.high_priority_disabled_ = from._impl_.high_priority_disabled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.lane_selection_flags_ = from._impl_.lane_selection_flags_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.has_hp_resource_ = from._impl_.has_hp_resource_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.joined_from_partyfinder_ = from._impl_.joined_from_partyfinder_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.is_steam_china_ = from._impl_.is_steam_china_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSODOTAPartyMember::CopyFrom(const CSODOTAPartyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTAPartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPartyMember::IsInitialized() const {
  return true;
}

void CSODOTAPartyMember::InternalSwap(CSODOTAPartyMember* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.region_ping_codes_.InternalSwap(&other->_impl_.region_ping_codes_);
  _impl_.region_ping_times_.InternalSwap(&other->_impl_.region_ping_times_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSODOTAPartyMember, _impl_.is_steam_china_)
      + sizeof(CSODOTAPartyMember::_impl_.is_steam_china_)
      - PROTOBUF_FIELD_OFFSET(CSODOTAPartyMember, _impl_.region_ping_failed_bitmask_)>(
          reinterpret_cast<char*>(&_impl_.region_ping_failed_bitmask_),
          reinterpret_cast<char*>(&other->_impl_.region_ping_failed_bitmask_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTAPartyMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[0]);
}

// ===================================================================

class CSODOTAParty::_Internal {
 public:
  using HasBits = decltype(std::declval<CSODOTAParty>()._impl_._has_bits_);
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_leader_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_modes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_effective_started_matchmaking_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_raw_started_matchmaking_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_attempt_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_attempt_num(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_matchgroups(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_low_priority_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_ui_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_team_base_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_match_disabled_until_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_match_disabled_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_matchmaking_max_range_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_matchlanguages(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_low_priority_games_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_open_for_join_requests(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_account_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_region_select_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_exclusive_tournament_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tourney_division_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_tourney_schedule_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tourney_skill_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tourney_bracket_round(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tourney_queue_deadline_time(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_tourney_queue_deadline_state(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_party_builder_slots_to_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_party_builder_match_groups(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_party_builder_start_time(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_solo_queue(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_steam_clan_account_id(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::CMsgReadyCheckStatus& ready_check(const CSODOTAParty* msg);
  static void set_has_ready_check(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_custom_game_disabled_until_date(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_custom_game_disabled_account_id(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_is_challenge_match(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_party_search_beacon_active(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_matchmaking_flags(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_high_priority_state(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_lane_selections_enabled(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_custom_game_difficulty_mask(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_is_steam_china(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_bot_difficulty_mask(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_bot_script_index_mask(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
};

const ::CMsgReadyCheckStatus&
CSODOTAParty::_Internal::ready_check(const CSODOTAParty* msg) {
  return *msg->_impl_.ready_check_;
}
CSODOTAParty::CSODOTAParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSODOTAParty)
}
CSODOTAParty::CSODOTAParty(const CSODOTAParty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSODOTAParty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.member_ids_){from._impl_.member_ids_}
    , decltype(_impl_.members_){from._impl_.members_}
    , decltype(_impl_.sent_invites_){from._impl_.sent_invites_}
    , decltype(_impl_.recv_invites_){from._impl_.recv_invites_}
    , decltype(_impl_.team_name_){}
    , decltype(_impl_.ready_check_){nullptr}
    , decltype(_impl_.party_id_){}
    , decltype(_impl_.leader_id_){}
    , decltype(_impl_.game_modes_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.effective_started_matchmaking_time_){}
    , decltype(_impl_.matchgroups_){}
    , decltype(_impl_.low_priority_account_id_){}
    , decltype(_impl_.match_type_){}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.match_disabled_until_date_){}
    , decltype(_impl_.match_disabled_account_id_){}
    , decltype(_impl_.matchmaking_max_range_minutes_){}
    , decltype(_impl_.matchlanguages_){}
    , decltype(_impl_.raw_started_matchmaking_time_){}
    , decltype(_impl_.attempt_start_time_){}
    , decltype(_impl_.attempt_num_){}
    , decltype(_impl_.low_priority_games_remaining_){}
    , decltype(_impl_.account_flags_){}
    , decltype(_impl_.region_select_flags_){}
    , decltype(_impl_.exclusive_tournament_id_){}
    , decltype(_impl_.tourney_division_id_){}
    , decltype(_impl_.tourney_schedule_time_){}
    , decltype(_impl_.tourney_skill_level_){}
    , decltype(_impl_.tourney_bracket_round_){}
    , decltype(_impl_.team_ui_logo_){}
    , decltype(_impl_.team_base_logo_){}
    , decltype(_impl_.tourney_queue_deadline_time_){}
    , decltype(_impl_.tourney_queue_deadline_state_){}
    , decltype(_impl_.party_builder_slots_to_fill_){}
    , decltype(_impl_.party_builder_match_groups_){}
    , decltype(_impl_.open_for_join_requests_){}
    , decltype(_impl_.solo_queue_){}
    , decltype(_impl_.is_challenge_match_){}
    , decltype(_impl_.party_search_beacon_active_){}
    , decltype(_impl_.party_builder_start_time_){}
    , decltype(_impl_.steam_clan_account_id_){}
    , decltype(_impl_.custom_game_disabled_until_date_){}
    , decltype(_impl_.custom_game_disabled_account_id_){}
    , decltype(_impl_.matchmaking_flags_){}
    , decltype(_impl_.high_priority_state_){}
    , decltype(_impl_.custom_game_difficulty_mask_){}
    , decltype(_impl_.lane_selections_enabled_){}
    , decltype(_impl_.is_steam_china_){}
    , decltype(_impl_.bot_difficulty_mask_){}
    , decltype(_impl_.bot_script_index_mask_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.team_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_name()) {
    _this->_impl_.team_name_.Set(from._internal_team_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ready_check()) {
    _this->_impl_.ready_check_ = new ::CMsgReadyCheckStatus(*from._impl_.ready_check_);
  }
  ::memcpy(&_impl_.party_id_, &from._impl_.party_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bot_script_index_mask_) -
    reinterpret_cast<char*>(&_impl_.party_id_)) + sizeof(_impl_.bot_script_index_mask_));
  // @@protoc_insertion_point(copy_constructor:CSODOTAParty)
}

inline void CSODOTAParty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.member_ids_){arena}
    , decltype(_impl_.members_){arena}
    , decltype(_impl_.sent_invites_){arena}
    , decltype(_impl_.recv_invites_){arena}
    , decltype(_impl_.team_name_){}
    , decltype(_impl_.ready_check_){nullptr}
    , decltype(_impl_.party_id_){uint64_t{0u}}
    , decltype(_impl_.leader_id_){uint64_t{0u}}
    , decltype(_impl_.game_modes_){0u}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.effective_started_matchmaking_time_){0u}
    , decltype(_impl_.matchgroups_){0u}
    , decltype(_impl_.low_priority_account_id_){0u}
    , decltype(_impl_.match_type_){0}
    , decltype(_impl_.team_id_){0u}
    , decltype(_impl_.match_disabled_until_date_){0u}
    , decltype(_impl_.match_disabled_account_id_){0u}
    , decltype(_impl_.matchmaking_max_range_minutes_){0u}
    , decltype(_impl_.matchlanguages_){0u}
    , decltype(_impl_.raw_started_matchmaking_time_){0u}
    , decltype(_impl_.attempt_start_time_){0u}
    , decltype(_impl_.attempt_num_){0u}
    , decltype(_impl_.low_priority_games_remaining_){0u}
    , decltype(_impl_.account_flags_){0u}
    , decltype(_impl_.region_select_flags_){0u}
    , decltype(_impl_.exclusive_tournament_id_){0u}
    , decltype(_impl_.tourney_division_id_){0u}
    , decltype(_impl_.tourney_schedule_time_){0u}
    , decltype(_impl_.tourney_skill_level_){0u}
    , decltype(_impl_.tourney_bracket_round_){0u}
    , decltype(_impl_.team_ui_logo_){uint64_t{0u}}
    , decltype(_impl_.team_base_logo_){uint64_t{0u}}
    , decltype(_impl_.tourney_queue_deadline_time_){0u}
    , decltype(_impl_.tourney_queue_deadline_state_){0}
    , decltype(_impl_.party_builder_slots_to_fill_){0u}
    , decltype(_impl_.party_builder_match_groups_){0u}
    , decltype(_impl_.open_for_join_requests_){false}
    , decltype(_impl_.solo_queue_){false}
    , decltype(_impl_.is_challenge_match_){false}
    , decltype(_impl_.party_search_beacon_active_){false}
    , decltype(_impl_.party_builder_start_time_){0u}
    , decltype(_impl_.steam_clan_account_id_){0u}
    , decltype(_impl_.custom_game_disabled_until_date_){0u}
    , decltype(_impl_.custom_game_disabled_account_id_){0u}
    , decltype(_impl_.matchmaking_flags_){0u}
    , decltype(_impl_.high_priority_state_){0}
    , decltype(_impl_.custom_game_difficulty_mask_){0u}
    , decltype(_impl_.lane_selections_enabled_){false}
    , decltype(_impl_.is_steam_china_){false}
    , decltype(_impl_.bot_difficulty_mask_){0u}
    , decltype(_impl_.bot_script_index_mask_){0u}
  };
  _impl_.team_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSODOTAParty::~CSODOTAParty() {
  // @@protoc_insertion_point(destructor:CSODOTAParty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSODOTAParty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.member_ids_.~RepeatedField();
  _impl_.members_.~RepeatedPtrField();
  _impl_.sent_invites_.~RepeatedPtrField();
  _impl_.recv_invites_.~RepeatedPtrField();
  _impl_.team_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ready_check_;
}

void CSODOTAParty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSODOTAParty::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTAParty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.member_ids_.Clear();
  _impl_.members_.Clear();
  _impl_.sent_invites_.Clear();
  _impl_.recv_invites_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.ready_check_ != nullptr);
      _impl_.ready_check_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.party_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.matchgroups_) -
        reinterpret_cast<char*>(&_impl_.party_id_)) + sizeof(_impl_.matchgroups_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.low_priority_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.raw_started_matchmaking_time_) -
        reinterpret_cast<char*>(&_impl_.low_priority_account_id_)) + sizeof(_impl_.raw_started_matchmaking_time_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.attempt_start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tourney_schedule_time_) -
        reinterpret_cast<char*>(&_impl_.attempt_start_time_)) + sizeof(_impl_.tourney_schedule_time_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.tourney_skill_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.party_builder_match_groups_) -
        reinterpret_cast<char*>(&_impl_.tourney_skill_level_)) + sizeof(_impl_.party_builder_match_groups_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.open_for_join_requests_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.custom_game_disabled_account_id_) -
        reinterpret_cast<char*>(&_impl_.open_for_join_requests_)) + sizeof(_impl_.custom_game_disabled_account_id_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.matchmaking_flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bot_script_index_mask_) -
        reinterpret_cast<char*>(&_impl_.matchmaking_flags_)) + sizeof(_impl_.bot_script_index_mask_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTAParty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 party_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_party_id(&_impl_._has_bits_);
          _impl_.party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 leader_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_leader_id(&_impl_._has_bits_);
          _impl_.leader_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 member_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_member_ids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_member_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_modes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_game_modes(&_impl_._has_bits_);
          _impl_.game_modes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CSODOTAParty.State state = 6 [default = UI];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CSODOTAParty_State_IsValid(val))) {
            _internal_set_state(static_cast<::CSODOTAParty_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 effective_started_matchmaking_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_effective_started_matchmaking_time(&_impl_._has_bits_);
          _impl_.effective_started_matchmaking_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 matchgroups = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_matchgroups(&_impl_._has_bits_);
          _impl_.matchgroups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 low_priority_account_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_low_priority_account_id(&_impl_._has_bits_);
          _impl_.low_priority_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::MatchType_IsValid(val))) {
            _internal_set_match_type(static_cast<::MatchType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_id = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_team_id(&_impl_._has_bits_);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 match_disabled_until_date = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_match_disabled_until_date(&_impl_._has_bits_);
          _impl_.match_disabled_until_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 match_disabled_account_id = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_match_disabled_account_id(&_impl_._has_bits_);
          _impl_.match_disabled_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 matchmaking_max_range_minutes = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_matchmaking_max_range_minutes(&_impl_._has_bits_);
          _impl_.matchmaking_max_range_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 matchlanguages = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_matchlanguages(&_impl_._has_bits_);
          _impl_.matchlanguages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CSODOTAPartyMember members = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 raw_started_matchmaking_time = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_raw_started_matchmaking_time(&_impl_._has_bits_);
          _impl_.raw_started_matchmaking_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 attempt_start_time = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_attempt_start_time(&_impl_._has_bits_);
          _impl_.attempt_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 attempt_num = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_attempt_num(&_impl_._has_bits_);
          _impl_.attempt_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 low_priority_games_remaining = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_low_priority_games_remaining(&_impl_._has_bits_);
          _impl_.low_priority_games_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool open_for_join_requests = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_open_for_join_requests(&_impl_._has_bits_);
          _impl_.open_for_join_requests_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CSODOTAPartyInvite sent_invites = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sent_invites(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<330>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CSODOTAPartyInvite recv_invites = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_recv_invites(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<338>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_flags = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_account_flags(&_impl_._has_bits_);
          _impl_.account_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 region_select_flags = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_region_select_flags(&_impl_._has_bits_);
          _impl_.region_select_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 exclusive_tournament_id = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_exclusive_tournament_id(&_impl_._has_bits_);
          _impl_.exclusive_tournament_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tourney_division_id = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_tourney_division_id(&_impl_._has_bits_);
          _impl_.tourney_division_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tourney_schedule_time = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_tourney_schedule_time(&_impl_._has_bits_);
          _impl_.tourney_schedule_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tourney_skill_level = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_tourney_skill_level(&_impl_._has_bits_);
          _impl_.tourney_skill_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tourney_bracket_round = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tourney_bracket_round(&_impl_._has_bits_);
          _impl_.tourney_bracket_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string team_name = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_team_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSODOTAParty.team_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 team_ui_logo = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_team_ui_logo(&_impl_._has_bits_);
          _impl_.team_ui_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 team_base_logo = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_team_base_logo(&_impl_._has_bits_);
          _impl_.team_base_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tourney_queue_deadline_time = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_tourney_queue_deadline_time(&_impl_._has_bits_);
          _impl_.tourney_queue_deadline_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETourneyQueueDeadlineState_IsValid(val))) {
            _internal_set_tourney_queue_deadline_state(static_cast<::ETourneyQueueDeadlineState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(55, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 party_builder_slots_to_fill = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_party_builder_slots_to_fill(&_impl_._has_bits_);
          _impl_.party_builder_slots_to_fill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 party_builder_match_groups = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_party_builder_match_groups(&_impl_._has_bits_);
          _impl_.party_builder_match_groups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 party_builder_start_time = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_party_builder_start_time(&_impl_._has_bits_);
          _impl_.party_builder_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool solo_queue = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_solo_queue(&_impl_._has_bits_);
          _impl_.solo_queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 steam_clan_account_id = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_steam_clan_account_id(&_impl_._has_bits_);
          _impl_.steam_clan_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgReadyCheckStatus ready_check = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_ready_check(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 custom_game_disabled_until_date = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_custom_game_disabled_until_date(&_impl_._has_bits_);
          _impl_.custom_game_disabled_until_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 custom_game_disabled_account_id = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_custom_game_disabled_account_id(&_impl_._has_bits_);
          _impl_.custom_game_disabled_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_challenge_match = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_challenge_match(&_impl_._has_bits_);
          _impl_.is_challenge_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool party_search_beacon_active = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_party_search_beacon_active(&_impl_._has_bits_);
          _impl_.party_search_beacon_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 matchmaking_flags = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_matchmaking_flags(&_impl_._has_bits_);
          _impl_.matchmaking_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EHighPriorityMMState high_priority_state = 68 [default = k_EHighPriorityMM_Unknown];
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EHighPriorityMMState_IsValid(val))) {
            _internal_set_high_priority_state(static_cast<::EHighPriorityMMState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(68, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool lane_selections_enabled = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_lane_selections_enabled(&_impl_._has_bits_);
          _impl_.lane_selections_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 custom_game_difficulty_mask = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_custom_game_difficulty_mask(&_impl_._has_bits_);
          _impl_.custom_game_difficulty_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_steam_china = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_steam_china(&_impl_._has_bits_);
          _impl_.is_steam_china_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bot_difficulty_mask = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_bot_difficulty_mask(&_impl_._has_bits_);
          _impl_.bot_difficulty_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bot_script_index_mask = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_bot_script_index_mask(&_impl_._has_bits_);
          _impl_.bot_script_index_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSODOTAParty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAParty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 party_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_party_id(), target);
  }

  // optional fixed64 leader_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_leader_id(), target);
  }

  // repeated fixed64 member_ids = 3;
  for (int i = 0, n = this->_internal_member_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_member_ids(i), target);
  }

  // optional uint32 game_modes = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_game_modes(), target);
  }

  // optional .CSODOTAParty.State state = 6 [default = UI];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_state(), target);
  }

  // optional uint32 effective_started_matchmaking_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_effective_started_matchmaking_time(), target);
  }

  // optional uint32 matchgroups = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_matchgroups(), target);
  }

  // optional uint32 low_priority_account_id = 19;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_low_priority_account_id(), target);
  }

  // optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      21, this->_internal_match_type(), target);
  }

  // optional uint32 team_id = 23;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_team_id(), target);
  }

  // optional uint32 match_disabled_until_date = 24;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_match_disabled_until_date(), target);
  }

  // optional uint32 match_disabled_account_id = 25;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_match_disabled_account_id(), target);
  }

  // optional uint32 matchmaking_max_range_minutes = 26;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_matchmaking_max_range_minutes(), target);
  }

  // optional uint32 matchlanguages = 27;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_matchlanguages(), target);
  }

  // repeated .CSODOTAPartyMember members = 29;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(29, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 raw_started_matchmaking_time = 32;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(32, this->_internal_raw_started_matchmaking_time(), target);
  }

  // optional uint32 attempt_start_time = 33;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(33, this->_internal_attempt_start_time(), target);
  }

  // optional uint32 attempt_num = 34;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(34, this->_internal_attempt_num(), target);
  }

  // optional uint32 low_priority_games_remaining = 35;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(35, this->_internal_low_priority_games_remaining(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool open_for_join_requests = 40;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(40, this->_internal_open_for_join_requests(), target);
  }

  // repeated .CSODOTAPartyInvite sent_invites = 41;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sent_invites_size()); i < n; i++) {
    const auto& repfield = this->_internal_sent_invites(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(41, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CSODOTAPartyInvite recv_invites = 42;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_recv_invites_size()); i < n; i++) {
    const auto& repfield = this->_internal_recv_invites(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(42, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_flags = 43;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(43, this->_internal_account_flags(), target);
  }

  // optional uint32 region_select_flags = 44;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(44, this->_internal_region_select_flags(), target);
  }

  // optional uint32 exclusive_tournament_id = 45;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(45, this->_internal_exclusive_tournament_id(), target);
  }

  // optional uint32 tourney_division_id = 47;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(47, this->_internal_tourney_division_id(), target);
  }

  // optional uint32 tourney_schedule_time = 48;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(48, this->_internal_tourney_schedule_time(), target);
  }

  // optional uint32 tourney_skill_level = 49;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(49, this->_internal_tourney_skill_level(), target);
  }

  // optional uint32 tourney_bracket_round = 50;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(50, this->_internal_tourney_bracket_round(), target);
  }

  // optional string team_name = 51;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTAParty.team_name");
    target = stream->WriteStringMaybeAliased(
        51, this->_internal_team_name(), target);
  }

  // optional uint64 team_ui_logo = 52;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(52, this->_internal_team_ui_logo(), target);
  }

  // optional uint64 team_base_logo = 53;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(53, this->_internal_team_base_logo(), target);
  }

  // optional uint32 tourney_queue_deadline_time = 54;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(54, this->_internal_tourney_queue_deadline_time(), target);
  }

  // optional .ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      55, this->_internal_tourney_queue_deadline_state(), target);
  }

  // optional uint32 party_builder_slots_to_fill = 56;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(56, this->_internal_party_builder_slots_to_fill(), target);
  }

  // optional uint32 party_builder_match_groups = 57;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(57, this->_internal_party_builder_match_groups(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 party_builder_start_time = 58;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(58, this->_internal_party_builder_start_time(), target);
  }

  // optional bool solo_queue = 59;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(59, this->_internal_solo_queue(), target);
  }

  // optional uint32 steam_clan_account_id = 61;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(61, this->_internal_steam_clan_account_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgReadyCheckStatus ready_check = 62;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(62, _Internal::ready_check(this),
        _Internal::ready_check(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 custom_game_disabled_until_date = 63;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(63, this->_internal_custom_game_disabled_until_date(), target);
  }

  // optional uint32 custom_game_disabled_account_id = 64;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(64, this->_internal_custom_game_disabled_account_id(), target);
  }

  // optional bool is_challenge_match = 65;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(65, this->_internal_is_challenge_match(), target);
  }

  // optional bool party_search_beacon_active = 66;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(66, this->_internal_party_search_beacon_active(), target);
  }

  // optional uint32 matchmaking_flags = 67;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(67, this->_internal_matchmaking_flags(), target);
  }

  // optional .EHighPriorityMMState high_priority_state = 68 [default = k_EHighPriorityMM_Unknown];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      68, this->_internal_high_priority_state(), target);
  }

  // optional bool lane_selections_enabled = 69;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(69, this->_internal_lane_selections_enabled(), target);
  }

  // optional uint32 custom_game_difficulty_mask = 70;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(70, this->_internal_custom_game_difficulty_mask(), target);
  }

  // optional bool is_steam_china = 71;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(71, this->_internal_is_steam_china(), target);
  }

  // optional uint32 bot_difficulty_mask = 72;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(72, this->_internal_bot_difficulty_mask(), target);
  }

  // optional uint32 bot_script_index_mask = 73;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(73, this->_internal_bot_script_index_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAParty)
  return target;
}

size_t CSODOTAParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTAParty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 member_ids = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_member_ids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_member_ids_size());
    total_size += data_size;
  }

  // repeated .CSODOTAPartyMember members = 29;
  total_size += 2UL * this->_internal_members_size();
  for (const auto& msg : this->_impl_.members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSODOTAPartyInvite sent_invites = 41;
  total_size += 2UL * this->_internal_sent_invites_size();
  for (const auto& msg : this->_impl_.sent_invites_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSODOTAPartyInvite recv_invites = 42;
  total_size += 2UL * this->_internal_recv_invites_size();
  for (const auto& msg : this->_impl_.recv_invites_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string team_name = 51;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional .CMsgReadyCheckStatus ready_check = 62;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ready_check_);
    }

    // optional uint64 party_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_party_id());
    }

    // optional fixed64 leader_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 game_modes = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_modes());
    }

    // optional .CSODOTAParty.State state = 6 [default = UI];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional uint32 effective_started_matchmaking_time = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_effective_started_matchmaking_time());
    }

    // optional uint32 matchgroups = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_matchgroups());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 low_priority_account_id = 19;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_low_priority_account_id());
    }

    // optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_match_type());
    }

    // optional uint32 team_id = 23;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional uint32 match_disabled_until_date = 24;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_match_disabled_until_date());
    }

    // optional uint32 match_disabled_account_id = 25;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_match_disabled_account_id());
    }

    // optional uint32 matchmaking_max_range_minutes = 26;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_matchmaking_max_range_minutes());
    }

    // optional uint32 matchlanguages = 27;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_matchlanguages());
    }

    // optional uint32 raw_started_matchmaking_time = 32;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_raw_started_matchmaking_time());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 attempt_start_time = 33;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_attempt_start_time());
    }

    // optional uint32 attempt_num = 34;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_attempt_num());
    }

    // optional uint32 low_priority_games_remaining = 35;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_low_priority_games_remaining());
    }

    // optional uint32 account_flags = 43;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_account_flags());
    }

    // optional uint32 region_select_flags = 44;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_region_select_flags());
    }

    // optional uint32 exclusive_tournament_id = 45;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_exclusive_tournament_id());
    }

    // optional uint32 tourney_division_id = 47;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_tourney_division_id());
    }

    // optional uint32 tourney_schedule_time = 48;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_tourney_schedule_time());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 tourney_skill_level = 49;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_tourney_skill_level());
    }

    // optional uint32 tourney_bracket_round = 50;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_tourney_bracket_round());
    }

    // optional uint64 team_ui_logo = 52;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_team_ui_logo());
    }

    // optional uint64 team_base_logo = 53;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_team_base_logo());
    }

    // optional uint32 tourney_queue_deadline_time = 54;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_tourney_queue_deadline_time());
    }

    // optional .ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_tourney_queue_deadline_state());
    }

    // optional uint32 party_builder_slots_to_fill = 56;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_party_builder_slots_to_fill());
    }

    // optional uint32 party_builder_match_groups = 57;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_party_builder_match_groups());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool open_for_join_requests = 40;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool solo_queue = 59;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool is_challenge_match = 65;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool party_search_beacon_active = 66;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional uint32 party_builder_start_time = 58;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_party_builder_start_time());
    }

    // optional uint32 steam_clan_account_id = 61;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_steam_clan_account_id());
    }

    // optional uint32 custom_game_disabled_until_date = 63;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_custom_game_disabled_until_date());
    }

    // optional uint32 custom_game_disabled_account_id = 64;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_custom_game_disabled_account_id());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 matchmaking_flags = 67;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_matchmaking_flags());
    }

    // optional .EHighPriorityMMState high_priority_state = 68 [default = k_EHighPriorityMM_Unknown];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_high_priority_state());
    }

    // optional uint32 custom_game_difficulty_mask = 70;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_custom_game_difficulty_mask());
    }

    // optional bool lane_selections_enabled = 69;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool is_steam_china = 71;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional uint32 bot_difficulty_mask = 72;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_bot_difficulty_mask());
    }

    // optional uint32 bot_script_index_mask = 73;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_bot_script_index_mask());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSODOTAParty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSODOTAParty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSODOTAParty::GetClassData() const { return &_class_data_; }


void CSODOTAParty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSODOTAParty*>(&to_msg);
  auto& from = static_cast<const CSODOTAParty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSODOTAParty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.member_ids_.MergeFrom(from._impl_.member_ids_);
  _this->_impl_.members_.MergeFrom(from._impl_.members_);
  _this->_impl_.sent_invites_.MergeFrom(from._impl_.sent_invites_);
  _this->_impl_.recv_invites_.MergeFrom(from._impl_.recv_invites_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_ready_check()->::CMsgReadyCheckStatus::MergeFrom(
          from._internal_ready_check());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.party_id_ = from._impl_.party_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.leader_id_ = from._impl_.leader_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.game_modes_ = from._impl_.game_modes_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.effective_started_matchmaking_time_ = from._impl_.effective_started_matchmaking_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.matchgroups_ = from._impl_.matchgroups_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.low_priority_account_id_ = from._impl_.low_priority_account_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.match_type_ = from._impl_.match_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.match_disabled_until_date_ = from._impl_.match_disabled_until_date_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.match_disabled_account_id_ = from._impl_.match_disabled_account_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.matchmaking_max_range_minutes_ = from._impl_.matchmaking_max_range_minutes_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.matchlanguages_ = from._impl_.matchlanguages_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.raw_started_matchmaking_time_ = from._impl_.raw_started_matchmaking_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.attempt_start_time_ = from._impl_.attempt_start_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.attempt_num_ = from._impl_.attempt_num_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.low_priority_games_remaining_ = from._impl_.low_priority_games_remaining_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.account_flags_ = from._impl_.account_flags_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.region_select_flags_ = from._impl_.region_select_flags_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.exclusive_tournament_id_ = from._impl_.exclusive_tournament_id_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.tourney_division_id_ = from._impl_.tourney_division_id_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.tourney_schedule_time_ = from._impl_.tourney_schedule_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.tourney_skill_level_ = from._impl_.tourney_skill_level_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.tourney_bracket_round_ = from._impl_.tourney_bracket_round_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.team_ui_logo_ = from._impl_.team_ui_logo_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.team_base_logo_ = from._impl_.team_base_logo_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tourney_queue_deadline_time_ = from._impl_.tourney_queue_deadline_time_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.tourney_queue_deadline_state_ = from._impl_.tourney_queue_deadline_state_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.party_builder_slots_to_fill_ = from._impl_.party_builder_slots_to_fill_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.party_builder_match_groups_ = from._impl_.party_builder_match_groups_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.open_for_join_requests_ = from._impl_.open_for_join_requests_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.solo_queue_ = from._impl_.solo_queue_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_challenge_match_ = from._impl_.is_challenge_match_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.party_search_beacon_active_ = from._impl_.party_search_beacon_active_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.party_builder_start_time_ = from._impl_.party_builder_start_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.steam_clan_account_id_ = from._impl_.steam_clan_account_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.custom_game_disabled_until_date_ = from._impl_.custom_game_disabled_until_date_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.custom_game_disabled_account_id_ = from._impl_.custom_game_disabled_account_id_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.matchmaking_flags_ = from._impl_.matchmaking_flags_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.high_priority_state_ = from._impl_.high_priority_state_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.custom_game_difficulty_mask_ = from._impl_.custom_game_difficulty_mask_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.lane_selections_enabled_ = from._impl_.lane_selections_enabled_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.is_steam_china_ = from._impl_.is_steam_china_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.bot_difficulty_mask_ = from._impl_.bot_difficulty_mask_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.bot_script_index_mask_ = from._impl_.bot_script_index_mask_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSODOTAParty::CopyFrom(const CSODOTAParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTAParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAParty::IsInitialized() const {
  return true;
}

void CSODOTAParty::InternalSwap(CSODOTAParty* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.member_ids_.InternalSwap(&other->_impl_.member_ids_);
  _impl_.members_.InternalSwap(&other->_impl_.members_);
  _impl_.sent_invites_.InternalSwap(&other->_impl_.sent_invites_);
  _impl_.recv_invites_.InternalSwap(&other->_impl_.recv_invites_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_name_, lhs_arena,
      &other->_impl_.team_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSODOTAParty, _impl_.bot_script_index_mask_)
      + sizeof(CSODOTAParty::_impl_.bot_script_index_mask_)
      - PROTOBUF_FIELD_OFFSET(CSODOTAParty, _impl_.ready_check_)>(
          reinterpret_cast<char*>(&_impl_.ready_check_),
          reinterpret_cast<char*>(&other->_impl_.ready_check_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTAParty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[1]);
}

// ===================================================================

class CSODOTAPartyInvite_PartyMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CSODOTAPartyInvite_PartyMember>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_coach(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSODOTAPartyInvite_PartyMember::CSODOTAPartyInvite_PartyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSODOTAPartyInvite.PartyMember)
}
CSODOTAPartyInvite_PartyMember::CSODOTAPartyInvite_PartyMember(const CSODOTAPartyInvite_PartyMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSODOTAPartyInvite_PartyMember* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.steam_id_){}
    , decltype(_impl_.is_coach_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.steam_id_, &from._impl_.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_coach_) -
    reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.is_coach_));
  // @@protoc_insertion_point(copy_constructor:CSODOTAPartyInvite.PartyMember)
}

inline void CSODOTAPartyInvite_PartyMember::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
    , decltype(_impl_.is_coach_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSODOTAPartyInvite_PartyMember::~CSODOTAPartyInvite_PartyMember() {
  // @@protoc_insertion_point(destructor:CSODOTAPartyInvite.PartyMember)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSODOTAPartyInvite_PartyMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CSODOTAPartyInvite_PartyMember::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSODOTAPartyInvite_PartyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTAPartyInvite.PartyMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_coach_) -
        reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.is_coach_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTAPartyInvite_PartyMember::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSODOTAPartyInvite.PartyMember.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_coach = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_coach(&has_bits);
          _impl_.is_coach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSODOTAPartyInvite_PartyMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAPartyInvite.PartyMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTAPartyInvite.PartyMember.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id(), target);
  }

  // optional bool is_coach = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_coach(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAPartyInvite.PartyMember)
  return target;
}

size_t CSODOTAPartyInvite_PartyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTAPartyInvite.PartyMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional fixed64 steam_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool is_coach = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSODOTAPartyInvite_PartyMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSODOTAPartyInvite_PartyMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSODOTAPartyInvite_PartyMember::GetClassData() const { return &_class_data_; }


void CSODOTAPartyInvite_PartyMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSODOTAPartyInvite_PartyMember*>(&to_msg);
  auto& from = static_cast<const CSODOTAPartyInvite_PartyMember&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSODOTAPartyInvite.PartyMember)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_coach_ = from._impl_.is_coach_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSODOTAPartyInvite_PartyMember::CopyFrom(const CSODOTAPartyInvite_PartyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTAPartyInvite.PartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPartyInvite_PartyMember::IsInitialized() const {
  return true;
}

void CSODOTAPartyInvite_PartyMember::InternalSwap(CSODOTAPartyInvite_PartyMember* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSODOTAPartyInvite_PartyMember, _impl_.is_coach_)
      + sizeof(CSODOTAPartyInvite_PartyMember::_impl_.is_coach_)
      - PROTOBUF_FIELD_OFFSET(CSODOTAPartyInvite_PartyMember, _impl_.steam_id_)>(
          reinterpret_cast<char*>(&_impl_.steam_id_),
          reinterpret_cast<char*>(&other->_impl_.steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTAPartyInvite_PartyMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[2]);
}

// ===================================================================

class CSODOTAPartyInvite::_Internal {
 public:
  using HasBits = decltype(std::declval<CSODOTAPartyInvite>()._impl_._has_bits_);
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sender_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sender_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_low_priority_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_as_coach(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_invite_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CSODOTAPartyInvite::CSODOTAPartyInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSODOTAPartyInvite)
}
CSODOTAPartyInvite::CSODOTAPartyInvite(const CSODOTAPartyInvite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSODOTAPartyInvite* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.members_){from._impl_.members_}
    , decltype(_impl_.sender_name_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.low_priority_status_){}
    , decltype(_impl_.as_coach_){}
    , decltype(_impl_.invite_gid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sender_name()) {
    _this->_impl_.sender_name_.Set(from._internal_sender_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.group_id_, &from._impl_.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.invite_gid_) -
    reinterpret_cast<char*>(&_impl_.group_id_)) + sizeof(_impl_.invite_gid_));
  // @@protoc_insertion_point(copy_constructor:CSODOTAPartyInvite)
}

inline void CSODOTAPartyInvite::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.members_){arena}
    , decltype(_impl_.sender_name_){}
    , decltype(_impl_.group_id_){uint64_t{0u}}
    , decltype(_impl_.sender_id_){uint64_t{0u}}
    , decltype(_impl_.team_id_){0u}
    , decltype(_impl_.low_priority_status_){false}
    , decltype(_impl_.as_coach_){false}
    , decltype(_impl_.invite_gid_){uint64_t{0u}}
  };
  _impl_.sender_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSODOTAPartyInvite::~CSODOTAPartyInvite() {
  // @@protoc_insertion_point(destructor:CSODOTAPartyInvite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSODOTAPartyInvite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.members_.~RepeatedPtrField();
  _impl_.sender_name_.Destroy();
}

void CSODOTAPartyInvite::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSODOTAPartyInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTAPartyInvite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.members_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.sender_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.invite_gid_) -
        reinterpret_cast<char*>(&_impl_.group_id_)) + sizeof(_impl_.invite_gid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTAPartyInvite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 group_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 sender_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_sender_id(&has_bits);
          _impl_.sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string sender_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sender_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSODOTAPartyInvite.sender_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .CSODOTAPartyInvite.PartyMember members = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool low_priority_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_low_priority_status(&has_bits);
          _impl_.low_priority_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool as_coach = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_as_coach(&has_bits);
          _impl_.as_coach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 invite_gid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_invite_gid(&has_bits);
          _impl_.invite_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSODOTAPartyInvite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAPartyInvite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 group_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_group_id(), target);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_sender_id(), target);
  }

  // optional string sender_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sender_name().data(), static_cast<int>(this->_internal_sender_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTAPartyInvite.sender_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sender_name(), target);
  }

  // repeated .CSODOTAPartyInvite.PartyMember members = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 team_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_team_id(), target);
  }

  // optional bool low_priority_status = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_low_priority_status(), target);
  }

  // optional bool as_coach = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_as_coach(), target);
  }

  // optional fixed64 invite_gid = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(8, this->_internal_invite_gid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAPartyInvite)
  return target;
}

size_t CSODOTAPartyInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTAPartyInvite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSODOTAPartyInvite.PartyMember members = 4;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->_impl_.members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string sender_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sender_name());
    }

    // optional uint64 group_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_group_id());
    }

    // optional fixed64 sender_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 team_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

    // optional bool low_priority_status = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool as_coach = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional fixed64 invite_gid = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSODOTAPartyInvite::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSODOTAPartyInvite::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSODOTAPartyInvite::GetClassData() const { return &_class_data_; }


void CSODOTAPartyInvite::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSODOTAPartyInvite*>(&to_msg);
  auto& from = static_cast<const CSODOTAPartyInvite&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSODOTAPartyInvite)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.members_.MergeFrom(from._impl_.members_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_sender_name(from._internal_sender_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sender_id_ = from._impl_.sender_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.low_priority_status_ = from._impl_.low_priority_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.as_coach_ = from._impl_.as_coach_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.invite_gid_ = from._impl_.invite_gid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSODOTAPartyInvite::CopyFrom(const CSODOTAPartyInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTAPartyInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPartyInvite::IsInitialized() const {
  return true;
}

void CSODOTAPartyInvite::InternalSwap(CSODOTAPartyInvite* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.members_.InternalSwap(&other->_impl_.members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_name_, lhs_arena,
      &other->_impl_.sender_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSODOTAPartyInvite, _impl_.invite_gid_)
      + sizeof(CSODOTAPartyInvite::_impl_.invite_gid_)
      - PROTOBUF_FIELD_OFFSET(CSODOTAPartyInvite, _impl_.group_id_)>(
          reinterpret_cast<char*>(&_impl_.group_id_),
          reinterpret_cast<char*>(&other->_impl_.group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTAPartyInvite::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[3]);
}

// ===================================================================

class CMsgLeaverState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLeaverState>()._impl_._has_bits_);
  static void set_has_lobby_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_leaver_detected(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_first_blood_happened(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_discard_match_results(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mass_disconnect(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgLeaverState::CMsgLeaverState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLeaverState)
}
CMsgLeaverState::CMsgLeaverState(const CMsgLeaverState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLeaverState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lobby_state_){}
    , decltype(_impl_.game_state_){}
    , decltype(_impl_.leaver_detected_){}
    , decltype(_impl_.first_blood_happened_){}
    , decltype(_impl_.discard_match_results_){}
    , decltype(_impl_.mass_disconnect_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lobby_state_, &from._impl_.lobby_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mass_disconnect_) -
    reinterpret_cast<char*>(&_impl_.lobby_state_)) + sizeof(_impl_.mass_disconnect_));
  // @@protoc_insertion_point(copy_constructor:CMsgLeaverState)
}

inline void CMsgLeaverState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lobby_state_){0u}
    , decltype(_impl_.game_state_){0}
    , decltype(_impl_.leaver_detected_){false}
    , decltype(_impl_.first_blood_happened_){false}
    , decltype(_impl_.discard_match_results_){false}
    , decltype(_impl_.mass_disconnect_){false}
  };
}

CMsgLeaverState::~CMsgLeaverState() {
  // @@protoc_insertion_point(destructor:CMsgLeaverState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLeaverState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgLeaverState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLeaverState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLeaverState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.lobby_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mass_disconnect_) -
        reinterpret_cast<char*>(&_impl_.lobby_state_)) + sizeof(_impl_.mass_disconnect_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLeaverState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 lobby_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_lobby_state(&has_bits);
          _impl_.lobby_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GameState_IsValid(val))) {
            _internal_set_game_state(static_cast<::DOTA_GameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool leaver_detected = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_leaver_detected(&has_bits);
          _impl_.leaver_detected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool first_blood_happened = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_first_blood_happened(&has_bits);
          _impl_.first_blood_happened_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool discard_match_results = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_discard_match_results(&has_bits);
          _impl_.discard_match_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mass_disconnect = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_mass_disconnect(&has_bits);
          _impl_.mass_disconnect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLeaverState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLeaverState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 lobby_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lobby_state(), target);
  }

  // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_game_state(), target);
  }

  // optional bool leaver_detected = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_leaver_detected(), target);
  }

  // optional bool first_blood_happened = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_first_blood_happened(), target);
  }

  // optional bool discard_match_results = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_discard_match_results(), target);
  }

  // optional bool mass_disconnect = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_mass_disconnect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLeaverState)
  return target;
}

size_t CMsgLeaverState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLeaverState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 lobby_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lobby_state());
    }

    // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_game_state());
    }

    // optional bool leaver_detected = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool first_blood_happened = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool discard_match_results = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool mass_disconnect = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLeaverState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLeaverState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLeaverState::GetClassData() const { return &_class_data_; }


void CMsgLeaverState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLeaverState*>(&to_msg);
  auto& from = static_cast<const CMsgLeaverState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLeaverState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.lobby_state_ = from._impl_.lobby_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.game_state_ = from._impl_.game_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.leaver_detected_ = from._impl_.leaver_detected_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.first_blood_happened_ = from._impl_.first_blood_happened_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.discard_match_results_ = from._impl_.discard_match_results_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.mass_disconnect_ = from._impl_.mass_disconnect_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLeaverState::CopyFrom(const CMsgLeaverState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLeaverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaverState::IsInitialized() const {
  return true;
}

void CMsgLeaverState::InternalSwap(CMsgLeaverState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLeaverState, _impl_.mass_disconnect_)
      + sizeof(CMsgLeaverState::_impl_.mass_disconnect_)
      - PROTOBUF_FIELD_OFFSET(CMsgLeaverState, _impl_.lobby_state_)>(
          reinterpret_cast<char*>(&_impl_.lobby_state_),
          reinterpret_cast<char*>(&other->_impl_.lobby_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLeaverState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[4]);
}

// ===================================================================

class CMsgReadyCheckStatus_ReadyMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgReadyCheckStatus_ReadyMember>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ready_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgReadyCheckStatus_ReadyMember::CMsgReadyCheckStatus_ReadyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgReadyCheckStatus.ReadyMember)
}
CMsgReadyCheckStatus_ReadyMember::CMsgReadyCheckStatus_ReadyMember(const CMsgReadyCheckStatus_ReadyMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgReadyCheckStatus_ReadyMember* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.ready_status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ready_status_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.ready_status_));
  // @@protoc_insertion_point(copy_constructor:CMsgReadyCheckStatus.ReadyMember)
}

inline void CMsgReadyCheckStatus_ReadyMember::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.ready_status_){0}
  };
}

CMsgReadyCheckStatus_ReadyMember::~CMsgReadyCheckStatus_ReadyMember() {
  // @@protoc_insertion_point(destructor:CMsgReadyCheckStatus.ReadyMember)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgReadyCheckStatus_ReadyMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgReadyCheckStatus_ReadyMember::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgReadyCheckStatus_ReadyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgReadyCheckStatus.ReadyMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ready_status_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.ready_status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgReadyCheckStatus_ReadyMember::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EReadyCheckStatus ready_status = 2 [default = k_EReadyCheckStatus_Unknown];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EReadyCheckStatus_IsValid(val))) {
            _internal_set_ready_status(static_cast<::EReadyCheckStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgReadyCheckStatus_ReadyMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgReadyCheckStatus.ReadyMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .EReadyCheckStatus ready_status = 2 [default = k_EReadyCheckStatus_Unknown];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ready_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgReadyCheckStatus.ReadyMember)
  return target;
}

size_t CMsgReadyCheckStatus_ReadyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgReadyCheckStatus.ReadyMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional .EReadyCheckStatus ready_status = 2 [default = k_EReadyCheckStatus_Unknown];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_ready_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgReadyCheckStatus_ReadyMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgReadyCheckStatus_ReadyMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgReadyCheckStatus_ReadyMember::GetClassData() const { return &_class_data_; }


void CMsgReadyCheckStatus_ReadyMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgReadyCheckStatus_ReadyMember*>(&to_msg);
  auto& from = static_cast<const CMsgReadyCheckStatus_ReadyMember&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgReadyCheckStatus.ReadyMember)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ready_status_ = from._impl_.ready_status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgReadyCheckStatus_ReadyMember::CopyFrom(const CMsgReadyCheckStatus_ReadyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgReadyCheckStatus.ReadyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReadyCheckStatus_ReadyMember::IsInitialized() const {
  return true;
}

void CMsgReadyCheckStatus_ReadyMember::InternalSwap(CMsgReadyCheckStatus_ReadyMember* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgReadyCheckStatus_ReadyMember, _impl_.ready_status_)
      + sizeof(CMsgReadyCheckStatus_ReadyMember::_impl_.ready_status_)
      - PROTOBUF_FIELD_OFFSET(CMsgReadyCheckStatus_ReadyMember, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgReadyCheckStatus_ReadyMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[5]);
}

// ===================================================================

class CMsgReadyCheckStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgReadyCheckStatus>()._impl_._has_bits_);
  static void set_has_start_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_finish_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_initiator_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgReadyCheckStatus::CMsgReadyCheckStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgReadyCheckStatus)
}
CMsgReadyCheckStatus::CMsgReadyCheckStatus(const CMsgReadyCheckStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgReadyCheckStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ready_members_){from._impl_.ready_members_}
    , decltype(_impl_.start_timestamp_){}
    , decltype(_impl_.finish_timestamp_){}
    , decltype(_impl_.initiator_account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_timestamp_, &from._impl_.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.initiator_account_id_) -
    reinterpret_cast<char*>(&_impl_.start_timestamp_)) + sizeof(_impl_.initiator_account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgReadyCheckStatus)
}

inline void CMsgReadyCheckStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ready_members_){arena}
    , decltype(_impl_.start_timestamp_){0u}
    , decltype(_impl_.finish_timestamp_){0u}
    , decltype(_impl_.initiator_account_id_){0u}
  };
}

CMsgReadyCheckStatus::~CMsgReadyCheckStatus() {
  // @@protoc_insertion_point(destructor:CMsgReadyCheckStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgReadyCheckStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ready_members_.~RepeatedPtrField();
}

void CMsgReadyCheckStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgReadyCheckStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgReadyCheckStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ready_members_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.start_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.initiator_account_id_) -
        reinterpret_cast<char*>(&_impl_.start_timestamp_)) + sizeof(_impl_.initiator_account_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgReadyCheckStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 start_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_start_timestamp(&has_bits);
          _impl_.start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 finish_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_finish_timestamp(&has_bits);
          _impl_.finish_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 initiator_account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_initiator_account_id(&has_bits);
          _impl_.initiator_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgReadyCheckStatus.ReadyMember ready_members = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ready_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgReadyCheckStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgReadyCheckStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 start_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_timestamp(), target);
  }

  // optional uint32 finish_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_finish_timestamp(), target);
  }

  // optional uint32 initiator_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_initiator_account_id(), target);
  }

  // repeated .CMsgReadyCheckStatus.ReadyMember ready_members = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ready_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_ready_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgReadyCheckStatus)
  return target;
}

size_t CMsgReadyCheckStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgReadyCheckStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgReadyCheckStatus.ReadyMember ready_members = 4;
  total_size += 1UL * this->_internal_ready_members_size();
  for (const auto& msg : this->_impl_.ready_members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 start_timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_start_timestamp());
    }

    // optional uint32 finish_timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_finish_timestamp());
    }

    // optional uint32 initiator_account_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_initiator_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgReadyCheckStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgReadyCheckStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgReadyCheckStatus::GetClassData() const { return &_class_data_; }


void CMsgReadyCheckStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgReadyCheckStatus*>(&to_msg);
  auto& from = static_cast<const CMsgReadyCheckStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgReadyCheckStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ready_members_.MergeFrom(from._impl_.ready_members_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.start_timestamp_ = from._impl_.start_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.finish_timestamp_ = from._impl_.finish_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.initiator_account_id_ = from._impl_.initiator_account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgReadyCheckStatus::CopyFrom(const CMsgReadyCheckStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgReadyCheckStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReadyCheckStatus::IsInitialized() const {
  return true;
}

void CMsgReadyCheckStatus::InternalSwap(CMsgReadyCheckStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ready_members_.InternalSwap(&other->_impl_.ready_members_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgReadyCheckStatus, _impl_.initiator_account_id_)
      + sizeof(CMsgReadyCheckStatus::_impl_.initiator_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgReadyCheckStatus, _impl_.start_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.start_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.start_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgReadyCheckStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[6]);
}

// ===================================================================

class CMsgPartyReadyCheckRequest::_Internal {
 public:
};

CMsgPartyReadyCheckRequest::CMsgPartyReadyCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgPartyReadyCheckRequest)
}
CMsgPartyReadyCheckRequest::CMsgPartyReadyCheckRequest(const CMsgPartyReadyCheckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgPartyReadyCheckRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgPartyReadyCheckRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPartyReadyCheckRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPartyReadyCheckRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyReadyCheckRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[7]);
}

// ===================================================================

class CMsgPartyReadyCheckResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartyReadyCheckResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPartyReadyCheckResponse::CMsgPartyReadyCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyReadyCheckResponse)
}
CMsgPartyReadyCheckResponse::CMsgPartyReadyCheckResponse(const CMsgPartyReadyCheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPartyReadyCheckResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgPartyReadyCheckResponse)
}

inline void CMsgPartyReadyCheckResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){0}
  };
}

CMsgPartyReadyCheckResponse::~CMsgPartyReadyCheckResponse() {
  // @@protoc_insertion_point(destructor:CMsgPartyReadyCheckResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPartyReadyCheckResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPartyReadyCheckResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPartyReadyCheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyReadyCheckResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyReadyCheckResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EReadyCheckRequestResult result = 1 [default = k_EReadyCheckRequestResult_Success];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EReadyCheckRequestResult_IsValid(val))) {
            _internal_set_result(static_cast<::EReadyCheckRequestResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPartyReadyCheckResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyReadyCheckResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .EReadyCheckRequestResult result = 1 [default = k_EReadyCheckRequestResult_Success];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyReadyCheckResponse)
  return target;
}

size_t CMsgPartyReadyCheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyReadyCheckResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .EReadyCheckRequestResult result = 1 [default = k_EReadyCheckRequestResult_Success];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPartyReadyCheckResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPartyReadyCheckResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPartyReadyCheckResponse::GetClassData() const { return &_class_data_; }


void CMsgPartyReadyCheckResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPartyReadyCheckResponse*>(&to_msg);
  auto& from = static_cast<const CMsgPartyReadyCheckResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyReadyCheckResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPartyReadyCheckResponse::CopyFrom(const CMsgPartyReadyCheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyReadyCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyReadyCheckResponse::IsInitialized() const {
  return true;
}

void CMsgPartyReadyCheckResponse::InternalSwap(CMsgPartyReadyCheckResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyReadyCheckResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[8]);
}

// ===================================================================

class CMsgPartyReadyCheckAcknowledge::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartyReadyCheckAcknowledge>()._impl_._has_bits_);
  static void set_has_ready_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPartyReadyCheckAcknowledge::CMsgPartyReadyCheckAcknowledge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyReadyCheckAcknowledge)
}
CMsgPartyReadyCheckAcknowledge::CMsgPartyReadyCheckAcknowledge(const CMsgPartyReadyCheckAcknowledge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPartyReadyCheckAcknowledge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ready_status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ready_status_ = from._impl_.ready_status_;
  // @@protoc_insertion_point(copy_constructor:CMsgPartyReadyCheckAcknowledge)
}

inline void CMsgPartyReadyCheckAcknowledge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ready_status_){0}
  };
}

CMsgPartyReadyCheckAcknowledge::~CMsgPartyReadyCheckAcknowledge() {
  // @@protoc_insertion_point(destructor:CMsgPartyReadyCheckAcknowledge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPartyReadyCheckAcknowledge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPartyReadyCheckAcknowledge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPartyReadyCheckAcknowledge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyReadyCheckAcknowledge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ready_status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyReadyCheckAcknowledge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EReadyCheckStatus ready_status = 1 [default = k_EReadyCheckStatus_Unknown];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EReadyCheckStatus_IsValid(val))) {
            _internal_set_ready_status(static_cast<::EReadyCheckStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPartyReadyCheckAcknowledge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyReadyCheckAcknowledge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .EReadyCheckStatus ready_status = 1 [default = k_EReadyCheckStatus_Unknown];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ready_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyReadyCheckAcknowledge)
  return target;
}

size_t CMsgPartyReadyCheckAcknowledge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyReadyCheckAcknowledge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .EReadyCheckStatus ready_status = 1 [default = k_EReadyCheckStatus_Unknown];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ready_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPartyReadyCheckAcknowledge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPartyReadyCheckAcknowledge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPartyReadyCheckAcknowledge::GetClassData() const { return &_class_data_; }


void CMsgPartyReadyCheckAcknowledge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPartyReadyCheckAcknowledge*>(&to_msg);
  auto& from = static_cast<const CMsgPartyReadyCheckAcknowledge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyReadyCheckAcknowledge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ready_status()) {
    _this->_internal_set_ready_status(from._internal_ready_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPartyReadyCheckAcknowledge::CopyFrom(const CMsgPartyReadyCheckAcknowledge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyReadyCheckAcknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyReadyCheckAcknowledge::IsInitialized() const {
  return true;
}

void CMsgPartyReadyCheckAcknowledge::InternalSwap(CMsgPartyReadyCheckAcknowledge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.ready_status_, other->_impl_.ready_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyReadyCheckAcknowledge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[9]);
}

// ===================================================================

class CMsgLobbyEventGameDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyEventGameDetails>()._impl_._has_bits_);
  static void set_has_kv_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgLobbyEventGameDetails::CMsgLobbyEventGameDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyEventGameDetails)
}
CMsgLobbyEventGameDetails::CMsgLobbyEventGameDetails(const CMsgLobbyEventGameDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLobbyEventGameDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kv_data_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.kv_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kv_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_kv_data()) {
    _this->_impl_.kv_data_.Set(from._internal_kv_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyEventGameDetails)
}

inline void CMsgLobbyEventGameDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kv_data_){}
  };
  _impl_.kv_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kv_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgLobbyEventGameDetails::~CMsgLobbyEventGameDetails() {
  // @@protoc_insertion_point(destructor:CMsgLobbyEventGameDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLobbyEventGameDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kv_data_.Destroy();
}

void CMsgLobbyEventGameDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLobbyEventGameDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyEventGameDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.kv_data_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyEventGameDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes kv_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_kv_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLobbyEventGameDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyEventGameDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes kv_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_kv_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyEventGameDetails)
  return target;
}

size_t CMsgLobbyEventGameDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyEventGameDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes kv_data = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_kv_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLobbyEventGameDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLobbyEventGameDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLobbyEventGameDetails::GetClassData() const { return &_class_data_; }


void CMsgLobbyEventGameDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLobbyEventGameDetails*>(&to_msg);
  auto& from = static_cast<const CMsgLobbyEventGameDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyEventGameDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_kv_data()) {
    _this->_internal_set_kv_data(from._internal_kv_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLobbyEventGameDetails::CopyFrom(const CMsgLobbyEventGameDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyEventGameDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventGameDetails::IsInitialized() const {
  return true;
}

void CMsgLobbyEventGameDetails::InternalSwap(CMsgLobbyEventGameDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.kv_data_, lhs_arena,
      &other->_impl_.kv_data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyEventGameDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[10]);
}

// ===================================================================

class CMsgMatchMatchmakingStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchMatchmakingStats>()._impl_._has_bits_);
  static void set_has_average_queue_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_maximum_queue_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_behavior_score_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgMatchMatchmakingStats::CMsgMatchMatchmakingStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchMatchmakingStats)
}
CMsgMatchMatchmakingStats::CMsgMatchMatchmakingStats(const CMsgMatchMatchmakingStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchMatchmakingStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.average_queue_time_){}
    , decltype(_impl_.maximum_queue_time_){}
    , decltype(_impl_.behavior_score_variance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.average_queue_time_, &from._impl_.average_queue_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.behavior_score_variance_) -
    reinterpret_cast<char*>(&_impl_.average_queue_time_)) + sizeof(_impl_.behavior_score_variance_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchMatchmakingStats)
}

inline void CMsgMatchMatchmakingStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.average_queue_time_){0u}
    , decltype(_impl_.maximum_queue_time_){0u}
    , decltype(_impl_.behavior_score_variance_){0}
  };
}

CMsgMatchMatchmakingStats::~CMsgMatchMatchmakingStats() {
  // @@protoc_insertion_point(destructor:CMsgMatchMatchmakingStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchMatchmakingStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMatchMatchmakingStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchMatchmakingStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchMatchmakingStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.average_queue_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.behavior_score_variance_) -
        reinterpret_cast<char*>(&_impl_.average_queue_time_)) + sizeof(_impl_.behavior_score_variance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchMatchmakingStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 average_queue_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_average_queue_time(&has_bits);
          _impl_.average_queue_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 maximum_queue_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_maximum_queue_time(&has_bits);
          _impl_.maximum_queue_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EMatchBehaviorScoreVariance behavior_score_variance = 3 [default = k_EMatchBehaviorScoreVariance_Invalid];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMatchBehaviorScoreVariance_IsValid(val))) {
            _internal_set_behavior_score_variance(static_cast<::EMatchBehaviorScoreVariance>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchMatchmakingStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchMatchmakingStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 average_queue_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_average_queue_time(), target);
  }

  // optional uint32 maximum_queue_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maximum_queue_time(), target);
  }

  // optional .EMatchBehaviorScoreVariance behavior_score_variance = 3 [default = k_EMatchBehaviorScoreVariance_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_behavior_score_variance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchMatchmakingStats)
  return target;
}

size_t CMsgMatchMatchmakingStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchMatchmakingStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 average_queue_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_average_queue_time());
    }

    // optional uint32 maximum_queue_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maximum_queue_time());
    }

    // optional .EMatchBehaviorScoreVariance behavior_score_variance = 3 [default = k_EMatchBehaviorScoreVariance_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_behavior_score_variance());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchMatchmakingStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchMatchmakingStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchMatchmakingStats::GetClassData() const { return &_class_data_; }


void CMsgMatchMatchmakingStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchMatchmakingStats*>(&to_msg);
  auto& from = static_cast<const CMsgMatchMatchmakingStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchMatchmakingStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.average_queue_time_ = from._impl_.average_queue_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.maximum_queue_time_ = from._impl_.maximum_queue_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.behavior_score_variance_ = from._impl_.behavior_score_variance_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchMatchmakingStats::CopyFrom(const CMsgMatchMatchmakingStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchMatchmakingStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchMatchmakingStats::IsInitialized() const {
  return true;
}

void CMsgMatchMatchmakingStats::InternalSwap(CMsgMatchMatchmakingStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchMatchmakingStats, _impl_.behavior_score_variance_)
      + sizeof(CMsgMatchMatchmakingStats::_impl_.behavior_score_variance_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchMatchmakingStats, _impl_.average_queue_time_)>(
          reinterpret_cast<char*>(&_impl_.average_queue_time_),
          reinterpret_cast<char*>(&other->_impl_.average_queue_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchMatchmakingStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[11]);
}

// ===================================================================

class CMvpData_MvpDatum_MvpAccolade::_Internal {
 public:
  using HasBits = decltype(std::declval<CMvpData_MvpDatum_MvpAccolade>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_detail_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMvpData_MvpDatum_MvpAccolade::CMvpData_MvpDatum_MvpAccolade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMvpData.MvpDatum.MvpAccolade)
}
CMvpData_MvpDatum_MvpAccolade::CMvpData_MvpDatum_MvpAccolade(const CMvpData_MvpDatum_MvpAccolade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMvpData_MvpDatum_MvpAccolade* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.detail_value_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.detail_value_, &from._impl_.detail_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.detail_value_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:CMvpData.MvpDatum.MvpAccolade)
}

inline void CMvpData_MvpDatum_MvpAccolade::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.detail_value_){0}
    , decltype(_impl_.type_){1}
  };
}

CMvpData_MvpDatum_MvpAccolade::~CMvpData_MvpDatum_MvpAccolade() {
  // @@protoc_insertion_point(destructor:CMvpData.MvpDatum.MvpAccolade)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMvpData_MvpDatum_MvpAccolade::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMvpData_MvpDatum_MvpAccolade::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMvpData_MvpDatum_MvpAccolade::Clear() {
// @@protoc_insertion_point(message_clear_start:CMvpData.MvpDatum.MvpAccolade)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.detail_value_ = 0;
    _impl_.type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMvpData_MvpDatum_MvpAccolade::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType type = 1 [default = kills];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_IsValid(val))) {
            _internal_set_type(static_cast<::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float detail_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_detail_value(&has_bits);
          _impl_.detail_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMvpData_MvpDatum_MvpAccolade::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMvpData.MvpDatum.MvpAccolade)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType type = 1 [default = kills];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional float detail_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_detail_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMvpData.MvpDatum.MvpAccolade)
  return target;
}

size_t CMvpData_MvpDatum_MvpAccolade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMvpData.MvpDatum.MvpAccolade)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float detail_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional .CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType type = 1 [default = kills];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMvpData_MvpDatum_MvpAccolade::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMvpData_MvpDatum_MvpAccolade::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMvpData_MvpDatum_MvpAccolade::GetClassData() const { return &_class_data_; }


void CMvpData_MvpDatum_MvpAccolade::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMvpData_MvpDatum_MvpAccolade*>(&to_msg);
  auto& from = static_cast<const CMvpData_MvpDatum_MvpAccolade&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMvpData.MvpDatum.MvpAccolade)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.detail_value_ = from._impl_.detail_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMvpData_MvpDatum_MvpAccolade::CopyFrom(const CMvpData_MvpDatum_MvpAccolade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMvpData.MvpDatum.MvpAccolade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMvpData_MvpDatum_MvpAccolade::IsInitialized() const {
  return true;
}

void CMvpData_MvpDatum_MvpAccolade::InternalSwap(CMvpData_MvpDatum_MvpAccolade* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.detail_value_, other->_impl_.detail_value_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMvpData_MvpDatum_MvpAccolade::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[12]);
}

// ===================================================================

class CMvpData_MvpDatum::_Internal {
 public:
  using HasBits = decltype(std::declval<CMvpData_MvpDatum>()._impl_._has_bits_);
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMvpData_MvpDatum::CMvpData_MvpDatum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMvpData.MvpDatum)
}
CMvpData_MvpDatum::CMvpData_MvpDatum(const CMvpData_MvpDatum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMvpData_MvpDatum* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accolades_){from._impl_.accolades_}
    , decltype(_impl_.player_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.player_slot_ = from._impl_.player_slot_;
  // @@protoc_insertion_point(copy_constructor:CMvpData.MvpDatum)
}

inline void CMvpData_MvpDatum::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accolades_){arena}
    , decltype(_impl_.player_slot_){0u}
  };
}

CMvpData_MvpDatum::~CMvpData_MvpDatum() {
  // @@protoc_insertion_point(destructor:CMvpData.MvpDatum)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMvpData_MvpDatum::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accolades_.~RepeatedPtrField();
}

void CMvpData_MvpDatum::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMvpData_MvpDatum::Clear() {
// @@protoc_insertion_point(message_clear_start:CMvpData.MvpDatum)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accolades_.Clear();
  _impl_.player_slot_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMvpData_MvpDatum::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 player_slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMvpData.MvpDatum.MvpAccolade accolades = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accolades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMvpData_MvpDatum::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMvpData.MvpDatum)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 player_slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_slot(), target);
  }

  // repeated .CMvpData.MvpDatum.MvpAccolade accolades = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_accolades_size()); i < n; i++) {
    const auto& repfield = this->_internal_accolades(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMvpData.MvpDatum)
  return target;
}

size_t CMvpData_MvpDatum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMvpData.MvpDatum)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMvpData.MvpDatum.MvpAccolade accolades = 2;
  total_size += 1UL * this->_internal_accolades_size();
  for (const auto& msg : this->_impl_.accolades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 player_slot = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_slot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMvpData_MvpDatum::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMvpData_MvpDatum::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMvpData_MvpDatum::GetClassData() const { return &_class_data_; }


void CMvpData_MvpDatum::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMvpData_MvpDatum*>(&to_msg);
  auto& from = static_cast<const CMvpData_MvpDatum&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMvpData.MvpDatum)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.accolades_.MergeFrom(from._impl_.accolades_);
  if (from._internal_has_player_slot()) {
    _this->_internal_set_player_slot(from._internal_player_slot());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMvpData_MvpDatum::CopyFrom(const CMvpData_MvpDatum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMvpData.MvpDatum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMvpData_MvpDatum::IsInitialized() const {
  return true;
}

void CMvpData_MvpDatum::InternalSwap(CMvpData_MvpDatum* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.accolades_.InternalSwap(&other->_impl_.accolades_);
  swap(_impl_.player_slot_, other->_impl_.player_slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMvpData_MvpDatum::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[13]);
}

// ===================================================================

class CMvpData::_Internal {
 public:
};

CMvpData::CMvpData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMvpData)
}
CMvpData::CMvpData(const CMvpData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMvpData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mvps_){from._impl_.mvps_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMvpData)
}

inline void CMvpData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mvps_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMvpData::~CMvpData() {
  // @@protoc_insertion_point(destructor:CMvpData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMvpData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mvps_.~RepeatedPtrField();
}

void CMvpData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMvpData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMvpData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mvps_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMvpData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMvpData.MvpDatum mvps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mvps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMvpData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMvpData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMvpData.MvpDatum mvps = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mvps_size()); i < n; i++) {
    const auto& repfield = this->_internal_mvps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMvpData)
  return target;
}

size_t CMvpData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMvpData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMvpData.MvpDatum mvps = 1;
  total_size += 1UL * this->_internal_mvps_size();
  for (const auto& msg : this->_impl_.mvps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMvpData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMvpData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMvpData::GetClassData() const { return &_class_data_; }


void CMvpData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMvpData*>(&to_msg);
  auto& from = static_cast<const CMvpData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMvpData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mvps_.MergeFrom(from._impl_.mvps_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMvpData::CopyFrom(const CMvpData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMvpData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMvpData::IsInitialized() const {
  return true;
}

void CMvpData::InternalSwap(CMvpData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mvps_.InternalSwap(&other->_impl_.mvps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMvpData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CSODOTAPartyMember*
Arena::CreateMaybeMessage< ::CSODOTAPartyMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTAPartyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTAParty*
Arena::CreateMaybeMessage< ::CSODOTAParty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTAParty >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTAPartyInvite_PartyMember*
Arena::CreateMaybeMessage< ::CSODOTAPartyInvite_PartyMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTAPartyInvite_PartyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTAPartyInvite*
Arena::CreateMaybeMessage< ::CSODOTAPartyInvite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTAPartyInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLeaverState*
Arena::CreateMaybeMessage< ::CMsgLeaverState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLeaverState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgReadyCheckStatus_ReadyMember*
Arena::CreateMaybeMessage< ::CMsgReadyCheckStatus_ReadyMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgReadyCheckStatus_ReadyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgReadyCheckStatus*
Arena::CreateMaybeMessage< ::CMsgReadyCheckStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgReadyCheckStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyReadyCheckRequest*
Arena::CreateMaybeMessage< ::CMsgPartyReadyCheckRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyReadyCheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyReadyCheckResponse*
Arena::CreateMaybeMessage< ::CMsgPartyReadyCheckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyReadyCheckResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyReadyCheckAcknowledge*
Arena::CreateMaybeMessage< ::CMsgPartyReadyCheckAcknowledge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyReadyCheckAcknowledge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyEventGameDetails*
Arena::CreateMaybeMessage< ::CMsgLobbyEventGameDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyEventGameDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchMatchmakingStats*
Arena::CreateMaybeMessage< ::CMsgMatchMatchmakingStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchMatchmakingStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMvpData_MvpDatum_MvpAccolade*
Arena::CreateMaybeMessage< ::CMvpData_MvpDatum_MvpAccolade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMvpData_MvpDatum_MvpAccolade >(arena);
}
template<> PROTOBUF_NOINLINE ::CMvpData_MvpDatum*
Arena::CreateMaybeMessage< ::CMvpData_MvpDatum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMvpData_MvpDatum >(arena);
}
template<> PROTOBUF_NOINLINE ::CMvpData*
Arena::CreateMaybeMessage< ::CMvpData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMvpData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
