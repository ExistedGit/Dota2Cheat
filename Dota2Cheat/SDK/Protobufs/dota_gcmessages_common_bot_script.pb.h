// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common_bot_script.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "valveextensions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto;
class CMsgBotWorldState;
struct CMsgBotWorldStateDefaultTypeInternal;
extern CMsgBotWorldStateDefaultTypeInternal _CMsgBotWorldState_default_instance_;
class CMsgBotWorldState_Ability;
struct CMsgBotWorldState_AbilityDefaultTypeInternal;
extern CMsgBotWorldState_AbilityDefaultTypeInternal _CMsgBotWorldState_Ability_default_instance_;
class CMsgBotWorldState_AvoidanceZone;
struct CMsgBotWorldState_AvoidanceZoneDefaultTypeInternal;
extern CMsgBotWorldState_AvoidanceZoneDefaultTypeInternal _CMsgBotWorldState_AvoidanceZone_default_instance_;
class CMsgBotWorldState_Courier;
struct CMsgBotWorldState_CourierDefaultTypeInternal;
extern CMsgBotWorldState_CourierDefaultTypeInternal _CMsgBotWorldState_Courier_default_instance_;
class CMsgBotWorldState_DroppedItem;
struct CMsgBotWorldState_DroppedItemDefaultTypeInternal;
extern CMsgBotWorldState_DroppedItemDefaultTypeInternal _CMsgBotWorldState_DroppedItem_default_instance_;
class CMsgBotWorldState_EventAbility;
struct CMsgBotWorldState_EventAbilityDefaultTypeInternal;
extern CMsgBotWorldState_EventAbilityDefaultTypeInternal _CMsgBotWorldState_EventAbility_default_instance_;
class CMsgBotWorldState_EventCourierKilled;
struct CMsgBotWorldState_EventCourierKilledDefaultTypeInternal;
extern CMsgBotWorldState_EventCourierKilledDefaultTypeInternal _CMsgBotWorldState_EventCourierKilled_default_instance_;
class CMsgBotWorldState_EventDamage;
struct CMsgBotWorldState_EventDamageDefaultTypeInternal;
extern CMsgBotWorldState_EventDamageDefaultTypeInternal _CMsgBotWorldState_EventDamage_default_instance_;
class CMsgBotWorldState_EventRoshanKilled;
struct CMsgBotWorldState_EventRoshanKilledDefaultTypeInternal;
extern CMsgBotWorldState_EventRoshanKilledDefaultTypeInternal _CMsgBotWorldState_EventRoshanKilled_default_instance_;
class CMsgBotWorldState_EventTree;
struct CMsgBotWorldState_EventTreeDefaultTypeInternal;
extern CMsgBotWorldState_EventTreeDefaultTypeInternal _CMsgBotWorldState_EventTree_default_instance_;
class CMsgBotWorldState_LinearProjectile;
struct CMsgBotWorldState_LinearProjectileDefaultTypeInternal;
extern CMsgBotWorldState_LinearProjectileDefaultTypeInternal _CMsgBotWorldState_LinearProjectile_default_instance_;
class CMsgBotWorldState_Modifier;
struct CMsgBotWorldState_ModifierDefaultTypeInternal;
extern CMsgBotWorldState_ModifierDefaultTypeInternal _CMsgBotWorldState_Modifier_default_instance_;
class CMsgBotWorldState_Player;
struct CMsgBotWorldState_PlayerDefaultTypeInternal;
extern CMsgBotWorldState_PlayerDefaultTypeInternal _CMsgBotWorldState_Player_default_instance_;
class CMsgBotWorldState_RuneInfo;
struct CMsgBotWorldState_RuneInfoDefaultTypeInternal;
extern CMsgBotWorldState_RuneInfoDefaultTypeInternal _CMsgBotWorldState_RuneInfo_default_instance_;
class CMsgBotWorldState_TeleportInfo;
struct CMsgBotWorldState_TeleportInfoDefaultTypeInternal;
extern CMsgBotWorldState_TeleportInfoDefaultTypeInternal _CMsgBotWorldState_TeleportInfo_default_instance_;
class CMsgBotWorldState_TrackingProjectile;
struct CMsgBotWorldState_TrackingProjectileDefaultTypeInternal;
extern CMsgBotWorldState_TrackingProjectileDefaultTypeInternal _CMsgBotWorldState_TrackingProjectile_default_instance_;
class CMsgBotWorldState_Unit;
struct CMsgBotWorldState_UnitDefaultTypeInternal;
extern CMsgBotWorldState_UnitDefaultTypeInternal _CMsgBotWorldState_Unit_default_instance_;
class CMsgBotWorldState_Vector;
struct CMsgBotWorldState_VectorDefaultTypeInternal;
extern CMsgBotWorldState_VectorDefaultTypeInternal _CMsgBotWorldState_Vector_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgBotWorldState* Arena::CreateMaybeMessage<::CMsgBotWorldState>(Arena*);
template<> ::CMsgBotWorldState_Ability* Arena::CreateMaybeMessage<::CMsgBotWorldState_Ability>(Arena*);
template<> ::CMsgBotWorldState_AvoidanceZone* Arena::CreateMaybeMessage<::CMsgBotWorldState_AvoidanceZone>(Arena*);
template<> ::CMsgBotWorldState_Courier* Arena::CreateMaybeMessage<::CMsgBotWorldState_Courier>(Arena*);
template<> ::CMsgBotWorldState_DroppedItem* Arena::CreateMaybeMessage<::CMsgBotWorldState_DroppedItem>(Arena*);
template<> ::CMsgBotWorldState_EventAbility* Arena::CreateMaybeMessage<::CMsgBotWorldState_EventAbility>(Arena*);
template<> ::CMsgBotWorldState_EventCourierKilled* Arena::CreateMaybeMessage<::CMsgBotWorldState_EventCourierKilled>(Arena*);
template<> ::CMsgBotWorldState_EventDamage* Arena::CreateMaybeMessage<::CMsgBotWorldState_EventDamage>(Arena*);
template<> ::CMsgBotWorldState_EventRoshanKilled* Arena::CreateMaybeMessage<::CMsgBotWorldState_EventRoshanKilled>(Arena*);
template<> ::CMsgBotWorldState_EventTree* Arena::CreateMaybeMessage<::CMsgBotWorldState_EventTree>(Arena*);
template<> ::CMsgBotWorldState_LinearProjectile* Arena::CreateMaybeMessage<::CMsgBotWorldState_LinearProjectile>(Arena*);
template<> ::CMsgBotWorldState_Modifier* Arena::CreateMaybeMessage<::CMsgBotWorldState_Modifier>(Arena*);
template<> ::CMsgBotWorldState_Player* Arena::CreateMaybeMessage<::CMsgBotWorldState_Player>(Arena*);
template<> ::CMsgBotWorldState_RuneInfo* Arena::CreateMaybeMessage<::CMsgBotWorldState_RuneInfo>(Arena*);
template<> ::CMsgBotWorldState_TeleportInfo* Arena::CreateMaybeMessage<::CMsgBotWorldState_TeleportInfo>(Arena*);
template<> ::CMsgBotWorldState_TrackingProjectile* Arena::CreateMaybeMessage<::CMsgBotWorldState_TrackingProjectile>(Arena*);
template<> ::CMsgBotWorldState_Unit* Arena::CreateMaybeMessage<::CMsgBotWorldState_Unit>(Arena*);
template<> ::CMsgBotWorldState_Vector* Arena::CreateMaybeMessage<::CMsgBotWorldState_Vector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CMsgBotWorldState_UnitType : int {
  CMsgBotWorldState_UnitType_INVALID = 0,
  CMsgBotWorldState_UnitType_HERO = 1,
  CMsgBotWorldState_UnitType_CREEP_HERO = 2,
  CMsgBotWorldState_UnitType_LANE_CREEP = 3,
  CMsgBotWorldState_UnitType_JUNGLE_CREEP = 4,
  CMsgBotWorldState_UnitType_ROSHAN = 5,
  CMsgBotWorldState_UnitType_TOWER = 6,
  CMsgBotWorldState_UnitType_BARRACKS = 7,
  CMsgBotWorldState_UnitType_SHRINE = 8,
  CMsgBotWorldState_UnitType_FORT = 9,
  CMsgBotWorldState_UnitType_BUILDING = 10,
  CMsgBotWorldState_UnitType_COURIER = 11,
  CMsgBotWorldState_UnitType_WARD = 12
};
bool CMsgBotWorldState_UnitType_IsValid(int value);
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState_UnitType_UnitType_MIN = CMsgBotWorldState_UnitType_INVALID;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState_UnitType_UnitType_MAX = CMsgBotWorldState_UnitType_WARD;
constexpr int CMsgBotWorldState_UnitType_UnitType_ARRAYSIZE = CMsgBotWorldState_UnitType_UnitType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgBotWorldState_UnitType_descriptor();
template<typename T>
inline const std::string& CMsgBotWorldState_UnitType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgBotWorldState_UnitType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgBotWorldState_UnitType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgBotWorldState_UnitType_descriptor(), enum_t_value);
}
inline bool CMsgBotWorldState_UnitType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgBotWorldState_UnitType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgBotWorldState_UnitType>(
    CMsgBotWorldState_UnitType_descriptor(), name, value);
}
enum CMsgBotWorldState_CourierState : int {
  CMsgBotWorldState_CourierState_COURIER_STATE_INIT = -1,
  CMsgBotWorldState_CourierState_COURIER_STATE_IDLE = 0,
  CMsgBotWorldState_CourierState_COURIER_STATE_AT_BASE = 1,
  CMsgBotWorldState_CourierState_COURIER_STATE_MOVING = 2,
  CMsgBotWorldState_CourierState_COURIER_STATE_DELIVERING_ITEMS = 3,
  CMsgBotWorldState_CourierState_COURIER_STATE_RETURNING_TO_BASE = 4,
  CMsgBotWorldState_CourierState_COURIER_STATE_DEAD = 5
};
bool CMsgBotWorldState_CourierState_IsValid(int value);
constexpr CMsgBotWorldState_CourierState CMsgBotWorldState_CourierState_CourierState_MIN = CMsgBotWorldState_CourierState_COURIER_STATE_INIT;
constexpr CMsgBotWorldState_CourierState CMsgBotWorldState_CourierState_CourierState_MAX = CMsgBotWorldState_CourierState_COURIER_STATE_DEAD;
constexpr int CMsgBotWorldState_CourierState_CourierState_ARRAYSIZE = CMsgBotWorldState_CourierState_CourierState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgBotWorldState_CourierState_descriptor();
template<typename T>
inline const std::string& CMsgBotWorldState_CourierState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgBotWorldState_CourierState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgBotWorldState_CourierState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgBotWorldState_CourierState_descriptor(), enum_t_value);
}
inline bool CMsgBotWorldState_CourierState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgBotWorldState_CourierState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgBotWorldState_CourierState>(
    CMsgBotWorldState_CourierState_descriptor(), name, value);
}
// ===================================================================

class CMsgBotWorldState_Vector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBotWorldState.Vector) */ {
 public:
  inline CMsgBotWorldState_Vector() : CMsgBotWorldState_Vector(nullptr) {}
  ~CMsgBotWorldState_Vector() override;
  explicit PROTOBUF_CONSTEXPR CMsgBotWorldState_Vector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBotWorldState_Vector(const CMsgBotWorldState_Vector& from);
  CMsgBotWorldState_Vector(CMsgBotWorldState_Vector&& from) noexcept
    : CMsgBotWorldState_Vector() {
    *this = ::std::move(from);
  }

  inline CMsgBotWorldState_Vector& operator=(const CMsgBotWorldState_Vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBotWorldState_Vector& operator=(CMsgBotWorldState_Vector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBotWorldState_Vector& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBotWorldState_Vector* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_Vector*>(
               &_CMsgBotWorldState_Vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgBotWorldState_Vector& a, CMsgBotWorldState_Vector& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBotWorldState_Vector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBotWorldState_Vector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBotWorldState_Vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBotWorldState_Vector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBotWorldState_Vector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBotWorldState_Vector& from) {
    CMsgBotWorldState_Vector::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBotWorldState_Vector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBotWorldState.Vector";
  }
  protected:
  explicit CMsgBotWorldState_Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBotWorldState.Vector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float x_;
    float y_;
    float z_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBotWorldState.Player) */ {
 public:
  inline CMsgBotWorldState_Player() : CMsgBotWorldState_Player(nullptr) {}
  ~CMsgBotWorldState_Player() override;
  explicit PROTOBUF_CONSTEXPR CMsgBotWorldState_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBotWorldState_Player(const CMsgBotWorldState_Player& from);
  CMsgBotWorldState_Player(CMsgBotWorldState_Player&& from) noexcept
    : CMsgBotWorldState_Player() {
    *this = ::std::move(from);
  }

  inline CMsgBotWorldState_Player& operator=(const CMsgBotWorldState_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBotWorldState_Player& operator=(CMsgBotWorldState_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBotWorldState_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBotWorldState_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_Player*>(
               &_CMsgBotWorldState_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgBotWorldState_Player& a, CMsgBotWorldState_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBotWorldState_Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBotWorldState_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBotWorldState_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBotWorldState_Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBotWorldState_Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBotWorldState_Player& from) {
    CMsgBotWorldState_Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBotWorldState_Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBotWorldState.Player";
  }
  protected:
  explicit CMsgBotWorldState_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 11,
    kPlayerIdFieldNumber = 1,
    kHeroIdFieldNumber = 2,
    kIsAliveFieldNumber = 3,
    kRespawnTimeFieldNumber = 4,
    kKillsFieldNumber = 5,
    kDeathsFieldNumber = 6,
    kAssistsFieldNumber = 7,
    kTeamIdFieldNumber = 8,
    kMmrFieldNumber = 10,
    kPrimaryUnitHandleFieldNumber = 9,
  };
  // optional .CMsgBotWorldState.Vector location = 11;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::CMsgBotWorldState_Vector& location() const;
  PROTOBUF_NODISCARD ::CMsgBotWorldState_Vector* release_location();
  ::CMsgBotWorldState_Vector* mutable_location();
  void set_allocated_location(::CMsgBotWorldState_Vector* location);
  private:
  const ::CMsgBotWorldState_Vector& _internal_location() const;
  ::CMsgBotWorldState_Vector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::CMsgBotWorldState_Vector* location);
  ::CMsgBotWorldState_Vector* unsafe_arena_release_location();

  // optional int32 player_id = 1 [(.map_key) = true];
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional bool is_alive = 3;
  bool has_is_alive() const;
  private:
  bool _internal_has_is_alive() const;
  public:
  void clear_is_alive();
  bool is_alive() const;
  void set_is_alive(bool value);
  private:
  bool _internal_is_alive() const;
  void _internal_set_is_alive(bool value);
  public:

  // optional float respawn_time = 4;
  bool has_respawn_time() const;
  private:
  bool _internal_has_respawn_time() const;
  public:
  void clear_respawn_time();
  float respawn_time() const;
  void set_respawn_time(float value);
  private:
  float _internal_respawn_time() const;
  void _internal_set_respawn_time(float value);
  public:

  // optional uint32 kills = 5;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  uint32_t kills() const;
  void set_kills(uint32_t value);
  private:
  uint32_t _internal_kills() const;
  void _internal_set_kills(uint32_t value);
  public:

  // optional uint32 deaths = 6;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  uint32_t deaths() const;
  void set_deaths(uint32_t value);
  private:
  uint32_t _internal_deaths() const;
  void _internal_set_deaths(uint32_t value);
  public:

  // optional uint32 assists = 7;
  bool has_assists() const;
  private:
  bool _internal_has_assists() const;
  public:
  void clear_assists();
  uint32_t assists() const;
  void set_assists(uint32_t value);
  private:
  uint32_t _internal_assists() const;
  void _internal_set_assists(uint32_t value);
  public:

  // optional uint32 team_id = 8;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional int32 mmr = 10;
  bool has_mmr() const;
  private:
  bool _internal_has_mmr() const;
  public:
  void clear_mmr();
  int32_t mmr() const;
  void set_mmr(int32_t value);
  private:
  int32_t _internal_mmr() const;
  void _internal_set_mmr(int32_t value);
  public:

  // optional uint32 primary_unit_handle = 9 [default = 4294967295];
  bool has_primary_unit_handle() const;
  private:
  bool _internal_has_primary_unit_handle() const;
  public:
  void clear_primary_unit_handle();
  uint32_t primary_unit_handle() const;
  void set_primary_unit_handle(uint32_t value);
  private:
  uint32_t _internal_primary_unit_handle() const;
  void _internal_set_primary_unit_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBotWorldState.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgBotWorldState_Vector* location_;
    int32_t player_id_;
    uint32_t hero_id_;
    bool is_alive_;
    float respawn_time_;
    uint32_t kills_;
    uint32_t deaths_;
    uint32_t assists_;
    uint32_t team_id_;
    int32_t mmr_;
    uint32_t primary_unit_handle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_Ability final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBotWorldState.Ability) */ {
 public:
  inline CMsgBotWorldState_Ability() : CMsgBotWorldState_Ability(nullptr) {}
  ~CMsgBotWorldState_Ability() override;
  explicit PROTOBUF_CONSTEXPR CMsgBotWorldState_Ability(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBotWorldState_Ability(const CMsgBotWorldState_Ability& from);
  CMsgBotWorldState_Ability(CMsgBotWorldState_Ability&& from) noexcept
    : CMsgBotWorldState_Ability() {
    *this = ::std::move(from);
  }

  inline CMsgBotWorldState_Ability& operator=(const CMsgBotWorldState_Ability& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBotWorldState_Ability& operator=(CMsgBotWorldState_Ability&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBotWorldState_Ability& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBotWorldState_Ability* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_Ability*>(
               &_CMsgBotWorldState_Ability_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgBotWorldState_Ability& a, CMsgBotWorldState_Ability& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBotWorldState_Ability* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBotWorldState_Ability* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBotWorldState_Ability* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBotWorldState_Ability>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBotWorldState_Ability& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBotWorldState_Ability& from) {
    CMsgBotWorldState_Ability::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBotWorldState_Ability* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBotWorldState.Ability";
  }
  protected:
  explicit CMsgBotWorldState_Ability(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kSlotFieldNumber = 3,
    kLevelFieldNumber = 6,
    kCastRangeFieldNumber = 10,
    kChannelTimeFieldNumber = 11,
    kCooldownRemainingFieldNumber = 12,
    kIsActivatedFieldNumber = 20,
    kIsToggledFieldNumber = 21,
    kIsInAbilityPhaseFieldNumber = 22,
    kIsChannelingFieldNumber = 23,
    kIsStolenFieldNumber = 24,
    kIsFullyCastableFieldNumber = 25,
    kIsCombinedLockedFieldNumber = 40,
    kChargesFieldNumber = 30,
    kSecondaryChargesFieldNumber = 31,
    kPowerTreadsStatFieldNumber = 50,
    kAbilityIdFieldNumber = 2,
    kCasterHandleFieldNumber = 5,
  };
  // optional uint32 handle = 1 [(.map_key) = true];
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  uint32_t handle() const;
  void set_handle(uint32_t value);
  private:
  uint32_t _internal_handle() const;
  void _internal_set_handle(uint32_t value);
  public:

  // optional uint32 slot = 3;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  uint32_t slot() const;
  void set_slot(uint32_t value);
  private:
  uint32_t _internal_slot() const;
  void _internal_set_slot(uint32_t value);
  public:

  // optional uint32 level = 6;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // optional uint32 cast_range = 10;
  bool has_cast_range() const;
  private:
  bool _internal_has_cast_range() const;
  public:
  void clear_cast_range();
  uint32_t cast_range() const;
  void set_cast_range(uint32_t value);
  private:
  uint32_t _internal_cast_range() const;
  void _internal_set_cast_range(uint32_t value);
  public:

  // optional float channel_time = 11;
  bool has_channel_time() const;
  private:
  bool _internal_has_channel_time() const;
  public:
  void clear_channel_time();
  float channel_time() const;
  void set_channel_time(float value);
  private:
  float _internal_channel_time() const;
  void _internal_set_channel_time(float value);
  public:

  // optional float cooldown_remaining = 12 [default = 0];
  bool has_cooldown_remaining() const;
  private:
  bool _internal_has_cooldown_remaining() const;
  public:
  void clear_cooldown_remaining();
  float cooldown_remaining() const;
  void set_cooldown_remaining(float value);
  private:
  float _internal_cooldown_remaining() const;
  void _internal_set_cooldown_remaining(float value);
  public:

  // optional bool is_activated = 20;
  bool has_is_activated() const;
  private:
  bool _internal_has_is_activated() const;
  public:
  void clear_is_activated();
  bool is_activated() const;
  void set_is_activated(bool value);
  private:
  bool _internal_is_activated() const;
  void _internal_set_is_activated(bool value);
  public:

  // optional bool is_toggled = 21;
  bool has_is_toggled() const;
  private:
  bool _internal_has_is_toggled() const;
  public:
  void clear_is_toggled();
  bool is_toggled() const;
  void set_is_toggled(bool value);
  private:
  bool _internal_is_toggled() const;
  void _internal_set_is_toggled(bool value);
  public:

  // optional bool is_in_ability_phase = 22;
  bool has_is_in_ability_phase() const;
  private:
  bool _internal_has_is_in_ability_phase() const;
  public:
  void clear_is_in_ability_phase();
  bool is_in_ability_phase() const;
  void set_is_in_ability_phase(bool value);
  private:
  bool _internal_is_in_ability_phase() const;
  void _internal_set_is_in_ability_phase(bool value);
  public:

  // optional bool is_channeling = 23;
  bool has_is_channeling() const;
  private:
  bool _internal_has_is_channeling() const;
  public:
  void clear_is_channeling();
  bool is_channeling() const;
  void set_is_channeling(bool value);
  private:
  bool _internal_is_channeling() const;
  void _internal_set_is_channeling(bool value);
  public:

  // optional bool is_stolen = 24;
  bool has_is_stolen() const;
  private:
  bool _internal_has_is_stolen() const;
  public:
  void clear_is_stolen();
  bool is_stolen() const;
  void set_is_stolen(bool value);
  private:
  bool _internal_is_stolen() const;
  void _internal_set_is_stolen(bool value);
  public:

  // optional bool is_fully_castable = 25;
  bool has_is_fully_castable() const;
  private:
  bool _internal_has_is_fully_castable() const;
  public:
  void clear_is_fully_castable();
  bool is_fully_castable() const;
  void set_is_fully_castable(bool value);
  private:
  bool _internal_is_fully_castable() const;
  void _internal_set_is_fully_castable(bool value);
  public:

  // optional bool is_combined_locked = 40;
  bool has_is_combined_locked() const;
  private:
  bool _internal_has_is_combined_locked() const;
  public:
  void clear_is_combined_locked();
  bool is_combined_locked() const;
  void set_is_combined_locked(bool value);
  private:
  bool _internal_is_combined_locked() const;
  void _internal_set_is_combined_locked(bool value);
  public:

  // optional uint32 charges = 30;
  bool has_charges() const;
  private:
  bool _internal_has_charges() const;
  public:
  void clear_charges();
  uint32_t charges() const;
  void set_charges(uint32_t value);
  private:
  uint32_t _internal_charges() const;
  void _internal_set_charges(uint32_t value);
  public:

  // optional uint32 secondary_charges = 31;
  bool has_secondary_charges() const;
  private:
  bool _internal_has_secondary_charges() const;
  public:
  void clear_secondary_charges();
  uint32_t secondary_charges() const;
  void set_secondary_charges(uint32_t value);
  private:
  uint32_t _internal_secondary_charges() const;
  void _internal_set_secondary_charges(uint32_t value);
  public:

  // optional int32 power_treads_stat = 50 [default = -1];
  bool has_power_treads_stat() const;
  private:
  bool _internal_has_power_treads_stat() const;
  public:
  void clear_power_treads_stat();
  int32_t power_treads_stat() const;
  void set_power_treads_stat(int32_t value);
  private:
  int32_t _internal_power_treads_stat() const;
  void _internal_set_power_treads_stat(int32_t value);
  public:

  // optional int32 ability_id = 2 [default = -1];
  bool has_ability_id() const;
  private:
  bool _internal_has_ability_id() const;
  public:
  void clear_ability_id();
  int32_t ability_id() const;
  void set_ability_id(int32_t value);
  private:
  int32_t _internal_ability_id() const;
  void _internal_set_ability_id(int32_t value);
  public:

  // optional uint32 caster_handle = 5 [default = 4294967295];
  bool has_caster_handle() const;
  private:
  bool _internal_has_caster_handle() const;
  public:
  void clear_caster_handle();
  uint32_t caster_handle() const;
  void set_caster_handle(uint32_t value);
  private:
  uint32_t _internal_caster_handle() const;
  void _internal_set_caster_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBotWorldState.Ability)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t handle_;
    uint32_t slot_;
    uint32_t level_;
    uint32_t cast_range_;
    float channel_time_;
    float cooldown_remaining_;
    bool is_activated_;
    bool is_toggled_;
    bool is_in_ability_phase_;
    bool is_channeling_;
    bool is_stolen_;
    bool is_fully_castable_;
    bool is_combined_locked_;
    uint32_t charges_;
    uint32_t secondary_charges_;
    int32_t power_treads_stat_;
    int32_t ability_id_;
    uint32_t caster_handle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_DroppedItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBotWorldState.DroppedItem) */ {
 public:
  inline CMsgBotWorldState_DroppedItem() : CMsgBotWorldState_DroppedItem(nullptr) {}
  ~CMsgBotWorldState_DroppedItem() override;
  explicit PROTOBUF_CONSTEXPR CMsgBotWorldState_DroppedItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBotWorldState_DroppedItem(const CMsgBotWorldState_DroppedItem& from);
  CMsgBotWorldState_DroppedItem(CMsgBotWorldState_DroppedItem&& from) noexcept
    : CMsgBotWorldState_DroppedItem() {
    *this = ::std::move(from);
  }

  inline CMsgBotWorldState_DroppedItem& operator=(const CMsgBotWorldState_DroppedItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBotWorldState_DroppedItem& operator=(CMsgBotWorldState_DroppedItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBotWorldState_DroppedItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBotWorldState_DroppedItem* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_DroppedItem*>(
               &_CMsgBotWorldState_DroppedItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgBotWorldState_DroppedItem& a, CMsgBotWorldState_DroppedItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBotWorldState_DroppedItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBotWorldState_DroppedItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBotWorldState_DroppedItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBotWorldState_DroppedItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBotWorldState_DroppedItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBotWorldState_DroppedItem& from) {
    CMsgBotWorldState_DroppedItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBotWorldState_DroppedItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBotWorldState.DroppedItem";
  }
  protected:
  explicit CMsgBotWorldState_DroppedItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 2,
    kItemIdFieldNumber = 1,
  };
  // optional .CMsgBotWorldState.Vector location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::CMsgBotWorldState_Vector& location() const;
  PROTOBUF_NODISCARD ::CMsgBotWorldState_Vector* release_location();
  ::CMsgBotWorldState_Vector* mutable_location();
  void set_allocated_location(::CMsgBotWorldState_Vector* location);
  private:
  const ::CMsgBotWorldState_Vector& _internal_location() const;
  ::CMsgBotWorldState_Vector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::CMsgBotWorldState_Vector* location);
  ::CMsgBotWorldState_Vector* unsafe_arena_release_location();

  // optional int32 item_id = 1 [default = -1];
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  int32_t item_id() const;
  void set_item_id(int32_t value);
  private:
  int32_t _internal_item_id() const;
  void _internal_set_item_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBotWorldState.DroppedItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgBotWorldState_Vector* location_;
    int32_t item_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_RuneInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBotWorldState.RuneInfo) */ {
 public:
  inline CMsgBotWorldState_RuneInfo() : CMsgBotWorldState_RuneInfo(nullptr) {}
  ~CMsgBotWorldState_RuneInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgBotWorldState_RuneInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBotWorldState_RuneInfo(const CMsgBotWorldState_RuneInfo& from);
  CMsgBotWorldState_RuneInfo(CMsgBotWorldState_RuneInfo&& from) noexcept
    : CMsgBotWorldState_RuneInfo() {
    *this = ::std::move(from);
  }

  inline CMsgBotWorldState_RuneInfo& operator=(const CMsgBotWorldState_RuneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBotWorldState_RuneInfo& operator=(CMsgBotWorldState_RuneInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBotWorldState_RuneInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBotWorldState_RuneInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_RuneInfo*>(
               &_CMsgBotWorldState_RuneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgBotWorldState_RuneInfo& a, CMsgBotWorldState_RuneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBotWorldState_RuneInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBotWorldState_RuneInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBotWorldState_RuneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBotWorldState_RuneInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBotWorldState_RuneInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBotWorldState_RuneInfo& from) {
    CMsgBotWorldState_RuneInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBotWorldState_RuneInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBotWorldState.RuneInfo";
  }
  protected:
  explicit CMsgBotWorldState_RuneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 2,
    kTypeFieldNumber = 1,
    kStatusFieldNumber = 3,
    kTimeSinceSeenFieldNumber = 4,
  };
  // optional .CMsgBotWorldState.Vector location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::CMsgBotWorldState_Vector& location() const;
  PROTOBUF_NODISCARD ::CMsgBotWorldState_Vector* release_location();
  ::CMsgBotWorldState_Vector* mutable_location();
  void set_allocated_location(::CMsgBotWorldState_Vector* location);
  private:
  const ::CMsgBotWorldState_Vector& _internal_location() const;
  ::CMsgBotWorldState_Vector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::CMsgBotWorldState_Vector* location);
  ::CMsgBotWorldState_Vector* unsafe_arena_release_location();

  // optional int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // optional uint32 status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // optional float time_since_seen = 4;
  bool has_time_since_seen() const;
  private:
  bool _internal_has_time_since_seen() const;
  public:
  void clear_time_since_seen();
  float time_since_seen() const;
  void set_time_since_seen(float value);
  private:
  float _internal_time_since_seen() const;
  void _internal_set_time_since_seen(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBotWorldState.RuneInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgBotWorldState_Vector* location_;
    int32_t type_;
    uint32_t status_;
    float time_since_seen_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_TeleportInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBotWorldState.TeleportInfo) */ {
 public:
  inline CMsgBotWorldState_TeleportInfo() : CMsgBotWorldState_TeleportInfo(nullptr) {}
  ~CMsgBotWorldState_TeleportInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgBotWorldState_TeleportInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBotWorldState_TeleportInfo(const CMsgBotWorldState_TeleportInfo& from);
  CMsgBotWorldState_TeleportInfo(CMsgBotWorldState_TeleportInfo&& from) noexcept
    : CMsgBotWorldState_TeleportInfo() {
    *this = ::std::move(from);
  }

  inline CMsgBotWorldState_TeleportInfo& operator=(const CMsgBotWorldState_TeleportInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBotWorldState_TeleportInfo& operator=(CMsgBotWorldState_TeleportInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBotWorldState_TeleportInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBotWorldState_TeleportInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_TeleportInfo*>(
               &_CMsgBotWorldState_TeleportInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgBotWorldState_TeleportInfo& a, CMsgBotWorldState_TeleportInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBotWorldState_TeleportInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBotWorldState_TeleportInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBotWorldState_TeleportInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBotWorldState_TeleportInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBotWorldState_TeleportInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBotWorldState_TeleportInfo& from) {
    CMsgBotWorldState_TeleportInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBotWorldState_TeleportInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBotWorldState.TeleportInfo";
  }
  protected:
  explicit CMsgBotWorldState_TeleportInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kTimeRemainingFieldNumber = 3,
  };
  // optional .CMsgBotWorldState.Vector location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::CMsgBotWorldState_Vector& location() const;
  PROTOBUF_NODISCARD ::CMsgBotWorldState_Vector* release_location();
  ::CMsgBotWorldState_Vector* mutable_location();
  void set_allocated_location(::CMsgBotWorldState_Vector* location);
  private:
  const ::CMsgBotWorldState_Vector& _internal_location() const;
  ::CMsgBotWorldState_Vector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::CMsgBotWorldState_Vector* location);
  ::CMsgBotWorldState_Vector* unsafe_arena_release_location();

  // optional int32 player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // optional float time_remaining = 3;
  bool has_time_remaining() const;
  private:
  bool _internal_has_time_remaining() const;
  public:
  void clear_time_remaining();
  float time_remaining() const;
  void set_time_remaining(float value);
  private:
  float _internal_time_remaining() const;
  void _internal_set_time_remaining(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBotWorldState.TeleportInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgBotWorldState_Vector* location_;
    int32_t player_id_;
    float time_remaining_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_Modifier final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBotWorldState.Modifier) */ {
 public:
  inline CMsgBotWorldState_Modifier() : CMsgBotWorldState_Modifier(nullptr) {}
  ~CMsgBotWorldState_Modifier() override;
  explicit PROTOBUF_CONSTEXPR CMsgBotWorldState_Modifier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBotWorldState_Modifier(const CMsgBotWorldState_Modifier& from);
  CMsgBotWorldState_Modifier(CMsgBotWorldState_Modifier&& from) noexcept
    : CMsgBotWorldState_Modifier() {
    *this = ::std::move(from);
  }

  inline CMsgBotWorldState_Modifier& operator=(const CMsgBotWorldState_Modifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBotWorldState_Modifier& operator=(CMsgBotWorldState_Modifier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBotWorldState_Modifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBotWorldState_Modifier* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_Modifier*>(
               &_CMsgBotWorldState_Modifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgBotWorldState_Modifier& a, CMsgBotWorldState_Modifier& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBotWorldState_Modifier* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBotWorldState_Modifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBotWorldState_Modifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBotWorldState_Modifier>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBotWorldState_Modifier& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBotWorldState_Modifier& from) {
    CMsgBotWorldState_Modifier::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBotWorldState_Modifier* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBotWorldState.Modifier";
  }
  protected:
  explicit CMsgBotWorldState_Modifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuxiliaryUnitsHandlesFieldNumber = 6,
    kNameFieldNumber = 1,
    kStackCountFieldNumber = 2,
    kRemainingDurationFieldNumber = 5,
    kHandleFieldNumber = 7,
    kAbilityHandleFieldNumber = 3,
    kAbilityIdFieldNumber = 4,
  };
  // repeated uint32 auxiliary_units_handles = 6;
  int auxiliary_units_handles_size() const;
  private:
  int _internal_auxiliary_units_handles_size() const;
  public:
  void clear_auxiliary_units_handles();
  private:
  uint32_t _internal_auxiliary_units_handles(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_auxiliary_units_handles() const;
  void _internal_add_auxiliary_units_handles(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_auxiliary_units_handles();
  public:
  uint32_t auxiliary_units_handles(int index) const;
  void set_auxiliary_units_handles(int index, uint32_t value);
  void add_auxiliary_units_handles(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      auxiliary_units_handles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_auxiliary_units_handles();

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 stack_count = 2;
  bool has_stack_count() const;
  private:
  bool _internal_has_stack_count() const;
  public:
  void clear_stack_count();
  uint32_t stack_count() const;
  void set_stack_count(uint32_t value);
  private:
  uint32_t _internal_stack_count() const;
  void _internal_set_stack_count(uint32_t value);
  public:

  // optional float remaining_duration = 5;
  bool has_remaining_duration() const;
  private:
  bool _internal_has_remaining_duration() const;
  public:
  void clear_remaining_duration();
  float remaining_duration() const;
  void set_remaining_duration(float value);
  private:
  float _internal_remaining_duration() const;
  void _internal_set_remaining_duration(float value);
  public:

  // optional uint32 handle = 7 [(.map_key) = true];
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  uint32_t handle() const;
  void set_handle(uint32_t value);
  private:
  uint32_t _internal_handle() const;
  void _internal_set_handle(uint32_t value);
  public:

  // optional uint32 ability_handle = 3 [default = 4294967295];
  bool has_ability_handle() const;
  private:
  bool _internal_has_ability_handle() const;
  public:
  void clear_ability_handle();
  uint32_t ability_handle() const;
  void set_ability_handle(uint32_t value);
  private:
  uint32_t _internal_ability_handle() const;
  void _internal_set_ability_handle(uint32_t value);
  public:

  // optional int32 ability_id = 4 [default = -1];
  bool has_ability_id() const;
  private:
  bool _internal_has_ability_id() const;
  public:
  void clear_ability_id();
  int32_t ability_id() const;
  void set_ability_id(int32_t value);
  private:
  int32_t _internal_ability_id() const;
  void _internal_set_ability_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBotWorldState.Modifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > auxiliary_units_handles_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t stack_count_;
    float remaining_duration_;
    uint32_t handle_;
    uint32_t ability_handle_;
    int32_t ability_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_LinearProjectile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBotWorldState.LinearProjectile) */ {
 public:
  inline CMsgBotWorldState_LinearProjectile() : CMsgBotWorldState_LinearProjectile(nullptr) {}
  ~CMsgBotWorldState_LinearProjectile() override;
  explicit PROTOBUF_CONSTEXPR CMsgBotWorldState_LinearProjectile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBotWorldState_LinearProjectile(const CMsgBotWorldState_LinearProjectile& from);
  CMsgBotWorldState_LinearProjectile(CMsgBotWorldState_LinearProjectile&& from) noexcept
    : CMsgBotWorldState_LinearProjectile() {
    *this = ::std::move(from);
  }

  inline CMsgBotWorldState_LinearProjectile& operator=(const CMsgBotWorldState_LinearProjectile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBotWorldState_LinearProjectile& operator=(CMsgBotWorldState_LinearProjectile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBotWorldState_LinearProjectile& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBotWorldState_LinearProjectile* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_LinearProjectile*>(
               &_CMsgBotWorldState_LinearProjectile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgBotWorldState_LinearProjectile& a, CMsgBotWorldState_LinearProjectile& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBotWorldState_LinearProjectile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBotWorldState_LinearProjectile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBotWorldState_LinearProjectile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBotWorldState_LinearProjectile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBotWorldState_LinearProjectile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBotWorldState_LinearProjectile& from) {
    CMsgBotWorldState_LinearProjectile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBotWorldState_LinearProjectile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBotWorldState.LinearProjectile";
  }
  protected:
  explicit CMsgBotWorldState_LinearProjectile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 6,
    kVelocityFieldNumber = 7,
    kHandleFieldNumber = 1,
    kCasterPlayerIdFieldNumber = 3,
    kRadiusFieldNumber = 8,
    kCasterUnitTypeFieldNumber = 9,
    kAbilityIdFieldNumber = 5,
    kCasterHandleFieldNumber = 2,
    kAbilityHandleFieldNumber = 4,
  };
  // optional .CMsgBotWorldState.Vector location = 6;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::CMsgBotWorldState_Vector& location() const;
  PROTOBUF_NODISCARD ::CMsgBotWorldState_Vector* release_location();
  ::CMsgBotWorldState_Vector* mutable_location();
  void set_allocated_location(::CMsgBotWorldState_Vector* location);
  private:
  const ::CMsgBotWorldState_Vector& _internal_location() const;
  ::CMsgBotWorldState_Vector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::CMsgBotWorldState_Vector* location);
  ::CMsgBotWorldState_Vector* unsafe_arena_release_location();

  // optional .CMsgBotWorldState.Vector velocity = 7;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::CMsgBotWorldState_Vector& velocity() const;
  PROTOBUF_NODISCARD ::CMsgBotWorldState_Vector* release_velocity();
  ::CMsgBotWorldState_Vector* mutable_velocity();
  void set_allocated_velocity(::CMsgBotWorldState_Vector* velocity);
  private:
  const ::CMsgBotWorldState_Vector& _internal_velocity() const;
  ::CMsgBotWorldState_Vector* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::CMsgBotWorldState_Vector* velocity);
  ::CMsgBotWorldState_Vector* unsafe_arena_release_velocity();

  // optional uint32 handle = 1 [(.map_key) = true];
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  uint32_t handle() const;
  void set_handle(uint32_t value);
  private:
  uint32_t _internal_handle() const;
  void _internal_set_handle(uint32_t value);
  public:

  // optional int32 caster_player_id = 3;
  bool has_caster_player_id() const;
  private:
  bool _internal_has_caster_player_id() const;
  public:
  void clear_caster_player_id();
  int32_t caster_player_id() const;
  void set_caster_player_id(int32_t value);
  private:
  int32_t _internal_caster_player_id() const;
  void _internal_set_caster_player_id(int32_t value);
  public:

  // optional uint32 radius = 8;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  uint32_t radius() const;
  void set_radius(uint32_t value);
  private:
  uint32_t _internal_radius() const;
  void _internal_set_radius(uint32_t value);
  public:

  // optional .CMsgBotWorldState.UnitType caster_unit_type = 9 [default = INVALID];
  bool has_caster_unit_type() const;
  private:
  bool _internal_has_caster_unit_type() const;
  public:
  void clear_caster_unit_type();
  ::CMsgBotWorldState_UnitType caster_unit_type() const;
  void set_caster_unit_type(::CMsgBotWorldState_UnitType value);
  private:
  ::CMsgBotWorldState_UnitType _internal_caster_unit_type() const;
  void _internal_set_caster_unit_type(::CMsgBotWorldState_UnitType value);
  public:

  // optional int32 ability_id = 5 [default = -1];
  bool has_ability_id() const;
  private:
  bool _internal_has_ability_id() const;
  public:
  void clear_ability_id();
  int32_t ability_id() const;
  void set_ability_id(int32_t value);
  private:
  int32_t _internal_ability_id() const;
  void _internal_set_ability_id(int32_t value);
  public:

  // optional uint32 caster_handle = 2 [default = 4294967295];
  bool has_caster_handle() const;
  private:
  bool _internal_has_caster_handle() const;
  public:
  void clear_caster_handle();
  uint32_t caster_handle() const;
  void set_caster_handle(uint32_t value);
  private:
  uint32_t _internal_caster_handle() const;
  void _internal_set_caster_handle(uint32_t value);
  public:

  // optional uint32 ability_handle = 4 [default = 4294967295];
  bool has_ability_handle() const;
  private:
  bool _internal_has_ability_handle() const;
  public:
  void clear_ability_handle();
  uint32_t ability_handle() const;
  void set_ability_handle(uint32_t value);
  private:
  uint32_t _internal_ability_handle() const;
  void _internal_set_ability_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBotWorldState.LinearProjectile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgBotWorldState_Vector* location_;
    ::CMsgBotWorldState_Vector* velocity_;
    uint32_t handle_;
    int32_t caster_player_id_;
    uint32_t radius_;
    int caster_unit_type_;
    int32_t ability_id_;
    uint32_t caster_handle_;
    uint32_t ability_handle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_TrackingProjectile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBotWorldState.TrackingProjectile) */ {
 public:
  inline CMsgBotWorldState_TrackingProjectile() : CMsgBotWorldState_TrackingProjectile(nullptr) {}
  ~CMsgBotWorldState_TrackingProjectile() override;
  explicit PROTOBUF_CONSTEXPR CMsgBotWorldState_TrackingProjectile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBotWorldState_TrackingProjectile(const CMsgBotWorldState_TrackingProjectile& from);
  CMsgBotWorldState_TrackingProjectile(CMsgBotWorldState_TrackingProjectile&& from) noexcept
    : CMsgBotWorldState_TrackingProjectile() {
    *this = ::std::move(from);
  }

  inline CMsgBotWorldState_TrackingProjectile& operator=(const CMsgBotWorldState_TrackingProjectile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBotWorldState_TrackingProjectile& operator=(CMsgBotWorldState_TrackingProjectile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBotWorldState_TrackingProjectile& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBotWorldState_TrackingProjectile* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_TrackingProjectile*>(
               &_CMsgBotWorldState_TrackingProjectile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgBotWorldState_TrackingProjectile& a, CMsgBotWorldState_TrackingProjectile& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBotWorldState_TrackingProjectile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBotWorldState_TrackingProjectile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBotWorldState_TrackingProjectile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBotWorldState_TrackingProjectile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBotWorldState_TrackingProjectile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBotWorldState_TrackingProjectile& from) {
    CMsgBotWorldState_TrackingProjectile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBotWorldState_TrackingProjectile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBotWorldState.TrackingProjectile";
  }
  protected:
  explicit CMsgBotWorldState_TrackingProjectile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 5,
    kCasterPlayerIdFieldNumber = 2,
    kVelocityFieldNumber = 6,
    kIsDodgeableFieldNumber = 7,
    kIsAttackFieldNumber = 8,
    kCasterUnitTypeFieldNumber = 9,
    kHandleFieldNumber = 10,
    kAbilityIdFieldNumber = 4,
    kCasterHandleFieldNumber = 1,
    kAbilityHandleFieldNumber = 3,
  };
  // optional .CMsgBotWorldState.Vector location = 5;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::CMsgBotWorldState_Vector& location() const;
  PROTOBUF_NODISCARD ::CMsgBotWorldState_Vector* release_location();
  ::CMsgBotWorldState_Vector* mutable_location();
  void set_allocated_location(::CMsgBotWorldState_Vector* location);
  private:
  const ::CMsgBotWorldState_Vector& _internal_location() const;
  ::CMsgBotWorldState_Vector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::CMsgBotWorldState_Vector* location);
  ::CMsgBotWorldState_Vector* unsafe_arena_release_location();

  // optional int32 caster_player_id = 2;
  bool has_caster_player_id() const;
  private:
  bool _internal_has_caster_player_id() const;
  public:
  void clear_caster_player_id();
  int32_t caster_player_id() const;
  void set_caster_player_id(int32_t value);
  private:
  int32_t _internal_caster_player_id() const;
  void _internal_set_caster_player_id(int32_t value);
  public:

  // optional uint32 velocity = 6;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  uint32_t velocity() const;
  void set_velocity(uint32_t value);
  private:
  uint32_t _internal_velocity() const;
  void _internal_set_velocity(uint32_t value);
  public:

  // optional bool is_dodgeable = 7;
  bool has_is_dodgeable() const;
  private:
  bool _internal_has_is_dodgeable() const;
  public:
  void clear_is_dodgeable();
  bool is_dodgeable() const;
  void set_is_dodgeable(bool value);
  private:
  bool _internal_is_dodgeable() const;
  void _internal_set_is_dodgeable(bool value);
  public:

  // optional bool is_attack = 8;
  bool has_is_attack() const;
  private:
  bool _internal_has_is_attack() const;
  public:
  void clear_is_attack();
  bool is_attack() const;
  void set_is_attack(bool value);
  private:
  bool _internal_is_attack() const;
  void _internal_set_is_attack(bool value);
  public:

  // optional .CMsgBotWorldState.UnitType caster_unit_type = 9 [default = INVALID];
  bool has_caster_unit_type() const;
  private:
  bool _internal_has_caster_unit_type() const;
  public:
  void clear_caster_unit_type();
  ::CMsgBotWorldState_UnitType caster_unit_type() const;
  void set_caster_unit_type(::CMsgBotWorldState_UnitType value);
  private:
  ::CMsgBotWorldState_UnitType _internal_caster_unit_type() const;
  void _internal_set_caster_unit_type(::CMsgBotWorldState_UnitType value);
  public:

  // optional uint32 handle = 10 [(.map_key) = true];
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  uint32_t handle() const;
  void set_handle(uint32_t value);
  private:
  uint32_t _internal_handle() const;
  void _internal_set_handle(uint32_t value);
  public:

  // optional int32 ability_id = 4 [default = -1];
  bool has_ability_id() const;
  private:
  bool _internal_has_ability_id() const;
  public:
  void clear_ability_id();
  int32_t ability_id() const;
  void set_ability_id(int32_t value);
  private:
  int32_t _internal_ability_id() const;
  void _internal_set_ability_id(int32_t value);
  public:

  // optional uint32 caster_handle = 1 [default = 4294967295];
  bool has_caster_handle() const;
  private:
  bool _internal_has_caster_handle() const;
  public:
  void clear_caster_handle();
  uint32_t caster_handle() const;
  void set_caster_handle(uint32_t value);
  private:
  uint32_t _internal_caster_handle() const;
  void _internal_set_caster_handle(uint32_t value);
  public:

  // optional uint32 ability_handle = 3 [default = 4294967295];
  bool has_ability_handle() const;
  private:
  bool _internal_has_ability_handle() const;
  public:
  void clear_ability_handle();
  uint32_t ability_handle() const;
  void set_ability_handle(uint32_t value);
  private:
  uint32_t _internal_ability_handle() const;
  void _internal_set_ability_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBotWorldState.TrackingProjectile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgBotWorldState_Vector* location_;
    int32_t caster_player_id_;
    uint32_t velocity_;
    bool is_dodgeable_;
    bool is_attack_;
    int caster_unit_type_;
    uint32_t handle_;
    int32_t ability_id_;
    uint32_t caster_handle_;
    uint32_t ability_handle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_AvoidanceZone final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBotWorldState.AvoidanceZone) */ {
 public:
  inline CMsgBotWorldState_AvoidanceZone() : CMsgBotWorldState_AvoidanceZone(nullptr) {}
  ~CMsgBotWorldState_AvoidanceZone() override;
  explicit PROTOBUF_CONSTEXPR CMsgBotWorldState_AvoidanceZone(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBotWorldState_AvoidanceZone(const CMsgBotWorldState_AvoidanceZone& from);
  CMsgBotWorldState_AvoidanceZone(CMsgBotWorldState_AvoidanceZone&& from) noexcept
    : CMsgBotWorldState_AvoidanceZone() {
    *this = ::std::move(from);
  }

  inline CMsgBotWorldState_AvoidanceZone& operator=(const CMsgBotWorldState_AvoidanceZone& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBotWorldState_AvoidanceZone& operator=(CMsgBotWorldState_AvoidanceZone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBotWorldState_AvoidanceZone& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBotWorldState_AvoidanceZone* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_AvoidanceZone*>(
               &_CMsgBotWorldState_AvoidanceZone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgBotWorldState_AvoidanceZone& a, CMsgBotWorldState_AvoidanceZone& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBotWorldState_AvoidanceZone* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBotWorldState_AvoidanceZone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBotWorldState_AvoidanceZone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBotWorldState_AvoidanceZone>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBotWorldState_AvoidanceZone& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBotWorldState_AvoidanceZone& from) {
    CMsgBotWorldState_AvoidanceZone::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBotWorldState_AvoidanceZone* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBotWorldState.AvoidanceZone";
  }
  protected:
  explicit CMsgBotWorldState_AvoidanceZone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
    kCasterPlayerIdFieldNumber = 3,
    kRadiusFieldNumber = 6,
    kCasterUnitTypeFieldNumber = 7,
    kAbilityIdFieldNumber = 5,
    kCasterHandleFieldNumber = 2,
    kAbilityHandleFieldNumber = 4,
  };
  // optional .CMsgBotWorldState.Vector location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::CMsgBotWorldState_Vector& location() const;
  PROTOBUF_NODISCARD ::CMsgBotWorldState_Vector* release_location();
  ::CMsgBotWorldState_Vector* mutable_location();
  void set_allocated_location(::CMsgBotWorldState_Vector* location);
  private:
  const ::CMsgBotWorldState_Vector& _internal_location() const;
  ::CMsgBotWorldState_Vector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::CMsgBotWorldState_Vector* location);
  ::CMsgBotWorldState_Vector* unsafe_arena_release_location();

  // optional int32 caster_player_id = 3;
  bool has_caster_player_id() const;
  private:
  bool _internal_has_caster_player_id() const;
  public:
  void clear_caster_player_id();
  int32_t caster_player_id() const;
  void set_caster_player_id(int32_t value);
  private:
  int32_t _internal_caster_player_id() const;
  void _internal_set_caster_player_id(int32_t value);
  public:

  // optional uint32 radius = 6;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  uint32_t radius() const;
  void set_radius(uint32_t value);
  private:
  uint32_t _internal_radius() const;
  void _internal_set_radius(uint32_t value);
  public:

  // optional .CMsgBotWorldState.UnitType caster_unit_type = 7 [default = INVALID];
  bool has_caster_unit_type() const;
  private:
  bool _internal_has_caster_unit_type() const;
  public:
  void clear_caster_unit_type();
  ::CMsgBotWorldState_UnitType caster_unit_type() const;
  void set_caster_unit_type(::CMsgBotWorldState_UnitType value);
  private:
  ::CMsgBotWorldState_UnitType _internal_caster_unit_type() const;
  void _internal_set_caster_unit_type(::CMsgBotWorldState_UnitType value);
  public:

  // optional int32 ability_id = 5 [default = -1];
  bool has_ability_id() const;
  private:
  bool _internal_has_ability_id() const;
  public:
  void clear_ability_id();
  int32_t ability_id() const;
  void set_ability_id(int32_t value);
  private:
  int32_t _internal_ability_id() const;
  void _internal_set_ability_id(int32_t value);
  public:

  // optional uint32 caster_handle = 2 [default = 4294967295];
  bool has_caster_handle() const;
  private:
  bool _internal_has_caster_handle() const;
  public:
  void clear_caster_handle();
  uint32_t caster_handle() const;
  void set_caster_handle(uint32_t value);
  private:
  uint32_t _internal_caster_handle() const;
  void _internal_set_caster_handle(uint32_t value);
  public:

  // optional uint32 ability_handle = 4 [default = 4294967295];
  bool has_ability_handle() const;
  private:
  bool _internal_has_ability_handle() const;
  public:
  void clear_ability_handle();
  uint32_t ability_handle() const;
  void set_ability_handle(uint32_t value);
  private:
  uint32_t _internal_ability_handle() const;
  void _internal_set_ability_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBotWorldState.AvoidanceZone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgBotWorldState_Vector* location_;
    int32_t caster_player_id_;
    uint32_t radius_;
    int caster_unit_type_;
    int32_t ability_id_;
    uint32_t caster_handle_;
    uint32_t ability_handle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_Courier final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBotWorldState.Courier) */ {
 public:
  inline CMsgBotWorldState_Courier() : CMsgBotWorldState_Courier(nullptr) {}
  ~CMsgBotWorldState_Courier() override;
  explicit PROTOBUF_CONSTEXPR CMsgBotWorldState_Courier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBotWorldState_Courier(const CMsgBotWorldState_Courier& from);
  CMsgBotWorldState_Courier(CMsgBotWorldState_Courier&& from) noexcept
    : CMsgBotWorldState_Courier() {
    *this = ::std::move(from);
  }

  inline CMsgBotWorldState_Courier& operator=(const CMsgBotWorldState_Courier& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBotWorldState_Courier& operator=(CMsgBotWorldState_Courier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBotWorldState_Courier& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBotWorldState_Courier* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_Courier*>(
               &_CMsgBotWorldState_Courier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgBotWorldState_Courier& a, CMsgBotWorldState_Courier& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBotWorldState_Courier* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBotWorldState_Courier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBotWorldState_Courier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBotWorldState_Courier>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBotWorldState_Courier& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBotWorldState_Courier& from) {
    CMsgBotWorldState_Courier::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBotWorldState_Courier* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBotWorldState.Courier";
  }
  protected:
  explicit CMsgBotWorldState_Courier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kPlayerIdFieldNumber = 3,
    kStateFieldNumber = 2,
  };
  // optional uint32 handle = 1 [(.map_key) = true];
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  uint32_t handle() const;
  void set_handle(uint32_t value);
  private:
  uint32_t _internal_handle() const;
  void _internal_set_handle(uint32_t value);
  public:

  // optional int32 player_id = 3;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // optional .CMsgBotWorldState.CourierState state = 2 [default = COURIER_STATE_INIT];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::CMsgBotWorldState_CourierState state() const;
  void set_state(::CMsgBotWorldState_CourierState value);
  private:
  ::CMsgBotWorldState_CourierState _internal_state() const;
  void _internal_set_state(::CMsgBotWorldState_CourierState value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBotWorldState.Courier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t handle_;
    int32_t player_id_;
    int state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_EventAbility final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBotWorldState.EventAbility) */ {
 public:
  inline CMsgBotWorldState_EventAbility() : CMsgBotWorldState_EventAbility(nullptr) {}
  ~CMsgBotWorldState_EventAbility() override;
  explicit PROTOBUF_CONSTEXPR CMsgBotWorldState_EventAbility(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBotWorldState_EventAbility(const CMsgBotWorldState_EventAbility& from);
  CMsgBotWorldState_EventAbility(CMsgBotWorldState_EventAbility&& from) noexcept
    : CMsgBotWorldState_EventAbility() {
    *this = ::std::move(from);
  }

  inline CMsgBotWorldState_EventAbility& operator=(const CMsgBotWorldState_EventAbility& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBotWorldState_EventAbility& operator=(CMsgBotWorldState_EventAbility&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBotWorldState_EventAbility& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBotWorldState_EventAbility* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_EventAbility*>(
               &_CMsgBotWorldState_EventAbility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgBotWorldState_EventAbility& a, CMsgBotWorldState_EventAbility& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBotWorldState_EventAbility* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBotWorldState_EventAbility* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBotWorldState_EventAbility* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBotWorldState_EventAbility>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBotWorldState_EventAbility& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBotWorldState_EventAbility& from) {
    CMsgBotWorldState_EventAbility::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBotWorldState_EventAbility* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBotWorldState.EventAbility";
  }
  protected:
  explicit CMsgBotWorldState_EventAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 4,
    kPlayerIdFieldNumber = 2,
    kIsChannelStartFieldNumber = 5,
    kAbilityIdFieldNumber = 1,
    kUnitHandleFieldNumber = 3,
  };
  // optional .CMsgBotWorldState.Vector location = 4;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::CMsgBotWorldState_Vector& location() const;
  PROTOBUF_NODISCARD ::CMsgBotWorldState_Vector* release_location();
  ::CMsgBotWorldState_Vector* mutable_location();
  void set_allocated_location(::CMsgBotWorldState_Vector* location);
  private:
  const ::CMsgBotWorldState_Vector& _internal_location() const;
  ::CMsgBotWorldState_Vector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::CMsgBotWorldState_Vector* location);
  ::CMsgBotWorldState_Vector* unsafe_arena_release_location();

  // optional int32 player_id = 2;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // optional bool is_channel_start = 5;
  bool has_is_channel_start() const;
  private:
  bool _internal_has_is_channel_start() const;
  public:
  void clear_is_channel_start();
  bool is_channel_start() const;
  void set_is_channel_start(bool value);
  private:
  bool _internal_is_channel_start() const;
  void _internal_set_is_channel_start(bool value);
  public:

  // optional int32 ability_id = 1 [default = -1];
  bool has_ability_id() const;
  private:
  bool _internal_has_ability_id() const;
  public:
  void clear_ability_id();
  int32_t ability_id() const;
  void set_ability_id(int32_t value);
  private:
  int32_t _internal_ability_id() const;
  void _internal_set_ability_id(int32_t value);
  public:

  // optional uint32 unit_handle = 3 [default = 4294967295];
  bool has_unit_handle() const;
  private:
  bool _internal_has_unit_handle() const;
  public:
  void clear_unit_handle();
  uint32_t unit_handle() const;
  void set_unit_handle(uint32_t value);
  private:
  uint32_t _internal_unit_handle() const;
  void _internal_set_unit_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBotWorldState.EventAbility)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgBotWorldState_Vector* location_;
    int32_t player_id_;
    bool is_channel_start_;
    int32_t ability_id_;
    uint32_t unit_handle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_EventDamage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBotWorldState.EventDamage) */ {
 public:
  inline CMsgBotWorldState_EventDamage() : CMsgBotWorldState_EventDamage(nullptr) {}
  ~CMsgBotWorldState_EventDamage() override;
  explicit PROTOBUF_CONSTEXPR CMsgBotWorldState_EventDamage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBotWorldState_EventDamage(const CMsgBotWorldState_EventDamage& from);
  CMsgBotWorldState_EventDamage(CMsgBotWorldState_EventDamage&& from) noexcept
    : CMsgBotWorldState_EventDamage() {
    *this = ::std::move(from);
  }

  inline CMsgBotWorldState_EventDamage& operator=(const CMsgBotWorldState_EventDamage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBotWorldState_EventDamage& operator=(CMsgBotWorldState_EventDamage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBotWorldState_EventDamage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBotWorldState_EventDamage* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_EventDamage*>(
               &_CMsgBotWorldState_EventDamage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgBotWorldState_EventDamage& a, CMsgBotWorldState_EventDamage& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBotWorldState_EventDamage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBotWorldState_EventDamage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBotWorldState_EventDamage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBotWorldState_EventDamage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBotWorldState_EventDamage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBotWorldState_EventDamage& from) {
    CMsgBotWorldState_EventDamage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBotWorldState_EventDamage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBotWorldState.EventDamage";
  }
  protected:
  explicit CMsgBotWorldState_EventDamage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDamageFieldNumber = 1,
    kVictimPlayerIdFieldNumber = 2,
    kAttackerPlayerIdFieldNumber = 4,
    kAbilityIdFieldNumber = 6,
    kVictimUnitHandleFieldNumber = 3,
    kAttackerUnitHandleFieldNumber = 5,
  };
  // optional uint32 damage = 1;
  bool has_damage() const;
  private:
  bool _internal_has_damage() const;
  public:
  void clear_damage();
  uint32_t damage() const;
  void set_damage(uint32_t value);
  private:
  uint32_t _internal_damage() const;
  void _internal_set_damage(uint32_t value);
  public:

  // optional int32 victim_player_id = 2;
  bool has_victim_player_id() const;
  private:
  bool _internal_has_victim_player_id() const;
  public:
  void clear_victim_player_id();
  int32_t victim_player_id() const;
  void set_victim_player_id(int32_t value);
  private:
  int32_t _internal_victim_player_id() const;
  void _internal_set_victim_player_id(int32_t value);
  public:

  // optional int32 attacker_player_id = 4;
  bool has_attacker_player_id() const;
  private:
  bool _internal_has_attacker_player_id() const;
  public:
  void clear_attacker_player_id();
  int32_t attacker_player_id() const;
  void set_attacker_player_id(int32_t value);
  private:
  int32_t _internal_attacker_player_id() const;
  void _internal_set_attacker_player_id(int32_t value);
  public:

  // optional int32 ability_id = 6 [default = -1];
  bool has_ability_id() const;
  private:
  bool _internal_has_ability_id() const;
  public:
  void clear_ability_id();
  int32_t ability_id() const;
  void set_ability_id(int32_t value);
  private:
  int32_t _internal_ability_id() const;
  void _internal_set_ability_id(int32_t value);
  public:

  // optional uint32 victim_unit_handle = 3 [default = 4294967295];
  bool has_victim_unit_handle() const;
  private:
  bool _internal_has_victim_unit_handle() const;
  public:
  void clear_victim_unit_handle();
  uint32_t victim_unit_handle() const;
  void set_victim_unit_handle(uint32_t value);
  private:
  uint32_t _internal_victim_unit_handle() const;
  void _internal_set_victim_unit_handle(uint32_t value);
  public:

  // optional uint32 attacker_unit_handle = 5 [default = 4294967295];
  bool has_attacker_unit_handle() const;
  private:
  bool _internal_has_attacker_unit_handle() const;
  public:
  void clear_attacker_unit_handle();
  uint32_t attacker_unit_handle() const;
  void set_attacker_unit_handle(uint32_t value);
  private:
  uint32_t _internal_attacker_unit_handle() const;
  void _internal_set_attacker_unit_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBotWorldState.EventDamage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t damage_;
    int32_t victim_player_id_;
    int32_t attacker_player_id_;
    int32_t ability_id_;
    uint32_t victim_unit_handle_;
    uint32_t attacker_unit_handle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_EventCourierKilled final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBotWorldState.EventCourierKilled) */ {
 public:
  inline CMsgBotWorldState_EventCourierKilled() : CMsgBotWorldState_EventCourierKilled(nullptr) {}
  ~CMsgBotWorldState_EventCourierKilled() override;
  explicit PROTOBUF_CONSTEXPR CMsgBotWorldState_EventCourierKilled(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBotWorldState_EventCourierKilled(const CMsgBotWorldState_EventCourierKilled& from);
  CMsgBotWorldState_EventCourierKilled(CMsgBotWorldState_EventCourierKilled&& from) noexcept
    : CMsgBotWorldState_EventCourierKilled() {
    *this = ::std::move(from);
  }

  inline CMsgBotWorldState_EventCourierKilled& operator=(const CMsgBotWorldState_EventCourierKilled& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBotWorldState_EventCourierKilled& operator=(CMsgBotWorldState_EventCourierKilled&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBotWorldState_EventCourierKilled& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBotWorldState_EventCourierKilled* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_EventCourierKilled*>(
               &_CMsgBotWorldState_EventCourierKilled_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgBotWorldState_EventCourierKilled& a, CMsgBotWorldState_EventCourierKilled& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBotWorldState_EventCourierKilled* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBotWorldState_EventCourierKilled* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBotWorldState_EventCourierKilled* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBotWorldState_EventCourierKilled>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBotWorldState_EventCourierKilled& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBotWorldState_EventCourierKilled& from) {
    CMsgBotWorldState_EventCourierKilled::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBotWorldState_EventCourierKilled* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBotWorldState.EventCourierKilled";
  }
  protected:
  explicit CMsgBotWorldState_EventCourierKilled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamIdFieldNumber = 1,
    kKillerPlayerIdFieldNumber = 3,
    kCourierUnitHandleFieldNumber = 2,
    kKillerUnitHandleFieldNumber = 4,
  };
  // optional uint32 team_id = 1;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional int32 killer_player_id = 3;
  bool has_killer_player_id() const;
  private:
  bool _internal_has_killer_player_id() const;
  public:
  void clear_killer_player_id();
  int32_t killer_player_id() const;
  void set_killer_player_id(int32_t value);
  private:
  int32_t _internal_killer_player_id() const;
  void _internal_set_killer_player_id(int32_t value);
  public:

  // optional uint32 courier_unit_handle = 2 [default = 4294967295];
  bool has_courier_unit_handle() const;
  private:
  bool _internal_has_courier_unit_handle() const;
  public:
  void clear_courier_unit_handle();
  uint32_t courier_unit_handle() const;
  void set_courier_unit_handle(uint32_t value);
  private:
  uint32_t _internal_courier_unit_handle() const;
  void _internal_set_courier_unit_handle(uint32_t value);
  public:

  // optional uint32 killer_unit_handle = 4 [default = 4294967295];
  bool has_killer_unit_handle() const;
  private:
  bool _internal_has_killer_unit_handle() const;
  public:
  void clear_killer_unit_handle();
  uint32_t killer_unit_handle() const;
  void set_killer_unit_handle(uint32_t value);
  private:
  uint32_t _internal_killer_unit_handle() const;
  void _internal_set_killer_unit_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBotWorldState.EventCourierKilled)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t team_id_;
    int32_t killer_player_id_;
    uint32_t courier_unit_handle_;
    uint32_t killer_unit_handle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_EventRoshanKilled final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBotWorldState.EventRoshanKilled) */ {
 public:
  inline CMsgBotWorldState_EventRoshanKilled() : CMsgBotWorldState_EventRoshanKilled(nullptr) {}
  ~CMsgBotWorldState_EventRoshanKilled() override;
  explicit PROTOBUF_CONSTEXPR CMsgBotWorldState_EventRoshanKilled(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBotWorldState_EventRoshanKilled(const CMsgBotWorldState_EventRoshanKilled& from);
  CMsgBotWorldState_EventRoshanKilled(CMsgBotWorldState_EventRoshanKilled&& from) noexcept
    : CMsgBotWorldState_EventRoshanKilled() {
    *this = ::std::move(from);
  }

  inline CMsgBotWorldState_EventRoshanKilled& operator=(const CMsgBotWorldState_EventRoshanKilled& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBotWorldState_EventRoshanKilled& operator=(CMsgBotWorldState_EventRoshanKilled&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBotWorldState_EventRoshanKilled& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBotWorldState_EventRoshanKilled* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_EventRoshanKilled*>(
               &_CMsgBotWorldState_EventRoshanKilled_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMsgBotWorldState_EventRoshanKilled& a, CMsgBotWorldState_EventRoshanKilled& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBotWorldState_EventRoshanKilled* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBotWorldState_EventRoshanKilled* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBotWorldState_EventRoshanKilled* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBotWorldState_EventRoshanKilled>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBotWorldState_EventRoshanKilled& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBotWorldState_EventRoshanKilled& from) {
    CMsgBotWorldState_EventRoshanKilled::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBotWorldState_EventRoshanKilled* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBotWorldState.EventRoshanKilled";
  }
  protected:
  explicit CMsgBotWorldState_EventRoshanKilled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKillerPlayerIdFieldNumber = 1,
    kKillerUnitHandleFieldNumber = 2,
  };
  // optional int32 killer_player_id = 1;
  bool has_killer_player_id() const;
  private:
  bool _internal_has_killer_player_id() const;
  public:
  void clear_killer_player_id();
  int32_t killer_player_id() const;
  void set_killer_player_id(int32_t value);
  private:
  int32_t _internal_killer_player_id() const;
  void _internal_set_killer_player_id(int32_t value);
  public:

  // optional uint32 killer_unit_handle = 2 [default = 4294967295];
  bool has_killer_unit_handle() const;
  private:
  bool _internal_has_killer_unit_handle() const;
  public:
  void clear_killer_unit_handle();
  uint32_t killer_unit_handle() const;
  void set_killer_unit_handle(uint32_t value);
  private:
  uint32_t _internal_killer_unit_handle() const;
  void _internal_set_killer_unit_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBotWorldState.EventRoshanKilled)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t killer_player_id_;
    uint32_t killer_unit_handle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_EventTree final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBotWorldState.EventTree) */ {
 public:
  inline CMsgBotWorldState_EventTree() : CMsgBotWorldState_EventTree(nullptr) {}
  ~CMsgBotWorldState_EventTree() override;
  explicit PROTOBUF_CONSTEXPR CMsgBotWorldState_EventTree(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBotWorldState_EventTree(const CMsgBotWorldState_EventTree& from);
  CMsgBotWorldState_EventTree(CMsgBotWorldState_EventTree&& from) noexcept
    : CMsgBotWorldState_EventTree() {
    *this = ::std::move(from);
  }

  inline CMsgBotWorldState_EventTree& operator=(const CMsgBotWorldState_EventTree& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBotWorldState_EventTree& operator=(CMsgBotWorldState_EventTree&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBotWorldState_EventTree& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBotWorldState_EventTree* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_EventTree*>(
               &_CMsgBotWorldState_EventTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMsgBotWorldState_EventTree& a, CMsgBotWorldState_EventTree& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBotWorldState_EventTree* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBotWorldState_EventTree* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBotWorldState_EventTree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBotWorldState_EventTree>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBotWorldState_EventTree& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBotWorldState_EventTree& from) {
    CMsgBotWorldState_EventTree::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBotWorldState_EventTree* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBotWorldState.EventTree";
  }
  protected:
  explicit CMsgBotWorldState_EventTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 4,
    kTreeIdFieldNumber = 1,
    kDestroyedFieldNumber = 2,
    kRespawnedFieldNumber = 3,
    kDelayedFieldNumber = 5,
  };
  // optional .CMsgBotWorldState.Vector location = 4;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::CMsgBotWorldState_Vector& location() const;
  PROTOBUF_NODISCARD ::CMsgBotWorldState_Vector* release_location();
  ::CMsgBotWorldState_Vector* mutable_location();
  void set_allocated_location(::CMsgBotWorldState_Vector* location);
  private:
  const ::CMsgBotWorldState_Vector& _internal_location() const;
  ::CMsgBotWorldState_Vector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::CMsgBotWorldState_Vector* location);
  ::CMsgBotWorldState_Vector* unsafe_arena_release_location();

  // optional uint32 tree_id = 1;
  bool has_tree_id() const;
  private:
  bool _internal_has_tree_id() const;
  public:
  void clear_tree_id();
  uint32_t tree_id() const;
  void set_tree_id(uint32_t value);
  private:
  uint32_t _internal_tree_id() const;
  void _internal_set_tree_id(uint32_t value);
  public:

  // optional bool destroyed = 2;
  bool has_destroyed() const;
  private:
  bool _internal_has_destroyed() const;
  public:
  void clear_destroyed();
  bool destroyed() const;
  void set_destroyed(bool value);
  private:
  bool _internal_destroyed() const;
  void _internal_set_destroyed(bool value);
  public:

  // optional bool respawned = 3;
  bool has_respawned() const;
  private:
  bool _internal_has_respawned() const;
  public:
  void clear_respawned();
  bool respawned() const;
  void set_respawned(bool value);
  private:
  bool _internal_respawned() const;
  void _internal_set_respawned(bool value);
  public:

  // optional bool delayed = 5;
  bool has_delayed() const;
  private:
  bool _internal_has_delayed() const;
  public:
  void clear_delayed();
  bool delayed() const;
  void set_delayed(bool value);
  private:
  bool _internal_delayed() const;
  void _internal_set_delayed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBotWorldState.EventTree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgBotWorldState_Vector* location_;
    uint32_t tree_id_;
    bool destroyed_;
    bool respawned_;
    bool delayed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_Unit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBotWorldState.Unit) */ {
 public:
  inline CMsgBotWorldState_Unit() : CMsgBotWorldState_Unit(nullptr) {}
  ~CMsgBotWorldState_Unit() override;
  explicit PROTOBUF_CONSTEXPR CMsgBotWorldState_Unit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBotWorldState_Unit(const CMsgBotWorldState_Unit& from);
  CMsgBotWorldState_Unit(CMsgBotWorldState_Unit&& from) noexcept
    : CMsgBotWorldState_Unit() {
    *this = ::std::move(from);
  }

  inline CMsgBotWorldState_Unit& operator=(const CMsgBotWorldState_Unit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBotWorldState_Unit& operator=(CMsgBotWorldState_Unit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBotWorldState_Unit& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBotWorldState_Unit* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_Unit*>(
               &_CMsgBotWorldState_Unit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMsgBotWorldState_Unit& a, CMsgBotWorldState_Unit& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBotWorldState_Unit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBotWorldState_Unit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBotWorldState_Unit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBotWorldState_Unit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBotWorldState_Unit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBotWorldState_Unit& from) {
    CMsgBotWorldState_Unit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBotWorldState_Unit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBotWorldState.Unit";
  }
  protected:
  explicit CMsgBotWorldState_Unit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbilitiesFieldNumber = 90,
    kItemsFieldNumber = 91,
    kModifiersFieldNumber = 92,
    kIncomingTrackingProjectilesFieldNumber = 93,
    kNameFieldNumber = 3,
    kAttackTargetNameFieldNumber = 52,
    kAbilityTargetNameFieldNumber = 103,
    kLocationFieldNumber = 6,
    kHandleFieldNumber = 1,
    kUnitTypeFieldNumber = 2,
    kTeamIdFieldNumber = 4,
    kLevelFieldNumber = 5,
    kPlayerIdFieldNumber = 8,
    kBoundingRadiusFieldNumber = 10,
    kFacingFieldNumber = 11,
    kGroundHeightFieldNumber = 12,
    kVisionRangeDaytimeFieldNumber = 15,
    kVisionRangeNighttimeFieldNumber = 16,
    kHealthFieldNumber = 20,
    kHealthMaxFieldNumber = 21,
    kHealthRegenFieldNumber = 22,
    kManaFieldNumber = 25,
    kManaMaxFieldNumber = 26,
    kManaRegenFieldNumber = 27,
    kBaseMovementSpeedFieldNumber = 30,
    kCurrentMovementSpeedFieldNumber = 31,
    kAnimActivityFieldNumber = 35,
    kAnimCycleFieldNumber = 36,
    kBaseDamageFieldNumber = 40,
    kBaseDamageVarianceFieldNumber = 41,
    kBonusDamageFieldNumber = 42,
    kAttackDamageFieldNumber = 43,
    kAttackRangeFieldNumber = 44,
    kAttackSpeedFieldNumber = 45,
    kAttackAnimPointFieldNumber = 46,
    kAttackAcquisitionRangeFieldNumber = 47,
    kAttackProjectileSpeedFieldNumber = 48,
    kIsAliveFieldNumber = 7,
    kIsChannelingFieldNumber = 65,
    kIsAttackImmuneFieldNumber = 70,
    kIsBlindFieldNumber = 71,
    kBountyXpFieldNumber = 60,
    kBountyGoldMinFieldNumber = 61,
    kBountyGoldMaxFieldNumber = 62,
    kIsBlockDisabledFieldNumber = 72,
    kIsDisarmedFieldNumber = 73,
    kIsDominatedFieldNumber = 74,
    kIsEvadeDisabledFieldNumber = 75,
    kIsHexedFieldNumber = 76,
    kIsInvisibleFieldNumber = 77,
    kIsInvulnerableFieldNumber = 78,
    kIsMagicImmuneFieldNumber = 79,
    kIsMutedFieldNumber = 80,
    kIsNightmaredFieldNumber = 82,
    kIsRootedFieldNumber = 83,
    kIsSilencedFieldNumber = 84,
    kIsSpeciallyDeniableFieldNumber = 85,
    kIsStunnedFieldNumber = 86,
    kIsUnableToMissFieldNumber = 87,
    kHasScepterFieldNumber = 88,
    kActionTypeFieldNumber = 100,
    kPrimaryAttributeFieldNumber = 110,
    kIsSpeciallyUndeniableFieldNumber = 94,
    kIsUsingAbilityFieldNumber = 102,
    kIsIllusionFieldNumber = 111,
    kFlyingCourierFieldNumber = 140,
    kRespawnTimeFieldNumber = 112,
    kBuybackCostFieldNumber = 113,
    kBuybackCooldownFieldNumber = 114,
    kSpellAmplificationFieldNumber = 115,
    kArmorFieldNumber = 116,
    kMagicResistFieldNumber = 117,
    kEvasionFieldNumber = 118,
    kXpNeededToLevelFieldNumber = 120,
    kAbilityPointsFieldNumber = 121,
    kLastHitsFieldNumber = 124,
    kDeniesFieldNumber = 125,
    kNetWorthFieldNumber = 126,
    kStrengthFieldNumber = 127,
    kAgilityFieldNumber = 128,
    kIntelligenceFieldNumber = 129,
    kRemainingLifespanFieldNumber = 130,
    kShrineCooldownFieldNumber = 150,
    kIsShrineHealingFieldNumber = 151,
    kUnreliableGoldFieldNumber = 123,
    kAttackTargetHandleFieldNumber = 49,
    kAttacksPerSecondFieldNumber = 50,
    kLastAttackTimeFieldNumber = 51,
    kActiveAbilityHandleFieldNumber = 66,
    kAbilityTargetHandleFieldNumber = 101,
    kReliableGoldFieldNumber = 122,
  };
  // repeated .CMsgBotWorldState.Ability abilities = 90 [(.map_field) = true];
  int abilities_size() const;
  private:
  int _internal_abilities_size() const;
  public:
  void clear_abilities();
  ::CMsgBotWorldState_Ability* mutable_abilities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Ability >*
      mutable_abilities();
  private:
  const ::CMsgBotWorldState_Ability& _internal_abilities(int index) const;
  ::CMsgBotWorldState_Ability* _internal_add_abilities();
  public:
  const ::CMsgBotWorldState_Ability& abilities(int index) const;
  ::CMsgBotWorldState_Ability* add_abilities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Ability >&
      abilities() const;

  // repeated .CMsgBotWorldState.Ability items = 91 [(.map_field) = true];
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::CMsgBotWorldState_Ability* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Ability >*
      mutable_items();
  private:
  const ::CMsgBotWorldState_Ability& _internal_items(int index) const;
  ::CMsgBotWorldState_Ability* _internal_add_items();
  public:
  const ::CMsgBotWorldState_Ability& items(int index) const;
  ::CMsgBotWorldState_Ability* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Ability >&
      items() const;

  // repeated .CMsgBotWorldState.Modifier modifiers = 92 [(.map_field) = true];
  int modifiers_size() const;
  private:
  int _internal_modifiers_size() const;
  public:
  void clear_modifiers();
  ::CMsgBotWorldState_Modifier* mutable_modifiers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Modifier >*
      mutable_modifiers();
  private:
  const ::CMsgBotWorldState_Modifier& _internal_modifiers(int index) const;
  ::CMsgBotWorldState_Modifier* _internal_add_modifiers();
  public:
  const ::CMsgBotWorldState_Modifier& modifiers(int index) const;
  ::CMsgBotWorldState_Modifier* add_modifiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Modifier >&
      modifiers() const;

  // repeated .CMsgBotWorldState.TrackingProjectile incoming_tracking_projectiles = 93 [(.map_field) = true];
  int incoming_tracking_projectiles_size() const;
  private:
  int _internal_incoming_tracking_projectiles_size() const;
  public:
  void clear_incoming_tracking_projectiles();
  ::CMsgBotWorldState_TrackingProjectile* mutable_incoming_tracking_projectiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_TrackingProjectile >*
      mutable_incoming_tracking_projectiles();
  private:
  const ::CMsgBotWorldState_TrackingProjectile& _internal_incoming_tracking_projectiles(int index) const;
  ::CMsgBotWorldState_TrackingProjectile* _internal_add_incoming_tracking_projectiles();
  public:
  const ::CMsgBotWorldState_TrackingProjectile& incoming_tracking_projectiles(int index) const;
  ::CMsgBotWorldState_TrackingProjectile* add_incoming_tracking_projectiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_TrackingProjectile >&
      incoming_tracking_projectiles() const;

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string attack_target_name = 52;
  bool has_attack_target_name() const;
  private:
  bool _internal_has_attack_target_name() const;
  public:
  void clear_attack_target_name();
  const std::string& attack_target_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attack_target_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attack_target_name();
  PROTOBUF_NODISCARD std::string* release_attack_target_name();
  void set_allocated_attack_target_name(std::string* attack_target_name);
  private:
  const std::string& _internal_attack_target_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attack_target_name(const std::string& value);
  std::string* _internal_mutable_attack_target_name();
  public:

  // optional string ability_target_name = 103;
  bool has_ability_target_name() const;
  private:
  bool _internal_has_ability_target_name() const;
  public:
  void clear_ability_target_name();
  const std::string& ability_target_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ability_target_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ability_target_name();
  PROTOBUF_NODISCARD std::string* release_ability_target_name();
  void set_allocated_ability_target_name(std::string* ability_target_name);
  private:
  const std::string& _internal_ability_target_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ability_target_name(const std::string& value);
  std::string* _internal_mutable_ability_target_name();
  public:

  // optional .CMsgBotWorldState.Vector location = 6;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::CMsgBotWorldState_Vector& location() const;
  PROTOBUF_NODISCARD ::CMsgBotWorldState_Vector* release_location();
  ::CMsgBotWorldState_Vector* mutable_location();
  void set_allocated_location(::CMsgBotWorldState_Vector* location);
  private:
  const ::CMsgBotWorldState_Vector& _internal_location() const;
  ::CMsgBotWorldState_Vector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::CMsgBotWorldState_Vector* location);
  ::CMsgBotWorldState_Vector* unsafe_arena_release_location();

  // optional uint32 handle = 1 [(.map_key) = true];
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  uint32_t handle() const;
  void set_handle(uint32_t value);
  private:
  uint32_t _internal_handle() const;
  void _internal_set_handle(uint32_t value);
  public:

  // optional .CMsgBotWorldState.UnitType unit_type = 2 [default = INVALID];
  bool has_unit_type() const;
  private:
  bool _internal_has_unit_type() const;
  public:
  void clear_unit_type();
  ::CMsgBotWorldState_UnitType unit_type() const;
  void set_unit_type(::CMsgBotWorldState_UnitType value);
  private:
  ::CMsgBotWorldState_UnitType _internal_unit_type() const;
  void _internal_set_unit_type(::CMsgBotWorldState_UnitType value);
  public:

  // optional uint32 team_id = 4;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional uint32 level = 5;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // optional int32 player_id = 8;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // optional int32 bounding_radius = 10;
  bool has_bounding_radius() const;
  private:
  bool _internal_has_bounding_radius() const;
  public:
  void clear_bounding_radius();
  int32_t bounding_radius() const;
  void set_bounding_radius(int32_t value);
  private:
  int32_t _internal_bounding_radius() const;
  void _internal_set_bounding_radius(int32_t value);
  public:

  // optional int32 facing = 11;
  bool has_facing() const;
  private:
  bool _internal_has_facing() const;
  public:
  void clear_facing();
  int32_t facing() const;
  void set_facing(int32_t value);
  private:
  int32_t _internal_facing() const;
  void _internal_set_facing(int32_t value);
  public:

  // optional uint32 ground_height = 12;
  bool has_ground_height() const;
  private:
  bool _internal_has_ground_height() const;
  public:
  void clear_ground_height();
  uint32_t ground_height() const;
  void set_ground_height(uint32_t value);
  private:
  uint32_t _internal_ground_height() const;
  void _internal_set_ground_height(uint32_t value);
  public:

  // optional uint32 vision_range_daytime = 15;
  bool has_vision_range_daytime() const;
  private:
  bool _internal_has_vision_range_daytime() const;
  public:
  void clear_vision_range_daytime();
  uint32_t vision_range_daytime() const;
  void set_vision_range_daytime(uint32_t value);
  private:
  uint32_t _internal_vision_range_daytime() const;
  void _internal_set_vision_range_daytime(uint32_t value);
  public:

  // optional uint32 vision_range_nighttime = 16;
  bool has_vision_range_nighttime() const;
  private:
  bool _internal_has_vision_range_nighttime() const;
  public:
  void clear_vision_range_nighttime();
  uint32_t vision_range_nighttime() const;
  void set_vision_range_nighttime(uint32_t value);
  private:
  uint32_t _internal_vision_range_nighttime() const;
  void _internal_set_vision_range_nighttime(uint32_t value);
  public:

  // optional int32 health = 20;
  bool has_health() const;
  private:
  bool _internal_has_health() const;
  public:
  void clear_health();
  int32_t health() const;
  void set_health(int32_t value);
  private:
  int32_t _internal_health() const;
  void _internal_set_health(int32_t value);
  public:

  // optional int32 health_max = 21;
  bool has_health_max() const;
  private:
  bool _internal_has_health_max() const;
  public:
  void clear_health_max();
  int32_t health_max() const;
  void set_health_max(int32_t value);
  private:
  int32_t _internal_health_max() const;
  void _internal_set_health_max(int32_t value);
  public:

  // optional float health_regen = 22;
  bool has_health_regen() const;
  private:
  bool _internal_has_health_regen() const;
  public:
  void clear_health_regen();
  float health_regen() const;
  void set_health_regen(float value);
  private:
  float _internal_health_regen() const;
  void _internal_set_health_regen(float value);
  public:

  // optional int32 mana = 25;
  bool has_mana() const;
  private:
  bool _internal_has_mana() const;
  public:
  void clear_mana();
  int32_t mana() const;
  void set_mana(int32_t value);
  private:
  int32_t _internal_mana() const;
  void _internal_set_mana(int32_t value);
  public:

  // optional int32 mana_max = 26;
  bool has_mana_max() const;
  private:
  bool _internal_has_mana_max() const;
  public:
  void clear_mana_max();
  int32_t mana_max() const;
  void set_mana_max(int32_t value);
  private:
  int32_t _internal_mana_max() const;
  void _internal_set_mana_max(int32_t value);
  public:

  // optional float mana_regen = 27;
  bool has_mana_regen() const;
  private:
  bool _internal_has_mana_regen() const;
  public:
  void clear_mana_regen();
  float mana_regen() const;
  void set_mana_regen(float value);
  private:
  float _internal_mana_regen() const;
  void _internal_set_mana_regen(float value);
  public:

  // optional int32 base_movement_speed = 30;
  bool has_base_movement_speed() const;
  private:
  bool _internal_has_base_movement_speed() const;
  public:
  void clear_base_movement_speed();
  int32_t base_movement_speed() const;
  void set_base_movement_speed(int32_t value);
  private:
  int32_t _internal_base_movement_speed() const;
  void _internal_set_base_movement_speed(int32_t value);
  public:

  // optional int32 current_movement_speed = 31;
  bool has_current_movement_speed() const;
  private:
  bool _internal_has_current_movement_speed() const;
  public:
  void clear_current_movement_speed();
  int32_t current_movement_speed() const;
  void set_current_movement_speed(int32_t value);
  private:
  int32_t _internal_current_movement_speed() const;
  void _internal_set_current_movement_speed(int32_t value);
  public:

  // optional int32 anim_activity = 35;
  bool has_anim_activity() const;
  private:
  bool _internal_has_anim_activity() const;
  public:
  void clear_anim_activity();
  int32_t anim_activity() const;
  void set_anim_activity(int32_t value);
  private:
  int32_t _internal_anim_activity() const;
  void _internal_set_anim_activity(int32_t value);
  public:

  // optional float anim_cycle = 36;
  bool has_anim_cycle() const;
  private:
  bool _internal_has_anim_cycle() const;
  public:
  void clear_anim_cycle();
  float anim_cycle() const;
  void set_anim_cycle(float value);
  private:
  float _internal_anim_cycle() const;
  void _internal_set_anim_cycle(float value);
  public:

  // optional int32 base_damage = 40;
  bool has_base_damage() const;
  private:
  bool _internal_has_base_damage() const;
  public:
  void clear_base_damage();
  int32_t base_damage() const;
  void set_base_damage(int32_t value);
  private:
  int32_t _internal_base_damage() const;
  void _internal_set_base_damage(int32_t value);
  public:

  // optional int32 base_damage_variance = 41;
  bool has_base_damage_variance() const;
  private:
  bool _internal_has_base_damage_variance() const;
  public:
  void clear_base_damage_variance();
  int32_t base_damage_variance() const;
  void set_base_damage_variance(int32_t value);
  private:
  int32_t _internal_base_damage_variance() const;
  void _internal_set_base_damage_variance(int32_t value);
  public:

  // optional int32 bonus_damage = 42;
  bool has_bonus_damage() const;
  private:
  bool _internal_has_bonus_damage() const;
  public:
  void clear_bonus_damage();
  int32_t bonus_damage() const;
  void set_bonus_damage(int32_t value);
  private:
  int32_t _internal_bonus_damage() const;
  void _internal_set_bonus_damage(int32_t value);
  public:

  // optional int32 attack_damage = 43;
  bool has_attack_damage() const;
  private:
  bool _internal_has_attack_damage() const;
  public:
  void clear_attack_damage();
  int32_t attack_damage() const;
  void set_attack_damage(int32_t value);
  private:
  int32_t _internal_attack_damage() const;
  void _internal_set_attack_damage(int32_t value);
  public:

  // optional int32 attack_range = 44;
  bool has_attack_range() const;
  private:
  bool _internal_has_attack_range() const;
  public:
  void clear_attack_range();
  int32_t attack_range() const;
  void set_attack_range(int32_t value);
  private:
  int32_t _internal_attack_range() const;
  void _internal_set_attack_range(int32_t value);
  public:

  // optional float attack_speed = 45;
  bool has_attack_speed() const;
  private:
  bool _internal_has_attack_speed() const;
  public:
  void clear_attack_speed();
  float attack_speed() const;
  void set_attack_speed(float value);
  private:
  float _internal_attack_speed() const;
  void _internal_set_attack_speed(float value);
  public:

  // optional float attack_anim_point = 46;
  bool has_attack_anim_point() const;
  private:
  bool _internal_has_attack_anim_point() const;
  public:
  void clear_attack_anim_point();
  float attack_anim_point() const;
  void set_attack_anim_point(float value);
  private:
  float _internal_attack_anim_point() const;
  void _internal_set_attack_anim_point(float value);
  public:

  // optional int32 attack_acquisition_range = 47;
  bool has_attack_acquisition_range() const;
  private:
  bool _internal_has_attack_acquisition_range() const;
  public:
  void clear_attack_acquisition_range();
  int32_t attack_acquisition_range() const;
  void set_attack_acquisition_range(int32_t value);
  private:
  int32_t _internal_attack_acquisition_range() const;
  void _internal_set_attack_acquisition_range(int32_t value);
  public:

  // optional int32 attack_projectile_speed = 48;
  bool has_attack_projectile_speed() const;
  private:
  bool _internal_has_attack_projectile_speed() const;
  public:
  void clear_attack_projectile_speed();
  int32_t attack_projectile_speed() const;
  void set_attack_projectile_speed(int32_t value);
  private:
  int32_t _internal_attack_projectile_speed() const;
  void _internal_set_attack_projectile_speed(int32_t value);
  public:

  // optional bool is_alive = 7;
  bool has_is_alive() const;
  private:
  bool _internal_has_is_alive() const;
  public:
  void clear_is_alive();
  bool is_alive() const;
  void set_is_alive(bool value);
  private:
  bool _internal_is_alive() const;
  void _internal_set_is_alive(bool value);
  public:

  // optional bool is_channeling = 65;
  bool has_is_channeling() const;
  private:
  bool _internal_has_is_channeling() const;
  public:
  void clear_is_channeling();
  bool is_channeling() const;
  void set_is_channeling(bool value);
  private:
  bool _internal_is_channeling() const;
  void _internal_set_is_channeling(bool value);
  public:

  // optional bool is_attack_immune = 70;
  bool has_is_attack_immune() const;
  private:
  bool _internal_has_is_attack_immune() const;
  public:
  void clear_is_attack_immune();
  bool is_attack_immune() const;
  void set_is_attack_immune(bool value);
  private:
  bool _internal_is_attack_immune() const;
  void _internal_set_is_attack_immune(bool value);
  public:

  // optional bool is_blind = 71;
  bool has_is_blind() const;
  private:
  bool _internal_has_is_blind() const;
  public:
  void clear_is_blind();
  bool is_blind() const;
  void set_is_blind(bool value);
  private:
  bool _internal_is_blind() const;
  void _internal_set_is_blind(bool value);
  public:

  // optional uint32 bounty_xp = 60;
  bool has_bounty_xp() const;
  private:
  bool _internal_has_bounty_xp() const;
  public:
  void clear_bounty_xp();
  uint32_t bounty_xp() const;
  void set_bounty_xp(uint32_t value);
  private:
  uint32_t _internal_bounty_xp() const;
  void _internal_set_bounty_xp(uint32_t value);
  public:

  // optional uint32 bounty_gold_min = 61;
  bool has_bounty_gold_min() const;
  private:
  bool _internal_has_bounty_gold_min() const;
  public:
  void clear_bounty_gold_min();
  uint32_t bounty_gold_min() const;
  void set_bounty_gold_min(uint32_t value);
  private:
  uint32_t _internal_bounty_gold_min() const;
  void _internal_set_bounty_gold_min(uint32_t value);
  public:

  // optional uint32 bounty_gold_max = 62;
  bool has_bounty_gold_max() const;
  private:
  bool _internal_has_bounty_gold_max() const;
  public:
  void clear_bounty_gold_max();
  uint32_t bounty_gold_max() const;
  void set_bounty_gold_max(uint32_t value);
  private:
  uint32_t _internal_bounty_gold_max() const;
  void _internal_set_bounty_gold_max(uint32_t value);
  public:

  // optional bool is_block_disabled = 72;
  bool has_is_block_disabled() const;
  private:
  bool _internal_has_is_block_disabled() const;
  public:
  void clear_is_block_disabled();
  bool is_block_disabled() const;
  void set_is_block_disabled(bool value);
  private:
  bool _internal_is_block_disabled() const;
  void _internal_set_is_block_disabled(bool value);
  public:

  // optional bool is_disarmed = 73;
  bool has_is_disarmed() const;
  private:
  bool _internal_has_is_disarmed() const;
  public:
  void clear_is_disarmed();
  bool is_disarmed() const;
  void set_is_disarmed(bool value);
  private:
  bool _internal_is_disarmed() const;
  void _internal_set_is_disarmed(bool value);
  public:

  // optional bool is_dominated = 74;
  bool has_is_dominated() const;
  private:
  bool _internal_has_is_dominated() const;
  public:
  void clear_is_dominated();
  bool is_dominated() const;
  void set_is_dominated(bool value);
  private:
  bool _internal_is_dominated() const;
  void _internal_set_is_dominated(bool value);
  public:

  // optional bool is_evade_disabled = 75;
  bool has_is_evade_disabled() const;
  private:
  bool _internal_has_is_evade_disabled() const;
  public:
  void clear_is_evade_disabled();
  bool is_evade_disabled() const;
  void set_is_evade_disabled(bool value);
  private:
  bool _internal_is_evade_disabled() const;
  void _internal_set_is_evade_disabled(bool value);
  public:

  // optional bool is_hexed = 76;
  bool has_is_hexed() const;
  private:
  bool _internal_has_is_hexed() const;
  public:
  void clear_is_hexed();
  bool is_hexed() const;
  void set_is_hexed(bool value);
  private:
  bool _internal_is_hexed() const;
  void _internal_set_is_hexed(bool value);
  public:

  // optional bool is_invisible = 77;
  bool has_is_invisible() const;
  private:
  bool _internal_has_is_invisible() const;
  public:
  void clear_is_invisible();
  bool is_invisible() const;
  void set_is_invisible(bool value);
  private:
  bool _internal_is_invisible() const;
  void _internal_set_is_invisible(bool value);
  public:

  // optional bool is_invulnerable = 78;
  bool has_is_invulnerable() const;
  private:
  bool _internal_has_is_invulnerable() const;
  public:
  void clear_is_invulnerable();
  bool is_invulnerable() const;
  void set_is_invulnerable(bool value);
  private:
  bool _internal_is_invulnerable() const;
  void _internal_set_is_invulnerable(bool value);
  public:

  // optional bool is_magic_immune = 79;
  bool has_is_magic_immune() const;
  private:
  bool _internal_has_is_magic_immune() const;
  public:
  void clear_is_magic_immune();
  bool is_magic_immune() const;
  void set_is_magic_immune(bool value);
  private:
  bool _internal_is_magic_immune() const;
  void _internal_set_is_magic_immune(bool value);
  public:

  // optional bool is_muted = 80;
  bool has_is_muted() const;
  private:
  bool _internal_has_is_muted() const;
  public:
  void clear_is_muted();
  bool is_muted() const;
  void set_is_muted(bool value);
  private:
  bool _internal_is_muted() const;
  void _internal_set_is_muted(bool value);
  public:

  // optional bool is_nightmared = 82;
  bool has_is_nightmared() const;
  private:
  bool _internal_has_is_nightmared() const;
  public:
  void clear_is_nightmared();
  bool is_nightmared() const;
  void set_is_nightmared(bool value);
  private:
  bool _internal_is_nightmared() const;
  void _internal_set_is_nightmared(bool value);
  public:

  // optional bool is_rooted = 83;
  bool has_is_rooted() const;
  private:
  bool _internal_has_is_rooted() const;
  public:
  void clear_is_rooted();
  bool is_rooted() const;
  void set_is_rooted(bool value);
  private:
  bool _internal_is_rooted() const;
  void _internal_set_is_rooted(bool value);
  public:

  // optional bool is_silenced = 84;
  bool has_is_silenced() const;
  private:
  bool _internal_has_is_silenced() const;
  public:
  void clear_is_silenced();
  bool is_silenced() const;
  void set_is_silenced(bool value);
  private:
  bool _internal_is_silenced() const;
  void _internal_set_is_silenced(bool value);
  public:

  // optional bool is_specially_deniable = 85;
  bool has_is_specially_deniable() const;
  private:
  bool _internal_has_is_specially_deniable() const;
  public:
  void clear_is_specially_deniable();
  bool is_specially_deniable() const;
  void set_is_specially_deniable(bool value);
  private:
  bool _internal_is_specially_deniable() const;
  void _internal_set_is_specially_deniable(bool value);
  public:

  // optional bool is_stunned = 86;
  bool has_is_stunned() const;
  private:
  bool _internal_has_is_stunned() const;
  public:
  void clear_is_stunned();
  bool is_stunned() const;
  void set_is_stunned(bool value);
  private:
  bool _internal_is_stunned() const;
  void _internal_set_is_stunned(bool value);
  public:

  // optional bool is_unable_to_miss = 87;
  bool has_is_unable_to_miss() const;
  private:
  bool _internal_has_is_unable_to_miss() const;
  public:
  void clear_is_unable_to_miss();
  bool is_unable_to_miss() const;
  void set_is_unable_to_miss(bool value);
  private:
  bool _internal_is_unable_to_miss() const;
  void _internal_set_is_unable_to_miss(bool value);
  public:

  // optional bool has_scepter = 88;
  bool has_has_scepter() const;
  private:
  bool _internal_has_has_scepter() const;
  public:
  void clear_has_scepter();
  bool has_scepter() const;
  void set_has_scepter(bool value);
  private:
  bool _internal_has_scepter() const;
  void _internal_set_has_scepter(bool value);
  public:

  // optional uint32 action_type = 100;
  bool has_action_type() const;
  private:
  bool _internal_has_action_type() const;
  public:
  void clear_action_type();
  uint32_t action_type() const;
  void set_action_type(uint32_t value);
  private:
  uint32_t _internal_action_type() const;
  void _internal_set_action_type(uint32_t value);
  public:

  // optional uint32 primary_attribute = 110;
  bool has_primary_attribute() const;
  private:
  bool _internal_has_primary_attribute() const;
  public:
  void clear_primary_attribute();
  uint32_t primary_attribute() const;
  void set_primary_attribute(uint32_t value);
  private:
  uint32_t _internal_primary_attribute() const;
  void _internal_set_primary_attribute(uint32_t value);
  public:

  // optional bool is_specially_undeniable = 94;
  bool has_is_specially_undeniable() const;
  private:
  bool _internal_has_is_specially_undeniable() const;
  public:
  void clear_is_specially_undeniable();
  bool is_specially_undeniable() const;
  void set_is_specially_undeniable(bool value);
  private:
  bool _internal_is_specially_undeniable() const;
  void _internal_set_is_specially_undeniable(bool value);
  public:

  // optional bool is_using_ability = 102;
  bool has_is_using_ability() const;
  private:
  bool _internal_has_is_using_ability() const;
  public:
  void clear_is_using_ability();
  bool is_using_ability() const;
  void set_is_using_ability(bool value);
  private:
  bool _internal_is_using_ability() const;
  void _internal_set_is_using_ability(bool value);
  public:

  // optional bool is_illusion = 111;
  bool has_is_illusion() const;
  private:
  bool _internal_has_is_illusion() const;
  public:
  void clear_is_illusion();
  bool is_illusion() const;
  void set_is_illusion(bool value);
  private:
  bool _internal_is_illusion() const;
  void _internal_set_is_illusion(bool value);
  public:

  // optional bool flying_courier = 140;
  bool has_flying_courier() const;
  private:
  bool _internal_has_flying_courier() const;
  public:
  void clear_flying_courier();
  bool flying_courier() const;
  void set_flying_courier(bool value);
  private:
  bool _internal_flying_courier() const;
  void _internal_set_flying_courier(bool value);
  public:

  // optional float respawn_time = 112;
  bool has_respawn_time() const;
  private:
  bool _internal_has_respawn_time() const;
  public:
  void clear_respawn_time();
  float respawn_time() const;
  void set_respawn_time(float value);
  private:
  float _internal_respawn_time() const;
  void _internal_set_respawn_time(float value);
  public:

  // optional uint32 buyback_cost = 113;
  bool has_buyback_cost() const;
  private:
  bool _internal_has_buyback_cost() const;
  public:
  void clear_buyback_cost();
  uint32_t buyback_cost() const;
  void set_buyback_cost(uint32_t value);
  private:
  uint32_t _internal_buyback_cost() const;
  void _internal_set_buyback_cost(uint32_t value);
  public:

  // optional float buyback_cooldown = 114;
  bool has_buyback_cooldown() const;
  private:
  bool _internal_has_buyback_cooldown() const;
  public:
  void clear_buyback_cooldown();
  float buyback_cooldown() const;
  void set_buyback_cooldown(float value);
  private:
  float _internal_buyback_cooldown() const;
  void _internal_set_buyback_cooldown(float value);
  public:

  // optional float spell_amplification = 115;
  bool has_spell_amplification() const;
  private:
  bool _internal_has_spell_amplification() const;
  public:
  void clear_spell_amplification();
  float spell_amplification() const;
  void set_spell_amplification(float value);
  private:
  float _internal_spell_amplification() const;
  void _internal_set_spell_amplification(float value);
  public:

  // optional float armor = 116;
  bool has_armor() const;
  private:
  bool _internal_has_armor() const;
  public:
  void clear_armor();
  float armor() const;
  void set_armor(float value);
  private:
  float _internal_armor() const;
  void _internal_set_armor(float value);
  public:

  // optional float magic_resist = 117;
  bool has_magic_resist() const;
  private:
  bool _internal_has_magic_resist() const;
  public:
  void clear_magic_resist();
  float magic_resist() const;
  void set_magic_resist(float value);
  private:
  float _internal_magic_resist() const;
  void _internal_set_magic_resist(float value);
  public:

  // optional float evasion = 118;
  bool has_evasion() const;
  private:
  bool _internal_has_evasion() const;
  public:
  void clear_evasion();
  float evasion() const;
  void set_evasion(float value);
  private:
  float _internal_evasion() const;
  void _internal_set_evasion(float value);
  public:

  // optional uint32 xp_needed_to_level = 120;
  bool has_xp_needed_to_level() const;
  private:
  bool _internal_has_xp_needed_to_level() const;
  public:
  void clear_xp_needed_to_level();
  uint32_t xp_needed_to_level() const;
  void set_xp_needed_to_level(uint32_t value);
  private:
  uint32_t _internal_xp_needed_to_level() const;
  void _internal_set_xp_needed_to_level(uint32_t value);
  public:

  // optional uint32 ability_points = 121;
  bool has_ability_points() const;
  private:
  bool _internal_has_ability_points() const;
  public:
  void clear_ability_points();
  uint32_t ability_points() const;
  void set_ability_points(uint32_t value);
  private:
  uint32_t _internal_ability_points() const;
  void _internal_set_ability_points(uint32_t value);
  public:

  // optional uint32 last_hits = 124;
  bool has_last_hits() const;
  private:
  bool _internal_has_last_hits() const;
  public:
  void clear_last_hits();
  uint32_t last_hits() const;
  void set_last_hits(uint32_t value);
  private:
  uint32_t _internal_last_hits() const;
  void _internal_set_last_hits(uint32_t value);
  public:

  // optional uint32 denies = 125;
  bool has_denies() const;
  private:
  bool _internal_has_denies() const;
  public:
  void clear_denies();
  uint32_t denies() const;
  void set_denies(uint32_t value);
  private:
  uint32_t _internal_denies() const;
  void _internal_set_denies(uint32_t value);
  public:

  // optional uint32 net_worth = 126;
  bool has_net_worth() const;
  private:
  bool _internal_has_net_worth() const;
  public:
  void clear_net_worth();
  uint32_t net_worth() const;
  void set_net_worth(uint32_t value);
  private:
  uint32_t _internal_net_worth() const;
  void _internal_set_net_worth(uint32_t value);
  public:

  // optional uint32 strength = 127;
  bool has_strength() const;
  private:
  bool _internal_has_strength() const;
  public:
  void clear_strength();
  uint32_t strength() const;
  void set_strength(uint32_t value);
  private:
  uint32_t _internal_strength() const;
  void _internal_set_strength(uint32_t value);
  public:

  // optional uint32 agility = 128;
  bool has_agility() const;
  private:
  bool _internal_has_agility() const;
  public:
  void clear_agility();
  uint32_t agility() const;
  void set_agility(uint32_t value);
  private:
  uint32_t _internal_agility() const;
  void _internal_set_agility(uint32_t value);
  public:

  // optional uint32 intelligence = 129;
  bool has_intelligence() const;
  private:
  bool _internal_has_intelligence() const;
  public:
  void clear_intelligence();
  uint32_t intelligence() const;
  void set_intelligence(uint32_t value);
  private:
  uint32_t _internal_intelligence() const;
  void _internal_set_intelligence(uint32_t value);
  public:

  // optional float remaining_lifespan = 130;
  bool has_remaining_lifespan() const;
  private:
  bool _internal_has_remaining_lifespan() const;
  public:
  void clear_remaining_lifespan();
  float remaining_lifespan() const;
  void set_remaining_lifespan(float value);
  private:
  float _internal_remaining_lifespan() const;
  void _internal_set_remaining_lifespan(float value);
  public:

  // optional float shrine_cooldown = 150;
  bool has_shrine_cooldown() const;
  private:
  bool _internal_has_shrine_cooldown() const;
  public:
  void clear_shrine_cooldown();
  float shrine_cooldown() const;
  void set_shrine_cooldown(float value);
  private:
  float _internal_shrine_cooldown() const;
  void _internal_set_shrine_cooldown(float value);
  public:

  // optional bool is_shrine_healing = 151;
  bool has_is_shrine_healing() const;
  private:
  bool _internal_has_is_shrine_healing() const;
  public:
  void clear_is_shrine_healing();
  bool is_shrine_healing() const;
  void set_is_shrine_healing(bool value);
  private:
  bool _internal_is_shrine_healing() const;
  void _internal_set_is_shrine_healing(bool value);
  public:

  // optional int32 unreliable_gold = 123 [default = -1];
  bool has_unreliable_gold() const;
  private:
  bool _internal_has_unreliable_gold() const;
  public:
  void clear_unreliable_gold();
  int32_t unreliable_gold() const;
  void set_unreliable_gold(int32_t value);
  private:
  int32_t _internal_unreliable_gold() const;
  void _internal_set_unreliable_gold(int32_t value);
  public:

  // optional uint32 attack_target_handle = 49 [default = 4294967295];
  bool has_attack_target_handle() const;
  private:
  bool _internal_has_attack_target_handle() const;
  public:
  void clear_attack_target_handle();
  uint32_t attack_target_handle() const;
  void set_attack_target_handle(uint32_t value);
  private:
  uint32_t _internal_attack_target_handle() const;
  void _internal_set_attack_target_handle(uint32_t value);
  public:

  // optional int32 attacks_per_second = 50 [default = -1];
  bool has_attacks_per_second() const;
  private:
  bool _internal_has_attacks_per_second() const;
  public:
  void clear_attacks_per_second();
  int32_t attacks_per_second() const;
  void set_attacks_per_second(int32_t value);
  private:
  int32_t _internal_attacks_per_second() const;
  void _internal_set_attacks_per_second(int32_t value);
  public:

  // optional float last_attack_time = 51 [default = -1];
  bool has_last_attack_time() const;
  private:
  bool _internal_has_last_attack_time() const;
  public:
  void clear_last_attack_time();
  float last_attack_time() const;
  void set_last_attack_time(float value);
  private:
  float _internal_last_attack_time() const;
  void _internal_set_last_attack_time(float value);
  public:

  // optional uint32 active_ability_handle = 66 [default = 4294967295];
  bool has_active_ability_handle() const;
  private:
  bool _internal_has_active_ability_handle() const;
  public:
  void clear_active_ability_handle();
  uint32_t active_ability_handle() const;
  void set_active_ability_handle(uint32_t value);
  private:
  uint32_t _internal_active_ability_handle() const;
  void _internal_set_active_ability_handle(uint32_t value);
  public:

  // optional uint32 ability_target_handle = 101 [default = 4294967295];
  bool has_ability_target_handle() const;
  private:
  bool _internal_has_ability_target_handle() const;
  public:
  void clear_ability_target_handle();
  uint32_t ability_target_handle() const;
  void set_ability_target_handle(uint32_t value);
  private:
  uint32_t _internal_ability_target_handle() const;
  void _internal_set_ability_target_handle(uint32_t value);
  public:

  // optional int32 reliable_gold = 122 [default = -1];
  bool has_reliable_gold() const;
  private:
  bool _internal_has_reliable_gold() const;
  public:
  void clear_reliable_gold();
  int32_t reliable_gold() const;
  void set_reliable_gold(int32_t value);
  private:
  int32_t _internal_reliable_gold() const;
  void _internal_set_reliable_gold(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBotWorldState.Unit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<3> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Ability > abilities_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Ability > items_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Modifier > modifiers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_TrackingProjectile > incoming_tracking_projectiles_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attack_target_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ability_target_name_;
    ::CMsgBotWorldState_Vector* location_;
    uint32_t handle_;
    int unit_type_;
    uint32_t team_id_;
    uint32_t level_;
    int32_t player_id_;
    int32_t bounding_radius_;
    int32_t facing_;
    uint32_t ground_height_;
    uint32_t vision_range_daytime_;
    uint32_t vision_range_nighttime_;
    int32_t health_;
    int32_t health_max_;
    float health_regen_;
    int32_t mana_;
    int32_t mana_max_;
    float mana_regen_;
    int32_t base_movement_speed_;
    int32_t current_movement_speed_;
    int32_t anim_activity_;
    float anim_cycle_;
    int32_t base_damage_;
    int32_t base_damage_variance_;
    int32_t bonus_damage_;
    int32_t attack_damage_;
    int32_t attack_range_;
    float attack_speed_;
    float attack_anim_point_;
    int32_t attack_acquisition_range_;
    int32_t attack_projectile_speed_;
    bool is_alive_;
    bool is_channeling_;
    bool is_attack_immune_;
    bool is_blind_;
    uint32_t bounty_xp_;
    uint32_t bounty_gold_min_;
    uint32_t bounty_gold_max_;
    bool is_block_disabled_;
    bool is_disarmed_;
    bool is_dominated_;
    bool is_evade_disabled_;
    bool is_hexed_;
    bool is_invisible_;
    bool is_invulnerable_;
    bool is_magic_immune_;
    bool is_muted_;
    bool is_nightmared_;
    bool is_rooted_;
    bool is_silenced_;
    bool is_specially_deniable_;
    bool is_stunned_;
    bool is_unable_to_miss_;
    bool has_scepter_;
    uint32_t action_type_;
    uint32_t primary_attribute_;
    bool is_specially_undeniable_;
    bool is_using_ability_;
    bool is_illusion_;
    bool flying_courier_;
    float respawn_time_;
    uint32_t buyback_cost_;
    float buyback_cooldown_;
    float spell_amplification_;
    float armor_;
    float magic_resist_;
    float evasion_;
    uint32_t xp_needed_to_level_;
    uint32_t ability_points_;
    uint32_t last_hits_;
    uint32_t denies_;
    uint32_t net_worth_;
    uint32_t strength_;
    uint32_t agility_;
    uint32_t intelligence_;
    float remaining_lifespan_;
    float shrine_cooldown_;
    bool is_shrine_healing_;
    int32_t unreliable_gold_;
    uint32_t attack_target_handle_;
    int32_t attacks_per_second_;
    float last_attack_time_;
    uint32_t active_ability_handle_;
    uint32_t ability_target_handle_;
    int32_t reliable_gold_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto;
};
// -------------------------------------------------------------------

class CMsgBotWorldState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBotWorldState) */ {
 public:
  inline CMsgBotWorldState() : CMsgBotWorldState(nullptr) {}
  ~CMsgBotWorldState() override;
  explicit PROTOBUF_CONSTEXPR CMsgBotWorldState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBotWorldState(const CMsgBotWorldState& from);
  CMsgBotWorldState(CMsgBotWorldState&& from) noexcept
    : CMsgBotWorldState() {
    *this = ::std::move(from);
  }

  inline CMsgBotWorldState& operator=(const CMsgBotWorldState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBotWorldState& operator=(CMsgBotWorldState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBotWorldState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBotWorldState* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState*>(
               &_CMsgBotWorldState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgBotWorldState& a, CMsgBotWorldState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBotWorldState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBotWorldState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBotWorldState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBotWorldState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBotWorldState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBotWorldState& from) {
    CMsgBotWorldState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBotWorldState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBotWorldState";
  }
  protected:
  explicit CMsgBotWorldState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgBotWorldState_Vector Vector;
  typedef CMsgBotWorldState_Player Player;
  typedef CMsgBotWorldState_Ability Ability;
  typedef CMsgBotWorldState_DroppedItem DroppedItem;
  typedef CMsgBotWorldState_RuneInfo RuneInfo;
  typedef CMsgBotWorldState_TeleportInfo TeleportInfo;
  typedef CMsgBotWorldState_Modifier Modifier;
  typedef CMsgBotWorldState_LinearProjectile LinearProjectile;
  typedef CMsgBotWorldState_TrackingProjectile TrackingProjectile;
  typedef CMsgBotWorldState_AvoidanceZone AvoidanceZone;
  typedef CMsgBotWorldState_Courier Courier;
  typedef CMsgBotWorldState_EventAbility EventAbility;
  typedef CMsgBotWorldState_EventDamage EventDamage;
  typedef CMsgBotWorldState_EventCourierKilled EventCourierKilled;
  typedef CMsgBotWorldState_EventRoshanKilled EventRoshanKilled;
  typedef CMsgBotWorldState_EventTree EventTree;
  typedef CMsgBotWorldState_Unit Unit;

  typedef CMsgBotWorldState_UnitType UnitType;
  static constexpr UnitType INVALID =
    CMsgBotWorldState_UnitType_INVALID;
  static constexpr UnitType HERO =
    CMsgBotWorldState_UnitType_HERO;
  static constexpr UnitType CREEP_HERO =
    CMsgBotWorldState_UnitType_CREEP_HERO;
  static constexpr UnitType LANE_CREEP =
    CMsgBotWorldState_UnitType_LANE_CREEP;
  static constexpr UnitType JUNGLE_CREEP =
    CMsgBotWorldState_UnitType_JUNGLE_CREEP;
  static constexpr UnitType ROSHAN =
    CMsgBotWorldState_UnitType_ROSHAN;
  static constexpr UnitType TOWER =
    CMsgBotWorldState_UnitType_TOWER;
  static constexpr UnitType BARRACKS =
    CMsgBotWorldState_UnitType_BARRACKS;
  static constexpr UnitType SHRINE =
    CMsgBotWorldState_UnitType_SHRINE;
  static constexpr UnitType FORT =
    CMsgBotWorldState_UnitType_FORT;
  static constexpr UnitType BUILDING =
    CMsgBotWorldState_UnitType_BUILDING;
  static constexpr UnitType COURIER =
    CMsgBotWorldState_UnitType_COURIER;
  static constexpr UnitType WARD =
    CMsgBotWorldState_UnitType_WARD;
  static inline bool UnitType_IsValid(int value) {
    return CMsgBotWorldState_UnitType_IsValid(value);
  }
  static constexpr UnitType UnitType_MIN =
    CMsgBotWorldState_UnitType_UnitType_MIN;
  static constexpr UnitType UnitType_MAX =
    CMsgBotWorldState_UnitType_UnitType_MAX;
  static constexpr int UnitType_ARRAYSIZE =
    CMsgBotWorldState_UnitType_UnitType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UnitType_descriptor() {
    return CMsgBotWorldState_UnitType_descriptor();
  }
  template<typename T>
  static inline const std::string& UnitType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UnitType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UnitType_Name.");
    return CMsgBotWorldState_UnitType_Name(enum_t_value);
  }
  static inline bool UnitType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UnitType* value) {
    return CMsgBotWorldState_UnitType_Parse(name, value);
  }

  typedef CMsgBotWorldState_CourierState CourierState;
  static constexpr CourierState COURIER_STATE_INIT =
    CMsgBotWorldState_CourierState_COURIER_STATE_INIT;
  static constexpr CourierState COURIER_STATE_IDLE =
    CMsgBotWorldState_CourierState_COURIER_STATE_IDLE;
  static constexpr CourierState COURIER_STATE_AT_BASE =
    CMsgBotWorldState_CourierState_COURIER_STATE_AT_BASE;
  static constexpr CourierState COURIER_STATE_MOVING =
    CMsgBotWorldState_CourierState_COURIER_STATE_MOVING;
  static constexpr CourierState COURIER_STATE_DELIVERING_ITEMS =
    CMsgBotWorldState_CourierState_COURIER_STATE_DELIVERING_ITEMS;
  static constexpr CourierState COURIER_STATE_RETURNING_TO_BASE =
    CMsgBotWorldState_CourierState_COURIER_STATE_RETURNING_TO_BASE;
  static constexpr CourierState COURIER_STATE_DEAD =
    CMsgBotWorldState_CourierState_COURIER_STATE_DEAD;
  static inline bool CourierState_IsValid(int value) {
    return CMsgBotWorldState_CourierState_IsValid(value);
  }
  static constexpr CourierState CourierState_MIN =
    CMsgBotWorldState_CourierState_CourierState_MIN;
  static constexpr CourierState CourierState_MAX =
    CMsgBotWorldState_CourierState_CourierState_MAX;
  static constexpr int CourierState_ARRAYSIZE =
    CMsgBotWorldState_CourierState_CourierState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CourierState_descriptor() {
    return CMsgBotWorldState_CourierState_descriptor();
  }
  template<typename T>
  static inline const std::string& CourierState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CourierState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CourierState_Name.");
    return CMsgBotWorldState_CourierState_Name(enum_t_value);
  }
  static inline bool CourierState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CourierState* value) {
    return CMsgBotWorldState_CourierState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 10,
    kUnitsFieldNumber = 11,
    kDroppedItemsFieldNumber = 12,
    kRuneInfosFieldNumber = 13,
    kIncomingTeleportsFieldNumber = 14,
    kLinearProjectilesFieldNumber = 15,
    kAvoidanceZonesFieldNumber = 16,
    kCouriersFieldNumber = 17,
    kAbilityEventsFieldNumber = 20,
    kDamageEventsFieldNumber = 21,
    kCourierKilledEventsFieldNumber = 22,
    kRoshanKilledEventsFieldNumber = 23,
    kTreeEventsFieldNumber = 24,
    kDroppedItemsDeltasFieldNumber = 112,
    kRuneInfosDeltasFieldNumber = 113,
    kTeamIdFieldNumber = 1,
    kGameTimeFieldNumber = 2,
    kDotaTimeFieldNumber = 3,
    kGameStateFieldNumber = 4,
    kHeroPickStateFieldNumber = 5,
    kTimeOfDayFieldNumber = 6,
    kGlyphCooldownFieldNumber = 7,
    kGlyphCooldownEnemyFieldNumber = 8,
  };
  // repeated .CMsgBotWorldState.Player players = 10 [(.map_field) = true];
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgBotWorldState_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Player >*
      mutable_players();
  private:
  const ::CMsgBotWorldState_Player& _internal_players(int index) const;
  ::CMsgBotWorldState_Player* _internal_add_players();
  public:
  const ::CMsgBotWorldState_Player& players(int index) const;
  ::CMsgBotWorldState_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Player >&
      players() const;

  // repeated .CMsgBotWorldState.Unit units = 11 [(.map_field) = true];
  int units_size() const;
  private:
  int _internal_units_size() const;
  public:
  void clear_units();
  ::CMsgBotWorldState_Unit* mutable_units(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Unit >*
      mutable_units();
  private:
  const ::CMsgBotWorldState_Unit& _internal_units(int index) const;
  ::CMsgBotWorldState_Unit* _internal_add_units();
  public:
  const ::CMsgBotWorldState_Unit& units(int index) const;
  ::CMsgBotWorldState_Unit* add_units();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Unit >&
      units() const;

  // repeated .CMsgBotWorldState.DroppedItem dropped_items = 12 [(.diff_encode_field) = 112];
  int dropped_items_size() const;
  private:
  int _internal_dropped_items_size() const;
  public:
  void clear_dropped_items();
  ::CMsgBotWorldState_DroppedItem* mutable_dropped_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_DroppedItem >*
      mutable_dropped_items();
  private:
  const ::CMsgBotWorldState_DroppedItem& _internal_dropped_items(int index) const;
  ::CMsgBotWorldState_DroppedItem* _internal_add_dropped_items();
  public:
  const ::CMsgBotWorldState_DroppedItem& dropped_items(int index) const;
  ::CMsgBotWorldState_DroppedItem* add_dropped_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_DroppedItem >&
      dropped_items() const;

  // repeated .CMsgBotWorldState.RuneInfo rune_infos = 13 [(.diff_encode_field) = 113];
  int rune_infos_size() const;
  private:
  int _internal_rune_infos_size() const;
  public:
  void clear_rune_infos();
  ::CMsgBotWorldState_RuneInfo* mutable_rune_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_RuneInfo >*
      mutable_rune_infos();
  private:
  const ::CMsgBotWorldState_RuneInfo& _internal_rune_infos(int index) const;
  ::CMsgBotWorldState_RuneInfo* _internal_add_rune_infos();
  public:
  const ::CMsgBotWorldState_RuneInfo& rune_infos(int index) const;
  ::CMsgBotWorldState_RuneInfo* add_rune_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_RuneInfo >&
      rune_infos() const;

  // repeated .CMsgBotWorldState.TeleportInfo incoming_teleports = 14;
  int incoming_teleports_size() const;
  private:
  int _internal_incoming_teleports_size() const;
  public:
  void clear_incoming_teleports();
  ::CMsgBotWorldState_TeleportInfo* mutable_incoming_teleports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_TeleportInfo >*
      mutable_incoming_teleports();
  private:
  const ::CMsgBotWorldState_TeleportInfo& _internal_incoming_teleports(int index) const;
  ::CMsgBotWorldState_TeleportInfo* _internal_add_incoming_teleports();
  public:
  const ::CMsgBotWorldState_TeleportInfo& incoming_teleports(int index) const;
  ::CMsgBotWorldState_TeleportInfo* add_incoming_teleports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_TeleportInfo >&
      incoming_teleports() const;

  // repeated .CMsgBotWorldState.LinearProjectile linear_projectiles = 15 [(.map_field) = true];
  int linear_projectiles_size() const;
  private:
  int _internal_linear_projectiles_size() const;
  public:
  void clear_linear_projectiles();
  ::CMsgBotWorldState_LinearProjectile* mutable_linear_projectiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_LinearProjectile >*
      mutable_linear_projectiles();
  private:
  const ::CMsgBotWorldState_LinearProjectile& _internal_linear_projectiles(int index) const;
  ::CMsgBotWorldState_LinearProjectile* _internal_add_linear_projectiles();
  public:
  const ::CMsgBotWorldState_LinearProjectile& linear_projectiles(int index) const;
  ::CMsgBotWorldState_LinearProjectile* add_linear_projectiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_LinearProjectile >&
      linear_projectiles() const;

  // repeated .CMsgBotWorldState.AvoidanceZone avoidance_zones = 16;
  int avoidance_zones_size() const;
  private:
  int _internal_avoidance_zones_size() const;
  public:
  void clear_avoidance_zones();
  ::CMsgBotWorldState_AvoidanceZone* mutable_avoidance_zones(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_AvoidanceZone >*
      mutable_avoidance_zones();
  private:
  const ::CMsgBotWorldState_AvoidanceZone& _internal_avoidance_zones(int index) const;
  ::CMsgBotWorldState_AvoidanceZone* _internal_add_avoidance_zones();
  public:
  const ::CMsgBotWorldState_AvoidanceZone& avoidance_zones(int index) const;
  ::CMsgBotWorldState_AvoidanceZone* add_avoidance_zones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_AvoidanceZone >&
      avoidance_zones() const;

  // repeated .CMsgBotWorldState.Courier couriers = 17 [(.map_field) = true];
  int couriers_size() const;
  private:
  int _internal_couriers_size() const;
  public:
  void clear_couriers();
  ::CMsgBotWorldState_Courier* mutable_couriers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Courier >*
      mutable_couriers();
  private:
  const ::CMsgBotWorldState_Courier& _internal_couriers(int index) const;
  ::CMsgBotWorldState_Courier* _internal_add_couriers();
  public:
  const ::CMsgBotWorldState_Courier& couriers(int index) const;
  ::CMsgBotWorldState_Courier* add_couriers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Courier >&
      couriers() const;

  // repeated .CMsgBotWorldState.EventAbility ability_events = 20;
  int ability_events_size() const;
  private:
  int _internal_ability_events_size() const;
  public:
  void clear_ability_events();
  ::CMsgBotWorldState_EventAbility* mutable_ability_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventAbility >*
      mutable_ability_events();
  private:
  const ::CMsgBotWorldState_EventAbility& _internal_ability_events(int index) const;
  ::CMsgBotWorldState_EventAbility* _internal_add_ability_events();
  public:
  const ::CMsgBotWorldState_EventAbility& ability_events(int index) const;
  ::CMsgBotWorldState_EventAbility* add_ability_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventAbility >&
      ability_events() const;

  // repeated .CMsgBotWorldState.EventDamage damage_events = 21;
  int damage_events_size() const;
  private:
  int _internal_damage_events_size() const;
  public:
  void clear_damage_events();
  ::CMsgBotWorldState_EventDamage* mutable_damage_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventDamage >*
      mutable_damage_events();
  private:
  const ::CMsgBotWorldState_EventDamage& _internal_damage_events(int index) const;
  ::CMsgBotWorldState_EventDamage* _internal_add_damage_events();
  public:
  const ::CMsgBotWorldState_EventDamage& damage_events(int index) const;
  ::CMsgBotWorldState_EventDamage* add_damage_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventDamage >&
      damage_events() const;

  // repeated .CMsgBotWorldState.EventCourierKilled courier_killed_events = 22;
  int courier_killed_events_size() const;
  private:
  int _internal_courier_killed_events_size() const;
  public:
  void clear_courier_killed_events();
  ::CMsgBotWorldState_EventCourierKilled* mutable_courier_killed_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventCourierKilled >*
      mutable_courier_killed_events();
  private:
  const ::CMsgBotWorldState_EventCourierKilled& _internal_courier_killed_events(int index) const;
  ::CMsgBotWorldState_EventCourierKilled* _internal_add_courier_killed_events();
  public:
  const ::CMsgBotWorldState_EventCourierKilled& courier_killed_events(int index) const;
  ::CMsgBotWorldState_EventCourierKilled* add_courier_killed_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventCourierKilled >&
      courier_killed_events() const;

  // repeated .CMsgBotWorldState.EventRoshanKilled roshan_killed_events = 23;
  int roshan_killed_events_size() const;
  private:
  int _internal_roshan_killed_events_size() const;
  public:
  void clear_roshan_killed_events();
  ::CMsgBotWorldState_EventRoshanKilled* mutable_roshan_killed_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventRoshanKilled >*
      mutable_roshan_killed_events();
  private:
  const ::CMsgBotWorldState_EventRoshanKilled& _internal_roshan_killed_events(int index) const;
  ::CMsgBotWorldState_EventRoshanKilled* _internal_add_roshan_killed_events();
  public:
  const ::CMsgBotWorldState_EventRoshanKilled& roshan_killed_events(int index) const;
  ::CMsgBotWorldState_EventRoshanKilled* add_roshan_killed_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventRoshanKilled >&
      roshan_killed_events() const;

  // repeated .CMsgBotWorldState.EventTree tree_events = 24;
  int tree_events_size() const;
  private:
  int _internal_tree_events_size() const;
  public:
  void clear_tree_events();
  ::CMsgBotWorldState_EventTree* mutable_tree_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventTree >*
      mutable_tree_events();
  private:
  const ::CMsgBotWorldState_EventTree& _internal_tree_events(int index) const;
  ::CMsgBotWorldState_EventTree* _internal_add_tree_events();
  public:
  const ::CMsgBotWorldState_EventTree& tree_events(int index) const;
  ::CMsgBotWorldState_EventTree* add_tree_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventTree >&
      tree_events() const;

  // repeated int32 dropped_items_deltas = 112;
  int dropped_items_deltas_size() const;
  private:
  int _internal_dropped_items_deltas_size() const;
  public:
  void clear_dropped_items_deltas();
  private:
  int32_t _internal_dropped_items_deltas(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_dropped_items_deltas() const;
  void _internal_add_dropped_items_deltas(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_dropped_items_deltas();
  public:
  int32_t dropped_items_deltas(int index) const;
  void set_dropped_items_deltas(int index, int32_t value);
  void add_dropped_items_deltas(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      dropped_items_deltas() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_dropped_items_deltas();

  // repeated int32 rune_infos_deltas = 113;
  int rune_infos_deltas_size() const;
  private:
  int _internal_rune_infos_deltas_size() const;
  public:
  void clear_rune_infos_deltas();
  private:
  int32_t _internal_rune_infos_deltas(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_rune_infos_deltas() const;
  void _internal_add_rune_infos_deltas(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_rune_infos_deltas();
  public:
  int32_t rune_infos_deltas(int index) const;
  void set_rune_infos_deltas(int index, int32_t value);
  void add_rune_infos_deltas(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      rune_infos_deltas() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_rune_infos_deltas();

  // optional uint32 team_id = 1;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional float game_time = 2;
  bool has_game_time() const;
  private:
  bool _internal_has_game_time() const;
  public:
  void clear_game_time();
  float game_time() const;
  void set_game_time(float value);
  private:
  float _internal_game_time() const;
  void _internal_set_game_time(float value);
  public:

  // optional float dota_time = 3;
  bool has_dota_time() const;
  private:
  bool _internal_has_dota_time() const;
  public:
  void clear_dota_time();
  float dota_time() const;
  void set_dota_time(float value);
  private:
  float _internal_dota_time() const;
  void _internal_set_dota_time(float value);
  public:

  // optional uint32 game_state = 4;
  bool has_game_state() const;
  private:
  bool _internal_has_game_state() const;
  public:
  void clear_game_state();
  uint32_t game_state() const;
  void set_game_state(uint32_t value);
  private:
  uint32_t _internal_game_state() const;
  void _internal_set_game_state(uint32_t value);
  public:

  // optional uint32 hero_pick_state = 5;
  bool has_hero_pick_state() const;
  private:
  bool _internal_has_hero_pick_state() const;
  public:
  void clear_hero_pick_state();
  uint32_t hero_pick_state() const;
  void set_hero_pick_state(uint32_t value);
  private:
  uint32_t _internal_hero_pick_state() const;
  void _internal_set_hero_pick_state(uint32_t value);
  public:

  // optional float time_of_day = 6;
  bool has_time_of_day() const;
  private:
  bool _internal_has_time_of_day() const;
  public:
  void clear_time_of_day();
  float time_of_day() const;
  void set_time_of_day(float value);
  private:
  float _internal_time_of_day() const;
  void _internal_set_time_of_day(float value);
  public:

  // optional float glyph_cooldown = 7;
  bool has_glyph_cooldown() const;
  private:
  bool _internal_has_glyph_cooldown() const;
  public:
  void clear_glyph_cooldown();
  float glyph_cooldown() const;
  void set_glyph_cooldown(float value);
  private:
  float _internal_glyph_cooldown() const;
  void _internal_set_glyph_cooldown(float value);
  public:

  // optional float glyph_cooldown_enemy = 8;
  bool has_glyph_cooldown_enemy() const;
  private:
  bool _internal_has_glyph_cooldown_enemy() const;
  public:
  void clear_glyph_cooldown_enemy();
  float glyph_cooldown_enemy() const;
  void set_glyph_cooldown_enemy(float value);
  private:
  float _internal_glyph_cooldown_enemy() const;
  void _internal_set_glyph_cooldown_enemy(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBotWorldState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Player > players_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Unit > units_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_DroppedItem > dropped_items_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_RuneInfo > rune_infos_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_TeleportInfo > incoming_teleports_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_LinearProjectile > linear_projectiles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_AvoidanceZone > avoidance_zones_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Courier > couriers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventAbility > ability_events_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventDamage > damage_events_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventCourierKilled > courier_killed_events_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventRoshanKilled > roshan_killed_events_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventTree > tree_events_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > dropped_items_deltas_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > rune_infos_deltas_;
    uint32_t team_id_;
    float game_time_;
    float dota_time_;
    uint32_t game_state_;
    uint32_t hero_pick_state_;
    float time_of_day_;
    float glyph_cooldown_;
    float glyph_cooldown_enemy_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgBotWorldState_Vector

// optional float x = 1;
inline bool CMsgBotWorldState_Vector::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Vector::has_x() const {
  return _internal_has_x();
}
inline void CMsgBotWorldState_Vector::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CMsgBotWorldState_Vector::_internal_x() const {
  return _impl_.x_;
}
inline float CMsgBotWorldState_Vector::x() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Vector.x)
  return _internal_x();
}
inline void CMsgBotWorldState_Vector::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void CMsgBotWorldState_Vector::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Vector.x)
}

// optional float y = 2;
inline bool CMsgBotWorldState_Vector::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Vector::has_y() const {
  return _internal_has_y();
}
inline void CMsgBotWorldState_Vector::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CMsgBotWorldState_Vector::_internal_y() const {
  return _impl_.y_;
}
inline float CMsgBotWorldState_Vector::y() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Vector.y)
  return _internal_y();
}
inline void CMsgBotWorldState_Vector::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void CMsgBotWorldState_Vector::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Vector.y)
}

// optional float z = 3;
inline bool CMsgBotWorldState_Vector::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Vector::has_z() const {
  return _internal_has_z();
}
inline void CMsgBotWorldState_Vector::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CMsgBotWorldState_Vector::_internal_z() const {
  return _impl_.z_;
}
inline float CMsgBotWorldState_Vector::z() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Vector.z)
  return _internal_z();
}
inline void CMsgBotWorldState_Vector::_internal_set_z(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void CMsgBotWorldState_Vector::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Vector.z)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_Player

// optional int32 player_id = 1 [(.map_key) = true];
inline bool CMsgBotWorldState_Player::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Player::has_player_id() const {
  return _internal_has_player_id();
}
inline void CMsgBotWorldState_Player::clear_player_id() {
  _impl_.player_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgBotWorldState_Player::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int32_t CMsgBotWorldState_Player::player_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Player.player_id)
  return _internal_player_id();
}
inline void CMsgBotWorldState_Player::_internal_set_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.player_id_ = value;
}
inline void CMsgBotWorldState_Player::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Player.player_id)
}

// optional uint32 hero_id = 2;
inline bool CMsgBotWorldState_Player::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Player::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgBotWorldState_Player::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgBotWorldState_Player::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgBotWorldState_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Player.hero_id)
  return _internal_hero_id();
}
inline void CMsgBotWorldState_Player::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hero_id_ = value;
}
inline void CMsgBotWorldState_Player::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Player.hero_id)
}

// optional bool is_alive = 3;
inline bool CMsgBotWorldState_Player::_internal_has_is_alive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Player::has_is_alive() const {
  return _internal_has_is_alive();
}
inline void CMsgBotWorldState_Player::clear_is_alive() {
  _impl_.is_alive_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgBotWorldState_Player::_internal_is_alive() const {
  return _impl_.is_alive_;
}
inline bool CMsgBotWorldState_Player::is_alive() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Player.is_alive)
  return _internal_is_alive();
}
inline void CMsgBotWorldState_Player::_internal_set_is_alive(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.is_alive_ = value;
}
inline void CMsgBotWorldState_Player::set_is_alive(bool value) {
  _internal_set_is_alive(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Player.is_alive)
}

// optional float respawn_time = 4;
inline bool CMsgBotWorldState_Player::_internal_has_respawn_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Player::has_respawn_time() const {
  return _internal_has_respawn_time();
}
inline void CMsgBotWorldState_Player::clear_respawn_time() {
  _impl_.respawn_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float CMsgBotWorldState_Player::_internal_respawn_time() const {
  return _impl_.respawn_time_;
}
inline float CMsgBotWorldState_Player::respawn_time() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Player.respawn_time)
  return _internal_respawn_time();
}
inline void CMsgBotWorldState_Player::_internal_set_respawn_time(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.respawn_time_ = value;
}
inline void CMsgBotWorldState_Player::set_respawn_time(float value) {
  _internal_set_respawn_time(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Player.respawn_time)
}

// optional uint32 kills = 5;
inline bool CMsgBotWorldState_Player::_internal_has_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Player::has_kills() const {
  return _internal_has_kills();
}
inline void CMsgBotWorldState_Player::clear_kills() {
  _impl_.kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgBotWorldState_Player::_internal_kills() const {
  return _impl_.kills_;
}
inline uint32_t CMsgBotWorldState_Player::kills() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Player.kills)
  return _internal_kills();
}
inline void CMsgBotWorldState_Player::_internal_set_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.kills_ = value;
}
inline void CMsgBotWorldState_Player::set_kills(uint32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Player.kills)
}

// optional uint32 deaths = 6;
inline bool CMsgBotWorldState_Player::_internal_has_deaths() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Player::has_deaths() const {
  return _internal_has_deaths();
}
inline void CMsgBotWorldState_Player::clear_deaths() {
  _impl_.deaths_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgBotWorldState_Player::_internal_deaths() const {
  return _impl_.deaths_;
}
inline uint32_t CMsgBotWorldState_Player::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Player.deaths)
  return _internal_deaths();
}
inline void CMsgBotWorldState_Player::_internal_set_deaths(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.deaths_ = value;
}
inline void CMsgBotWorldState_Player::set_deaths(uint32_t value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Player.deaths)
}

// optional uint32 assists = 7;
inline bool CMsgBotWorldState_Player::_internal_has_assists() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Player::has_assists() const {
  return _internal_has_assists();
}
inline void CMsgBotWorldState_Player::clear_assists() {
  _impl_.assists_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgBotWorldState_Player::_internal_assists() const {
  return _impl_.assists_;
}
inline uint32_t CMsgBotWorldState_Player::assists() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Player.assists)
  return _internal_assists();
}
inline void CMsgBotWorldState_Player::_internal_set_assists(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.assists_ = value;
}
inline void CMsgBotWorldState_Player::set_assists(uint32_t value) {
  _internal_set_assists(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Player.assists)
}

// optional uint32 team_id = 8;
inline bool CMsgBotWorldState_Player::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Player::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgBotWorldState_Player::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgBotWorldState_Player::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgBotWorldState_Player::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Player.team_id)
  return _internal_team_id();
}
inline void CMsgBotWorldState_Player::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.team_id_ = value;
}
inline void CMsgBotWorldState_Player::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Player.team_id)
}

// optional uint32 primary_unit_handle = 9 [default = 4294967295];
inline bool CMsgBotWorldState_Player::_internal_has_primary_unit_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Player::has_primary_unit_handle() const {
  return _internal_has_primary_unit_handle();
}
inline void CMsgBotWorldState_Player::clear_primary_unit_handle() {
  _impl_.primary_unit_handle_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgBotWorldState_Player::_internal_primary_unit_handle() const {
  return _impl_.primary_unit_handle_;
}
inline uint32_t CMsgBotWorldState_Player::primary_unit_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Player.primary_unit_handle)
  return _internal_primary_unit_handle();
}
inline void CMsgBotWorldState_Player::_internal_set_primary_unit_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.primary_unit_handle_ = value;
}
inline void CMsgBotWorldState_Player::set_primary_unit_handle(uint32_t value) {
  _internal_set_primary_unit_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Player.primary_unit_handle)
}

// optional int32 mmr = 10;
inline bool CMsgBotWorldState_Player::_internal_has_mmr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Player::has_mmr() const {
  return _internal_has_mmr();
}
inline void CMsgBotWorldState_Player::clear_mmr() {
  _impl_.mmr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t CMsgBotWorldState_Player::_internal_mmr() const {
  return _impl_.mmr_;
}
inline int32_t CMsgBotWorldState_Player::mmr() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Player.mmr)
  return _internal_mmr();
}
inline void CMsgBotWorldState_Player::_internal_set_mmr(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.mmr_ = value;
}
inline void CMsgBotWorldState_Player::set_mmr(int32_t value) {
  _internal_set_mmr(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Player.mmr)
}

// optional .CMsgBotWorldState.Vector location = 11;
inline bool CMsgBotWorldState_Player::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline bool CMsgBotWorldState_Player::has_location() const {
  return _internal_has_location();
}
inline void CMsgBotWorldState_Player::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgBotWorldState_Vector& CMsgBotWorldState_Player::_internal_location() const {
  const ::CMsgBotWorldState_Vector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBotWorldState_Vector&>(
      ::_CMsgBotWorldState_Vector_default_instance_);
}
inline const ::CMsgBotWorldState_Vector& CMsgBotWorldState_Player::location() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Player.location)
  return _internal_location();
}
inline void CMsgBotWorldState_Player::unsafe_arena_set_allocated_location(
    ::CMsgBotWorldState_Vector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBotWorldState.Player.location)
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_Player::release_location() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBotWorldState_Vector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_Player::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:CMsgBotWorldState.Player.location)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBotWorldState_Vector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_Player::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBotWorldState_Vector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_Player::mutable_location() {
  ::CMsgBotWorldState_Vector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.Player.location)
  return _msg;
}
inline void CMsgBotWorldState_Player::set_allocated_location(::CMsgBotWorldState_Vector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Player.location)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_Ability

// optional uint32 handle = 1 [(.map_key) = true];
inline bool CMsgBotWorldState_Ability::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Ability::has_handle() const {
  return _internal_has_handle();
}
inline void CMsgBotWorldState_Ability::clear_handle() {
  _impl_.handle_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgBotWorldState_Ability::_internal_handle() const {
  return _impl_.handle_;
}
inline uint32_t CMsgBotWorldState_Ability::handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Ability.handle)
  return _internal_handle();
}
inline void CMsgBotWorldState_Ability::_internal_set_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.handle_ = value;
}
inline void CMsgBotWorldState_Ability::set_handle(uint32_t value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Ability.handle)
}

// optional int32 ability_id = 2 [default = -1];
inline bool CMsgBotWorldState_Ability::_internal_has_ability_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Ability::has_ability_id() const {
  return _internal_has_ability_id();
}
inline void CMsgBotWorldState_Ability::clear_ability_id() {
  _impl_.ability_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline int32_t CMsgBotWorldState_Ability::_internal_ability_id() const {
  return _impl_.ability_id_;
}
inline int32_t CMsgBotWorldState_Ability::ability_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Ability.ability_id)
  return _internal_ability_id();
}
inline void CMsgBotWorldState_Ability::_internal_set_ability_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.ability_id_ = value;
}
inline void CMsgBotWorldState_Ability::set_ability_id(int32_t value) {
  _internal_set_ability_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Ability.ability_id)
}

// optional uint32 slot = 3;
inline bool CMsgBotWorldState_Ability::_internal_has_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Ability::has_slot() const {
  return _internal_has_slot();
}
inline void CMsgBotWorldState_Ability::clear_slot() {
  _impl_.slot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgBotWorldState_Ability::_internal_slot() const {
  return _impl_.slot_;
}
inline uint32_t CMsgBotWorldState_Ability::slot() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Ability.slot)
  return _internal_slot();
}
inline void CMsgBotWorldState_Ability::_internal_set_slot(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.slot_ = value;
}
inline void CMsgBotWorldState_Ability::set_slot(uint32_t value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Ability.slot)
}

// optional uint32 caster_handle = 5 [default = 4294967295];
inline bool CMsgBotWorldState_Ability::_internal_has_caster_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Ability::has_caster_handle() const {
  return _internal_has_caster_handle();
}
inline void CMsgBotWorldState_Ability::clear_caster_handle() {
  _impl_.caster_handle_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CMsgBotWorldState_Ability::_internal_caster_handle() const {
  return _impl_.caster_handle_;
}
inline uint32_t CMsgBotWorldState_Ability::caster_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Ability.caster_handle)
  return _internal_caster_handle();
}
inline void CMsgBotWorldState_Ability::_internal_set_caster_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.caster_handle_ = value;
}
inline void CMsgBotWorldState_Ability::set_caster_handle(uint32_t value) {
  _internal_set_caster_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Ability.caster_handle)
}

// optional uint32 level = 6;
inline bool CMsgBotWorldState_Ability::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Ability::has_level() const {
  return _internal_has_level();
}
inline void CMsgBotWorldState_Ability::clear_level() {
  _impl_.level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgBotWorldState_Ability::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t CMsgBotWorldState_Ability::level() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Ability.level)
  return _internal_level();
}
inline void CMsgBotWorldState_Ability::_internal_set_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.level_ = value;
}
inline void CMsgBotWorldState_Ability::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Ability.level)
}

// optional uint32 cast_range = 10;
inline bool CMsgBotWorldState_Ability::_internal_has_cast_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Ability::has_cast_range() const {
  return _internal_has_cast_range();
}
inline void CMsgBotWorldState_Ability::clear_cast_range() {
  _impl_.cast_range_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgBotWorldState_Ability::_internal_cast_range() const {
  return _impl_.cast_range_;
}
inline uint32_t CMsgBotWorldState_Ability::cast_range() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Ability.cast_range)
  return _internal_cast_range();
}
inline void CMsgBotWorldState_Ability::_internal_set_cast_range(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.cast_range_ = value;
}
inline void CMsgBotWorldState_Ability::set_cast_range(uint32_t value) {
  _internal_set_cast_range(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Ability.cast_range)
}

// optional float channel_time = 11;
inline bool CMsgBotWorldState_Ability::_internal_has_channel_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Ability::has_channel_time() const {
  return _internal_has_channel_time();
}
inline void CMsgBotWorldState_Ability::clear_channel_time() {
  _impl_.channel_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float CMsgBotWorldState_Ability::_internal_channel_time() const {
  return _impl_.channel_time_;
}
inline float CMsgBotWorldState_Ability::channel_time() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Ability.channel_time)
  return _internal_channel_time();
}
inline void CMsgBotWorldState_Ability::_internal_set_channel_time(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.channel_time_ = value;
}
inline void CMsgBotWorldState_Ability::set_channel_time(float value) {
  _internal_set_channel_time(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Ability.channel_time)
}

// optional float cooldown_remaining = 12 [default = 0];
inline bool CMsgBotWorldState_Ability::_internal_has_cooldown_remaining() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Ability::has_cooldown_remaining() const {
  return _internal_has_cooldown_remaining();
}
inline void CMsgBotWorldState_Ability::clear_cooldown_remaining() {
  _impl_.cooldown_remaining_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float CMsgBotWorldState_Ability::_internal_cooldown_remaining() const {
  return _impl_.cooldown_remaining_;
}
inline float CMsgBotWorldState_Ability::cooldown_remaining() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Ability.cooldown_remaining)
  return _internal_cooldown_remaining();
}
inline void CMsgBotWorldState_Ability::_internal_set_cooldown_remaining(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.cooldown_remaining_ = value;
}
inline void CMsgBotWorldState_Ability::set_cooldown_remaining(float value) {
  _internal_set_cooldown_remaining(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Ability.cooldown_remaining)
}

// optional bool is_activated = 20;
inline bool CMsgBotWorldState_Ability::_internal_has_is_activated() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Ability::has_is_activated() const {
  return _internal_has_is_activated();
}
inline void CMsgBotWorldState_Ability::clear_is_activated() {
  _impl_.is_activated_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgBotWorldState_Ability::_internal_is_activated() const {
  return _impl_.is_activated_;
}
inline bool CMsgBotWorldState_Ability::is_activated() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Ability.is_activated)
  return _internal_is_activated();
}
inline void CMsgBotWorldState_Ability::_internal_set_is_activated(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.is_activated_ = value;
}
inline void CMsgBotWorldState_Ability::set_is_activated(bool value) {
  _internal_set_is_activated(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Ability.is_activated)
}

// optional bool is_toggled = 21;
inline bool CMsgBotWorldState_Ability::_internal_has_is_toggled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Ability::has_is_toggled() const {
  return _internal_has_is_toggled();
}
inline void CMsgBotWorldState_Ability::clear_is_toggled() {
  _impl_.is_toggled_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgBotWorldState_Ability::_internal_is_toggled() const {
  return _impl_.is_toggled_;
}
inline bool CMsgBotWorldState_Ability::is_toggled() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Ability.is_toggled)
  return _internal_is_toggled();
}
inline void CMsgBotWorldState_Ability::_internal_set_is_toggled(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.is_toggled_ = value;
}
inline void CMsgBotWorldState_Ability::set_is_toggled(bool value) {
  _internal_set_is_toggled(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Ability.is_toggled)
}

// optional bool is_in_ability_phase = 22;
inline bool CMsgBotWorldState_Ability::_internal_has_is_in_ability_phase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Ability::has_is_in_ability_phase() const {
  return _internal_has_is_in_ability_phase();
}
inline void CMsgBotWorldState_Ability::clear_is_in_ability_phase() {
  _impl_.is_in_ability_phase_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool CMsgBotWorldState_Ability::_internal_is_in_ability_phase() const {
  return _impl_.is_in_ability_phase_;
}
inline bool CMsgBotWorldState_Ability::is_in_ability_phase() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Ability.is_in_ability_phase)
  return _internal_is_in_ability_phase();
}
inline void CMsgBotWorldState_Ability::_internal_set_is_in_ability_phase(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.is_in_ability_phase_ = value;
}
inline void CMsgBotWorldState_Ability::set_is_in_ability_phase(bool value) {
  _internal_set_is_in_ability_phase(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Ability.is_in_ability_phase)
}

// optional bool is_channeling = 23;
inline bool CMsgBotWorldState_Ability::_internal_has_is_channeling() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Ability::has_is_channeling() const {
  return _internal_has_is_channeling();
}
inline void CMsgBotWorldState_Ability::clear_is_channeling() {
  _impl_.is_channeling_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool CMsgBotWorldState_Ability::_internal_is_channeling() const {
  return _impl_.is_channeling_;
}
inline bool CMsgBotWorldState_Ability::is_channeling() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Ability.is_channeling)
  return _internal_is_channeling();
}
inline void CMsgBotWorldState_Ability::_internal_set_is_channeling(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.is_channeling_ = value;
}
inline void CMsgBotWorldState_Ability::set_is_channeling(bool value) {
  _internal_set_is_channeling(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Ability.is_channeling)
}

// optional bool is_stolen = 24;
inline bool CMsgBotWorldState_Ability::_internal_has_is_stolen() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Ability::has_is_stolen() const {
  return _internal_has_is_stolen();
}
inline void CMsgBotWorldState_Ability::clear_is_stolen() {
  _impl_.is_stolen_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool CMsgBotWorldState_Ability::_internal_is_stolen() const {
  return _impl_.is_stolen_;
}
inline bool CMsgBotWorldState_Ability::is_stolen() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Ability.is_stolen)
  return _internal_is_stolen();
}
inline void CMsgBotWorldState_Ability::_internal_set_is_stolen(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.is_stolen_ = value;
}
inline void CMsgBotWorldState_Ability::set_is_stolen(bool value) {
  _internal_set_is_stolen(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Ability.is_stolen)
}

// optional bool is_fully_castable = 25;
inline bool CMsgBotWorldState_Ability::_internal_has_is_fully_castable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Ability::has_is_fully_castable() const {
  return _internal_has_is_fully_castable();
}
inline void CMsgBotWorldState_Ability::clear_is_fully_castable() {
  _impl_.is_fully_castable_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool CMsgBotWorldState_Ability::_internal_is_fully_castable() const {
  return _impl_.is_fully_castable_;
}
inline bool CMsgBotWorldState_Ability::is_fully_castable() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Ability.is_fully_castable)
  return _internal_is_fully_castable();
}
inline void CMsgBotWorldState_Ability::_internal_set_is_fully_castable(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.is_fully_castable_ = value;
}
inline void CMsgBotWorldState_Ability::set_is_fully_castable(bool value) {
  _internal_set_is_fully_castable(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Ability.is_fully_castable)
}

// optional uint32 charges = 30;
inline bool CMsgBotWorldState_Ability::_internal_has_charges() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Ability::has_charges() const {
  return _internal_has_charges();
}
inline void CMsgBotWorldState_Ability::clear_charges() {
  _impl_.charges_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMsgBotWorldState_Ability::_internal_charges() const {
  return _impl_.charges_;
}
inline uint32_t CMsgBotWorldState_Ability::charges() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Ability.charges)
  return _internal_charges();
}
inline void CMsgBotWorldState_Ability::_internal_set_charges(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.charges_ = value;
}
inline void CMsgBotWorldState_Ability::set_charges(uint32_t value) {
  _internal_set_charges(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Ability.charges)
}

// optional uint32 secondary_charges = 31;
inline bool CMsgBotWorldState_Ability::_internal_has_secondary_charges() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Ability::has_secondary_charges() const {
  return _internal_has_secondary_charges();
}
inline void CMsgBotWorldState_Ability::clear_secondary_charges() {
  _impl_.secondary_charges_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CMsgBotWorldState_Ability::_internal_secondary_charges() const {
  return _impl_.secondary_charges_;
}
inline uint32_t CMsgBotWorldState_Ability::secondary_charges() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Ability.secondary_charges)
  return _internal_secondary_charges();
}
inline void CMsgBotWorldState_Ability::_internal_set_secondary_charges(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.secondary_charges_ = value;
}
inline void CMsgBotWorldState_Ability::set_secondary_charges(uint32_t value) {
  _internal_set_secondary_charges(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Ability.secondary_charges)
}

// optional bool is_combined_locked = 40;
inline bool CMsgBotWorldState_Ability::_internal_has_is_combined_locked() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Ability::has_is_combined_locked() const {
  return _internal_has_is_combined_locked();
}
inline void CMsgBotWorldState_Ability::clear_is_combined_locked() {
  _impl_.is_combined_locked_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool CMsgBotWorldState_Ability::_internal_is_combined_locked() const {
  return _impl_.is_combined_locked_;
}
inline bool CMsgBotWorldState_Ability::is_combined_locked() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Ability.is_combined_locked)
  return _internal_is_combined_locked();
}
inline void CMsgBotWorldState_Ability::_internal_set_is_combined_locked(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.is_combined_locked_ = value;
}
inline void CMsgBotWorldState_Ability::set_is_combined_locked(bool value) {
  _internal_set_is_combined_locked(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Ability.is_combined_locked)
}

// optional int32 power_treads_stat = 50 [default = -1];
inline bool CMsgBotWorldState_Ability::_internal_has_power_treads_stat() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Ability::has_power_treads_stat() const {
  return _internal_has_power_treads_stat();
}
inline void CMsgBotWorldState_Ability::clear_power_treads_stat() {
  _impl_.power_treads_stat_ = -1;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline int32_t CMsgBotWorldState_Ability::_internal_power_treads_stat() const {
  return _impl_.power_treads_stat_;
}
inline int32_t CMsgBotWorldState_Ability::power_treads_stat() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Ability.power_treads_stat)
  return _internal_power_treads_stat();
}
inline void CMsgBotWorldState_Ability::_internal_set_power_treads_stat(int32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.power_treads_stat_ = value;
}
inline void CMsgBotWorldState_Ability::set_power_treads_stat(int32_t value) {
  _internal_set_power_treads_stat(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Ability.power_treads_stat)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_DroppedItem

// optional int32 item_id = 1 [default = -1];
inline bool CMsgBotWorldState_DroppedItem::_internal_has_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBotWorldState_DroppedItem::has_item_id() const {
  return _internal_has_item_id();
}
inline void CMsgBotWorldState_DroppedItem::clear_item_id() {
  _impl_.item_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgBotWorldState_DroppedItem::_internal_item_id() const {
  return _impl_.item_id_;
}
inline int32_t CMsgBotWorldState_DroppedItem::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.DroppedItem.item_id)
  return _internal_item_id();
}
inline void CMsgBotWorldState_DroppedItem::_internal_set_item_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.item_id_ = value;
}
inline void CMsgBotWorldState_DroppedItem::set_item_id(int32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.DroppedItem.item_id)
}

// optional .CMsgBotWorldState.Vector location = 2;
inline bool CMsgBotWorldState_DroppedItem::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline bool CMsgBotWorldState_DroppedItem::has_location() const {
  return _internal_has_location();
}
inline void CMsgBotWorldState_DroppedItem::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgBotWorldState_Vector& CMsgBotWorldState_DroppedItem::_internal_location() const {
  const ::CMsgBotWorldState_Vector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBotWorldState_Vector&>(
      ::_CMsgBotWorldState_Vector_default_instance_);
}
inline const ::CMsgBotWorldState_Vector& CMsgBotWorldState_DroppedItem::location() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.DroppedItem.location)
  return _internal_location();
}
inline void CMsgBotWorldState_DroppedItem::unsafe_arena_set_allocated_location(
    ::CMsgBotWorldState_Vector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBotWorldState.DroppedItem.location)
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_DroppedItem::release_location() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBotWorldState_Vector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_DroppedItem::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:CMsgBotWorldState.DroppedItem.location)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBotWorldState_Vector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_DroppedItem::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBotWorldState_Vector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_DroppedItem::mutable_location() {
  ::CMsgBotWorldState_Vector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.DroppedItem.location)
  return _msg;
}
inline void CMsgBotWorldState_DroppedItem::set_allocated_location(::CMsgBotWorldState_Vector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.DroppedItem.location)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_RuneInfo

// optional int32 type = 1;
inline bool CMsgBotWorldState_RuneInfo::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBotWorldState_RuneInfo::has_type() const {
  return _internal_has_type();
}
inline void CMsgBotWorldState_RuneInfo::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgBotWorldState_RuneInfo::_internal_type() const {
  return _impl_.type_;
}
inline int32_t CMsgBotWorldState_RuneInfo::type() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.RuneInfo.type)
  return _internal_type();
}
inline void CMsgBotWorldState_RuneInfo::_internal_set_type(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}
inline void CMsgBotWorldState_RuneInfo::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.RuneInfo.type)
}

// optional .CMsgBotWorldState.Vector location = 2;
inline bool CMsgBotWorldState_RuneInfo::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline bool CMsgBotWorldState_RuneInfo::has_location() const {
  return _internal_has_location();
}
inline void CMsgBotWorldState_RuneInfo::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgBotWorldState_Vector& CMsgBotWorldState_RuneInfo::_internal_location() const {
  const ::CMsgBotWorldState_Vector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBotWorldState_Vector&>(
      ::_CMsgBotWorldState_Vector_default_instance_);
}
inline const ::CMsgBotWorldState_Vector& CMsgBotWorldState_RuneInfo::location() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.RuneInfo.location)
  return _internal_location();
}
inline void CMsgBotWorldState_RuneInfo::unsafe_arena_set_allocated_location(
    ::CMsgBotWorldState_Vector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBotWorldState.RuneInfo.location)
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_RuneInfo::release_location() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBotWorldState_Vector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_RuneInfo::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:CMsgBotWorldState.RuneInfo.location)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBotWorldState_Vector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_RuneInfo::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBotWorldState_Vector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_RuneInfo::mutable_location() {
  ::CMsgBotWorldState_Vector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.RuneInfo.location)
  return _msg;
}
inline void CMsgBotWorldState_RuneInfo::set_allocated_location(::CMsgBotWorldState_Vector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.RuneInfo.location)
}

// optional uint32 status = 3;
inline bool CMsgBotWorldState_RuneInfo::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBotWorldState_RuneInfo::has_status() const {
  return _internal_has_status();
}
inline void CMsgBotWorldState_RuneInfo::clear_status() {
  _impl_.status_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgBotWorldState_RuneInfo::_internal_status() const {
  return _impl_.status_;
}
inline uint32_t CMsgBotWorldState_RuneInfo::status() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.RuneInfo.status)
  return _internal_status();
}
inline void CMsgBotWorldState_RuneInfo::_internal_set_status(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.status_ = value;
}
inline void CMsgBotWorldState_RuneInfo::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.RuneInfo.status)
}

// optional float time_since_seen = 4;
inline bool CMsgBotWorldState_RuneInfo::_internal_has_time_since_seen() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBotWorldState_RuneInfo::has_time_since_seen() const {
  return _internal_has_time_since_seen();
}
inline void CMsgBotWorldState_RuneInfo::clear_time_since_seen() {
  _impl_.time_since_seen_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float CMsgBotWorldState_RuneInfo::_internal_time_since_seen() const {
  return _impl_.time_since_seen_;
}
inline float CMsgBotWorldState_RuneInfo::time_since_seen() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.RuneInfo.time_since_seen)
  return _internal_time_since_seen();
}
inline void CMsgBotWorldState_RuneInfo::_internal_set_time_since_seen(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.time_since_seen_ = value;
}
inline void CMsgBotWorldState_RuneInfo::set_time_since_seen(float value) {
  _internal_set_time_since_seen(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.RuneInfo.time_since_seen)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_TeleportInfo

// optional int32 player_id = 1;
inline bool CMsgBotWorldState_TeleportInfo::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBotWorldState_TeleportInfo::has_player_id() const {
  return _internal_has_player_id();
}
inline void CMsgBotWorldState_TeleportInfo::clear_player_id() {
  _impl_.player_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgBotWorldState_TeleportInfo::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int32_t CMsgBotWorldState_TeleportInfo::player_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.TeleportInfo.player_id)
  return _internal_player_id();
}
inline void CMsgBotWorldState_TeleportInfo::_internal_set_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.player_id_ = value;
}
inline void CMsgBotWorldState_TeleportInfo::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.TeleportInfo.player_id)
}

// optional .CMsgBotWorldState.Vector location = 2;
inline bool CMsgBotWorldState_TeleportInfo::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline bool CMsgBotWorldState_TeleportInfo::has_location() const {
  return _internal_has_location();
}
inline void CMsgBotWorldState_TeleportInfo::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgBotWorldState_Vector& CMsgBotWorldState_TeleportInfo::_internal_location() const {
  const ::CMsgBotWorldState_Vector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBotWorldState_Vector&>(
      ::_CMsgBotWorldState_Vector_default_instance_);
}
inline const ::CMsgBotWorldState_Vector& CMsgBotWorldState_TeleportInfo::location() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.TeleportInfo.location)
  return _internal_location();
}
inline void CMsgBotWorldState_TeleportInfo::unsafe_arena_set_allocated_location(
    ::CMsgBotWorldState_Vector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBotWorldState.TeleportInfo.location)
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_TeleportInfo::release_location() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBotWorldState_Vector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_TeleportInfo::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:CMsgBotWorldState.TeleportInfo.location)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBotWorldState_Vector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_TeleportInfo::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBotWorldState_Vector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_TeleportInfo::mutable_location() {
  ::CMsgBotWorldState_Vector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.TeleportInfo.location)
  return _msg;
}
inline void CMsgBotWorldState_TeleportInfo::set_allocated_location(::CMsgBotWorldState_Vector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.TeleportInfo.location)
}

// optional float time_remaining = 3;
inline bool CMsgBotWorldState_TeleportInfo::_internal_has_time_remaining() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBotWorldState_TeleportInfo::has_time_remaining() const {
  return _internal_has_time_remaining();
}
inline void CMsgBotWorldState_TeleportInfo::clear_time_remaining() {
  _impl_.time_remaining_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CMsgBotWorldState_TeleportInfo::_internal_time_remaining() const {
  return _impl_.time_remaining_;
}
inline float CMsgBotWorldState_TeleportInfo::time_remaining() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.TeleportInfo.time_remaining)
  return _internal_time_remaining();
}
inline void CMsgBotWorldState_TeleportInfo::_internal_set_time_remaining(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.time_remaining_ = value;
}
inline void CMsgBotWorldState_TeleportInfo::set_time_remaining(float value) {
  _internal_set_time_remaining(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.TeleportInfo.time_remaining)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_Modifier

// optional uint32 handle = 7 [(.map_key) = true];
inline bool CMsgBotWorldState_Modifier::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Modifier::has_handle() const {
  return _internal_has_handle();
}
inline void CMsgBotWorldState_Modifier::clear_handle() {
  _impl_.handle_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgBotWorldState_Modifier::_internal_handle() const {
  return _impl_.handle_;
}
inline uint32_t CMsgBotWorldState_Modifier::handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Modifier.handle)
  return _internal_handle();
}
inline void CMsgBotWorldState_Modifier::_internal_set_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.handle_ = value;
}
inline void CMsgBotWorldState_Modifier::set_handle(uint32_t value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Modifier.handle)
}

// optional string name = 1;
inline bool CMsgBotWorldState_Modifier::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Modifier::has_name() const {
  return _internal_has_name();
}
inline void CMsgBotWorldState_Modifier::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgBotWorldState_Modifier::name() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Modifier.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBotWorldState_Modifier::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Modifier.name)
}
inline std::string* CMsgBotWorldState_Modifier::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.Modifier.name)
  return _s;
}
inline const std::string& CMsgBotWorldState_Modifier::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgBotWorldState_Modifier::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgBotWorldState_Modifier::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgBotWorldState_Modifier::release_name() {
  // @@protoc_insertion_point(field_release:CMsgBotWorldState.Modifier.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBotWorldState_Modifier::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Modifier.name)
}

// optional uint32 stack_count = 2;
inline bool CMsgBotWorldState_Modifier::_internal_has_stack_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Modifier::has_stack_count() const {
  return _internal_has_stack_count();
}
inline void CMsgBotWorldState_Modifier::clear_stack_count() {
  _impl_.stack_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgBotWorldState_Modifier::_internal_stack_count() const {
  return _impl_.stack_count_;
}
inline uint32_t CMsgBotWorldState_Modifier::stack_count() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Modifier.stack_count)
  return _internal_stack_count();
}
inline void CMsgBotWorldState_Modifier::_internal_set_stack_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.stack_count_ = value;
}
inline void CMsgBotWorldState_Modifier::set_stack_count(uint32_t value) {
  _internal_set_stack_count(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Modifier.stack_count)
}

// optional uint32 ability_handle = 3 [default = 4294967295];
inline bool CMsgBotWorldState_Modifier::_internal_has_ability_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Modifier::has_ability_handle() const {
  return _internal_has_ability_handle();
}
inline void CMsgBotWorldState_Modifier::clear_ability_handle() {
  _impl_.ability_handle_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgBotWorldState_Modifier::_internal_ability_handle() const {
  return _impl_.ability_handle_;
}
inline uint32_t CMsgBotWorldState_Modifier::ability_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Modifier.ability_handle)
  return _internal_ability_handle();
}
inline void CMsgBotWorldState_Modifier::_internal_set_ability_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.ability_handle_ = value;
}
inline void CMsgBotWorldState_Modifier::set_ability_handle(uint32_t value) {
  _internal_set_ability_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Modifier.ability_handle)
}

// optional int32 ability_id = 4 [default = -1];
inline bool CMsgBotWorldState_Modifier::_internal_has_ability_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Modifier::has_ability_id() const {
  return _internal_has_ability_id();
}
inline void CMsgBotWorldState_Modifier::clear_ability_id() {
  _impl_.ability_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t CMsgBotWorldState_Modifier::_internal_ability_id() const {
  return _impl_.ability_id_;
}
inline int32_t CMsgBotWorldState_Modifier::ability_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Modifier.ability_id)
  return _internal_ability_id();
}
inline void CMsgBotWorldState_Modifier::_internal_set_ability_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ability_id_ = value;
}
inline void CMsgBotWorldState_Modifier::set_ability_id(int32_t value) {
  _internal_set_ability_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Modifier.ability_id)
}

// optional float remaining_duration = 5;
inline bool CMsgBotWorldState_Modifier::_internal_has_remaining_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Modifier::has_remaining_duration() const {
  return _internal_has_remaining_duration();
}
inline void CMsgBotWorldState_Modifier::clear_remaining_duration() {
  _impl_.remaining_duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CMsgBotWorldState_Modifier::_internal_remaining_duration() const {
  return _impl_.remaining_duration_;
}
inline float CMsgBotWorldState_Modifier::remaining_duration() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Modifier.remaining_duration)
  return _internal_remaining_duration();
}
inline void CMsgBotWorldState_Modifier::_internal_set_remaining_duration(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.remaining_duration_ = value;
}
inline void CMsgBotWorldState_Modifier::set_remaining_duration(float value) {
  _internal_set_remaining_duration(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Modifier.remaining_duration)
}

// repeated uint32 auxiliary_units_handles = 6;
inline int CMsgBotWorldState_Modifier::_internal_auxiliary_units_handles_size() const {
  return _impl_.auxiliary_units_handles_.size();
}
inline int CMsgBotWorldState_Modifier::auxiliary_units_handles_size() const {
  return _internal_auxiliary_units_handles_size();
}
inline void CMsgBotWorldState_Modifier::clear_auxiliary_units_handles() {
  _impl_.auxiliary_units_handles_.Clear();
}
inline uint32_t CMsgBotWorldState_Modifier::_internal_auxiliary_units_handles(int index) const {
  return _impl_.auxiliary_units_handles_.Get(index);
}
inline uint32_t CMsgBotWorldState_Modifier::auxiliary_units_handles(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Modifier.auxiliary_units_handles)
  return _internal_auxiliary_units_handles(index);
}
inline void CMsgBotWorldState_Modifier::set_auxiliary_units_handles(int index, uint32_t value) {
  _impl_.auxiliary_units_handles_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Modifier.auxiliary_units_handles)
}
inline void CMsgBotWorldState_Modifier::_internal_add_auxiliary_units_handles(uint32_t value) {
  _impl_.auxiliary_units_handles_.Add(value);
}
inline void CMsgBotWorldState_Modifier::add_auxiliary_units_handles(uint32_t value) {
  _internal_add_auxiliary_units_handles(value);
  // @@protoc_insertion_point(field_add:CMsgBotWorldState.Modifier.auxiliary_units_handles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgBotWorldState_Modifier::_internal_auxiliary_units_handles() const {
  return _impl_.auxiliary_units_handles_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgBotWorldState_Modifier::auxiliary_units_handles() const {
  // @@protoc_insertion_point(field_list:CMsgBotWorldState.Modifier.auxiliary_units_handles)
  return _internal_auxiliary_units_handles();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgBotWorldState_Modifier::_internal_mutable_auxiliary_units_handles() {
  return &_impl_.auxiliary_units_handles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgBotWorldState_Modifier::mutable_auxiliary_units_handles() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBotWorldState.Modifier.auxiliary_units_handles)
  return _internal_mutable_auxiliary_units_handles();
}

// -------------------------------------------------------------------

// CMsgBotWorldState_LinearProjectile

// optional uint32 handle = 1 [(.map_key) = true];
inline bool CMsgBotWorldState_LinearProjectile::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBotWorldState_LinearProjectile::has_handle() const {
  return _internal_has_handle();
}
inline void CMsgBotWorldState_LinearProjectile::clear_handle() {
  _impl_.handle_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgBotWorldState_LinearProjectile::_internal_handle() const {
  return _impl_.handle_;
}
inline uint32_t CMsgBotWorldState_LinearProjectile::handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.LinearProjectile.handle)
  return _internal_handle();
}
inline void CMsgBotWorldState_LinearProjectile::_internal_set_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.handle_ = value;
}
inline void CMsgBotWorldState_LinearProjectile::set_handle(uint32_t value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.LinearProjectile.handle)
}

// optional uint32 caster_handle = 2 [default = 4294967295];
inline bool CMsgBotWorldState_LinearProjectile::_internal_has_caster_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgBotWorldState_LinearProjectile::has_caster_handle() const {
  return _internal_has_caster_handle();
}
inline void CMsgBotWorldState_LinearProjectile::clear_caster_handle() {
  _impl_.caster_handle_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgBotWorldState_LinearProjectile::_internal_caster_handle() const {
  return _impl_.caster_handle_;
}
inline uint32_t CMsgBotWorldState_LinearProjectile::caster_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.LinearProjectile.caster_handle)
  return _internal_caster_handle();
}
inline void CMsgBotWorldState_LinearProjectile::_internal_set_caster_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.caster_handle_ = value;
}
inline void CMsgBotWorldState_LinearProjectile::set_caster_handle(uint32_t value) {
  _internal_set_caster_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.LinearProjectile.caster_handle)
}

// optional .CMsgBotWorldState.UnitType caster_unit_type = 9 [default = INVALID];
inline bool CMsgBotWorldState_LinearProjectile::_internal_has_caster_unit_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBotWorldState_LinearProjectile::has_caster_unit_type() const {
  return _internal_has_caster_unit_type();
}
inline void CMsgBotWorldState_LinearProjectile::clear_caster_unit_type() {
  _impl_.caster_unit_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::CMsgBotWorldState_UnitType CMsgBotWorldState_LinearProjectile::_internal_caster_unit_type() const {
  return static_cast< ::CMsgBotWorldState_UnitType >(_impl_.caster_unit_type_);
}
inline ::CMsgBotWorldState_UnitType CMsgBotWorldState_LinearProjectile::caster_unit_type() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.LinearProjectile.caster_unit_type)
  return _internal_caster_unit_type();
}
inline void CMsgBotWorldState_LinearProjectile::_internal_set_caster_unit_type(::CMsgBotWorldState_UnitType value) {
  assert(::CMsgBotWorldState_UnitType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.caster_unit_type_ = value;
}
inline void CMsgBotWorldState_LinearProjectile::set_caster_unit_type(::CMsgBotWorldState_UnitType value) {
  _internal_set_caster_unit_type(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.LinearProjectile.caster_unit_type)
}

// optional int32 caster_player_id = 3;
inline bool CMsgBotWorldState_LinearProjectile::_internal_has_caster_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBotWorldState_LinearProjectile::has_caster_player_id() const {
  return _internal_has_caster_player_id();
}
inline void CMsgBotWorldState_LinearProjectile::clear_caster_player_id() {
  _impl_.caster_player_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgBotWorldState_LinearProjectile::_internal_caster_player_id() const {
  return _impl_.caster_player_id_;
}
inline int32_t CMsgBotWorldState_LinearProjectile::caster_player_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.LinearProjectile.caster_player_id)
  return _internal_caster_player_id();
}
inline void CMsgBotWorldState_LinearProjectile::_internal_set_caster_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.caster_player_id_ = value;
}
inline void CMsgBotWorldState_LinearProjectile::set_caster_player_id(int32_t value) {
  _internal_set_caster_player_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.LinearProjectile.caster_player_id)
}

// optional uint32 ability_handle = 4 [default = 4294967295];
inline bool CMsgBotWorldState_LinearProjectile::_internal_has_ability_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgBotWorldState_LinearProjectile::has_ability_handle() const {
  return _internal_has_ability_handle();
}
inline void CMsgBotWorldState_LinearProjectile::clear_ability_handle() {
  _impl_.ability_handle_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgBotWorldState_LinearProjectile::_internal_ability_handle() const {
  return _impl_.ability_handle_;
}
inline uint32_t CMsgBotWorldState_LinearProjectile::ability_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.LinearProjectile.ability_handle)
  return _internal_ability_handle();
}
inline void CMsgBotWorldState_LinearProjectile::_internal_set_ability_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.ability_handle_ = value;
}
inline void CMsgBotWorldState_LinearProjectile::set_ability_handle(uint32_t value) {
  _internal_set_ability_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.LinearProjectile.ability_handle)
}

// optional int32 ability_id = 5 [default = -1];
inline bool CMsgBotWorldState_LinearProjectile::_internal_has_ability_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgBotWorldState_LinearProjectile::has_ability_id() const {
  return _internal_has_ability_id();
}
inline void CMsgBotWorldState_LinearProjectile::clear_ability_id() {
  _impl_.ability_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t CMsgBotWorldState_LinearProjectile::_internal_ability_id() const {
  return _impl_.ability_id_;
}
inline int32_t CMsgBotWorldState_LinearProjectile::ability_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.LinearProjectile.ability_id)
  return _internal_ability_id();
}
inline void CMsgBotWorldState_LinearProjectile::_internal_set_ability_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.ability_id_ = value;
}
inline void CMsgBotWorldState_LinearProjectile::set_ability_id(int32_t value) {
  _internal_set_ability_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.LinearProjectile.ability_id)
}

// optional .CMsgBotWorldState.Vector location = 6;
inline bool CMsgBotWorldState_LinearProjectile::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline bool CMsgBotWorldState_LinearProjectile::has_location() const {
  return _internal_has_location();
}
inline void CMsgBotWorldState_LinearProjectile::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgBotWorldState_Vector& CMsgBotWorldState_LinearProjectile::_internal_location() const {
  const ::CMsgBotWorldState_Vector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBotWorldState_Vector&>(
      ::_CMsgBotWorldState_Vector_default_instance_);
}
inline const ::CMsgBotWorldState_Vector& CMsgBotWorldState_LinearProjectile::location() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.LinearProjectile.location)
  return _internal_location();
}
inline void CMsgBotWorldState_LinearProjectile::unsafe_arena_set_allocated_location(
    ::CMsgBotWorldState_Vector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBotWorldState.LinearProjectile.location)
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_LinearProjectile::release_location() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBotWorldState_Vector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_LinearProjectile::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:CMsgBotWorldState.LinearProjectile.location)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBotWorldState_Vector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_LinearProjectile::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBotWorldState_Vector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_LinearProjectile::mutable_location() {
  ::CMsgBotWorldState_Vector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.LinearProjectile.location)
  return _msg;
}
inline void CMsgBotWorldState_LinearProjectile::set_allocated_location(::CMsgBotWorldState_Vector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.LinearProjectile.location)
}

// optional .CMsgBotWorldState.Vector velocity = 7;
inline bool CMsgBotWorldState_LinearProjectile::_internal_has_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_ != nullptr);
  return value;
}
inline bool CMsgBotWorldState_LinearProjectile::has_velocity() const {
  return _internal_has_velocity();
}
inline void CMsgBotWorldState_LinearProjectile::clear_velocity() {
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgBotWorldState_Vector& CMsgBotWorldState_LinearProjectile::_internal_velocity() const {
  const ::CMsgBotWorldState_Vector* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBotWorldState_Vector&>(
      ::_CMsgBotWorldState_Vector_default_instance_);
}
inline const ::CMsgBotWorldState_Vector& CMsgBotWorldState_LinearProjectile::velocity() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.LinearProjectile.velocity)
  return _internal_velocity();
}
inline void CMsgBotWorldState_LinearProjectile::unsafe_arena_set_allocated_velocity(
    ::CMsgBotWorldState_Vector* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBotWorldState.LinearProjectile.velocity)
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_LinearProjectile::release_velocity() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgBotWorldState_Vector* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_LinearProjectile::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:CMsgBotWorldState.LinearProjectile.velocity)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgBotWorldState_Vector* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_LinearProjectile::_internal_mutable_velocity() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBotWorldState_Vector>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_LinearProjectile::mutable_velocity() {
  ::CMsgBotWorldState_Vector* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.LinearProjectile.velocity)
  return _msg;
}
inline void CMsgBotWorldState_LinearProjectile::set_allocated_velocity(::CMsgBotWorldState_Vector* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.LinearProjectile.velocity)
}

// optional uint32 radius = 8;
inline bool CMsgBotWorldState_LinearProjectile::_internal_has_radius() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBotWorldState_LinearProjectile::has_radius() const {
  return _internal_has_radius();
}
inline void CMsgBotWorldState_LinearProjectile::clear_radius() {
  _impl_.radius_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgBotWorldState_LinearProjectile::_internal_radius() const {
  return _impl_.radius_;
}
inline uint32_t CMsgBotWorldState_LinearProjectile::radius() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.LinearProjectile.radius)
  return _internal_radius();
}
inline void CMsgBotWorldState_LinearProjectile::_internal_set_radius(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.radius_ = value;
}
inline void CMsgBotWorldState_LinearProjectile::set_radius(uint32_t value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.LinearProjectile.radius)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_TrackingProjectile

// optional uint32 handle = 10 [(.map_key) = true];
inline bool CMsgBotWorldState_TrackingProjectile::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgBotWorldState_TrackingProjectile::has_handle() const {
  return _internal_has_handle();
}
inline void CMsgBotWorldState_TrackingProjectile::clear_handle() {
  _impl_.handle_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgBotWorldState_TrackingProjectile::_internal_handle() const {
  return _impl_.handle_;
}
inline uint32_t CMsgBotWorldState_TrackingProjectile::handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.TrackingProjectile.handle)
  return _internal_handle();
}
inline void CMsgBotWorldState_TrackingProjectile::_internal_set_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.handle_ = value;
}
inline void CMsgBotWorldState_TrackingProjectile::set_handle(uint32_t value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.TrackingProjectile.handle)
}

// optional uint32 caster_handle = 1 [default = 4294967295];
inline bool CMsgBotWorldState_TrackingProjectile::_internal_has_caster_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgBotWorldState_TrackingProjectile::has_caster_handle() const {
  return _internal_has_caster_handle();
}
inline void CMsgBotWorldState_TrackingProjectile::clear_caster_handle() {
  _impl_.caster_handle_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgBotWorldState_TrackingProjectile::_internal_caster_handle() const {
  return _impl_.caster_handle_;
}
inline uint32_t CMsgBotWorldState_TrackingProjectile::caster_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.TrackingProjectile.caster_handle)
  return _internal_caster_handle();
}
inline void CMsgBotWorldState_TrackingProjectile::_internal_set_caster_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.caster_handle_ = value;
}
inline void CMsgBotWorldState_TrackingProjectile::set_caster_handle(uint32_t value) {
  _internal_set_caster_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.TrackingProjectile.caster_handle)
}

// optional .CMsgBotWorldState.UnitType caster_unit_type = 9 [default = INVALID];
inline bool CMsgBotWorldState_TrackingProjectile::_internal_has_caster_unit_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBotWorldState_TrackingProjectile::has_caster_unit_type() const {
  return _internal_has_caster_unit_type();
}
inline void CMsgBotWorldState_TrackingProjectile::clear_caster_unit_type() {
  _impl_.caster_unit_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::CMsgBotWorldState_UnitType CMsgBotWorldState_TrackingProjectile::_internal_caster_unit_type() const {
  return static_cast< ::CMsgBotWorldState_UnitType >(_impl_.caster_unit_type_);
}
inline ::CMsgBotWorldState_UnitType CMsgBotWorldState_TrackingProjectile::caster_unit_type() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.TrackingProjectile.caster_unit_type)
  return _internal_caster_unit_type();
}
inline void CMsgBotWorldState_TrackingProjectile::_internal_set_caster_unit_type(::CMsgBotWorldState_UnitType value) {
  assert(::CMsgBotWorldState_UnitType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.caster_unit_type_ = value;
}
inline void CMsgBotWorldState_TrackingProjectile::set_caster_unit_type(::CMsgBotWorldState_UnitType value) {
  _internal_set_caster_unit_type(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.TrackingProjectile.caster_unit_type)
}

// optional int32 caster_player_id = 2;
inline bool CMsgBotWorldState_TrackingProjectile::_internal_has_caster_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBotWorldState_TrackingProjectile::has_caster_player_id() const {
  return _internal_has_caster_player_id();
}
inline void CMsgBotWorldState_TrackingProjectile::clear_caster_player_id() {
  _impl_.caster_player_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgBotWorldState_TrackingProjectile::_internal_caster_player_id() const {
  return _impl_.caster_player_id_;
}
inline int32_t CMsgBotWorldState_TrackingProjectile::caster_player_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.TrackingProjectile.caster_player_id)
  return _internal_caster_player_id();
}
inline void CMsgBotWorldState_TrackingProjectile::_internal_set_caster_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.caster_player_id_ = value;
}
inline void CMsgBotWorldState_TrackingProjectile::set_caster_player_id(int32_t value) {
  _internal_set_caster_player_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.TrackingProjectile.caster_player_id)
}

// optional uint32 ability_handle = 3 [default = 4294967295];
inline bool CMsgBotWorldState_TrackingProjectile::_internal_has_ability_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgBotWorldState_TrackingProjectile::has_ability_handle() const {
  return _internal_has_ability_handle();
}
inline void CMsgBotWorldState_TrackingProjectile::clear_ability_handle() {
  _impl_.ability_handle_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgBotWorldState_TrackingProjectile::_internal_ability_handle() const {
  return _impl_.ability_handle_;
}
inline uint32_t CMsgBotWorldState_TrackingProjectile::ability_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.TrackingProjectile.ability_handle)
  return _internal_ability_handle();
}
inline void CMsgBotWorldState_TrackingProjectile::_internal_set_ability_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.ability_handle_ = value;
}
inline void CMsgBotWorldState_TrackingProjectile::set_ability_handle(uint32_t value) {
  _internal_set_ability_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.TrackingProjectile.ability_handle)
}

// optional int32 ability_id = 4 [default = -1];
inline bool CMsgBotWorldState_TrackingProjectile::_internal_has_ability_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgBotWorldState_TrackingProjectile::has_ability_id() const {
  return _internal_has_ability_id();
}
inline void CMsgBotWorldState_TrackingProjectile::clear_ability_id() {
  _impl_.ability_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t CMsgBotWorldState_TrackingProjectile::_internal_ability_id() const {
  return _impl_.ability_id_;
}
inline int32_t CMsgBotWorldState_TrackingProjectile::ability_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.TrackingProjectile.ability_id)
  return _internal_ability_id();
}
inline void CMsgBotWorldState_TrackingProjectile::_internal_set_ability_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.ability_id_ = value;
}
inline void CMsgBotWorldState_TrackingProjectile::set_ability_id(int32_t value) {
  _internal_set_ability_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.TrackingProjectile.ability_id)
}

// optional .CMsgBotWorldState.Vector location = 5;
inline bool CMsgBotWorldState_TrackingProjectile::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline bool CMsgBotWorldState_TrackingProjectile::has_location() const {
  return _internal_has_location();
}
inline void CMsgBotWorldState_TrackingProjectile::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgBotWorldState_Vector& CMsgBotWorldState_TrackingProjectile::_internal_location() const {
  const ::CMsgBotWorldState_Vector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBotWorldState_Vector&>(
      ::_CMsgBotWorldState_Vector_default_instance_);
}
inline const ::CMsgBotWorldState_Vector& CMsgBotWorldState_TrackingProjectile::location() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.TrackingProjectile.location)
  return _internal_location();
}
inline void CMsgBotWorldState_TrackingProjectile::unsafe_arena_set_allocated_location(
    ::CMsgBotWorldState_Vector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBotWorldState.TrackingProjectile.location)
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_TrackingProjectile::release_location() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBotWorldState_Vector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_TrackingProjectile::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:CMsgBotWorldState.TrackingProjectile.location)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBotWorldState_Vector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_TrackingProjectile::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBotWorldState_Vector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_TrackingProjectile::mutable_location() {
  ::CMsgBotWorldState_Vector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.TrackingProjectile.location)
  return _msg;
}
inline void CMsgBotWorldState_TrackingProjectile::set_allocated_location(::CMsgBotWorldState_Vector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.TrackingProjectile.location)
}

// optional uint32 velocity = 6;
inline bool CMsgBotWorldState_TrackingProjectile::_internal_has_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBotWorldState_TrackingProjectile::has_velocity() const {
  return _internal_has_velocity();
}
inline void CMsgBotWorldState_TrackingProjectile::clear_velocity() {
  _impl_.velocity_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgBotWorldState_TrackingProjectile::_internal_velocity() const {
  return _impl_.velocity_;
}
inline uint32_t CMsgBotWorldState_TrackingProjectile::velocity() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.TrackingProjectile.velocity)
  return _internal_velocity();
}
inline void CMsgBotWorldState_TrackingProjectile::_internal_set_velocity(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.velocity_ = value;
}
inline void CMsgBotWorldState_TrackingProjectile::set_velocity(uint32_t value) {
  _internal_set_velocity(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.TrackingProjectile.velocity)
}

// optional bool is_dodgeable = 7;
inline bool CMsgBotWorldState_TrackingProjectile::_internal_has_is_dodgeable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBotWorldState_TrackingProjectile::has_is_dodgeable() const {
  return _internal_has_is_dodgeable();
}
inline void CMsgBotWorldState_TrackingProjectile::clear_is_dodgeable() {
  _impl_.is_dodgeable_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgBotWorldState_TrackingProjectile::_internal_is_dodgeable() const {
  return _impl_.is_dodgeable_;
}
inline bool CMsgBotWorldState_TrackingProjectile::is_dodgeable() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.TrackingProjectile.is_dodgeable)
  return _internal_is_dodgeable();
}
inline void CMsgBotWorldState_TrackingProjectile::_internal_set_is_dodgeable(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.is_dodgeable_ = value;
}
inline void CMsgBotWorldState_TrackingProjectile::set_is_dodgeable(bool value) {
  _internal_set_is_dodgeable(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.TrackingProjectile.is_dodgeable)
}

// optional bool is_attack = 8;
inline bool CMsgBotWorldState_TrackingProjectile::_internal_has_is_attack() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBotWorldState_TrackingProjectile::has_is_attack() const {
  return _internal_has_is_attack();
}
inline void CMsgBotWorldState_TrackingProjectile::clear_is_attack() {
  _impl_.is_attack_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgBotWorldState_TrackingProjectile::_internal_is_attack() const {
  return _impl_.is_attack_;
}
inline bool CMsgBotWorldState_TrackingProjectile::is_attack() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.TrackingProjectile.is_attack)
  return _internal_is_attack();
}
inline void CMsgBotWorldState_TrackingProjectile::_internal_set_is_attack(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.is_attack_ = value;
}
inline void CMsgBotWorldState_TrackingProjectile::set_is_attack(bool value) {
  _internal_set_is_attack(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.TrackingProjectile.is_attack)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_AvoidanceZone

// optional .CMsgBotWorldState.Vector location = 1;
inline bool CMsgBotWorldState_AvoidanceZone::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline bool CMsgBotWorldState_AvoidanceZone::has_location() const {
  return _internal_has_location();
}
inline void CMsgBotWorldState_AvoidanceZone::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgBotWorldState_Vector& CMsgBotWorldState_AvoidanceZone::_internal_location() const {
  const ::CMsgBotWorldState_Vector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBotWorldState_Vector&>(
      ::_CMsgBotWorldState_Vector_default_instance_);
}
inline const ::CMsgBotWorldState_Vector& CMsgBotWorldState_AvoidanceZone::location() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.AvoidanceZone.location)
  return _internal_location();
}
inline void CMsgBotWorldState_AvoidanceZone::unsafe_arena_set_allocated_location(
    ::CMsgBotWorldState_Vector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBotWorldState.AvoidanceZone.location)
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_AvoidanceZone::release_location() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBotWorldState_Vector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_AvoidanceZone::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:CMsgBotWorldState.AvoidanceZone.location)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBotWorldState_Vector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_AvoidanceZone::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBotWorldState_Vector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_AvoidanceZone::mutable_location() {
  ::CMsgBotWorldState_Vector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.AvoidanceZone.location)
  return _msg;
}
inline void CMsgBotWorldState_AvoidanceZone::set_allocated_location(::CMsgBotWorldState_Vector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.AvoidanceZone.location)
}

// optional uint32 caster_handle = 2 [default = 4294967295];
inline bool CMsgBotWorldState_AvoidanceZone::_internal_has_caster_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBotWorldState_AvoidanceZone::has_caster_handle() const {
  return _internal_has_caster_handle();
}
inline void CMsgBotWorldState_AvoidanceZone::clear_caster_handle() {
  _impl_.caster_handle_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgBotWorldState_AvoidanceZone::_internal_caster_handle() const {
  return _impl_.caster_handle_;
}
inline uint32_t CMsgBotWorldState_AvoidanceZone::caster_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.AvoidanceZone.caster_handle)
  return _internal_caster_handle();
}
inline void CMsgBotWorldState_AvoidanceZone::_internal_set_caster_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.caster_handle_ = value;
}
inline void CMsgBotWorldState_AvoidanceZone::set_caster_handle(uint32_t value) {
  _internal_set_caster_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.AvoidanceZone.caster_handle)
}

// optional .CMsgBotWorldState.UnitType caster_unit_type = 7 [default = INVALID];
inline bool CMsgBotWorldState_AvoidanceZone::_internal_has_caster_unit_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBotWorldState_AvoidanceZone::has_caster_unit_type() const {
  return _internal_has_caster_unit_type();
}
inline void CMsgBotWorldState_AvoidanceZone::clear_caster_unit_type() {
  _impl_.caster_unit_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::CMsgBotWorldState_UnitType CMsgBotWorldState_AvoidanceZone::_internal_caster_unit_type() const {
  return static_cast< ::CMsgBotWorldState_UnitType >(_impl_.caster_unit_type_);
}
inline ::CMsgBotWorldState_UnitType CMsgBotWorldState_AvoidanceZone::caster_unit_type() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.AvoidanceZone.caster_unit_type)
  return _internal_caster_unit_type();
}
inline void CMsgBotWorldState_AvoidanceZone::_internal_set_caster_unit_type(::CMsgBotWorldState_UnitType value) {
  assert(::CMsgBotWorldState_UnitType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.caster_unit_type_ = value;
}
inline void CMsgBotWorldState_AvoidanceZone::set_caster_unit_type(::CMsgBotWorldState_UnitType value) {
  _internal_set_caster_unit_type(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.AvoidanceZone.caster_unit_type)
}

// optional int32 caster_player_id = 3;
inline bool CMsgBotWorldState_AvoidanceZone::_internal_has_caster_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBotWorldState_AvoidanceZone::has_caster_player_id() const {
  return _internal_has_caster_player_id();
}
inline void CMsgBotWorldState_AvoidanceZone::clear_caster_player_id() {
  _impl_.caster_player_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgBotWorldState_AvoidanceZone::_internal_caster_player_id() const {
  return _impl_.caster_player_id_;
}
inline int32_t CMsgBotWorldState_AvoidanceZone::caster_player_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.AvoidanceZone.caster_player_id)
  return _internal_caster_player_id();
}
inline void CMsgBotWorldState_AvoidanceZone::_internal_set_caster_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.caster_player_id_ = value;
}
inline void CMsgBotWorldState_AvoidanceZone::set_caster_player_id(int32_t value) {
  _internal_set_caster_player_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.AvoidanceZone.caster_player_id)
}

// optional uint32 ability_handle = 4 [default = 4294967295];
inline bool CMsgBotWorldState_AvoidanceZone::_internal_has_ability_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgBotWorldState_AvoidanceZone::has_ability_handle() const {
  return _internal_has_ability_handle();
}
inline void CMsgBotWorldState_AvoidanceZone::clear_ability_handle() {
  _impl_.ability_handle_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgBotWorldState_AvoidanceZone::_internal_ability_handle() const {
  return _impl_.ability_handle_;
}
inline uint32_t CMsgBotWorldState_AvoidanceZone::ability_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.AvoidanceZone.ability_handle)
  return _internal_ability_handle();
}
inline void CMsgBotWorldState_AvoidanceZone::_internal_set_ability_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.ability_handle_ = value;
}
inline void CMsgBotWorldState_AvoidanceZone::set_ability_handle(uint32_t value) {
  _internal_set_ability_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.AvoidanceZone.ability_handle)
}

// optional int32 ability_id = 5 [default = -1];
inline bool CMsgBotWorldState_AvoidanceZone::_internal_has_ability_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBotWorldState_AvoidanceZone::has_ability_id() const {
  return _internal_has_ability_id();
}
inline void CMsgBotWorldState_AvoidanceZone::clear_ability_id() {
  _impl_.ability_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t CMsgBotWorldState_AvoidanceZone::_internal_ability_id() const {
  return _impl_.ability_id_;
}
inline int32_t CMsgBotWorldState_AvoidanceZone::ability_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.AvoidanceZone.ability_id)
  return _internal_ability_id();
}
inline void CMsgBotWorldState_AvoidanceZone::_internal_set_ability_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.ability_id_ = value;
}
inline void CMsgBotWorldState_AvoidanceZone::set_ability_id(int32_t value) {
  _internal_set_ability_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.AvoidanceZone.ability_id)
}

// optional uint32 radius = 6;
inline bool CMsgBotWorldState_AvoidanceZone::_internal_has_radius() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBotWorldState_AvoidanceZone::has_radius() const {
  return _internal_has_radius();
}
inline void CMsgBotWorldState_AvoidanceZone::clear_radius() {
  _impl_.radius_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgBotWorldState_AvoidanceZone::_internal_radius() const {
  return _impl_.radius_;
}
inline uint32_t CMsgBotWorldState_AvoidanceZone::radius() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.AvoidanceZone.radius)
  return _internal_radius();
}
inline void CMsgBotWorldState_AvoidanceZone::_internal_set_radius(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.radius_ = value;
}
inline void CMsgBotWorldState_AvoidanceZone::set_radius(uint32_t value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.AvoidanceZone.radius)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_Courier

// optional uint32 handle = 1 [(.map_key) = true];
inline bool CMsgBotWorldState_Courier::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Courier::has_handle() const {
  return _internal_has_handle();
}
inline void CMsgBotWorldState_Courier::clear_handle() {
  _impl_.handle_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgBotWorldState_Courier::_internal_handle() const {
  return _impl_.handle_;
}
inline uint32_t CMsgBotWorldState_Courier::handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Courier.handle)
  return _internal_handle();
}
inline void CMsgBotWorldState_Courier::_internal_set_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.handle_ = value;
}
inline void CMsgBotWorldState_Courier::set_handle(uint32_t value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Courier.handle)
}

// optional .CMsgBotWorldState.CourierState state = 2 [default = COURIER_STATE_INIT];
inline bool CMsgBotWorldState_Courier::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Courier::has_state() const {
  return _internal_has_state();
}
inline void CMsgBotWorldState_Courier::clear_state() {
  _impl_.state_ = -1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::CMsgBotWorldState_CourierState CMsgBotWorldState_Courier::_internal_state() const {
  return static_cast< ::CMsgBotWorldState_CourierState >(_impl_.state_);
}
inline ::CMsgBotWorldState_CourierState CMsgBotWorldState_Courier::state() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Courier.state)
  return _internal_state();
}
inline void CMsgBotWorldState_Courier::_internal_set_state(::CMsgBotWorldState_CourierState value) {
  assert(::CMsgBotWorldState_CourierState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.state_ = value;
}
inline void CMsgBotWorldState_Courier::set_state(::CMsgBotWorldState_CourierState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Courier.state)
}

// optional int32 player_id = 3;
inline bool CMsgBotWorldState_Courier::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Courier::has_player_id() const {
  return _internal_has_player_id();
}
inline void CMsgBotWorldState_Courier::clear_player_id() {
  _impl_.player_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgBotWorldState_Courier::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int32_t CMsgBotWorldState_Courier::player_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Courier.player_id)
  return _internal_player_id();
}
inline void CMsgBotWorldState_Courier::_internal_set_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.player_id_ = value;
}
inline void CMsgBotWorldState_Courier::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Courier.player_id)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_EventAbility

// optional int32 ability_id = 1 [default = -1];
inline bool CMsgBotWorldState_EventAbility::_internal_has_ability_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBotWorldState_EventAbility::has_ability_id() const {
  return _internal_has_ability_id();
}
inline void CMsgBotWorldState_EventAbility::clear_ability_id() {
  _impl_.ability_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgBotWorldState_EventAbility::_internal_ability_id() const {
  return _impl_.ability_id_;
}
inline int32_t CMsgBotWorldState_EventAbility::ability_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.EventAbility.ability_id)
  return _internal_ability_id();
}
inline void CMsgBotWorldState_EventAbility::_internal_set_ability_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ability_id_ = value;
}
inline void CMsgBotWorldState_EventAbility::set_ability_id(int32_t value) {
  _internal_set_ability_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.EventAbility.ability_id)
}

// optional int32 player_id = 2;
inline bool CMsgBotWorldState_EventAbility::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBotWorldState_EventAbility::has_player_id() const {
  return _internal_has_player_id();
}
inline void CMsgBotWorldState_EventAbility::clear_player_id() {
  _impl_.player_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgBotWorldState_EventAbility::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int32_t CMsgBotWorldState_EventAbility::player_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.EventAbility.player_id)
  return _internal_player_id();
}
inline void CMsgBotWorldState_EventAbility::_internal_set_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.player_id_ = value;
}
inline void CMsgBotWorldState_EventAbility::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.EventAbility.player_id)
}

// optional uint32 unit_handle = 3 [default = 4294967295];
inline bool CMsgBotWorldState_EventAbility::_internal_has_unit_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBotWorldState_EventAbility::has_unit_handle() const {
  return _internal_has_unit_handle();
}
inline void CMsgBotWorldState_EventAbility::clear_unit_handle() {
  _impl_.unit_handle_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgBotWorldState_EventAbility::_internal_unit_handle() const {
  return _impl_.unit_handle_;
}
inline uint32_t CMsgBotWorldState_EventAbility::unit_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.EventAbility.unit_handle)
  return _internal_unit_handle();
}
inline void CMsgBotWorldState_EventAbility::_internal_set_unit_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.unit_handle_ = value;
}
inline void CMsgBotWorldState_EventAbility::set_unit_handle(uint32_t value) {
  _internal_set_unit_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.EventAbility.unit_handle)
}

// optional .CMsgBotWorldState.Vector location = 4;
inline bool CMsgBotWorldState_EventAbility::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline bool CMsgBotWorldState_EventAbility::has_location() const {
  return _internal_has_location();
}
inline void CMsgBotWorldState_EventAbility::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgBotWorldState_Vector& CMsgBotWorldState_EventAbility::_internal_location() const {
  const ::CMsgBotWorldState_Vector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBotWorldState_Vector&>(
      ::_CMsgBotWorldState_Vector_default_instance_);
}
inline const ::CMsgBotWorldState_Vector& CMsgBotWorldState_EventAbility::location() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.EventAbility.location)
  return _internal_location();
}
inline void CMsgBotWorldState_EventAbility::unsafe_arena_set_allocated_location(
    ::CMsgBotWorldState_Vector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBotWorldState.EventAbility.location)
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_EventAbility::release_location() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBotWorldState_Vector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_EventAbility::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:CMsgBotWorldState.EventAbility.location)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBotWorldState_Vector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_EventAbility::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBotWorldState_Vector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_EventAbility::mutable_location() {
  ::CMsgBotWorldState_Vector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.EventAbility.location)
  return _msg;
}
inline void CMsgBotWorldState_EventAbility::set_allocated_location(::CMsgBotWorldState_Vector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.EventAbility.location)
}

// optional bool is_channel_start = 5;
inline bool CMsgBotWorldState_EventAbility::_internal_has_is_channel_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBotWorldState_EventAbility::has_is_channel_start() const {
  return _internal_has_is_channel_start();
}
inline void CMsgBotWorldState_EventAbility::clear_is_channel_start() {
  _impl_.is_channel_start_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgBotWorldState_EventAbility::_internal_is_channel_start() const {
  return _impl_.is_channel_start_;
}
inline bool CMsgBotWorldState_EventAbility::is_channel_start() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.EventAbility.is_channel_start)
  return _internal_is_channel_start();
}
inline void CMsgBotWorldState_EventAbility::_internal_set_is_channel_start(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.is_channel_start_ = value;
}
inline void CMsgBotWorldState_EventAbility::set_is_channel_start(bool value) {
  _internal_set_is_channel_start(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.EventAbility.is_channel_start)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_EventDamage

// optional uint32 damage = 1;
inline bool CMsgBotWorldState_EventDamage::_internal_has_damage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBotWorldState_EventDamage::has_damage() const {
  return _internal_has_damage();
}
inline void CMsgBotWorldState_EventDamage::clear_damage() {
  _impl_.damage_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgBotWorldState_EventDamage::_internal_damage() const {
  return _impl_.damage_;
}
inline uint32_t CMsgBotWorldState_EventDamage::damage() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.EventDamage.damage)
  return _internal_damage();
}
inline void CMsgBotWorldState_EventDamage::_internal_set_damage(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.damage_ = value;
}
inline void CMsgBotWorldState_EventDamage::set_damage(uint32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.EventDamage.damage)
}

// optional int32 victim_player_id = 2;
inline bool CMsgBotWorldState_EventDamage::_internal_has_victim_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBotWorldState_EventDamage::has_victim_player_id() const {
  return _internal_has_victim_player_id();
}
inline void CMsgBotWorldState_EventDamage::clear_victim_player_id() {
  _impl_.victim_player_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgBotWorldState_EventDamage::_internal_victim_player_id() const {
  return _impl_.victim_player_id_;
}
inline int32_t CMsgBotWorldState_EventDamage::victim_player_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.EventDamage.victim_player_id)
  return _internal_victim_player_id();
}
inline void CMsgBotWorldState_EventDamage::_internal_set_victim_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.victim_player_id_ = value;
}
inline void CMsgBotWorldState_EventDamage::set_victim_player_id(int32_t value) {
  _internal_set_victim_player_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.EventDamage.victim_player_id)
}

// optional uint32 victim_unit_handle = 3 [default = 4294967295];
inline bool CMsgBotWorldState_EventDamage::_internal_has_victim_unit_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBotWorldState_EventDamage::has_victim_unit_handle() const {
  return _internal_has_victim_unit_handle();
}
inline void CMsgBotWorldState_EventDamage::clear_victim_unit_handle() {
  _impl_.victim_unit_handle_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgBotWorldState_EventDamage::_internal_victim_unit_handle() const {
  return _impl_.victim_unit_handle_;
}
inline uint32_t CMsgBotWorldState_EventDamage::victim_unit_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.EventDamage.victim_unit_handle)
  return _internal_victim_unit_handle();
}
inline void CMsgBotWorldState_EventDamage::_internal_set_victim_unit_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.victim_unit_handle_ = value;
}
inline void CMsgBotWorldState_EventDamage::set_victim_unit_handle(uint32_t value) {
  _internal_set_victim_unit_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.EventDamage.victim_unit_handle)
}

// optional int32 attacker_player_id = 4;
inline bool CMsgBotWorldState_EventDamage::_internal_has_attacker_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBotWorldState_EventDamage::has_attacker_player_id() const {
  return _internal_has_attacker_player_id();
}
inline void CMsgBotWorldState_EventDamage::clear_attacker_player_id() {
  _impl_.attacker_player_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgBotWorldState_EventDamage::_internal_attacker_player_id() const {
  return _impl_.attacker_player_id_;
}
inline int32_t CMsgBotWorldState_EventDamage::attacker_player_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.EventDamage.attacker_player_id)
  return _internal_attacker_player_id();
}
inline void CMsgBotWorldState_EventDamage::_internal_set_attacker_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.attacker_player_id_ = value;
}
inline void CMsgBotWorldState_EventDamage::set_attacker_player_id(int32_t value) {
  _internal_set_attacker_player_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.EventDamage.attacker_player_id)
}

// optional uint32 attacker_unit_handle = 5 [default = 4294967295];
inline bool CMsgBotWorldState_EventDamage::_internal_has_attacker_unit_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBotWorldState_EventDamage::has_attacker_unit_handle() const {
  return _internal_has_attacker_unit_handle();
}
inline void CMsgBotWorldState_EventDamage::clear_attacker_unit_handle() {
  _impl_.attacker_unit_handle_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgBotWorldState_EventDamage::_internal_attacker_unit_handle() const {
  return _impl_.attacker_unit_handle_;
}
inline uint32_t CMsgBotWorldState_EventDamage::attacker_unit_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.EventDamage.attacker_unit_handle)
  return _internal_attacker_unit_handle();
}
inline void CMsgBotWorldState_EventDamage::_internal_set_attacker_unit_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.attacker_unit_handle_ = value;
}
inline void CMsgBotWorldState_EventDamage::set_attacker_unit_handle(uint32_t value) {
  _internal_set_attacker_unit_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.EventDamage.attacker_unit_handle)
}

// optional int32 ability_id = 6 [default = -1];
inline bool CMsgBotWorldState_EventDamage::_internal_has_ability_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBotWorldState_EventDamage::has_ability_id() const {
  return _internal_has_ability_id();
}
inline void CMsgBotWorldState_EventDamage::clear_ability_id() {
  _impl_.ability_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgBotWorldState_EventDamage::_internal_ability_id() const {
  return _impl_.ability_id_;
}
inline int32_t CMsgBotWorldState_EventDamage::ability_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.EventDamage.ability_id)
  return _internal_ability_id();
}
inline void CMsgBotWorldState_EventDamage::_internal_set_ability_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ability_id_ = value;
}
inline void CMsgBotWorldState_EventDamage::set_ability_id(int32_t value) {
  _internal_set_ability_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.EventDamage.ability_id)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_EventCourierKilled

// optional uint32 team_id = 1;
inline bool CMsgBotWorldState_EventCourierKilled::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBotWorldState_EventCourierKilled::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgBotWorldState_EventCourierKilled::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgBotWorldState_EventCourierKilled::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgBotWorldState_EventCourierKilled::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.EventCourierKilled.team_id)
  return _internal_team_id();
}
inline void CMsgBotWorldState_EventCourierKilled::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_id_ = value;
}
inline void CMsgBotWorldState_EventCourierKilled::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.EventCourierKilled.team_id)
}

// optional uint32 courier_unit_handle = 2 [default = 4294967295];
inline bool CMsgBotWorldState_EventCourierKilled::_internal_has_courier_unit_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBotWorldState_EventCourierKilled::has_courier_unit_handle() const {
  return _internal_has_courier_unit_handle();
}
inline void CMsgBotWorldState_EventCourierKilled::clear_courier_unit_handle() {
  _impl_.courier_unit_handle_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgBotWorldState_EventCourierKilled::_internal_courier_unit_handle() const {
  return _impl_.courier_unit_handle_;
}
inline uint32_t CMsgBotWorldState_EventCourierKilled::courier_unit_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.EventCourierKilled.courier_unit_handle)
  return _internal_courier_unit_handle();
}
inline void CMsgBotWorldState_EventCourierKilled::_internal_set_courier_unit_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.courier_unit_handle_ = value;
}
inline void CMsgBotWorldState_EventCourierKilled::set_courier_unit_handle(uint32_t value) {
  _internal_set_courier_unit_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.EventCourierKilled.courier_unit_handle)
}

// optional int32 killer_player_id = 3;
inline bool CMsgBotWorldState_EventCourierKilled::_internal_has_killer_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBotWorldState_EventCourierKilled::has_killer_player_id() const {
  return _internal_has_killer_player_id();
}
inline void CMsgBotWorldState_EventCourierKilled::clear_killer_player_id() {
  _impl_.killer_player_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgBotWorldState_EventCourierKilled::_internal_killer_player_id() const {
  return _impl_.killer_player_id_;
}
inline int32_t CMsgBotWorldState_EventCourierKilled::killer_player_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.EventCourierKilled.killer_player_id)
  return _internal_killer_player_id();
}
inline void CMsgBotWorldState_EventCourierKilled::_internal_set_killer_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.killer_player_id_ = value;
}
inline void CMsgBotWorldState_EventCourierKilled::set_killer_player_id(int32_t value) {
  _internal_set_killer_player_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.EventCourierKilled.killer_player_id)
}

// optional uint32 killer_unit_handle = 4 [default = 4294967295];
inline bool CMsgBotWorldState_EventCourierKilled::_internal_has_killer_unit_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBotWorldState_EventCourierKilled::has_killer_unit_handle() const {
  return _internal_has_killer_unit_handle();
}
inline void CMsgBotWorldState_EventCourierKilled::clear_killer_unit_handle() {
  _impl_.killer_unit_handle_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgBotWorldState_EventCourierKilled::_internal_killer_unit_handle() const {
  return _impl_.killer_unit_handle_;
}
inline uint32_t CMsgBotWorldState_EventCourierKilled::killer_unit_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.EventCourierKilled.killer_unit_handle)
  return _internal_killer_unit_handle();
}
inline void CMsgBotWorldState_EventCourierKilled::_internal_set_killer_unit_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.killer_unit_handle_ = value;
}
inline void CMsgBotWorldState_EventCourierKilled::set_killer_unit_handle(uint32_t value) {
  _internal_set_killer_unit_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.EventCourierKilled.killer_unit_handle)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_EventRoshanKilled

// optional int32 killer_player_id = 1;
inline bool CMsgBotWorldState_EventRoshanKilled::_internal_has_killer_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBotWorldState_EventRoshanKilled::has_killer_player_id() const {
  return _internal_has_killer_player_id();
}
inline void CMsgBotWorldState_EventRoshanKilled::clear_killer_player_id() {
  _impl_.killer_player_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgBotWorldState_EventRoshanKilled::_internal_killer_player_id() const {
  return _impl_.killer_player_id_;
}
inline int32_t CMsgBotWorldState_EventRoshanKilled::killer_player_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.EventRoshanKilled.killer_player_id)
  return _internal_killer_player_id();
}
inline void CMsgBotWorldState_EventRoshanKilled::_internal_set_killer_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.killer_player_id_ = value;
}
inline void CMsgBotWorldState_EventRoshanKilled::set_killer_player_id(int32_t value) {
  _internal_set_killer_player_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.EventRoshanKilled.killer_player_id)
}

// optional uint32 killer_unit_handle = 2 [default = 4294967295];
inline bool CMsgBotWorldState_EventRoshanKilled::_internal_has_killer_unit_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBotWorldState_EventRoshanKilled::has_killer_unit_handle() const {
  return _internal_has_killer_unit_handle();
}
inline void CMsgBotWorldState_EventRoshanKilled::clear_killer_unit_handle() {
  _impl_.killer_unit_handle_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgBotWorldState_EventRoshanKilled::_internal_killer_unit_handle() const {
  return _impl_.killer_unit_handle_;
}
inline uint32_t CMsgBotWorldState_EventRoshanKilled::killer_unit_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.EventRoshanKilled.killer_unit_handle)
  return _internal_killer_unit_handle();
}
inline void CMsgBotWorldState_EventRoshanKilled::_internal_set_killer_unit_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.killer_unit_handle_ = value;
}
inline void CMsgBotWorldState_EventRoshanKilled::set_killer_unit_handle(uint32_t value) {
  _internal_set_killer_unit_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.EventRoshanKilled.killer_unit_handle)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_EventTree

// optional uint32 tree_id = 1;
inline bool CMsgBotWorldState_EventTree::_internal_has_tree_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBotWorldState_EventTree::has_tree_id() const {
  return _internal_has_tree_id();
}
inline void CMsgBotWorldState_EventTree::clear_tree_id() {
  _impl_.tree_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgBotWorldState_EventTree::_internal_tree_id() const {
  return _impl_.tree_id_;
}
inline uint32_t CMsgBotWorldState_EventTree::tree_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.EventTree.tree_id)
  return _internal_tree_id();
}
inline void CMsgBotWorldState_EventTree::_internal_set_tree_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tree_id_ = value;
}
inline void CMsgBotWorldState_EventTree::set_tree_id(uint32_t value) {
  _internal_set_tree_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.EventTree.tree_id)
}

// optional bool destroyed = 2;
inline bool CMsgBotWorldState_EventTree::_internal_has_destroyed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBotWorldState_EventTree::has_destroyed() const {
  return _internal_has_destroyed();
}
inline void CMsgBotWorldState_EventTree::clear_destroyed() {
  _impl_.destroyed_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgBotWorldState_EventTree::_internal_destroyed() const {
  return _impl_.destroyed_;
}
inline bool CMsgBotWorldState_EventTree::destroyed() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.EventTree.destroyed)
  return _internal_destroyed();
}
inline void CMsgBotWorldState_EventTree::_internal_set_destroyed(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.destroyed_ = value;
}
inline void CMsgBotWorldState_EventTree::set_destroyed(bool value) {
  _internal_set_destroyed(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.EventTree.destroyed)
}

// optional bool respawned = 3;
inline bool CMsgBotWorldState_EventTree::_internal_has_respawned() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBotWorldState_EventTree::has_respawned() const {
  return _internal_has_respawned();
}
inline void CMsgBotWorldState_EventTree::clear_respawned() {
  _impl_.respawned_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgBotWorldState_EventTree::_internal_respawned() const {
  return _impl_.respawned_;
}
inline bool CMsgBotWorldState_EventTree::respawned() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.EventTree.respawned)
  return _internal_respawned();
}
inline void CMsgBotWorldState_EventTree::_internal_set_respawned(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.respawned_ = value;
}
inline void CMsgBotWorldState_EventTree::set_respawned(bool value) {
  _internal_set_respawned(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.EventTree.respawned)
}

// optional .CMsgBotWorldState.Vector location = 4;
inline bool CMsgBotWorldState_EventTree::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline bool CMsgBotWorldState_EventTree::has_location() const {
  return _internal_has_location();
}
inline void CMsgBotWorldState_EventTree::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgBotWorldState_Vector& CMsgBotWorldState_EventTree::_internal_location() const {
  const ::CMsgBotWorldState_Vector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBotWorldState_Vector&>(
      ::_CMsgBotWorldState_Vector_default_instance_);
}
inline const ::CMsgBotWorldState_Vector& CMsgBotWorldState_EventTree::location() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.EventTree.location)
  return _internal_location();
}
inline void CMsgBotWorldState_EventTree::unsafe_arena_set_allocated_location(
    ::CMsgBotWorldState_Vector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBotWorldState.EventTree.location)
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_EventTree::release_location() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBotWorldState_Vector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_EventTree::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:CMsgBotWorldState.EventTree.location)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBotWorldState_Vector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_EventTree::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBotWorldState_Vector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_EventTree::mutable_location() {
  ::CMsgBotWorldState_Vector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.EventTree.location)
  return _msg;
}
inline void CMsgBotWorldState_EventTree::set_allocated_location(::CMsgBotWorldState_Vector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.EventTree.location)
}

// optional bool delayed = 5;
inline bool CMsgBotWorldState_EventTree::_internal_has_delayed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBotWorldState_EventTree::has_delayed() const {
  return _internal_has_delayed();
}
inline void CMsgBotWorldState_EventTree::clear_delayed() {
  _impl_.delayed_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgBotWorldState_EventTree::_internal_delayed() const {
  return _impl_.delayed_;
}
inline bool CMsgBotWorldState_EventTree::delayed() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.EventTree.delayed)
  return _internal_delayed();
}
inline void CMsgBotWorldState_EventTree::_internal_set_delayed(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.delayed_ = value;
}
inline void CMsgBotWorldState_EventTree::set_delayed(bool value) {
  _internal_set_delayed(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.EventTree.delayed)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_Unit

// optional uint32 handle = 1 [(.map_key) = true];
inline bool CMsgBotWorldState_Unit::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_handle() const {
  return _internal_has_handle();
}
inline void CMsgBotWorldState_Unit::clear_handle() {
  _impl_.handle_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgBotWorldState_Unit::_internal_handle() const {
  return _impl_.handle_;
}
inline uint32_t CMsgBotWorldState_Unit::handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.handle)
  return _internal_handle();
}
inline void CMsgBotWorldState_Unit::_internal_set_handle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.handle_ = value;
}
inline void CMsgBotWorldState_Unit::set_handle(uint32_t value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.handle)
}

// optional .CMsgBotWorldState.UnitType unit_type = 2 [default = INVALID];
inline bool CMsgBotWorldState_Unit::_internal_has_unit_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_unit_type() const {
  return _internal_has_unit_type();
}
inline void CMsgBotWorldState_Unit::clear_unit_type() {
  _impl_.unit_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::CMsgBotWorldState_UnitType CMsgBotWorldState_Unit::_internal_unit_type() const {
  return static_cast< ::CMsgBotWorldState_UnitType >(_impl_.unit_type_);
}
inline ::CMsgBotWorldState_UnitType CMsgBotWorldState_Unit::unit_type() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.unit_type)
  return _internal_unit_type();
}
inline void CMsgBotWorldState_Unit::_internal_set_unit_type(::CMsgBotWorldState_UnitType value) {
  assert(::CMsgBotWorldState_UnitType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.unit_type_ = value;
}
inline void CMsgBotWorldState_Unit::set_unit_type(::CMsgBotWorldState_UnitType value) {
  _internal_set_unit_type(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.unit_type)
}

// optional string name = 3;
inline bool CMsgBotWorldState_Unit::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_name() const {
  return _internal_has_name();
}
inline void CMsgBotWorldState_Unit::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgBotWorldState_Unit::name() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBotWorldState_Unit::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.name)
}
inline std::string* CMsgBotWorldState_Unit::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.Unit.name)
  return _s;
}
inline const std::string& CMsgBotWorldState_Unit::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgBotWorldState_Unit::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgBotWorldState_Unit::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgBotWorldState_Unit::release_name() {
  // @@protoc_insertion_point(field_release:CMsgBotWorldState.Unit.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBotWorldState_Unit::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Unit.name)
}

// optional uint32 team_id = 4;
inline bool CMsgBotWorldState_Unit::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgBotWorldState_Unit::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgBotWorldState_Unit::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgBotWorldState_Unit::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.team_id)
  return _internal_team_id();
}
inline void CMsgBotWorldState_Unit::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.team_id_ = value;
}
inline void CMsgBotWorldState_Unit::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.team_id)
}

// optional uint32 level = 5;
inline bool CMsgBotWorldState_Unit::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_level() const {
  return _internal_has_level();
}
inline void CMsgBotWorldState_Unit::clear_level() {
  _impl_.level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgBotWorldState_Unit::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t CMsgBotWorldState_Unit::level() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.level)
  return _internal_level();
}
inline void CMsgBotWorldState_Unit::_internal_set_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.level_ = value;
}
inline void CMsgBotWorldState_Unit::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.level)
}

// optional .CMsgBotWorldState.Vector location = 6;
inline bool CMsgBotWorldState_Unit::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline bool CMsgBotWorldState_Unit::has_location() const {
  return _internal_has_location();
}
inline void CMsgBotWorldState_Unit::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::CMsgBotWorldState_Vector& CMsgBotWorldState_Unit::_internal_location() const {
  const ::CMsgBotWorldState_Vector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBotWorldState_Vector&>(
      ::_CMsgBotWorldState_Vector_default_instance_);
}
inline const ::CMsgBotWorldState_Vector& CMsgBotWorldState_Unit::location() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.location)
  return _internal_location();
}
inline void CMsgBotWorldState_Unit::unsafe_arena_set_allocated_location(
    ::CMsgBotWorldState_Vector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBotWorldState.Unit.location)
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_Unit::release_location() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CMsgBotWorldState_Vector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_Unit::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:CMsgBotWorldState.Unit.location)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CMsgBotWorldState_Vector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_Unit::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBotWorldState_Vector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::CMsgBotWorldState_Vector* CMsgBotWorldState_Unit::mutable_location() {
  ::CMsgBotWorldState_Vector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.Unit.location)
  return _msg;
}
inline void CMsgBotWorldState_Unit::set_allocated_location(::CMsgBotWorldState_Vector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Unit.location)
}

// optional bool is_alive = 7;
inline bool CMsgBotWorldState_Unit::_internal_has_is_alive() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_is_alive() const {
  return _internal_has_is_alive();
}
inline void CMsgBotWorldState_Unit::clear_is_alive() {
  _impl_.is_alive_ = false;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline bool CMsgBotWorldState_Unit::_internal_is_alive() const {
  return _impl_.is_alive_;
}
inline bool CMsgBotWorldState_Unit::is_alive() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.is_alive)
  return _internal_is_alive();
}
inline void CMsgBotWorldState_Unit::_internal_set_is_alive(bool value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.is_alive_ = value;
}
inline void CMsgBotWorldState_Unit::set_is_alive(bool value) {
  _internal_set_is_alive(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.is_alive)
}

// optional int32 player_id = 8;
inline bool CMsgBotWorldState_Unit::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_player_id() const {
  return _internal_has_player_id();
}
inline void CMsgBotWorldState_Unit::clear_player_id() {
  _impl_.player_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t CMsgBotWorldState_Unit::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int32_t CMsgBotWorldState_Unit::player_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.player_id)
  return _internal_player_id();
}
inline void CMsgBotWorldState_Unit::_internal_set_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.player_id_ = value;
}
inline void CMsgBotWorldState_Unit::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.player_id)
}

// optional int32 bounding_radius = 10;
inline bool CMsgBotWorldState_Unit::_internal_has_bounding_radius() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_bounding_radius() const {
  return _internal_has_bounding_radius();
}
inline void CMsgBotWorldState_Unit::clear_bounding_radius() {
  _impl_.bounding_radius_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t CMsgBotWorldState_Unit::_internal_bounding_radius() const {
  return _impl_.bounding_radius_;
}
inline int32_t CMsgBotWorldState_Unit::bounding_radius() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.bounding_radius)
  return _internal_bounding_radius();
}
inline void CMsgBotWorldState_Unit::_internal_set_bounding_radius(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.bounding_radius_ = value;
}
inline void CMsgBotWorldState_Unit::set_bounding_radius(int32_t value) {
  _internal_set_bounding_radius(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.bounding_radius)
}

// optional int32 facing = 11;
inline bool CMsgBotWorldState_Unit::_internal_has_facing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_facing() const {
  return _internal_has_facing();
}
inline void CMsgBotWorldState_Unit::clear_facing() {
  _impl_.facing_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t CMsgBotWorldState_Unit::_internal_facing() const {
  return _impl_.facing_;
}
inline int32_t CMsgBotWorldState_Unit::facing() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.facing)
  return _internal_facing();
}
inline void CMsgBotWorldState_Unit::_internal_set_facing(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.facing_ = value;
}
inline void CMsgBotWorldState_Unit::set_facing(int32_t value) {
  _internal_set_facing(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.facing)
}

// optional uint32 ground_height = 12;
inline bool CMsgBotWorldState_Unit::_internal_has_ground_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_ground_height() const {
  return _internal_has_ground_height();
}
inline void CMsgBotWorldState_Unit::clear_ground_height() {
  _impl_.ground_height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgBotWorldState_Unit::_internal_ground_height() const {
  return _impl_.ground_height_;
}
inline uint32_t CMsgBotWorldState_Unit::ground_height() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.ground_height)
  return _internal_ground_height();
}
inline void CMsgBotWorldState_Unit::_internal_set_ground_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.ground_height_ = value;
}
inline void CMsgBotWorldState_Unit::set_ground_height(uint32_t value) {
  _internal_set_ground_height(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.ground_height)
}

// optional uint32 vision_range_daytime = 15;
inline bool CMsgBotWorldState_Unit::_internal_has_vision_range_daytime() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_vision_range_daytime() const {
  return _internal_has_vision_range_daytime();
}
inline void CMsgBotWorldState_Unit::clear_vision_range_daytime() {
  _impl_.vision_range_daytime_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgBotWorldState_Unit::_internal_vision_range_daytime() const {
  return _impl_.vision_range_daytime_;
}
inline uint32_t CMsgBotWorldState_Unit::vision_range_daytime() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.vision_range_daytime)
  return _internal_vision_range_daytime();
}
inline void CMsgBotWorldState_Unit::_internal_set_vision_range_daytime(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.vision_range_daytime_ = value;
}
inline void CMsgBotWorldState_Unit::set_vision_range_daytime(uint32_t value) {
  _internal_set_vision_range_daytime(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.vision_range_daytime)
}

// optional uint32 vision_range_nighttime = 16;
inline bool CMsgBotWorldState_Unit::_internal_has_vision_range_nighttime() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_vision_range_nighttime() const {
  return _internal_has_vision_range_nighttime();
}
inline void CMsgBotWorldState_Unit::clear_vision_range_nighttime() {
  _impl_.vision_range_nighttime_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMsgBotWorldState_Unit::_internal_vision_range_nighttime() const {
  return _impl_.vision_range_nighttime_;
}
inline uint32_t CMsgBotWorldState_Unit::vision_range_nighttime() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.vision_range_nighttime)
  return _internal_vision_range_nighttime();
}
inline void CMsgBotWorldState_Unit::_internal_set_vision_range_nighttime(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.vision_range_nighttime_ = value;
}
inline void CMsgBotWorldState_Unit::set_vision_range_nighttime(uint32_t value) {
  _internal_set_vision_range_nighttime(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.vision_range_nighttime)
}

// optional int32 health = 20;
inline bool CMsgBotWorldState_Unit::_internal_has_health() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_health() const {
  return _internal_has_health();
}
inline void CMsgBotWorldState_Unit::clear_health() {
  _impl_.health_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int32_t CMsgBotWorldState_Unit::_internal_health() const {
  return _impl_.health_;
}
inline int32_t CMsgBotWorldState_Unit::health() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.health)
  return _internal_health();
}
inline void CMsgBotWorldState_Unit::_internal_set_health(int32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.health_ = value;
}
inline void CMsgBotWorldState_Unit::set_health(int32_t value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.health)
}

// optional int32 health_max = 21;
inline bool CMsgBotWorldState_Unit::_internal_has_health_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_health_max() const {
  return _internal_has_health_max();
}
inline void CMsgBotWorldState_Unit::clear_health_max() {
  _impl_.health_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline int32_t CMsgBotWorldState_Unit::_internal_health_max() const {
  return _impl_.health_max_;
}
inline int32_t CMsgBotWorldState_Unit::health_max() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.health_max)
  return _internal_health_max();
}
inline void CMsgBotWorldState_Unit::_internal_set_health_max(int32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.health_max_ = value;
}
inline void CMsgBotWorldState_Unit::set_health_max(int32_t value) {
  _internal_set_health_max(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.health_max)
}

// optional float health_regen = 22;
inline bool CMsgBotWorldState_Unit::_internal_has_health_regen() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_health_regen() const {
  return _internal_has_health_regen();
}
inline void CMsgBotWorldState_Unit::clear_health_regen() {
  _impl_.health_regen_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline float CMsgBotWorldState_Unit::_internal_health_regen() const {
  return _impl_.health_regen_;
}
inline float CMsgBotWorldState_Unit::health_regen() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.health_regen)
  return _internal_health_regen();
}
inline void CMsgBotWorldState_Unit::_internal_set_health_regen(float value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.health_regen_ = value;
}
inline void CMsgBotWorldState_Unit::set_health_regen(float value) {
  _internal_set_health_regen(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.health_regen)
}

// optional int32 mana = 25;
inline bool CMsgBotWorldState_Unit::_internal_has_mana() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_mana() const {
  return _internal_has_mana();
}
inline void CMsgBotWorldState_Unit::clear_mana() {
  _impl_.mana_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline int32_t CMsgBotWorldState_Unit::_internal_mana() const {
  return _impl_.mana_;
}
inline int32_t CMsgBotWorldState_Unit::mana() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.mana)
  return _internal_mana();
}
inline void CMsgBotWorldState_Unit::_internal_set_mana(int32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.mana_ = value;
}
inline void CMsgBotWorldState_Unit::set_mana(int32_t value) {
  _internal_set_mana(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.mana)
}

// optional int32 mana_max = 26;
inline bool CMsgBotWorldState_Unit::_internal_has_mana_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_mana_max() const {
  return _internal_has_mana_max();
}
inline void CMsgBotWorldState_Unit::clear_mana_max() {
  _impl_.mana_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline int32_t CMsgBotWorldState_Unit::_internal_mana_max() const {
  return _impl_.mana_max_;
}
inline int32_t CMsgBotWorldState_Unit::mana_max() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.mana_max)
  return _internal_mana_max();
}
inline void CMsgBotWorldState_Unit::_internal_set_mana_max(int32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.mana_max_ = value;
}
inline void CMsgBotWorldState_Unit::set_mana_max(int32_t value) {
  _internal_set_mana_max(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.mana_max)
}

// optional float mana_regen = 27;
inline bool CMsgBotWorldState_Unit::_internal_has_mana_regen() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_mana_regen() const {
  return _internal_has_mana_regen();
}
inline void CMsgBotWorldState_Unit::clear_mana_regen() {
  _impl_.mana_regen_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline float CMsgBotWorldState_Unit::_internal_mana_regen() const {
  return _impl_.mana_regen_;
}
inline float CMsgBotWorldState_Unit::mana_regen() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.mana_regen)
  return _internal_mana_regen();
}
inline void CMsgBotWorldState_Unit::_internal_set_mana_regen(float value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.mana_regen_ = value;
}
inline void CMsgBotWorldState_Unit::set_mana_regen(float value) {
  _internal_set_mana_regen(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.mana_regen)
}

// optional int32 base_movement_speed = 30;
inline bool CMsgBotWorldState_Unit::_internal_has_base_movement_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_base_movement_speed() const {
  return _internal_has_base_movement_speed();
}
inline void CMsgBotWorldState_Unit::clear_base_movement_speed() {
  _impl_.base_movement_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline int32_t CMsgBotWorldState_Unit::_internal_base_movement_speed() const {
  return _impl_.base_movement_speed_;
}
inline int32_t CMsgBotWorldState_Unit::base_movement_speed() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.base_movement_speed)
  return _internal_base_movement_speed();
}
inline void CMsgBotWorldState_Unit::_internal_set_base_movement_speed(int32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.base_movement_speed_ = value;
}
inline void CMsgBotWorldState_Unit::set_base_movement_speed(int32_t value) {
  _internal_set_base_movement_speed(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.base_movement_speed)
}

// optional int32 current_movement_speed = 31;
inline bool CMsgBotWorldState_Unit::_internal_has_current_movement_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_current_movement_speed() const {
  return _internal_has_current_movement_speed();
}
inline void CMsgBotWorldState_Unit::clear_current_movement_speed() {
  _impl_.current_movement_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline int32_t CMsgBotWorldState_Unit::_internal_current_movement_speed() const {
  return _impl_.current_movement_speed_;
}
inline int32_t CMsgBotWorldState_Unit::current_movement_speed() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.current_movement_speed)
  return _internal_current_movement_speed();
}
inline void CMsgBotWorldState_Unit::_internal_set_current_movement_speed(int32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.current_movement_speed_ = value;
}
inline void CMsgBotWorldState_Unit::set_current_movement_speed(int32_t value) {
  _internal_set_current_movement_speed(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.current_movement_speed)
}

// optional int32 anim_activity = 35;
inline bool CMsgBotWorldState_Unit::_internal_has_anim_activity() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_anim_activity() const {
  return _internal_has_anim_activity();
}
inline void CMsgBotWorldState_Unit::clear_anim_activity() {
  _impl_.anim_activity_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline int32_t CMsgBotWorldState_Unit::_internal_anim_activity() const {
  return _impl_.anim_activity_;
}
inline int32_t CMsgBotWorldState_Unit::anim_activity() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.anim_activity)
  return _internal_anim_activity();
}
inline void CMsgBotWorldState_Unit::_internal_set_anim_activity(int32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.anim_activity_ = value;
}
inline void CMsgBotWorldState_Unit::set_anim_activity(int32_t value) {
  _internal_set_anim_activity(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.anim_activity)
}

// optional float anim_cycle = 36;
inline bool CMsgBotWorldState_Unit::_internal_has_anim_cycle() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_anim_cycle() const {
  return _internal_has_anim_cycle();
}
inline void CMsgBotWorldState_Unit::clear_anim_cycle() {
  _impl_.anim_cycle_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline float CMsgBotWorldState_Unit::_internal_anim_cycle() const {
  return _impl_.anim_cycle_;
}
inline float CMsgBotWorldState_Unit::anim_cycle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.anim_cycle)
  return _internal_anim_cycle();
}
inline void CMsgBotWorldState_Unit::_internal_set_anim_cycle(float value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.anim_cycle_ = value;
}
inline void CMsgBotWorldState_Unit::set_anim_cycle(float value) {
  _internal_set_anim_cycle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.anim_cycle)
}

// optional int32 base_damage = 40;
inline bool CMsgBotWorldState_Unit::_internal_has_base_damage() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_base_damage() const {
  return _internal_has_base_damage();
}
inline void CMsgBotWorldState_Unit::clear_base_damage() {
  _impl_.base_damage_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline int32_t CMsgBotWorldState_Unit::_internal_base_damage() const {
  return _impl_.base_damage_;
}
inline int32_t CMsgBotWorldState_Unit::base_damage() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.base_damage)
  return _internal_base_damage();
}
inline void CMsgBotWorldState_Unit::_internal_set_base_damage(int32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.base_damage_ = value;
}
inline void CMsgBotWorldState_Unit::set_base_damage(int32_t value) {
  _internal_set_base_damage(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.base_damage)
}

// optional int32 base_damage_variance = 41;
inline bool CMsgBotWorldState_Unit::_internal_has_base_damage_variance() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_base_damage_variance() const {
  return _internal_has_base_damage_variance();
}
inline void CMsgBotWorldState_Unit::clear_base_damage_variance() {
  _impl_.base_damage_variance_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline int32_t CMsgBotWorldState_Unit::_internal_base_damage_variance() const {
  return _impl_.base_damage_variance_;
}
inline int32_t CMsgBotWorldState_Unit::base_damage_variance() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.base_damage_variance)
  return _internal_base_damage_variance();
}
inline void CMsgBotWorldState_Unit::_internal_set_base_damage_variance(int32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.base_damage_variance_ = value;
}
inline void CMsgBotWorldState_Unit::set_base_damage_variance(int32_t value) {
  _internal_set_base_damage_variance(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.base_damage_variance)
}

// optional int32 bonus_damage = 42;
inline bool CMsgBotWorldState_Unit::_internal_has_bonus_damage() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_bonus_damage() const {
  return _internal_has_bonus_damage();
}
inline void CMsgBotWorldState_Unit::clear_bonus_damage() {
  _impl_.bonus_damage_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline int32_t CMsgBotWorldState_Unit::_internal_bonus_damage() const {
  return _impl_.bonus_damage_;
}
inline int32_t CMsgBotWorldState_Unit::bonus_damage() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.bonus_damage)
  return _internal_bonus_damage();
}
inline void CMsgBotWorldState_Unit::_internal_set_bonus_damage(int32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.bonus_damage_ = value;
}
inline void CMsgBotWorldState_Unit::set_bonus_damage(int32_t value) {
  _internal_set_bonus_damage(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.bonus_damage)
}

// optional int32 attack_damage = 43;
inline bool CMsgBotWorldState_Unit::_internal_has_attack_damage() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_attack_damage() const {
  return _internal_has_attack_damage();
}
inline void CMsgBotWorldState_Unit::clear_attack_damage() {
  _impl_.attack_damage_ = 0;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline int32_t CMsgBotWorldState_Unit::_internal_attack_damage() const {
  return _impl_.attack_damage_;
}
inline int32_t CMsgBotWorldState_Unit::attack_damage() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.attack_damage)
  return _internal_attack_damage();
}
inline void CMsgBotWorldState_Unit::_internal_set_attack_damage(int32_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.attack_damage_ = value;
}
inline void CMsgBotWorldState_Unit::set_attack_damage(int32_t value) {
  _internal_set_attack_damage(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.attack_damage)
}

// optional int32 attack_range = 44;
inline bool CMsgBotWorldState_Unit::_internal_has_attack_range() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_attack_range() const {
  return _internal_has_attack_range();
}
inline void CMsgBotWorldState_Unit::clear_attack_range() {
  _impl_.attack_range_ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline int32_t CMsgBotWorldState_Unit::_internal_attack_range() const {
  return _impl_.attack_range_;
}
inline int32_t CMsgBotWorldState_Unit::attack_range() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.attack_range)
  return _internal_attack_range();
}
inline void CMsgBotWorldState_Unit::_internal_set_attack_range(int32_t value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.attack_range_ = value;
}
inline void CMsgBotWorldState_Unit::set_attack_range(int32_t value) {
  _internal_set_attack_range(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.attack_range)
}

// optional float attack_speed = 45;
inline bool CMsgBotWorldState_Unit::_internal_has_attack_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_attack_speed() const {
  return _internal_has_attack_speed();
}
inline void CMsgBotWorldState_Unit::clear_attack_speed() {
  _impl_.attack_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline float CMsgBotWorldState_Unit::_internal_attack_speed() const {
  return _impl_.attack_speed_;
}
inline float CMsgBotWorldState_Unit::attack_speed() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.attack_speed)
  return _internal_attack_speed();
}
inline void CMsgBotWorldState_Unit::_internal_set_attack_speed(float value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.attack_speed_ = value;
}
inline void CMsgBotWorldState_Unit::set_attack_speed(float value) {
  _internal_set_attack_speed(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.attack_speed)
}

// optional float attack_anim_point = 46;
inline bool CMsgBotWorldState_Unit::_internal_has_attack_anim_point() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_attack_anim_point() const {
  return _internal_has_attack_anim_point();
}
inline void CMsgBotWorldState_Unit::clear_attack_anim_point() {
  _impl_.attack_anim_point_ = 0;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline float CMsgBotWorldState_Unit::_internal_attack_anim_point() const {
  return _impl_.attack_anim_point_;
}
inline float CMsgBotWorldState_Unit::attack_anim_point() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.attack_anim_point)
  return _internal_attack_anim_point();
}
inline void CMsgBotWorldState_Unit::_internal_set_attack_anim_point(float value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.attack_anim_point_ = value;
}
inline void CMsgBotWorldState_Unit::set_attack_anim_point(float value) {
  _internal_set_attack_anim_point(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.attack_anim_point)
}

// optional int32 attack_acquisition_range = 47;
inline bool CMsgBotWorldState_Unit::_internal_has_attack_acquisition_range() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_attack_acquisition_range() const {
  return _internal_has_attack_acquisition_range();
}
inline void CMsgBotWorldState_Unit::clear_attack_acquisition_range() {
  _impl_.attack_acquisition_range_ = 0;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline int32_t CMsgBotWorldState_Unit::_internal_attack_acquisition_range() const {
  return _impl_.attack_acquisition_range_;
}
inline int32_t CMsgBotWorldState_Unit::attack_acquisition_range() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.attack_acquisition_range)
  return _internal_attack_acquisition_range();
}
inline void CMsgBotWorldState_Unit::_internal_set_attack_acquisition_range(int32_t value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.attack_acquisition_range_ = value;
}
inline void CMsgBotWorldState_Unit::set_attack_acquisition_range(int32_t value) {
  _internal_set_attack_acquisition_range(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.attack_acquisition_range)
}

// optional int32 attack_projectile_speed = 48;
inline bool CMsgBotWorldState_Unit::_internal_has_attack_projectile_speed() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_attack_projectile_speed() const {
  return _internal_has_attack_projectile_speed();
}
inline void CMsgBotWorldState_Unit::clear_attack_projectile_speed() {
  _impl_.attack_projectile_speed_ = 0;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline int32_t CMsgBotWorldState_Unit::_internal_attack_projectile_speed() const {
  return _impl_.attack_projectile_speed_;
}
inline int32_t CMsgBotWorldState_Unit::attack_projectile_speed() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.attack_projectile_speed)
  return _internal_attack_projectile_speed();
}
inline void CMsgBotWorldState_Unit::_internal_set_attack_projectile_speed(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.attack_projectile_speed_ = value;
}
inline void CMsgBotWorldState_Unit::set_attack_projectile_speed(int32_t value) {
  _internal_set_attack_projectile_speed(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.attack_projectile_speed)
}

// optional uint32 attack_target_handle = 49 [default = 4294967295];
inline bool CMsgBotWorldState_Unit::_internal_has_attack_target_handle() const {
  bool value = (_impl_._has_bits_[2] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_attack_target_handle() const {
  return _internal_has_attack_target_handle();
}
inline void CMsgBotWorldState_Unit::clear_attack_target_handle() {
  _impl_.attack_target_handle_ = 4294967295u;
  _impl_._has_bits_[2] &= ~0x00020000u;
}
inline uint32_t CMsgBotWorldState_Unit::_internal_attack_target_handle() const {
  return _impl_.attack_target_handle_;
}
inline uint32_t CMsgBotWorldState_Unit::attack_target_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.attack_target_handle)
  return _internal_attack_target_handle();
}
inline void CMsgBotWorldState_Unit::_internal_set_attack_target_handle(uint32_t value) {
  _impl_._has_bits_[2] |= 0x00020000u;
  _impl_.attack_target_handle_ = value;
}
inline void CMsgBotWorldState_Unit::set_attack_target_handle(uint32_t value) {
  _internal_set_attack_target_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.attack_target_handle)
}

// optional string attack_target_name = 52;
inline bool CMsgBotWorldState_Unit::_internal_has_attack_target_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_attack_target_name() const {
  return _internal_has_attack_target_name();
}
inline void CMsgBotWorldState_Unit::clear_attack_target_name() {
  _impl_.attack_target_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgBotWorldState_Unit::attack_target_name() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.attack_target_name)
  return _internal_attack_target_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBotWorldState_Unit::set_attack_target_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.attack_target_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.attack_target_name)
}
inline std::string* CMsgBotWorldState_Unit::mutable_attack_target_name() {
  std::string* _s = _internal_mutable_attack_target_name();
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.Unit.attack_target_name)
  return _s;
}
inline const std::string& CMsgBotWorldState_Unit::_internal_attack_target_name() const {
  return _impl_.attack_target_name_.Get();
}
inline void CMsgBotWorldState_Unit::_internal_set_attack_target_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.attack_target_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgBotWorldState_Unit::_internal_mutable_attack_target_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.attack_target_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgBotWorldState_Unit::release_attack_target_name() {
  // @@protoc_insertion_point(field_release:CMsgBotWorldState.Unit.attack_target_name)
  if (!_internal_has_attack_target_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.attack_target_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attack_target_name_.IsDefault()) {
    _impl_.attack_target_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBotWorldState_Unit::set_allocated_attack_target_name(std::string* attack_target_name) {
  if (attack_target_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.attack_target_name_.SetAllocated(attack_target_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attack_target_name_.IsDefault()) {
    _impl_.attack_target_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Unit.attack_target_name)
}

// optional int32 attacks_per_second = 50 [default = -1];
inline bool CMsgBotWorldState_Unit::_internal_has_attacks_per_second() const {
  bool value = (_impl_._has_bits_[2] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_attacks_per_second() const {
  return _internal_has_attacks_per_second();
}
inline void CMsgBotWorldState_Unit::clear_attacks_per_second() {
  _impl_.attacks_per_second_ = -1;
  _impl_._has_bits_[2] &= ~0x00040000u;
}
inline int32_t CMsgBotWorldState_Unit::_internal_attacks_per_second() const {
  return _impl_.attacks_per_second_;
}
inline int32_t CMsgBotWorldState_Unit::attacks_per_second() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.attacks_per_second)
  return _internal_attacks_per_second();
}
inline void CMsgBotWorldState_Unit::_internal_set_attacks_per_second(int32_t value) {
  _impl_._has_bits_[2] |= 0x00040000u;
  _impl_.attacks_per_second_ = value;
}
inline void CMsgBotWorldState_Unit::set_attacks_per_second(int32_t value) {
  _internal_set_attacks_per_second(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.attacks_per_second)
}

// optional float last_attack_time = 51 [default = -1];
inline bool CMsgBotWorldState_Unit::_internal_has_last_attack_time() const {
  bool value = (_impl_._has_bits_[2] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_last_attack_time() const {
  return _internal_has_last_attack_time();
}
inline void CMsgBotWorldState_Unit::clear_last_attack_time() {
  _impl_.last_attack_time_ = -1;
  _impl_._has_bits_[2] &= ~0x00080000u;
}
inline float CMsgBotWorldState_Unit::_internal_last_attack_time() const {
  return _impl_.last_attack_time_;
}
inline float CMsgBotWorldState_Unit::last_attack_time() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.last_attack_time)
  return _internal_last_attack_time();
}
inline void CMsgBotWorldState_Unit::_internal_set_last_attack_time(float value) {
  _impl_._has_bits_[2] |= 0x00080000u;
  _impl_.last_attack_time_ = value;
}
inline void CMsgBotWorldState_Unit::set_last_attack_time(float value) {
  _internal_set_last_attack_time(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.last_attack_time)
}

// optional uint32 bounty_xp = 60;
inline bool CMsgBotWorldState_Unit::_internal_has_bounty_xp() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_bounty_xp() const {
  return _internal_has_bounty_xp();
}
inline void CMsgBotWorldState_Unit::clear_bounty_xp() {
  _impl_.bounty_xp_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline uint32_t CMsgBotWorldState_Unit::_internal_bounty_xp() const {
  return _impl_.bounty_xp_;
}
inline uint32_t CMsgBotWorldState_Unit::bounty_xp() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.bounty_xp)
  return _internal_bounty_xp();
}
inline void CMsgBotWorldState_Unit::_internal_set_bounty_xp(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.bounty_xp_ = value;
}
inline void CMsgBotWorldState_Unit::set_bounty_xp(uint32_t value) {
  _internal_set_bounty_xp(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.bounty_xp)
}

// optional uint32 bounty_gold_min = 61;
inline bool CMsgBotWorldState_Unit::_internal_has_bounty_gold_min() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_bounty_gold_min() const {
  return _internal_has_bounty_gold_min();
}
inline void CMsgBotWorldState_Unit::clear_bounty_gold_min() {
  _impl_.bounty_gold_min_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline uint32_t CMsgBotWorldState_Unit::_internal_bounty_gold_min() const {
  return _impl_.bounty_gold_min_;
}
inline uint32_t CMsgBotWorldState_Unit::bounty_gold_min() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.bounty_gold_min)
  return _internal_bounty_gold_min();
}
inline void CMsgBotWorldState_Unit::_internal_set_bounty_gold_min(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.bounty_gold_min_ = value;
}
inline void CMsgBotWorldState_Unit::set_bounty_gold_min(uint32_t value) {
  _internal_set_bounty_gold_min(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.bounty_gold_min)
}

// optional uint32 bounty_gold_max = 62;
inline bool CMsgBotWorldState_Unit::_internal_has_bounty_gold_max() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_bounty_gold_max() const {
  return _internal_has_bounty_gold_max();
}
inline void CMsgBotWorldState_Unit::clear_bounty_gold_max() {
  _impl_.bounty_gold_max_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline uint32_t CMsgBotWorldState_Unit::_internal_bounty_gold_max() const {
  return _impl_.bounty_gold_max_;
}
inline uint32_t CMsgBotWorldState_Unit::bounty_gold_max() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.bounty_gold_max)
  return _internal_bounty_gold_max();
}
inline void CMsgBotWorldState_Unit::_internal_set_bounty_gold_max(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.bounty_gold_max_ = value;
}
inline void CMsgBotWorldState_Unit::set_bounty_gold_max(uint32_t value) {
  _internal_set_bounty_gold_max(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.bounty_gold_max)
}

// optional bool is_channeling = 65;
inline bool CMsgBotWorldState_Unit::_internal_has_is_channeling() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_is_channeling() const {
  return _internal_has_is_channeling();
}
inline void CMsgBotWorldState_Unit::clear_is_channeling() {
  _impl_.is_channeling_ = false;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline bool CMsgBotWorldState_Unit::_internal_is_channeling() const {
  return _impl_.is_channeling_;
}
inline bool CMsgBotWorldState_Unit::is_channeling() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.is_channeling)
  return _internal_is_channeling();
}
inline void CMsgBotWorldState_Unit::_internal_set_is_channeling(bool value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.is_channeling_ = value;
}
inline void CMsgBotWorldState_Unit::set_is_channeling(bool value) {
  _internal_set_is_channeling(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.is_channeling)
}

// optional uint32 active_ability_handle = 66 [default = 4294967295];
inline bool CMsgBotWorldState_Unit::_internal_has_active_ability_handle() const {
  bool value = (_impl_._has_bits_[2] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_active_ability_handle() const {
  return _internal_has_active_ability_handle();
}
inline void CMsgBotWorldState_Unit::clear_active_ability_handle() {
  _impl_.active_ability_handle_ = 4294967295u;
  _impl_._has_bits_[2] &= ~0x00100000u;
}
inline uint32_t CMsgBotWorldState_Unit::_internal_active_ability_handle() const {
  return _impl_.active_ability_handle_;
}
inline uint32_t CMsgBotWorldState_Unit::active_ability_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.active_ability_handle)
  return _internal_active_ability_handle();
}
inline void CMsgBotWorldState_Unit::_internal_set_active_ability_handle(uint32_t value) {
  _impl_._has_bits_[2] |= 0x00100000u;
  _impl_.active_ability_handle_ = value;
}
inline void CMsgBotWorldState_Unit::set_active_ability_handle(uint32_t value) {
  _internal_set_active_ability_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.active_ability_handle)
}

// optional bool is_attack_immune = 70;
inline bool CMsgBotWorldState_Unit::_internal_has_is_attack_immune() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_is_attack_immune() const {
  return _internal_has_is_attack_immune();
}
inline void CMsgBotWorldState_Unit::clear_is_attack_immune() {
  _impl_.is_attack_immune_ = false;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline bool CMsgBotWorldState_Unit::_internal_is_attack_immune() const {
  return _impl_.is_attack_immune_;
}
inline bool CMsgBotWorldState_Unit::is_attack_immune() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.is_attack_immune)
  return _internal_is_attack_immune();
}
inline void CMsgBotWorldState_Unit::_internal_set_is_attack_immune(bool value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.is_attack_immune_ = value;
}
inline void CMsgBotWorldState_Unit::set_is_attack_immune(bool value) {
  _internal_set_is_attack_immune(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.is_attack_immune)
}

// optional bool is_blind = 71;
inline bool CMsgBotWorldState_Unit::_internal_has_is_blind() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_is_blind() const {
  return _internal_has_is_blind();
}
inline void CMsgBotWorldState_Unit::clear_is_blind() {
  _impl_.is_blind_ = false;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline bool CMsgBotWorldState_Unit::_internal_is_blind() const {
  return _impl_.is_blind_;
}
inline bool CMsgBotWorldState_Unit::is_blind() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.is_blind)
  return _internal_is_blind();
}
inline void CMsgBotWorldState_Unit::_internal_set_is_blind(bool value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.is_blind_ = value;
}
inline void CMsgBotWorldState_Unit::set_is_blind(bool value) {
  _internal_set_is_blind(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.is_blind)
}

// optional bool is_block_disabled = 72;
inline bool CMsgBotWorldState_Unit::_internal_has_is_block_disabled() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_is_block_disabled() const {
  return _internal_has_is_block_disabled();
}
inline void CMsgBotWorldState_Unit::clear_is_block_disabled() {
  _impl_.is_block_disabled_ = false;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline bool CMsgBotWorldState_Unit::_internal_is_block_disabled() const {
  return _impl_.is_block_disabled_;
}
inline bool CMsgBotWorldState_Unit::is_block_disabled() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.is_block_disabled)
  return _internal_is_block_disabled();
}
inline void CMsgBotWorldState_Unit::_internal_set_is_block_disabled(bool value) {
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.is_block_disabled_ = value;
}
inline void CMsgBotWorldState_Unit::set_is_block_disabled(bool value) {
  _internal_set_is_block_disabled(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.is_block_disabled)
}

// optional bool is_disarmed = 73;
inline bool CMsgBotWorldState_Unit::_internal_has_is_disarmed() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_is_disarmed() const {
  return _internal_has_is_disarmed();
}
inline void CMsgBotWorldState_Unit::clear_is_disarmed() {
  _impl_.is_disarmed_ = false;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline bool CMsgBotWorldState_Unit::_internal_is_disarmed() const {
  return _impl_.is_disarmed_;
}
inline bool CMsgBotWorldState_Unit::is_disarmed() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.is_disarmed)
  return _internal_is_disarmed();
}
inline void CMsgBotWorldState_Unit::_internal_set_is_disarmed(bool value) {
  _impl_._has_bits_[1] |= 0x00000200u;
  _impl_.is_disarmed_ = value;
}
inline void CMsgBotWorldState_Unit::set_is_disarmed(bool value) {
  _internal_set_is_disarmed(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.is_disarmed)
}

// optional bool is_dominated = 74;
inline bool CMsgBotWorldState_Unit::_internal_has_is_dominated() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_is_dominated() const {
  return _internal_has_is_dominated();
}
inline void CMsgBotWorldState_Unit::clear_is_dominated() {
  _impl_.is_dominated_ = false;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline bool CMsgBotWorldState_Unit::_internal_is_dominated() const {
  return _impl_.is_dominated_;
}
inline bool CMsgBotWorldState_Unit::is_dominated() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.is_dominated)
  return _internal_is_dominated();
}
inline void CMsgBotWorldState_Unit::_internal_set_is_dominated(bool value) {
  _impl_._has_bits_[1] |= 0x00000400u;
  _impl_.is_dominated_ = value;
}
inline void CMsgBotWorldState_Unit::set_is_dominated(bool value) {
  _internal_set_is_dominated(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.is_dominated)
}

// optional bool is_evade_disabled = 75;
inline bool CMsgBotWorldState_Unit::_internal_has_is_evade_disabled() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_is_evade_disabled() const {
  return _internal_has_is_evade_disabled();
}
inline void CMsgBotWorldState_Unit::clear_is_evade_disabled() {
  _impl_.is_evade_disabled_ = false;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline bool CMsgBotWorldState_Unit::_internal_is_evade_disabled() const {
  return _impl_.is_evade_disabled_;
}
inline bool CMsgBotWorldState_Unit::is_evade_disabled() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.is_evade_disabled)
  return _internal_is_evade_disabled();
}
inline void CMsgBotWorldState_Unit::_internal_set_is_evade_disabled(bool value) {
  _impl_._has_bits_[1] |= 0x00000800u;
  _impl_.is_evade_disabled_ = value;
}
inline void CMsgBotWorldState_Unit::set_is_evade_disabled(bool value) {
  _internal_set_is_evade_disabled(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.is_evade_disabled)
}

// optional bool is_hexed = 76;
inline bool CMsgBotWorldState_Unit::_internal_has_is_hexed() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_is_hexed() const {
  return _internal_has_is_hexed();
}
inline void CMsgBotWorldState_Unit::clear_is_hexed() {
  _impl_.is_hexed_ = false;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline bool CMsgBotWorldState_Unit::_internal_is_hexed() const {
  return _impl_.is_hexed_;
}
inline bool CMsgBotWorldState_Unit::is_hexed() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.is_hexed)
  return _internal_is_hexed();
}
inline void CMsgBotWorldState_Unit::_internal_set_is_hexed(bool value) {
  _impl_._has_bits_[1] |= 0x00001000u;
  _impl_.is_hexed_ = value;
}
inline void CMsgBotWorldState_Unit::set_is_hexed(bool value) {
  _internal_set_is_hexed(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.is_hexed)
}

// optional bool is_invisible = 77;
inline bool CMsgBotWorldState_Unit::_internal_has_is_invisible() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_is_invisible() const {
  return _internal_has_is_invisible();
}
inline void CMsgBotWorldState_Unit::clear_is_invisible() {
  _impl_.is_invisible_ = false;
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline bool CMsgBotWorldState_Unit::_internal_is_invisible() const {
  return _impl_.is_invisible_;
}
inline bool CMsgBotWorldState_Unit::is_invisible() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.is_invisible)
  return _internal_is_invisible();
}
inline void CMsgBotWorldState_Unit::_internal_set_is_invisible(bool value) {
  _impl_._has_bits_[1] |= 0x00002000u;
  _impl_.is_invisible_ = value;
}
inline void CMsgBotWorldState_Unit::set_is_invisible(bool value) {
  _internal_set_is_invisible(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.is_invisible)
}

// optional bool is_invulnerable = 78;
inline bool CMsgBotWorldState_Unit::_internal_has_is_invulnerable() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_is_invulnerable() const {
  return _internal_has_is_invulnerable();
}
inline void CMsgBotWorldState_Unit::clear_is_invulnerable() {
  _impl_.is_invulnerable_ = false;
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline bool CMsgBotWorldState_Unit::_internal_is_invulnerable() const {
  return _impl_.is_invulnerable_;
}
inline bool CMsgBotWorldState_Unit::is_invulnerable() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.is_invulnerable)
  return _internal_is_invulnerable();
}
inline void CMsgBotWorldState_Unit::_internal_set_is_invulnerable(bool value) {
  _impl_._has_bits_[1] |= 0x00004000u;
  _impl_.is_invulnerable_ = value;
}
inline void CMsgBotWorldState_Unit::set_is_invulnerable(bool value) {
  _internal_set_is_invulnerable(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.is_invulnerable)
}

// optional bool is_magic_immune = 79;
inline bool CMsgBotWorldState_Unit::_internal_has_is_magic_immune() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_is_magic_immune() const {
  return _internal_has_is_magic_immune();
}
inline void CMsgBotWorldState_Unit::clear_is_magic_immune() {
  _impl_.is_magic_immune_ = false;
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline bool CMsgBotWorldState_Unit::_internal_is_magic_immune() const {
  return _impl_.is_magic_immune_;
}
inline bool CMsgBotWorldState_Unit::is_magic_immune() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.is_magic_immune)
  return _internal_is_magic_immune();
}
inline void CMsgBotWorldState_Unit::_internal_set_is_magic_immune(bool value) {
  _impl_._has_bits_[1] |= 0x00008000u;
  _impl_.is_magic_immune_ = value;
}
inline void CMsgBotWorldState_Unit::set_is_magic_immune(bool value) {
  _internal_set_is_magic_immune(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.is_magic_immune)
}

// optional bool is_muted = 80;
inline bool CMsgBotWorldState_Unit::_internal_has_is_muted() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_is_muted() const {
  return _internal_has_is_muted();
}
inline void CMsgBotWorldState_Unit::clear_is_muted() {
  _impl_.is_muted_ = false;
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline bool CMsgBotWorldState_Unit::_internal_is_muted() const {
  return _impl_.is_muted_;
}
inline bool CMsgBotWorldState_Unit::is_muted() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.is_muted)
  return _internal_is_muted();
}
inline void CMsgBotWorldState_Unit::_internal_set_is_muted(bool value) {
  _impl_._has_bits_[1] |= 0x00010000u;
  _impl_.is_muted_ = value;
}
inline void CMsgBotWorldState_Unit::set_is_muted(bool value) {
  _internal_set_is_muted(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.is_muted)
}

// optional bool is_nightmared = 82;
inline bool CMsgBotWorldState_Unit::_internal_has_is_nightmared() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_is_nightmared() const {
  return _internal_has_is_nightmared();
}
inline void CMsgBotWorldState_Unit::clear_is_nightmared() {
  _impl_.is_nightmared_ = false;
  _impl_._has_bits_[1] &= ~0x00020000u;
}
inline bool CMsgBotWorldState_Unit::_internal_is_nightmared() const {
  return _impl_.is_nightmared_;
}
inline bool CMsgBotWorldState_Unit::is_nightmared() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.is_nightmared)
  return _internal_is_nightmared();
}
inline void CMsgBotWorldState_Unit::_internal_set_is_nightmared(bool value) {
  _impl_._has_bits_[1] |= 0x00020000u;
  _impl_.is_nightmared_ = value;
}
inline void CMsgBotWorldState_Unit::set_is_nightmared(bool value) {
  _internal_set_is_nightmared(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.is_nightmared)
}

// optional bool is_rooted = 83;
inline bool CMsgBotWorldState_Unit::_internal_has_is_rooted() const {
  bool value = (_impl_._has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_is_rooted() const {
  return _internal_has_is_rooted();
}
inline void CMsgBotWorldState_Unit::clear_is_rooted() {
  _impl_.is_rooted_ = false;
  _impl_._has_bits_[1] &= ~0x00040000u;
}
inline bool CMsgBotWorldState_Unit::_internal_is_rooted() const {
  return _impl_.is_rooted_;
}
inline bool CMsgBotWorldState_Unit::is_rooted() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.is_rooted)
  return _internal_is_rooted();
}
inline void CMsgBotWorldState_Unit::_internal_set_is_rooted(bool value) {
  _impl_._has_bits_[1] |= 0x00040000u;
  _impl_.is_rooted_ = value;
}
inline void CMsgBotWorldState_Unit::set_is_rooted(bool value) {
  _internal_set_is_rooted(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.is_rooted)
}

// optional bool is_silenced = 84;
inline bool CMsgBotWorldState_Unit::_internal_has_is_silenced() const {
  bool value = (_impl_._has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_is_silenced() const {
  return _internal_has_is_silenced();
}
inline void CMsgBotWorldState_Unit::clear_is_silenced() {
  _impl_.is_silenced_ = false;
  _impl_._has_bits_[1] &= ~0x00080000u;
}
inline bool CMsgBotWorldState_Unit::_internal_is_silenced() const {
  return _impl_.is_silenced_;
}
inline bool CMsgBotWorldState_Unit::is_silenced() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.is_silenced)
  return _internal_is_silenced();
}
inline void CMsgBotWorldState_Unit::_internal_set_is_silenced(bool value) {
  _impl_._has_bits_[1] |= 0x00080000u;
  _impl_.is_silenced_ = value;
}
inline void CMsgBotWorldState_Unit::set_is_silenced(bool value) {
  _internal_set_is_silenced(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.is_silenced)
}

// optional bool is_specially_deniable = 85;
inline bool CMsgBotWorldState_Unit::_internal_has_is_specially_deniable() const {
  bool value = (_impl_._has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_is_specially_deniable() const {
  return _internal_has_is_specially_deniable();
}
inline void CMsgBotWorldState_Unit::clear_is_specially_deniable() {
  _impl_.is_specially_deniable_ = false;
  _impl_._has_bits_[1] &= ~0x00100000u;
}
inline bool CMsgBotWorldState_Unit::_internal_is_specially_deniable() const {
  return _impl_.is_specially_deniable_;
}
inline bool CMsgBotWorldState_Unit::is_specially_deniable() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.is_specially_deniable)
  return _internal_is_specially_deniable();
}
inline void CMsgBotWorldState_Unit::_internal_set_is_specially_deniable(bool value) {
  _impl_._has_bits_[1] |= 0x00100000u;
  _impl_.is_specially_deniable_ = value;
}
inline void CMsgBotWorldState_Unit::set_is_specially_deniable(bool value) {
  _internal_set_is_specially_deniable(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.is_specially_deniable)
}

// optional bool is_stunned = 86;
inline bool CMsgBotWorldState_Unit::_internal_has_is_stunned() const {
  bool value = (_impl_._has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_is_stunned() const {
  return _internal_has_is_stunned();
}
inline void CMsgBotWorldState_Unit::clear_is_stunned() {
  _impl_.is_stunned_ = false;
  _impl_._has_bits_[1] &= ~0x00200000u;
}
inline bool CMsgBotWorldState_Unit::_internal_is_stunned() const {
  return _impl_.is_stunned_;
}
inline bool CMsgBotWorldState_Unit::is_stunned() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.is_stunned)
  return _internal_is_stunned();
}
inline void CMsgBotWorldState_Unit::_internal_set_is_stunned(bool value) {
  _impl_._has_bits_[1] |= 0x00200000u;
  _impl_.is_stunned_ = value;
}
inline void CMsgBotWorldState_Unit::set_is_stunned(bool value) {
  _internal_set_is_stunned(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.is_stunned)
}

// optional bool is_unable_to_miss = 87;
inline bool CMsgBotWorldState_Unit::_internal_has_is_unable_to_miss() const {
  bool value = (_impl_._has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_is_unable_to_miss() const {
  return _internal_has_is_unable_to_miss();
}
inline void CMsgBotWorldState_Unit::clear_is_unable_to_miss() {
  _impl_.is_unable_to_miss_ = false;
  _impl_._has_bits_[1] &= ~0x00400000u;
}
inline bool CMsgBotWorldState_Unit::_internal_is_unable_to_miss() const {
  return _impl_.is_unable_to_miss_;
}
inline bool CMsgBotWorldState_Unit::is_unable_to_miss() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.is_unable_to_miss)
  return _internal_is_unable_to_miss();
}
inline void CMsgBotWorldState_Unit::_internal_set_is_unable_to_miss(bool value) {
  _impl_._has_bits_[1] |= 0x00400000u;
  _impl_.is_unable_to_miss_ = value;
}
inline void CMsgBotWorldState_Unit::set_is_unable_to_miss(bool value) {
  _internal_set_is_unable_to_miss(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.is_unable_to_miss)
}

// optional bool has_scepter = 88;
inline bool CMsgBotWorldState_Unit::_internal_has_has_scepter() const {
  bool value = (_impl_._has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_has_scepter() const {
  return _internal_has_has_scepter();
}
inline void CMsgBotWorldState_Unit::clear_has_scepter() {
  _impl_.has_scepter_ = false;
  _impl_._has_bits_[1] &= ~0x00800000u;
}
inline bool CMsgBotWorldState_Unit::_internal_has_scepter() const {
  return _impl_.has_scepter_;
}
inline bool CMsgBotWorldState_Unit::has_scepter() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.has_scepter)
  return _internal_has_scepter();
}
inline void CMsgBotWorldState_Unit::_internal_set_has_scepter(bool value) {
  _impl_._has_bits_[1] |= 0x00800000u;
  _impl_.has_scepter_ = value;
}
inline void CMsgBotWorldState_Unit::set_has_scepter(bool value) {
  _internal_set_has_scepter(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.has_scepter)
}

// optional bool is_specially_undeniable = 94;
inline bool CMsgBotWorldState_Unit::_internal_has_is_specially_undeniable() const {
  bool value = (_impl_._has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_is_specially_undeniable() const {
  return _internal_has_is_specially_undeniable();
}
inline void CMsgBotWorldState_Unit::clear_is_specially_undeniable() {
  _impl_.is_specially_undeniable_ = false;
  _impl_._has_bits_[1] &= ~0x04000000u;
}
inline bool CMsgBotWorldState_Unit::_internal_is_specially_undeniable() const {
  return _impl_.is_specially_undeniable_;
}
inline bool CMsgBotWorldState_Unit::is_specially_undeniable() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.is_specially_undeniable)
  return _internal_is_specially_undeniable();
}
inline void CMsgBotWorldState_Unit::_internal_set_is_specially_undeniable(bool value) {
  _impl_._has_bits_[1] |= 0x04000000u;
  _impl_.is_specially_undeniable_ = value;
}
inline void CMsgBotWorldState_Unit::set_is_specially_undeniable(bool value) {
  _internal_set_is_specially_undeniable(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.is_specially_undeniable)
}

// repeated .CMsgBotWorldState.Ability abilities = 90 [(.map_field) = true];
inline int CMsgBotWorldState_Unit::_internal_abilities_size() const {
  return _impl_.abilities_.size();
}
inline int CMsgBotWorldState_Unit::abilities_size() const {
  return _internal_abilities_size();
}
inline void CMsgBotWorldState_Unit::clear_abilities() {
  _impl_.abilities_.Clear();
}
inline ::CMsgBotWorldState_Ability* CMsgBotWorldState_Unit::mutable_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.Unit.abilities)
  return _impl_.abilities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Ability >*
CMsgBotWorldState_Unit::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBotWorldState.Unit.abilities)
  return &_impl_.abilities_;
}
inline const ::CMsgBotWorldState_Ability& CMsgBotWorldState_Unit::_internal_abilities(int index) const {
  return _impl_.abilities_.Get(index);
}
inline const ::CMsgBotWorldState_Ability& CMsgBotWorldState_Unit::abilities(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.abilities)
  return _internal_abilities(index);
}
inline ::CMsgBotWorldState_Ability* CMsgBotWorldState_Unit::_internal_add_abilities() {
  return _impl_.abilities_.Add();
}
inline ::CMsgBotWorldState_Ability* CMsgBotWorldState_Unit::add_abilities() {
  ::CMsgBotWorldState_Ability* _add = _internal_add_abilities();
  // @@protoc_insertion_point(field_add:CMsgBotWorldState.Unit.abilities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Ability >&
CMsgBotWorldState_Unit::abilities() const {
  // @@protoc_insertion_point(field_list:CMsgBotWorldState.Unit.abilities)
  return _impl_.abilities_;
}

// repeated .CMsgBotWorldState.Ability items = 91 [(.map_field) = true];
inline int CMsgBotWorldState_Unit::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int CMsgBotWorldState_Unit::items_size() const {
  return _internal_items_size();
}
inline void CMsgBotWorldState_Unit::clear_items() {
  _impl_.items_.Clear();
}
inline ::CMsgBotWorldState_Ability* CMsgBotWorldState_Unit::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.Unit.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Ability >*
CMsgBotWorldState_Unit::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBotWorldState.Unit.items)
  return &_impl_.items_;
}
inline const ::CMsgBotWorldState_Ability& CMsgBotWorldState_Unit::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::CMsgBotWorldState_Ability& CMsgBotWorldState_Unit::items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.items)
  return _internal_items(index);
}
inline ::CMsgBotWorldState_Ability* CMsgBotWorldState_Unit::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::CMsgBotWorldState_Ability* CMsgBotWorldState_Unit::add_items() {
  ::CMsgBotWorldState_Ability* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:CMsgBotWorldState.Unit.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Ability >&
CMsgBotWorldState_Unit::items() const {
  // @@protoc_insertion_point(field_list:CMsgBotWorldState.Unit.items)
  return _impl_.items_;
}

// repeated .CMsgBotWorldState.Modifier modifiers = 92 [(.map_field) = true];
inline int CMsgBotWorldState_Unit::_internal_modifiers_size() const {
  return _impl_.modifiers_.size();
}
inline int CMsgBotWorldState_Unit::modifiers_size() const {
  return _internal_modifiers_size();
}
inline void CMsgBotWorldState_Unit::clear_modifiers() {
  _impl_.modifiers_.Clear();
}
inline ::CMsgBotWorldState_Modifier* CMsgBotWorldState_Unit::mutable_modifiers(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.Unit.modifiers)
  return _impl_.modifiers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Modifier >*
CMsgBotWorldState_Unit::mutable_modifiers() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBotWorldState.Unit.modifiers)
  return &_impl_.modifiers_;
}
inline const ::CMsgBotWorldState_Modifier& CMsgBotWorldState_Unit::_internal_modifiers(int index) const {
  return _impl_.modifiers_.Get(index);
}
inline const ::CMsgBotWorldState_Modifier& CMsgBotWorldState_Unit::modifiers(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.modifiers)
  return _internal_modifiers(index);
}
inline ::CMsgBotWorldState_Modifier* CMsgBotWorldState_Unit::_internal_add_modifiers() {
  return _impl_.modifiers_.Add();
}
inline ::CMsgBotWorldState_Modifier* CMsgBotWorldState_Unit::add_modifiers() {
  ::CMsgBotWorldState_Modifier* _add = _internal_add_modifiers();
  // @@protoc_insertion_point(field_add:CMsgBotWorldState.Unit.modifiers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Modifier >&
CMsgBotWorldState_Unit::modifiers() const {
  // @@protoc_insertion_point(field_list:CMsgBotWorldState.Unit.modifiers)
  return _impl_.modifiers_;
}

// repeated .CMsgBotWorldState.TrackingProjectile incoming_tracking_projectiles = 93 [(.map_field) = true];
inline int CMsgBotWorldState_Unit::_internal_incoming_tracking_projectiles_size() const {
  return _impl_.incoming_tracking_projectiles_.size();
}
inline int CMsgBotWorldState_Unit::incoming_tracking_projectiles_size() const {
  return _internal_incoming_tracking_projectiles_size();
}
inline void CMsgBotWorldState_Unit::clear_incoming_tracking_projectiles() {
  _impl_.incoming_tracking_projectiles_.Clear();
}
inline ::CMsgBotWorldState_TrackingProjectile* CMsgBotWorldState_Unit::mutable_incoming_tracking_projectiles(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.Unit.incoming_tracking_projectiles)
  return _impl_.incoming_tracking_projectiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_TrackingProjectile >*
CMsgBotWorldState_Unit::mutable_incoming_tracking_projectiles() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBotWorldState.Unit.incoming_tracking_projectiles)
  return &_impl_.incoming_tracking_projectiles_;
}
inline const ::CMsgBotWorldState_TrackingProjectile& CMsgBotWorldState_Unit::_internal_incoming_tracking_projectiles(int index) const {
  return _impl_.incoming_tracking_projectiles_.Get(index);
}
inline const ::CMsgBotWorldState_TrackingProjectile& CMsgBotWorldState_Unit::incoming_tracking_projectiles(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.incoming_tracking_projectiles)
  return _internal_incoming_tracking_projectiles(index);
}
inline ::CMsgBotWorldState_TrackingProjectile* CMsgBotWorldState_Unit::_internal_add_incoming_tracking_projectiles() {
  return _impl_.incoming_tracking_projectiles_.Add();
}
inline ::CMsgBotWorldState_TrackingProjectile* CMsgBotWorldState_Unit::add_incoming_tracking_projectiles() {
  ::CMsgBotWorldState_TrackingProjectile* _add = _internal_add_incoming_tracking_projectiles();
  // @@protoc_insertion_point(field_add:CMsgBotWorldState.Unit.incoming_tracking_projectiles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_TrackingProjectile >&
CMsgBotWorldState_Unit::incoming_tracking_projectiles() const {
  // @@protoc_insertion_point(field_list:CMsgBotWorldState.Unit.incoming_tracking_projectiles)
  return _impl_.incoming_tracking_projectiles_;
}

// optional uint32 action_type = 100;
inline bool CMsgBotWorldState_Unit::_internal_has_action_type() const {
  bool value = (_impl_._has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_action_type() const {
  return _internal_has_action_type();
}
inline void CMsgBotWorldState_Unit::clear_action_type() {
  _impl_.action_type_ = 0u;
  _impl_._has_bits_[1] &= ~0x01000000u;
}
inline uint32_t CMsgBotWorldState_Unit::_internal_action_type() const {
  return _impl_.action_type_;
}
inline uint32_t CMsgBotWorldState_Unit::action_type() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.action_type)
  return _internal_action_type();
}
inline void CMsgBotWorldState_Unit::_internal_set_action_type(uint32_t value) {
  _impl_._has_bits_[1] |= 0x01000000u;
  _impl_.action_type_ = value;
}
inline void CMsgBotWorldState_Unit::set_action_type(uint32_t value) {
  _internal_set_action_type(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.action_type)
}

// optional uint32 ability_target_handle = 101 [default = 4294967295];
inline bool CMsgBotWorldState_Unit::_internal_has_ability_target_handle() const {
  bool value = (_impl_._has_bits_[2] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_ability_target_handle() const {
  return _internal_has_ability_target_handle();
}
inline void CMsgBotWorldState_Unit::clear_ability_target_handle() {
  _impl_.ability_target_handle_ = 4294967295u;
  _impl_._has_bits_[2] &= ~0x00200000u;
}
inline uint32_t CMsgBotWorldState_Unit::_internal_ability_target_handle() const {
  return _impl_.ability_target_handle_;
}
inline uint32_t CMsgBotWorldState_Unit::ability_target_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.ability_target_handle)
  return _internal_ability_target_handle();
}
inline void CMsgBotWorldState_Unit::_internal_set_ability_target_handle(uint32_t value) {
  _impl_._has_bits_[2] |= 0x00200000u;
  _impl_.ability_target_handle_ = value;
}
inline void CMsgBotWorldState_Unit::set_ability_target_handle(uint32_t value) {
  _internal_set_ability_target_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.ability_target_handle)
}

// optional string ability_target_name = 103;
inline bool CMsgBotWorldState_Unit::_internal_has_ability_target_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_ability_target_name() const {
  return _internal_has_ability_target_name();
}
inline void CMsgBotWorldState_Unit::clear_ability_target_name() {
  _impl_.ability_target_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgBotWorldState_Unit::ability_target_name() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.ability_target_name)
  return _internal_ability_target_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBotWorldState_Unit::set_ability_target_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.ability_target_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.ability_target_name)
}
inline std::string* CMsgBotWorldState_Unit::mutable_ability_target_name() {
  std::string* _s = _internal_mutable_ability_target_name();
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.Unit.ability_target_name)
  return _s;
}
inline const std::string& CMsgBotWorldState_Unit::_internal_ability_target_name() const {
  return _impl_.ability_target_name_.Get();
}
inline void CMsgBotWorldState_Unit::_internal_set_ability_target_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ability_target_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgBotWorldState_Unit::_internal_mutable_ability_target_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.ability_target_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgBotWorldState_Unit::release_ability_target_name() {
  // @@protoc_insertion_point(field_release:CMsgBotWorldState.Unit.ability_target_name)
  if (!_internal_has_ability_target_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.ability_target_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ability_target_name_.IsDefault()) {
    _impl_.ability_target_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBotWorldState_Unit::set_allocated_ability_target_name(std::string* ability_target_name) {
  if (ability_target_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.ability_target_name_.SetAllocated(ability_target_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ability_target_name_.IsDefault()) {
    _impl_.ability_target_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Unit.ability_target_name)
}

// optional bool is_using_ability = 102;
inline bool CMsgBotWorldState_Unit::_internal_has_is_using_ability() const {
  bool value = (_impl_._has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_is_using_ability() const {
  return _internal_has_is_using_ability();
}
inline void CMsgBotWorldState_Unit::clear_is_using_ability() {
  _impl_.is_using_ability_ = false;
  _impl_._has_bits_[1] &= ~0x08000000u;
}
inline bool CMsgBotWorldState_Unit::_internal_is_using_ability() const {
  return _impl_.is_using_ability_;
}
inline bool CMsgBotWorldState_Unit::is_using_ability() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.is_using_ability)
  return _internal_is_using_ability();
}
inline void CMsgBotWorldState_Unit::_internal_set_is_using_ability(bool value) {
  _impl_._has_bits_[1] |= 0x08000000u;
  _impl_.is_using_ability_ = value;
}
inline void CMsgBotWorldState_Unit::set_is_using_ability(bool value) {
  _internal_set_is_using_ability(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.is_using_ability)
}

// optional uint32 primary_attribute = 110;
inline bool CMsgBotWorldState_Unit::_internal_has_primary_attribute() const {
  bool value = (_impl_._has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_primary_attribute() const {
  return _internal_has_primary_attribute();
}
inline void CMsgBotWorldState_Unit::clear_primary_attribute() {
  _impl_.primary_attribute_ = 0u;
  _impl_._has_bits_[1] &= ~0x02000000u;
}
inline uint32_t CMsgBotWorldState_Unit::_internal_primary_attribute() const {
  return _impl_.primary_attribute_;
}
inline uint32_t CMsgBotWorldState_Unit::primary_attribute() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.primary_attribute)
  return _internal_primary_attribute();
}
inline void CMsgBotWorldState_Unit::_internal_set_primary_attribute(uint32_t value) {
  _impl_._has_bits_[1] |= 0x02000000u;
  _impl_.primary_attribute_ = value;
}
inline void CMsgBotWorldState_Unit::set_primary_attribute(uint32_t value) {
  _internal_set_primary_attribute(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.primary_attribute)
}

// optional bool is_illusion = 111;
inline bool CMsgBotWorldState_Unit::_internal_has_is_illusion() const {
  bool value = (_impl_._has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_is_illusion() const {
  return _internal_has_is_illusion();
}
inline void CMsgBotWorldState_Unit::clear_is_illusion() {
  _impl_.is_illusion_ = false;
  _impl_._has_bits_[1] &= ~0x10000000u;
}
inline bool CMsgBotWorldState_Unit::_internal_is_illusion() const {
  return _impl_.is_illusion_;
}
inline bool CMsgBotWorldState_Unit::is_illusion() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.is_illusion)
  return _internal_is_illusion();
}
inline void CMsgBotWorldState_Unit::_internal_set_is_illusion(bool value) {
  _impl_._has_bits_[1] |= 0x10000000u;
  _impl_.is_illusion_ = value;
}
inline void CMsgBotWorldState_Unit::set_is_illusion(bool value) {
  _internal_set_is_illusion(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.is_illusion)
}

// optional float respawn_time = 112;
inline bool CMsgBotWorldState_Unit::_internal_has_respawn_time() const {
  bool value = (_impl_._has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_respawn_time() const {
  return _internal_has_respawn_time();
}
inline void CMsgBotWorldState_Unit::clear_respawn_time() {
  _impl_.respawn_time_ = 0;
  _impl_._has_bits_[1] &= ~0x40000000u;
}
inline float CMsgBotWorldState_Unit::_internal_respawn_time() const {
  return _impl_.respawn_time_;
}
inline float CMsgBotWorldState_Unit::respawn_time() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.respawn_time)
  return _internal_respawn_time();
}
inline void CMsgBotWorldState_Unit::_internal_set_respawn_time(float value) {
  _impl_._has_bits_[1] |= 0x40000000u;
  _impl_.respawn_time_ = value;
}
inline void CMsgBotWorldState_Unit::set_respawn_time(float value) {
  _internal_set_respawn_time(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.respawn_time)
}

// optional uint32 buyback_cost = 113;
inline bool CMsgBotWorldState_Unit::_internal_has_buyback_cost() const {
  bool value = (_impl_._has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_buyback_cost() const {
  return _internal_has_buyback_cost();
}
inline void CMsgBotWorldState_Unit::clear_buyback_cost() {
  _impl_.buyback_cost_ = 0u;
  _impl_._has_bits_[1] &= ~0x80000000u;
}
inline uint32_t CMsgBotWorldState_Unit::_internal_buyback_cost() const {
  return _impl_.buyback_cost_;
}
inline uint32_t CMsgBotWorldState_Unit::buyback_cost() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.buyback_cost)
  return _internal_buyback_cost();
}
inline void CMsgBotWorldState_Unit::_internal_set_buyback_cost(uint32_t value) {
  _impl_._has_bits_[1] |= 0x80000000u;
  _impl_.buyback_cost_ = value;
}
inline void CMsgBotWorldState_Unit::set_buyback_cost(uint32_t value) {
  _internal_set_buyback_cost(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.buyback_cost)
}

// optional float buyback_cooldown = 114;
inline bool CMsgBotWorldState_Unit::_internal_has_buyback_cooldown() const {
  bool value = (_impl_._has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_buyback_cooldown() const {
  return _internal_has_buyback_cooldown();
}
inline void CMsgBotWorldState_Unit::clear_buyback_cooldown() {
  _impl_.buyback_cooldown_ = 0;
  _impl_._has_bits_[2] &= ~0x00000001u;
}
inline float CMsgBotWorldState_Unit::_internal_buyback_cooldown() const {
  return _impl_.buyback_cooldown_;
}
inline float CMsgBotWorldState_Unit::buyback_cooldown() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.buyback_cooldown)
  return _internal_buyback_cooldown();
}
inline void CMsgBotWorldState_Unit::_internal_set_buyback_cooldown(float value) {
  _impl_._has_bits_[2] |= 0x00000001u;
  _impl_.buyback_cooldown_ = value;
}
inline void CMsgBotWorldState_Unit::set_buyback_cooldown(float value) {
  _internal_set_buyback_cooldown(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.buyback_cooldown)
}

// optional float spell_amplification = 115;
inline bool CMsgBotWorldState_Unit::_internal_has_spell_amplification() const {
  bool value = (_impl_._has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_spell_amplification() const {
  return _internal_has_spell_amplification();
}
inline void CMsgBotWorldState_Unit::clear_spell_amplification() {
  _impl_.spell_amplification_ = 0;
  _impl_._has_bits_[2] &= ~0x00000002u;
}
inline float CMsgBotWorldState_Unit::_internal_spell_amplification() const {
  return _impl_.spell_amplification_;
}
inline float CMsgBotWorldState_Unit::spell_amplification() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.spell_amplification)
  return _internal_spell_amplification();
}
inline void CMsgBotWorldState_Unit::_internal_set_spell_amplification(float value) {
  _impl_._has_bits_[2] |= 0x00000002u;
  _impl_.spell_amplification_ = value;
}
inline void CMsgBotWorldState_Unit::set_spell_amplification(float value) {
  _internal_set_spell_amplification(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.spell_amplification)
}

// optional float armor = 116;
inline bool CMsgBotWorldState_Unit::_internal_has_armor() const {
  bool value = (_impl_._has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_armor() const {
  return _internal_has_armor();
}
inline void CMsgBotWorldState_Unit::clear_armor() {
  _impl_.armor_ = 0;
  _impl_._has_bits_[2] &= ~0x00000004u;
}
inline float CMsgBotWorldState_Unit::_internal_armor() const {
  return _impl_.armor_;
}
inline float CMsgBotWorldState_Unit::armor() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.armor)
  return _internal_armor();
}
inline void CMsgBotWorldState_Unit::_internal_set_armor(float value) {
  _impl_._has_bits_[2] |= 0x00000004u;
  _impl_.armor_ = value;
}
inline void CMsgBotWorldState_Unit::set_armor(float value) {
  _internal_set_armor(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.armor)
}

// optional float magic_resist = 117;
inline bool CMsgBotWorldState_Unit::_internal_has_magic_resist() const {
  bool value = (_impl_._has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_magic_resist() const {
  return _internal_has_magic_resist();
}
inline void CMsgBotWorldState_Unit::clear_magic_resist() {
  _impl_.magic_resist_ = 0;
  _impl_._has_bits_[2] &= ~0x00000008u;
}
inline float CMsgBotWorldState_Unit::_internal_magic_resist() const {
  return _impl_.magic_resist_;
}
inline float CMsgBotWorldState_Unit::magic_resist() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.magic_resist)
  return _internal_magic_resist();
}
inline void CMsgBotWorldState_Unit::_internal_set_magic_resist(float value) {
  _impl_._has_bits_[2] |= 0x00000008u;
  _impl_.magic_resist_ = value;
}
inline void CMsgBotWorldState_Unit::set_magic_resist(float value) {
  _internal_set_magic_resist(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.magic_resist)
}

// optional float evasion = 118;
inline bool CMsgBotWorldState_Unit::_internal_has_evasion() const {
  bool value = (_impl_._has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_evasion() const {
  return _internal_has_evasion();
}
inline void CMsgBotWorldState_Unit::clear_evasion() {
  _impl_.evasion_ = 0;
  _impl_._has_bits_[2] &= ~0x00000010u;
}
inline float CMsgBotWorldState_Unit::_internal_evasion() const {
  return _impl_.evasion_;
}
inline float CMsgBotWorldState_Unit::evasion() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.evasion)
  return _internal_evasion();
}
inline void CMsgBotWorldState_Unit::_internal_set_evasion(float value) {
  _impl_._has_bits_[2] |= 0x00000010u;
  _impl_.evasion_ = value;
}
inline void CMsgBotWorldState_Unit::set_evasion(float value) {
  _internal_set_evasion(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.evasion)
}

// optional uint32 xp_needed_to_level = 120;
inline bool CMsgBotWorldState_Unit::_internal_has_xp_needed_to_level() const {
  bool value = (_impl_._has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_xp_needed_to_level() const {
  return _internal_has_xp_needed_to_level();
}
inline void CMsgBotWorldState_Unit::clear_xp_needed_to_level() {
  _impl_.xp_needed_to_level_ = 0u;
  _impl_._has_bits_[2] &= ~0x00000020u;
}
inline uint32_t CMsgBotWorldState_Unit::_internal_xp_needed_to_level() const {
  return _impl_.xp_needed_to_level_;
}
inline uint32_t CMsgBotWorldState_Unit::xp_needed_to_level() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.xp_needed_to_level)
  return _internal_xp_needed_to_level();
}
inline void CMsgBotWorldState_Unit::_internal_set_xp_needed_to_level(uint32_t value) {
  _impl_._has_bits_[2] |= 0x00000020u;
  _impl_.xp_needed_to_level_ = value;
}
inline void CMsgBotWorldState_Unit::set_xp_needed_to_level(uint32_t value) {
  _internal_set_xp_needed_to_level(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.xp_needed_to_level)
}

// optional uint32 ability_points = 121;
inline bool CMsgBotWorldState_Unit::_internal_has_ability_points() const {
  bool value = (_impl_._has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_ability_points() const {
  return _internal_has_ability_points();
}
inline void CMsgBotWorldState_Unit::clear_ability_points() {
  _impl_.ability_points_ = 0u;
  _impl_._has_bits_[2] &= ~0x00000040u;
}
inline uint32_t CMsgBotWorldState_Unit::_internal_ability_points() const {
  return _impl_.ability_points_;
}
inline uint32_t CMsgBotWorldState_Unit::ability_points() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.ability_points)
  return _internal_ability_points();
}
inline void CMsgBotWorldState_Unit::_internal_set_ability_points(uint32_t value) {
  _impl_._has_bits_[2] |= 0x00000040u;
  _impl_.ability_points_ = value;
}
inline void CMsgBotWorldState_Unit::set_ability_points(uint32_t value) {
  _internal_set_ability_points(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.ability_points)
}

// optional int32 reliable_gold = 122 [default = -1];
inline bool CMsgBotWorldState_Unit::_internal_has_reliable_gold() const {
  bool value = (_impl_._has_bits_[2] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_reliable_gold() const {
  return _internal_has_reliable_gold();
}
inline void CMsgBotWorldState_Unit::clear_reliable_gold() {
  _impl_.reliable_gold_ = -1;
  _impl_._has_bits_[2] &= ~0x00400000u;
}
inline int32_t CMsgBotWorldState_Unit::_internal_reliable_gold() const {
  return _impl_.reliable_gold_;
}
inline int32_t CMsgBotWorldState_Unit::reliable_gold() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.reliable_gold)
  return _internal_reliable_gold();
}
inline void CMsgBotWorldState_Unit::_internal_set_reliable_gold(int32_t value) {
  _impl_._has_bits_[2] |= 0x00400000u;
  _impl_.reliable_gold_ = value;
}
inline void CMsgBotWorldState_Unit::set_reliable_gold(int32_t value) {
  _internal_set_reliable_gold(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.reliable_gold)
}

// optional int32 unreliable_gold = 123 [default = -1];
inline bool CMsgBotWorldState_Unit::_internal_has_unreliable_gold() const {
  bool value = (_impl_._has_bits_[2] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_unreliable_gold() const {
  return _internal_has_unreliable_gold();
}
inline void CMsgBotWorldState_Unit::clear_unreliable_gold() {
  _impl_.unreliable_gold_ = -1;
  _impl_._has_bits_[2] &= ~0x00010000u;
}
inline int32_t CMsgBotWorldState_Unit::_internal_unreliable_gold() const {
  return _impl_.unreliable_gold_;
}
inline int32_t CMsgBotWorldState_Unit::unreliable_gold() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.unreliable_gold)
  return _internal_unreliable_gold();
}
inline void CMsgBotWorldState_Unit::_internal_set_unreliable_gold(int32_t value) {
  _impl_._has_bits_[2] |= 0x00010000u;
  _impl_.unreliable_gold_ = value;
}
inline void CMsgBotWorldState_Unit::set_unreliable_gold(int32_t value) {
  _internal_set_unreliable_gold(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.unreliable_gold)
}

// optional uint32 last_hits = 124;
inline bool CMsgBotWorldState_Unit::_internal_has_last_hits() const {
  bool value = (_impl_._has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_last_hits() const {
  return _internal_has_last_hits();
}
inline void CMsgBotWorldState_Unit::clear_last_hits() {
  _impl_.last_hits_ = 0u;
  _impl_._has_bits_[2] &= ~0x00000080u;
}
inline uint32_t CMsgBotWorldState_Unit::_internal_last_hits() const {
  return _impl_.last_hits_;
}
inline uint32_t CMsgBotWorldState_Unit::last_hits() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.last_hits)
  return _internal_last_hits();
}
inline void CMsgBotWorldState_Unit::_internal_set_last_hits(uint32_t value) {
  _impl_._has_bits_[2] |= 0x00000080u;
  _impl_.last_hits_ = value;
}
inline void CMsgBotWorldState_Unit::set_last_hits(uint32_t value) {
  _internal_set_last_hits(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.last_hits)
}

// optional uint32 denies = 125;
inline bool CMsgBotWorldState_Unit::_internal_has_denies() const {
  bool value = (_impl_._has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_denies() const {
  return _internal_has_denies();
}
inline void CMsgBotWorldState_Unit::clear_denies() {
  _impl_.denies_ = 0u;
  _impl_._has_bits_[2] &= ~0x00000100u;
}
inline uint32_t CMsgBotWorldState_Unit::_internal_denies() const {
  return _impl_.denies_;
}
inline uint32_t CMsgBotWorldState_Unit::denies() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.denies)
  return _internal_denies();
}
inline void CMsgBotWorldState_Unit::_internal_set_denies(uint32_t value) {
  _impl_._has_bits_[2] |= 0x00000100u;
  _impl_.denies_ = value;
}
inline void CMsgBotWorldState_Unit::set_denies(uint32_t value) {
  _internal_set_denies(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.denies)
}

// optional uint32 net_worth = 126;
inline bool CMsgBotWorldState_Unit::_internal_has_net_worth() const {
  bool value = (_impl_._has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_net_worth() const {
  return _internal_has_net_worth();
}
inline void CMsgBotWorldState_Unit::clear_net_worth() {
  _impl_.net_worth_ = 0u;
  _impl_._has_bits_[2] &= ~0x00000200u;
}
inline uint32_t CMsgBotWorldState_Unit::_internal_net_worth() const {
  return _impl_.net_worth_;
}
inline uint32_t CMsgBotWorldState_Unit::net_worth() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.net_worth)
  return _internal_net_worth();
}
inline void CMsgBotWorldState_Unit::_internal_set_net_worth(uint32_t value) {
  _impl_._has_bits_[2] |= 0x00000200u;
  _impl_.net_worth_ = value;
}
inline void CMsgBotWorldState_Unit::set_net_worth(uint32_t value) {
  _internal_set_net_worth(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.net_worth)
}

// optional uint32 strength = 127;
inline bool CMsgBotWorldState_Unit::_internal_has_strength() const {
  bool value = (_impl_._has_bits_[2] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_strength() const {
  return _internal_has_strength();
}
inline void CMsgBotWorldState_Unit::clear_strength() {
  _impl_.strength_ = 0u;
  _impl_._has_bits_[2] &= ~0x00000400u;
}
inline uint32_t CMsgBotWorldState_Unit::_internal_strength() const {
  return _impl_.strength_;
}
inline uint32_t CMsgBotWorldState_Unit::strength() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.strength)
  return _internal_strength();
}
inline void CMsgBotWorldState_Unit::_internal_set_strength(uint32_t value) {
  _impl_._has_bits_[2] |= 0x00000400u;
  _impl_.strength_ = value;
}
inline void CMsgBotWorldState_Unit::set_strength(uint32_t value) {
  _internal_set_strength(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.strength)
}

// optional uint32 agility = 128;
inline bool CMsgBotWorldState_Unit::_internal_has_agility() const {
  bool value = (_impl_._has_bits_[2] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_agility() const {
  return _internal_has_agility();
}
inline void CMsgBotWorldState_Unit::clear_agility() {
  _impl_.agility_ = 0u;
  _impl_._has_bits_[2] &= ~0x00000800u;
}
inline uint32_t CMsgBotWorldState_Unit::_internal_agility() const {
  return _impl_.agility_;
}
inline uint32_t CMsgBotWorldState_Unit::agility() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.agility)
  return _internal_agility();
}
inline void CMsgBotWorldState_Unit::_internal_set_agility(uint32_t value) {
  _impl_._has_bits_[2] |= 0x00000800u;
  _impl_.agility_ = value;
}
inline void CMsgBotWorldState_Unit::set_agility(uint32_t value) {
  _internal_set_agility(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.agility)
}

// optional uint32 intelligence = 129;
inline bool CMsgBotWorldState_Unit::_internal_has_intelligence() const {
  bool value = (_impl_._has_bits_[2] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_intelligence() const {
  return _internal_has_intelligence();
}
inline void CMsgBotWorldState_Unit::clear_intelligence() {
  _impl_.intelligence_ = 0u;
  _impl_._has_bits_[2] &= ~0x00001000u;
}
inline uint32_t CMsgBotWorldState_Unit::_internal_intelligence() const {
  return _impl_.intelligence_;
}
inline uint32_t CMsgBotWorldState_Unit::intelligence() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.intelligence)
  return _internal_intelligence();
}
inline void CMsgBotWorldState_Unit::_internal_set_intelligence(uint32_t value) {
  _impl_._has_bits_[2] |= 0x00001000u;
  _impl_.intelligence_ = value;
}
inline void CMsgBotWorldState_Unit::set_intelligence(uint32_t value) {
  _internal_set_intelligence(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.intelligence)
}

// optional float remaining_lifespan = 130;
inline bool CMsgBotWorldState_Unit::_internal_has_remaining_lifespan() const {
  bool value = (_impl_._has_bits_[2] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_remaining_lifespan() const {
  return _internal_has_remaining_lifespan();
}
inline void CMsgBotWorldState_Unit::clear_remaining_lifespan() {
  _impl_.remaining_lifespan_ = 0;
  _impl_._has_bits_[2] &= ~0x00002000u;
}
inline float CMsgBotWorldState_Unit::_internal_remaining_lifespan() const {
  return _impl_.remaining_lifespan_;
}
inline float CMsgBotWorldState_Unit::remaining_lifespan() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.remaining_lifespan)
  return _internal_remaining_lifespan();
}
inline void CMsgBotWorldState_Unit::_internal_set_remaining_lifespan(float value) {
  _impl_._has_bits_[2] |= 0x00002000u;
  _impl_.remaining_lifespan_ = value;
}
inline void CMsgBotWorldState_Unit::set_remaining_lifespan(float value) {
  _internal_set_remaining_lifespan(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.remaining_lifespan)
}

// optional bool flying_courier = 140;
inline bool CMsgBotWorldState_Unit::_internal_has_flying_courier() const {
  bool value = (_impl_._has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_flying_courier() const {
  return _internal_has_flying_courier();
}
inline void CMsgBotWorldState_Unit::clear_flying_courier() {
  _impl_.flying_courier_ = false;
  _impl_._has_bits_[1] &= ~0x20000000u;
}
inline bool CMsgBotWorldState_Unit::_internal_flying_courier() const {
  return _impl_.flying_courier_;
}
inline bool CMsgBotWorldState_Unit::flying_courier() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.flying_courier)
  return _internal_flying_courier();
}
inline void CMsgBotWorldState_Unit::_internal_set_flying_courier(bool value) {
  _impl_._has_bits_[1] |= 0x20000000u;
  _impl_.flying_courier_ = value;
}
inline void CMsgBotWorldState_Unit::set_flying_courier(bool value) {
  _internal_set_flying_courier(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.flying_courier)
}

// optional float shrine_cooldown = 150;
inline bool CMsgBotWorldState_Unit::_internal_has_shrine_cooldown() const {
  bool value = (_impl_._has_bits_[2] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_shrine_cooldown() const {
  return _internal_has_shrine_cooldown();
}
inline void CMsgBotWorldState_Unit::clear_shrine_cooldown() {
  _impl_.shrine_cooldown_ = 0;
  _impl_._has_bits_[2] &= ~0x00004000u;
}
inline float CMsgBotWorldState_Unit::_internal_shrine_cooldown() const {
  return _impl_.shrine_cooldown_;
}
inline float CMsgBotWorldState_Unit::shrine_cooldown() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.shrine_cooldown)
  return _internal_shrine_cooldown();
}
inline void CMsgBotWorldState_Unit::_internal_set_shrine_cooldown(float value) {
  _impl_._has_bits_[2] |= 0x00004000u;
  _impl_.shrine_cooldown_ = value;
}
inline void CMsgBotWorldState_Unit::set_shrine_cooldown(float value) {
  _internal_set_shrine_cooldown(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.shrine_cooldown)
}

// optional bool is_shrine_healing = 151;
inline bool CMsgBotWorldState_Unit::_internal_has_is_shrine_healing() const {
  bool value = (_impl_._has_bits_[2] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgBotWorldState_Unit::has_is_shrine_healing() const {
  return _internal_has_is_shrine_healing();
}
inline void CMsgBotWorldState_Unit::clear_is_shrine_healing() {
  _impl_.is_shrine_healing_ = false;
  _impl_._has_bits_[2] &= ~0x00008000u;
}
inline bool CMsgBotWorldState_Unit::_internal_is_shrine_healing() const {
  return _impl_.is_shrine_healing_;
}
inline bool CMsgBotWorldState_Unit::is_shrine_healing() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.Unit.is_shrine_healing)
  return _internal_is_shrine_healing();
}
inline void CMsgBotWorldState_Unit::_internal_set_is_shrine_healing(bool value) {
  _impl_._has_bits_[2] |= 0x00008000u;
  _impl_.is_shrine_healing_ = value;
}
inline void CMsgBotWorldState_Unit::set_is_shrine_healing(bool value) {
  _internal_set_is_shrine_healing(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.Unit.is_shrine_healing)
}

// -------------------------------------------------------------------

// CMsgBotWorldState

// optional uint32 team_id = 1;
inline bool CMsgBotWorldState::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBotWorldState::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgBotWorldState::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgBotWorldState::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgBotWorldState::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.team_id)
  return _internal_team_id();
}
inline void CMsgBotWorldState::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_id_ = value;
}
inline void CMsgBotWorldState::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.team_id)
}

// optional float game_time = 2;
inline bool CMsgBotWorldState::_internal_has_game_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBotWorldState::has_game_time() const {
  return _internal_has_game_time();
}
inline void CMsgBotWorldState::clear_game_time() {
  _impl_.game_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CMsgBotWorldState::_internal_game_time() const {
  return _impl_.game_time_;
}
inline float CMsgBotWorldState::game_time() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.game_time)
  return _internal_game_time();
}
inline void CMsgBotWorldState::_internal_set_game_time(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.game_time_ = value;
}
inline void CMsgBotWorldState::set_game_time(float value) {
  _internal_set_game_time(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.game_time)
}

// optional float dota_time = 3;
inline bool CMsgBotWorldState::_internal_has_dota_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBotWorldState::has_dota_time() const {
  return _internal_has_dota_time();
}
inline void CMsgBotWorldState::clear_dota_time() {
  _impl_.dota_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CMsgBotWorldState::_internal_dota_time() const {
  return _impl_.dota_time_;
}
inline float CMsgBotWorldState::dota_time() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.dota_time)
  return _internal_dota_time();
}
inline void CMsgBotWorldState::_internal_set_dota_time(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.dota_time_ = value;
}
inline void CMsgBotWorldState::set_dota_time(float value) {
  _internal_set_dota_time(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.dota_time)
}

// optional uint32 game_state = 4;
inline bool CMsgBotWorldState::_internal_has_game_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBotWorldState::has_game_state() const {
  return _internal_has_game_state();
}
inline void CMsgBotWorldState::clear_game_state() {
  _impl_.game_state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgBotWorldState::_internal_game_state() const {
  return _impl_.game_state_;
}
inline uint32_t CMsgBotWorldState::game_state() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.game_state)
  return _internal_game_state();
}
inline void CMsgBotWorldState::_internal_set_game_state(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.game_state_ = value;
}
inline void CMsgBotWorldState::set_game_state(uint32_t value) {
  _internal_set_game_state(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.game_state)
}

// optional uint32 hero_pick_state = 5;
inline bool CMsgBotWorldState::_internal_has_hero_pick_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBotWorldState::has_hero_pick_state() const {
  return _internal_has_hero_pick_state();
}
inline void CMsgBotWorldState::clear_hero_pick_state() {
  _impl_.hero_pick_state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgBotWorldState::_internal_hero_pick_state() const {
  return _impl_.hero_pick_state_;
}
inline uint32_t CMsgBotWorldState::hero_pick_state() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.hero_pick_state)
  return _internal_hero_pick_state();
}
inline void CMsgBotWorldState::_internal_set_hero_pick_state(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.hero_pick_state_ = value;
}
inline void CMsgBotWorldState::set_hero_pick_state(uint32_t value) {
  _internal_set_hero_pick_state(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.hero_pick_state)
}

// optional float time_of_day = 6;
inline bool CMsgBotWorldState::_internal_has_time_of_day() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBotWorldState::has_time_of_day() const {
  return _internal_has_time_of_day();
}
inline void CMsgBotWorldState::clear_time_of_day() {
  _impl_.time_of_day_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float CMsgBotWorldState::_internal_time_of_day() const {
  return _impl_.time_of_day_;
}
inline float CMsgBotWorldState::time_of_day() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.time_of_day)
  return _internal_time_of_day();
}
inline void CMsgBotWorldState::_internal_set_time_of_day(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.time_of_day_ = value;
}
inline void CMsgBotWorldState::set_time_of_day(float value) {
  _internal_set_time_of_day(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.time_of_day)
}

// optional float glyph_cooldown = 7;
inline bool CMsgBotWorldState::_internal_has_glyph_cooldown() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgBotWorldState::has_glyph_cooldown() const {
  return _internal_has_glyph_cooldown();
}
inline void CMsgBotWorldState::clear_glyph_cooldown() {
  _impl_.glyph_cooldown_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float CMsgBotWorldState::_internal_glyph_cooldown() const {
  return _impl_.glyph_cooldown_;
}
inline float CMsgBotWorldState::glyph_cooldown() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.glyph_cooldown)
  return _internal_glyph_cooldown();
}
inline void CMsgBotWorldState::_internal_set_glyph_cooldown(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.glyph_cooldown_ = value;
}
inline void CMsgBotWorldState::set_glyph_cooldown(float value) {
  _internal_set_glyph_cooldown(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.glyph_cooldown)
}

// optional float glyph_cooldown_enemy = 8;
inline bool CMsgBotWorldState::_internal_has_glyph_cooldown_enemy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgBotWorldState::has_glyph_cooldown_enemy() const {
  return _internal_has_glyph_cooldown_enemy();
}
inline void CMsgBotWorldState::clear_glyph_cooldown_enemy() {
  _impl_.glyph_cooldown_enemy_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float CMsgBotWorldState::_internal_glyph_cooldown_enemy() const {
  return _impl_.glyph_cooldown_enemy_;
}
inline float CMsgBotWorldState::glyph_cooldown_enemy() const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.glyph_cooldown_enemy)
  return _internal_glyph_cooldown_enemy();
}
inline void CMsgBotWorldState::_internal_set_glyph_cooldown_enemy(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.glyph_cooldown_enemy_ = value;
}
inline void CMsgBotWorldState::set_glyph_cooldown_enemy(float value) {
  _internal_set_glyph_cooldown_enemy(value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.glyph_cooldown_enemy)
}

// repeated .CMsgBotWorldState.Player players = 10 [(.map_field) = true];
inline int CMsgBotWorldState::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CMsgBotWorldState::players_size() const {
  return _internal_players_size();
}
inline void CMsgBotWorldState::clear_players() {
  _impl_.players_.Clear();
}
inline ::CMsgBotWorldState_Player* CMsgBotWorldState::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Player >*
CMsgBotWorldState::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBotWorldState.players)
  return &_impl_.players_;
}
inline const ::CMsgBotWorldState_Player& CMsgBotWorldState::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::CMsgBotWorldState_Player& CMsgBotWorldState::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.players)
  return _internal_players(index);
}
inline ::CMsgBotWorldState_Player* CMsgBotWorldState::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::CMsgBotWorldState_Player* CMsgBotWorldState::add_players() {
  ::CMsgBotWorldState_Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CMsgBotWorldState.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Player >&
CMsgBotWorldState::players() const {
  // @@protoc_insertion_point(field_list:CMsgBotWorldState.players)
  return _impl_.players_;
}

// repeated .CMsgBotWorldState.Unit units = 11 [(.map_field) = true];
inline int CMsgBotWorldState::_internal_units_size() const {
  return _impl_.units_.size();
}
inline int CMsgBotWorldState::units_size() const {
  return _internal_units_size();
}
inline void CMsgBotWorldState::clear_units() {
  _impl_.units_.Clear();
}
inline ::CMsgBotWorldState_Unit* CMsgBotWorldState::mutable_units(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.units)
  return _impl_.units_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Unit >*
CMsgBotWorldState::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBotWorldState.units)
  return &_impl_.units_;
}
inline const ::CMsgBotWorldState_Unit& CMsgBotWorldState::_internal_units(int index) const {
  return _impl_.units_.Get(index);
}
inline const ::CMsgBotWorldState_Unit& CMsgBotWorldState::units(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.units)
  return _internal_units(index);
}
inline ::CMsgBotWorldState_Unit* CMsgBotWorldState::_internal_add_units() {
  return _impl_.units_.Add();
}
inline ::CMsgBotWorldState_Unit* CMsgBotWorldState::add_units() {
  ::CMsgBotWorldState_Unit* _add = _internal_add_units();
  // @@protoc_insertion_point(field_add:CMsgBotWorldState.units)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Unit >&
CMsgBotWorldState::units() const {
  // @@protoc_insertion_point(field_list:CMsgBotWorldState.units)
  return _impl_.units_;
}

// repeated .CMsgBotWorldState.DroppedItem dropped_items = 12 [(.diff_encode_field) = 112];
inline int CMsgBotWorldState::_internal_dropped_items_size() const {
  return _impl_.dropped_items_.size();
}
inline int CMsgBotWorldState::dropped_items_size() const {
  return _internal_dropped_items_size();
}
inline void CMsgBotWorldState::clear_dropped_items() {
  _impl_.dropped_items_.Clear();
}
inline ::CMsgBotWorldState_DroppedItem* CMsgBotWorldState::mutable_dropped_items(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.dropped_items)
  return _impl_.dropped_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_DroppedItem >*
CMsgBotWorldState::mutable_dropped_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBotWorldState.dropped_items)
  return &_impl_.dropped_items_;
}
inline const ::CMsgBotWorldState_DroppedItem& CMsgBotWorldState::_internal_dropped_items(int index) const {
  return _impl_.dropped_items_.Get(index);
}
inline const ::CMsgBotWorldState_DroppedItem& CMsgBotWorldState::dropped_items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.dropped_items)
  return _internal_dropped_items(index);
}
inline ::CMsgBotWorldState_DroppedItem* CMsgBotWorldState::_internal_add_dropped_items() {
  return _impl_.dropped_items_.Add();
}
inline ::CMsgBotWorldState_DroppedItem* CMsgBotWorldState::add_dropped_items() {
  ::CMsgBotWorldState_DroppedItem* _add = _internal_add_dropped_items();
  // @@protoc_insertion_point(field_add:CMsgBotWorldState.dropped_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_DroppedItem >&
CMsgBotWorldState::dropped_items() const {
  // @@protoc_insertion_point(field_list:CMsgBotWorldState.dropped_items)
  return _impl_.dropped_items_;
}

// repeated int32 dropped_items_deltas = 112;
inline int CMsgBotWorldState::_internal_dropped_items_deltas_size() const {
  return _impl_.dropped_items_deltas_.size();
}
inline int CMsgBotWorldState::dropped_items_deltas_size() const {
  return _internal_dropped_items_deltas_size();
}
inline void CMsgBotWorldState::clear_dropped_items_deltas() {
  _impl_.dropped_items_deltas_.Clear();
}
inline int32_t CMsgBotWorldState::_internal_dropped_items_deltas(int index) const {
  return _impl_.dropped_items_deltas_.Get(index);
}
inline int32_t CMsgBotWorldState::dropped_items_deltas(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.dropped_items_deltas)
  return _internal_dropped_items_deltas(index);
}
inline void CMsgBotWorldState::set_dropped_items_deltas(int index, int32_t value) {
  _impl_.dropped_items_deltas_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.dropped_items_deltas)
}
inline void CMsgBotWorldState::_internal_add_dropped_items_deltas(int32_t value) {
  _impl_.dropped_items_deltas_.Add(value);
}
inline void CMsgBotWorldState::add_dropped_items_deltas(int32_t value) {
  _internal_add_dropped_items_deltas(value);
  // @@protoc_insertion_point(field_add:CMsgBotWorldState.dropped_items_deltas)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgBotWorldState::_internal_dropped_items_deltas() const {
  return _impl_.dropped_items_deltas_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgBotWorldState::dropped_items_deltas() const {
  // @@protoc_insertion_point(field_list:CMsgBotWorldState.dropped_items_deltas)
  return _internal_dropped_items_deltas();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgBotWorldState::_internal_mutable_dropped_items_deltas() {
  return &_impl_.dropped_items_deltas_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgBotWorldState::mutable_dropped_items_deltas() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBotWorldState.dropped_items_deltas)
  return _internal_mutable_dropped_items_deltas();
}

// repeated .CMsgBotWorldState.RuneInfo rune_infos = 13 [(.diff_encode_field) = 113];
inline int CMsgBotWorldState::_internal_rune_infos_size() const {
  return _impl_.rune_infos_.size();
}
inline int CMsgBotWorldState::rune_infos_size() const {
  return _internal_rune_infos_size();
}
inline void CMsgBotWorldState::clear_rune_infos() {
  _impl_.rune_infos_.Clear();
}
inline ::CMsgBotWorldState_RuneInfo* CMsgBotWorldState::mutable_rune_infos(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.rune_infos)
  return _impl_.rune_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_RuneInfo >*
CMsgBotWorldState::mutable_rune_infos() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBotWorldState.rune_infos)
  return &_impl_.rune_infos_;
}
inline const ::CMsgBotWorldState_RuneInfo& CMsgBotWorldState::_internal_rune_infos(int index) const {
  return _impl_.rune_infos_.Get(index);
}
inline const ::CMsgBotWorldState_RuneInfo& CMsgBotWorldState::rune_infos(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.rune_infos)
  return _internal_rune_infos(index);
}
inline ::CMsgBotWorldState_RuneInfo* CMsgBotWorldState::_internal_add_rune_infos() {
  return _impl_.rune_infos_.Add();
}
inline ::CMsgBotWorldState_RuneInfo* CMsgBotWorldState::add_rune_infos() {
  ::CMsgBotWorldState_RuneInfo* _add = _internal_add_rune_infos();
  // @@protoc_insertion_point(field_add:CMsgBotWorldState.rune_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_RuneInfo >&
CMsgBotWorldState::rune_infos() const {
  // @@protoc_insertion_point(field_list:CMsgBotWorldState.rune_infos)
  return _impl_.rune_infos_;
}

// repeated int32 rune_infos_deltas = 113;
inline int CMsgBotWorldState::_internal_rune_infos_deltas_size() const {
  return _impl_.rune_infos_deltas_.size();
}
inline int CMsgBotWorldState::rune_infos_deltas_size() const {
  return _internal_rune_infos_deltas_size();
}
inline void CMsgBotWorldState::clear_rune_infos_deltas() {
  _impl_.rune_infos_deltas_.Clear();
}
inline int32_t CMsgBotWorldState::_internal_rune_infos_deltas(int index) const {
  return _impl_.rune_infos_deltas_.Get(index);
}
inline int32_t CMsgBotWorldState::rune_infos_deltas(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.rune_infos_deltas)
  return _internal_rune_infos_deltas(index);
}
inline void CMsgBotWorldState::set_rune_infos_deltas(int index, int32_t value) {
  _impl_.rune_infos_deltas_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgBotWorldState.rune_infos_deltas)
}
inline void CMsgBotWorldState::_internal_add_rune_infos_deltas(int32_t value) {
  _impl_.rune_infos_deltas_.Add(value);
}
inline void CMsgBotWorldState::add_rune_infos_deltas(int32_t value) {
  _internal_add_rune_infos_deltas(value);
  // @@protoc_insertion_point(field_add:CMsgBotWorldState.rune_infos_deltas)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgBotWorldState::_internal_rune_infos_deltas() const {
  return _impl_.rune_infos_deltas_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgBotWorldState::rune_infos_deltas() const {
  // @@protoc_insertion_point(field_list:CMsgBotWorldState.rune_infos_deltas)
  return _internal_rune_infos_deltas();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgBotWorldState::_internal_mutable_rune_infos_deltas() {
  return &_impl_.rune_infos_deltas_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgBotWorldState::mutable_rune_infos_deltas() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBotWorldState.rune_infos_deltas)
  return _internal_mutable_rune_infos_deltas();
}

// repeated .CMsgBotWorldState.TeleportInfo incoming_teleports = 14;
inline int CMsgBotWorldState::_internal_incoming_teleports_size() const {
  return _impl_.incoming_teleports_.size();
}
inline int CMsgBotWorldState::incoming_teleports_size() const {
  return _internal_incoming_teleports_size();
}
inline void CMsgBotWorldState::clear_incoming_teleports() {
  _impl_.incoming_teleports_.Clear();
}
inline ::CMsgBotWorldState_TeleportInfo* CMsgBotWorldState::mutable_incoming_teleports(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.incoming_teleports)
  return _impl_.incoming_teleports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_TeleportInfo >*
CMsgBotWorldState::mutable_incoming_teleports() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBotWorldState.incoming_teleports)
  return &_impl_.incoming_teleports_;
}
inline const ::CMsgBotWorldState_TeleportInfo& CMsgBotWorldState::_internal_incoming_teleports(int index) const {
  return _impl_.incoming_teleports_.Get(index);
}
inline const ::CMsgBotWorldState_TeleportInfo& CMsgBotWorldState::incoming_teleports(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.incoming_teleports)
  return _internal_incoming_teleports(index);
}
inline ::CMsgBotWorldState_TeleportInfo* CMsgBotWorldState::_internal_add_incoming_teleports() {
  return _impl_.incoming_teleports_.Add();
}
inline ::CMsgBotWorldState_TeleportInfo* CMsgBotWorldState::add_incoming_teleports() {
  ::CMsgBotWorldState_TeleportInfo* _add = _internal_add_incoming_teleports();
  // @@protoc_insertion_point(field_add:CMsgBotWorldState.incoming_teleports)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_TeleportInfo >&
CMsgBotWorldState::incoming_teleports() const {
  // @@protoc_insertion_point(field_list:CMsgBotWorldState.incoming_teleports)
  return _impl_.incoming_teleports_;
}

// repeated .CMsgBotWorldState.LinearProjectile linear_projectiles = 15 [(.map_field) = true];
inline int CMsgBotWorldState::_internal_linear_projectiles_size() const {
  return _impl_.linear_projectiles_.size();
}
inline int CMsgBotWorldState::linear_projectiles_size() const {
  return _internal_linear_projectiles_size();
}
inline void CMsgBotWorldState::clear_linear_projectiles() {
  _impl_.linear_projectiles_.Clear();
}
inline ::CMsgBotWorldState_LinearProjectile* CMsgBotWorldState::mutable_linear_projectiles(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.linear_projectiles)
  return _impl_.linear_projectiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_LinearProjectile >*
CMsgBotWorldState::mutable_linear_projectiles() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBotWorldState.linear_projectiles)
  return &_impl_.linear_projectiles_;
}
inline const ::CMsgBotWorldState_LinearProjectile& CMsgBotWorldState::_internal_linear_projectiles(int index) const {
  return _impl_.linear_projectiles_.Get(index);
}
inline const ::CMsgBotWorldState_LinearProjectile& CMsgBotWorldState::linear_projectiles(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.linear_projectiles)
  return _internal_linear_projectiles(index);
}
inline ::CMsgBotWorldState_LinearProjectile* CMsgBotWorldState::_internal_add_linear_projectiles() {
  return _impl_.linear_projectiles_.Add();
}
inline ::CMsgBotWorldState_LinearProjectile* CMsgBotWorldState::add_linear_projectiles() {
  ::CMsgBotWorldState_LinearProjectile* _add = _internal_add_linear_projectiles();
  // @@protoc_insertion_point(field_add:CMsgBotWorldState.linear_projectiles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_LinearProjectile >&
CMsgBotWorldState::linear_projectiles() const {
  // @@protoc_insertion_point(field_list:CMsgBotWorldState.linear_projectiles)
  return _impl_.linear_projectiles_;
}

// repeated .CMsgBotWorldState.AvoidanceZone avoidance_zones = 16;
inline int CMsgBotWorldState::_internal_avoidance_zones_size() const {
  return _impl_.avoidance_zones_.size();
}
inline int CMsgBotWorldState::avoidance_zones_size() const {
  return _internal_avoidance_zones_size();
}
inline void CMsgBotWorldState::clear_avoidance_zones() {
  _impl_.avoidance_zones_.Clear();
}
inline ::CMsgBotWorldState_AvoidanceZone* CMsgBotWorldState::mutable_avoidance_zones(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.avoidance_zones)
  return _impl_.avoidance_zones_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_AvoidanceZone >*
CMsgBotWorldState::mutable_avoidance_zones() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBotWorldState.avoidance_zones)
  return &_impl_.avoidance_zones_;
}
inline const ::CMsgBotWorldState_AvoidanceZone& CMsgBotWorldState::_internal_avoidance_zones(int index) const {
  return _impl_.avoidance_zones_.Get(index);
}
inline const ::CMsgBotWorldState_AvoidanceZone& CMsgBotWorldState::avoidance_zones(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.avoidance_zones)
  return _internal_avoidance_zones(index);
}
inline ::CMsgBotWorldState_AvoidanceZone* CMsgBotWorldState::_internal_add_avoidance_zones() {
  return _impl_.avoidance_zones_.Add();
}
inline ::CMsgBotWorldState_AvoidanceZone* CMsgBotWorldState::add_avoidance_zones() {
  ::CMsgBotWorldState_AvoidanceZone* _add = _internal_add_avoidance_zones();
  // @@protoc_insertion_point(field_add:CMsgBotWorldState.avoidance_zones)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_AvoidanceZone >&
CMsgBotWorldState::avoidance_zones() const {
  // @@protoc_insertion_point(field_list:CMsgBotWorldState.avoidance_zones)
  return _impl_.avoidance_zones_;
}

// repeated .CMsgBotWorldState.Courier couriers = 17 [(.map_field) = true];
inline int CMsgBotWorldState::_internal_couriers_size() const {
  return _impl_.couriers_.size();
}
inline int CMsgBotWorldState::couriers_size() const {
  return _internal_couriers_size();
}
inline void CMsgBotWorldState::clear_couriers() {
  _impl_.couriers_.Clear();
}
inline ::CMsgBotWorldState_Courier* CMsgBotWorldState::mutable_couriers(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.couriers)
  return _impl_.couriers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Courier >*
CMsgBotWorldState::mutable_couriers() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBotWorldState.couriers)
  return &_impl_.couriers_;
}
inline const ::CMsgBotWorldState_Courier& CMsgBotWorldState::_internal_couriers(int index) const {
  return _impl_.couriers_.Get(index);
}
inline const ::CMsgBotWorldState_Courier& CMsgBotWorldState::couriers(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.couriers)
  return _internal_couriers(index);
}
inline ::CMsgBotWorldState_Courier* CMsgBotWorldState::_internal_add_couriers() {
  return _impl_.couriers_.Add();
}
inline ::CMsgBotWorldState_Courier* CMsgBotWorldState::add_couriers() {
  ::CMsgBotWorldState_Courier* _add = _internal_add_couriers();
  // @@protoc_insertion_point(field_add:CMsgBotWorldState.couriers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_Courier >&
CMsgBotWorldState::couriers() const {
  // @@protoc_insertion_point(field_list:CMsgBotWorldState.couriers)
  return _impl_.couriers_;
}

// repeated .CMsgBotWorldState.EventAbility ability_events = 20;
inline int CMsgBotWorldState::_internal_ability_events_size() const {
  return _impl_.ability_events_.size();
}
inline int CMsgBotWorldState::ability_events_size() const {
  return _internal_ability_events_size();
}
inline void CMsgBotWorldState::clear_ability_events() {
  _impl_.ability_events_.Clear();
}
inline ::CMsgBotWorldState_EventAbility* CMsgBotWorldState::mutable_ability_events(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.ability_events)
  return _impl_.ability_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventAbility >*
CMsgBotWorldState::mutable_ability_events() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBotWorldState.ability_events)
  return &_impl_.ability_events_;
}
inline const ::CMsgBotWorldState_EventAbility& CMsgBotWorldState::_internal_ability_events(int index) const {
  return _impl_.ability_events_.Get(index);
}
inline const ::CMsgBotWorldState_EventAbility& CMsgBotWorldState::ability_events(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.ability_events)
  return _internal_ability_events(index);
}
inline ::CMsgBotWorldState_EventAbility* CMsgBotWorldState::_internal_add_ability_events() {
  return _impl_.ability_events_.Add();
}
inline ::CMsgBotWorldState_EventAbility* CMsgBotWorldState::add_ability_events() {
  ::CMsgBotWorldState_EventAbility* _add = _internal_add_ability_events();
  // @@protoc_insertion_point(field_add:CMsgBotWorldState.ability_events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventAbility >&
CMsgBotWorldState::ability_events() const {
  // @@protoc_insertion_point(field_list:CMsgBotWorldState.ability_events)
  return _impl_.ability_events_;
}

// repeated .CMsgBotWorldState.EventDamage damage_events = 21;
inline int CMsgBotWorldState::_internal_damage_events_size() const {
  return _impl_.damage_events_.size();
}
inline int CMsgBotWorldState::damage_events_size() const {
  return _internal_damage_events_size();
}
inline void CMsgBotWorldState::clear_damage_events() {
  _impl_.damage_events_.Clear();
}
inline ::CMsgBotWorldState_EventDamage* CMsgBotWorldState::mutable_damage_events(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.damage_events)
  return _impl_.damage_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventDamage >*
CMsgBotWorldState::mutable_damage_events() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBotWorldState.damage_events)
  return &_impl_.damage_events_;
}
inline const ::CMsgBotWorldState_EventDamage& CMsgBotWorldState::_internal_damage_events(int index) const {
  return _impl_.damage_events_.Get(index);
}
inline const ::CMsgBotWorldState_EventDamage& CMsgBotWorldState::damage_events(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.damage_events)
  return _internal_damage_events(index);
}
inline ::CMsgBotWorldState_EventDamage* CMsgBotWorldState::_internal_add_damage_events() {
  return _impl_.damage_events_.Add();
}
inline ::CMsgBotWorldState_EventDamage* CMsgBotWorldState::add_damage_events() {
  ::CMsgBotWorldState_EventDamage* _add = _internal_add_damage_events();
  // @@protoc_insertion_point(field_add:CMsgBotWorldState.damage_events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventDamage >&
CMsgBotWorldState::damage_events() const {
  // @@protoc_insertion_point(field_list:CMsgBotWorldState.damage_events)
  return _impl_.damage_events_;
}

// repeated .CMsgBotWorldState.EventCourierKilled courier_killed_events = 22;
inline int CMsgBotWorldState::_internal_courier_killed_events_size() const {
  return _impl_.courier_killed_events_.size();
}
inline int CMsgBotWorldState::courier_killed_events_size() const {
  return _internal_courier_killed_events_size();
}
inline void CMsgBotWorldState::clear_courier_killed_events() {
  _impl_.courier_killed_events_.Clear();
}
inline ::CMsgBotWorldState_EventCourierKilled* CMsgBotWorldState::mutable_courier_killed_events(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.courier_killed_events)
  return _impl_.courier_killed_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventCourierKilled >*
CMsgBotWorldState::mutable_courier_killed_events() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBotWorldState.courier_killed_events)
  return &_impl_.courier_killed_events_;
}
inline const ::CMsgBotWorldState_EventCourierKilled& CMsgBotWorldState::_internal_courier_killed_events(int index) const {
  return _impl_.courier_killed_events_.Get(index);
}
inline const ::CMsgBotWorldState_EventCourierKilled& CMsgBotWorldState::courier_killed_events(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.courier_killed_events)
  return _internal_courier_killed_events(index);
}
inline ::CMsgBotWorldState_EventCourierKilled* CMsgBotWorldState::_internal_add_courier_killed_events() {
  return _impl_.courier_killed_events_.Add();
}
inline ::CMsgBotWorldState_EventCourierKilled* CMsgBotWorldState::add_courier_killed_events() {
  ::CMsgBotWorldState_EventCourierKilled* _add = _internal_add_courier_killed_events();
  // @@protoc_insertion_point(field_add:CMsgBotWorldState.courier_killed_events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventCourierKilled >&
CMsgBotWorldState::courier_killed_events() const {
  // @@protoc_insertion_point(field_list:CMsgBotWorldState.courier_killed_events)
  return _impl_.courier_killed_events_;
}

// repeated .CMsgBotWorldState.EventRoshanKilled roshan_killed_events = 23;
inline int CMsgBotWorldState::_internal_roshan_killed_events_size() const {
  return _impl_.roshan_killed_events_.size();
}
inline int CMsgBotWorldState::roshan_killed_events_size() const {
  return _internal_roshan_killed_events_size();
}
inline void CMsgBotWorldState::clear_roshan_killed_events() {
  _impl_.roshan_killed_events_.Clear();
}
inline ::CMsgBotWorldState_EventRoshanKilled* CMsgBotWorldState::mutable_roshan_killed_events(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.roshan_killed_events)
  return _impl_.roshan_killed_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventRoshanKilled >*
CMsgBotWorldState::mutable_roshan_killed_events() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBotWorldState.roshan_killed_events)
  return &_impl_.roshan_killed_events_;
}
inline const ::CMsgBotWorldState_EventRoshanKilled& CMsgBotWorldState::_internal_roshan_killed_events(int index) const {
  return _impl_.roshan_killed_events_.Get(index);
}
inline const ::CMsgBotWorldState_EventRoshanKilled& CMsgBotWorldState::roshan_killed_events(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.roshan_killed_events)
  return _internal_roshan_killed_events(index);
}
inline ::CMsgBotWorldState_EventRoshanKilled* CMsgBotWorldState::_internal_add_roshan_killed_events() {
  return _impl_.roshan_killed_events_.Add();
}
inline ::CMsgBotWorldState_EventRoshanKilled* CMsgBotWorldState::add_roshan_killed_events() {
  ::CMsgBotWorldState_EventRoshanKilled* _add = _internal_add_roshan_killed_events();
  // @@protoc_insertion_point(field_add:CMsgBotWorldState.roshan_killed_events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventRoshanKilled >&
CMsgBotWorldState::roshan_killed_events() const {
  // @@protoc_insertion_point(field_list:CMsgBotWorldState.roshan_killed_events)
  return _impl_.roshan_killed_events_;
}

// repeated .CMsgBotWorldState.EventTree tree_events = 24;
inline int CMsgBotWorldState::_internal_tree_events_size() const {
  return _impl_.tree_events_.size();
}
inline int CMsgBotWorldState::tree_events_size() const {
  return _internal_tree_events_size();
}
inline void CMsgBotWorldState::clear_tree_events() {
  _impl_.tree_events_.Clear();
}
inline ::CMsgBotWorldState_EventTree* CMsgBotWorldState::mutable_tree_events(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBotWorldState.tree_events)
  return _impl_.tree_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventTree >*
CMsgBotWorldState::mutable_tree_events() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBotWorldState.tree_events)
  return &_impl_.tree_events_;
}
inline const ::CMsgBotWorldState_EventTree& CMsgBotWorldState::_internal_tree_events(int index) const {
  return _impl_.tree_events_.Get(index);
}
inline const ::CMsgBotWorldState_EventTree& CMsgBotWorldState::tree_events(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBotWorldState.tree_events)
  return _internal_tree_events(index);
}
inline ::CMsgBotWorldState_EventTree* CMsgBotWorldState::_internal_add_tree_events() {
  return _impl_.tree_events_.Add();
}
inline ::CMsgBotWorldState_EventTree* CMsgBotWorldState::add_tree_events() {
  ::CMsgBotWorldState_EventTree* _add = _internal_add_tree_events();
  // @@protoc_insertion_point(field_add:CMsgBotWorldState.tree_events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBotWorldState_EventTree >&
CMsgBotWorldState::tree_events() const {
  // @@protoc_insertion_point(field_list:CMsgBotWorldState.tree_events)
  return _impl_.tree_events_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CMsgBotWorldState_UnitType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgBotWorldState_UnitType>() {
  return ::CMsgBotWorldState_UnitType_descriptor();
}
template <> struct is_proto_enum< ::CMsgBotWorldState_CourierState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgBotWorldState_CourierState>() {
  return ::CMsgBotWorldState_CourierState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto
