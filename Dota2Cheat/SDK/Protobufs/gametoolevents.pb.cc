// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gametoolevents.proto

#include "gametoolevents.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR ChangeMapToolEvent::ChangeMapToolEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mapname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ChangeMapToolEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeMapToolEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeMapToolEventDefaultTypeInternal() {}
  union {
    ChangeMapToolEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeMapToolEventDefaultTypeInternal _ChangeMapToolEvent_default_instance_;
PROTOBUF_CONSTEXPR TraceRayServerToolEvent::TraceRayServerToolEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_)*/nullptr
  , /*decltype(_impl_.end_)*/nullptr} {}
struct TraceRayServerToolEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceRayServerToolEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceRayServerToolEventDefaultTypeInternal() {}
  union {
    TraceRayServerToolEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceRayServerToolEventDefaultTypeInternal _TraceRayServerToolEvent_default_instance_;
PROTOBUF_CONSTEXPR ToolTraceRayResult::ToolTraceRayResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.impact_)*/nullptr
  , /*decltype(_impl_.normal_)*/nullptr
  , /*decltype(_impl_.hit_)*/false
  , /*decltype(_impl_.distance_)*/0
  , /*decltype(_impl_.fraction_)*/0
  , /*decltype(_impl_.ehandle_)*/0} {}
struct ToolTraceRayResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ToolTraceRayResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ToolTraceRayResultDefaultTypeInternal() {}
  union {
    ToolTraceRayResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ToolTraceRayResultDefaultTypeInternal _ToolTraceRayResult_default_instance_;
PROTOBUF_CONSTEXPR SpawnEntityToolEvent::SpawnEntityToolEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entity_keyvalues_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientsideentity_)*/false} {}
struct SpawnEntityToolEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpawnEntityToolEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpawnEntityToolEventDefaultTypeInternal() {}
  union {
    SpawnEntityToolEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpawnEntityToolEventDefaultTypeInternal _SpawnEntityToolEvent_default_instance_;
PROTOBUF_CONSTEXPR SpawnEntityToolEventResult::SpawnEntityToolEventResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ehandle_)*/0} {}
struct SpawnEntityToolEventResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpawnEntityToolEventResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpawnEntityToolEventResultDefaultTypeInternal() {}
  union {
    SpawnEntityToolEventResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpawnEntityToolEventResultDefaultTypeInternal _SpawnEntityToolEventResult_default_instance_;
PROTOBUF_CONSTEXPR DestroyEntityToolEvent::DestroyEntityToolEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ehandle_)*/0} {}
struct DestroyEntityToolEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DestroyEntityToolEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DestroyEntityToolEventDefaultTypeInternal() {}
  union {
    DestroyEntityToolEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DestroyEntityToolEventDefaultTypeInternal _DestroyEntityToolEvent_default_instance_;
PROTOBUF_CONSTEXPR DestroyAllEntitiesToolEvent::DestroyAllEntitiesToolEvent(
    ::_pbi::ConstantInitialized) {}
struct DestroyAllEntitiesToolEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DestroyAllEntitiesToolEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DestroyAllEntitiesToolEventDefaultTypeInternal() {}
  union {
    DestroyAllEntitiesToolEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DestroyAllEntitiesToolEventDefaultTypeInternal _DestroyAllEntitiesToolEvent_default_instance_;
PROTOBUF_CONSTEXPR RestartMapToolEvent::RestartMapToolEvent(
    ::_pbi::ConstantInitialized) {}
struct RestartMapToolEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RestartMapToolEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RestartMapToolEventDefaultTypeInternal() {}
  union {
    RestartMapToolEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RestartMapToolEventDefaultTypeInternal _RestartMapToolEvent_default_instance_;
PROTOBUF_CONSTEXPR ToolEvent_GetEntityInfo::ToolEvent_GetEntityInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ehandle_)*/0
  , /*decltype(_impl_.clientsideentity_)*/false} {}
struct ToolEvent_GetEntityInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ToolEvent_GetEntityInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ToolEvent_GetEntityInfoDefaultTypeInternal() {}
  union {
    ToolEvent_GetEntityInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ToolEvent_GetEntityInfoDefaultTypeInternal _ToolEvent_GetEntityInfo_default_instance_;
PROTOBUF_CONSTEXPR ToolEvent_GetEntityInfoResult::ToolEvent_GetEntityInfoResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cppclass_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.classname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.origin_)*/nullptr
  , /*decltype(_impl_.mins_)*/nullptr
  , /*decltype(_impl_.maxs_)*/nullptr} {}
struct ToolEvent_GetEntityInfoResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ToolEvent_GetEntityInfoResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ToolEvent_GetEntityInfoResultDefaultTypeInternal() {}
  union {
    ToolEvent_GetEntityInfoResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ToolEvent_GetEntityInfoResultDefaultTypeInternal _ToolEvent_GetEntityInfoResult_default_instance_;
PROTOBUF_CONSTEXPR ToolEvent_GetEntityInputs::ToolEvent_GetEntityInputs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ehandle_)*/0
  , /*decltype(_impl_.clientsideentity_)*/false} {}
struct ToolEvent_GetEntityInputsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ToolEvent_GetEntityInputsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ToolEvent_GetEntityInputsDefaultTypeInternal() {}
  union {
    ToolEvent_GetEntityInputs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ToolEvent_GetEntityInputsDefaultTypeInternal _ToolEvent_GetEntityInputs_default_instance_;
PROTOBUF_CONSTEXPR ToolEvent_GetEntityInputsResult::ToolEvent_GetEntityInputsResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ToolEvent_GetEntityInputsResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ToolEvent_GetEntityInputsResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ToolEvent_GetEntityInputsResultDefaultTypeInternal() {}
  union {
    ToolEvent_GetEntityInputsResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ToolEvent_GetEntityInputsResultDefaultTypeInternal _ToolEvent_GetEntityInputsResult_default_instance_;
PROTOBUF_CONSTEXPR ToolEvent_FireEntityInput::ToolEvent_FireEntityInput(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.input_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.input_param_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ehandle_)*/0
  , /*decltype(_impl_.clientsideentity_)*/false} {}
struct ToolEvent_FireEntityInputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ToolEvent_FireEntityInputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ToolEvent_FireEntityInputDefaultTypeInternal() {}
  union {
    ToolEvent_FireEntityInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ToolEvent_FireEntityInputDefaultTypeInternal _ToolEvent_FireEntityInput_default_instance_;
PROTOBUF_CONSTEXPR ToolEvent_SFMRecordingStateChanged::ToolEvent_SFMRecordingStateChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.isrecording_)*/false} {}
struct ToolEvent_SFMRecordingStateChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ToolEvent_SFMRecordingStateChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ToolEvent_SFMRecordingStateChangedDefaultTypeInternal() {}
  union {
    ToolEvent_SFMRecordingStateChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ToolEvent_SFMRecordingStateChangedDefaultTypeInternal _ToolEvent_SFMRecordingStateChanged_default_instance_;
PROTOBUF_CONSTEXPR ToolEvent_SFMToolActiveStateChanged::ToolEvent_SFMToolActiveStateChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.isactive_)*/false} {}
struct ToolEvent_SFMToolActiveStateChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ToolEvent_SFMToolActiveStateChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ToolEvent_SFMToolActiveStateChangedDefaultTypeInternal() {}
  union {
    ToolEvent_SFMToolActiveStateChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ToolEvent_SFMToolActiveStateChangedDefaultTypeInternal _ToolEvent_SFMToolActiveStateChanged_default_instance_;
static ::_pb::Metadata file_level_metadata_gametoolevents_2eproto[15];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_gametoolevents_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_gametoolevents_2eproto = nullptr;

const uint32_t TableStruct_gametoolevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ChangeMapToolEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ChangeMapToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChangeMapToolEvent, _impl_.mapname_),
  0,
  PROTOBUF_FIELD_OFFSET(::TraceRayServerToolEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TraceRayServerToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TraceRayServerToolEvent, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::TraceRayServerToolEvent, _impl_.end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ToolTraceRayResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ToolTraceRayResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ToolTraceRayResult, _impl_.hit_),
  PROTOBUF_FIELD_OFFSET(::ToolTraceRayResult, _impl_.impact_),
  PROTOBUF_FIELD_OFFSET(::ToolTraceRayResult, _impl_.normal_),
  PROTOBUF_FIELD_OFFSET(::ToolTraceRayResult, _impl_.distance_),
  PROTOBUF_FIELD_OFFSET(::ToolTraceRayResult, _impl_.fraction_),
  PROTOBUF_FIELD_OFFSET(::ToolTraceRayResult, _impl_.ehandle_),
  2,
  0,
  1,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::SpawnEntityToolEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SpawnEntityToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SpawnEntityToolEvent, _impl_.entity_keyvalues_),
  PROTOBUF_FIELD_OFFSET(::SpawnEntityToolEvent, _impl_.clientsideentity_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SpawnEntityToolEventResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SpawnEntityToolEventResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SpawnEntityToolEventResult, _impl_.ehandle_),
  0,
  PROTOBUF_FIELD_OFFSET(::DestroyEntityToolEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::DestroyEntityToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DestroyEntityToolEvent, _impl_.ehandle_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DestroyAllEntitiesToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RestartMapToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfo, _impl_.ehandle_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfo, _impl_.clientsideentity_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfoResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfoResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfoResult, _impl_.cppclass_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfoResult, _impl_.classname_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfoResult, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfoResult, _impl_.origin_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfoResult, _impl_.mins_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfoResult, _impl_.maxs_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInputs, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInputs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInputs, _impl_.ehandle_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInputs, _impl_.clientsideentity_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInputsResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInputsResult, _impl_.input_list_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_FireEntityInput, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_FireEntityInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ToolEvent_FireEntityInput, _impl_.ehandle_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_FireEntityInput, _impl_.clientsideentity_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_FireEntityInput, _impl_.input_name_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_FireEntityInput, _impl_.input_param_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ToolEvent_SFMRecordingStateChanged, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_SFMRecordingStateChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ToolEvent_SFMRecordingStateChanged, _impl_.isrecording_),
  0,
  PROTOBUF_FIELD_OFFSET(::ToolEvent_SFMToolActiveStateChanged, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_SFMToolActiveStateChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ToolEvent_SFMToolActiveStateChanged, _impl_.isactive_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::ChangeMapToolEvent)},
  { 8, 16, -1, sizeof(::TraceRayServerToolEvent)},
  { 18, 30, -1, sizeof(::ToolTraceRayResult)},
  { 36, 44, -1, sizeof(::SpawnEntityToolEvent)},
  { 46, 53, -1, sizeof(::SpawnEntityToolEventResult)},
  { 54, 61, -1, sizeof(::DestroyEntityToolEvent)},
  { 62, -1, -1, sizeof(::DestroyAllEntitiesToolEvent)},
  { 68, -1, -1, sizeof(::RestartMapToolEvent)},
  { 74, 82, -1, sizeof(::ToolEvent_GetEntityInfo)},
  { 84, 96, -1, sizeof(::ToolEvent_GetEntityInfoResult)},
  { 102, 110, -1, sizeof(::ToolEvent_GetEntityInputs)},
  { 112, -1, -1, sizeof(::ToolEvent_GetEntityInputsResult)},
  { 119, 129, -1, sizeof(::ToolEvent_FireEntityInput)},
  { 133, 140, -1, sizeof(::ToolEvent_SFMRecordingStateChanged)},
  { 141, 148, -1, sizeof(::ToolEvent_SFMToolActiveStateChanged)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_ChangeMapToolEvent_default_instance_._instance,
  &::_TraceRayServerToolEvent_default_instance_._instance,
  &::_ToolTraceRayResult_default_instance_._instance,
  &::_SpawnEntityToolEvent_default_instance_._instance,
  &::_SpawnEntityToolEventResult_default_instance_._instance,
  &::_DestroyEntityToolEvent_default_instance_._instance,
  &::_DestroyAllEntitiesToolEvent_default_instance_._instance,
  &::_RestartMapToolEvent_default_instance_._instance,
  &::_ToolEvent_GetEntityInfo_default_instance_._instance,
  &::_ToolEvent_GetEntityInfoResult_default_instance_._instance,
  &::_ToolEvent_GetEntityInputs_default_instance_._instance,
  &::_ToolEvent_GetEntityInputsResult_default_instance_._instance,
  &::_ToolEvent_FireEntityInput_default_instance_._instance,
  &::_ToolEvent_SFMRecordingStateChanged_default_instance_._instance,
  &::_ToolEvent_SFMToolActiveStateChanged_default_instance_._instance,
};

const char descriptor_table_protodef_gametoolevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024gametoolevents.proto\032\026networkbasetypes"
  ".proto\"%\n\022ChangeMapToolEvent\022\017\n\007mapname\030"
  "\001 \001(\t\"O\n\027TraceRayServerToolEvent\022\032\n\005star"
  "t\030\001 \001(\0132\013.CMsgVector\022\030\n\003end\030\002 \001(\0132\013.CMsg"
  "Vector\"\220\001\n\022ToolTraceRayResult\022\013\n\003hit\030\001 \001"
  "(\010\022\033\n\006impact\030\002 \001(\0132\013.CMsgVector\022\033\n\006norma"
  "l\030\003 \001(\0132\013.CMsgVector\022\020\n\010distance\030\004 \001(\002\022\020"
  "\n\010fraction\030\005 \001(\002\022\017\n\007ehandle\030\006 \001(\005\"J\n\024Spa"
  "wnEntityToolEvent\022\030\n\020entity_keyvalues\030\001 "
  "\001(\014\022\030\n\020clientsideentity\030\002 \001(\010\"-\n\032SpawnEn"
  "tityToolEventResult\022\017\n\007ehandle\030\001 \001(\005\")\n\026"
  "DestroyEntityToolEvent\022\017\n\007ehandle\030\001 \001(\005\""
  "\035\n\033DestroyAllEntitiesToolEvent\"\025\n\023Restar"
  "tMapToolEvent\"D\n\027ToolEvent_GetEntityInfo"
  "\022\017\n\007ehandle\030\001 \001(\005\022\030\n\020clientsideentity\030\002 "
  "\001(\010\"\257\001\n\035ToolEvent_GetEntityInfoResult\022\032\n"
  "\010cppclass\030\001 \001(\t:\010shithead\022\021\n\tclassname\030\002"
  " \001(\t\022\014\n\004name\030\003 \001(\t\022\033\n\006origin\030\004 \001(\0132\013.CMs"
  "gVector\022\031\n\004mins\030\005 \001(\0132\013.CMsgVector\022\031\n\004ma"
  "xs\030\006 \001(\0132\013.CMsgVector\"F\n\031ToolEvent_GetEn"
  "tityInputs\022\017\n\007ehandle\030\001 \001(\005\022\030\n\020clientsid"
  "eentity\030\002 \001(\010\"5\n\037ToolEvent_GetEntityInpu"
  "tsResult\022\022\n\ninput_list\030\001 \003(\t\"o\n\031ToolEven"
  "t_FireEntityInput\022\017\n\007ehandle\030\001 \001(\005\022\030\n\020cl"
  "ientsideentity\030\002 \001(\010\022\022\n\ninput_name\030\003 \001(\t"
  "\022\023\n\013input_param\030\004 \001(\t\"9\n\"ToolEvent_SFMRe"
  "cordingStateChanged\022\023\n\013isrecording\030\001 \001(\010"
  "\"7\n#ToolEvent_SFMToolActiveStateChanged\022"
  "\020\n\010isactive\030\001 \001(\010B\003\200\001\000"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_gametoolevents_2eproto_deps[1] = {
  &::descriptor_table_networkbasetypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_gametoolevents_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_gametoolevents_2eproto = {
    false, false, 1142, descriptor_table_protodef_gametoolevents_2eproto,
    "gametoolevents.proto",
    &descriptor_table_gametoolevents_2eproto_once, descriptor_table_gametoolevents_2eproto_deps, 1, 15,
    schemas, file_default_instances, TableStruct_gametoolevents_2eproto::offsets,
    file_level_metadata_gametoolevents_2eproto, file_level_enum_descriptors_gametoolevents_2eproto,
    file_level_service_descriptors_gametoolevents_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_gametoolevents_2eproto_getter() {
  return &descriptor_table_gametoolevents_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_gametoolevents_2eproto(&descriptor_table_gametoolevents_2eproto);

// ===================================================================

class ChangeMapToolEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeMapToolEvent>()._impl_._has_bits_);
  static void set_has_mapname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChangeMapToolEvent::ChangeMapToolEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChangeMapToolEvent)
}
ChangeMapToolEvent::ChangeMapToolEvent(const ChangeMapToolEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChangeMapToolEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mapname_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mapname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mapname()) {
    _this->_impl_.mapname_.Set(from._internal_mapname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ChangeMapToolEvent)
}

inline void ChangeMapToolEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mapname_){}
  };
  _impl_.mapname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChangeMapToolEvent::~ChangeMapToolEvent() {
  // @@protoc_insertion_point(destructor:ChangeMapToolEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangeMapToolEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mapname_.Destroy();
}

void ChangeMapToolEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChangeMapToolEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ChangeMapToolEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.mapname_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeMapToolEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string mapname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mapname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ChangeMapToolEvent.mapname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangeMapToolEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChangeMapToolEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string mapname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mapname().data(), static_cast<int>(this->_internal_mapname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ChangeMapToolEvent.mapname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mapname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChangeMapToolEvent)
  return target;
}

size_t ChangeMapToolEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChangeMapToolEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string mapname = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeMapToolEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChangeMapToolEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeMapToolEvent::GetClassData() const { return &_class_data_; }


void ChangeMapToolEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChangeMapToolEvent*>(&to_msg);
  auto& from = static_cast<const ChangeMapToolEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChangeMapToolEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mapname()) {
    _this->_internal_set_mapname(from._internal_mapname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeMapToolEvent::CopyFrom(const ChangeMapToolEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChangeMapToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeMapToolEvent::IsInitialized() const {
  return true;
}

void ChangeMapToolEvent::InternalSwap(ChangeMapToolEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapname_, lhs_arena,
      &other->_impl_.mapname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeMapToolEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gametoolevents_2eproto_getter, &descriptor_table_gametoolevents_2eproto_once,
      file_level_metadata_gametoolevents_2eproto[0]);
}

// ===================================================================

class TraceRayServerToolEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceRayServerToolEvent>()._impl_._has_bits_);
  static const ::CMsgVector& start(const TraceRayServerToolEvent* msg);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgVector& end(const TraceRayServerToolEvent* msg);
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgVector&
TraceRayServerToolEvent::_Internal::start(const TraceRayServerToolEvent* msg) {
  return *msg->_impl_.start_;
}
const ::CMsgVector&
TraceRayServerToolEvent::_Internal::end(const TraceRayServerToolEvent* msg) {
  return *msg->_impl_.end_;
}
void TraceRayServerToolEvent::clear_start() {
  if (_impl_.start_ != nullptr) _impl_.start_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TraceRayServerToolEvent::clear_end() {
  if (_impl_.end_ != nullptr) _impl_.end_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TraceRayServerToolEvent::TraceRayServerToolEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TraceRayServerToolEvent)
}
TraceRayServerToolEvent::TraceRayServerToolEvent(const TraceRayServerToolEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TraceRayServerToolEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_){nullptr}
    , decltype(_impl_.end_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    _this->_impl_.start_ = new ::CMsgVector(*from._impl_.start_);
  }
  if (from._internal_has_end()) {
    _this->_impl_.end_ = new ::CMsgVector(*from._impl_.end_);
  }
  // @@protoc_insertion_point(copy_constructor:TraceRayServerToolEvent)
}

inline void TraceRayServerToolEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_){nullptr}
    , decltype(_impl_.end_){nullptr}
  };
}

TraceRayServerToolEvent::~TraceRayServerToolEvent() {
  // @@protoc_insertion_point(destructor:TraceRayServerToolEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceRayServerToolEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.start_;
  if (this != internal_default_instance()) delete _impl_.end_;
}

void TraceRayServerToolEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceRayServerToolEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:TraceRayServerToolEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.start_ != nullptr);
      _impl_.start_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.end_ != nullptr);
      _impl_.end_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceRayServerToolEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgVector start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceRayServerToolEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TraceRayServerToolEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgVector start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::start(this),
        _Internal::start(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgVector end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::end(this),
        _Internal::end(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TraceRayServerToolEvent)
  return target;
}

size_t TraceRayServerToolEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TraceRayServerToolEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgVector start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.start_);
    }

    // optional .CMsgVector end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.end_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceRayServerToolEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceRayServerToolEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceRayServerToolEvent::GetClassData() const { return &_class_data_; }


void TraceRayServerToolEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceRayServerToolEvent*>(&to_msg);
  auto& from = static_cast<const TraceRayServerToolEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TraceRayServerToolEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_start()->::CMsgVector::MergeFrom(
          from._internal_start());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_end()->::CMsgVector::MergeFrom(
          from._internal_end());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceRayServerToolEvent::CopyFrom(const TraceRayServerToolEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TraceRayServerToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceRayServerToolEvent::IsInitialized() const {
  return true;
}

void TraceRayServerToolEvent::InternalSwap(TraceRayServerToolEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceRayServerToolEvent, _impl_.end_)
      + sizeof(TraceRayServerToolEvent::_impl_.end_)
      - PROTOBUF_FIELD_OFFSET(TraceRayServerToolEvent, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceRayServerToolEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gametoolevents_2eproto_getter, &descriptor_table_gametoolevents_2eproto_once,
      file_level_metadata_gametoolevents_2eproto[1]);
}

// ===================================================================

class ToolTraceRayResult::_Internal {
 public:
  using HasBits = decltype(std::declval<ToolTraceRayResult>()._impl_._has_bits_);
  static void set_has_hit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgVector& impact(const ToolTraceRayResult* msg);
  static void set_has_impact(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgVector& normal(const ToolTraceRayResult* msg);
  static void set_has_normal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CMsgVector&
ToolTraceRayResult::_Internal::impact(const ToolTraceRayResult* msg) {
  return *msg->_impl_.impact_;
}
const ::CMsgVector&
ToolTraceRayResult::_Internal::normal(const ToolTraceRayResult* msg) {
  return *msg->_impl_.normal_;
}
void ToolTraceRayResult::clear_impact() {
  if (_impl_.impact_ != nullptr) _impl_.impact_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ToolTraceRayResult::clear_normal() {
  if (_impl_.normal_ != nullptr) _impl_.normal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ToolTraceRayResult::ToolTraceRayResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ToolTraceRayResult)
}
ToolTraceRayResult::ToolTraceRayResult(const ToolTraceRayResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ToolTraceRayResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.impact_){nullptr}
    , decltype(_impl_.normal_){nullptr}
    , decltype(_impl_.hit_){}
    , decltype(_impl_.distance_){}
    , decltype(_impl_.fraction_){}
    , decltype(_impl_.ehandle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_impact()) {
    _this->_impl_.impact_ = new ::CMsgVector(*from._impl_.impact_);
  }
  if (from._internal_has_normal()) {
    _this->_impl_.normal_ = new ::CMsgVector(*from._impl_.normal_);
  }
  ::memcpy(&_impl_.hit_, &from._impl_.hit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ehandle_) -
    reinterpret_cast<char*>(&_impl_.hit_)) + sizeof(_impl_.ehandle_));
  // @@protoc_insertion_point(copy_constructor:ToolTraceRayResult)
}

inline void ToolTraceRayResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.impact_){nullptr}
    , decltype(_impl_.normal_){nullptr}
    , decltype(_impl_.hit_){false}
    , decltype(_impl_.distance_){0}
    , decltype(_impl_.fraction_){0}
    , decltype(_impl_.ehandle_){0}
  };
}

ToolTraceRayResult::~ToolTraceRayResult() {
  // @@protoc_insertion_point(destructor:ToolTraceRayResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ToolTraceRayResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.impact_;
  if (this != internal_default_instance()) delete _impl_.normal_;
}

void ToolTraceRayResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ToolTraceRayResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ToolTraceRayResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.impact_ != nullptr);
      _impl_.impact_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.normal_ != nullptr);
      _impl_.normal_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.hit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ehandle_) -
        reinterpret_cast<char*>(&_impl_.hit_)) + sizeof(_impl_.ehandle_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToolTraceRayResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool hit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hit(&has_bits);
          _impl_.hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector impact = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_impact(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector normal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_normal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_distance(&has_bits);
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fraction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_fraction(&has_bits);
          _impl_.fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ehandle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_ehandle(&has_bits);
          _impl_.ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ToolTraceRayResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolTraceRayResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool hit = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_hit(), target);
  }

  // optional .CMsgVector impact = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::impact(this),
        _Internal::impact(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgVector normal = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::normal(this),
        _Internal::normal(this).GetCachedSize(), target, stream);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_distance(), target);
  }

  // optional float fraction = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_fraction(), target);
  }

  // optional int32 ehandle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_ehandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolTraceRayResult)
  return target;
}

size_t ToolTraceRayResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ToolTraceRayResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .CMsgVector impact = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.impact_);
    }

    // optional .CMsgVector normal = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.normal_);
    }

    // optional bool hit = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float distance = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float fraction = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 ehandle = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ehandle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ToolTraceRayResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ToolTraceRayResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ToolTraceRayResult::GetClassData() const { return &_class_data_; }


void ToolTraceRayResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ToolTraceRayResult*>(&to_msg);
  auto& from = static_cast<const ToolTraceRayResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ToolTraceRayResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_impact()->::CMsgVector::MergeFrom(
          from._internal_impact());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_normal()->::CMsgVector::MergeFrom(
          from._internal_normal());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hit_ = from._impl_.hit_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.distance_ = from._impl_.distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.fraction_ = from._impl_.fraction_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ehandle_ = from._impl_.ehandle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ToolTraceRayResult::CopyFrom(const ToolTraceRayResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ToolTraceRayResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolTraceRayResult::IsInitialized() const {
  return true;
}

void ToolTraceRayResult::InternalSwap(ToolTraceRayResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ToolTraceRayResult, _impl_.ehandle_)
      + sizeof(ToolTraceRayResult::_impl_.ehandle_)
      - PROTOBUF_FIELD_OFFSET(ToolTraceRayResult, _impl_.impact_)>(
          reinterpret_cast<char*>(&_impl_.impact_),
          reinterpret_cast<char*>(&other->_impl_.impact_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolTraceRayResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gametoolevents_2eproto_getter, &descriptor_table_gametoolevents_2eproto_once,
      file_level_metadata_gametoolevents_2eproto[2]);
}

// ===================================================================

class SpawnEntityToolEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SpawnEntityToolEvent>()._impl_._has_bits_);
  static void set_has_entity_keyvalues(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clientsideentity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SpawnEntityToolEvent::SpawnEntityToolEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SpawnEntityToolEvent)
}
SpawnEntityToolEvent::SpawnEntityToolEvent(const SpawnEntityToolEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpawnEntityToolEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_keyvalues_){}
    , decltype(_impl_.clientsideentity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.entity_keyvalues_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_keyvalues_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entity_keyvalues()) {
    _this->_impl_.entity_keyvalues_.Set(from._internal_entity_keyvalues(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.clientsideentity_ = from._impl_.clientsideentity_;
  // @@protoc_insertion_point(copy_constructor:SpawnEntityToolEvent)
}

inline void SpawnEntityToolEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_keyvalues_){}
    , decltype(_impl_.clientsideentity_){false}
  };
  _impl_.entity_keyvalues_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_keyvalues_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SpawnEntityToolEvent::~SpawnEntityToolEvent() {
  // @@protoc_insertion_point(destructor:SpawnEntityToolEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpawnEntityToolEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entity_keyvalues_.Destroy();
}

void SpawnEntityToolEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpawnEntityToolEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:SpawnEntityToolEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.entity_keyvalues_.ClearNonDefaultToEmpty();
  }
  _impl_.clientsideentity_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpawnEntityToolEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes entity_keyvalues = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_entity_keyvalues();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clientsideentity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_clientsideentity(&has_bits);
          _impl_.clientsideentity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpawnEntityToolEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpawnEntityToolEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes entity_keyvalues = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_entity_keyvalues(), target);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_clientsideentity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpawnEntityToolEvent)
  return target;
}

size_t SpawnEntityToolEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpawnEntityToolEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes entity_keyvalues = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_entity_keyvalues());
    }

    // optional bool clientsideentity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpawnEntityToolEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpawnEntityToolEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpawnEntityToolEvent::GetClassData() const { return &_class_data_; }


void SpawnEntityToolEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpawnEntityToolEvent*>(&to_msg);
  auto& from = static_cast<const SpawnEntityToolEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SpawnEntityToolEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_entity_keyvalues(from._internal_entity_keyvalues());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.clientsideentity_ = from._impl_.clientsideentity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpawnEntityToolEvent::CopyFrom(const SpawnEntityToolEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpawnEntityToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnEntityToolEvent::IsInitialized() const {
  return true;
}

void SpawnEntityToolEvent::InternalSwap(SpawnEntityToolEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entity_keyvalues_, lhs_arena,
      &other->_impl_.entity_keyvalues_, rhs_arena
  );
  swap(_impl_.clientsideentity_, other->_impl_.clientsideentity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpawnEntityToolEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gametoolevents_2eproto_getter, &descriptor_table_gametoolevents_2eproto_once,
      file_level_metadata_gametoolevents_2eproto[3]);
}

// ===================================================================

class SpawnEntityToolEventResult::_Internal {
 public:
  using HasBits = decltype(std::declval<SpawnEntityToolEventResult>()._impl_._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SpawnEntityToolEventResult::SpawnEntityToolEventResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SpawnEntityToolEventResult)
}
SpawnEntityToolEventResult::SpawnEntityToolEventResult(const SpawnEntityToolEventResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpawnEntityToolEventResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ehandle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ehandle_ = from._impl_.ehandle_;
  // @@protoc_insertion_point(copy_constructor:SpawnEntityToolEventResult)
}

inline void SpawnEntityToolEventResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ehandle_){0}
  };
}

SpawnEntityToolEventResult::~SpawnEntityToolEventResult() {
  // @@protoc_insertion_point(destructor:SpawnEntityToolEventResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpawnEntityToolEventResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpawnEntityToolEventResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpawnEntityToolEventResult::Clear() {
// @@protoc_insertion_point(message_clear_start:SpawnEntityToolEventResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ehandle_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpawnEntityToolEventResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ehandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          _impl_.ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpawnEntityToolEventResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpawnEntityToolEventResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ehandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpawnEntityToolEventResult)
  return target;
}

size_t SpawnEntityToolEventResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpawnEntityToolEventResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 ehandle = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ehandle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpawnEntityToolEventResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpawnEntityToolEventResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpawnEntityToolEventResult::GetClassData() const { return &_class_data_; }


void SpawnEntityToolEventResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpawnEntityToolEventResult*>(&to_msg);
  auto& from = static_cast<const SpawnEntityToolEventResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SpawnEntityToolEventResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ehandle()) {
    _this->_internal_set_ehandle(from._internal_ehandle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpawnEntityToolEventResult::CopyFrom(const SpawnEntityToolEventResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpawnEntityToolEventResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnEntityToolEventResult::IsInitialized() const {
  return true;
}

void SpawnEntityToolEventResult::InternalSwap(SpawnEntityToolEventResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.ehandle_, other->_impl_.ehandle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpawnEntityToolEventResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gametoolevents_2eproto_getter, &descriptor_table_gametoolevents_2eproto_once,
      file_level_metadata_gametoolevents_2eproto[4]);
}

// ===================================================================

class DestroyEntityToolEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<DestroyEntityToolEvent>()._impl_._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DestroyEntityToolEvent::DestroyEntityToolEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DestroyEntityToolEvent)
}
DestroyEntityToolEvent::DestroyEntityToolEvent(const DestroyEntityToolEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DestroyEntityToolEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ehandle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ehandle_ = from._impl_.ehandle_;
  // @@protoc_insertion_point(copy_constructor:DestroyEntityToolEvent)
}

inline void DestroyEntityToolEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ehandle_){0}
  };
}

DestroyEntityToolEvent::~DestroyEntityToolEvent() {
  // @@protoc_insertion_point(destructor:DestroyEntityToolEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DestroyEntityToolEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DestroyEntityToolEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DestroyEntityToolEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:DestroyEntityToolEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ehandle_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DestroyEntityToolEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ehandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          _impl_.ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DestroyEntityToolEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DestroyEntityToolEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ehandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DestroyEntityToolEvent)
  return target;
}

size_t DestroyEntityToolEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DestroyEntityToolEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 ehandle = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ehandle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DestroyEntityToolEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DestroyEntityToolEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DestroyEntityToolEvent::GetClassData() const { return &_class_data_; }


void DestroyEntityToolEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DestroyEntityToolEvent*>(&to_msg);
  auto& from = static_cast<const DestroyEntityToolEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DestroyEntityToolEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ehandle()) {
    _this->_internal_set_ehandle(from._internal_ehandle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DestroyEntityToolEvent::CopyFrom(const DestroyEntityToolEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DestroyEntityToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyEntityToolEvent::IsInitialized() const {
  return true;
}

void DestroyEntityToolEvent::InternalSwap(DestroyEntityToolEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.ehandle_, other->_impl_.ehandle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DestroyEntityToolEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gametoolevents_2eproto_getter, &descriptor_table_gametoolevents_2eproto_once,
      file_level_metadata_gametoolevents_2eproto[5]);
}

// ===================================================================

class DestroyAllEntitiesToolEvent::_Internal {
 public:
};

DestroyAllEntitiesToolEvent::DestroyAllEntitiesToolEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DestroyAllEntitiesToolEvent)
}
DestroyAllEntitiesToolEvent::DestroyAllEntitiesToolEvent(const DestroyAllEntitiesToolEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DestroyAllEntitiesToolEvent* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DestroyAllEntitiesToolEvent)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DestroyAllEntitiesToolEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DestroyAllEntitiesToolEvent::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DestroyAllEntitiesToolEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gametoolevents_2eproto_getter, &descriptor_table_gametoolevents_2eproto_once,
      file_level_metadata_gametoolevents_2eproto[6]);
}

// ===================================================================

class RestartMapToolEvent::_Internal {
 public:
};

RestartMapToolEvent::RestartMapToolEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:RestartMapToolEvent)
}
RestartMapToolEvent::RestartMapToolEvent(const RestartMapToolEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RestartMapToolEvent* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RestartMapToolEvent)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RestartMapToolEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RestartMapToolEvent::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RestartMapToolEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gametoolevents_2eproto_getter, &descriptor_table_gametoolevents_2eproto_once,
      file_level_metadata_gametoolevents_2eproto[7]);
}

// ===================================================================

class ToolEvent_GetEntityInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ToolEvent_GetEntityInfo>()._impl_._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clientsideentity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ToolEvent_GetEntityInfo::ToolEvent_GetEntityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ToolEvent_GetEntityInfo)
}
ToolEvent_GetEntityInfo::ToolEvent_GetEntityInfo(const ToolEvent_GetEntityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ToolEvent_GetEntityInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ehandle_){}
    , decltype(_impl_.clientsideentity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ehandle_, &from._impl_.ehandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clientsideentity_) -
    reinterpret_cast<char*>(&_impl_.ehandle_)) + sizeof(_impl_.clientsideentity_));
  // @@protoc_insertion_point(copy_constructor:ToolEvent_GetEntityInfo)
}

inline void ToolEvent_GetEntityInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ehandle_){0}
    , decltype(_impl_.clientsideentity_){false}
  };
}

ToolEvent_GetEntityInfo::~ToolEvent_GetEntityInfo() {
  // @@protoc_insertion_point(destructor:ToolEvent_GetEntityInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ToolEvent_GetEntityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ToolEvent_GetEntityInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ToolEvent_GetEntityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ToolEvent_GetEntityInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.ehandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.clientsideentity_) -
        reinterpret_cast<char*>(&_impl_.ehandle_)) + sizeof(_impl_.clientsideentity_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToolEvent_GetEntityInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ehandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          _impl_.ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clientsideentity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_clientsideentity(&has_bits);
          _impl_.clientsideentity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ToolEvent_GetEntityInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolEvent_GetEntityInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ehandle(), target);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_clientsideentity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolEvent_GetEntityInfo)
  return target;
}

size_t ToolEvent_GetEntityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ToolEvent_GetEntityInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 ehandle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ehandle());
    }

    // optional bool clientsideentity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ToolEvent_GetEntityInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ToolEvent_GetEntityInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ToolEvent_GetEntityInfo::GetClassData() const { return &_class_data_; }


void ToolEvent_GetEntityInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ToolEvent_GetEntityInfo*>(&to_msg);
  auto& from = static_cast<const ToolEvent_GetEntityInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ToolEvent_GetEntityInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ehandle_ = from._impl_.ehandle_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.clientsideentity_ = from._impl_.clientsideentity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ToolEvent_GetEntityInfo::CopyFrom(const ToolEvent_GetEntityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ToolEvent_GetEntityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_GetEntityInfo::IsInitialized() const {
  return true;
}

void ToolEvent_GetEntityInfo::InternalSwap(ToolEvent_GetEntityInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ToolEvent_GetEntityInfo, _impl_.clientsideentity_)
      + sizeof(ToolEvent_GetEntityInfo::_impl_.clientsideentity_)
      - PROTOBUF_FIELD_OFFSET(ToolEvent_GetEntityInfo, _impl_.ehandle_)>(
          reinterpret_cast<char*>(&_impl_.ehandle_),
          reinterpret_cast<char*>(&other->_impl_.ehandle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolEvent_GetEntityInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gametoolevents_2eproto_getter, &descriptor_table_gametoolevents_2eproto_once,
      file_level_metadata_gametoolevents_2eproto[8]);
}

// ===================================================================

class ToolEvent_GetEntityInfoResult::_Internal {
 public:
  using HasBits = decltype(std::declval<ToolEvent_GetEntityInfoResult>()._impl_._has_bits_);
  static void set_has_cppclass(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_classname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgVector& origin(const ToolEvent_GetEntityInfoResult* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgVector& mins(const ToolEvent_GetEntityInfoResult* msg);
  static void set_has_mins(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgVector& maxs(const ToolEvent_GetEntityInfoResult* msg);
  static void set_has_maxs(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CMsgVector&
ToolEvent_GetEntityInfoResult::_Internal::origin(const ToolEvent_GetEntityInfoResult* msg) {
  return *msg->_impl_.origin_;
}
const ::CMsgVector&
ToolEvent_GetEntityInfoResult::_Internal::mins(const ToolEvent_GetEntityInfoResult* msg) {
  return *msg->_impl_.mins_;
}
const ::CMsgVector&
ToolEvent_GetEntityInfoResult::_Internal::maxs(const ToolEvent_GetEntityInfoResult* msg) {
  return *msg->_impl_.maxs_;
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ToolEvent_GetEntityInfoResult::Impl_::_i_give_permission_to_break_this_code_default_cppclass_{{{"shithead", 8}}, {nullptr}};
void ToolEvent_GetEntityInfoResult::clear_origin() {
  if (_impl_.origin_ != nullptr) _impl_.origin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ToolEvent_GetEntityInfoResult::clear_mins() {
  if (_impl_.mins_ != nullptr) _impl_.mins_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ToolEvent_GetEntityInfoResult::clear_maxs() {
  if (_impl_.maxs_ != nullptr) _impl_.maxs_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
ToolEvent_GetEntityInfoResult::ToolEvent_GetEntityInfoResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ToolEvent_GetEntityInfoResult)
}
ToolEvent_GetEntityInfoResult::ToolEvent_GetEntityInfoResult(const ToolEvent_GetEntityInfoResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ToolEvent_GetEntityInfoResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cppclass_){}
    , decltype(_impl_.classname_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.mins_){nullptr}
    , decltype(_impl_.maxs_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cppclass_.InitDefault();
  if (from._internal_has_cppclass()) {
    _this->_impl_.cppclass_.Set(from._internal_cppclass(), 
      _this->GetArenaForAllocation());
  }
  _impl_.classname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.classname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_classname()) {
    _this->_impl_.classname_.Set(from._internal_classname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_origin()) {
    _this->_impl_.origin_ = new ::CMsgVector(*from._impl_.origin_);
  }
  if (from._internal_has_mins()) {
    _this->_impl_.mins_ = new ::CMsgVector(*from._impl_.mins_);
  }
  if (from._internal_has_maxs()) {
    _this->_impl_.maxs_ = new ::CMsgVector(*from._impl_.maxs_);
  }
  // @@protoc_insertion_point(copy_constructor:ToolEvent_GetEntityInfoResult)
}

inline void ToolEvent_GetEntityInfoResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cppclass_){}
    , decltype(_impl_.classname_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.mins_){nullptr}
    , decltype(_impl_.maxs_){nullptr}
  };
  _impl_.cppclass_.InitDefault();
  _impl_.classname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.classname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ToolEvent_GetEntityInfoResult::~ToolEvent_GetEntityInfoResult() {
  // @@protoc_insertion_point(destructor:ToolEvent_GetEntityInfoResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ToolEvent_GetEntityInfoResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cppclass_.Destroy();
  _impl_.classname_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.origin_;
  if (this != internal_default_instance()) delete _impl_.mins_;
  if (this != internal_default_instance()) delete _impl_.maxs_;
}

void ToolEvent_GetEntityInfoResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ToolEvent_GetEntityInfoResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ToolEvent_GetEntityInfoResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.cppclass_.ClearToDefault(::ToolEvent_GetEntityInfoResult::Impl_::_i_give_permission_to_break_this_code_default_cppclass_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      _impl_.classname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.origin_ != nullptr);
      _impl_.origin_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.mins_ != nullptr);
      _impl_.mins_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.maxs_ != nullptr);
      _impl_.maxs_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToolEvent_GetEntityInfoResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string cppclass = 1 [default = "shithead"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cppclass();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ToolEvent_GetEntityInfoResult.cppclass");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string classname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_classname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ToolEvent_GetEntityInfoResult.classname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ToolEvent_GetEntityInfoResult.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector origin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector mins = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mins(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector maxs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ToolEvent_GetEntityInfoResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolEvent_GetEntityInfoResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string cppclass = 1 [default = "shithead"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cppclass().data(), static_cast<int>(this->_internal_cppclass().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ToolEvent_GetEntityInfoResult.cppclass");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cppclass(), target);
  }

  // optional string classname = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_classname().data(), static_cast<int>(this->_internal_classname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ToolEvent_GetEntityInfoResult.classname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_classname(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ToolEvent_GetEntityInfoResult.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional .CMsgVector origin = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::origin(this),
        _Internal::origin(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgVector mins = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::mins(this),
        _Internal::mins(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgVector maxs = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::maxs(this),
        _Internal::maxs(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolEvent_GetEntityInfoResult)
  return target;
}

size_t ToolEvent_GetEntityInfoResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ToolEvent_GetEntityInfoResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string cppclass = 1 [default = "shithead"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cppclass());
    }

    // optional string classname = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_classname());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .CMsgVector origin = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.origin_);
    }

    // optional .CMsgVector mins = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mins_);
    }

    // optional .CMsgVector maxs = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.maxs_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ToolEvent_GetEntityInfoResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ToolEvent_GetEntityInfoResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ToolEvent_GetEntityInfoResult::GetClassData() const { return &_class_data_; }


void ToolEvent_GetEntityInfoResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ToolEvent_GetEntityInfoResult*>(&to_msg);
  auto& from = static_cast<const ToolEvent_GetEntityInfoResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ToolEvent_GetEntityInfoResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_cppclass(from._internal_cppclass());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_classname(from._internal_classname());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_origin()->::CMsgVector::MergeFrom(
          from._internal_origin());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_mins()->::CMsgVector::MergeFrom(
          from._internal_mins());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_maxs()->::CMsgVector::MergeFrom(
          from._internal_maxs());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ToolEvent_GetEntityInfoResult::CopyFrom(const ToolEvent_GetEntityInfoResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ToolEvent_GetEntityInfoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_GetEntityInfoResult::IsInitialized() const {
  return true;
}

void ToolEvent_GetEntityInfoResult::InternalSwap(ToolEvent_GetEntityInfoResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cppclass_, lhs_arena,
      &other->_impl_.cppclass_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.classname_, lhs_arena,
      &other->_impl_.classname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ToolEvent_GetEntityInfoResult, _impl_.maxs_)
      + sizeof(ToolEvent_GetEntityInfoResult::_impl_.maxs_)
      - PROTOBUF_FIELD_OFFSET(ToolEvent_GetEntityInfoResult, _impl_.origin_)>(
          reinterpret_cast<char*>(&_impl_.origin_),
          reinterpret_cast<char*>(&other->_impl_.origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolEvent_GetEntityInfoResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gametoolevents_2eproto_getter, &descriptor_table_gametoolevents_2eproto_once,
      file_level_metadata_gametoolevents_2eproto[9]);
}

// ===================================================================

class ToolEvent_GetEntityInputs::_Internal {
 public:
  using HasBits = decltype(std::declval<ToolEvent_GetEntityInputs>()._impl_._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clientsideentity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ToolEvent_GetEntityInputs::ToolEvent_GetEntityInputs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ToolEvent_GetEntityInputs)
}
ToolEvent_GetEntityInputs::ToolEvent_GetEntityInputs(const ToolEvent_GetEntityInputs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ToolEvent_GetEntityInputs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ehandle_){}
    , decltype(_impl_.clientsideentity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ehandle_, &from._impl_.ehandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clientsideentity_) -
    reinterpret_cast<char*>(&_impl_.ehandle_)) + sizeof(_impl_.clientsideentity_));
  // @@protoc_insertion_point(copy_constructor:ToolEvent_GetEntityInputs)
}

inline void ToolEvent_GetEntityInputs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ehandle_){0}
    , decltype(_impl_.clientsideentity_){false}
  };
}

ToolEvent_GetEntityInputs::~ToolEvent_GetEntityInputs() {
  // @@protoc_insertion_point(destructor:ToolEvent_GetEntityInputs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ToolEvent_GetEntityInputs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ToolEvent_GetEntityInputs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ToolEvent_GetEntityInputs::Clear() {
// @@protoc_insertion_point(message_clear_start:ToolEvent_GetEntityInputs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.ehandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.clientsideentity_) -
        reinterpret_cast<char*>(&_impl_.ehandle_)) + sizeof(_impl_.clientsideentity_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToolEvent_GetEntityInputs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ehandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          _impl_.ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clientsideentity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_clientsideentity(&has_bits);
          _impl_.clientsideentity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ToolEvent_GetEntityInputs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolEvent_GetEntityInputs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ehandle(), target);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_clientsideentity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolEvent_GetEntityInputs)
  return target;
}

size_t ToolEvent_GetEntityInputs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ToolEvent_GetEntityInputs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 ehandle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ehandle());
    }

    // optional bool clientsideentity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ToolEvent_GetEntityInputs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ToolEvent_GetEntityInputs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ToolEvent_GetEntityInputs::GetClassData() const { return &_class_data_; }


void ToolEvent_GetEntityInputs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ToolEvent_GetEntityInputs*>(&to_msg);
  auto& from = static_cast<const ToolEvent_GetEntityInputs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ToolEvent_GetEntityInputs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ehandle_ = from._impl_.ehandle_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.clientsideentity_ = from._impl_.clientsideentity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ToolEvent_GetEntityInputs::CopyFrom(const ToolEvent_GetEntityInputs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ToolEvent_GetEntityInputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_GetEntityInputs::IsInitialized() const {
  return true;
}

void ToolEvent_GetEntityInputs::InternalSwap(ToolEvent_GetEntityInputs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ToolEvent_GetEntityInputs, _impl_.clientsideentity_)
      + sizeof(ToolEvent_GetEntityInputs::_impl_.clientsideentity_)
      - PROTOBUF_FIELD_OFFSET(ToolEvent_GetEntityInputs, _impl_.ehandle_)>(
          reinterpret_cast<char*>(&_impl_.ehandle_),
          reinterpret_cast<char*>(&other->_impl_.ehandle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolEvent_GetEntityInputs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gametoolevents_2eproto_getter, &descriptor_table_gametoolevents_2eproto_once,
      file_level_metadata_gametoolevents_2eproto[10]);
}

// ===================================================================

class ToolEvent_GetEntityInputsResult::_Internal {
 public:
};

ToolEvent_GetEntityInputsResult::ToolEvent_GetEntityInputsResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ToolEvent_GetEntityInputsResult)
}
ToolEvent_GetEntityInputsResult::ToolEvent_GetEntityInputsResult(const ToolEvent_GetEntityInputsResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ToolEvent_GetEntityInputsResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_list_){from._impl_.input_list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ToolEvent_GetEntityInputsResult)
}

inline void ToolEvent_GetEntityInputsResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.input_list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ToolEvent_GetEntityInputsResult::~ToolEvent_GetEntityInputsResult() {
  // @@protoc_insertion_point(destructor:ToolEvent_GetEntityInputsResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ToolEvent_GetEntityInputsResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_list_.~RepeatedPtrField();
}

void ToolEvent_GetEntityInputsResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ToolEvent_GetEntityInputsResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ToolEvent_GetEntityInputsResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToolEvent_GetEntityInputsResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string input_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "ToolEvent_GetEntityInputsResult.input_list");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ToolEvent_GetEntityInputsResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolEvent_GetEntityInputsResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string input_list = 1;
  for (int i = 0, n = this->_internal_input_list_size(); i < n; i++) {
    const auto& s = this->_internal_input_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ToolEvent_GetEntityInputsResult.input_list");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolEvent_GetEntityInputsResult)
  return target;
}

size_t ToolEvent_GetEntityInputsResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ToolEvent_GetEntityInputsResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input_list = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.input_list_.size());
  for (int i = 0, n = _impl_.input_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.input_list_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ToolEvent_GetEntityInputsResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ToolEvent_GetEntityInputsResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ToolEvent_GetEntityInputsResult::GetClassData() const { return &_class_data_; }


void ToolEvent_GetEntityInputsResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ToolEvent_GetEntityInputsResult*>(&to_msg);
  auto& from = static_cast<const ToolEvent_GetEntityInputsResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ToolEvent_GetEntityInputsResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.input_list_.MergeFrom(from._impl_.input_list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ToolEvent_GetEntityInputsResult::CopyFrom(const ToolEvent_GetEntityInputsResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ToolEvent_GetEntityInputsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_GetEntityInputsResult::IsInitialized() const {
  return true;
}

void ToolEvent_GetEntityInputsResult::InternalSwap(ToolEvent_GetEntityInputsResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.input_list_.InternalSwap(&other->_impl_.input_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolEvent_GetEntityInputsResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gametoolevents_2eproto_getter, &descriptor_table_gametoolevents_2eproto_once,
      file_level_metadata_gametoolevents_2eproto[11]);
}

// ===================================================================

class ToolEvent_FireEntityInput::_Internal {
 public:
  using HasBits = decltype(std::declval<ToolEvent_FireEntityInput>()._impl_._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clientsideentity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_input_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_input_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ToolEvent_FireEntityInput::ToolEvent_FireEntityInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ToolEvent_FireEntityInput)
}
ToolEvent_FireEntityInput::ToolEvent_FireEntityInput(const ToolEvent_FireEntityInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ToolEvent_FireEntityInput* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_name_){}
    , decltype(_impl_.input_param_){}
    , decltype(_impl_.ehandle_){}
    , decltype(_impl_.clientsideentity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.input_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_input_name()) {
    _this->_impl_.input_name_.Set(from._internal_input_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.input_param_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_param_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_input_param()) {
    _this->_impl_.input_param_.Set(from._internal_input_param(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ehandle_, &from._impl_.ehandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clientsideentity_) -
    reinterpret_cast<char*>(&_impl_.ehandle_)) + sizeof(_impl_.clientsideentity_));
  // @@protoc_insertion_point(copy_constructor:ToolEvent_FireEntityInput)
}

inline void ToolEvent_FireEntityInput::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_name_){}
    , decltype(_impl_.input_param_){}
    , decltype(_impl_.ehandle_){0}
    , decltype(_impl_.clientsideentity_){false}
  };
  _impl_.input_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.input_param_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_param_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ToolEvent_FireEntityInput::~ToolEvent_FireEntityInput() {
  // @@protoc_insertion_point(destructor:ToolEvent_FireEntityInput)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ToolEvent_FireEntityInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_name_.Destroy();
  _impl_.input_param_.Destroy();
}

void ToolEvent_FireEntityInput::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ToolEvent_FireEntityInput::Clear() {
// @@protoc_insertion_point(message_clear_start:ToolEvent_FireEntityInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.input_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.input_param_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.ehandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.clientsideentity_) -
        reinterpret_cast<char*>(&_impl_.ehandle_)) + sizeof(_impl_.clientsideentity_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToolEvent_FireEntityInput::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ehandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          _impl_.ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clientsideentity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_clientsideentity(&has_bits);
          _impl_.clientsideentity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string input_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_input_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ToolEvent_FireEntityInput.input_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string input_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_input_param();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ToolEvent_FireEntityInput.input_param");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ToolEvent_FireEntityInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolEvent_FireEntityInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ehandle(), target);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_clientsideentity(), target);
  }

  // optional string input_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_input_name().data(), static_cast<int>(this->_internal_input_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ToolEvent_FireEntityInput.input_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_input_name(), target);
  }

  // optional string input_param = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_input_param().data(), static_cast<int>(this->_internal_input_param().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ToolEvent_FireEntityInput.input_param");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_input_param(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolEvent_FireEntityInput)
  return target;
}

size_t ToolEvent_FireEntityInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ToolEvent_FireEntityInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string input_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_input_name());
    }

    // optional string input_param = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_input_param());
    }

    // optional int32 ehandle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ehandle());
    }

    // optional bool clientsideentity = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ToolEvent_FireEntityInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ToolEvent_FireEntityInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ToolEvent_FireEntityInput::GetClassData() const { return &_class_data_; }


void ToolEvent_FireEntityInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ToolEvent_FireEntityInput*>(&to_msg);
  auto& from = static_cast<const ToolEvent_FireEntityInput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ToolEvent_FireEntityInput)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_input_name(from._internal_input_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_input_param(from._internal_input_param());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ehandle_ = from._impl_.ehandle_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.clientsideentity_ = from._impl_.clientsideentity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ToolEvent_FireEntityInput::CopyFrom(const ToolEvent_FireEntityInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ToolEvent_FireEntityInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_FireEntityInput::IsInitialized() const {
  return true;
}

void ToolEvent_FireEntityInput::InternalSwap(ToolEvent_FireEntityInput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.input_name_, lhs_arena,
      &other->_impl_.input_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.input_param_, lhs_arena,
      &other->_impl_.input_param_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ToolEvent_FireEntityInput, _impl_.clientsideentity_)
      + sizeof(ToolEvent_FireEntityInput::_impl_.clientsideentity_)
      - PROTOBUF_FIELD_OFFSET(ToolEvent_FireEntityInput, _impl_.ehandle_)>(
          reinterpret_cast<char*>(&_impl_.ehandle_),
          reinterpret_cast<char*>(&other->_impl_.ehandle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolEvent_FireEntityInput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gametoolevents_2eproto_getter, &descriptor_table_gametoolevents_2eproto_once,
      file_level_metadata_gametoolevents_2eproto[12]);
}

// ===================================================================

class ToolEvent_SFMRecordingStateChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<ToolEvent_SFMRecordingStateChanged>()._impl_._has_bits_);
  static void set_has_isrecording(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ToolEvent_SFMRecordingStateChanged::ToolEvent_SFMRecordingStateChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ToolEvent_SFMRecordingStateChanged)
}
ToolEvent_SFMRecordingStateChanged::ToolEvent_SFMRecordingStateChanged(const ToolEvent_SFMRecordingStateChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ToolEvent_SFMRecordingStateChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.isrecording_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.isrecording_ = from._impl_.isrecording_;
  // @@protoc_insertion_point(copy_constructor:ToolEvent_SFMRecordingStateChanged)
}

inline void ToolEvent_SFMRecordingStateChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.isrecording_){false}
  };
}

ToolEvent_SFMRecordingStateChanged::~ToolEvent_SFMRecordingStateChanged() {
  // @@protoc_insertion_point(destructor:ToolEvent_SFMRecordingStateChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ToolEvent_SFMRecordingStateChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ToolEvent_SFMRecordingStateChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ToolEvent_SFMRecordingStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:ToolEvent_SFMRecordingStateChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.isrecording_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToolEvent_SFMRecordingStateChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool isrecording = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_isrecording(&has_bits);
          _impl_.isrecording_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ToolEvent_SFMRecordingStateChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolEvent_SFMRecordingStateChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool isrecording = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_isrecording(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolEvent_SFMRecordingStateChanged)
  return target;
}

size_t ToolEvent_SFMRecordingStateChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ToolEvent_SFMRecordingStateChanged)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool isrecording = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ToolEvent_SFMRecordingStateChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ToolEvent_SFMRecordingStateChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ToolEvent_SFMRecordingStateChanged::GetClassData() const { return &_class_data_; }


void ToolEvent_SFMRecordingStateChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ToolEvent_SFMRecordingStateChanged*>(&to_msg);
  auto& from = static_cast<const ToolEvent_SFMRecordingStateChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ToolEvent_SFMRecordingStateChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_isrecording()) {
    _this->_internal_set_isrecording(from._internal_isrecording());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ToolEvent_SFMRecordingStateChanged::CopyFrom(const ToolEvent_SFMRecordingStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ToolEvent_SFMRecordingStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_SFMRecordingStateChanged::IsInitialized() const {
  return true;
}

void ToolEvent_SFMRecordingStateChanged::InternalSwap(ToolEvent_SFMRecordingStateChanged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.isrecording_, other->_impl_.isrecording_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolEvent_SFMRecordingStateChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gametoolevents_2eproto_getter, &descriptor_table_gametoolevents_2eproto_once,
      file_level_metadata_gametoolevents_2eproto[13]);
}

// ===================================================================

class ToolEvent_SFMToolActiveStateChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<ToolEvent_SFMToolActiveStateChanged>()._impl_._has_bits_);
  static void set_has_isactive(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ToolEvent_SFMToolActiveStateChanged::ToolEvent_SFMToolActiveStateChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ToolEvent_SFMToolActiveStateChanged)
}
ToolEvent_SFMToolActiveStateChanged::ToolEvent_SFMToolActiveStateChanged(const ToolEvent_SFMToolActiveStateChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ToolEvent_SFMToolActiveStateChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.isactive_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.isactive_ = from._impl_.isactive_;
  // @@protoc_insertion_point(copy_constructor:ToolEvent_SFMToolActiveStateChanged)
}

inline void ToolEvent_SFMToolActiveStateChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.isactive_){false}
  };
}

ToolEvent_SFMToolActiveStateChanged::~ToolEvent_SFMToolActiveStateChanged() {
  // @@protoc_insertion_point(destructor:ToolEvent_SFMToolActiveStateChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ToolEvent_SFMToolActiveStateChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ToolEvent_SFMToolActiveStateChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ToolEvent_SFMToolActiveStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:ToolEvent_SFMToolActiveStateChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.isactive_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToolEvent_SFMToolActiveStateChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool isactive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_isactive(&has_bits);
          _impl_.isactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ToolEvent_SFMToolActiveStateChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolEvent_SFMToolActiveStateChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool isactive = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_isactive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolEvent_SFMToolActiveStateChanged)
  return target;
}

size_t ToolEvent_SFMToolActiveStateChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ToolEvent_SFMToolActiveStateChanged)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool isactive = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ToolEvent_SFMToolActiveStateChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ToolEvent_SFMToolActiveStateChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ToolEvent_SFMToolActiveStateChanged::GetClassData() const { return &_class_data_; }


void ToolEvent_SFMToolActiveStateChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ToolEvent_SFMToolActiveStateChanged*>(&to_msg);
  auto& from = static_cast<const ToolEvent_SFMToolActiveStateChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ToolEvent_SFMToolActiveStateChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_isactive()) {
    _this->_internal_set_isactive(from._internal_isactive());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ToolEvent_SFMToolActiveStateChanged::CopyFrom(const ToolEvent_SFMToolActiveStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ToolEvent_SFMToolActiveStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_SFMToolActiveStateChanged::IsInitialized() const {
  return true;
}

void ToolEvent_SFMToolActiveStateChanged::InternalSwap(ToolEvent_SFMToolActiveStateChanged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.isactive_, other->_impl_.isactive_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolEvent_SFMToolActiveStateChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gametoolevents_2eproto_getter, &descriptor_table_gametoolevents_2eproto_once,
      file_level_metadata_gametoolevents_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChangeMapToolEvent*
Arena::CreateMaybeMessage< ::ChangeMapToolEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChangeMapToolEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::TraceRayServerToolEvent*
Arena::CreateMaybeMessage< ::TraceRayServerToolEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TraceRayServerToolEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ToolTraceRayResult*
Arena::CreateMaybeMessage< ::ToolTraceRayResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ToolTraceRayResult >(arena);
}
template<> PROTOBUF_NOINLINE ::SpawnEntityToolEvent*
Arena::CreateMaybeMessage< ::SpawnEntityToolEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpawnEntityToolEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::SpawnEntityToolEventResult*
Arena::CreateMaybeMessage< ::SpawnEntityToolEventResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpawnEntityToolEventResult >(arena);
}
template<> PROTOBUF_NOINLINE ::DestroyEntityToolEvent*
Arena::CreateMaybeMessage< ::DestroyEntityToolEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DestroyEntityToolEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::DestroyAllEntitiesToolEvent*
Arena::CreateMaybeMessage< ::DestroyAllEntitiesToolEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DestroyAllEntitiesToolEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::RestartMapToolEvent*
Arena::CreateMaybeMessage< ::RestartMapToolEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RestartMapToolEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ToolEvent_GetEntityInfo*
Arena::CreateMaybeMessage< ::ToolEvent_GetEntityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ToolEvent_GetEntityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ToolEvent_GetEntityInfoResult*
Arena::CreateMaybeMessage< ::ToolEvent_GetEntityInfoResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ToolEvent_GetEntityInfoResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ToolEvent_GetEntityInputs*
Arena::CreateMaybeMessage< ::ToolEvent_GetEntityInputs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ToolEvent_GetEntityInputs >(arena);
}
template<> PROTOBUF_NOINLINE ::ToolEvent_GetEntityInputsResult*
Arena::CreateMaybeMessage< ::ToolEvent_GetEntityInputsResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ToolEvent_GetEntityInputsResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ToolEvent_FireEntityInput*
Arena::CreateMaybeMessage< ::ToolEvent_FireEntityInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ToolEvent_FireEntityInput >(arena);
}
template<> PROTOBUF_NOINLINE ::ToolEvent_SFMRecordingStateChanged*
Arena::CreateMaybeMessage< ::ToolEvent_SFMRecordingStateChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ToolEvent_SFMRecordingStateChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::ToolEvent_SFMToolActiveStateChanged*
Arena::CreateMaybeMessage< ::ToolEvent_SFMToolActiveStateChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ToolEvent_SFMToolActiveStateChanged >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
