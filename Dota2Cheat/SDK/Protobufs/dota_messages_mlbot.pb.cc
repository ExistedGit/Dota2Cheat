// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_messages_mlbot.proto

#include "dota_messages_mlbot.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgMLBotMatchMetadata_Player::CMsgMLBotMatchMetadata_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_id_)*/0
  , /*decltype(_impl_.hero_id_)*/0
  , /*decltype(_impl_.rank_)*/0
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CMsgMLBotMatchMetadata_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMLBotMatchMetadata_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMLBotMatchMetadata_PlayerDefaultTypeInternal() {}
  union {
    CMsgMLBotMatchMetadata_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMLBotMatchMetadata_PlayerDefaultTypeInternal _CMsgMLBotMatchMetadata_Player_default_instance_;
PROTOBUF_CONSTEXPR CMsgMLBotMatchMetadata::CMsgMLBotMatchMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.game_mode_)*/0u
  , /*decltype(_impl_.lobby_type_)*/-1} {}
struct CMsgMLBotMatchMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMLBotMatchMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMLBotMatchMetadataDefaultTypeInternal() {}
  union {
    CMsgMLBotMatchMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMLBotMatchMetadataDefaultTypeInternal _CMsgMLBotMatchMetadata_default_instance_;
PROTOBUF_CONSTEXPR CMsgMLBotTickBoundary::CMsgMLBotTickBoundary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tick_number_)*/0u} {}
struct CMsgMLBotTickBoundaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMLBotTickBoundaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMLBotTickBoundaryDefaultTypeInternal() {}
  union {
    CMsgMLBotTickBoundary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMLBotTickBoundaryDefaultTypeInternal _CMsgMLBotTickBoundary_default_instance_;
PROTOBUF_CONSTEXPR CMsgMLBot_PlayerOrder::CMsgMLBot_PlayerOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.selected_unit_handles_)*/{}
  , /*decltype(_impl_.team_id_)*/0
  , /*decltype(_impl_.order_type_)*/0
  , /*decltype(_impl_.pos_x_)*/0
  , /*decltype(_impl_.pos_y_)*/0
  , /*decltype(_impl_.pos_z_)*/0
  , /*decltype(_impl_.queue_)*/false
  , /*decltype(_impl_.ability_handle_)*/4294967295u
  , /*decltype(_impl_.player_id_)*/-1
  , /*decltype(_impl_.target_index_)*/-1
  , /*decltype(_impl_.target_handle_)*/4294967295u
  , /*decltype(_impl_.ability_index_)*/-1} {}
struct CMsgMLBot_PlayerOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMLBot_PlayerOrderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMLBot_PlayerOrderDefaultTypeInternal() {}
  union {
    CMsgMLBot_PlayerOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMLBot_PlayerOrderDefaultTypeInternal _CMsgMLBot_PlayerOrder_default_instance_;
PROTOBUF_CONSTEXPR CMsgMLBot_TeamInference::CMsgMLBot_TeamInference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bot_player_ids_)*/{}
  , /*decltype(_impl_.world_state_)*/nullptr
  , /*decltype(_impl_.team_id_)*/0} {}
struct CMsgMLBot_TeamInferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMLBot_TeamInferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMLBot_TeamInferenceDefaultTypeInternal() {}
  union {
    CMsgMLBot_TeamInference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMLBot_TeamInferenceDefaultTypeInternal _CMsgMLBot_TeamInference_default_instance_;
PROTOBUF_CONSTEXPR CMsgMLBot_TeamInferenceResponse::CMsgMLBot_TeamInferenceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.orders_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgMLBot_TeamInferenceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMLBot_TeamInferenceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMLBot_TeamInferenceResponseDefaultTypeInternal() {}
  union {
    CMsgMLBot_TeamInferenceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMLBot_TeamInferenceResponseDefaultTypeInternal _CMsgMLBot_TeamInferenceResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgMLBot_TeamInferenceList::CMsgMLBot_TeamInferenceList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgMLBot_TeamInferenceListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMLBot_TeamInferenceListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMLBot_TeamInferenceListDefaultTypeInternal() {}
  union {
    CMsgMLBot_TeamInferenceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMLBot_TeamInferenceListDefaultTypeInternal _CMsgMLBot_TeamInferenceList_default_instance_;
static ::_pb::Metadata file_level_metadata_dota_5fmessages_5fmlbot_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dota_5fmessages_5fmlbot_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dota_5fmessages_5fmlbot_2eproto = nullptr;

const uint32_t TableStruct_dota_5fmessages_5fmlbot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata_Player, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata_Player, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata_Player, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata_Player, _impl_.rank_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata, _impl_.lobby_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata, _impl_.game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotMatchMetadata, _impl_.players_),
  0,
  1,
  3,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotTickBoundary, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotTickBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMLBotTickBoundary, _impl_.tick_number_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, _impl_.order_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, _impl_.selected_unit_handles_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, _impl_.target_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, _impl_.target_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, _impl_.ability_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, _impl_.ability_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, _impl_.pos_x_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, _impl_.pos_y_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, _impl_.pos_z_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_PlayerOrder, _impl_.queue_),
  7,
  0,
  1,
  ~0u,
  8,
  9,
  10,
  6,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_TeamInference, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_TeamInference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_TeamInference, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_TeamInference, _impl_.bot_player_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_TeamInference, _impl_.world_state_),
  1,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_TeamInferenceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_TeamInferenceResponse, _impl_.orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_TeamInferenceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMLBot_TeamInferenceList, _impl_.messages_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::CMsgMLBotMatchMetadata_Player)},
  { 14, 25, -1, sizeof(::CMsgMLBotMatchMetadata)},
  { 30, 37, -1, sizeof(::CMsgMLBotTickBoundary)},
  { 38, 56, -1, sizeof(::CMsgMLBot_PlayerOrder)},
  { 68, 77, -1, sizeof(::CMsgMLBot_TeamInference)},
  { 80, -1, -1, sizeof(::CMsgMLBot_TeamInferenceResponse)},
  { 87, -1, -1, sizeof(::CMsgMLBot_TeamInferenceList)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgMLBotMatchMetadata_Player_default_instance_._instance,
  &::_CMsgMLBotMatchMetadata_default_instance_._instance,
  &::_CMsgMLBotTickBoundary_default_instance_._instance,
  &::_CMsgMLBot_PlayerOrder_default_instance_._instance,
  &::_CMsgMLBot_TeamInference_default_instance_._instance,
  &::_CMsgMLBot_TeamInferenceResponse_default_instance_._instance,
  &::_CMsgMLBot_TeamInferenceList_default_instance_._instance,
};

const char descriptor_table_protodef_dota_5fmessages_5fmlbot_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031dota_messages_mlbot.proto\032\'dota_gcmess"
  "ages_common_bot_script.proto\032\031dota_commo"
  "nmessages.proto\032\027dota_shared_enums.proto"
  "\"\351\001\n\026CMsgMLBotMatchMetadata\022\020\n\010match_id\030"
  "\001 \001(\004\022\020\n\010lobby_id\030\002 \001(\004\022\026\n\nlobby_type\030\003 "
  "\001(\005:\002-1\022\021\n\tgame_mode\030\004 \001(\r\022/\n\007players\030\005 "
  "\003(\0132\036.CMsgMLBotMatchMetadata.Player\032O\n\006P"
  "layer\022\025\n\tplayer_id\030\001 \001(\005:\002-1\022\017\n\007team_id\030"
  "\002 \001(\005\022\017\n\007hero_id\030\003 \001(\005\022\014\n\004rank\030\004 \001(\005\",\n\025"
  "CMsgMLBotTickBoundary\022\023\n\013tick_number\030\001 \001"
  "(\r\"\252\002\n\025CMsgMLBot_PlayerOrder\022\025\n\tplayer_i"
  "d\030\001 \001(\005:\002-1\022\017\n\007team_id\030\002 \001(\005\022\022\n\norder_ty"
  "pe\030\003 \001(\005\022\035\n\025selected_unit_handles\030\004 \003(\r\022"
  "\030\n\014target_index\030\005 \001(\005:\002-1\022!\n\rtarget_hand"
  "le\030\006 \001(\r:\n4294967295\022\031\n\rability_index\030\007 "
  "\001(\005:\002-1\022\"\n\016ability_handle\030\010 \001(\r:\n4294967"
  "295\022\r\n\005pos_x\030\t \001(\002\022\r\n\005pos_y\030\n \001(\002\022\r\n\005pos"
  "_z\030\013 \001(\002\022\r\n\005queue\030\014 \001(\010\"k\n\027CMsgMLBot_Tea"
  "mInference\022\017\n\007team_id\030\001 \001(\005\022\026\n\016bot_playe"
  "r_ids\030\002 \003(\005\022\'\n\013world_state\030\003 \001(\0132\022.CMsgB"
  "otWorldState\"I\n\037CMsgMLBot_TeamInferenceR"
  "esponse\022&\n\006orders\030\001 \003(\0132\026.CMsgMLBot_Play"
  "erOrder\"I\n\033CMsgMLBot_TeamInferenceList\022*"
  "\n\010messages\030\001 \003(\0132\030.CMsgMLBot_TeamInferen"
  "ce*\354\001\n\017MLBot_MessageId\022\027\n\023mlbot_MatchMet"
  "adata\020\001\022\026\n\022mlbot_TickBoundary\020\002\022\033\n\027mlbot"
  "_TeamState_Radiant\020\003\022!\n\035mlbot_TeamState_"
  "Radiant_Delta\020\004\022\030\n\024mlbot_TeamState_Dire\020"
  "\005\022\036\n\032mlbot_TeamState_Dire_Delta\020\006\022\027\n\023mlb"
  "ot_PlayerCommand\020\007\022\025\n\021mlbot_PlayerOrder\020"
  "\010"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dota_5fmessages_5fmlbot_2eproto_deps[3] = {
  &::descriptor_table_dota_5fcommonmessages_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto,
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
};
static ::_pbi::once_flag descriptor_table_dota_5fmessages_5fmlbot_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dota_5fmessages_5fmlbot_2eproto = {
    false, false, 1201, descriptor_table_protodef_dota_5fmessages_5fmlbot_2eproto,
    "dota_messages_mlbot.proto",
    &descriptor_table_dota_5fmessages_5fmlbot_2eproto_once, descriptor_table_dota_5fmessages_5fmlbot_2eproto_deps, 3, 7,
    schemas, file_default_instances, TableStruct_dota_5fmessages_5fmlbot_2eproto::offsets,
    file_level_metadata_dota_5fmessages_5fmlbot_2eproto, file_level_enum_descriptors_dota_5fmessages_5fmlbot_2eproto,
    file_level_service_descriptors_dota_5fmessages_5fmlbot_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dota_5fmessages_5fmlbot_2eproto_getter() {
  return &descriptor_table_dota_5fmessages_5fmlbot_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dota_5fmessages_5fmlbot_2eproto(&descriptor_table_dota_5fmessages_5fmlbot_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MLBot_MessageId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fmessages_5fmlbot_2eproto);
  return file_level_enum_descriptors_dota_5fmessages_5fmlbot_2eproto[0];
}
bool MLBot_MessageId_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgMLBotMatchMetadata_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMLBotMatchMetadata_Player>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgMLBotMatchMetadata_Player::CMsgMLBotMatchMetadata_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMLBotMatchMetadata.Player)
}
CMsgMLBotMatchMetadata_Player::CMsgMLBotMatchMetadata_Player(const CMsgMLBotMatchMetadata_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMLBotMatchMetadata_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_id_, &from._impl_.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgMLBotMatchMetadata.Player)
}

inline void CMsgMLBotMatchMetadata_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_id_){0}
    , decltype(_impl_.hero_id_){0}
    , decltype(_impl_.rank_){0}
    , decltype(_impl_.player_id_){-1}
  };
}

CMsgMLBotMatchMetadata_Player::~CMsgMLBotMatchMetadata_Player() {
  // @@protoc_insertion_point(destructor:CMsgMLBotMatchMetadata.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMLBotMatchMetadata_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMLBotMatchMetadata_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMLBotMatchMetadata_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMLBotMatchMetadata.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.rank_) -
        reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.rank_));
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMLBotMatchMetadata_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 rank = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_rank(&has_bits);
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMLBotMatchMetadata_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMLBotMatchMetadata.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional int32 team_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_team_id(), target);
  }

  // optional int32 hero_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_hero_id(), target);
  }

  // optional int32 rank = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMLBotMatchMetadata.Player)
  return target;
}

size_t CMsgMLBotMatchMetadata_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMLBotMatchMetadata.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 team_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_team_id());
    }

    // optional int32 hero_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hero_id());
    }

    // optional int32 rank = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMLBotMatchMetadata_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMLBotMatchMetadata_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMLBotMatchMetadata_Player::GetClassData() const { return &_class_data_; }


void CMsgMLBotMatchMetadata_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMLBotMatchMetadata_Player*>(&to_msg);
  auto& from = static_cast<const CMsgMLBotMatchMetadata_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMLBotMatchMetadata.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rank_ = from._impl_.rank_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMLBotMatchMetadata_Player::CopyFrom(const CMsgMLBotMatchMetadata_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMLBotMatchMetadata.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMLBotMatchMetadata_Player::IsInitialized() const {
  return true;
}

void CMsgMLBotMatchMetadata_Player::InternalSwap(CMsgMLBotMatchMetadata_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMLBotMatchMetadata_Player, _impl_.rank_)
      + sizeof(CMsgMLBotMatchMetadata_Player::_impl_.rank_)
      - PROTOBUF_FIELD_OFFSET(CMsgMLBotMatchMetadata_Player, _impl_.team_id_)>(
          reinterpret_cast<char*>(&_impl_.team_id_),
          reinterpret_cast<char*>(&other->_impl_.team_id_));
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMLBotMatchMetadata_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmessages_5fmlbot_2eproto_getter, &descriptor_table_dota_5fmessages_5fmlbot_2eproto_once,
      file_level_metadata_dota_5fmessages_5fmlbot_2eproto[0]);
}

// ===================================================================

class CMsgMLBotMatchMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMLBotMatchMetadata>()._impl_._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lobby_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgMLBotMatchMetadata::CMsgMLBotMatchMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMLBotMatchMetadata)
}
CMsgMLBotMatchMetadata::CMsgMLBotMatchMetadata(const CMsgMLBotMatchMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMLBotMatchMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.game_mode_){}
    , decltype(_impl_.lobby_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lobby_type_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.lobby_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgMLBotMatchMetadata)
}

inline void CMsgMLBotMatchMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){arena}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.game_mode_){0u}
    , decltype(_impl_.lobby_type_){-1}
  };
}

CMsgMLBotMatchMetadata::~CMsgMLBotMatchMetadata() {
  // @@protoc_insertion_point(destructor:CMsgMLBotMatchMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMLBotMatchMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void CMsgMLBotMatchMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMLBotMatchMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMLBotMatchMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.game_mode_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.game_mode_));
    _impl_.lobby_type_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMLBotMatchMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 lobby_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 lobby_type = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_lobby_type(&has_bits);
          _impl_.lobby_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_game_mode(&has_bits);
          _impl_.game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgMLBotMatchMetadata.Player players = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMLBotMatchMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMLBotMatchMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint64 lobby_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_lobby_id(), target);
  }

  // optional int32 lobby_type = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_lobby_type(), target);
  }

  // optional uint32 game_mode = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_game_mode(), target);
  }

  // repeated .CMsgMLBotMatchMetadata.Player players = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMLBotMatchMetadata)
  return target;
}

size_t CMsgMLBotMatchMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMLBotMatchMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMLBotMatchMetadata.Player players = 5;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint64 lobby_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lobby_id());
    }

    // optional uint32 game_mode = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_mode());
    }

    // optional int32 lobby_type = 3 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lobby_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMLBotMatchMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMLBotMatchMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMLBotMatchMetadata::GetClassData() const { return &_class_data_; }


void CMsgMLBotMatchMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMLBotMatchMetadata*>(&to_msg);
  auto& from = static_cast<const CMsgMLBotMatchMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMLBotMatchMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.game_mode_ = from._impl_.game_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.lobby_type_ = from._impl_.lobby_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMLBotMatchMetadata::CopyFrom(const CMsgMLBotMatchMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMLBotMatchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMLBotMatchMetadata::IsInitialized() const {
  return true;
}

void CMsgMLBotMatchMetadata::InternalSwap(CMsgMLBotMatchMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMLBotMatchMetadata, _impl_.game_mode_)
      + sizeof(CMsgMLBotMatchMetadata::_impl_.game_mode_)
      - PROTOBUF_FIELD_OFFSET(CMsgMLBotMatchMetadata, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
  swap(_impl_.lobby_type_, other->_impl_.lobby_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMLBotMatchMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmessages_5fmlbot_2eproto_getter, &descriptor_table_dota_5fmessages_5fmlbot_2eproto_once,
      file_level_metadata_dota_5fmessages_5fmlbot_2eproto[1]);
}

// ===================================================================

class CMsgMLBotTickBoundary::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMLBotTickBoundary>()._impl_._has_bits_);
  static void set_has_tick_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgMLBotTickBoundary::CMsgMLBotTickBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMLBotTickBoundary)
}
CMsgMLBotTickBoundary::CMsgMLBotTickBoundary(const CMsgMLBotTickBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMLBotTickBoundary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tick_number_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.tick_number_ = from._impl_.tick_number_;
  // @@protoc_insertion_point(copy_constructor:CMsgMLBotTickBoundary)
}

inline void CMsgMLBotTickBoundary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tick_number_){0u}
  };
}

CMsgMLBotTickBoundary::~CMsgMLBotTickBoundary() {
  // @@protoc_insertion_point(destructor:CMsgMLBotTickBoundary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMLBotTickBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMLBotTickBoundary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMLBotTickBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMLBotTickBoundary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tick_number_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMLBotTickBoundary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 tick_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tick_number(&has_bits);
          _impl_.tick_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMLBotTickBoundary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMLBotTickBoundary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 tick_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tick_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMLBotTickBoundary)
  return target;
}

size_t CMsgMLBotTickBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMLBotTickBoundary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 tick_number = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tick_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMLBotTickBoundary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMLBotTickBoundary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMLBotTickBoundary::GetClassData() const { return &_class_data_; }


void CMsgMLBotTickBoundary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMLBotTickBoundary*>(&to_msg);
  auto& from = static_cast<const CMsgMLBotTickBoundary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMLBotTickBoundary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tick_number()) {
    _this->_internal_set_tick_number(from._internal_tick_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMLBotTickBoundary::CopyFrom(const CMsgMLBotTickBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMLBotTickBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMLBotTickBoundary::IsInitialized() const {
  return true;
}

void CMsgMLBotTickBoundary::InternalSwap(CMsgMLBotTickBoundary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.tick_number_, other->_impl_.tick_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMLBotTickBoundary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmessages_5fmlbot_2eproto_getter, &descriptor_table_dota_5fmessages_5fmlbot_2eproto_once,
      file_level_metadata_dota_5fmessages_5fmlbot_2eproto[2]);
}

// ===================================================================

class CMsgMLBot_PlayerOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMLBot_PlayerOrder>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_order_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_index(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_target_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ability_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ability_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pos_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pos_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pos_z(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_queue(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgMLBot_PlayerOrder::CMsgMLBot_PlayerOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMLBot_PlayerOrder)
}
CMsgMLBot_PlayerOrder::CMsgMLBot_PlayerOrder(const CMsgMLBot_PlayerOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMLBot_PlayerOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selected_unit_handles_){from._impl_.selected_unit_handles_}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.order_type_){}
    , decltype(_impl_.pos_x_){}
    , decltype(_impl_.pos_y_){}
    , decltype(_impl_.pos_z_){}
    , decltype(_impl_.queue_){}
    , decltype(_impl_.ability_handle_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.target_index_){}
    , decltype(_impl_.target_handle_){}
    , decltype(_impl_.ability_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_id_, &from._impl_.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ability_index_) -
    reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.ability_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgMLBot_PlayerOrder)
}

inline void CMsgMLBot_PlayerOrder::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selected_unit_handles_){arena}
    , decltype(_impl_.team_id_){0}
    , decltype(_impl_.order_type_){0}
    , decltype(_impl_.pos_x_){0}
    , decltype(_impl_.pos_y_){0}
    , decltype(_impl_.pos_z_){0}
    , decltype(_impl_.queue_){false}
    , decltype(_impl_.ability_handle_){4294967295u}
    , decltype(_impl_.player_id_){-1}
    , decltype(_impl_.target_index_){-1}
    , decltype(_impl_.target_handle_){4294967295u}
    , decltype(_impl_.ability_index_){-1}
  };
}

CMsgMLBot_PlayerOrder::~CMsgMLBot_PlayerOrder() {
  // @@protoc_insertion_point(destructor:CMsgMLBot_PlayerOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMLBot_PlayerOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.selected_unit_handles_.~RepeatedField();
}

void CMsgMLBot_PlayerOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMLBot_PlayerOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMLBot_PlayerOrder)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.selected_unit_handles_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.queue_) -
        reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.queue_));
    _impl_.ability_handle_ = 4294967295u;
    _impl_.player_id_ = -1;
  }
  if (cached_has_bits & 0x00000700u) {
    _impl_.target_index_ = -1;
    _impl_.target_handle_ = 4294967295u;
    _impl_.ability_index_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMLBot_PlayerOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 order_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_order_type(&has_bits);
          _impl_.order_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 selected_unit_handles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_selected_unit_handles(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_selected_unit_handles(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 target_index = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_target_index(&has_bits);
          _impl_.target_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 target_handle = 6 [default = 4294967295];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_target_handle(&has_bits);
          _impl_.target_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ability_index = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_ability_index(&has_bits);
          _impl_.ability_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_handle = 8 [default = 4294967295];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_ability_handle(&has_bits);
          _impl_.ability_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float pos_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_pos_x(&has_bits);
          _impl_.pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float pos_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_pos_y(&has_bits);
          _impl_.pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float pos_z = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_pos_z(&has_bits);
          _impl_.pos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool queue = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_queue(&has_bits);
          _impl_.queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMLBot_PlayerOrder::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMLBot_PlayerOrder)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional int32 team_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_team_id(), target);
  }

  // optional int32 order_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_order_type(), target);
  }

  // repeated uint32 selected_unit_handles = 4;
  for (int i = 0, n = this->_internal_selected_unit_handles_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_selected_unit_handles(i), target);
  }

  // optional int32 target_index = 5 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_target_index(), target);
  }

  // optional uint32 target_handle = 6 [default = 4294967295];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_target_handle(), target);
  }

  // optional int32 ability_index = 7 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_ability_index(), target);
  }

  // optional uint32 ability_handle = 8 [default = 4294967295];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_ability_handle(), target);
  }

  // optional float pos_x = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_pos_x(), target);
  }

  // optional float pos_y = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_pos_y(), target);
  }

  // optional float pos_z = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_pos_z(), target);
  }

  // optional bool queue = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_queue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMLBot_PlayerOrder)
  return target;
}

size_t CMsgMLBot_PlayerOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMLBot_PlayerOrder)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 selected_unit_handles = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.selected_unit_handles_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_selected_unit_handles_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 team_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_team_id());
    }

    // optional int32 order_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_order_type());
    }

    // optional float pos_x = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float pos_y = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float pos_z = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool queue = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 ability_handle = 8 [default = 4294967295];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_handle());
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 target_index = 5 [default = -1];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_index());
    }

    // optional uint32 target_handle = 6 [default = 4294967295];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_handle());
    }

    // optional int32 ability_index = 7 [default = -1];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMLBot_PlayerOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMLBot_PlayerOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMLBot_PlayerOrder::GetClassData() const { return &_class_data_; }


void CMsgMLBot_PlayerOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMLBot_PlayerOrder*>(&to_msg);
  auto& from = static_cast<const CMsgMLBot_PlayerOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMLBot_PlayerOrder)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.selected_unit_handles_.MergeFrom(from._impl_.selected_unit_handles_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.order_type_ = from._impl_.order_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.pos_x_ = from._impl_.pos_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.pos_y_ = from._impl_.pos_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.pos_z_ = from._impl_.pos_z_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.queue_ = from._impl_.queue_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.ability_handle_ = from._impl_.ability_handle_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.target_index_ = from._impl_.target_index_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.target_handle_ = from._impl_.target_handle_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.ability_index_ = from._impl_.ability_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMLBot_PlayerOrder::CopyFrom(const CMsgMLBot_PlayerOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMLBot_PlayerOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMLBot_PlayerOrder::IsInitialized() const {
  return true;
}

void CMsgMLBot_PlayerOrder::InternalSwap(CMsgMLBot_PlayerOrder* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.selected_unit_handles_.InternalSwap(&other->_impl_.selected_unit_handles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMLBot_PlayerOrder, _impl_.queue_)
      + sizeof(CMsgMLBot_PlayerOrder::_impl_.queue_)
      - PROTOBUF_FIELD_OFFSET(CMsgMLBot_PlayerOrder, _impl_.team_id_)>(
          reinterpret_cast<char*>(&_impl_.team_id_),
          reinterpret_cast<char*>(&other->_impl_.team_id_));
  swap(_impl_.ability_handle_, other->_impl_.ability_handle_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
  swap(_impl_.target_index_, other->_impl_.target_index_);
  swap(_impl_.target_handle_, other->_impl_.target_handle_);
  swap(_impl_.ability_index_, other->_impl_.ability_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMLBot_PlayerOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmessages_5fmlbot_2eproto_getter, &descriptor_table_dota_5fmessages_5fmlbot_2eproto_once,
      file_level_metadata_dota_5fmessages_5fmlbot_2eproto[3]);
}

// ===================================================================

class CMsgMLBot_TeamInference::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMLBot_TeamInference>()._impl_._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgBotWorldState& world_state(const CMsgMLBot_TeamInference* msg);
  static void set_has_world_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgBotWorldState&
CMsgMLBot_TeamInference::_Internal::world_state(const CMsgMLBot_TeamInference* msg) {
  return *msg->_impl_.world_state_;
}
void CMsgMLBot_TeamInference::clear_world_state() {
  if (_impl_.world_state_ != nullptr) _impl_.world_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgMLBot_TeamInference::CMsgMLBot_TeamInference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMLBot_TeamInference)
}
CMsgMLBot_TeamInference::CMsgMLBot_TeamInference(const CMsgMLBot_TeamInference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMLBot_TeamInference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bot_player_ids_){from._impl_.bot_player_ids_}
    , decltype(_impl_.world_state_){nullptr}
    , decltype(_impl_.team_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_world_state()) {
    _this->_impl_.world_state_ = new ::CMsgBotWorldState(*from._impl_.world_state_);
  }
  _this->_impl_.team_id_ = from._impl_.team_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgMLBot_TeamInference)
}

inline void CMsgMLBot_TeamInference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bot_player_ids_){arena}
    , decltype(_impl_.world_state_){nullptr}
    , decltype(_impl_.team_id_){0}
  };
}

CMsgMLBot_TeamInference::~CMsgMLBot_TeamInference() {
  // @@protoc_insertion_point(destructor:CMsgMLBot_TeamInference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMLBot_TeamInference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bot_player_ids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.world_state_;
}

void CMsgMLBot_TeamInference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMLBot_TeamInference::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMLBot_TeamInference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bot_player_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.world_state_ != nullptr);
    _impl_.world_state_->Clear();
  }
  _impl_.team_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMLBot_TeamInference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 bot_player_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bot_player_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bot_player_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState world_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMLBot_TeamInference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMLBot_TeamInference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 team_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_team_id(), target);
  }

  // repeated int32 bot_player_ids = 2;
  for (int i = 0, n = this->_internal_bot_player_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_bot_player_ids(i), target);
  }

  // optional .CMsgBotWorldState world_state = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::world_state(this),
        _Internal::world_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMLBot_TeamInference)
  return target;
}

size_t CMsgMLBot_TeamInference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMLBot_TeamInference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bot_player_ids = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.bot_player_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_bot_player_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgBotWorldState world_state = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.world_state_);
    }

    // optional int32 team_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_team_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMLBot_TeamInference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMLBot_TeamInference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMLBot_TeamInference::GetClassData() const { return &_class_data_; }


void CMsgMLBot_TeamInference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMLBot_TeamInference*>(&to_msg);
  auto& from = static_cast<const CMsgMLBot_TeamInference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMLBot_TeamInference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bot_player_ids_.MergeFrom(from._impl_.bot_player_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_world_state()->::CMsgBotWorldState::MergeFrom(
          from._internal_world_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMLBot_TeamInference::CopyFrom(const CMsgMLBot_TeamInference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMLBot_TeamInference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMLBot_TeamInference::IsInitialized() const {
  return true;
}

void CMsgMLBot_TeamInference::InternalSwap(CMsgMLBot_TeamInference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.bot_player_ids_.InternalSwap(&other->_impl_.bot_player_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMLBot_TeamInference, _impl_.team_id_)
      + sizeof(CMsgMLBot_TeamInference::_impl_.team_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgMLBot_TeamInference, _impl_.world_state_)>(
          reinterpret_cast<char*>(&_impl_.world_state_),
          reinterpret_cast<char*>(&other->_impl_.world_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMLBot_TeamInference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmessages_5fmlbot_2eproto_getter, &descriptor_table_dota_5fmessages_5fmlbot_2eproto_once,
      file_level_metadata_dota_5fmessages_5fmlbot_2eproto[4]);
}

// ===================================================================

class CMsgMLBot_TeamInferenceResponse::_Internal {
 public:
};

CMsgMLBot_TeamInferenceResponse::CMsgMLBot_TeamInferenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMLBot_TeamInferenceResponse)
}
CMsgMLBot_TeamInferenceResponse::CMsgMLBot_TeamInferenceResponse(const CMsgMLBot_TeamInferenceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMLBot_TeamInferenceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){from._impl_.orders_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgMLBot_TeamInferenceResponse)
}

inline void CMsgMLBot_TeamInferenceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgMLBot_TeamInferenceResponse::~CMsgMLBot_TeamInferenceResponse() {
  // @@protoc_insertion_point(destructor:CMsgMLBot_TeamInferenceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMLBot_TeamInferenceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.orders_.~RepeatedPtrField();
}

void CMsgMLBot_TeamInferenceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMLBot_TeamInferenceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMLBot_TeamInferenceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.orders_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMLBot_TeamInferenceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgMLBot_PlayerOrder orders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMLBot_TeamInferenceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMLBot_TeamInferenceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgMLBot_PlayerOrder orders = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_orders_size()); i < n; i++) {
    const auto& repfield = this->_internal_orders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMLBot_TeamInferenceResponse)
  return target;
}

size_t CMsgMLBot_TeamInferenceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMLBot_TeamInferenceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMLBot_PlayerOrder orders = 1;
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->_impl_.orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMLBot_TeamInferenceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMLBot_TeamInferenceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMLBot_TeamInferenceResponse::GetClassData() const { return &_class_data_; }


void CMsgMLBot_TeamInferenceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMLBot_TeamInferenceResponse*>(&to_msg);
  auto& from = static_cast<const CMsgMLBot_TeamInferenceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMLBot_TeamInferenceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.orders_.MergeFrom(from._impl_.orders_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMLBot_TeamInferenceResponse::CopyFrom(const CMsgMLBot_TeamInferenceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMLBot_TeamInferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMLBot_TeamInferenceResponse::IsInitialized() const {
  return true;
}

void CMsgMLBot_TeamInferenceResponse::InternalSwap(CMsgMLBot_TeamInferenceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.orders_.InternalSwap(&other->_impl_.orders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMLBot_TeamInferenceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmessages_5fmlbot_2eproto_getter, &descriptor_table_dota_5fmessages_5fmlbot_2eproto_once,
      file_level_metadata_dota_5fmessages_5fmlbot_2eproto[5]);
}

// ===================================================================

class CMsgMLBot_TeamInferenceList::_Internal {
 public:
};

CMsgMLBot_TeamInferenceList::CMsgMLBot_TeamInferenceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMLBot_TeamInferenceList)
}
CMsgMLBot_TeamInferenceList::CMsgMLBot_TeamInferenceList(const CMsgMLBot_TeamInferenceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMLBot_TeamInferenceList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){from._impl_.messages_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgMLBot_TeamInferenceList)
}

inline void CMsgMLBot_TeamInferenceList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgMLBot_TeamInferenceList::~CMsgMLBot_TeamInferenceList() {
  // @@protoc_insertion_point(destructor:CMsgMLBot_TeamInferenceList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMLBot_TeamInferenceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messages_.~RepeatedPtrField();
}

void CMsgMLBot_TeamInferenceList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMLBot_TeamInferenceList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMLBot_TeamInferenceList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMLBot_TeamInferenceList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgMLBot_TeamInference messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMLBot_TeamInferenceList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMLBot_TeamInferenceList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgMLBot_TeamInference messages = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMLBot_TeamInferenceList)
  return target;
}

size_t CMsgMLBot_TeamInferenceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMLBot_TeamInferenceList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMLBot_TeamInference messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->_impl_.messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMLBot_TeamInferenceList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMLBot_TeamInferenceList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMLBot_TeamInferenceList::GetClassData() const { return &_class_data_; }


void CMsgMLBot_TeamInferenceList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMLBot_TeamInferenceList*>(&to_msg);
  auto& from = static_cast<const CMsgMLBot_TeamInferenceList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMLBot_TeamInferenceList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messages_.MergeFrom(from._impl_.messages_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMLBot_TeamInferenceList::CopyFrom(const CMsgMLBot_TeamInferenceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMLBot_TeamInferenceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMLBot_TeamInferenceList::IsInitialized() const {
  return true;
}

void CMsgMLBot_TeamInferenceList::InternalSwap(CMsgMLBot_TeamInferenceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMLBot_TeamInferenceList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmessages_5fmlbot_2eproto_getter, &descriptor_table_dota_5fmessages_5fmlbot_2eproto_once,
      file_level_metadata_dota_5fmessages_5fmlbot_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgMLBotMatchMetadata_Player*
Arena::CreateMaybeMessage< ::CMsgMLBotMatchMetadata_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMLBotMatchMetadata_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMLBotMatchMetadata*
Arena::CreateMaybeMessage< ::CMsgMLBotMatchMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMLBotMatchMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMLBotTickBoundary*
Arena::CreateMaybeMessage< ::CMsgMLBotTickBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMLBotTickBoundary >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMLBot_PlayerOrder*
Arena::CreateMaybeMessage< ::CMsgMLBot_PlayerOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMLBot_PlayerOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMLBot_TeamInference*
Arena::CreateMaybeMessage< ::CMsgMLBot_TeamInference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMLBot_TeamInference >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMLBot_TeamInferenceResponse*
Arena::CreateMaybeMessage< ::CMsgMLBot_TeamInferenceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMLBot_TeamInferenceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMLBot_TeamInferenceList*
Arena::CreateMaybeMessage< ::CMsgMLBot_TeamInferenceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMLBot_TeamInferenceList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
