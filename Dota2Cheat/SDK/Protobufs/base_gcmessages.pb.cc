// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_gcmessages.proto

#include "base_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CGCStorePurchaseInit_LineItem::CGCStorePurchaseInit_LineItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_def_id_)*/0u
  , /*decltype(_impl_.quantity_)*/0u
  , /*decltype(_impl_.cost_in_local_currency_)*/0u
  , /*decltype(_impl_.purchase_type_)*/0u
  , /*decltype(_impl_.source_reference_id_)*/uint64_t{0u}} {}
struct CGCStorePurchaseInit_LineItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCStorePurchaseInit_LineItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCStorePurchaseInit_LineItemDefaultTypeInternal() {}
  union {
    CGCStorePurchaseInit_LineItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCStorePurchaseInit_LineItemDefaultTypeInternal _CGCStorePurchaseInit_LineItem_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCStorePurchaseInit::CMsgGCStorePurchaseInit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.line_items_)*/{}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/0
  , /*decltype(_impl_.currency_)*/0} {}
struct CMsgGCStorePurchaseInitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCStorePurchaseInitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCStorePurchaseInitDefaultTypeInternal() {}
  union {
    CMsgGCStorePurchaseInit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCStorePurchaseInitDefaultTypeInternal _CMsgGCStorePurchaseInit_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCStorePurchaseInitResponse::CMsgGCStorePurchaseInitResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.txn_id_)*/uint64_t{0u}
  , /*decltype(_impl_.result_)*/0} {}
struct CMsgGCStorePurchaseInitResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCStorePurchaseInitResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCStorePurchaseInitResponseDefaultTypeInternal() {}
  union {
    CMsgGCStorePurchaseInitResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCStorePurchaseInitResponseDefaultTypeInternal _CMsgGCStorePurchaseInitResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientPingData::CMsgClientPingData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.relay_codes_)*/{}
  , /*decltype(_impl_.relay_pings_)*/{}
  , /*decltype(_impl_._relay_pings_cached_byte_size_)*/{0}
  , /*decltype(_impl_.region_codes_)*/{}
  , /*decltype(_impl_._region_codes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.region_pings_)*/{}
  , /*decltype(_impl_._region_pings_cached_byte_size_)*/{0}
  , /*decltype(_impl_.region_ping_failed_bitmask_)*/0u} {}
struct CMsgClientPingDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientPingDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientPingDataDefaultTypeInternal() {}
  union {
    CMsgClientPingData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientPingDataDefaultTypeInternal _CMsgClientPingData_default_instance_;
PROTOBUF_CONSTEXPR CMsgInviteToParty::CMsgInviteToParty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ping_data_)*/nullptr
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.client_version_)*/0u
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_.as_coach_)*/false} {}
struct CMsgInviteToPartyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgInviteToPartyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgInviteToPartyDefaultTypeInternal() {}
  union {
    CMsgInviteToParty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgInviteToPartyDefaultTypeInternal _CMsgInviteToParty_default_instance_;
PROTOBUF_CONSTEXPR CMsgInviteToLobby::CMsgInviteToLobby(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.client_version_)*/0u} {}
struct CMsgInviteToLobbyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgInviteToLobbyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgInviteToLobbyDefaultTypeInternal() {}
  union {
    CMsgInviteToLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgInviteToLobbyDefaultTypeInternal _CMsgInviteToLobby_default_instance_;
PROTOBUF_CONSTEXPR CMsgInvitationCreated::CMsgInvitationCreated(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_id_)*/uint64_t{0u}
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.user_offline_)*/false} {}
struct CMsgInvitationCreatedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgInvitationCreatedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgInvitationCreatedDefaultTypeInternal() {}
  union {
    CMsgInvitationCreated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgInvitationCreatedDefaultTypeInternal _CMsgInvitationCreated_default_instance_;
PROTOBUF_CONSTEXPR CMsgPartyInviteResponse::CMsgPartyInviteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ping_data_)*/nullptr
  , /*decltype(_impl_.party_id_)*/uint64_t{0u}
  , /*decltype(_impl_.accept_)*/false
  , /*decltype(_impl_.client_version_)*/0u} {}
struct CMsgPartyInviteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPartyInviteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPartyInviteResponseDefaultTypeInternal() {}
  union {
    CMsgPartyInviteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPartyInviteResponseDefaultTypeInternal _CMsgPartyInviteResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgLobbyInviteResponse::CMsgLobbyInviteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.accept_)*/false
  , /*decltype(_impl_.client_version_)*/0u
  , /*decltype(_impl_.custom_game_crc_)*/uint64_t{0u}
  , /*decltype(_impl_.custom_game_timestamp_)*/0u} {}
struct CMsgLobbyInviteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLobbyInviteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLobbyInviteResponseDefaultTypeInternal() {}
  union {
    CMsgLobbyInviteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLobbyInviteResponseDefaultTypeInternal _CMsgLobbyInviteResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgKickFromParty::CMsgKickFromParty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}} {}
struct CMsgKickFromPartyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgKickFromPartyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgKickFromPartyDefaultTypeInternal() {}
  union {
    CMsgKickFromParty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgKickFromPartyDefaultTypeInternal _CMsgKickFromParty_default_instance_;
PROTOBUF_CONSTEXPR CMsgLeaveParty::CMsgLeaveParty(
    ::_pbi::ConstantInitialized) {}
struct CMsgLeavePartyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLeavePartyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLeavePartyDefaultTypeInternal() {}
  union {
    CMsgLeaveParty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLeavePartyDefaultTypeInternal _CMsgLeaveParty_default_instance_;
PROTOBUF_CONSTEXPR CMsgCustomGameInstallStatus::CMsgCustomGameInstallStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.latest_timestamp_from_steam_)*/0u} {}
struct CMsgCustomGameInstallStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgCustomGameInstallStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgCustomGameInstallStatusDefaultTypeInternal() {}
  union {
    CMsgCustomGameInstallStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgCustomGameInstallStatusDefaultTypeInternal _CMsgCustomGameInstallStatus_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerAvailable::CMsgServerAvailable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.custom_game_install_status_)*/nullptr} {}
struct CMsgServerAvailableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerAvailableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerAvailableDefaultTypeInternal() {}
  union {
    CMsgServerAvailable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerAvailableDefaultTypeInternal _CMsgServerAvailable_default_instance_;
PROTOBUF_CONSTEXPR CMsgLANServerAvailable::CMsgLANServerAvailable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}} {}
struct CMsgLANServerAvailableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLANServerAvailableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLANServerAvailableDefaultTypeInternal() {}
  union {
    CMsgLANServerAvailable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLANServerAvailableDefaultTypeInternal _CMsgLANServerAvailable_default_instance_;
PROTOBUF_CONSTEXPR CSOEconGameAccountClient::CSOEconGameAccountClient(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.additional_backpack_slots_)*/0u
  , /*decltype(_impl_.trial_account_)*/false
  , /*decltype(_impl_.need_to_choose_most_helpful_friend_)*/false
  , /*decltype(_impl_.in_coaches_list_)*/false
  , /*decltype(_impl_.made_first_purchase_)*/false
  , /*decltype(_impl_.trade_ban_expiration_)*/0u
  , /*decltype(_impl_.duel_ban_expiration_)*/0u
  , /*decltype(_impl_.eligible_for_online_play_)*/true} {}
struct CSOEconGameAccountClientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSOEconGameAccountClientDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSOEconGameAccountClientDefaultTypeInternal() {}
  union {
    CSOEconGameAccountClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSOEconGameAccountClientDefaultTypeInternal _CSOEconGameAccountClient_default_instance_;
PROTOBUF_CONSTEXPR CMsgApplyStrangePart::CMsgApplyStrangePart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.strange_part_item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.item_item_id_)*/uint64_t{0u}} {}
struct CMsgApplyStrangePartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgApplyStrangePartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgApplyStrangePartDefaultTypeInternal() {}
  union {
    CMsgApplyStrangePart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgApplyStrangePartDefaultTypeInternal _CMsgApplyStrangePart_default_instance_;
PROTOBUF_CONSTEXPR CMsgApplyPennantUpgrade::CMsgApplyPennantUpgrade(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.upgrade_item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.pennant_item_id_)*/uint64_t{0u}} {}
struct CMsgApplyPennantUpgradeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgApplyPennantUpgradeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgApplyPennantUpgradeDefaultTypeInternal() {}
  union {
    CMsgApplyPennantUpgrade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgApplyPennantUpgradeDefaultTypeInternal _CMsgApplyPennantUpgrade_default_instance_;
PROTOBUF_CONSTEXPR CMsgApplyEggEssence::CMsgApplyEggEssence(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.essence_item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.egg_item_id_)*/uint64_t{0u}} {}
struct CMsgApplyEggEssenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgApplyEggEssenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgApplyEggEssenceDefaultTypeInternal() {}
  union {
    CMsgApplyEggEssence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgApplyEggEssenceDefaultTypeInternal _CMsgApplyEggEssence_default_instance_;
PROTOBUF_CONSTEXPR CSOEconItemAttribute::CSOEconItemAttribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_bytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/0u
  , /*decltype(_impl_.def_index_)*/65535u} {}
struct CSOEconItemAttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSOEconItemAttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSOEconItemAttributeDefaultTypeInternal() {}
  union {
    CSOEconItemAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSOEconItemAttributeDefaultTypeInternal _CSOEconItemAttribute_default_instance_;
PROTOBUF_CONSTEXPR CSOEconItemEquipped::CSOEconItemEquipped(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.new_class_)*/0u
  , /*decltype(_impl_.new_slot_)*/0u} {}
struct CSOEconItemEquippedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSOEconItemEquippedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSOEconItemEquippedDefaultTypeInternal() {}
  union {
    CSOEconItemEquipped _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSOEconItemEquippedDefaultTypeInternal _CSOEconItemEquipped_default_instance_;
PROTOBUF_CONSTEXPR CSOEconItem::CSOEconItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attribute_)*/{}
  , /*decltype(_impl_.equipped_state_)*/{}
  , /*decltype(_impl_.interior_item_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.inventory_)*/0u
  , /*decltype(_impl_.def_index_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_.origin_)*/0u
  , /*decltype(_impl_.style_)*/0u
  , /*decltype(_impl_.original_id_)*/uint64_t{0u}
  , /*decltype(_impl_.quality_)*/4u
  , /*decltype(_impl_.quantity_)*/1u
  , /*decltype(_impl_.level_)*/1u} {}
struct CSOEconItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSOEconItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSOEconItemDefaultTypeInternal() {}
  union {
    CSOEconItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSOEconItemDefaultTypeInternal _CSOEconItem_default_instance_;
PROTOBUF_CONSTEXPR CMsgSortItems::CMsgSortItems(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sort_type_)*/0u} {}
struct CMsgSortItemsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSortItemsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSortItemsDefaultTypeInternal() {}
  union {
    CMsgSortItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSortItemsDefaultTypeInternal _CMsgSortItems_default_instance_;
PROTOBUF_CONSTEXPR CMsgItemAcknowledged::CMsgItemAcknowledged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.inventory_)*/0u
  , /*decltype(_impl_.def_index_)*/0u
  , /*decltype(_impl_.quality_)*/0u
  , /*decltype(_impl_.rarity_)*/0u
  , /*decltype(_impl_.origin_)*/0u} {}
struct CMsgItemAcknowledgedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgItemAcknowledgedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgItemAcknowledgedDefaultTypeInternal() {}
  union {
    CMsgItemAcknowledged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgItemAcknowledgedDefaultTypeInternal _CMsgItemAcknowledged_default_instance_;
PROTOBUF_CONSTEXPR CMsgSetItemPositions_ItemPosition::CMsgSetItemPositions_ItemPosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.position_)*/0u} {}
struct CMsgSetItemPositions_ItemPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSetItemPositions_ItemPositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSetItemPositions_ItemPositionDefaultTypeInternal() {}
  union {
    CMsgSetItemPositions_ItemPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSetItemPositions_ItemPositionDefaultTypeInternal _CMsgSetItemPositions_ItemPosition_default_instance_;
PROTOBUF_CONSTEXPR CMsgSetItemPositions::CMsgSetItemPositions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_positions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgSetItemPositionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSetItemPositionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSetItemPositionsDefaultTypeInternal() {}
  union {
    CMsgSetItemPositions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSetItemPositionsDefaultTypeInternal _CMsgSetItemPositions_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCStorePurchaseCancel::CMsgGCStorePurchaseCancel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.txn_id_)*/uint64_t{0u}} {}
struct CMsgGCStorePurchaseCancelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCStorePurchaseCancelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCStorePurchaseCancelDefaultTypeInternal() {}
  union {
    CMsgGCStorePurchaseCancel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCStorePurchaseCancelDefaultTypeInternal _CMsgGCStorePurchaseCancel_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCStorePurchaseCancelResponse::CMsgGCStorePurchaseCancelResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/0u} {}
struct CMsgGCStorePurchaseCancelResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCStorePurchaseCancelResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCStorePurchaseCancelResponseDefaultTypeInternal() {}
  union {
    CMsgGCStorePurchaseCancelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCStorePurchaseCancelResponseDefaultTypeInternal _CMsgGCStorePurchaseCancelResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCStorePurchaseFinalize::CMsgGCStorePurchaseFinalize(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.txn_id_)*/uint64_t{0u}} {}
struct CMsgGCStorePurchaseFinalizeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCStorePurchaseFinalizeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCStorePurchaseFinalizeDefaultTypeInternal() {}
  union {
    CMsgGCStorePurchaseFinalize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCStorePurchaseFinalizeDefaultTypeInternal _CMsgGCStorePurchaseFinalize_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCStorePurchaseFinalizeResponse::CMsgGCStorePurchaseFinalizeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_ids_)*/{}
  , /*decltype(_impl_.result_)*/0u} {}
struct CMsgGCStorePurchaseFinalizeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCStorePurchaseFinalizeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCStorePurchaseFinalizeResponseDefaultTypeInternal() {}
  union {
    CMsgGCStorePurchaseFinalizeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCStorePurchaseFinalizeResponseDefaultTypeInternal _CMsgGCStorePurchaseFinalizeResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCBannedWordListUpdated::CMsgGCToGCBannedWordListUpdated(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_id_)*/0u} {}
struct CMsgGCToGCBannedWordListUpdatedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCBannedWordListUpdatedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCBannedWordListUpdatedDefaultTypeInternal() {}
  union {
    CMsgGCToGCBannedWordListUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCBannedWordListUpdatedDefaultTypeInternal _CMsgGCToGCBannedWordListUpdated_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCDirtySDOCache::CMsgGCToGCDirtySDOCache(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_uint64_)*/uint64_t{0u}
  , /*decltype(_impl_.sdo_type_)*/0u} {}
struct CMsgGCToGCDirtySDOCacheDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCDirtySDOCacheDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCDirtySDOCacheDefaultTypeInternal() {}
  union {
    CMsgGCToGCDirtySDOCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCDirtySDOCacheDefaultTypeInternal _CMsgGCToGCDirtySDOCache_default_instance_;
PROTOBUF_CONSTEXPR CMsgSDONoMemcached::CMsgSDONoMemcached(
    ::_pbi::ConstantInitialized) {}
struct CMsgSDONoMemcachedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSDONoMemcachedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSDONoMemcachedDefaultTypeInternal() {}
  union {
    CMsgSDONoMemcached _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSDONoMemcachedDefaultTypeInternal _CMsgSDONoMemcached_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCUpdateSQLKeyValue::CMsgGCToGCUpdateSQLKeyValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CMsgGCToGCUpdateSQLKeyValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCUpdateSQLKeyValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCUpdateSQLKeyValueDefaultTypeInternal() {}
  union {
    CMsgGCToGCUpdateSQLKeyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCUpdateSQLKeyValueDefaultTypeInternal _CMsgGCToGCUpdateSQLKeyValue_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCServerVersionUpdated::CMsgGCServerVersionUpdated(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.server_version_)*/0u} {}
struct CMsgGCServerVersionUpdatedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCServerVersionUpdatedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCServerVersionUpdatedDefaultTypeInternal() {}
  union {
    CMsgGCServerVersionUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCServerVersionUpdatedDefaultTypeInternal _CMsgGCServerVersionUpdated_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCClientVersionUpdated::CMsgGCClientVersionUpdated(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.client_version_)*/0u} {}
struct CMsgGCClientVersionUpdatedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCClientVersionUpdatedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCClientVersionUpdatedDefaultTypeInternal() {}
  union {
    CMsgGCClientVersionUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCClientVersionUpdatedDefaultTypeInternal _CMsgGCClientVersionUpdated_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCWebAPIAccountChanged::CMsgGCToGCWebAPIAccountChanged(
    ::_pbi::ConstantInitialized) {}
struct CMsgGCToGCWebAPIAccountChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCWebAPIAccountChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCWebAPIAccountChangedDefaultTypeInternal() {}
  union {
    CMsgGCToGCWebAPIAccountChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCWebAPIAccountChangedDefaultTypeInternal _CMsgGCToGCWebAPIAccountChanged_default_instance_;
PROTOBUF_CONSTEXPR CMsgExtractGems::CMsgExtractGems(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tool_item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.item_item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.item_socket_id_)*/65535u} {}
struct CMsgExtractGemsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgExtractGemsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgExtractGemsDefaultTypeInternal() {}
  union {
    CMsgExtractGems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgExtractGemsDefaultTypeInternal _CMsgExtractGems_default_instance_;
PROTOBUF_CONSTEXPR CMsgExtractGemsResponse::CMsgExtractGemsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgExtractGemsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgExtractGemsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgExtractGemsResponseDefaultTypeInternal() {}
  union {
    CMsgExtractGemsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgExtractGemsResponseDefaultTypeInternal _CMsgExtractGemsResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgAddSocket::CMsgAddSocket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tool_item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.item_item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.unusual_)*/false} {}
struct CMsgAddSocketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAddSocketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAddSocketDefaultTypeInternal() {}
  union {
    CMsgAddSocket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAddSocketDefaultTypeInternal _CMsgAddSocket_default_instance_;
PROTOBUF_CONSTEXPR CMsgAddSocketResponse::CMsgAddSocketResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.updated_socket_index_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgAddSocketResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAddSocketResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAddSocketResponseDefaultTypeInternal() {}
  union {
    CMsgAddSocketResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAddSocketResponseDefaultTypeInternal _CMsgAddSocketResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgAddItemToSocketData::CMsgAddItemToSocketData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gem_item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.socket_index_)*/65535u} {}
struct CMsgAddItemToSocketDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAddItemToSocketDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAddItemToSocketDataDefaultTypeInternal() {}
  union {
    CMsgAddItemToSocketData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAddItemToSocketDataDefaultTypeInternal _CMsgAddItemToSocketData_default_instance_;
PROTOBUF_CONSTEXPR CMsgAddItemToSocket::CMsgAddItemToSocket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gems_to_socket_)*/{}
  , /*decltype(_impl_.item_item_id_)*/uint64_t{0u}} {}
struct CMsgAddItemToSocketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAddItemToSocketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAddItemToSocketDefaultTypeInternal() {}
  union {
    CMsgAddItemToSocket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAddItemToSocketDefaultTypeInternal _CMsgAddItemToSocket_default_instance_;
PROTOBUF_CONSTEXPR CMsgAddItemToSocketResponse::CMsgAddItemToSocketResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.updated_socket_index_)*/{}
  , /*decltype(_impl_.item_item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgAddItemToSocketResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAddItemToSocketResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAddItemToSocketResponseDefaultTypeInternal() {}
  union {
    CMsgAddItemToSocketResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAddItemToSocketResponseDefaultTypeInternal _CMsgAddItemToSocketResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgResetStrangeGemCount::CMsgResetStrangeGemCount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.socket_index_)*/65535u} {}
struct CMsgResetStrangeGemCountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgResetStrangeGemCountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgResetStrangeGemCountDefaultTypeInternal() {}
  union {
    CMsgResetStrangeGemCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgResetStrangeGemCountDefaultTypeInternal _CMsgResetStrangeGemCount_default_instance_;
PROTOBUF_CONSTEXPR CMsgResetStrangeGemCountResponse::CMsgResetStrangeGemCountResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.response_)*/0} {}
struct CMsgResetStrangeGemCountResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgResetStrangeGemCountResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgResetStrangeGemCountResponseDefaultTypeInternal() {}
  union {
    CMsgResetStrangeGemCountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgResetStrangeGemCountResponseDefaultTypeInternal _CMsgResetStrangeGemCountResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientPollFileRequest::CMsgGCToClientPollFileRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_version_)*/0u
  , /*decltype(_impl_.poll_id_)*/0u} {}
struct CMsgGCToClientPollFileRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientPollFileRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientPollFileRequestDefaultTypeInternal() {}
  union {
    CMsgGCToClientPollFileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientPollFileRequestDefaultTypeInternal _CMsgGCToClientPollFileRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientPollFileResponse::CMsgGCToClientPollFileResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.poll_id_)*/0u
  , /*decltype(_impl_.file_size_)*/0u
  , /*decltype(_impl_.file_crc_)*/0u} {}
struct CMsgGCToClientPollFileResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientPollFileResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientPollFileResponseDefaultTypeInternal() {}
  union {
    CMsgGCToClientPollFileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientPollFileResponseDefaultTypeInternal _CMsgGCToClientPollFileResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCPerformManualOp::CMsgGCToGCPerformManualOp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.op_id_)*/uint64_t{0u}
  , /*decltype(_impl_.group_code_)*/0u} {}
struct CMsgGCToGCPerformManualOpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCPerformManualOpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCPerformManualOpDefaultTypeInternal() {}
  union {
    CMsgGCToGCPerformManualOp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCPerformManualOpDefaultTypeInternal _CMsgGCToGCPerformManualOp_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCPerformManualOpCompleted::CMsgGCToGCPerformManualOpCompleted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.source_gc_)*/-1} {}
struct CMsgGCToGCPerformManualOpCompletedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCPerformManualOpCompletedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCPerformManualOpCompletedDefaultTypeInternal() {}
  union {
    CMsgGCToGCPerformManualOpCompleted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCPerformManualOpCompletedDefaultTypeInternal _CMsgGCToGCPerformManualOpCompleted_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCReloadServerRegionSettings::CMsgGCToGCReloadServerRegionSettings(
    ::_pbi::ConstantInitialized) {}
struct CMsgGCToGCReloadServerRegionSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCReloadServerRegionSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCReloadServerRegionSettingsDefaultTypeInternal() {}
  union {
    CMsgGCToGCReloadServerRegionSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCReloadServerRegionSettingsDefaultTypeInternal _CMsgGCToGCReloadServerRegionSettings_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCAdditionalWelcomeMsgList::CMsgGCAdditionalWelcomeMsgList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.welcome_messages_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgGCAdditionalWelcomeMsgListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCAdditionalWelcomeMsgListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCAdditionalWelcomeMsgListDefaultTypeInternal() {}
  union {
    CMsgGCAdditionalWelcomeMsgList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCAdditionalWelcomeMsgListDefaultTypeInternal _CMsgGCAdditionalWelcomeMsgList_default_instance_;
PROTOBUF_CONSTEXPR CMsgApplyRemoteConVars_ConVar::CMsgApplyRemoteConVars_ConVar(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_min_)*/0u
  , /*decltype(_impl_.version_max_)*/0u
  , /*decltype(_impl_.platform_)*/0} {}
struct CMsgApplyRemoteConVars_ConVarDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgApplyRemoteConVars_ConVarDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgApplyRemoteConVars_ConVarDefaultTypeInternal() {}
  union {
    CMsgApplyRemoteConVars_ConVar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgApplyRemoteConVars_ConVarDefaultTypeInternal _CMsgApplyRemoteConVars_ConVar_default_instance_;
PROTOBUF_CONSTEXPR CMsgApplyRemoteConVars::CMsgApplyRemoteConVars(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.con_vars_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgApplyRemoteConVarsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgApplyRemoteConVarsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgApplyRemoteConVarsDefaultTypeInternal() {}
  union {
    CMsgApplyRemoteConVars _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgApplyRemoteConVarsDefaultTypeInternal _CMsgApplyRemoteConVars_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientApplyRemoteConVars::CMsgGCToClientApplyRemoteConVars(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/nullptr} {}
struct CMsgGCToClientApplyRemoteConVarsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientApplyRemoteConVarsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientApplyRemoteConVarsDefaultTypeInternal() {}
  union {
    CMsgGCToClientApplyRemoteConVars _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientApplyRemoteConVarsDefaultTypeInternal _CMsgGCToClientApplyRemoteConVars_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerApplyRemoteConVars::CMsgGCToServerApplyRemoteConVars(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/nullptr} {}
struct CMsgGCToServerApplyRemoteConVarsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerApplyRemoteConVarsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerApplyRemoteConVarsDefaultTypeInternal() {}
  union {
    CMsgGCToServerApplyRemoteConVars _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerApplyRemoteConVarsDefaultTypeInternal _CMsgGCToServerApplyRemoteConVars_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCIntegrityStatus_keyvalue::CMsgClientToGCIntegrityStatus_keyvalue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.string_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.extended_)*/0u
  , /*decltype(_impl_.value_)*/uint64_t{0u}} {}
struct CMsgClientToGCIntegrityStatus_keyvalueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCIntegrityStatus_keyvalueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCIntegrityStatus_keyvalueDefaultTypeInternal() {}
  union {
    CMsgClientToGCIntegrityStatus_keyvalue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCIntegrityStatus_keyvalueDefaultTypeInternal _CMsgClientToGCIntegrityStatus_keyvalue_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCIntegrityStatus::CMsgClientToGCIntegrityStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.diagnostics_)*/{}
  , /*decltype(_impl_.report_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.secure_allowed_)*/false} {}
struct CMsgClientToGCIntegrityStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCIntegrityStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCIntegrityStatusDefaultTypeInternal() {}
  union {
    CMsgClientToGCIntegrityStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCIntegrityStatusDefaultTypeInternal _CMsgClientToGCIntegrityStatus_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCAggregateMetrics_SingleMetric::CMsgClientToGCAggregateMetrics_SingleMetric(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.metric_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metric_count_)*/0u} {}
struct CMsgClientToGCAggregateMetrics_SingleMetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCAggregateMetrics_SingleMetricDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCAggregateMetrics_SingleMetricDefaultTypeInternal() {}
  union {
    CMsgClientToGCAggregateMetrics_SingleMetric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCAggregateMetrics_SingleMetricDefaultTypeInternal _CMsgClientToGCAggregateMetrics_SingleMetric_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCAggregateMetrics::CMsgClientToGCAggregateMetrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metrics_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgClientToGCAggregateMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCAggregateMetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCAggregateMetricsDefaultTypeInternal() {}
  union {
    CMsgClientToGCAggregateMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCAggregateMetricsDefaultTypeInternal _CMsgClientToGCAggregateMetrics_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientAggregateMetricsBackoff::CMsgGCToClientAggregateMetricsBackoff(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.upload_rate_modifier_)*/0} {}
struct CMsgGCToClientAggregateMetricsBackoffDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientAggregateMetricsBackoffDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientAggregateMetricsBackoffDefaultTypeInternal() {}
  union {
    CMsgGCToClientAggregateMetricsBackoff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientAggregateMetricsBackoffDefaultTypeInternal _CMsgGCToClientAggregateMetricsBackoff_default_instance_;
static ::_pb::Metadata file_level_metadata_base_5fgcmessages_2eproto[60];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_base_5fgcmessages_2eproto[6];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_base_5fgcmessages_2eproto = nullptr;

const uint32_t TableStruct_base_5fgcmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CGCStorePurchaseInit_LineItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCStorePurchaseInit_LineItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCStorePurchaseInit_LineItem, _impl_.item_def_id_),
  PROTOBUF_FIELD_OFFSET(::CGCStorePurchaseInit_LineItem, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::CGCStorePurchaseInit_LineItem, _impl_.cost_in_local_currency_),
  PROTOBUF_FIELD_OFFSET(::CGCStorePurchaseInit_LineItem, _impl_.purchase_type_),
  PROTOBUF_FIELD_OFFSET(::CGCStorePurchaseInit_LineItem, _impl_.source_reference_id_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInit, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInit, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInit, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInit, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInit, _impl_.line_items_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInitResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInitResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInitResponse, _impl_.txn_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientPingData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPingData, _impl_.relay_codes_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPingData, _impl_.relay_pings_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPingData, _impl_.region_codes_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPingData, _impl_.region_pings_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPingData, _impl_.region_ping_failed_bitmask_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToParty, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToParty, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToParty, _impl_.client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToParty, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToParty, _impl_.as_coach_),
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToParty, _impl_.ping_data_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToLobby, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToLobby, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToLobby, _impl_.client_version_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgInvitationCreated, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgInvitationCreated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgInvitationCreated, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgInvitationCreated, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgInvitationCreated, _impl_.user_offline_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgPartyInviteResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyInviteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyInviteResponse, _impl_.party_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyInviteResponse, _impl_.accept_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyInviteResponse, _impl_.client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyInviteResponse, _impl_.ping_data_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyInviteResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyInviteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyInviteResponse, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyInviteResponse, _impl_.accept_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyInviteResponse, _impl_.client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyInviteResponse, _impl_.custom_game_crc_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyInviteResponse, _impl_.custom_game_timestamp_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgKickFromParty, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgKickFromParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgKickFromParty, _impl_.steam_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgLeaveParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameInstallStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameInstallStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameInstallStatus, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameInstallStatus, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameInstallStatus, _impl_.latest_timestamp_from_steam_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgServerAvailable, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerAvailable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerAvailable, _impl_.custom_game_install_status_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgLANServerAvailable, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLANServerAvailable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLANServerAvailable, _impl_.lobby_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, _impl_.additional_backpack_slots_),
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, _impl_.trial_account_),
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, _impl_.eligible_for_online_play_),
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, _impl_.need_to_choose_most_helpful_friend_),
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, _impl_.in_coaches_list_),
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, _impl_.trade_ban_expiration_),
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, _impl_.duel_ban_expiration_),
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, _impl_.made_first_purchase_),
  0,
  1,
  7,
  2,
  3,
  5,
  6,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgApplyStrangePart, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyStrangePart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgApplyStrangePart, _impl_.strange_part_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyStrangePart, _impl_.item_item_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgApplyPennantUpgrade, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyPennantUpgrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgApplyPennantUpgrade, _impl_.upgrade_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyPennantUpgrade, _impl_.pennant_item_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgApplyEggEssence, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyEggEssence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgApplyEggEssence, _impl_.essence_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyEggEssence, _impl_.egg_item_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, _impl_.def_index_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, _impl_.value_bytes_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEquipped, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEquipped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEquipped, _impl_.new_class_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEquipped, _impl_.new_slot_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _impl_.inventory_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _impl_.def_index_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _impl_.origin_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _impl_.attribute_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _impl_.interior_item_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _impl_.style_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _impl_.original_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _impl_.equipped_state_),
  1,
  2,
  3,
  4,
  10,
  11,
  9,
  5,
  6,
  ~0u,
  0,
  7,
  8,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSortItems, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSortItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSortItems, _impl_.sort_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged, _impl_.inventory_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged, _impl_.def_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged, _impl_.rarity_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged, _impl_.origin_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemPositions_ItemPosition, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemPositions_ItemPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemPositions_ItemPosition, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemPositions_ItemPosition, _impl_.position_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemPositions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemPositions, _impl_.item_positions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseCancel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseCancel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseCancel, _impl_.txn_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseCancelResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseCancelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseCancelResponse, _impl_.result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseFinalize, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseFinalize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseFinalize, _impl_.txn_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseFinalizeResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseFinalizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseFinalizeResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseFinalizeResponse, _impl_.item_ids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBannedWordListUpdated, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBannedWordListUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBannedWordListUpdated, _impl_.group_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCDirtySDOCache, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCDirtySDOCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCDirtySDOCache, _impl_.sdo_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCDirtySDOCache, _impl_.key_uint64_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSDONoMemcached, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateSQLKeyValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateSQLKeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateSQLKeyValue, _impl_.key_name_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCServerVersionUpdated, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCServerVersionUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCServerVersionUpdated, _impl_.server_version_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientVersionUpdated, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientVersionUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientVersionUpdated, _impl_.client_version_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCWebAPIAccountChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgExtractGems, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgExtractGems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgExtractGems, _impl_.tool_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgExtractGems, _impl_.item_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgExtractGems, _impl_.item_socket_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgExtractGemsResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgExtractGemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgExtractGemsResponse, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgExtractGemsResponse, _impl_.response_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgAddSocket, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddSocket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAddSocket, _impl_.tool_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddSocket, _impl_.item_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddSocket, _impl_.unusual_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgAddSocketResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddSocketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAddSocketResponse, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddSocketResponse, _impl_.updated_socket_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddSocketResponse, _impl_.response_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocketData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocketData, _impl_.gem_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocketData, _impl_.socket_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocket, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocket, _impl_.item_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocket, _impl_.gems_to_socket_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocketResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocketResponse, _impl_.item_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocketResponse, _impl_.updated_socket_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocketResponse, _impl_.response_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgResetStrangeGemCount, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgResetStrangeGemCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgResetStrangeGemCount, _impl_.item_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgResetStrangeGemCount, _impl_.socket_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgResetStrangeGemCountResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgResetStrangeGemCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgResetStrangeGemCountResponse, _impl_.response_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollFileRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollFileRequest, _impl_.file_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollFileRequest, _impl_.client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollFileRequest, _impl_.poll_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollFileResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollFileResponse, _impl_.poll_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollFileResponse, _impl_.file_size_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollFileResponse, _impl_.file_crc_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCPerformManualOp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCPerformManualOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCPerformManualOp, _impl_.op_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCPerformManualOp, _impl_.group_code_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCPerformManualOpCompleted, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCPerformManualOpCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCPerformManualOpCompleted, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCPerformManualOpCompleted, _impl_.source_gc_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCReloadServerRegionSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCAdditionalWelcomeMsgList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCAdditionalWelcomeMsgList, _impl_.welcome_messages_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyRemoteConVars_ConVar, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyRemoteConVars_ConVar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgApplyRemoteConVars_ConVar, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyRemoteConVars_ConVar, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyRemoteConVars_ConVar, _impl_.version_min_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyRemoteConVars_ConVar, _impl_.version_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyRemoteConVars_ConVar, _impl_.platform_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgApplyRemoteConVars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgApplyRemoteConVars, _impl_.con_vars_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientApplyRemoteConVars, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientApplyRemoteConVars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientApplyRemoteConVars, _impl_.msg_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerApplyRemoteConVars, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerApplyRemoteConVars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerApplyRemoteConVars, _impl_.msg_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCIntegrityStatus_keyvalue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCIntegrityStatus_keyvalue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCIntegrityStatus_keyvalue, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCIntegrityStatus_keyvalue, _impl_.extended_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCIntegrityStatus_keyvalue, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCIntegrityStatus_keyvalue, _impl_.string_value_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCIntegrityStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCIntegrityStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCIntegrityStatus, _impl_.report_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCIntegrityStatus, _impl_.secure_allowed_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCIntegrityStatus, _impl_.diagnostics_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCAggregateMetrics_SingleMetric, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCAggregateMetrics_SingleMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCAggregateMetrics_SingleMetric, _impl_.metric_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCAggregateMetrics_SingleMetric, _impl_.metric_count_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCAggregateMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCAggregateMetrics, _impl_.metrics_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientAggregateMetricsBackoff, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientAggregateMetricsBackoff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientAggregateMetricsBackoff, _impl_.upload_rate_modifier_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::CGCStorePurchaseInit_LineItem)},
  { 16, 26, -1, sizeof(::CMsgGCStorePurchaseInit)},
  { 30, 38, -1, sizeof(::CMsgGCStorePurchaseInitResponse)},
  { 40, 51, -1, sizeof(::CMsgClientPingData)},
  { 56, 67, -1, sizeof(::CMsgInviteToParty)},
  { 72, 80, -1, sizeof(::CMsgInviteToLobby)},
  { 82, 91, -1, sizeof(::CMsgInvitationCreated)},
  { 94, 104, -1, sizeof(::CMsgPartyInviteResponse)},
  { 108, 119, -1, sizeof(::CMsgLobbyInviteResponse)},
  { 124, 131, -1, sizeof(::CMsgKickFromParty)},
  { 132, -1, -1, sizeof(::CMsgLeaveParty)},
  { 138, 147, -1, sizeof(::CMsgCustomGameInstallStatus)},
  { 150, 157, -1, sizeof(::CMsgServerAvailable)},
  { 158, 165, -1, sizeof(::CMsgLANServerAvailable)},
  { 166, 180, -1, sizeof(::CSOEconGameAccountClient)},
  { 188, 196, -1, sizeof(::CMsgApplyStrangePart)},
  { 198, 206, -1, sizeof(::CMsgApplyPennantUpgrade)},
  { 208, 216, -1, sizeof(::CMsgApplyEggEssence)},
  { 218, 227, -1, sizeof(::CSOEconItemAttribute)},
  { 230, 238, -1, sizeof(::CSOEconItemEquipped)},
  { 240, 260, -1, sizeof(::CSOEconItem)},
  { 274, 281, -1, sizeof(::CMsgSortItems)},
  { 282, 294, -1, sizeof(::CMsgItemAcknowledged)},
  { 300, 308, -1, sizeof(::CMsgSetItemPositions_ItemPosition)},
  { 310, -1, -1, sizeof(::CMsgSetItemPositions)},
  { 317, 324, -1, sizeof(::CMsgGCStorePurchaseCancel)},
  { 325, 332, -1, sizeof(::CMsgGCStorePurchaseCancelResponse)},
  { 333, 340, -1, sizeof(::CMsgGCStorePurchaseFinalize)},
  { 341, 349, -1, sizeof(::CMsgGCStorePurchaseFinalizeResponse)},
  { 351, 358, -1, sizeof(::CMsgGCToGCBannedWordListUpdated)},
  { 359, 367, -1, sizeof(::CMsgGCToGCDirtySDOCache)},
  { 369, -1, -1, sizeof(::CMsgSDONoMemcached)},
  { 375, 382, -1, sizeof(::CMsgGCToGCUpdateSQLKeyValue)},
  { 383, 390, -1, sizeof(::CMsgGCServerVersionUpdated)},
  { 391, 398, -1, sizeof(::CMsgGCClientVersionUpdated)},
  { 399, -1, -1, sizeof(::CMsgGCToGCWebAPIAccountChanged)},
  { 405, 414, -1, sizeof(::CMsgExtractGems)},
  { 417, 425, -1, sizeof(::CMsgExtractGemsResponse)},
  { 427, 436, -1, sizeof(::CMsgAddSocket)},
  { 439, 448, -1, sizeof(::CMsgAddSocketResponse)},
  { 451, 459, -1, sizeof(::CMsgAddItemToSocketData)},
  { 461, 469, -1, sizeof(::CMsgAddItemToSocket)},
  { 471, 480, -1, sizeof(::CMsgAddItemToSocketResponse)},
  { 483, 491, -1, sizeof(::CMsgResetStrangeGemCount)},
  { 493, 500, -1, sizeof(::CMsgResetStrangeGemCountResponse)},
  { 501, 510, -1, sizeof(::CMsgGCToClientPollFileRequest)},
  { 513, 522, -1, sizeof(::CMsgGCToClientPollFileResponse)},
  { 525, 533, -1, sizeof(::CMsgGCToGCPerformManualOp)},
  { 535, 543, -1, sizeof(::CMsgGCToGCPerformManualOpCompleted)},
  { 545, -1, -1, sizeof(::CMsgGCToGCReloadServerRegionSettings)},
  { 551, -1, -1, sizeof(::CMsgGCAdditionalWelcomeMsgList)},
  { 558, 569, -1, sizeof(::CMsgApplyRemoteConVars_ConVar)},
  { 574, -1, -1, sizeof(::CMsgApplyRemoteConVars)},
  { 581, 588, -1, sizeof(::CMsgGCToClientApplyRemoteConVars)},
  { 589, 596, -1, sizeof(::CMsgGCToServerApplyRemoteConVars)},
  { 597, 607, -1, sizeof(::CMsgClientToGCIntegrityStatus_keyvalue)},
  { 611, 620, -1, sizeof(::CMsgClientToGCIntegrityStatus)},
  { 623, 631, -1, sizeof(::CMsgClientToGCAggregateMetrics_SingleMetric)},
  { 633, -1, -1, sizeof(::CMsgClientToGCAggregateMetrics)},
  { 640, 647, -1, sizeof(::CMsgGCToClientAggregateMetricsBackoff)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CGCStorePurchaseInit_LineItem_default_instance_._instance,
  &::_CMsgGCStorePurchaseInit_default_instance_._instance,
  &::_CMsgGCStorePurchaseInitResponse_default_instance_._instance,
  &::_CMsgClientPingData_default_instance_._instance,
  &::_CMsgInviteToParty_default_instance_._instance,
  &::_CMsgInviteToLobby_default_instance_._instance,
  &::_CMsgInvitationCreated_default_instance_._instance,
  &::_CMsgPartyInviteResponse_default_instance_._instance,
  &::_CMsgLobbyInviteResponse_default_instance_._instance,
  &::_CMsgKickFromParty_default_instance_._instance,
  &::_CMsgLeaveParty_default_instance_._instance,
  &::_CMsgCustomGameInstallStatus_default_instance_._instance,
  &::_CMsgServerAvailable_default_instance_._instance,
  &::_CMsgLANServerAvailable_default_instance_._instance,
  &::_CSOEconGameAccountClient_default_instance_._instance,
  &::_CMsgApplyStrangePart_default_instance_._instance,
  &::_CMsgApplyPennantUpgrade_default_instance_._instance,
  &::_CMsgApplyEggEssence_default_instance_._instance,
  &::_CSOEconItemAttribute_default_instance_._instance,
  &::_CSOEconItemEquipped_default_instance_._instance,
  &::_CSOEconItem_default_instance_._instance,
  &::_CMsgSortItems_default_instance_._instance,
  &::_CMsgItemAcknowledged_default_instance_._instance,
  &::_CMsgSetItemPositions_ItemPosition_default_instance_._instance,
  &::_CMsgSetItemPositions_default_instance_._instance,
  &::_CMsgGCStorePurchaseCancel_default_instance_._instance,
  &::_CMsgGCStorePurchaseCancelResponse_default_instance_._instance,
  &::_CMsgGCStorePurchaseFinalize_default_instance_._instance,
  &::_CMsgGCStorePurchaseFinalizeResponse_default_instance_._instance,
  &::_CMsgGCToGCBannedWordListUpdated_default_instance_._instance,
  &::_CMsgGCToGCDirtySDOCache_default_instance_._instance,
  &::_CMsgSDONoMemcached_default_instance_._instance,
  &::_CMsgGCToGCUpdateSQLKeyValue_default_instance_._instance,
  &::_CMsgGCServerVersionUpdated_default_instance_._instance,
  &::_CMsgGCClientVersionUpdated_default_instance_._instance,
  &::_CMsgGCToGCWebAPIAccountChanged_default_instance_._instance,
  &::_CMsgExtractGems_default_instance_._instance,
  &::_CMsgExtractGemsResponse_default_instance_._instance,
  &::_CMsgAddSocket_default_instance_._instance,
  &::_CMsgAddSocketResponse_default_instance_._instance,
  &::_CMsgAddItemToSocketData_default_instance_._instance,
  &::_CMsgAddItemToSocket_default_instance_._instance,
  &::_CMsgAddItemToSocketResponse_default_instance_._instance,
  &::_CMsgResetStrangeGemCount_default_instance_._instance,
  &::_CMsgResetStrangeGemCountResponse_default_instance_._instance,
  &::_CMsgGCToClientPollFileRequest_default_instance_._instance,
  &::_CMsgGCToClientPollFileResponse_default_instance_._instance,
  &::_CMsgGCToGCPerformManualOp_default_instance_._instance,
  &::_CMsgGCToGCPerformManualOpCompleted_default_instance_._instance,
  &::_CMsgGCToGCReloadServerRegionSettings_default_instance_._instance,
  &::_CMsgGCAdditionalWelcomeMsgList_default_instance_._instance,
  &::_CMsgApplyRemoteConVars_ConVar_default_instance_._instance,
  &::_CMsgApplyRemoteConVars_default_instance_._instance,
  &::_CMsgGCToClientApplyRemoteConVars_default_instance_._instance,
  &::_CMsgGCToServerApplyRemoteConVars_default_instance_._instance,
  &::_CMsgClientToGCIntegrityStatus_keyvalue_default_instance_._instance,
  &::_CMsgClientToGCIntegrityStatus_default_instance_._instance,
  &::_CMsgClientToGCAggregateMetrics_SingleMetric_default_instance_._instance,
  &::_CMsgClientToGCAggregateMetrics_default_instance_._instance,
  &::_CMsgGCToClientAggregateMetricsBackoff_default_instance_._instance,
};

const char descriptor_table_protodef_base_5fgcmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025base_gcmessages.proto\032\023steammessages.p"
  "roto\032\026gcsdk_gcmessages.proto\"\232\001\n\035CGCStor"
  "ePurchaseInit_LineItem\022\023\n\013item_def_id\030\001 "
  "\001(\r\022\020\n\010quantity\030\002 \001(\r\022\036\n\026cost_in_local_c"
  "urrency\030\003 \001(\r\022\025\n\rpurchase_type\030\004 \001(\r\022\033\n\023"
  "source_reference_id\030\005 \001(\004\"\202\001\n\027CMsgGCStor"
  "ePurchaseInit\022\017\n\007country\030\001 \001(\t\022\020\n\010langua"
  "ge\030\002 \001(\005\022\020\n\010currency\030\003 \001(\005\0222\n\nline_items"
  "\030\004 \003(\0132\036.CGCStorePurchaseInit_LineItem\"A"
  "\n\037CMsgGCStorePurchaseInitResponse\022\016\n\006res"
  "ult\030\001 \001(\005\022\016\n\006txn_id\030\002 \001(\004\"\236\001\n\022CMsgClient"
  "PingData\022\027\n\013relay_codes\030\004 \003(\007B\002\020\001\022\027\n\013rel"
  "ay_pings\030\005 \003(\rB\002\020\001\022\030\n\014region_codes\030\010 \003(\r"
  "B\002\020\001\022\030\n\014region_pings\030\t \003(\rB\002\020\001\022\"\n\032region"
  "_ping_failed_bitmask\030\n \001(\r\"\210\001\n\021CMsgInvit"
  "eToParty\022\020\n\010steam_id\030\001 \001(\006\022\026\n\016client_ver"
  "sion\030\002 \001(\r\022\017\n\007team_id\030\003 \001(\r\022\020\n\010as_coach\030"
  "\004 \001(\010\022&\n\tping_data\030\005 \001(\0132\023.CMsgClientPin"
  "gData\"=\n\021CMsgInviteToLobby\022\020\n\010steam_id\030\001"
  " \001(\006\022\026\n\016client_version\030\002 \001(\r\"Q\n\025CMsgInvi"
  "tationCreated\022\020\n\010group_id\030\001 \001(\004\022\020\n\010steam"
  "_id\030\002 \001(\006\022\024\n\014user_offline\030\003 \001(\010\"{\n\027CMsgP"
  "artyInviteResponse\022\020\n\010party_id\030\001 \001(\004\022\016\n\006"
  "accept\030\002 \001(\010\022\026\n\016client_version\030\003 \001(\r\022&\n\t"
  "ping_data\030\010 \001(\0132\023.CMsgClientPingData\"\213\001\n"
  "\027CMsgLobbyInviteResponse\022\020\n\010lobby_id\030\001 \001"
  "(\006\022\016\n\006accept\030\002 \001(\010\022\026\n\016client_version\030\003 \001"
  "(\r\022\027\n\017custom_game_crc\030\006 \001(\006\022\035\n\025custom_ga"
  "me_timestamp\030\007 \001(\007\"%\n\021CMsgKickFromParty\022"
  "\020\n\010steam_id\030\001 \001(\006\"\020\n\016CMsgLeaveParty\"\242\001\n\033"
  "CMsgCustomGameInstallStatus\022M\n\006status\030\001 "
  "\001(\0162\031.ECustomGameInstallStatus:\"k_ECusto"
  "mGameInstallStatus_Unknown\022\017\n\007message\030\002 "
  "\001(\t\022#\n\033latest_timestamp_from_steam\030\003 \001(\007"
  "\"W\n\023CMsgServerAvailable\022@\n\032custom_game_i"
  "nstall_status\030\001 \001(\0132\034.CMsgCustomGameInst"
  "allStatus\"*\n\026CMsgLANServerAvailable\022\020\n\010l"
  "obby_id\030\001 \001(\006\"\252\002\n\030CSOEconGameAccountClie"
  "nt\022$\n\031additional_backpack_slots\030\001 \001(\r:\0010"
  "\022\034\n\rtrial_account\030\002 \001(\010:\005false\022&\n\030eligib"
  "le_for_online_play\030\003 \001(\010:\004true\022*\n\"need_t"
  "o_choose_most_helpful_friend\030\004 \001(\010\022\027\n\017in"
  "_coaches_list\030\005 \001(\010\022\034\n\024trade_ban_expirat"
  "ion\030\006 \001(\007\022\033\n\023duel_ban_expiration\030\007 \001(\007\022\""
  "\n\023made_first_purchase\030\t \001(\010:\005false\"J\n\024CM"
  "sgApplyStrangePart\022\034\n\024strange_part_item_"
  "id\030\001 \001(\004\022\024\n\014item_item_id\030\002 \001(\004\"K\n\027CMsgAp"
  "plyPennantUpgrade\022\027\n\017upgrade_item_id\030\001 \001"
  "(\004\022\027\n\017pennant_item_id\030\002 \001(\004\"C\n\023CMsgApply"
  "EggEssence\022\027\n\017essence_item_id\030\001 \001(\004\022\023\n\013e"
  "gg_item_id\030\002 \001(\004\"T\n\024CSOEconItemAttribute"
  "\022\030\n\tdef_index\030\001 \001(\r:\00565535\022\r\n\005value\030\002 \001("
  "\r\022\023\n\013value_bytes\030\003 \001(\014\":\n\023CSOEconItemEqu"
  "ipped\022\021\n\tnew_class\030\001 \001(\r\022\020\n\010new_slot\030\002 \001"
  "(\r\"\327\002\n\013CSOEconItem\022\n\n\002id\030\001 \001(\004\022\022\n\naccoun"
  "t_id\030\002 \001(\r\022\021\n\tinventory\030\003 \001(\r\022\021\n\tdef_ind"
  "ex\030\004 \001(\r\022\023\n\010quantity\030\005 \001(\r:\0011\022\020\n\005level\030\006"
  " \001(\r:\0011\022\022\n\007quality\030\007 \001(\r:\0014\022\020\n\005flags\030\010 \001"
  "(\r:\0010\022\021\n\006origin\030\t \001(\r:\0010\022(\n\tattribute\030\014 "
  "\003(\0132\025.CSOEconItemAttribute\022#\n\rinterior_i"
  "tem\030\r \001(\0132\014.CSOEconItem\022\020\n\005style\030\017 \001(\r:\001"
  "0\022\023\n\013original_id\030\020 \001(\004\022,\n\016equipped_state"
  "\030\022 \003(\0132\024.CSOEconItemEquipped\"\"\n\rCMsgSort"
  "Items\022\021\n\tsort_type\030\001 \001(\r\"\201\001\n\024CMsgItemAck"
  "nowledged\022\022\n\naccount_id\030\001 \001(\r\022\021\n\tinvento"
  "ry\030\002 \001(\r\022\021\n\tdef_index\030\003 \001(\r\022\017\n\007quality\030\004"
  " \001(\r\022\016\n\006rarity\030\005 \001(\r\022\016\n\006origin\030\006 \001(\r\"\205\001\n"
  "\024CMsgSetItemPositions\022:\n\016item_positions\030"
  "\001 \003(\0132\".CMsgSetItemPositions.ItemPositio"
  "n\0321\n\014ItemPosition\022\017\n\007item_id\030\001 \001(\004\022\020\n\010po"
  "sition\030\002 \001(\r\"+\n\031CMsgGCStorePurchaseCance"
  "l\022\016\n\006txn_id\030\001 \001(\004\"3\n!CMsgGCStorePurchase"
  "CancelResponse\022\016\n\006result\030\001 \001(\r\"-\n\033CMsgGC"
  "StorePurchaseFinalize\022\016\n\006txn_id\030\001 \001(\004\"G\n"
  "#CMsgGCStorePurchaseFinalizeResponse\022\016\n\006"
  "result\030\001 \001(\r\022\020\n\010item_ids\030\002 \003(\004\"3\n\037CMsgGC"
  "ToGCBannedWordListUpdated\022\020\n\010group_id\030\001 "
  "\001(\r\"\?\n\027CMsgGCToGCDirtySDOCache\022\020\n\010sdo_ty"
  "pe\030\001 \001(\r\022\022\n\nkey_uint64\030\002 \001(\004\"\024\n\022CMsgSDON"
  "oMemcached\"/\n\033CMsgGCToGCUpdateSQLKeyValu"
  "e\022\020\n\010key_name\030\001 \001(\t\"4\n\032CMsgGCServerVersi"
  "onUpdated\022\026\n\016server_version\030\001 \001(\r\"4\n\032CMs"
  "gGCClientVersionUpdated\022\026\n\016client_versio"
  "n\030\001 \001(\r\" \n\036CMsgGCToGCWebAPIAccountChange"
  "d\"\\\n\017CMsgExtractGems\022\024\n\014tool_item_id\030\001 \001"
  "(\004\022\024\n\014item_item_id\030\002 \001(\004\022\035\n\016item_socket_"
  "id\030\003 \001(\r:\00565535\"\324\002\n\027CMsgExtractGemsRespo"
  "nse\022\017\n\007item_id\030\001 \001(\004\022P\n\010response\030\002 \001(\0162%"
  ".CMsgExtractGemsResponse.EExtractGems:\027k"
  "_ExtractGems_Succeeded\"\325\001\n\014EExtractGems\022"
  "\033\n\027k_ExtractGems_Succeeded\020\000\022&\n\"k_Extrac"
  "tGems_Failed_ToolIsInvalid\020\001\022&\n\"k_Extrac"
  "tGems_Failed_ItemIsInvalid\020\002\022,\n(k_Extrac"
  "tGems_Failed_ToolCannotRemoveGem\020\003\022*\n&k_"
  "ExtractGems_Failed_FailedToRemoveGem\020\004\"L"
  "\n\rCMsgAddSocket\022\024\n\014tool_item_id\030\001 \001(\004\022\024\n"
  "\014item_item_id\030\002 \001(\004\022\017\n\007unusual\030\003 \001(\010\"\271\002\n"
  "\025CMsgAddSocketResponse\022\017\n\007item_id\030\001 \001(\004\022"
  "\034\n\024updated_socket_index\030\002 \003(\r\022J\n\010respons"
  "e\030\003 \001(\0162!.CMsgAddSocketResponse.EAddSock"
  "et:\025k_AddSocket_Succeeded\"\244\001\n\nEAddSocket"
  "\022\031\n\025k_AddSocket_Succeeded\020\000\022$\n k_AddSock"
  "et_Failed_ToolIsInvalid\020\001\022+\n\'k_AddSocket"
  "_Failed_ItemCannotBeSocketed\020\002\022(\n$k_AddS"
  "ocket_Failed_FailedToAddSocket\020\003\"K\n\027CMsg"
  "AddItemToSocketData\022\023\n\013gem_item_id\030\001 \001(\004"
  "\022\033\n\014socket_index\030\002 \001(\r:\00565535\"]\n\023CMsgAdd"
  "ItemToSocket\022\024\n\014item_item_id\030\001 \001(\004\0220\n\016ge"
  "ms_to_socket\030\002 \003(\0132\030.CMsgAddItemToSocket"
  "Data\"\337\003\n\033CMsgAddItemToSocketResponse\022\024\n\014"
  "item_item_id\030\001 \001(\004\022\034\n\024updated_socket_ind"
  "ex\030\002 \003(\r\022J\n\010response\030\003 \001(\0162$.CMsgAddItem"
  "ToSocketResponse.EAddGem:\022k_AddGem_Succe"
  "eded\"\277\002\n\007EAddGem\022\026\n\022k_AddGem_Succeeded\020\000"
  "\022 \n\034k_AddGem_Failed_GemIsInvalid\020\001\022!\n\035k_"
  "AddGem_Failed_ItemIsInvalid\020\002\022\"\n\036k_AddGe"
  "m_Failed_FailedToAddGem\020\003\022+\n\'k_AddGem_Fa"
  "iled_InvalidGemTypeForSocket\020\004\022)\n%k_AddG"
  "em_Failed_InvalidGemTypeForHero\020\005\022)\n%k_A"
  "ddGem_Failed_InvalidGemTypeForSlot\020\006\0220\n,"
  "k_AddGem_Failed_SocketContainsUnremovabl"
  "eGem\020\007\"M\n\030CMsgResetStrangeGemCount\022\024\n\014it"
  "em_item_id\030\001 \001(\004\022\033\n\014socket_index\030\002 \001(\r:\005"
  "65535\"\276\002\n CMsgResetStrangeGemCountRespon"
  "se\022S\n\010response\030\001 \001(\0162+.CMsgResetStrangeG"
  "emCountResponse.EResetGem:\024k_ResetGem_Su"
  "cceeded\"\304\001\n\tEResetGem\022\030\n\024k_ResetGem_Succ"
  "eeded\020\000\022&\n\"k_ResetGem_Failed_FailedToRes"
  "etGem\020\001\022#\n\037k_ResetGem_Failed_ItemIsInval"
  "id\020\002\022%\n!k_ResetGem_Failed_InvalidSocketI"
  "d\020\003\022)\n%k_ResetGem_Failed_SocketCannotBeR"
  "eset\020\004\"[\n\035CMsgGCToClientPollFileRequest\022"
  "\021\n\tfile_name\030\001 \001(\t\022\026\n\016client_version\030\002 \001"
  "(\r\022\017\n\007poll_id\030\003 \001(\r\"V\n\036CMsgGCToClientPol"
  "lFileResponse\022\017\n\007poll_id\030\001 \001(\r\022\021\n\tfile_s"
  "ize\030\002 \001(\r\022\020\n\010file_crc\030\003 \001(\r\">\n\031CMsgGCToG"
  "CPerformManualOp\022\r\n\005op_id\030\001 \001(\004\022\022\n\ngroup"
  "_code\030\002 \001(\r\"L\n\"CMsgGCToGCPerformManualOp"
  "Completed\022\017\n\007success\030\001 \001(\010\022\025\n\tsource_gc\030"
  "\002 \001(\005:\002-1\"&\n$CMsgGCToGCReloadServerRegio"
  "nSettings\"K\n\036CMsgGCAdditionalWelcomeMsgL"
  "ist\022)\n\020welcome_messages\030\001 \003(\0132\017.CExtraMs"
  "gBlock\"\320\001\n\026CMsgApplyRemoteConVars\0220\n\010con"
  "_vars\030\001 \003(\0132\036.CMsgApplyRemoteConVars.Con"
  "Var\032\203\001\n\006ConVar\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 "
  "\001(\t\022\023\n\013version_min\030\003 \001(\r\022\023\n\013version_max\030"
  "\004 \001(\r\0222\n\010platform\030\005 \001(\0162\014.EGCPlatform:\022k"
  "_eGCPlatform_None\"H\n CMsgGCToClientApply"
  "RemoteConVars\022$\n\003msg\030\001 \001(\0132\027.CMsgApplyRe"
  "moteConVars\"H\n CMsgGCToServerApplyRemote"
  "ConVars\022$\n\003msg\030\001 \001(\0132\027.CMsgApplyRemoteCo"
  "nVars\"\324\001\n\035CMsgClientToGCIntegrityStatus\022"
  "\016\n\006report\030\001 \001(\t\022\026\n\016secure_allowed\030\002 \001(\010\022"
  "<\n\013diagnostics\030\003 \003(\0132\'.CMsgClientToGCInt"
  "egrityStatus.keyvalue\032M\n\010keyvalue\022\n\n\002id\030"
  "\001 \001(\r\022\020\n\010extended\030\002 \001(\r\022\r\n\005value\030\003 \001(\004\022\024"
  "\n\014string_value\030\004 \001(\t\"\232\001\n\036CMsgClientToGCA"
  "ggregateMetrics\022=\n\007metrics\030\001 \003(\0132,.CMsgC"
  "lientToGCAggregateMetrics.SingleMetric\0329"
  "\n\014SingleMetric\022\023\n\013metric_name\030\001 \001(\t\022\024\n\014m"
  "etric_count\030\002 \001(\r\"E\n%CMsgGCToClientAggre"
  "gateMetricsBackoff\022\034\n\024upload_rate_modifi"
  "er\030\001 \001(\002*\230\006\n\nEGCBaseMsg\022\032\n\025k_EMsgGCInvit"
  "eToParty\020\225#\022\036\n\031k_EMsgGCInvitationCreated"
  "\020\226#\022 \n\033k_EMsgGCPartyInviteResponse\020\227#\022\032\n"
  "\025k_EMsgGCKickFromParty\020\230#\022\027\n\022k_EMsgGCLea"
  "veParty\020\231#\022\034\n\027k_EMsgGCServerAvailable\020\232#"
  "\022\"\n\035k_EMsgGCClientConnectToServer\020\233#\022\033\n\026"
  "k_EMsgGCGameServerInfo\020\234#\022\037\n\032k_EMsgGCLAN"
  "ServerAvailable\020\237#\022\032\n\025k_EMsgGCInviteToLo"
  "bby\020\240#\022 \n\033k_EMsgGCLobbyInviteResponse\020\241#"
  "\022$\n\037k_EMsgGCToClientPollFileRequest\020\242#\022%"
  "\n k_EMsgGCToClientPollFileResponse\020\243#\022 \n"
  "\033k_EMsgGCToGCPerformManualOp\020\244#\022)\n$k_EMs"
  "gGCToGCPerformManualOpCompleted\020\245#\022+\n&k_"
  "EMsgGCToGCReloadServerRegionSettings\020\246#\022"
  "%\n k_EMsgGCAdditionalWelcomeMsgList\020\247#\022\'"
  "\n\"k_EMsgGCToClientApplyRemoteConVars\020\250#\022"
  "\'\n\"k_EMsgGCToServerApplyRemoteConVars\020\251#"
  "\022$\n\037k_EMsgClientToGCIntegrityStatus\020\252#\022%"
  "\n k_EMsgClientToGCAggregateMetrics\020\253#\022,\n"
  "\'k_EMsgGCToClientAggregateMetricsBackoff"
  "\020\254#*\350\003\n\030ECustomGameInstallStatus\022&\n\"k_EC"
  "ustomGameInstallStatus_Unknown\020\000\022$\n k_EC"
  "ustomGameInstallStatus_Ready\020\001\022#\n\037k_ECus"
  "tomGameInstallStatus_Busy\020\002\022,\n(k_ECustom"
  "GameInstallStatus_FailedGeneric\020e\0222\n.k_E"
  "CustomGameInstallStatus_FailedInternalEr"
  "ror\020f\0227\n3k_ECustomGameInstallStatus_Requ"
  "estedTimestampTooOld\020g\0227\n3k_ECustomGameI"
  "nstallStatus_RequestedTimestampTooNew\020h\022"
  "*\n&k_ECustomGameInstallStatus_CRCMismatc"
  "h\020i\022*\n&k_ECustomGameInstallStatus_Failed"
  "Steam\020j\022-\n)k_ECustomGameInstallStatus_Fa"
  "iledCanceled\020k"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_base_5fgcmessages_2eproto_deps[2] = {
  &::descriptor_table_gcsdk_5fgcmessages_2eproto,
  &::descriptor_table_steammessages_2eproto,
};
static ::_pbi::once_flag descriptor_table_base_5fgcmessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_base_5fgcmessages_2eproto = {
    false, false, 7774, descriptor_table_protodef_base_5fgcmessages_2eproto,
    "base_gcmessages.proto",
    &descriptor_table_base_5fgcmessages_2eproto_once, descriptor_table_base_5fgcmessages_2eproto_deps, 2, 60,
    schemas, file_default_instances, TableStruct_base_5fgcmessages_2eproto::offsets,
    file_level_metadata_base_5fgcmessages_2eproto, file_level_enum_descriptors_base_5fgcmessages_2eproto,
    file_level_service_descriptors_base_5fgcmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_base_5fgcmessages_2eproto_getter() {
  return &descriptor_table_base_5fgcmessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_base_5fgcmessages_2eproto(&descriptor_table_base_5fgcmessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgExtractGemsResponse_EExtractGems_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[0];
}
bool CMsgExtractGemsResponse_EExtractGems_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::k_ExtractGems_Succeeded;
constexpr CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::k_ExtractGems_Failed_ToolIsInvalid;
constexpr CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::k_ExtractGems_Failed_ItemIsInvalid;
constexpr CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::k_ExtractGems_Failed_ToolCannotRemoveGem;
constexpr CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::k_ExtractGems_Failed_FailedToRemoveGem;
constexpr CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::EExtractGems_MIN;
constexpr CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::EExtractGems_MAX;
constexpr int CMsgExtractGemsResponse::EExtractGems_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgAddSocketResponse_EAddSocket_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[1];
}
bool CMsgAddSocketResponse_EAddSocket_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::k_AddSocket_Succeeded;
constexpr CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::k_AddSocket_Failed_ToolIsInvalid;
constexpr CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::k_AddSocket_Failed_ItemCannotBeSocketed;
constexpr CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::k_AddSocket_Failed_FailedToAddSocket;
constexpr CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::EAddSocket_MIN;
constexpr CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::EAddSocket_MAX;
constexpr int CMsgAddSocketResponse::EAddSocket_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgAddItemToSocketResponse_EAddGem_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[2];
}
bool CMsgAddItemToSocketResponse_EAddGem_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Succeeded;
constexpr CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_GemIsInvalid;
constexpr CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_ItemIsInvalid;
constexpr CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_FailedToAddGem;
constexpr CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_InvalidGemTypeForSocket;
constexpr CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_InvalidGemTypeForHero;
constexpr CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_InvalidGemTypeForSlot;
constexpr CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_SocketContainsUnremovableGem;
constexpr CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::EAddGem_MIN;
constexpr CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::EAddGem_MAX;
constexpr int CMsgAddItemToSocketResponse::EAddGem_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgResetStrangeGemCountResponse_EResetGem_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[3];
}
bool CMsgResetStrangeGemCountResponse_EResetGem_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::k_ResetGem_Succeeded;
constexpr CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::k_ResetGem_Failed_FailedToResetGem;
constexpr CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::k_ResetGem_Failed_ItemIsInvalid;
constexpr CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::k_ResetGem_Failed_InvalidSocketId;
constexpr CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::k_ResetGem_Failed_SocketCannotBeReset;
constexpr CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::EResetGem_MIN;
constexpr CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::EResetGem_MAX;
constexpr int CMsgResetStrangeGemCountResponse::EResetGem_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCBaseMsg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[4];
}
bool EGCBaseMsg_IsValid(int value) {
  switch (value) {
    case 4501:
    case 4502:
    case 4503:
    case 4504:
    case 4505:
    case 4506:
    case 4507:
    case 4508:
    case 4511:
    case 4512:
    case 4513:
    case 4514:
    case 4515:
    case 4516:
    case 4517:
    case 4518:
    case 4519:
    case 4520:
    case 4521:
    case 4522:
    case 4523:
    case 4524:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECustomGameInstallStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[5];
}
bool ECustomGameInstallStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CGCStorePurchaseInit_LineItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCStorePurchaseInit_LineItem>()._impl_._has_bits_);
  static void set_has_item_def_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cost_in_local_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_purchase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_source_reference_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CGCStorePurchaseInit_LineItem::CGCStorePurchaseInit_LineItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CGCStorePurchaseInit_LineItem)
}
CGCStorePurchaseInit_LineItem::CGCStorePurchaseInit_LineItem(const CGCStorePurchaseInit_LineItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCStorePurchaseInit_LineItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_def_id_){}
    , decltype(_impl_.quantity_){}
    , decltype(_impl_.cost_in_local_currency_){}
    , decltype(_impl_.purchase_type_){}
    , decltype(_impl_.source_reference_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_def_id_, &from._impl_.item_def_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.source_reference_id_) -
    reinterpret_cast<char*>(&_impl_.item_def_id_)) + sizeof(_impl_.source_reference_id_));
  // @@protoc_insertion_point(copy_constructor:CGCStorePurchaseInit_LineItem)
}

inline void CGCStorePurchaseInit_LineItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_def_id_){0u}
    , decltype(_impl_.quantity_){0u}
    , decltype(_impl_.cost_in_local_currency_){0u}
    , decltype(_impl_.purchase_type_){0u}
    , decltype(_impl_.source_reference_id_){uint64_t{0u}}
  };
}

CGCStorePurchaseInit_LineItem::~CGCStorePurchaseInit_LineItem() {
  // @@protoc_insertion_point(destructor:CGCStorePurchaseInit_LineItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCStorePurchaseInit_LineItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCStorePurchaseInit_LineItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCStorePurchaseInit_LineItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCStorePurchaseInit_LineItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.item_def_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.source_reference_id_) -
        reinterpret_cast<char*>(&_impl_.item_def_id_)) + sizeof(_impl_.source_reference_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCStorePurchaseInit_LineItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 item_def_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_def_id(&has_bits);
          _impl_.item_def_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_quantity(&has_bits);
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cost_in_local_currency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_cost_in_local_currency(&has_bits);
          _impl_.cost_in_local_currency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 purchase_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_purchase_type(&has_bits);
          _impl_.purchase_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 source_reference_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_source_reference_id(&has_bits);
          _impl_.source_reference_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCStorePurchaseInit_LineItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCStorePurchaseInit_LineItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 item_def_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def_id(), target);
  }

  // optional uint32 quantity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quantity(), target);
  }

  // optional uint32 cost_in_local_currency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cost_in_local_currency(), target);
  }

  // optional uint32 purchase_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_purchase_type(), target);
  }

  // optional uint64 source_reference_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_source_reference_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCStorePurchaseInit_LineItem)
  return target;
}

size_t CGCStorePurchaseInit_LineItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCStorePurchaseInit_LineItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 item_def_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_def_id());
    }

    // optional uint32 quantity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quantity());
    }

    // optional uint32 cost_in_local_currency = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cost_in_local_currency());
    }

    // optional uint32 purchase_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_purchase_type());
    }

    // optional uint64 source_reference_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_source_reference_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCStorePurchaseInit_LineItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCStorePurchaseInit_LineItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCStorePurchaseInit_LineItem::GetClassData() const { return &_class_data_; }


void CGCStorePurchaseInit_LineItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCStorePurchaseInit_LineItem*>(&to_msg);
  auto& from = static_cast<const CGCStorePurchaseInit_LineItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCStorePurchaseInit_LineItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_def_id_ = from._impl_.item_def_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.quantity_ = from._impl_.quantity_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.cost_in_local_currency_ = from._impl_.cost_in_local_currency_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.purchase_type_ = from._impl_.purchase_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.source_reference_id_ = from._impl_.source_reference_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCStorePurchaseInit_LineItem::CopyFrom(const CGCStorePurchaseInit_LineItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCStorePurchaseInit_LineItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCStorePurchaseInit_LineItem::IsInitialized() const {
  return true;
}

void CGCStorePurchaseInit_LineItem::InternalSwap(CGCStorePurchaseInit_LineItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCStorePurchaseInit_LineItem, _impl_.source_reference_id_)
      + sizeof(CGCStorePurchaseInit_LineItem::_impl_.source_reference_id_)
      - PROTOBUF_FIELD_OFFSET(CGCStorePurchaseInit_LineItem, _impl_.item_def_id_)>(
          reinterpret_cast<char*>(&_impl_.item_def_id_),
          reinterpret_cast<char*>(&other->_impl_.item_def_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCStorePurchaseInit_LineItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[0]);
}

// ===================================================================

class CMsgGCStorePurchaseInit::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCStorePurchaseInit>()._impl_._has_bits_);
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCStorePurchaseInit::CMsgGCStorePurchaseInit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCStorePurchaseInit)
}
CMsgGCStorePurchaseInit::CMsgGCStorePurchaseInit(const CMsgGCStorePurchaseInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCStorePurchaseInit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.line_items_){from._impl_.line_items_}
    , decltype(_impl_.country_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.currency_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.language_, &from._impl_.language_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.currency_) -
    reinterpret_cast<char*>(&_impl_.language_)) + sizeof(_impl_.currency_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCStorePurchaseInit)
}

inline void CMsgGCStorePurchaseInit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.line_items_){arena}
    , decltype(_impl_.country_){}
    , decltype(_impl_.language_){0}
    , decltype(_impl_.currency_){0}
  };
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCStorePurchaseInit::~CMsgGCStorePurchaseInit() {
  // @@protoc_insertion_point(destructor:CMsgGCStorePurchaseInit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCStorePurchaseInit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.line_items_.~RepeatedPtrField();
  _impl_.country_.Destroy();
}

void CMsgGCStorePurchaseInit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCStorePurchaseInit::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCStorePurchaseInit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.line_items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.country_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.language_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.currency_) -
        reinterpret_cast<char*>(&_impl_.language_)) + sizeof(_impl_.currency_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCStorePurchaseInit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string country = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCStorePurchaseInit.country");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_language(&has_bits);
          _impl_.language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 currency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_currency(&has_bits);
          _impl_.currency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CGCStorePurchaseInit_LineItem line_items = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_line_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCStorePurchaseInit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCStorePurchaseInit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string country = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCStorePurchaseInit.country");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_country(), target);
  }

  // optional int32 language = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_language(), target);
  }

  // optional int32 currency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_currency(), target);
  }

  // repeated .CGCStorePurchaseInit_LineItem line_items = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_line_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_line_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCStorePurchaseInit)
  return target;
}

size_t CMsgGCStorePurchaseInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCStorePurchaseInit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGCStorePurchaseInit_LineItem line_items = 4;
  total_size += 1UL * this->_internal_line_items_size();
  for (const auto& msg : this->_impl_.line_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string country = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country());
    }

    // optional int32 language = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_language());
    }

    // optional int32 currency = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currency());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCStorePurchaseInit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCStorePurchaseInit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCStorePurchaseInit::GetClassData() const { return &_class_data_; }


void CMsgGCStorePurchaseInit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCStorePurchaseInit*>(&to_msg);
  auto& from = static_cast<const CMsgGCStorePurchaseInit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCStorePurchaseInit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.line_items_.MergeFrom(from._impl_.line_items_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_country(from._internal_country());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.language_ = from._impl_.language_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.currency_ = from._impl_.currency_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCStorePurchaseInit::CopyFrom(const CMsgGCStorePurchaseInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCStorePurchaseInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseInit::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseInit::InternalSwap(CMsgGCStorePurchaseInit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.line_items_.InternalSwap(&other->_impl_.line_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCStorePurchaseInit, _impl_.currency_)
      + sizeof(CMsgGCStorePurchaseInit::_impl_.currency_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCStorePurchaseInit, _impl_.language_)>(
          reinterpret_cast<char*>(&_impl_.language_),
          reinterpret_cast<char*>(&other->_impl_.language_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCStorePurchaseInit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[1]);
}

// ===================================================================

class CMsgGCStorePurchaseInitResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCStorePurchaseInitResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_txn_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCStorePurchaseInitResponse::CMsgGCStorePurchaseInitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCStorePurchaseInitResponse)
}
CMsgGCStorePurchaseInitResponse::CMsgGCStorePurchaseInitResponse(const CMsgGCStorePurchaseInitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCStorePurchaseInitResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.txn_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.txn_id_, &from._impl_.txn_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.txn_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCStorePurchaseInitResponse)
}

inline void CMsgGCStorePurchaseInitResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.txn_id_){uint64_t{0u}}
    , decltype(_impl_.result_){0}
  };
}

CMsgGCStorePurchaseInitResponse::~CMsgGCStorePurchaseInitResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCStorePurchaseInitResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCStorePurchaseInitResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCStorePurchaseInitResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCStorePurchaseInitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCStorePurchaseInitResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.txn_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.txn_id_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCStorePurchaseInitResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 txn_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_txn_id(&has_bits);
          _impl_.txn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCStorePurchaseInitResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCStorePurchaseInitResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // optional uint64 txn_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_txn_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCStorePurchaseInitResponse)
  return target;
}

size_t CMsgGCStorePurchaseInitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCStorePurchaseInitResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 txn_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_txn_id());
    }

    // optional int32 result = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCStorePurchaseInitResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCStorePurchaseInitResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCStorePurchaseInitResponse::GetClassData() const { return &_class_data_; }


void CMsgGCStorePurchaseInitResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCStorePurchaseInitResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCStorePurchaseInitResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCStorePurchaseInitResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.txn_id_ = from._impl_.txn_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCStorePurchaseInitResponse::CopyFrom(const CMsgGCStorePurchaseInitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCStorePurchaseInitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseInitResponse::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseInitResponse::InternalSwap(CMsgGCStorePurchaseInitResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCStorePurchaseInitResponse, _impl_.result_)
      + sizeof(CMsgGCStorePurchaseInitResponse::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCStorePurchaseInitResponse, _impl_.txn_id_)>(
          reinterpret_cast<char*>(&_impl_.txn_id_),
          reinterpret_cast<char*>(&other->_impl_.txn_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCStorePurchaseInitResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[2]);
}

// ===================================================================

class CMsgClientPingData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPingData>()._impl_._has_bits_);
  static void set_has_region_ping_failed_bitmask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientPingData::CMsgClientPingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientPingData)
}
CMsgClientPingData::CMsgClientPingData(const CMsgClientPingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientPingData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.relay_codes_){from._impl_.relay_codes_}
    , decltype(_impl_.relay_pings_){from._impl_.relay_pings_}
    , /*decltype(_impl_._relay_pings_cached_byte_size_)*/{0}
    , decltype(_impl_.region_codes_){from._impl_.region_codes_}
    , /*decltype(_impl_._region_codes_cached_byte_size_)*/{0}
    , decltype(_impl_.region_pings_){from._impl_.region_pings_}
    , /*decltype(_impl_._region_pings_cached_byte_size_)*/{0}
    , decltype(_impl_.region_ping_failed_bitmask_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.region_ping_failed_bitmask_ = from._impl_.region_ping_failed_bitmask_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientPingData)
}

inline void CMsgClientPingData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.relay_codes_){arena}
    , decltype(_impl_.relay_pings_){arena}
    , /*decltype(_impl_._relay_pings_cached_byte_size_)*/{0}
    , decltype(_impl_.region_codes_){arena}
    , /*decltype(_impl_._region_codes_cached_byte_size_)*/{0}
    , decltype(_impl_.region_pings_){arena}
    , /*decltype(_impl_._region_pings_cached_byte_size_)*/{0}
    , decltype(_impl_.region_ping_failed_bitmask_){0u}
  };
}

CMsgClientPingData::~CMsgClientPingData() {
  // @@protoc_insertion_point(destructor:CMsgClientPingData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientPingData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.relay_codes_.~RepeatedField();
  _impl_.relay_pings_.~RepeatedField();
  _impl_.region_codes_.~RepeatedField();
  _impl_.region_pings_.~RepeatedField();
}

void CMsgClientPingData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientPingData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPingData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.relay_codes_.Clear();
  _impl_.relay_pings_.Clear();
  _impl_.region_codes_.Clear();
  _impl_.region_pings_.Clear();
  _impl_.region_ping_failed_bitmask_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPingData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed32 relay_codes = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_relay_codes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 37) {
          _internal_add_relay_codes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 relay_pings = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_relay_pings(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_relay_pings(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 region_codes = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_region_codes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_region_codes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 region_pings = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_region_pings(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_region_pings(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 region_ping_failed_bitmask = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_region_ping_failed_bitmask(&has_bits);
          _impl_.region_ping_failed_bitmask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPingData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPingData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 relay_codes = 4 [packed = true];
  if (this->_internal_relay_codes_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_relay_codes(), target);
  }

  // repeated uint32 relay_pings = 5 [packed = true];
  {
    int byte_size = _impl_._relay_pings_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_relay_pings(), byte_size, target);
    }
  }

  // repeated uint32 region_codes = 8 [packed = true];
  {
    int byte_size = _impl_._region_codes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_region_codes(), byte_size, target);
    }
  }

  // repeated uint32 region_pings = 9 [packed = true];
  {
    int byte_size = _impl_._region_pings_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          9, _internal_region_pings(), byte_size, target);
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 region_ping_failed_bitmask = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_region_ping_failed_bitmask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPingData)
  return target;
}

size_t CMsgClientPingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPingData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 relay_codes = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_relay_codes_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated uint32 relay_pings = 5 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.relay_pings_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._relay_pings_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 region_codes = 8 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.region_codes_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._region_codes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 region_pings = 9 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.region_pings_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._region_pings_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint32 region_ping_failed_bitmask = 10;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_region_ping_failed_bitmask());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPingData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientPingData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPingData::GetClassData() const { return &_class_data_; }


void CMsgClientPingData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientPingData*>(&to_msg);
  auto& from = static_cast<const CMsgClientPingData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPingData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.relay_codes_.MergeFrom(from._impl_.relay_codes_);
  _this->_impl_.relay_pings_.MergeFrom(from._impl_.relay_pings_);
  _this->_impl_.region_codes_.MergeFrom(from._impl_.region_codes_);
  _this->_impl_.region_pings_.MergeFrom(from._impl_.region_pings_);
  if (from._internal_has_region_ping_failed_bitmask()) {
    _this->_internal_set_region_ping_failed_bitmask(from._internal_region_ping_failed_bitmask());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPingData::CopyFrom(const CMsgClientPingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPingData::IsInitialized() const {
  return true;
}

void CMsgClientPingData::InternalSwap(CMsgClientPingData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.relay_codes_.InternalSwap(&other->_impl_.relay_codes_);
  _impl_.relay_pings_.InternalSwap(&other->_impl_.relay_pings_);
  _impl_.region_codes_.InternalSwap(&other->_impl_.region_codes_);
  _impl_.region_pings_.InternalSwap(&other->_impl_.region_pings_);
  swap(_impl_.region_ping_failed_bitmask_, other->_impl_.region_ping_failed_bitmask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPingData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[3]);
}

// ===================================================================

class CMsgInviteToParty::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgInviteToParty>()._impl_._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_as_coach(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgClientPingData& ping_data(const CMsgInviteToParty* msg);
  static void set_has_ping_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgClientPingData&
CMsgInviteToParty::_Internal::ping_data(const CMsgInviteToParty* msg) {
  return *msg->_impl_.ping_data_;
}
CMsgInviteToParty::CMsgInviteToParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgInviteToParty)
}
CMsgInviteToParty::CMsgInviteToParty(const CMsgInviteToParty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgInviteToParty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_data_){nullptr}
    , decltype(_impl_.steam_id_){}
    , decltype(_impl_.client_version_){}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.as_coach_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ping_data()) {
    _this->_impl_.ping_data_ = new ::CMsgClientPingData(*from._impl_.ping_data_);
  }
  ::memcpy(&_impl_.steam_id_, &from._impl_.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.as_coach_) -
    reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.as_coach_));
  // @@protoc_insertion_point(copy_constructor:CMsgInviteToParty)
}

inline void CMsgInviteToParty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_data_){nullptr}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
    , decltype(_impl_.client_version_){0u}
    , decltype(_impl_.team_id_){0u}
    , decltype(_impl_.as_coach_){false}
  };
}

CMsgInviteToParty::~CMsgInviteToParty() {
  // @@protoc_insertion_point(destructor:CMsgInviteToParty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgInviteToParty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ping_data_;
}

void CMsgInviteToParty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgInviteToParty::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgInviteToParty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.ping_data_ != nullptr);
    _impl_.ping_data_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.as_coach_) -
        reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.as_coach_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgInviteToParty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client_version(&has_bits);
          _impl_.client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool as_coach = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_as_coach(&has_bits);
          _impl_.as_coach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgClientPingData ping_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgInviteToParty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgInviteToParty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_version(), target);
  }

  // optional uint32 team_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_team_id(), target);
  }

  // optional bool as_coach = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_as_coach(), target);
  }

  // optional .CMsgClientPingData ping_data = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::ping_data(this),
        _Internal::ping_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgInviteToParty)
  return target;
}

size_t CMsgInviteToParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgInviteToParty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgClientPingData ping_data = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ping_data_);
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_version());
    }

    // optional uint32 team_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

    // optional bool as_coach = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgInviteToParty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgInviteToParty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgInviteToParty::GetClassData() const { return &_class_data_; }


void CMsgInviteToParty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgInviteToParty*>(&to_msg);
  auto& from = static_cast<const CMsgInviteToParty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgInviteToParty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ping_data()->::CMsgClientPingData::MergeFrom(
          from._internal_ping_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.client_version_ = from._impl_.client_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.as_coach_ = from._impl_.as_coach_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgInviteToParty::CopyFrom(const CMsgInviteToParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgInviteToParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgInviteToParty::IsInitialized() const {
  return true;
}

void CMsgInviteToParty::InternalSwap(CMsgInviteToParty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgInviteToParty, _impl_.as_coach_)
      + sizeof(CMsgInviteToParty::_impl_.as_coach_)
      - PROTOBUF_FIELD_OFFSET(CMsgInviteToParty, _impl_.ping_data_)>(
          reinterpret_cast<char*>(&_impl_.ping_data_),
          reinterpret_cast<char*>(&other->_impl_.ping_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgInviteToParty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[4]);
}

// ===================================================================

class CMsgInviteToLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgInviteToLobby>()._impl_._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgInviteToLobby::CMsgInviteToLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgInviteToLobby)
}
CMsgInviteToLobby::CMsgInviteToLobby(const CMsgInviteToLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgInviteToLobby* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steam_id_){}
    , decltype(_impl_.client_version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steam_id_, &from._impl_.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.client_version_) -
    reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.client_version_));
  // @@protoc_insertion_point(copy_constructor:CMsgInviteToLobby)
}

inline void CMsgInviteToLobby::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
    , decltype(_impl_.client_version_){0u}
  };
}

CMsgInviteToLobby::~CMsgInviteToLobby() {
  // @@protoc_insertion_point(destructor:CMsgInviteToLobby)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgInviteToLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgInviteToLobby::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgInviteToLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgInviteToLobby)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.client_version_) -
        reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.client_version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgInviteToLobby::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client_version(&has_bits);
          _impl_.client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgInviteToLobby::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgInviteToLobby)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgInviteToLobby)
  return target;
}

size_t CMsgInviteToLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgInviteToLobby)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgInviteToLobby::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgInviteToLobby::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgInviteToLobby::GetClassData() const { return &_class_data_; }


void CMsgInviteToLobby::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgInviteToLobby*>(&to_msg);
  auto& from = static_cast<const CMsgInviteToLobby&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgInviteToLobby)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.client_version_ = from._impl_.client_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgInviteToLobby::CopyFrom(const CMsgInviteToLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgInviteToLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgInviteToLobby::IsInitialized() const {
  return true;
}

void CMsgInviteToLobby::InternalSwap(CMsgInviteToLobby* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgInviteToLobby, _impl_.client_version_)
      + sizeof(CMsgInviteToLobby::_impl_.client_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgInviteToLobby, _impl_.steam_id_)>(
          reinterpret_cast<char*>(&_impl_.steam_id_),
          reinterpret_cast<char*>(&other->_impl_.steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgInviteToLobby::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[5]);
}

// ===================================================================

class CMsgInvitationCreated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgInvitationCreated>()._impl_._has_bits_);
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_offline(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgInvitationCreated::CMsgInvitationCreated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgInvitationCreated)
}
CMsgInvitationCreated::CMsgInvitationCreated(const CMsgInvitationCreated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgInvitationCreated* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.steam_id_){}
    , decltype(_impl_.user_offline_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.group_id_, &from._impl_.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_offline_) -
    reinterpret_cast<char*>(&_impl_.group_id_)) + sizeof(_impl_.user_offline_));
  // @@protoc_insertion_point(copy_constructor:CMsgInvitationCreated)
}

inline void CMsgInvitationCreated::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_id_){uint64_t{0u}}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
    , decltype(_impl_.user_offline_){false}
  };
}

CMsgInvitationCreated::~CMsgInvitationCreated() {
  // @@protoc_insertion_point(destructor:CMsgInvitationCreated)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgInvitationCreated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgInvitationCreated::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgInvitationCreated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgInvitationCreated)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.user_offline_) -
        reinterpret_cast<char*>(&_impl_.group_id_)) + sizeof(_impl_.user_offline_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgInvitationCreated::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool user_offline = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_offline(&has_bits);
          _impl_.user_offline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgInvitationCreated::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgInvitationCreated)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_group_id(), target);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id(), target);
  }

  // optional bool user_offline = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_user_offline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgInvitationCreated)
  return target;
}

size_t CMsgInvitationCreated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgInvitationCreated)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_group_id());
    }

    // optional fixed64 steam_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool user_offline = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgInvitationCreated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgInvitationCreated::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgInvitationCreated::GetClassData() const { return &_class_data_; }


void CMsgInvitationCreated::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgInvitationCreated*>(&to_msg);
  auto& from = static_cast<const CMsgInvitationCreated&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgInvitationCreated)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.user_offline_ = from._impl_.user_offline_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgInvitationCreated::CopyFrom(const CMsgInvitationCreated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgInvitationCreated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgInvitationCreated::IsInitialized() const {
  return true;
}

void CMsgInvitationCreated::InternalSwap(CMsgInvitationCreated* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgInvitationCreated, _impl_.user_offline_)
      + sizeof(CMsgInvitationCreated::_impl_.user_offline_)
      - PROTOBUF_FIELD_OFFSET(CMsgInvitationCreated, _impl_.group_id_)>(
          reinterpret_cast<char*>(&_impl_.group_id_),
          reinterpret_cast<char*>(&other->_impl_.group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgInvitationCreated::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[6]);
}

// ===================================================================

class CMsgPartyInviteResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartyInviteResponse>()._impl_._has_bits_);
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accept(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgClientPingData& ping_data(const CMsgPartyInviteResponse* msg);
  static void set_has_ping_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgClientPingData&
CMsgPartyInviteResponse::_Internal::ping_data(const CMsgPartyInviteResponse* msg) {
  return *msg->_impl_.ping_data_;
}
CMsgPartyInviteResponse::CMsgPartyInviteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyInviteResponse)
}
CMsgPartyInviteResponse::CMsgPartyInviteResponse(const CMsgPartyInviteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPartyInviteResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_data_){nullptr}
    , decltype(_impl_.party_id_){}
    , decltype(_impl_.accept_){}
    , decltype(_impl_.client_version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ping_data()) {
    _this->_impl_.ping_data_ = new ::CMsgClientPingData(*from._impl_.ping_data_);
  }
  ::memcpy(&_impl_.party_id_, &from._impl_.party_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.client_version_) -
    reinterpret_cast<char*>(&_impl_.party_id_)) + sizeof(_impl_.client_version_));
  // @@protoc_insertion_point(copy_constructor:CMsgPartyInviteResponse)
}

inline void CMsgPartyInviteResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_data_){nullptr}
    , decltype(_impl_.party_id_){uint64_t{0u}}
    , decltype(_impl_.accept_){false}
    , decltype(_impl_.client_version_){0u}
  };
}

CMsgPartyInviteResponse::~CMsgPartyInviteResponse() {
  // @@protoc_insertion_point(destructor:CMsgPartyInviteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPartyInviteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ping_data_;
}

void CMsgPartyInviteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPartyInviteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyInviteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.ping_data_ != nullptr);
    _impl_.ping_data_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.party_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.client_version_) -
        reinterpret_cast<char*>(&_impl_.party_id_)) + sizeof(_impl_.client_version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyInviteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_party_id(&has_bits);
          _impl_.party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool accept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_accept(&has_bits);
          _impl_.accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_client_version(&has_bits);
          _impl_.client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgClientPingData ping_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPartyInviteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyInviteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 party_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_party_id(), target);
  }

  // optional bool accept = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_accept(), target);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_client_version(), target);
  }

  // optional .CMsgClientPingData ping_data = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::ping_data(this),
        _Internal::ping_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyInviteResponse)
  return target;
}

size_t CMsgPartyInviteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyInviteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgClientPingData ping_data = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ping_data_);
    }

    // optional uint64 party_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_party_id());
    }

    // optional bool accept = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 client_version = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPartyInviteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPartyInviteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPartyInviteResponse::GetClassData() const { return &_class_data_; }


void CMsgPartyInviteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPartyInviteResponse*>(&to_msg);
  auto& from = static_cast<const CMsgPartyInviteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyInviteResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ping_data()->::CMsgClientPingData::MergeFrom(
          from._internal_ping_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.party_id_ = from._impl_.party_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.accept_ = from._impl_.accept_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.client_version_ = from._impl_.client_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPartyInviteResponse::CopyFrom(const CMsgPartyInviteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyInviteResponse::IsInitialized() const {
  return true;
}

void CMsgPartyInviteResponse::InternalSwap(CMsgPartyInviteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPartyInviteResponse, _impl_.client_version_)
      + sizeof(CMsgPartyInviteResponse::_impl_.client_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgPartyInviteResponse, _impl_.ping_data_)>(
          reinterpret_cast<char*>(&_impl_.ping_data_),
          reinterpret_cast<char*>(&other->_impl_.ping_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyInviteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[7]);
}

// ===================================================================

class CMsgLobbyInviteResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyInviteResponse>()._impl_._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accept(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_custom_game_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_custom_game_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgLobbyInviteResponse::CMsgLobbyInviteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyInviteResponse)
}
CMsgLobbyInviteResponse::CMsgLobbyInviteResponse(const CMsgLobbyInviteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLobbyInviteResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.accept_){}
    , decltype(_impl_.client_version_){}
    , decltype(_impl_.custom_game_crc_){}
    , decltype(_impl_.custom_game_timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lobby_id_, &from._impl_.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.custom_game_timestamp_) -
    reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.custom_game_timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyInviteResponse)
}

inline void CMsgLobbyInviteResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.accept_){false}
    , decltype(_impl_.client_version_){0u}
    , decltype(_impl_.custom_game_crc_){uint64_t{0u}}
    , decltype(_impl_.custom_game_timestamp_){0u}
  };
}

CMsgLobbyInviteResponse::~CMsgLobbyInviteResponse() {
  // @@protoc_insertion_point(destructor:CMsgLobbyInviteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLobbyInviteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgLobbyInviteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLobbyInviteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyInviteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.custom_game_timestamp_) -
        reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.custom_game_timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyInviteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool accept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_accept(&has_bits);
          _impl_.accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_client_version(&has_bits);
          _impl_.client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 custom_game_crc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_custom_game_crc(&has_bits);
          _impl_.custom_game_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 custom_game_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_custom_game_timestamp(&has_bits);
          _impl_.custom_game_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLobbyInviteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyInviteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_lobby_id(), target);
  }

  // optional bool accept = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_accept(), target);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_client_version(), target);
  }

  // optional fixed64 custom_game_crc = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(6, this->_internal_custom_game_crc(), target);
  }

  // optional fixed32 custom_game_timestamp = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(7, this->_internal_custom_game_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyInviteResponse)
  return target;
}

size_t CMsgLobbyInviteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyInviteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 lobby_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool accept = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 client_version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_version());
    }

    // optional fixed64 custom_game_crc = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional fixed32 custom_game_timestamp = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLobbyInviteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLobbyInviteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLobbyInviteResponse::GetClassData() const { return &_class_data_; }


void CMsgLobbyInviteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLobbyInviteResponse*>(&to_msg);
  auto& from = static_cast<const CMsgLobbyInviteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyInviteResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.accept_ = from._impl_.accept_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.client_version_ = from._impl_.client_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.custom_game_crc_ = from._impl_.custom_game_crc_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.custom_game_timestamp_ = from._impl_.custom_game_timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLobbyInviteResponse::CopyFrom(const CMsgLobbyInviteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyInviteResponse::IsInitialized() const {
  return true;
}

void CMsgLobbyInviteResponse::InternalSwap(CMsgLobbyInviteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLobbyInviteResponse, _impl_.custom_game_timestamp_)
      + sizeof(CMsgLobbyInviteResponse::_impl_.custom_game_timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgLobbyInviteResponse, _impl_.lobby_id_)>(
          reinterpret_cast<char*>(&_impl_.lobby_id_),
          reinterpret_cast<char*>(&other->_impl_.lobby_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyInviteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[8]);
}

// ===================================================================

class CMsgKickFromParty::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgKickFromParty>()._impl_._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgKickFromParty::CMsgKickFromParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgKickFromParty)
}
CMsgKickFromParty::CMsgKickFromParty(const CMsgKickFromParty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgKickFromParty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steam_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.steam_id_ = from._impl_.steam_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgKickFromParty)
}

inline void CMsgKickFromParty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
  };
}

CMsgKickFromParty::~CMsgKickFromParty() {
  // @@protoc_insertion_point(destructor:CMsgKickFromParty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgKickFromParty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgKickFromParty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgKickFromParty::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgKickFromParty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.steam_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgKickFromParty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgKickFromParty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgKickFromParty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgKickFromParty)
  return target;
}

size_t CMsgKickFromParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgKickFromParty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steam_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgKickFromParty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgKickFromParty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgKickFromParty::GetClassData() const { return &_class_data_; }


void CMsgKickFromParty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgKickFromParty*>(&to_msg);
  auto& from = static_cast<const CMsgKickFromParty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgKickFromParty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steam_id()) {
    _this->_internal_set_steam_id(from._internal_steam_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgKickFromParty::CopyFrom(const CMsgKickFromParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgKickFromParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKickFromParty::IsInitialized() const {
  return true;
}

void CMsgKickFromParty::InternalSwap(CMsgKickFromParty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.steam_id_, other->_impl_.steam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgKickFromParty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[9]);
}

// ===================================================================

class CMsgLeaveParty::_Internal {
 public:
};

CMsgLeaveParty::CMsgLeaveParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgLeaveParty)
}
CMsgLeaveParty::CMsgLeaveParty(const CMsgLeaveParty& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgLeaveParty* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgLeaveParty)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLeaveParty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLeaveParty::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgLeaveParty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[10]);
}

// ===================================================================

class CMsgCustomGameInstallStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCustomGameInstallStatus>()._impl_._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_latest_timestamp_from_steam(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgCustomGameInstallStatus::CMsgCustomGameInstallStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgCustomGameInstallStatus)
}
CMsgCustomGameInstallStatus::CMsgCustomGameInstallStatus(const CMsgCustomGameInstallStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgCustomGameInstallStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.latest_timestamp_from_steam_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.status_, &from._impl_.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.latest_timestamp_from_steam_) -
    reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.latest_timestamp_from_steam_));
  // @@protoc_insertion_point(copy_constructor:CMsgCustomGameInstallStatus)
}

inline void CMsgCustomGameInstallStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.latest_timestamp_from_steam_){0u}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgCustomGameInstallStatus::~CMsgCustomGameInstallStatus() {
  // @@protoc_insertion_point(destructor:CMsgCustomGameInstallStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgCustomGameInstallStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void CMsgCustomGameInstallStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgCustomGameInstallStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCustomGameInstallStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.latest_timestamp_from_steam_) -
        reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.latest_timestamp_from_steam_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCustomGameInstallStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ECustomGameInstallStatus status = 1 [default = k_ECustomGameInstallStatus_Unknown];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECustomGameInstallStatus_IsValid(val))) {
            _internal_set_status(static_cast<::ECustomGameInstallStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgCustomGameInstallStatus.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 latest_timestamp_from_steam = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_latest_timestamp_from_steam(&has_bits);
          _impl_.latest_timestamp_from_steam_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgCustomGameInstallStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCustomGameInstallStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .ECustomGameInstallStatus status = 1 [default = k_ECustomGameInstallStatus_Unknown];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgCustomGameInstallStatus.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // optional fixed32 latest_timestamp_from_steam = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(3, this->_internal_latest_timestamp_from_steam(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCustomGameInstallStatus)
  return target;
}

size_t CMsgCustomGameInstallStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCustomGameInstallStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional .ECustomGameInstallStatus status = 1 [default = k_ECustomGameInstallStatus_Unknown];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional fixed32 latest_timestamp_from_steam = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgCustomGameInstallStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgCustomGameInstallStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgCustomGameInstallStatus::GetClassData() const { return &_class_data_; }


void CMsgCustomGameInstallStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgCustomGameInstallStatus*>(&to_msg);
  auto& from = static_cast<const CMsgCustomGameInstallStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgCustomGameInstallStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.latest_timestamp_from_steam_ = from._impl_.latest_timestamp_from_steam_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgCustomGameInstallStatus::CopyFrom(const CMsgCustomGameInstallStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCustomGameInstallStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCustomGameInstallStatus::IsInitialized() const {
  return true;
}

void CMsgCustomGameInstallStatus::InternalSwap(CMsgCustomGameInstallStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgCustomGameInstallStatus, _impl_.latest_timestamp_from_steam_)
      + sizeof(CMsgCustomGameInstallStatus::_impl_.latest_timestamp_from_steam_)
      - PROTOBUF_FIELD_OFFSET(CMsgCustomGameInstallStatus, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCustomGameInstallStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[11]);
}

// ===================================================================

class CMsgServerAvailable::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerAvailable>()._impl_._has_bits_);
  static const ::CMsgCustomGameInstallStatus& custom_game_install_status(const CMsgServerAvailable* msg);
  static void set_has_custom_game_install_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgCustomGameInstallStatus&
CMsgServerAvailable::_Internal::custom_game_install_status(const CMsgServerAvailable* msg) {
  return *msg->_impl_.custom_game_install_status_;
}
CMsgServerAvailable::CMsgServerAvailable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerAvailable)
}
CMsgServerAvailable::CMsgServerAvailable(const CMsgServerAvailable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerAvailable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_game_install_status_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_custom_game_install_status()) {
    _this->_impl_.custom_game_install_status_ = new ::CMsgCustomGameInstallStatus(*from._impl_.custom_game_install_status_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgServerAvailable)
}

inline void CMsgServerAvailable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_game_install_status_){nullptr}
  };
}

CMsgServerAvailable::~CMsgServerAvailable() {
  // @@protoc_insertion_point(destructor:CMsgServerAvailable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerAvailable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.custom_game_install_status_;
}

void CMsgServerAvailable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerAvailable::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerAvailable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.custom_game_install_status_ != nullptr);
    _impl_.custom_game_install_status_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerAvailable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgCustomGameInstallStatus custom_game_install_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_game_install_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerAvailable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerAvailable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgCustomGameInstallStatus custom_game_install_status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::custom_game_install_status(this),
        _Internal::custom_game_install_status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerAvailable)
  return target;
}

size_t CMsgServerAvailable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerAvailable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgCustomGameInstallStatus custom_game_install_status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.custom_game_install_status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerAvailable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerAvailable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerAvailable::GetClassData() const { return &_class_data_; }


void CMsgServerAvailable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerAvailable*>(&to_msg);
  auto& from = static_cast<const CMsgServerAvailable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerAvailable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_custom_game_install_status()) {
    _this->_internal_mutable_custom_game_install_status()->::CMsgCustomGameInstallStatus::MergeFrom(
        from._internal_custom_game_install_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerAvailable::CopyFrom(const CMsgServerAvailable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerAvailable::IsInitialized() const {
  return true;
}

void CMsgServerAvailable::InternalSwap(CMsgServerAvailable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.custom_game_install_status_, other->_impl_.custom_game_install_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerAvailable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[12]);
}

// ===================================================================

class CMsgLANServerAvailable::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLANServerAvailable>()._impl_._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgLANServerAvailable::CMsgLANServerAvailable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLANServerAvailable)
}
CMsgLANServerAvailable::CMsgLANServerAvailable(const CMsgLANServerAvailable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLANServerAvailable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lobby_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgLANServerAvailable)
}

inline void CMsgLANServerAvailable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
  };
}

CMsgLANServerAvailable::~CMsgLANServerAvailable() {
  // @@protoc_insertion_point(destructor:CMsgLANServerAvailable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLANServerAvailable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgLANServerAvailable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLANServerAvailable::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLANServerAvailable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lobby_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLANServerAvailable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLANServerAvailable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLANServerAvailable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_lobby_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLANServerAvailable)
  return target;
}

size_t CMsgLANServerAvailable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLANServerAvailable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 lobby_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLANServerAvailable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLANServerAvailable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLANServerAvailable::GetClassData() const { return &_class_data_; }


void CMsgLANServerAvailable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLANServerAvailable*>(&to_msg);
  auto& from = static_cast<const CMsgLANServerAvailable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLANServerAvailable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lobby_id()) {
    _this->_internal_set_lobby_id(from._internal_lobby_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLANServerAvailable::CopyFrom(const CMsgLANServerAvailable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLANServerAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLANServerAvailable::IsInitialized() const {
  return true;
}

void CMsgLANServerAvailable::InternalSwap(CMsgLANServerAvailable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.lobby_id_, other->_impl_.lobby_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLANServerAvailable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[13]);
}

// ===================================================================

class CSOEconGameAccountClient::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconGameAccountClient>()._impl_._has_bits_);
  static void set_has_additional_backpack_slots(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trial_account(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eligible_for_online_play(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_need_to_choose_most_helpful_friend(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_in_coaches_list(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_trade_ban_expiration(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_duel_ban_expiration(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_made_first_purchase(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CSOEconGameAccountClient::CSOEconGameAccountClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSOEconGameAccountClient)
}
CSOEconGameAccountClient::CSOEconGameAccountClient(const CSOEconGameAccountClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSOEconGameAccountClient* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.additional_backpack_slots_){}
    , decltype(_impl_.trial_account_){}
    , decltype(_impl_.need_to_choose_most_helpful_friend_){}
    , decltype(_impl_.in_coaches_list_){}
    , decltype(_impl_.made_first_purchase_){}
    , decltype(_impl_.trade_ban_expiration_){}
    , decltype(_impl_.duel_ban_expiration_){}
    , decltype(_impl_.eligible_for_online_play_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.additional_backpack_slots_, &from._impl_.additional_backpack_slots_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.eligible_for_online_play_) -
    reinterpret_cast<char*>(&_impl_.additional_backpack_slots_)) + sizeof(_impl_.eligible_for_online_play_));
  // @@protoc_insertion_point(copy_constructor:CSOEconGameAccountClient)
}

inline void CSOEconGameAccountClient::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.additional_backpack_slots_){0u}
    , decltype(_impl_.trial_account_){false}
    , decltype(_impl_.need_to_choose_most_helpful_friend_){false}
    , decltype(_impl_.in_coaches_list_){false}
    , decltype(_impl_.made_first_purchase_){false}
    , decltype(_impl_.trade_ban_expiration_){0u}
    , decltype(_impl_.duel_ban_expiration_){0u}
    , decltype(_impl_.eligible_for_online_play_){true}
  };
}

CSOEconGameAccountClient::~CSOEconGameAccountClient() {
  // @@protoc_insertion_point(destructor:CSOEconGameAccountClient)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSOEconGameAccountClient::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOEconGameAccountClient::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSOEconGameAccountClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconGameAccountClient)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.additional_backpack_slots_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.duel_ban_expiration_) -
        reinterpret_cast<char*>(&_impl_.additional_backpack_slots_)) + sizeof(_impl_.duel_ban_expiration_));
    _impl_.eligible_for_online_play_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconGameAccountClient::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 additional_backpack_slots = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_additional_backpack_slots(&has_bits);
          _impl_.additional_backpack_slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool trial_account = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_trial_account(&has_bits);
          _impl_.trial_account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool eligible_for_online_play = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_eligible_for_online_play(&has_bits);
          _impl_.eligible_for_online_play_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool need_to_choose_most_helpful_friend = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_need_to_choose_most_helpful_friend(&has_bits);
          _impl_.need_to_choose_most_helpful_friend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool in_coaches_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_in_coaches_list(&has_bits);
          _impl_.in_coaches_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 trade_ban_expiration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_trade_ban_expiration(&has_bits);
          _impl_.trade_ban_expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 duel_ban_expiration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_duel_ban_expiration(&has_bits);
          _impl_.duel_ban_expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool made_first_purchase = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_made_first_purchase(&has_bits);
          _impl_.made_first_purchase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOEconGameAccountClient::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconGameAccountClient)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 additional_backpack_slots = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_additional_backpack_slots(), target);
  }

  // optional bool trial_account = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_trial_account(), target);
  }

  // optional bool eligible_for_online_play = 3 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_eligible_for_online_play(), target);
  }

  // optional bool need_to_choose_most_helpful_friend = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_need_to_choose_most_helpful_friend(), target);
  }

  // optional bool in_coaches_list = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_in_coaches_list(), target);
  }

  // optional fixed32 trade_ban_expiration = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(6, this->_internal_trade_ban_expiration(), target);
  }

  // optional fixed32 duel_ban_expiration = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(7, this->_internal_duel_ban_expiration(), target);
  }

  // optional bool made_first_purchase = 9 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_made_first_purchase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconGameAccountClient)
  return target;
}

size_t CSOEconGameAccountClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconGameAccountClient)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 additional_backpack_slots = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_additional_backpack_slots());
    }

    // optional bool trial_account = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool need_to_choose_most_helpful_friend = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool in_coaches_list = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool made_first_purchase = 9 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional fixed32 trade_ban_expiration = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional fixed32 duel_ban_expiration = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool eligible_for_online_play = 3 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOEconGameAccountClient::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSOEconGameAccountClient::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOEconGameAccountClient::GetClassData() const { return &_class_data_; }


void CSOEconGameAccountClient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSOEconGameAccountClient*>(&to_msg);
  auto& from = static_cast<const CSOEconGameAccountClient&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSOEconGameAccountClient)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.additional_backpack_slots_ = from._impl_.additional_backpack_slots_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.trial_account_ = from._impl_.trial_account_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.need_to_choose_most_helpful_friend_ = from._impl_.need_to_choose_most_helpful_friend_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.in_coaches_list_ = from._impl_.in_coaches_list_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.made_first_purchase_ = from._impl_.made_first_purchase_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.trade_ban_expiration_ = from._impl_.trade_ban_expiration_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.duel_ban_expiration_ = from._impl_.duel_ban_expiration_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.eligible_for_online_play_ = from._impl_.eligible_for_online_play_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOEconGameAccountClient::CopyFrom(const CSOEconGameAccountClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconGameAccountClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconGameAccountClient::IsInitialized() const {
  return true;
}

void CSOEconGameAccountClient::InternalSwap(CSOEconGameAccountClient* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconGameAccountClient, _impl_.duel_ban_expiration_)
      + sizeof(CSOEconGameAccountClient::_impl_.duel_ban_expiration_)
      - PROTOBUF_FIELD_OFFSET(CSOEconGameAccountClient, _impl_.additional_backpack_slots_)>(
          reinterpret_cast<char*>(&_impl_.additional_backpack_slots_),
          reinterpret_cast<char*>(&other->_impl_.additional_backpack_slots_));
  swap(_impl_.eligible_for_online_play_, other->_impl_.eligible_for_online_play_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconGameAccountClient::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[14]);
}

// ===================================================================

class CMsgApplyStrangePart::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgApplyStrangePart>()._impl_._has_bits_);
  static void set_has_strange_part_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgApplyStrangePart::CMsgApplyStrangePart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgApplyStrangePart)
}
CMsgApplyStrangePart::CMsgApplyStrangePart(const CMsgApplyStrangePart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgApplyStrangePart* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strange_part_item_id_){}
    , decltype(_impl_.item_item_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.strange_part_item_id_, &from._impl_.strange_part_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_item_id_) -
    reinterpret_cast<char*>(&_impl_.strange_part_item_id_)) + sizeof(_impl_.item_item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgApplyStrangePart)
}

inline void CMsgApplyStrangePart::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strange_part_item_id_){uint64_t{0u}}
    , decltype(_impl_.item_item_id_){uint64_t{0u}}
  };
}

CMsgApplyStrangePart::~CMsgApplyStrangePart() {
  // @@protoc_insertion_point(destructor:CMsgApplyStrangePart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgApplyStrangePart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgApplyStrangePart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgApplyStrangePart::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgApplyStrangePart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.strange_part_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.item_item_id_) -
        reinterpret_cast<char*>(&_impl_.strange_part_item_id_)) + sizeof(_impl_.item_item_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgApplyStrangePart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 strange_part_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_strange_part_item_id(&has_bits);
          _impl_.strange_part_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_item_id(&has_bits);
          _impl_.item_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgApplyStrangePart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgApplyStrangePart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 strange_part_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_strange_part_item_id(), target);
  }

  // optional uint64 item_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgApplyStrangePart)
  return target;
}

size_t CMsgApplyStrangePart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgApplyStrangePart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 strange_part_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_strange_part_item_id());
    }

    // optional uint64 item_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgApplyStrangePart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgApplyStrangePart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgApplyStrangePart::GetClassData() const { return &_class_data_; }


void CMsgApplyStrangePart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgApplyStrangePart*>(&to_msg);
  auto& from = static_cast<const CMsgApplyStrangePart&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgApplyStrangePart)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.strange_part_item_id_ = from._impl_.strange_part_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.item_item_id_ = from._impl_.item_item_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgApplyStrangePart::CopyFrom(const CMsgApplyStrangePart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgApplyStrangePart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyStrangePart::IsInitialized() const {
  return true;
}

void CMsgApplyStrangePart::InternalSwap(CMsgApplyStrangePart* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgApplyStrangePart, _impl_.item_item_id_)
      + sizeof(CMsgApplyStrangePart::_impl_.item_item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgApplyStrangePart, _impl_.strange_part_item_id_)>(
          reinterpret_cast<char*>(&_impl_.strange_part_item_id_),
          reinterpret_cast<char*>(&other->_impl_.strange_part_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgApplyStrangePart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[15]);
}

// ===================================================================

class CMsgApplyPennantUpgrade::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgApplyPennantUpgrade>()._impl_._has_bits_);
  static void set_has_upgrade_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pennant_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgApplyPennantUpgrade::CMsgApplyPennantUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgApplyPennantUpgrade)
}
CMsgApplyPennantUpgrade::CMsgApplyPennantUpgrade(const CMsgApplyPennantUpgrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgApplyPennantUpgrade* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.upgrade_item_id_){}
    , decltype(_impl_.pennant_item_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.upgrade_item_id_, &from._impl_.upgrade_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pennant_item_id_) -
    reinterpret_cast<char*>(&_impl_.upgrade_item_id_)) + sizeof(_impl_.pennant_item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgApplyPennantUpgrade)
}

inline void CMsgApplyPennantUpgrade::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.upgrade_item_id_){uint64_t{0u}}
    , decltype(_impl_.pennant_item_id_){uint64_t{0u}}
  };
}

CMsgApplyPennantUpgrade::~CMsgApplyPennantUpgrade() {
  // @@protoc_insertion_point(destructor:CMsgApplyPennantUpgrade)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgApplyPennantUpgrade::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgApplyPennantUpgrade::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgApplyPennantUpgrade::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgApplyPennantUpgrade)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.upgrade_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.pennant_item_id_) -
        reinterpret_cast<char*>(&_impl_.upgrade_item_id_)) + sizeof(_impl_.pennant_item_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgApplyPennantUpgrade::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 upgrade_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_upgrade_item_id(&has_bits);
          _impl_.upgrade_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 pennant_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pennant_item_id(&has_bits);
          _impl_.pennant_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgApplyPennantUpgrade::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgApplyPennantUpgrade)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 upgrade_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_upgrade_item_id(), target);
  }

  // optional uint64 pennant_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pennant_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgApplyPennantUpgrade)
  return target;
}

size_t CMsgApplyPennantUpgrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgApplyPennantUpgrade)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 upgrade_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_upgrade_item_id());
    }

    // optional uint64 pennant_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pennant_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgApplyPennantUpgrade::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgApplyPennantUpgrade::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgApplyPennantUpgrade::GetClassData() const { return &_class_data_; }


void CMsgApplyPennantUpgrade::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgApplyPennantUpgrade*>(&to_msg);
  auto& from = static_cast<const CMsgApplyPennantUpgrade&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgApplyPennantUpgrade)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.upgrade_item_id_ = from._impl_.upgrade_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.pennant_item_id_ = from._impl_.pennant_item_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgApplyPennantUpgrade::CopyFrom(const CMsgApplyPennantUpgrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgApplyPennantUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyPennantUpgrade::IsInitialized() const {
  return true;
}

void CMsgApplyPennantUpgrade::InternalSwap(CMsgApplyPennantUpgrade* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgApplyPennantUpgrade, _impl_.pennant_item_id_)
      + sizeof(CMsgApplyPennantUpgrade::_impl_.pennant_item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgApplyPennantUpgrade, _impl_.upgrade_item_id_)>(
          reinterpret_cast<char*>(&_impl_.upgrade_item_id_),
          reinterpret_cast<char*>(&other->_impl_.upgrade_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgApplyPennantUpgrade::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[16]);
}

// ===================================================================

class CMsgApplyEggEssence::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgApplyEggEssence>()._impl_._has_bits_);
  static void set_has_essence_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_egg_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgApplyEggEssence::CMsgApplyEggEssence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgApplyEggEssence)
}
CMsgApplyEggEssence::CMsgApplyEggEssence(const CMsgApplyEggEssence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgApplyEggEssence* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.essence_item_id_){}
    , decltype(_impl_.egg_item_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.essence_item_id_, &from._impl_.essence_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.egg_item_id_) -
    reinterpret_cast<char*>(&_impl_.essence_item_id_)) + sizeof(_impl_.egg_item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgApplyEggEssence)
}

inline void CMsgApplyEggEssence::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.essence_item_id_){uint64_t{0u}}
    , decltype(_impl_.egg_item_id_){uint64_t{0u}}
  };
}

CMsgApplyEggEssence::~CMsgApplyEggEssence() {
  // @@protoc_insertion_point(destructor:CMsgApplyEggEssence)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgApplyEggEssence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgApplyEggEssence::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgApplyEggEssence::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgApplyEggEssence)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.essence_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.egg_item_id_) -
        reinterpret_cast<char*>(&_impl_.essence_item_id_)) + sizeof(_impl_.egg_item_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgApplyEggEssence::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 essence_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_essence_item_id(&has_bits);
          _impl_.essence_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 egg_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_egg_item_id(&has_bits);
          _impl_.egg_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgApplyEggEssence::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgApplyEggEssence)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 essence_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_essence_item_id(), target);
  }

  // optional uint64 egg_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_egg_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgApplyEggEssence)
  return target;
}

size_t CMsgApplyEggEssence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgApplyEggEssence)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 essence_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_essence_item_id());
    }

    // optional uint64 egg_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_egg_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgApplyEggEssence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgApplyEggEssence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgApplyEggEssence::GetClassData() const { return &_class_data_; }


void CMsgApplyEggEssence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgApplyEggEssence*>(&to_msg);
  auto& from = static_cast<const CMsgApplyEggEssence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgApplyEggEssence)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.essence_item_id_ = from._impl_.essence_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.egg_item_id_ = from._impl_.egg_item_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgApplyEggEssence::CopyFrom(const CMsgApplyEggEssence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgApplyEggEssence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyEggEssence::IsInitialized() const {
  return true;
}

void CMsgApplyEggEssence::InternalSwap(CMsgApplyEggEssence* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgApplyEggEssence, _impl_.egg_item_id_)
      + sizeof(CMsgApplyEggEssence::_impl_.egg_item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgApplyEggEssence, _impl_.essence_item_id_)>(
          reinterpret_cast<char*>(&_impl_.essence_item_id_),
          reinterpret_cast<char*>(&other->_impl_.essence_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgApplyEggEssence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[17]);
}

// ===================================================================

class CSOEconItemAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconItemAttribute>()._impl_._has_bits_);
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSOEconItemAttribute::CSOEconItemAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSOEconItemAttribute)
}
CSOEconItemAttribute::CSOEconItemAttribute(const CSOEconItemAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSOEconItemAttribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_bytes_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.def_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value_bytes()) {
    _this->_impl_.value_bytes_.Set(from._internal_value_bytes(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.def_index_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.def_index_));
  // @@protoc_insertion_point(copy_constructor:CSOEconItemAttribute)
}

inline void CSOEconItemAttribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_bytes_){}
    , decltype(_impl_.value_){0u}
    , decltype(_impl_.def_index_){65535u}
  };
  _impl_.value_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSOEconItemAttribute::~CSOEconItemAttribute() {
  // @@protoc_insertion_point(destructor:CSOEconItemAttribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSOEconItemAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_bytes_.Destroy();
}

void CSOEconItemAttribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSOEconItemAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconItemAttribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.value_bytes_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    _impl_.value_ = 0u;
    _impl_.def_index_ = 65535u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconItemAttribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 def_index = 1 [default = 65535];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_def_index(&has_bits);
          _impl_.def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes value_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOEconItemAttribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconItemAttribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 def_index = 1 [default = 65535];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_def_index(), target);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  // optional bytes value_bytes = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconItemAttribute)
  return target;
}

size_t CSOEconItemAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconItemAttribute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes value_bytes = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_value_bytes());
    }

    // optional uint32 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
    }

    // optional uint32 def_index = 1 [default = 65535];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_def_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOEconItemAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSOEconItemAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOEconItemAttribute::GetClassData() const { return &_class_data_; }


void CSOEconItemAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSOEconItemAttribute*>(&to_msg);
  auto& from = static_cast<const CSOEconItemAttribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSOEconItemAttribute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_value_bytes(from._internal_value_bytes());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.def_index_ = from._impl_.def_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOEconItemAttribute::CopyFrom(const CSOEconItemAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconItemAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemAttribute::IsInitialized() const {
  return true;
}

void CSOEconItemAttribute::InternalSwap(CSOEconItemAttribute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_bytes_, lhs_arena,
      &other->_impl_.value_bytes_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_.def_index_, other->_impl_.def_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconItemAttribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[18]);
}

// ===================================================================

class CSOEconItemEquipped::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconItemEquipped>()._impl_._has_bits_);
  static void set_has_new_class(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSOEconItemEquipped::CSOEconItemEquipped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSOEconItemEquipped)
}
CSOEconItemEquipped::CSOEconItemEquipped(const CSOEconItemEquipped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSOEconItemEquipped* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_class_){}
    , decltype(_impl_.new_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.new_class_, &from._impl_.new_class_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.new_slot_) -
    reinterpret_cast<char*>(&_impl_.new_class_)) + sizeof(_impl_.new_slot_));
  // @@protoc_insertion_point(copy_constructor:CSOEconItemEquipped)
}

inline void CSOEconItemEquipped::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_class_){0u}
    , decltype(_impl_.new_slot_){0u}
  };
}

CSOEconItemEquipped::~CSOEconItemEquipped() {
  // @@protoc_insertion_point(destructor:CSOEconItemEquipped)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSOEconItemEquipped::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOEconItemEquipped::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSOEconItemEquipped::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconItemEquipped)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.new_class_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.new_slot_) -
        reinterpret_cast<char*>(&_impl_.new_class_)) + sizeof(_impl_.new_slot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconItemEquipped::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 new_class = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_new_class(&has_bits);
          _impl_.new_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 new_slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_new_slot(&has_bits);
          _impl_.new_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOEconItemEquipped::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconItemEquipped)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 new_class = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_new_class(), target);
  }

  // optional uint32 new_slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_new_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconItemEquipped)
  return target;
}

size_t CSOEconItemEquipped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconItemEquipped)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 new_class = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_new_class());
    }

    // optional uint32 new_slot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_new_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOEconItemEquipped::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSOEconItemEquipped::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOEconItemEquipped::GetClassData() const { return &_class_data_; }


void CSOEconItemEquipped::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSOEconItemEquipped*>(&to_msg);
  auto& from = static_cast<const CSOEconItemEquipped&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSOEconItemEquipped)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.new_class_ = from._impl_.new_class_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.new_slot_ = from._impl_.new_slot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOEconItemEquipped::CopyFrom(const CSOEconItemEquipped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconItemEquipped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemEquipped::IsInitialized() const {
  return true;
}

void CSOEconItemEquipped::InternalSwap(CSOEconItemEquipped* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconItemEquipped, _impl_.new_slot_)
      + sizeof(CSOEconItemEquipped::_impl_.new_slot_)
      - PROTOBUF_FIELD_OFFSET(CSOEconItemEquipped, _impl_.new_class_)>(
          reinterpret_cast<char*>(&_impl_.new_class_),
          reinterpret_cast<char*>(&other->_impl_.new_class_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconItemEquipped::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[19]);
}

// ===================================================================

class CSOEconItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconItem>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_inventory(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CSOEconItem& interior_item(const CSOEconItem* msg);
  static void set_has_interior_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_original_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::CSOEconItem&
CSOEconItem::_Internal::interior_item(const CSOEconItem* msg) {
  return *msg->_impl_.interior_item_;
}
CSOEconItem::CSOEconItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSOEconItem)
}
CSOEconItem::CSOEconItem(const CSOEconItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSOEconItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attribute_){from._impl_.attribute_}
    , decltype(_impl_.equipped_state_){from._impl_.equipped_state_}
    , decltype(_impl_.interior_item_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.inventory_){}
    , decltype(_impl_.def_index_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.origin_){}
    , decltype(_impl_.style_){}
    , decltype(_impl_.original_id_){}
    , decltype(_impl_.quality_){}
    , decltype(_impl_.quantity_){}
    , decltype(_impl_.level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_interior_item()) {
    _this->_impl_.interior_item_ = new ::CSOEconItem(*from._impl_.interior_item_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:CSOEconItem)
}

inline void CSOEconItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attribute_){arena}
    , decltype(_impl_.equipped_state_){arena}
    , decltype(_impl_.interior_item_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.inventory_){0u}
    , decltype(_impl_.def_index_){0u}
    , decltype(_impl_.flags_){0u}
    , decltype(_impl_.origin_){0u}
    , decltype(_impl_.style_){0u}
    , decltype(_impl_.original_id_){uint64_t{0u}}
    , decltype(_impl_.quality_){4u}
    , decltype(_impl_.quantity_){1u}
    , decltype(_impl_.level_){1u}
  };
}

CSOEconItem::~CSOEconItem() {
  // @@protoc_insertion_point(destructor:CSOEconItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSOEconItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attribute_.~RepeatedPtrField();
  _impl_.equipped_state_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.interior_item_;
}

void CSOEconItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSOEconItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attribute_.Clear();
  _impl_.equipped_state_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.interior_item_ != nullptr);
    _impl_.interior_item_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.style_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.style_));
  }
  if (cached_has_bits & 0x00000f00u) {
    _impl_.original_id_ = uint64_t{0u};
    _impl_.quality_ = 4u;
    _impl_.quantity_ = 1u;
    _impl_.level_ = 1u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 inventory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_inventory(&has_bits);
          _impl_.inventory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 def_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_def_index(&has_bits);
          _impl_.def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quantity = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_quantity(&has_bits);
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quality = 7 [default = 4];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_quality(&has_bits);
          _impl_.quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 origin = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_origin(&has_bits);
          _impl_.origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CSOEconItemAttribute attribute = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CSOEconItem interior_item = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_interior_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 style = 15 [default = 0];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_style(&has_bits);
          _impl_.style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 original_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_original_id(&has_bits);
          _impl_.original_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CSOEconItemEquipped equipped_state = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_equipped_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOEconItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional uint32 inventory = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_inventory(), target);
  }

  // optional uint32 def_index = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_def_index(), target);
  }

  // optional uint32 quantity = 5 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_quantity(), target);
  }

  // optional uint32 level = 6 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_level(), target);
  }

  // optional uint32 quality = 7 [default = 4];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_quality(), target);
  }

  // optional uint32 flags = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_flags(), target);
  }

  // optional uint32 origin = 9 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_origin(), target);
  }

  // repeated .CSOEconItemAttribute attribute = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attribute_size()); i < n; i++) {
    const auto& repfield = this->_internal_attribute(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .CSOEconItem interior_item = 13;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::interior_item(this),
        _Internal::interior_item(this).GetCachedSize(), target, stream);
  }

  // optional uint32 style = 15 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_style(), target);
  }

  // optional uint64 original_id = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(16, this->_internal_original_id(), target);
  }

  // repeated .CSOEconItemEquipped equipped_state = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_equipped_state_size()); i < n; i++) {
    const auto& repfield = this->_internal_equipped_state(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconItem)
  return target;
}

size_t CSOEconItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSOEconItemAttribute attribute = 12;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->_impl_.attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSOEconItemEquipped equipped_state = 18;
  total_size += 2UL * this->_internal_equipped_state_size();
  for (const auto& msg : this->_impl_.equipped_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CSOEconItem interior_item = 13;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interior_item_);
    }

    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 inventory = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_inventory());
    }

    // optional uint32 def_index = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_def_index());
    }

    // optional uint32 flags = 8 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional uint32 origin = 9 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_origin());
    }

    // optional uint32 style = 15 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_style());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint64 original_id = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_original_id());
    }

    // optional uint32 quality = 7 [default = 4];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quality());
    }

    // optional uint32 quantity = 5 [default = 1];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quantity());
    }

    // optional uint32 level = 6 [default = 1];
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOEconItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSOEconItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOEconItem::GetClassData() const { return &_class_data_; }


void CSOEconItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSOEconItem*>(&to_msg);
  auto& from = static_cast<const CSOEconItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSOEconItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attribute_.MergeFrom(from._impl_.attribute_);
  _this->_impl_.equipped_state_.MergeFrom(from._impl_.equipped_state_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_interior_item()->::CSOEconItem::MergeFrom(
          from._internal_interior_item());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.inventory_ = from._impl_.inventory_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.def_index_ = from._impl_.def_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.origin_ = from._impl_.origin_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.style_ = from._impl_.style_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.original_id_ = from._impl_.original_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.quality_ = from._impl_.quality_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.quantity_ = from._impl_.quantity_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOEconItem::CopyFrom(const CSOEconItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItem::IsInitialized() const {
  return true;
}

void CSOEconItem::InternalSwap(CSOEconItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attribute_.InternalSwap(&other->_impl_.attribute_);
  _impl_.equipped_state_.InternalSwap(&other->_impl_.equipped_state_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconItem, _impl_.original_id_)
      + sizeof(CSOEconItem::_impl_.original_id_)
      - PROTOBUF_FIELD_OFFSET(CSOEconItem, _impl_.interior_item_)>(
          reinterpret_cast<char*>(&_impl_.interior_item_),
          reinterpret_cast<char*>(&other->_impl_.interior_item_));
  swap(_impl_.quality_, other->_impl_.quality_);
  swap(_impl_.quantity_, other->_impl_.quantity_);
  swap(_impl_.level_, other->_impl_.level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[20]);
}

// ===================================================================

class CMsgSortItems::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSortItems>()._impl_._has_bits_);
  static void set_has_sort_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSortItems::CMsgSortItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSortItems)
}
CMsgSortItems::CMsgSortItems(const CMsgSortItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSortItems* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sort_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sort_type_ = from._impl_.sort_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgSortItems)
}

inline void CMsgSortItems::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sort_type_){0u}
  };
}

CMsgSortItems::~CMsgSortItems() {
  // @@protoc_insertion_point(destructor:CMsgSortItems)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSortItems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSortItems::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSortItems::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSortItems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sort_type_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSortItems::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 sort_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sort_type(&has_bits);
          _impl_.sort_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSortItems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSortItems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 sort_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sort_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSortItems)
  return target;
}

size_t CMsgSortItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSortItems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 sort_type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sort_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSortItems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSortItems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSortItems::GetClassData() const { return &_class_data_; }


void CMsgSortItems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSortItems*>(&to_msg);
  auto& from = static_cast<const CMsgSortItems&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSortItems)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sort_type()) {
    _this->_internal_set_sort_type(from._internal_sort_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSortItems::CopyFrom(const CMsgSortItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSortItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSortItems::IsInitialized() const {
  return true;
}

void CMsgSortItems::InternalSwap(CMsgSortItems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.sort_type_, other->_impl_.sort_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSortItems::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[21]);
}

// ===================================================================

class CMsgItemAcknowledged::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgItemAcknowledged>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inventory(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rarity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgItemAcknowledged::CMsgItemAcknowledged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgItemAcknowledged)
}
CMsgItemAcknowledged::CMsgItemAcknowledged(const CMsgItemAcknowledged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgItemAcknowledged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.inventory_){}
    , decltype(_impl_.def_index_){}
    , decltype(_impl_.quality_){}
    , decltype(_impl_.rarity_){}
    , decltype(_impl_.origin_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.origin_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.origin_));
  // @@protoc_insertion_point(copy_constructor:CMsgItemAcknowledged)
}

inline void CMsgItemAcknowledged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.inventory_){0u}
    , decltype(_impl_.def_index_){0u}
    , decltype(_impl_.quality_){0u}
    , decltype(_impl_.rarity_){0u}
    , decltype(_impl_.origin_){0u}
  };
}

CMsgItemAcknowledged::~CMsgItemAcknowledged() {
  // @@protoc_insertion_point(destructor:CMsgItemAcknowledged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgItemAcknowledged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgItemAcknowledged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgItemAcknowledged::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgItemAcknowledged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.origin_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.origin_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgItemAcknowledged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 inventory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_inventory(&has_bits);
          _impl_.inventory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 def_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_def_index(&has_bits);
          _impl_.def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quality = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_quality(&has_bits);
          _impl_.quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rarity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_rarity(&has_bits);
          _impl_.rarity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 origin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_origin(&has_bits);
          _impl_.origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgItemAcknowledged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgItemAcknowledged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 inventory = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_inventory(), target);
  }

  // optional uint32 def_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_def_index(), target);
  }

  // optional uint32 quality = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_quality(), target);
  }

  // optional uint32 rarity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rarity(), target);
  }

  // optional uint32 origin = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_origin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgItemAcknowledged)
  return target;
}

size_t CMsgItemAcknowledged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgItemAcknowledged)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 inventory = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_inventory());
    }

    // optional uint32 def_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_def_index());
    }

    // optional uint32 quality = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quality());
    }

    // optional uint32 rarity = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rarity());
    }

    // optional uint32 origin = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_origin());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgItemAcknowledged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgItemAcknowledged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgItemAcknowledged::GetClassData() const { return &_class_data_; }


void CMsgItemAcknowledged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgItemAcknowledged*>(&to_msg);
  auto& from = static_cast<const CMsgItemAcknowledged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgItemAcknowledged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.inventory_ = from._impl_.inventory_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.def_index_ = from._impl_.def_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.quality_ = from._impl_.quality_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rarity_ = from._impl_.rarity_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.origin_ = from._impl_.origin_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgItemAcknowledged::CopyFrom(const CMsgItemAcknowledged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgItemAcknowledged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgItemAcknowledged::IsInitialized() const {
  return true;
}

void CMsgItemAcknowledged::InternalSwap(CMsgItemAcknowledged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgItemAcknowledged, _impl_.origin_)
      + sizeof(CMsgItemAcknowledged::_impl_.origin_)
      - PROTOBUF_FIELD_OFFSET(CMsgItemAcknowledged, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgItemAcknowledged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[22]);
}

// ===================================================================

class CMsgSetItemPositions_ItemPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetItemPositions_ItemPosition>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSetItemPositions_ItemPosition::CMsgSetItemPositions_ItemPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSetItemPositions.ItemPosition)
}
CMsgSetItemPositions_ItemPosition::CMsgSetItemPositions_ItemPosition(const CMsgSetItemPositions_ItemPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSetItemPositions_ItemPosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.position_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.position_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.position_));
  // @@protoc_insertion_point(copy_constructor:CMsgSetItemPositions.ItemPosition)
}

inline void CMsgSetItemPositions_ItemPosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.position_){0u}
  };
}

CMsgSetItemPositions_ItemPosition::~CMsgSetItemPositions_ItemPosition() {
  // @@protoc_insertion_point(destructor:CMsgSetItemPositions.ItemPosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSetItemPositions_ItemPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSetItemPositions_ItemPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSetItemPositions_ItemPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetItemPositions.ItemPosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.position_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.position_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetItemPositions_ItemPosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_position(&has_bits);
          _impl_.position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSetItemPositions_ItemPosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetItemPositions.ItemPosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetItemPositions.ItemPosition)
  return target;
}

size_t CMsgSetItemPositions_ItemPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetItemPositions.ItemPosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_position());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSetItemPositions_ItemPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSetItemPositions_ItemPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSetItemPositions_ItemPosition::GetClassData() const { return &_class_data_; }


void CMsgSetItemPositions_ItemPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSetItemPositions_ItemPosition*>(&to_msg);
  auto& from = static_cast<const CMsgSetItemPositions_ItemPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetItemPositions.ItemPosition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.position_ = from._impl_.position_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSetItemPositions_ItemPosition::CopyFrom(const CMsgSetItemPositions_ItemPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetItemPositions.ItemPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetItemPositions_ItemPosition::IsInitialized() const {
  return true;
}

void CMsgSetItemPositions_ItemPosition::InternalSwap(CMsgSetItemPositions_ItemPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSetItemPositions_ItemPosition, _impl_.position_)
      + sizeof(CMsgSetItemPositions_ItemPosition::_impl_.position_)
      - PROTOBUF_FIELD_OFFSET(CMsgSetItemPositions_ItemPosition, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetItemPositions_ItemPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[23]);
}

// ===================================================================

class CMsgSetItemPositions::_Internal {
 public:
};

CMsgSetItemPositions::CMsgSetItemPositions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSetItemPositions)
}
CMsgSetItemPositions::CMsgSetItemPositions(const CMsgSetItemPositions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSetItemPositions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_positions_){from._impl_.item_positions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSetItemPositions)
}

inline void CMsgSetItemPositions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_positions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgSetItemPositions::~CMsgSetItemPositions() {
  // @@protoc_insertion_point(destructor:CMsgSetItemPositions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSetItemPositions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_positions_.~RepeatedPtrField();
}

void CMsgSetItemPositions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSetItemPositions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetItemPositions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_positions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetItemPositions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgSetItemPositions.ItemPosition item_positions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSetItemPositions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetItemPositions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSetItemPositions.ItemPosition item_positions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_positions_size()); i < n; i++) {
    const auto& repfield = this->_internal_item_positions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetItemPositions)
  return target;
}

size_t CMsgSetItemPositions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetItemPositions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSetItemPositions.ItemPosition item_positions = 1;
  total_size += 1UL * this->_internal_item_positions_size();
  for (const auto& msg : this->_impl_.item_positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSetItemPositions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSetItemPositions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSetItemPositions::GetClassData() const { return &_class_data_; }


void CMsgSetItemPositions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSetItemPositions*>(&to_msg);
  auto& from = static_cast<const CMsgSetItemPositions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetItemPositions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_positions_.MergeFrom(from._impl_.item_positions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSetItemPositions::CopyFrom(const CMsgSetItemPositions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetItemPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetItemPositions::IsInitialized() const {
  return true;
}

void CMsgSetItemPositions::InternalSwap(CMsgSetItemPositions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.item_positions_.InternalSwap(&other->_impl_.item_positions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetItemPositions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[24]);
}

// ===================================================================

class CMsgGCStorePurchaseCancel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCStorePurchaseCancel>()._impl_._has_bits_);
  static void set_has_txn_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCStorePurchaseCancel::CMsgGCStorePurchaseCancel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCStorePurchaseCancel)
}
CMsgGCStorePurchaseCancel::CMsgGCStorePurchaseCancel(const CMsgGCStorePurchaseCancel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCStorePurchaseCancel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.txn_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.txn_id_ = from._impl_.txn_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCStorePurchaseCancel)
}

inline void CMsgGCStorePurchaseCancel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.txn_id_){uint64_t{0u}}
  };
}

CMsgGCStorePurchaseCancel::~CMsgGCStorePurchaseCancel() {
  // @@protoc_insertion_point(destructor:CMsgGCStorePurchaseCancel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCStorePurchaseCancel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCStorePurchaseCancel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCStorePurchaseCancel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCStorePurchaseCancel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.txn_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCStorePurchaseCancel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 txn_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_txn_id(&has_bits);
          _impl_.txn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCStorePurchaseCancel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCStorePurchaseCancel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 txn_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_txn_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCStorePurchaseCancel)
  return target;
}

size_t CMsgGCStorePurchaseCancel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCStorePurchaseCancel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 txn_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_txn_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCStorePurchaseCancel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCStorePurchaseCancel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCStorePurchaseCancel::GetClassData() const { return &_class_data_; }


void CMsgGCStorePurchaseCancel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCStorePurchaseCancel*>(&to_msg);
  auto& from = static_cast<const CMsgGCStorePurchaseCancel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCStorePurchaseCancel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_txn_id()) {
    _this->_internal_set_txn_id(from._internal_txn_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCStorePurchaseCancel::CopyFrom(const CMsgGCStorePurchaseCancel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCStorePurchaseCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseCancel::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseCancel::InternalSwap(CMsgGCStorePurchaseCancel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.txn_id_, other->_impl_.txn_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCStorePurchaseCancel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[25]);
}

// ===================================================================

class CMsgGCStorePurchaseCancelResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCStorePurchaseCancelResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCStorePurchaseCancelResponse::CMsgGCStorePurchaseCancelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCStorePurchaseCancelResponse)
}
CMsgGCStorePurchaseCancelResponse::CMsgGCStorePurchaseCancelResponse(const CMsgGCStorePurchaseCancelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCStorePurchaseCancelResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCStorePurchaseCancelResponse)
}

inline void CMsgGCStorePurchaseCancelResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){0u}
  };
}

CMsgGCStorePurchaseCancelResponse::~CMsgGCStorePurchaseCancelResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCStorePurchaseCancelResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCStorePurchaseCancelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCStorePurchaseCancelResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCStorePurchaseCancelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCStorePurchaseCancelResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCStorePurchaseCancelResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCStorePurchaseCancelResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCStorePurchaseCancelResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCStorePurchaseCancelResponse)
  return target;
}

size_t CMsgGCStorePurchaseCancelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCStorePurchaseCancelResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCStorePurchaseCancelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCStorePurchaseCancelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCStorePurchaseCancelResponse::GetClassData() const { return &_class_data_; }


void CMsgGCStorePurchaseCancelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCStorePurchaseCancelResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCStorePurchaseCancelResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCStorePurchaseCancelResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCStorePurchaseCancelResponse::CopyFrom(const CMsgGCStorePurchaseCancelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCStorePurchaseCancelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseCancelResponse::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseCancelResponse::InternalSwap(CMsgGCStorePurchaseCancelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCStorePurchaseCancelResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[26]);
}

// ===================================================================

class CMsgGCStorePurchaseFinalize::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCStorePurchaseFinalize>()._impl_._has_bits_);
  static void set_has_txn_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCStorePurchaseFinalize::CMsgGCStorePurchaseFinalize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCStorePurchaseFinalize)
}
CMsgGCStorePurchaseFinalize::CMsgGCStorePurchaseFinalize(const CMsgGCStorePurchaseFinalize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCStorePurchaseFinalize* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.txn_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.txn_id_ = from._impl_.txn_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCStorePurchaseFinalize)
}

inline void CMsgGCStorePurchaseFinalize::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.txn_id_){uint64_t{0u}}
  };
}

CMsgGCStorePurchaseFinalize::~CMsgGCStorePurchaseFinalize() {
  // @@protoc_insertion_point(destructor:CMsgGCStorePurchaseFinalize)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCStorePurchaseFinalize::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCStorePurchaseFinalize::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCStorePurchaseFinalize::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCStorePurchaseFinalize)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.txn_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCStorePurchaseFinalize::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 txn_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_txn_id(&has_bits);
          _impl_.txn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCStorePurchaseFinalize::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCStorePurchaseFinalize)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 txn_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_txn_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCStorePurchaseFinalize)
  return target;
}

size_t CMsgGCStorePurchaseFinalize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCStorePurchaseFinalize)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 txn_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_txn_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCStorePurchaseFinalize::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCStorePurchaseFinalize::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCStorePurchaseFinalize::GetClassData() const { return &_class_data_; }


void CMsgGCStorePurchaseFinalize::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCStorePurchaseFinalize*>(&to_msg);
  auto& from = static_cast<const CMsgGCStorePurchaseFinalize&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCStorePurchaseFinalize)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_txn_id()) {
    _this->_internal_set_txn_id(from._internal_txn_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCStorePurchaseFinalize::CopyFrom(const CMsgGCStorePurchaseFinalize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCStorePurchaseFinalize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseFinalize::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseFinalize::InternalSwap(CMsgGCStorePurchaseFinalize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.txn_id_, other->_impl_.txn_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCStorePurchaseFinalize::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[27]);
}

// ===================================================================

class CMsgGCStorePurchaseFinalizeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCStorePurchaseFinalizeResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCStorePurchaseFinalizeResponse::CMsgGCStorePurchaseFinalizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCStorePurchaseFinalizeResponse)
}
CMsgGCStorePurchaseFinalizeResponse::CMsgGCStorePurchaseFinalizeResponse(const CMsgGCStorePurchaseFinalizeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCStorePurchaseFinalizeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_ids_){from._impl_.item_ids_}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCStorePurchaseFinalizeResponse)
}

inline void CMsgGCStorePurchaseFinalizeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_ids_){arena}
    , decltype(_impl_.result_){0u}
  };
}

CMsgGCStorePurchaseFinalizeResponse::~CMsgGCStorePurchaseFinalizeResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCStorePurchaseFinalizeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCStorePurchaseFinalizeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_ids_.~RepeatedField();
}

void CMsgGCStorePurchaseFinalizeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCStorePurchaseFinalizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCStorePurchaseFinalizeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_ids_.Clear();
  _impl_.result_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCStorePurchaseFinalizeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 item_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCStorePurchaseFinalizeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCStorePurchaseFinalizeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // repeated uint64 item_ids = 2;
  for (int i = 0, n = this->_internal_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCStorePurchaseFinalizeResponse)
  return target;
}

size_t CMsgGCStorePurchaseFinalizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCStorePurchaseFinalizeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 item_ids = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.item_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_item_ids_size());
    total_size += data_size;
  }

  // optional uint32 result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCStorePurchaseFinalizeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCStorePurchaseFinalizeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCStorePurchaseFinalizeResponse::GetClassData() const { return &_class_data_; }


void CMsgGCStorePurchaseFinalizeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCStorePurchaseFinalizeResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCStorePurchaseFinalizeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCStorePurchaseFinalizeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_ids_.MergeFrom(from._impl_.item_ids_);
  if (from._internal_has_result()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCStorePurchaseFinalizeResponse::CopyFrom(const CMsgGCStorePurchaseFinalizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCStorePurchaseFinalizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseFinalizeResponse::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseFinalizeResponse::InternalSwap(CMsgGCStorePurchaseFinalizeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.item_ids_.InternalSwap(&other->_impl_.item_ids_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCStorePurchaseFinalizeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[28]);
}

// ===================================================================

class CMsgGCToGCBannedWordListUpdated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCBannedWordListUpdated>()._impl_._has_bits_);
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCBannedWordListUpdated::CMsgGCToGCBannedWordListUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCBannedWordListUpdated)
}
CMsgGCToGCBannedWordListUpdated::CMsgGCToGCBannedWordListUpdated(const CMsgGCToGCBannedWordListUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCBannedWordListUpdated* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.group_id_ = from._impl_.group_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCBannedWordListUpdated)
}

inline void CMsgGCToGCBannedWordListUpdated::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_id_){0u}
  };
}

CMsgGCToGCBannedWordListUpdated::~CMsgGCToGCBannedWordListUpdated() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCBannedWordListUpdated)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCBannedWordListUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToGCBannedWordListUpdated::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCBannedWordListUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCBannedWordListUpdated)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCBannedWordListUpdated::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCBannedWordListUpdated::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCBannedWordListUpdated)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCBannedWordListUpdated)
  return target;
}

size_t CMsgGCToGCBannedWordListUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCBannedWordListUpdated)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 group_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCBannedWordListUpdated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCBannedWordListUpdated::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCBannedWordListUpdated::GetClassData() const { return &_class_data_; }


void CMsgGCToGCBannedWordListUpdated::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCBannedWordListUpdated*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCBannedWordListUpdated&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCBannedWordListUpdated)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_group_id()) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCBannedWordListUpdated::CopyFrom(const CMsgGCToGCBannedWordListUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCBannedWordListUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCBannedWordListUpdated::IsInitialized() const {
  return true;
}

void CMsgGCToGCBannedWordListUpdated::InternalSwap(CMsgGCToGCBannedWordListUpdated* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.group_id_, other->_impl_.group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCBannedWordListUpdated::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[29]);
}

// ===================================================================

class CMsgGCToGCDirtySDOCache::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCDirtySDOCache>()._impl_._has_bits_);
  static void set_has_sdo_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_key_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCDirtySDOCache::CMsgGCToGCDirtySDOCache(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCDirtySDOCache)
}
CMsgGCToGCDirtySDOCache::CMsgGCToGCDirtySDOCache(const CMsgGCToGCDirtySDOCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCDirtySDOCache* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_uint64_){}
    , decltype(_impl_.sdo_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.key_uint64_, &from._impl_.key_uint64_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sdo_type_) -
    reinterpret_cast<char*>(&_impl_.key_uint64_)) + sizeof(_impl_.sdo_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCDirtySDOCache)
}

inline void CMsgGCToGCDirtySDOCache::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_uint64_){uint64_t{0u}}
    , decltype(_impl_.sdo_type_){0u}
  };
}

CMsgGCToGCDirtySDOCache::~CMsgGCToGCDirtySDOCache() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCDirtySDOCache)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCDirtySDOCache::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToGCDirtySDOCache::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCDirtySDOCache::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCDirtySDOCache)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.key_uint64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sdo_type_) -
        reinterpret_cast<char*>(&_impl_.key_uint64_)) + sizeof(_impl_.sdo_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCDirtySDOCache::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 sdo_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sdo_type(&has_bits);
          _impl_.sdo_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 key_uint64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_key_uint64(&has_bits);
          _impl_.key_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCDirtySDOCache::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCDirtySDOCache)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 sdo_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sdo_type(), target);
  }

  // optional uint64 key_uint64 = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_key_uint64(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCDirtySDOCache)
  return target;
}

size_t CMsgGCToGCDirtySDOCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCDirtySDOCache)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 key_uint64 = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_key_uint64());
    }

    // optional uint32 sdo_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sdo_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCDirtySDOCache::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCDirtySDOCache::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCDirtySDOCache::GetClassData() const { return &_class_data_; }


void CMsgGCToGCDirtySDOCache::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCDirtySDOCache*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCDirtySDOCache&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCDirtySDOCache)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.key_uint64_ = from._impl_.key_uint64_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sdo_type_ = from._impl_.sdo_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCDirtySDOCache::CopyFrom(const CMsgGCToGCDirtySDOCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCDirtySDOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCDirtySDOCache::IsInitialized() const {
  return true;
}

void CMsgGCToGCDirtySDOCache::InternalSwap(CMsgGCToGCDirtySDOCache* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCDirtySDOCache, _impl_.sdo_type_)
      + sizeof(CMsgGCToGCDirtySDOCache::_impl_.sdo_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCDirtySDOCache, _impl_.key_uint64_)>(
          reinterpret_cast<char*>(&_impl_.key_uint64_),
          reinterpret_cast<char*>(&other->_impl_.key_uint64_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCDirtySDOCache::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[30]);
}

// ===================================================================

class CMsgSDONoMemcached::_Internal {
 public:
};

CMsgSDONoMemcached::CMsgSDONoMemcached(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgSDONoMemcached)
}
CMsgSDONoMemcached::CMsgSDONoMemcached(const CMsgSDONoMemcached& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgSDONoMemcached* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSDONoMemcached)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSDONoMemcached::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSDONoMemcached::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgSDONoMemcached::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[31]);
}

// ===================================================================

class CMsgGCToGCUpdateSQLKeyValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCUpdateSQLKeyValue>()._impl_._has_bits_);
  static void set_has_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCUpdateSQLKeyValue::CMsgGCToGCUpdateSQLKeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCUpdateSQLKeyValue)
}
CMsgGCToGCUpdateSQLKeyValue::CMsgGCToGCUpdateSQLKeyValue(const CMsgGCToGCUpdateSQLKeyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCUpdateSQLKeyValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key_name()) {
    _this->_impl_.key_name_.Set(from._internal_key_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCUpdateSQLKeyValue)
}

inline void CMsgGCToGCUpdateSQLKeyValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_name_){}
  };
  _impl_.key_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCToGCUpdateSQLKeyValue::~CMsgGCToGCUpdateSQLKeyValue() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCUpdateSQLKeyValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCUpdateSQLKeyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_name_.Destroy();
}

void CMsgGCToGCUpdateSQLKeyValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCUpdateSQLKeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCUpdateSQLKeyValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.key_name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCUpdateSQLKeyValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCToGCUpdateSQLKeyValue.key_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCUpdateSQLKeyValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCUpdateSQLKeyValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string key_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key_name().data(), static_cast<int>(this->_internal_key_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToGCUpdateSQLKeyValue.key_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCUpdateSQLKeyValue)
  return target;
}

size_t CMsgGCToGCUpdateSQLKeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCUpdateSQLKeyValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string key_name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCUpdateSQLKeyValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCUpdateSQLKeyValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCUpdateSQLKeyValue::GetClassData() const { return &_class_data_; }


void CMsgGCToGCUpdateSQLKeyValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCUpdateSQLKeyValue*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCUpdateSQLKeyValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCUpdateSQLKeyValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key_name()) {
    _this->_internal_set_key_name(from._internal_key_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCUpdateSQLKeyValue::CopyFrom(const CMsgGCToGCUpdateSQLKeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCUpdateSQLKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCUpdateSQLKeyValue::IsInitialized() const {
  return true;
}

void CMsgGCToGCUpdateSQLKeyValue::InternalSwap(CMsgGCToGCUpdateSQLKeyValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_name_, lhs_arena,
      &other->_impl_.key_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCUpdateSQLKeyValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[32]);
}

// ===================================================================

class CMsgGCServerVersionUpdated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCServerVersionUpdated>()._impl_._has_bits_);
  static void set_has_server_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCServerVersionUpdated::CMsgGCServerVersionUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCServerVersionUpdated)
}
CMsgGCServerVersionUpdated::CMsgGCServerVersionUpdated(const CMsgGCServerVersionUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCServerVersionUpdated* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.server_version_ = from._impl_.server_version_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCServerVersionUpdated)
}

inline void CMsgGCServerVersionUpdated::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_version_){0u}
  };
}

CMsgGCServerVersionUpdated::~CMsgGCServerVersionUpdated() {
  // @@protoc_insertion_point(destructor:CMsgGCServerVersionUpdated)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCServerVersionUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCServerVersionUpdated::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCServerVersionUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCServerVersionUpdated)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.server_version_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCServerVersionUpdated::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 server_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_server_version(&has_bits);
          _impl_.server_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCServerVersionUpdated::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCServerVersionUpdated)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 server_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCServerVersionUpdated)
  return target;
}

size_t CMsgGCServerVersionUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCServerVersionUpdated)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 server_version = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCServerVersionUpdated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCServerVersionUpdated::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCServerVersionUpdated::GetClassData() const { return &_class_data_; }


void CMsgGCServerVersionUpdated::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCServerVersionUpdated*>(&to_msg);
  auto& from = static_cast<const CMsgGCServerVersionUpdated&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCServerVersionUpdated)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_server_version()) {
    _this->_internal_set_server_version(from._internal_server_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCServerVersionUpdated::CopyFrom(const CMsgGCServerVersionUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCServerVersionUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCServerVersionUpdated::IsInitialized() const {
  return true;
}

void CMsgGCServerVersionUpdated::InternalSwap(CMsgGCServerVersionUpdated* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.server_version_, other->_impl_.server_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCServerVersionUpdated::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[33]);
}

// ===================================================================

class CMsgGCClientVersionUpdated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCClientVersionUpdated>()._impl_._has_bits_);
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCClientVersionUpdated::CMsgGCClientVersionUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCClientVersionUpdated)
}
CMsgGCClientVersionUpdated::CMsgGCClientVersionUpdated(const CMsgGCClientVersionUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCClientVersionUpdated* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.client_version_ = from._impl_.client_version_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCClientVersionUpdated)
}

inline void CMsgGCClientVersionUpdated::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_version_){0u}
  };
}

CMsgGCClientVersionUpdated::~CMsgGCClientVersionUpdated() {
  // @@protoc_insertion_point(destructor:CMsgGCClientVersionUpdated)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCClientVersionUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCClientVersionUpdated::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCClientVersionUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCClientVersionUpdated)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_version_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCClientVersionUpdated::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 client_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_client_version(&has_bits);
          _impl_.client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCClientVersionUpdated::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCClientVersionUpdated)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 client_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_client_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCClientVersionUpdated)
  return target;
}

size_t CMsgGCClientVersionUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCClientVersionUpdated)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 client_version = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCClientVersionUpdated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCClientVersionUpdated::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCClientVersionUpdated::GetClassData() const { return &_class_data_; }


void CMsgGCClientVersionUpdated::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCClientVersionUpdated*>(&to_msg);
  auto& from = static_cast<const CMsgGCClientVersionUpdated&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCClientVersionUpdated)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client_version()) {
    _this->_internal_set_client_version(from._internal_client_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCClientVersionUpdated::CopyFrom(const CMsgGCClientVersionUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCClientVersionUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientVersionUpdated::IsInitialized() const {
  return true;
}

void CMsgGCClientVersionUpdated::InternalSwap(CMsgGCClientVersionUpdated* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.client_version_, other->_impl_.client_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCClientVersionUpdated::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[34]);
}

// ===================================================================

class CMsgGCToGCWebAPIAccountChanged::_Internal {
 public:
};

CMsgGCToGCWebAPIAccountChanged::CMsgGCToGCWebAPIAccountChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCWebAPIAccountChanged)
}
CMsgGCToGCWebAPIAccountChanged::CMsgGCToGCWebAPIAccountChanged(const CMsgGCToGCWebAPIAccountChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgGCToGCWebAPIAccountChanged* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCWebAPIAccountChanged)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCWebAPIAccountChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCWebAPIAccountChanged::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCWebAPIAccountChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[35]);
}

// ===================================================================

class CMsgExtractGems::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgExtractGems>()._impl_._has_bits_);
  static void set_has_tool_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_socket_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgExtractGems::CMsgExtractGems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgExtractGems)
}
CMsgExtractGems::CMsgExtractGems(const CMsgExtractGems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgExtractGems* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tool_item_id_){}
    , decltype(_impl_.item_item_id_){}
    , decltype(_impl_.item_socket_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tool_item_id_, &from._impl_.tool_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_socket_id_) -
    reinterpret_cast<char*>(&_impl_.tool_item_id_)) + sizeof(_impl_.item_socket_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgExtractGems)
}

inline void CMsgExtractGems::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tool_item_id_){uint64_t{0u}}
    , decltype(_impl_.item_item_id_){uint64_t{0u}}
    , decltype(_impl_.item_socket_id_){65535u}
  };
}

CMsgExtractGems::~CMsgExtractGems() {
  // @@protoc_insertion_point(destructor:CMsgExtractGems)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgExtractGems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgExtractGems::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgExtractGems::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgExtractGems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.tool_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.item_item_id_) -
        reinterpret_cast<char*>(&_impl_.tool_item_id_)) + sizeof(_impl_.item_item_id_));
    _impl_.item_socket_id_ = 65535u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgExtractGems::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 tool_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tool_item_id(&has_bits);
          _impl_.tool_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_item_id(&has_bits);
          _impl_.item_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_socket_id = 3 [default = 65535];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_item_socket_id(&has_bits);
          _impl_.item_socket_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgExtractGems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgExtractGems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 tool_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tool_item_id(), target);
  }

  // optional uint64 item_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_item_id(), target);
  }

  // optional uint32 item_socket_id = 3 [default = 65535];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_socket_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgExtractGems)
  return target;
}

size_t CMsgExtractGems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgExtractGems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 tool_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tool_item_id());
    }

    // optional uint64 item_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_item_id());
    }

    // optional uint32 item_socket_id = 3 [default = 65535];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_socket_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgExtractGems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgExtractGems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgExtractGems::GetClassData() const { return &_class_data_; }


void CMsgExtractGems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgExtractGems*>(&to_msg);
  auto& from = static_cast<const CMsgExtractGems&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgExtractGems)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tool_item_id_ = from._impl_.tool_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.item_item_id_ = from._impl_.item_item_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.item_socket_id_ = from._impl_.item_socket_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgExtractGems::CopyFrom(const CMsgExtractGems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgExtractGems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExtractGems::IsInitialized() const {
  return true;
}

void CMsgExtractGems::InternalSwap(CMsgExtractGems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgExtractGems, _impl_.item_item_id_)
      + sizeof(CMsgExtractGems::_impl_.item_item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgExtractGems, _impl_.tool_item_id_)>(
          reinterpret_cast<char*>(&_impl_.tool_item_id_),
          reinterpret_cast<char*>(&other->_impl_.tool_item_id_));
  swap(_impl_.item_socket_id_, other->_impl_.item_socket_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgExtractGems::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[36]);
}

// ===================================================================

class CMsgExtractGemsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgExtractGemsResponse>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgExtractGemsResponse::CMsgExtractGemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgExtractGemsResponse)
}
CMsgExtractGemsResponse::CMsgExtractGemsResponse(const CMsgExtractGemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgExtractGemsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.response_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.response_));
  // @@protoc_insertion_point(copy_constructor:CMsgExtractGemsResponse)
}

inline void CMsgExtractGemsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.response_){0}
  };
}

CMsgExtractGemsResponse::~CMsgExtractGemsResponse() {
  // @@protoc_insertion_point(destructor:CMsgExtractGemsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgExtractGemsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgExtractGemsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgExtractGemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgExtractGemsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.response_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.response_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgExtractGemsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgExtractGemsResponse.EExtractGems response = 2 [default = k_ExtractGems_Succeeded];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgExtractGemsResponse_EExtractGems_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgExtractGemsResponse_EExtractGems>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgExtractGemsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgExtractGemsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional .CMsgExtractGemsResponse.EExtractGems response = 2 [default = k_ExtractGems_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgExtractGemsResponse)
  return target;
}

size_t CMsgExtractGemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgExtractGemsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional .CMsgExtractGemsResponse.EExtractGems response = 2 [default = k_ExtractGems_Succeeded];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgExtractGemsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgExtractGemsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgExtractGemsResponse::GetClassData() const { return &_class_data_; }


void CMsgExtractGemsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgExtractGemsResponse*>(&to_msg);
  auto& from = static_cast<const CMsgExtractGemsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgExtractGemsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgExtractGemsResponse::CopyFrom(const CMsgExtractGemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgExtractGemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExtractGemsResponse::IsInitialized() const {
  return true;
}

void CMsgExtractGemsResponse::InternalSwap(CMsgExtractGemsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgExtractGemsResponse, _impl_.response_)
      + sizeof(CMsgExtractGemsResponse::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(CMsgExtractGemsResponse, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgExtractGemsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[37]);
}

// ===================================================================

class CMsgAddSocket::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAddSocket>()._impl_._has_bits_);
  static void set_has_tool_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unusual(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgAddSocket::CMsgAddSocket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAddSocket)
}
CMsgAddSocket::CMsgAddSocket(const CMsgAddSocket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAddSocket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tool_item_id_){}
    , decltype(_impl_.item_item_id_){}
    , decltype(_impl_.unusual_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tool_item_id_, &from._impl_.tool_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unusual_) -
    reinterpret_cast<char*>(&_impl_.tool_item_id_)) + sizeof(_impl_.unusual_));
  // @@protoc_insertion_point(copy_constructor:CMsgAddSocket)
}

inline void CMsgAddSocket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tool_item_id_){uint64_t{0u}}
    , decltype(_impl_.item_item_id_){uint64_t{0u}}
    , decltype(_impl_.unusual_){false}
  };
}

CMsgAddSocket::~CMsgAddSocket() {
  // @@protoc_insertion_point(destructor:CMsgAddSocket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAddSocket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAddSocket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAddSocket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAddSocket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.tool_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.unusual_) -
        reinterpret_cast<char*>(&_impl_.tool_item_id_)) + sizeof(_impl_.unusual_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAddSocket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 tool_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tool_item_id(&has_bits);
          _impl_.tool_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_item_id(&has_bits);
          _impl_.item_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool unusual = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_unusual(&has_bits);
          _impl_.unusual_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAddSocket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAddSocket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 tool_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tool_item_id(), target);
  }

  // optional uint64 item_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_item_id(), target);
  }

  // optional bool unusual = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_unusual(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAddSocket)
  return target;
}

size_t CMsgAddSocket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAddSocket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 tool_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tool_item_id());
    }

    // optional uint64 item_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_item_id());
    }

    // optional bool unusual = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAddSocket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAddSocket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAddSocket::GetClassData() const { return &_class_data_; }


void CMsgAddSocket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAddSocket*>(&to_msg);
  auto& from = static_cast<const CMsgAddSocket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAddSocket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tool_item_id_ = from._impl_.tool_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.item_item_id_ = from._impl_.item_item_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.unusual_ = from._impl_.unusual_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAddSocket::CopyFrom(const CMsgAddSocket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAddSocket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddSocket::IsInitialized() const {
  return true;
}

void CMsgAddSocket::InternalSwap(CMsgAddSocket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAddSocket, _impl_.unusual_)
      + sizeof(CMsgAddSocket::_impl_.unusual_)
      - PROTOBUF_FIELD_OFFSET(CMsgAddSocket, _impl_.tool_item_id_)>(
          reinterpret_cast<char*>(&_impl_.tool_item_id_),
          reinterpret_cast<char*>(&other->_impl_.tool_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAddSocket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[38]);
}

// ===================================================================

class CMsgAddSocketResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAddSocketResponse>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgAddSocketResponse::CMsgAddSocketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAddSocketResponse)
}
CMsgAddSocketResponse::CMsgAddSocketResponse(const CMsgAddSocketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAddSocketResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.updated_socket_index_){from._impl_.updated_socket_index_}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.response_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.response_));
  // @@protoc_insertion_point(copy_constructor:CMsgAddSocketResponse)
}

inline void CMsgAddSocketResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.updated_socket_index_){arena}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.response_){0}
  };
}

CMsgAddSocketResponse::~CMsgAddSocketResponse() {
  // @@protoc_insertion_point(destructor:CMsgAddSocketResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAddSocketResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.updated_socket_index_.~RepeatedField();
}

void CMsgAddSocketResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAddSocketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAddSocketResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.updated_socket_index_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.response_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.response_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAddSocketResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 updated_socket_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_updated_socket_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_updated_socket_index(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgAddSocketResponse.EAddSocket response = 3 [default = k_AddSocket_Succeeded];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgAddSocketResponse_EAddSocket_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgAddSocketResponse_EAddSocket>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAddSocketResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAddSocketResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // repeated uint32 updated_socket_index = 2;
  for (int i = 0, n = this->_internal_updated_socket_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_updated_socket_index(i), target);
  }

  // optional .CMsgAddSocketResponse.EAddSocket response = 3 [default = k_AddSocket_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAddSocketResponse)
  return target;
}

size_t CMsgAddSocketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAddSocketResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 updated_socket_index = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.updated_socket_index_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_updated_socket_index_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional .CMsgAddSocketResponse.EAddSocket response = 3 [default = k_AddSocket_Succeeded];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAddSocketResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAddSocketResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAddSocketResponse::GetClassData() const { return &_class_data_; }


void CMsgAddSocketResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAddSocketResponse*>(&to_msg);
  auto& from = static_cast<const CMsgAddSocketResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAddSocketResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.updated_socket_index_.MergeFrom(from._impl_.updated_socket_index_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAddSocketResponse::CopyFrom(const CMsgAddSocketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAddSocketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddSocketResponse::IsInitialized() const {
  return true;
}

void CMsgAddSocketResponse::InternalSwap(CMsgAddSocketResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.updated_socket_index_.InternalSwap(&other->_impl_.updated_socket_index_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAddSocketResponse, _impl_.response_)
      + sizeof(CMsgAddSocketResponse::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(CMsgAddSocketResponse, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAddSocketResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[39]);
}

// ===================================================================

class CMsgAddItemToSocketData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAddItemToSocketData>()._impl_._has_bits_);
  static void set_has_gem_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_socket_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgAddItemToSocketData::CMsgAddItemToSocketData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAddItemToSocketData)
}
CMsgAddItemToSocketData::CMsgAddItemToSocketData(const CMsgAddItemToSocketData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAddItemToSocketData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gem_item_id_){}
    , decltype(_impl_.socket_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gem_item_id_, &from._impl_.gem_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.socket_index_) -
    reinterpret_cast<char*>(&_impl_.gem_item_id_)) + sizeof(_impl_.socket_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgAddItemToSocketData)
}

inline void CMsgAddItemToSocketData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gem_item_id_){uint64_t{0u}}
    , decltype(_impl_.socket_index_){65535u}
  };
}

CMsgAddItemToSocketData::~CMsgAddItemToSocketData() {
  // @@protoc_insertion_point(destructor:CMsgAddItemToSocketData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAddItemToSocketData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAddItemToSocketData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAddItemToSocketData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAddItemToSocketData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.gem_item_id_ = uint64_t{0u};
    _impl_.socket_index_ = 65535u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAddItemToSocketData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 gem_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gem_item_id(&has_bits);
          _impl_.gem_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 socket_index = 2 [default = 65535];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_socket_index(&has_bits);
          _impl_.socket_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAddItemToSocketData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAddItemToSocketData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 gem_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gem_item_id(), target);
  }

  // optional uint32 socket_index = 2 [default = 65535];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_socket_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAddItemToSocketData)
  return target;
}

size_t CMsgAddItemToSocketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAddItemToSocketData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 gem_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gem_item_id());
    }

    // optional uint32 socket_index = 2 [default = 65535];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_socket_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAddItemToSocketData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAddItemToSocketData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAddItemToSocketData::GetClassData() const { return &_class_data_; }


void CMsgAddItemToSocketData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAddItemToSocketData*>(&to_msg);
  auto& from = static_cast<const CMsgAddItemToSocketData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAddItemToSocketData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gem_item_id_ = from._impl_.gem_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.socket_index_ = from._impl_.socket_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAddItemToSocketData::CopyFrom(const CMsgAddItemToSocketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAddItemToSocketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddItemToSocketData::IsInitialized() const {
  return true;
}

void CMsgAddItemToSocketData::InternalSwap(CMsgAddItemToSocketData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.gem_item_id_, other->_impl_.gem_item_id_);
  swap(_impl_.socket_index_, other->_impl_.socket_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAddItemToSocketData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[40]);
}

// ===================================================================

class CMsgAddItemToSocket::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAddItemToSocket>()._impl_._has_bits_);
  static void set_has_item_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAddItemToSocket::CMsgAddItemToSocket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAddItemToSocket)
}
CMsgAddItemToSocket::CMsgAddItemToSocket(const CMsgAddItemToSocket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAddItemToSocket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gems_to_socket_){from._impl_.gems_to_socket_}
    , decltype(_impl_.item_item_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.item_item_id_ = from._impl_.item_item_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgAddItemToSocket)
}

inline void CMsgAddItemToSocket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gems_to_socket_){arena}
    , decltype(_impl_.item_item_id_){uint64_t{0u}}
  };
}

CMsgAddItemToSocket::~CMsgAddItemToSocket() {
  // @@protoc_insertion_point(destructor:CMsgAddItemToSocket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAddItemToSocket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gems_to_socket_.~RepeatedPtrField();
}

void CMsgAddItemToSocket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAddItemToSocket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAddItemToSocket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gems_to_socket_.Clear();
  _impl_.item_item_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAddItemToSocket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_item_id(&has_bits);
          _impl_.item_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgAddItemToSocketData gems_to_socket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gems_to_socket(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAddItemToSocket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAddItemToSocket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 item_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_item_id(), target);
  }

  // repeated .CMsgAddItemToSocketData gems_to_socket = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gems_to_socket_size()); i < n; i++) {
    const auto& repfield = this->_internal_gems_to_socket(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAddItemToSocket)
  return target;
}

size_t CMsgAddItemToSocket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAddItemToSocket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgAddItemToSocketData gems_to_socket = 2;
  total_size += 1UL * this->_internal_gems_to_socket_size();
  for (const auto& msg : this->_impl_.gems_to_socket_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 item_item_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_item_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAddItemToSocket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAddItemToSocket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAddItemToSocket::GetClassData() const { return &_class_data_; }


void CMsgAddItemToSocket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAddItemToSocket*>(&to_msg);
  auto& from = static_cast<const CMsgAddItemToSocket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAddItemToSocket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gems_to_socket_.MergeFrom(from._impl_.gems_to_socket_);
  if (from._internal_has_item_item_id()) {
    _this->_internal_set_item_item_id(from._internal_item_item_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAddItemToSocket::CopyFrom(const CMsgAddItemToSocket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAddItemToSocket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddItemToSocket::IsInitialized() const {
  return true;
}

void CMsgAddItemToSocket::InternalSwap(CMsgAddItemToSocket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.gems_to_socket_.InternalSwap(&other->_impl_.gems_to_socket_);
  swap(_impl_.item_item_id_, other->_impl_.item_item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAddItemToSocket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[41]);
}

// ===================================================================

class CMsgAddItemToSocketResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAddItemToSocketResponse>()._impl_._has_bits_);
  static void set_has_item_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgAddItemToSocketResponse::CMsgAddItemToSocketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAddItemToSocketResponse)
}
CMsgAddItemToSocketResponse::CMsgAddItemToSocketResponse(const CMsgAddItemToSocketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAddItemToSocketResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.updated_socket_index_){from._impl_.updated_socket_index_}
    , decltype(_impl_.item_item_id_){}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_item_id_, &from._impl_.item_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.response_) -
    reinterpret_cast<char*>(&_impl_.item_item_id_)) + sizeof(_impl_.response_));
  // @@protoc_insertion_point(copy_constructor:CMsgAddItemToSocketResponse)
}

inline void CMsgAddItemToSocketResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.updated_socket_index_){arena}
    , decltype(_impl_.item_item_id_){uint64_t{0u}}
    , decltype(_impl_.response_){0}
  };
}

CMsgAddItemToSocketResponse::~CMsgAddItemToSocketResponse() {
  // @@protoc_insertion_point(destructor:CMsgAddItemToSocketResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAddItemToSocketResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.updated_socket_index_.~RepeatedField();
}

void CMsgAddItemToSocketResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAddItemToSocketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAddItemToSocketResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.updated_socket_index_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.item_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.response_) -
        reinterpret_cast<char*>(&_impl_.item_item_id_)) + sizeof(_impl_.response_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAddItemToSocketResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_item_id(&has_bits);
          _impl_.item_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 updated_socket_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_updated_socket_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_updated_socket_index(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgAddItemToSocketResponse.EAddGem response = 3 [default = k_AddGem_Succeeded];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgAddItemToSocketResponse_EAddGem_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgAddItemToSocketResponse_EAddGem>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAddItemToSocketResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAddItemToSocketResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 item_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_item_id(), target);
  }

  // repeated uint32 updated_socket_index = 2;
  for (int i = 0, n = this->_internal_updated_socket_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_updated_socket_index(i), target);
  }

  // optional .CMsgAddItemToSocketResponse.EAddGem response = 3 [default = k_AddGem_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAddItemToSocketResponse)
  return target;
}

size_t CMsgAddItemToSocketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAddItemToSocketResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 updated_socket_index = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.updated_socket_index_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_updated_socket_index_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_item_id());
    }

    // optional .CMsgAddItemToSocketResponse.EAddGem response = 3 [default = k_AddGem_Succeeded];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAddItemToSocketResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAddItemToSocketResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAddItemToSocketResponse::GetClassData() const { return &_class_data_; }


void CMsgAddItemToSocketResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAddItemToSocketResponse*>(&to_msg);
  auto& from = static_cast<const CMsgAddItemToSocketResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAddItemToSocketResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.updated_socket_index_.MergeFrom(from._impl_.updated_socket_index_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_item_id_ = from._impl_.item_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAddItemToSocketResponse::CopyFrom(const CMsgAddItemToSocketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAddItemToSocketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddItemToSocketResponse::IsInitialized() const {
  return true;
}

void CMsgAddItemToSocketResponse::InternalSwap(CMsgAddItemToSocketResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.updated_socket_index_.InternalSwap(&other->_impl_.updated_socket_index_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAddItemToSocketResponse, _impl_.response_)
      + sizeof(CMsgAddItemToSocketResponse::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(CMsgAddItemToSocketResponse, _impl_.item_item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAddItemToSocketResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[42]);
}

// ===================================================================

class CMsgResetStrangeGemCount::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgResetStrangeGemCount>()._impl_._has_bits_);
  static void set_has_item_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_socket_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgResetStrangeGemCount::CMsgResetStrangeGemCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgResetStrangeGemCount)
}
CMsgResetStrangeGemCount::CMsgResetStrangeGemCount(const CMsgResetStrangeGemCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgResetStrangeGemCount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_item_id_){}
    , decltype(_impl_.socket_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_item_id_, &from._impl_.item_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.socket_index_) -
    reinterpret_cast<char*>(&_impl_.item_item_id_)) + sizeof(_impl_.socket_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgResetStrangeGemCount)
}

inline void CMsgResetStrangeGemCount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_item_id_){uint64_t{0u}}
    , decltype(_impl_.socket_index_){65535u}
  };
}

CMsgResetStrangeGemCount::~CMsgResetStrangeGemCount() {
  // @@protoc_insertion_point(destructor:CMsgResetStrangeGemCount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgResetStrangeGemCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgResetStrangeGemCount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgResetStrangeGemCount::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgResetStrangeGemCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.item_item_id_ = uint64_t{0u};
    _impl_.socket_index_ = 65535u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgResetStrangeGemCount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_item_id(&has_bits);
          _impl_.item_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 socket_index = 2 [default = 65535];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_socket_index(&has_bits);
          _impl_.socket_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgResetStrangeGemCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgResetStrangeGemCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 item_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_item_id(), target);
  }

  // optional uint32 socket_index = 2 [default = 65535];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_socket_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgResetStrangeGemCount)
  return target;
}

size_t CMsgResetStrangeGemCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgResetStrangeGemCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_item_id());
    }

    // optional uint32 socket_index = 2 [default = 65535];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_socket_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgResetStrangeGemCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgResetStrangeGemCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgResetStrangeGemCount::GetClassData() const { return &_class_data_; }


void CMsgResetStrangeGemCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgResetStrangeGemCount*>(&to_msg);
  auto& from = static_cast<const CMsgResetStrangeGemCount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgResetStrangeGemCount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_item_id_ = from._impl_.item_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.socket_index_ = from._impl_.socket_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgResetStrangeGemCount::CopyFrom(const CMsgResetStrangeGemCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgResetStrangeGemCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgResetStrangeGemCount::IsInitialized() const {
  return true;
}

void CMsgResetStrangeGemCount::InternalSwap(CMsgResetStrangeGemCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.item_item_id_, other->_impl_.item_item_id_);
  swap(_impl_.socket_index_, other->_impl_.socket_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgResetStrangeGemCount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[43]);
}

// ===================================================================

class CMsgResetStrangeGemCountResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgResetStrangeGemCountResponse>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgResetStrangeGemCountResponse::CMsgResetStrangeGemCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgResetStrangeGemCountResponse)
}
CMsgResetStrangeGemCountResponse::CMsgResetStrangeGemCountResponse(const CMsgResetStrangeGemCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgResetStrangeGemCountResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgResetStrangeGemCountResponse)
}

inline void CMsgResetStrangeGemCountResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){0}
  };
}

CMsgResetStrangeGemCountResponse::~CMsgResetStrangeGemCountResponse() {
  // @@protoc_insertion_point(destructor:CMsgResetStrangeGemCountResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgResetStrangeGemCountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgResetStrangeGemCountResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgResetStrangeGemCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgResetStrangeGemCountResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.response_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgResetStrangeGemCountResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgResetStrangeGemCountResponse.EResetGem response = 1 [default = k_ResetGem_Succeeded];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgResetStrangeGemCountResponse_EResetGem_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgResetStrangeGemCountResponse_EResetGem>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgResetStrangeGemCountResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgResetStrangeGemCountResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgResetStrangeGemCountResponse.EResetGem response = 1 [default = k_ResetGem_Succeeded];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgResetStrangeGemCountResponse)
  return target;
}

size_t CMsgResetStrangeGemCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgResetStrangeGemCountResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgResetStrangeGemCountResponse.EResetGem response = 1 [default = k_ResetGem_Succeeded];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgResetStrangeGemCountResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgResetStrangeGemCountResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgResetStrangeGemCountResponse::GetClassData() const { return &_class_data_; }


void CMsgResetStrangeGemCountResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgResetStrangeGemCountResponse*>(&to_msg);
  auto& from = static_cast<const CMsgResetStrangeGemCountResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgResetStrangeGemCountResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgResetStrangeGemCountResponse::CopyFrom(const CMsgResetStrangeGemCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgResetStrangeGemCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgResetStrangeGemCountResponse::IsInitialized() const {
  return true;
}

void CMsgResetStrangeGemCountResponse::InternalSwap(CMsgResetStrangeGemCountResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgResetStrangeGemCountResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[44]);
}

// ===================================================================

class CMsgGCToClientPollFileRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientPollFileRequest>()._impl_._has_bits_);
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_poll_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCToClientPollFileRequest::CMsgGCToClientPollFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientPollFileRequest)
}
CMsgGCToClientPollFileRequest::CMsgGCToClientPollFileRequest(const CMsgGCToClientPollFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToClientPollFileRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.client_version_){}
    , decltype(_impl_.poll_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_name()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.client_version_, &from._impl_.client_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.poll_id_) -
    reinterpret_cast<char*>(&_impl_.client_version_)) + sizeof(_impl_.poll_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientPollFileRequest)
}

inline void CMsgGCToClientPollFileRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.client_version_){0u}
    , decltype(_impl_.poll_id_){0u}
  };
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCToClientPollFileRequest::~CMsgGCToClientPollFileRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientPollFileRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToClientPollFileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_name_.Destroy();
}

void CMsgGCToClientPollFileRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToClientPollFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientPollFileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.file_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.client_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.poll_id_) -
        reinterpret_cast<char*>(&_impl_.client_version_)) + sizeof(_impl_.poll_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientPollFileRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCToClientPollFileRequest.file_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client_version(&has_bits);
          _impl_.client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 poll_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_poll_id(&has_bits);
          _impl_.poll_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientPollFileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientPollFileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToClientPollFileRequest.file_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_name(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_version(), target);
  }

  // optional uint32 poll_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_poll_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientPollFileRequest)
  return target;
}

size_t CMsgGCToClientPollFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientPollFileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string file_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_name());
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_version());
    }

    // optional uint32 poll_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_poll_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientPollFileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToClientPollFileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientPollFileRequest::GetClassData() const { return &_class_data_; }


void CMsgGCToClientPollFileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToClientPollFileRequest*>(&to_msg);
  auto& from = static_cast<const CMsgGCToClientPollFileRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientPollFileRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.client_version_ = from._impl_.client_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.poll_id_ = from._impl_.poll_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientPollFileRequest::CopyFrom(const CMsgGCToClientPollFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientPollFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPollFileRequest::IsInitialized() const {
  return true;
}

void CMsgGCToClientPollFileRequest::InternalSwap(CMsgGCToClientPollFileRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientPollFileRequest, _impl_.poll_id_)
      + sizeof(CMsgGCToClientPollFileRequest::_impl_.poll_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientPollFileRequest, _impl_.client_version_)>(
          reinterpret_cast<char*>(&_impl_.client_version_),
          reinterpret_cast<char*>(&other->_impl_.client_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientPollFileRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[45]);
}

// ===================================================================

class CMsgGCToClientPollFileResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientPollFileResponse>()._impl_._has_bits_);
  static void set_has_poll_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCToClientPollFileResponse::CMsgGCToClientPollFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientPollFileResponse)
}
CMsgGCToClientPollFileResponse::CMsgGCToClientPollFileResponse(const CMsgGCToClientPollFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToClientPollFileResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.poll_id_){}
    , decltype(_impl_.file_size_){}
    , decltype(_impl_.file_crc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.poll_id_, &from._impl_.poll_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.file_crc_) -
    reinterpret_cast<char*>(&_impl_.poll_id_)) + sizeof(_impl_.file_crc_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientPollFileResponse)
}

inline void CMsgGCToClientPollFileResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.poll_id_){0u}
    , decltype(_impl_.file_size_){0u}
    , decltype(_impl_.file_crc_){0u}
  };
}

CMsgGCToClientPollFileResponse::~CMsgGCToClientPollFileResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientPollFileResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToClientPollFileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToClientPollFileResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToClientPollFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientPollFileResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.poll_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.file_crc_) -
        reinterpret_cast<char*>(&_impl_.poll_id_)) + sizeof(_impl_.file_crc_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientPollFileResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 poll_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_poll_id(&has_bits);
          _impl_.poll_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 file_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_file_size(&has_bits);
          _impl_.file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 file_crc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_file_crc(&has_bits);
          _impl_.file_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientPollFileResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientPollFileResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 poll_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_poll_id(), target);
  }

  // optional uint32 file_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_file_size(), target);
  }

  // optional uint32 file_crc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_file_crc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientPollFileResponse)
  return target;
}

size_t CMsgGCToClientPollFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientPollFileResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 poll_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_poll_id());
    }

    // optional uint32 file_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_file_size());
    }

    // optional uint32 file_crc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_file_crc());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientPollFileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToClientPollFileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientPollFileResponse::GetClassData() const { return &_class_data_; }


void CMsgGCToClientPollFileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToClientPollFileResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCToClientPollFileResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientPollFileResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.poll_id_ = from._impl_.poll_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.file_size_ = from._impl_.file_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.file_crc_ = from._impl_.file_crc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientPollFileResponse::CopyFrom(const CMsgGCToClientPollFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientPollFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPollFileResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientPollFileResponse::InternalSwap(CMsgGCToClientPollFileResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientPollFileResponse, _impl_.file_crc_)
      + sizeof(CMsgGCToClientPollFileResponse::_impl_.file_crc_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientPollFileResponse, _impl_.poll_id_)>(
          reinterpret_cast<char*>(&_impl_.poll_id_),
          reinterpret_cast<char*>(&other->_impl_.poll_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientPollFileResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[46]);
}

// ===================================================================

class CMsgGCToGCPerformManualOp::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCPerformManualOp>()._impl_._has_bits_);
  static void set_has_op_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_group_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCPerformManualOp::CMsgGCToGCPerformManualOp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCPerformManualOp)
}
CMsgGCToGCPerformManualOp::CMsgGCToGCPerformManualOp(const CMsgGCToGCPerformManualOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCPerformManualOp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.op_id_){}
    , decltype(_impl_.group_code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.op_id_, &from._impl_.op_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.group_code_) -
    reinterpret_cast<char*>(&_impl_.op_id_)) + sizeof(_impl_.group_code_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCPerformManualOp)
}

inline void CMsgGCToGCPerformManualOp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.op_id_){uint64_t{0u}}
    , decltype(_impl_.group_code_){0u}
  };
}

CMsgGCToGCPerformManualOp::~CMsgGCToGCPerformManualOp() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCPerformManualOp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCPerformManualOp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToGCPerformManualOp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCPerformManualOp::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCPerformManualOp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.op_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.group_code_) -
        reinterpret_cast<char*>(&_impl_.op_id_)) + sizeof(_impl_.group_code_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCPerformManualOp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 op_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_op_id(&has_bits);
          _impl_.op_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 group_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_group_code(&has_bits);
          _impl_.group_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCPerformManualOp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCPerformManualOp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 op_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_op_id(), target);
  }

  // optional uint32 group_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCPerformManualOp)
  return target;
}

size_t CMsgGCToGCPerformManualOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCPerformManualOp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 op_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_op_id());
    }

    // optional uint32 group_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCPerformManualOp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCPerformManualOp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCPerformManualOp::GetClassData() const { return &_class_data_; }


void CMsgGCToGCPerformManualOp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCPerformManualOp*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCPerformManualOp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCPerformManualOp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.op_id_ = from._impl_.op_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.group_code_ = from._impl_.group_code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCPerformManualOp::CopyFrom(const CMsgGCToGCPerformManualOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCPerformManualOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCPerformManualOp::IsInitialized() const {
  return true;
}

void CMsgGCToGCPerformManualOp::InternalSwap(CMsgGCToGCPerformManualOp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCPerformManualOp, _impl_.group_code_)
      + sizeof(CMsgGCToGCPerformManualOp::_impl_.group_code_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCPerformManualOp, _impl_.op_id_)>(
          reinterpret_cast<char*>(&_impl_.op_id_),
          reinterpret_cast<char*>(&other->_impl_.op_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCPerformManualOp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[47]);
}

// ===================================================================

class CMsgGCToGCPerformManualOpCompleted::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCPerformManualOpCompleted>()._impl_._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_gc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCPerformManualOpCompleted::CMsgGCToGCPerformManualOpCompleted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCPerformManualOpCompleted)
}
CMsgGCToGCPerformManualOpCompleted::CMsgGCToGCPerformManualOpCompleted(const CMsgGCToGCPerformManualOpCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCPerformManualOpCompleted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.success_){}
    , decltype(_impl_.source_gc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.source_gc_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.source_gc_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCPerformManualOpCompleted)
}

inline void CMsgGCToGCPerformManualOpCompleted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.source_gc_){-1}
  };
}

CMsgGCToGCPerformManualOpCompleted::~CMsgGCToGCPerformManualOpCompleted() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCPerformManualOpCompleted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCPerformManualOpCompleted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToGCPerformManualOpCompleted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCPerformManualOpCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCPerformManualOpCompleted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.success_ = false;
    _impl_.source_gc_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCPerformManualOpCompleted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 source_gc = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_source_gc(&has_bits);
          _impl_.source_gc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCPerformManualOpCompleted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCPerformManualOpCompleted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // optional int32 source_gc = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_source_gc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCPerformManualOpCompleted)
  return target;
}

size_t CMsgGCToGCPerformManualOpCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCPerformManualOpCompleted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool success = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 source_gc = 2 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_source_gc());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCPerformManualOpCompleted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCPerformManualOpCompleted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCPerformManualOpCompleted::GetClassData() const { return &_class_data_; }


void CMsgGCToGCPerformManualOpCompleted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCPerformManualOpCompleted*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCPerformManualOpCompleted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCPerformManualOpCompleted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.success_ = from._impl_.success_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.source_gc_ = from._impl_.source_gc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCPerformManualOpCompleted::CopyFrom(const CMsgGCToGCPerformManualOpCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCPerformManualOpCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCPerformManualOpCompleted::IsInitialized() const {
  return true;
}

void CMsgGCToGCPerformManualOpCompleted::InternalSwap(CMsgGCToGCPerformManualOpCompleted* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.success_, other->_impl_.success_);
  swap(_impl_.source_gc_, other->_impl_.source_gc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCPerformManualOpCompleted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[48]);
}

// ===================================================================

class CMsgGCToGCReloadServerRegionSettings::_Internal {
 public:
};

CMsgGCToGCReloadServerRegionSettings::CMsgGCToGCReloadServerRegionSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCReloadServerRegionSettings)
}
CMsgGCToGCReloadServerRegionSettings::CMsgGCToGCReloadServerRegionSettings(const CMsgGCToGCReloadServerRegionSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgGCToGCReloadServerRegionSettings* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCReloadServerRegionSettings)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCReloadServerRegionSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCReloadServerRegionSettings::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCReloadServerRegionSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[49]);
}

// ===================================================================

class CMsgGCAdditionalWelcomeMsgList::_Internal {
 public:
};

void CMsgGCAdditionalWelcomeMsgList::clear_welcome_messages() {
  _impl_.welcome_messages_.Clear();
}
CMsgGCAdditionalWelcomeMsgList::CMsgGCAdditionalWelcomeMsgList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCAdditionalWelcomeMsgList)
}
CMsgGCAdditionalWelcomeMsgList::CMsgGCAdditionalWelcomeMsgList(const CMsgGCAdditionalWelcomeMsgList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCAdditionalWelcomeMsgList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.welcome_messages_){from._impl_.welcome_messages_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCAdditionalWelcomeMsgList)
}

inline void CMsgGCAdditionalWelcomeMsgList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.welcome_messages_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgGCAdditionalWelcomeMsgList::~CMsgGCAdditionalWelcomeMsgList() {
  // @@protoc_insertion_point(destructor:CMsgGCAdditionalWelcomeMsgList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCAdditionalWelcomeMsgList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.welcome_messages_.~RepeatedPtrField();
}

void CMsgGCAdditionalWelcomeMsgList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCAdditionalWelcomeMsgList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCAdditionalWelcomeMsgList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.welcome_messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCAdditionalWelcomeMsgList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CExtraMsgBlock welcome_messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_welcome_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCAdditionalWelcomeMsgList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCAdditionalWelcomeMsgList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CExtraMsgBlock welcome_messages = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_welcome_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_welcome_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCAdditionalWelcomeMsgList)
  return target;
}

size_t CMsgGCAdditionalWelcomeMsgList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCAdditionalWelcomeMsgList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CExtraMsgBlock welcome_messages = 1;
  total_size += 1UL * this->_internal_welcome_messages_size();
  for (const auto& msg : this->_impl_.welcome_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCAdditionalWelcomeMsgList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCAdditionalWelcomeMsgList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCAdditionalWelcomeMsgList::GetClassData() const { return &_class_data_; }


void CMsgGCAdditionalWelcomeMsgList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCAdditionalWelcomeMsgList*>(&to_msg);
  auto& from = static_cast<const CMsgGCAdditionalWelcomeMsgList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCAdditionalWelcomeMsgList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.welcome_messages_.MergeFrom(from._impl_.welcome_messages_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCAdditionalWelcomeMsgList::CopyFrom(const CMsgGCAdditionalWelcomeMsgList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCAdditionalWelcomeMsgList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCAdditionalWelcomeMsgList::IsInitialized() const {
  return true;
}

void CMsgGCAdditionalWelcomeMsgList::InternalSwap(CMsgGCAdditionalWelcomeMsgList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.welcome_messages_.InternalSwap(&other->_impl_.welcome_messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCAdditionalWelcomeMsgList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[50]);
}

// ===================================================================

class CMsgApplyRemoteConVars_ConVar::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgApplyRemoteConVars_ConVar>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version_min(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_version_max(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgApplyRemoteConVars_ConVar::CMsgApplyRemoteConVars_ConVar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgApplyRemoteConVars.ConVar)
}
CMsgApplyRemoteConVars_ConVar::CMsgApplyRemoteConVars_ConVar(const CMsgApplyRemoteConVars_ConVar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgApplyRemoteConVars_ConVar* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.version_min_){}
    , decltype(_impl_.version_max_){}
    , decltype(_impl_.platform_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.version_min_, &from._impl_.version_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.platform_) -
    reinterpret_cast<char*>(&_impl_.version_min_)) + sizeof(_impl_.platform_));
  // @@protoc_insertion_point(copy_constructor:CMsgApplyRemoteConVars.ConVar)
}

inline void CMsgApplyRemoteConVars_ConVar::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.version_min_){0u}
    , decltype(_impl_.version_max_){0u}
    , decltype(_impl_.platform_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgApplyRemoteConVars_ConVar::~CMsgApplyRemoteConVars_ConVar() {
  // @@protoc_insertion_point(destructor:CMsgApplyRemoteConVars.ConVar)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgApplyRemoteConVars_ConVar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
}

void CMsgApplyRemoteConVars_ConVar::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgApplyRemoteConVars_ConVar::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgApplyRemoteConVars.ConVar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.version_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.platform_) -
        reinterpret_cast<char*>(&_impl_.version_min_)) + sizeof(_impl_.platform_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgApplyRemoteConVars_ConVar::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgApplyRemoteConVars.ConVar.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgApplyRemoteConVars.ConVar.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 version_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_version_min(&has_bits);
          _impl_.version_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 version_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_version_max(&has_bits);
          _impl_.version_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EGCPlatform platform = 5 [default = k_eGCPlatform_None];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGCPlatform_IsValid(val))) {
            _internal_set_platform(static_cast<::EGCPlatform>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgApplyRemoteConVars_ConVar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgApplyRemoteConVars.ConVar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgApplyRemoteConVars.ConVar.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgApplyRemoteConVars.ConVar.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // optional uint32 version_min = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version_min(), target);
  }

  // optional uint32 version_max = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_version_max(), target);
  }

  // optional .EGCPlatform platform = 5 [default = k_eGCPlatform_None];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_platform(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgApplyRemoteConVars.ConVar)
  return target;
}

size_t CMsgApplyRemoteConVars_ConVar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgApplyRemoteConVars.ConVar)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

    // optional uint32 version_min = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version_min());
    }

    // optional uint32 version_max = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version_max());
    }

    // optional .EGCPlatform platform = 5 [default = k_eGCPlatform_None];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_platform());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgApplyRemoteConVars_ConVar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgApplyRemoteConVars_ConVar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgApplyRemoteConVars_ConVar::GetClassData() const { return &_class_data_; }


void CMsgApplyRemoteConVars_ConVar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgApplyRemoteConVars_ConVar*>(&to_msg);
  auto& from = static_cast<const CMsgApplyRemoteConVars_ConVar&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgApplyRemoteConVars.ConVar)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.version_min_ = from._impl_.version_min_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.version_max_ = from._impl_.version_max_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.platform_ = from._impl_.platform_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgApplyRemoteConVars_ConVar::CopyFrom(const CMsgApplyRemoteConVars_ConVar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgApplyRemoteConVars.ConVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyRemoteConVars_ConVar::IsInitialized() const {
  return true;
}

void CMsgApplyRemoteConVars_ConVar::InternalSwap(CMsgApplyRemoteConVars_ConVar* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgApplyRemoteConVars_ConVar, _impl_.platform_)
      + sizeof(CMsgApplyRemoteConVars_ConVar::_impl_.platform_)
      - PROTOBUF_FIELD_OFFSET(CMsgApplyRemoteConVars_ConVar, _impl_.version_min_)>(
          reinterpret_cast<char*>(&_impl_.version_min_),
          reinterpret_cast<char*>(&other->_impl_.version_min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgApplyRemoteConVars_ConVar::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[51]);
}

// ===================================================================

class CMsgApplyRemoteConVars::_Internal {
 public:
};

CMsgApplyRemoteConVars::CMsgApplyRemoteConVars(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgApplyRemoteConVars)
}
CMsgApplyRemoteConVars::CMsgApplyRemoteConVars(const CMsgApplyRemoteConVars& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgApplyRemoteConVars* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.con_vars_){from._impl_.con_vars_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgApplyRemoteConVars)
}

inline void CMsgApplyRemoteConVars::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.con_vars_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgApplyRemoteConVars::~CMsgApplyRemoteConVars() {
  // @@protoc_insertion_point(destructor:CMsgApplyRemoteConVars)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgApplyRemoteConVars::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.con_vars_.~RepeatedPtrField();
}

void CMsgApplyRemoteConVars::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgApplyRemoteConVars::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgApplyRemoteConVars)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.con_vars_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgApplyRemoteConVars::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgApplyRemoteConVars.ConVar con_vars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_con_vars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgApplyRemoteConVars::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgApplyRemoteConVars)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgApplyRemoteConVars.ConVar con_vars = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_con_vars_size()); i < n; i++) {
    const auto& repfield = this->_internal_con_vars(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgApplyRemoteConVars)
  return target;
}

size_t CMsgApplyRemoteConVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgApplyRemoteConVars)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgApplyRemoteConVars.ConVar con_vars = 1;
  total_size += 1UL * this->_internal_con_vars_size();
  for (const auto& msg : this->_impl_.con_vars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgApplyRemoteConVars::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgApplyRemoteConVars::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgApplyRemoteConVars::GetClassData() const { return &_class_data_; }


void CMsgApplyRemoteConVars::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgApplyRemoteConVars*>(&to_msg);
  auto& from = static_cast<const CMsgApplyRemoteConVars&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgApplyRemoteConVars)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.con_vars_.MergeFrom(from._impl_.con_vars_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgApplyRemoteConVars::CopyFrom(const CMsgApplyRemoteConVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgApplyRemoteConVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyRemoteConVars::IsInitialized() const {
  return true;
}

void CMsgApplyRemoteConVars::InternalSwap(CMsgApplyRemoteConVars* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.con_vars_.InternalSwap(&other->_impl_.con_vars_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgApplyRemoteConVars::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[52]);
}

// ===================================================================

class CMsgGCToClientApplyRemoteConVars::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientApplyRemoteConVars>()._impl_._has_bits_);
  static const ::CMsgApplyRemoteConVars& msg(const CMsgGCToClientApplyRemoteConVars* msg);
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgApplyRemoteConVars&
CMsgGCToClientApplyRemoteConVars::_Internal::msg(const CMsgGCToClientApplyRemoteConVars* msg) {
  return *msg->_impl_.msg_;
}
CMsgGCToClientApplyRemoteConVars::CMsgGCToClientApplyRemoteConVars(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientApplyRemoteConVars)
}
CMsgGCToClientApplyRemoteConVars::CMsgGCToClientApplyRemoteConVars(const CMsgGCToClientApplyRemoteConVars& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToClientApplyRemoteConVars* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_msg()) {
    _this->_impl_.msg_ = new ::CMsgApplyRemoteConVars(*from._impl_.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientApplyRemoteConVars)
}

inline void CMsgGCToClientApplyRemoteConVars::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){nullptr}
  };
}

CMsgGCToClientApplyRemoteConVars::~CMsgGCToClientApplyRemoteConVars() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientApplyRemoteConVars)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToClientApplyRemoteConVars::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.msg_;
}

void CMsgGCToClientApplyRemoteConVars::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToClientApplyRemoteConVars::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientApplyRemoteConVars)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.msg_ != nullptr);
    _impl_.msg_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientApplyRemoteConVars::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgApplyRemoteConVars msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientApplyRemoteConVars::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientApplyRemoteConVars)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgApplyRemoteConVars msg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::msg(this),
        _Internal::msg(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientApplyRemoteConVars)
  return target;
}

size_t CMsgGCToClientApplyRemoteConVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientApplyRemoteConVars)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgApplyRemoteConVars msg = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.msg_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientApplyRemoteConVars::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToClientApplyRemoteConVars::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientApplyRemoteConVars::GetClassData() const { return &_class_data_; }


void CMsgGCToClientApplyRemoteConVars::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToClientApplyRemoteConVars*>(&to_msg);
  auto& from = static_cast<const CMsgGCToClientApplyRemoteConVars&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientApplyRemoteConVars)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_msg()) {
    _this->_internal_mutable_msg()->::CMsgApplyRemoteConVars::MergeFrom(
        from._internal_msg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientApplyRemoteConVars::CopyFrom(const CMsgGCToClientApplyRemoteConVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientApplyRemoteConVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientApplyRemoteConVars::IsInitialized() const {
  return true;
}

void CMsgGCToClientApplyRemoteConVars::InternalSwap(CMsgGCToClientApplyRemoteConVars* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.msg_, other->_impl_.msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientApplyRemoteConVars::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[53]);
}

// ===================================================================

class CMsgGCToServerApplyRemoteConVars::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerApplyRemoteConVars>()._impl_._has_bits_);
  static const ::CMsgApplyRemoteConVars& msg(const CMsgGCToServerApplyRemoteConVars* msg);
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgApplyRemoteConVars&
CMsgGCToServerApplyRemoteConVars::_Internal::msg(const CMsgGCToServerApplyRemoteConVars* msg) {
  return *msg->_impl_.msg_;
}
CMsgGCToServerApplyRemoteConVars::CMsgGCToServerApplyRemoteConVars(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerApplyRemoteConVars)
}
CMsgGCToServerApplyRemoteConVars::CMsgGCToServerApplyRemoteConVars(const CMsgGCToServerApplyRemoteConVars& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerApplyRemoteConVars* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_msg()) {
    _this->_impl_.msg_ = new ::CMsgApplyRemoteConVars(*from._impl_.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerApplyRemoteConVars)
}

inline void CMsgGCToServerApplyRemoteConVars::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){nullptr}
  };
}

CMsgGCToServerApplyRemoteConVars::~CMsgGCToServerApplyRemoteConVars() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerApplyRemoteConVars)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerApplyRemoteConVars::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.msg_;
}

void CMsgGCToServerApplyRemoteConVars::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerApplyRemoteConVars::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerApplyRemoteConVars)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.msg_ != nullptr);
    _impl_.msg_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerApplyRemoteConVars::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgApplyRemoteConVars msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerApplyRemoteConVars::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerApplyRemoteConVars)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgApplyRemoteConVars msg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::msg(this),
        _Internal::msg(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerApplyRemoteConVars)
  return target;
}

size_t CMsgGCToServerApplyRemoteConVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerApplyRemoteConVars)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgApplyRemoteConVars msg = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.msg_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerApplyRemoteConVars::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerApplyRemoteConVars::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerApplyRemoteConVars::GetClassData() const { return &_class_data_; }


void CMsgGCToServerApplyRemoteConVars::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerApplyRemoteConVars*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerApplyRemoteConVars&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerApplyRemoteConVars)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_msg()) {
    _this->_internal_mutable_msg()->::CMsgApplyRemoteConVars::MergeFrom(
        from._internal_msg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerApplyRemoteConVars::CopyFrom(const CMsgGCToServerApplyRemoteConVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerApplyRemoteConVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerApplyRemoteConVars::IsInitialized() const {
  return true;
}

void CMsgGCToServerApplyRemoteConVars::InternalSwap(CMsgGCToServerApplyRemoteConVars* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.msg_, other->_impl_.msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerApplyRemoteConVars::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[54]);
}

// ===================================================================

class CMsgClientToGCIntegrityStatus_keyvalue::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCIntegrityStatus_keyvalue>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_extended(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCIntegrityStatus_keyvalue::CMsgClientToGCIntegrityStatus_keyvalue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCIntegrityStatus.keyvalue)
}
CMsgClientToGCIntegrityStatus_keyvalue::CMsgClientToGCIntegrityStatus_keyvalue(const CMsgClientToGCIntegrityStatus_keyvalue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCIntegrityStatus_keyvalue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_value_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.extended_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string_value()) {
    _this->_impl_.string_value_.Set(from._internal_string_value(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCIntegrityStatus.keyvalue)
}

inline void CMsgClientToGCIntegrityStatus_keyvalue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_value_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.extended_){0u}
    , decltype(_impl_.value_){uint64_t{0u}}
  };
  _impl_.string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientToGCIntegrityStatus_keyvalue::~CMsgClientToGCIntegrityStatus_keyvalue() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCIntegrityStatus.keyvalue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCIntegrityStatus_keyvalue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.string_value_.Destroy();
}

void CMsgClientToGCIntegrityStatus_keyvalue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCIntegrityStatus_keyvalue::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCIntegrityStatus.keyvalue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.string_value_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.value_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCIntegrityStatus_keyvalue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 extended = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_extended(&has_bits);
          _impl_.extended_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string string_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientToGCIntegrityStatus.keyvalue.string_value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCIntegrityStatus_keyvalue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCIntegrityStatus.keyvalue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 extended = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_extended(), target);
  }

  // optional uint64 value = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_value(), target);
  }

  // optional string string_value = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCIntegrityStatus.keyvalue.string_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_string_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCIntegrityStatus.keyvalue)
  return target;
}

size_t CMsgClientToGCIntegrityStatus_keyvalue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCIntegrityStatus.keyvalue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string string_value = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

    // optional uint32 extended = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extended());
    }

    // optional uint64 value = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCIntegrityStatus_keyvalue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCIntegrityStatus_keyvalue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCIntegrityStatus_keyvalue::GetClassData() const { return &_class_data_; }


void CMsgClientToGCIntegrityStatus_keyvalue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCIntegrityStatus_keyvalue*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCIntegrityStatus_keyvalue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCIntegrityStatus.keyvalue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.extended_ = from._impl_.extended_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCIntegrityStatus_keyvalue::CopyFrom(const CMsgClientToGCIntegrityStatus_keyvalue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCIntegrityStatus.keyvalue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCIntegrityStatus_keyvalue::IsInitialized() const {
  return true;
}

void CMsgClientToGCIntegrityStatus_keyvalue::InternalSwap(CMsgClientToGCIntegrityStatus_keyvalue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string_value_, lhs_arena,
      &other->_impl_.string_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCIntegrityStatus_keyvalue, _impl_.value_)
      + sizeof(CMsgClientToGCIntegrityStatus_keyvalue::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCIntegrityStatus_keyvalue, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCIntegrityStatus_keyvalue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[55]);
}

// ===================================================================

class CMsgClientToGCIntegrityStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCIntegrityStatus>()._impl_._has_bits_);
  static void set_has_report(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_secure_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCIntegrityStatus::CMsgClientToGCIntegrityStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCIntegrityStatus)
}
CMsgClientToGCIntegrityStatus::CMsgClientToGCIntegrityStatus(const CMsgClientToGCIntegrityStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCIntegrityStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.diagnostics_){from._impl_.diagnostics_}
    , decltype(_impl_.report_){}
    , decltype(_impl_.secure_allowed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.report_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.report_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_report()) {
    _this->_impl_.report_.Set(from._internal_report(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.secure_allowed_ = from._impl_.secure_allowed_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCIntegrityStatus)
}

inline void CMsgClientToGCIntegrityStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.diagnostics_){arena}
    , decltype(_impl_.report_){}
    , decltype(_impl_.secure_allowed_){false}
  };
  _impl_.report_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.report_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientToGCIntegrityStatus::~CMsgClientToGCIntegrityStatus() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCIntegrityStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCIntegrityStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.diagnostics_.~RepeatedPtrField();
  _impl_.report_.Destroy();
}

void CMsgClientToGCIntegrityStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCIntegrityStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCIntegrityStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.diagnostics_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.report_.ClearNonDefaultToEmpty();
  }
  _impl_.secure_allowed_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCIntegrityStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string report = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_report();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientToGCIntegrityStatus.report");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool secure_allowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_secure_allowed(&has_bits);
          _impl_.secure_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientToGCIntegrityStatus.keyvalue diagnostics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_diagnostics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCIntegrityStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCIntegrityStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string report = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_report().data(), static_cast<int>(this->_internal_report().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCIntegrityStatus.report");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_report(), target);
  }

  // optional bool secure_allowed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_secure_allowed(), target);
  }

  // repeated .CMsgClientToGCIntegrityStatus.keyvalue diagnostics = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_diagnostics_size()); i < n; i++) {
    const auto& repfield = this->_internal_diagnostics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCIntegrityStatus)
  return target;
}

size_t CMsgClientToGCIntegrityStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCIntegrityStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientToGCIntegrityStatus.keyvalue diagnostics = 3;
  total_size += 1UL * this->_internal_diagnostics_size();
  for (const auto& msg : this->_impl_.diagnostics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string report = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_report());
    }

    // optional bool secure_allowed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCIntegrityStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCIntegrityStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCIntegrityStatus::GetClassData() const { return &_class_data_; }


void CMsgClientToGCIntegrityStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCIntegrityStatus*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCIntegrityStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCIntegrityStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.diagnostics_.MergeFrom(from._impl_.diagnostics_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_report(from._internal_report());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.secure_allowed_ = from._impl_.secure_allowed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCIntegrityStatus::CopyFrom(const CMsgClientToGCIntegrityStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCIntegrityStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCIntegrityStatus::IsInitialized() const {
  return true;
}

void CMsgClientToGCIntegrityStatus::InternalSwap(CMsgClientToGCIntegrityStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.diagnostics_.InternalSwap(&other->_impl_.diagnostics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.report_, lhs_arena,
      &other->_impl_.report_, rhs_arena
  );
  swap(_impl_.secure_allowed_, other->_impl_.secure_allowed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCIntegrityStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[56]);
}

// ===================================================================

class CMsgClientToGCAggregateMetrics_SingleMetric::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCAggregateMetrics_SingleMetric>()._impl_._has_bits_);
  static void set_has_metric_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_metric_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCAggregateMetrics_SingleMetric::CMsgClientToGCAggregateMetrics_SingleMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCAggregateMetrics.SingleMetric)
}
CMsgClientToGCAggregateMetrics_SingleMetric::CMsgClientToGCAggregateMetrics_SingleMetric(const CMsgClientToGCAggregateMetrics_SingleMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCAggregateMetrics_SingleMetric* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metric_name_){}
    , decltype(_impl_.metric_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.metric_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metric_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_metric_name()) {
    _this->_impl_.metric_name_.Set(from._internal_metric_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.metric_count_ = from._impl_.metric_count_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCAggregateMetrics.SingleMetric)
}

inline void CMsgClientToGCAggregateMetrics_SingleMetric::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metric_name_){}
    , decltype(_impl_.metric_count_){0u}
  };
  _impl_.metric_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metric_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientToGCAggregateMetrics_SingleMetric::~CMsgClientToGCAggregateMetrics_SingleMetric() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCAggregateMetrics.SingleMetric)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCAggregateMetrics_SingleMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metric_name_.Destroy();
}

void CMsgClientToGCAggregateMetrics_SingleMetric::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCAggregateMetrics_SingleMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCAggregateMetrics.SingleMetric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.metric_name_.ClearNonDefaultToEmpty();
  }
  _impl_.metric_count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCAggregateMetrics_SingleMetric::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string metric_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_metric_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientToGCAggregateMetrics.SingleMetric.metric_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 metric_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_metric_count(&has_bits);
          _impl_.metric_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCAggregateMetrics_SingleMetric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCAggregateMetrics.SingleMetric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string metric_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_metric_name().data(), static_cast<int>(this->_internal_metric_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCAggregateMetrics.SingleMetric.metric_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_metric_name(), target);
  }

  // optional uint32 metric_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_metric_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCAggregateMetrics.SingleMetric)
  return target;
}

size_t CMsgClientToGCAggregateMetrics_SingleMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCAggregateMetrics.SingleMetric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string metric_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_metric_name());
    }

    // optional uint32 metric_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_metric_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCAggregateMetrics_SingleMetric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCAggregateMetrics_SingleMetric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCAggregateMetrics_SingleMetric::GetClassData() const { return &_class_data_; }


void CMsgClientToGCAggregateMetrics_SingleMetric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCAggregateMetrics_SingleMetric*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCAggregateMetrics_SingleMetric&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCAggregateMetrics.SingleMetric)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_metric_name(from._internal_metric_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.metric_count_ = from._impl_.metric_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCAggregateMetrics_SingleMetric::CopyFrom(const CMsgClientToGCAggregateMetrics_SingleMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCAggregateMetrics.SingleMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCAggregateMetrics_SingleMetric::IsInitialized() const {
  return true;
}

void CMsgClientToGCAggregateMetrics_SingleMetric::InternalSwap(CMsgClientToGCAggregateMetrics_SingleMetric* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metric_name_, lhs_arena,
      &other->_impl_.metric_name_, rhs_arena
  );
  swap(_impl_.metric_count_, other->_impl_.metric_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCAggregateMetrics_SingleMetric::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[57]);
}

// ===================================================================

class CMsgClientToGCAggregateMetrics::_Internal {
 public:
};

CMsgClientToGCAggregateMetrics::CMsgClientToGCAggregateMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCAggregateMetrics)
}
CMsgClientToGCAggregateMetrics::CMsgClientToGCAggregateMetrics(const CMsgClientToGCAggregateMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCAggregateMetrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metrics_){from._impl_.metrics_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCAggregateMetrics)
}

inline void CMsgClientToGCAggregateMetrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metrics_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgClientToGCAggregateMetrics::~CMsgClientToGCAggregateMetrics() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCAggregateMetrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCAggregateMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metrics_.~RepeatedPtrField();
}

void CMsgClientToGCAggregateMetrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCAggregateMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCAggregateMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metrics_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCAggregateMetrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgClientToGCAggregateMetrics.SingleMetric metrics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCAggregateMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCAggregateMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientToGCAggregateMetrics.SingleMetric metrics = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCAggregateMetrics)
  return target;
}

size_t CMsgClientToGCAggregateMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCAggregateMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientToGCAggregateMetrics.SingleMetric metrics = 1;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->_impl_.metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCAggregateMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCAggregateMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCAggregateMetrics::GetClassData() const { return &_class_data_; }


void CMsgClientToGCAggregateMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCAggregateMetrics*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCAggregateMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCAggregateMetrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metrics_.MergeFrom(from._impl_.metrics_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCAggregateMetrics::CopyFrom(const CMsgClientToGCAggregateMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCAggregateMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCAggregateMetrics::IsInitialized() const {
  return true;
}

void CMsgClientToGCAggregateMetrics::InternalSwap(CMsgClientToGCAggregateMetrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metrics_.InternalSwap(&other->_impl_.metrics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCAggregateMetrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[58]);
}

// ===================================================================

class CMsgGCToClientAggregateMetricsBackoff::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientAggregateMetricsBackoff>()._impl_._has_bits_);
  static void set_has_upload_rate_modifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToClientAggregateMetricsBackoff::CMsgGCToClientAggregateMetricsBackoff(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientAggregateMetricsBackoff)
}
CMsgGCToClientAggregateMetricsBackoff::CMsgGCToClientAggregateMetricsBackoff(const CMsgGCToClientAggregateMetricsBackoff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToClientAggregateMetricsBackoff* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.upload_rate_modifier_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.upload_rate_modifier_ = from._impl_.upload_rate_modifier_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientAggregateMetricsBackoff)
}

inline void CMsgGCToClientAggregateMetricsBackoff::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.upload_rate_modifier_){0}
  };
}

CMsgGCToClientAggregateMetricsBackoff::~CMsgGCToClientAggregateMetricsBackoff() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientAggregateMetricsBackoff)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToClientAggregateMetricsBackoff::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToClientAggregateMetricsBackoff::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToClientAggregateMetricsBackoff::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientAggregateMetricsBackoff)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.upload_rate_modifier_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientAggregateMetricsBackoff::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float upload_rate_modifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_upload_rate_modifier(&has_bits);
          _impl_.upload_rate_modifier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientAggregateMetricsBackoff::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientAggregateMetricsBackoff)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float upload_rate_modifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_upload_rate_modifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientAggregateMetricsBackoff)
  return target;
}

size_t CMsgGCToClientAggregateMetricsBackoff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientAggregateMetricsBackoff)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float upload_rate_modifier = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientAggregateMetricsBackoff::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToClientAggregateMetricsBackoff::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientAggregateMetricsBackoff::GetClassData() const { return &_class_data_; }


void CMsgGCToClientAggregateMetricsBackoff::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToClientAggregateMetricsBackoff*>(&to_msg);
  auto& from = static_cast<const CMsgGCToClientAggregateMetricsBackoff&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientAggregateMetricsBackoff)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_upload_rate_modifier()) {
    _this->_internal_set_upload_rate_modifier(from._internal_upload_rate_modifier());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientAggregateMetricsBackoff::CopyFrom(const CMsgGCToClientAggregateMetricsBackoff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientAggregateMetricsBackoff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientAggregateMetricsBackoff::IsInitialized() const {
  return true;
}

void CMsgGCToClientAggregateMetricsBackoff::InternalSwap(CMsgGCToClientAggregateMetricsBackoff* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.upload_rate_modifier_, other->_impl_.upload_rate_modifier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientAggregateMetricsBackoff::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[59]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CGCStorePurchaseInit_LineItem*
Arena::CreateMaybeMessage< ::CGCStorePurchaseInit_LineItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCStorePurchaseInit_LineItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCStorePurchaseInit*
Arena::CreateMaybeMessage< ::CMsgGCStorePurchaseInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCStorePurchaseInit >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCStorePurchaseInitResponse*
Arena::CreateMaybeMessage< ::CMsgGCStorePurchaseInitResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCStorePurchaseInitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPingData*
Arena::CreateMaybeMessage< ::CMsgClientPingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPingData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgInviteToParty*
Arena::CreateMaybeMessage< ::CMsgInviteToParty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgInviteToParty >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgInviteToLobby*
Arena::CreateMaybeMessage< ::CMsgInviteToLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgInviteToLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgInvitationCreated*
Arena::CreateMaybeMessage< ::CMsgInvitationCreated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgInvitationCreated >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyInviteResponse*
Arena::CreateMaybeMessage< ::CMsgPartyInviteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyInviteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyInviteResponse*
Arena::CreateMaybeMessage< ::CMsgLobbyInviteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyInviteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgKickFromParty*
Arena::CreateMaybeMessage< ::CMsgKickFromParty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgKickFromParty >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLeaveParty*
Arena::CreateMaybeMessage< ::CMsgLeaveParty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLeaveParty >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCustomGameInstallStatus*
Arena::CreateMaybeMessage< ::CMsgCustomGameInstallStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCustomGameInstallStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerAvailable*
Arena::CreateMaybeMessage< ::CMsgServerAvailable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerAvailable >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLANServerAvailable*
Arena::CreateMaybeMessage< ::CMsgLANServerAvailable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLANServerAvailable >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconGameAccountClient*
Arena::CreateMaybeMessage< ::CSOEconGameAccountClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconGameAccountClient >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgApplyStrangePart*
Arena::CreateMaybeMessage< ::CMsgApplyStrangePart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgApplyStrangePart >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgApplyPennantUpgrade*
Arena::CreateMaybeMessage< ::CMsgApplyPennantUpgrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgApplyPennantUpgrade >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgApplyEggEssence*
Arena::CreateMaybeMessage< ::CMsgApplyEggEssence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgApplyEggEssence >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconItemAttribute*
Arena::CreateMaybeMessage< ::CSOEconItemAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconItemAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconItemEquipped*
Arena::CreateMaybeMessage< ::CSOEconItemEquipped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconItemEquipped >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconItem*
Arena::CreateMaybeMessage< ::CSOEconItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSortItems*
Arena::CreateMaybeMessage< ::CMsgSortItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSortItems >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgItemAcknowledged*
Arena::CreateMaybeMessage< ::CMsgItemAcknowledged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgItemAcknowledged >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetItemPositions_ItemPosition*
Arena::CreateMaybeMessage< ::CMsgSetItemPositions_ItemPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetItemPositions_ItemPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetItemPositions*
Arena::CreateMaybeMessage< ::CMsgSetItemPositions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetItemPositions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCStorePurchaseCancel*
Arena::CreateMaybeMessage< ::CMsgGCStorePurchaseCancel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCStorePurchaseCancel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCStorePurchaseCancelResponse*
Arena::CreateMaybeMessage< ::CMsgGCStorePurchaseCancelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCStorePurchaseCancelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCStorePurchaseFinalize*
Arena::CreateMaybeMessage< ::CMsgGCStorePurchaseFinalize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCStorePurchaseFinalize >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCStorePurchaseFinalizeResponse*
Arena::CreateMaybeMessage< ::CMsgGCStorePurchaseFinalizeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCStorePurchaseFinalizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCBannedWordListUpdated*
Arena::CreateMaybeMessage< ::CMsgGCToGCBannedWordListUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCBannedWordListUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCDirtySDOCache*
Arena::CreateMaybeMessage< ::CMsgGCToGCDirtySDOCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCDirtySDOCache >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSDONoMemcached*
Arena::CreateMaybeMessage< ::CMsgSDONoMemcached >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSDONoMemcached >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCUpdateSQLKeyValue*
Arena::CreateMaybeMessage< ::CMsgGCToGCUpdateSQLKeyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCUpdateSQLKeyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCServerVersionUpdated*
Arena::CreateMaybeMessage< ::CMsgGCServerVersionUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCServerVersionUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCClientVersionUpdated*
Arena::CreateMaybeMessage< ::CMsgGCClientVersionUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCClientVersionUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCWebAPIAccountChanged*
Arena::CreateMaybeMessage< ::CMsgGCToGCWebAPIAccountChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCWebAPIAccountChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgExtractGems*
Arena::CreateMaybeMessage< ::CMsgExtractGems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgExtractGems >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgExtractGemsResponse*
Arena::CreateMaybeMessage< ::CMsgExtractGemsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgExtractGemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAddSocket*
Arena::CreateMaybeMessage< ::CMsgAddSocket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAddSocket >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAddSocketResponse*
Arena::CreateMaybeMessage< ::CMsgAddSocketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAddSocketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAddItemToSocketData*
Arena::CreateMaybeMessage< ::CMsgAddItemToSocketData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAddItemToSocketData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAddItemToSocket*
Arena::CreateMaybeMessage< ::CMsgAddItemToSocket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAddItemToSocket >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAddItemToSocketResponse*
Arena::CreateMaybeMessage< ::CMsgAddItemToSocketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAddItemToSocketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgResetStrangeGemCount*
Arena::CreateMaybeMessage< ::CMsgResetStrangeGemCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgResetStrangeGemCount >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgResetStrangeGemCountResponse*
Arena::CreateMaybeMessage< ::CMsgResetStrangeGemCountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgResetStrangeGemCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientPollFileRequest*
Arena::CreateMaybeMessage< ::CMsgGCToClientPollFileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientPollFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientPollFileResponse*
Arena::CreateMaybeMessage< ::CMsgGCToClientPollFileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientPollFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCPerformManualOp*
Arena::CreateMaybeMessage< ::CMsgGCToGCPerformManualOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCPerformManualOp >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCPerformManualOpCompleted*
Arena::CreateMaybeMessage< ::CMsgGCToGCPerformManualOpCompleted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCPerformManualOpCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCReloadServerRegionSettings*
Arena::CreateMaybeMessage< ::CMsgGCToGCReloadServerRegionSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCReloadServerRegionSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCAdditionalWelcomeMsgList*
Arena::CreateMaybeMessage< ::CMsgGCAdditionalWelcomeMsgList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCAdditionalWelcomeMsgList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgApplyRemoteConVars_ConVar*
Arena::CreateMaybeMessage< ::CMsgApplyRemoteConVars_ConVar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgApplyRemoteConVars_ConVar >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgApplyRemoteConVars*
Arena::CreateMaybeMessage< ::CMsgApplyRemoteConVars >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgApplyRemoteConVars >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientApplyRemoteConVars*
Arena::CreateMaybeMessage< ::CMsgGCToClientApplyRemoteConVars >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientApplyRemoteConVars >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerApplyRemoteConVars*
Arena::CreateMaybeMessage< ::CMsgGCToServerApplyRemoteConVars >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerApplyRemoteConVars >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCIntegrityStatus_keyvalue*
Arena::CreateMaybeMessage< ::CMsgClientToGCIntegrityStatus_keyvalue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCIntegrityStatus_keyvalue >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCIntegrityStatus*
Arena::CreateMaybeMessage< ::CMsgClientToGCIntegrityStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCIntegrityStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCAggregateMetrics_SingleMetric*
Arena::CreateMaybeMessage< ::CMsgClientToGCAggregateMetrics_SingleMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCAggregateMetrics_SingleMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCAggregateMetrics*
Arena::CreateMaybeMessage< ::CMsgClientToGCAggregateMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCAggregateMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientAggregateMetricsBackoff*
Arena::CreateMaybeMessage< ::CMsgGCToClientAggregateMetricsBackoff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientAggregateMetricsBackoff >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
