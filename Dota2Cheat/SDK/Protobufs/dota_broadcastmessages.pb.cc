// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_broadcastmessages.proto

#include "dota_broadcastmessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CDOTABroadcastMsg::CDOTABroadcastMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/1} {}
struct CDOTABroadcastMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTABroadcastMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTABroadcastMsgDefaultTypeInternal() {}
  union {
    CDOTABroadcastMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTABroadcastMsgDefaultTypeInternal _CDOTABroadcastMsg_default_instance_;
PROTOBUF_CONSTEXPR CDOTABroadcastMsg_LANLobbyRequest::CDOTABroadcastMsg_LANLobbyRequest(
    ::_pbi::ConstantInitialized) {}
struct CDOTABroadcastMsg_LANLobbyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTABroadcastMsg_LANLobbyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTABroadcastMsg_LANLobbyRequestDefaultTypeInternal() {}
  union {
    CDOTABroadcastMsg_LANLobbyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTABroadcastMsg_LANLobbyRequestDefaultTypeInternal _CDOTABroadcastMsg_LANLobbyRequest_default_instance_;
PROTOBUF_CONSTEXPR CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CDOTABroadcastMsg_LANLobbyReply_CLobbyMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTABroadcastMsg_LANLobbyReply_CLobbyMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTABroadcastMsg_LANLobbyReply_CLobbyMemberDefaultTypeInternal() {}
  union {
    CDOTABroadcastMsg_LANLobbyReply_CLobbyMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTABroadcastMsg_LANLobbyReply_CLobbyMemberDefaultTypeInternal _CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_default_instance_;
PROTOBUF_CONSTEXPR CDOTABroadcastMsg_LANLobbyReply::CDOTABroadcastMsg_LANLobbyReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.members_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.tournament_id_)*/0u
  , /*decltype(_impl_.tournament_game_id_)*/0u
  , /*decltype(_impl_.requires_pass_key_)*/false
  , /*decltype(_impl_.leader_account_id_)*/0u
  , /*decltype(_impl_.game_mode_)*/0u
  , /*decltype(_impl_.players_)*/0u} {}
struct CDOTABroadcastMsg_LANLobbyReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTABroadcastMsg_LANLobbyReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTABroadcastMsg_LANLobbyReplyDefaultTypeInternal() {}
  union {
    CDOTABroadcastMsg_LANLobbyReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTABroadcastMsg_LANLobbyReplyDefaultTypeInternal _CDOTABroadcastMsg_LANLobbyReply_default_instance_;
static ::_pb::Metadata file_level_metadata_dota_5fbroadcastmessages_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dota_5fbroadcastmessages_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dota_5fbroadcastmessages_2eproto = nullptr;

const uint32_t TableStruct_dota_5fbroadcastmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg, _impl_.msg_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember, _impl_.player_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply, _impl_.tournament_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply, _impl_.tournament_game_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply, _impl_.members_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply, _impl_.requires_pass_key_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply, _impl_.leader_account_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply, _impl_.game_mode_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply, _impl_.players_),
  1,
  2,
  3,
  ~0u,
  4,
  5,
  6,
  0,
  7,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CDOTABroadcastMsg)},
  { 10, -1, -1, sizeof(::CDOTABroadcastMsg_LANLobbyRequest)},
  { 16, 24, -1, sizeof(::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember)},
  { 26, 41, -1, sizeof(::CDOTABroadcastMsg_LANLobbyReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CDOTABroadcastMsg_default_instance_._instance,
  &::_CDOTABroadcastMsg_LANLobbyRequest_default_instance_._instance,
  &::_CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_default_instance_._instance,
  &::_CDOTABroadcastMsg_LANLobbyReply_default_instance_._instance,
};

const char descriptor_table_protodef_dota_5fbroadcastmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034dota_broadcastmessages.proto\"`\n\021CDOTAB"
  "roadcastMsg\022>\n\004type\030\001 \002(\0162\027.EDotaBroadca"
  "stMessages:\027DOTA_BM_LANLobbyRequest\022\013\n\003m"
  "sg\030\002 \001(\014\"#\n!CDOTABroadcastMsg_LANLobbyRe"
  "quest\"\301\002\n\037CDOTABroadcastMsg_LANLobbyRepl"
  "y\022\n\n\002id\030\001 \001(\004\022\025\n\rtournament_id\030\002 \001(\r\022\032\n\022"
  "tournament_game_id\030\003 \001(\r\022>\n\007members\030\004 \003("
  "\0132-.CDOTABroadcastMsg_LANLobbyReply.CLob"
  "byMember\022\031\n\021requires_pass_key\030\005 \001(\010\022\031\n\021l"
  "eader_account_id\030\006 \001(\r\022\021\n\tgame_mode\030\007 \001("
  "\r\022\014\n\004name\030\010 \001(\t\022\017\n\007players\030\t \001(\r\0327\n\014CLob"
  "byMember\022\022\n\naccount_id\030\001 \001(\r\022\023\n\013player_n"
  "ame\030\002 \001(\t*P\n\026EDotaBroadcastMessages\022\033\n\027D"
  "OTA_BM_LANLobbyRequest\020\001\022\031\n\025DOTA_BM_LANL"
  "obbyReply\020\002"
  ;
static ::_pbi::once_flag descriptor_table_dota_5fbroadcastmessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dota_5fbroadcastmessages_2eproto = {
    false, false, 571, descriptor_table_protodef_dota_5fbroadcastmessages_2eproto,
    "dota_broadcastmessages.proto",
    &descriptor_table_dota_5fbroadcastmessages_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_dota_5fbroadcastmessages_2eproto::offsets,
    file_level_metadata_dota_5fbroadcastmessages_2eproto, file_level_enum_descriptors_dota_5fbroadcastmessages_2eproto,
    file_level_service_descriptors_dota_5fbroadcastmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dota_5fbroadcastmessages_2eproto_getter() {
  return &descriptor_table_dota_5fbroadcastmessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dota_5fbroadcastmessages_2eproto(&descriptor_table_dota_5fbroadcastmessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDotaBroadcastMessages_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fbroadcastmessages_2eproto);
  return file_level_enum_descriptors_dota_5fbroadcastmessages_2eproto[0];
}
bool EDotaBroadcastMessages_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CDOTABroadcastMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTABroadcastMsg>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

CDOTABroadcastMsg::CDOTABroadcastMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTABroadcastMsg)
}
CDOTABroadcastMsg::CDOTABroadcastMsg(const CDOTABroadcastMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTABroadcastMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:CDOTABroadcastMsg)
}

inline void CDOTABroadcastMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.type_){1}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTABroadcastMsg::~CDOTABroadcastMsg() {
  // @@protoc_insertion_point(destructor:CDOTABroadcastMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTABroadcastMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void CDOTABroadcastMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTABroadcastMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTABroadcastMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.msg_.ClearNonDefaultToEmpty();
    }
    _impl_.type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTABroadcastMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EDotaBroadcastMessages_IsValid(val))) {
            _internal_set_type(static_cast<::EDotaBroadcastMessages>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTABroadcastMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTABroadcastMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional bytes msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTABroadcastMsg)
  return target;
}

size_t CDOTABroadcastMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTABroadcastMsg)
  size_t total_size = 0;

  // required .EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
  if (_internal_has_type()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes msg = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTABroadcastMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTABroadcastMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTABroadcastMsg::GetClassData() const { return &_class_data_; }


void CDOTABroadcastMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTABroadcastMsg*>(&to_msg);
  auto& from = static_cast<const CDOTABroadcastMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTABroadcastMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTABroadcastMsg::CopyFrom(const CDOTABroadcastMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTABroadcastMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcastMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CDOTABroadcastMsg::InternalSwap(CDOTABroadcastMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTABroadcastMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fbroadcastmessages_2eproto_getter, &descriptor_table_dota_5fbroadcastmessages_2eproto_once,
      file_level_metadata_dota_5fbroadcastmessages_2eproto[0]);
}

// ===================================================================

class CDOTABroadcastMsg_LANLobbyRequest::_Internal {
 public:
};

CDOTABroadcastMsg_LANLobbyRequest::CDOTABroadcastMsg_LANLobbyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CDOTABroadcastMsg_LANLobbyRequest)
}
CDOTABroadcastMsg_LANLobbyRequest::CDOTABroadcastMsg_LANLobbyRequest(const CDOTABroadcastMsg_LANLobbyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CDOTABroadcastMsg_LANLobbyRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTABroadcastMsg_LANLobbyRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTABroadcastMsg_LANLobbyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTABroadcastMsg_LANLobbyRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CDOTABroadcastMsg_LANLobbyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fbroadcastmessages_2eproto_getter, &descriptor_table_dota_5fbroadcastmessages_2eproto_once,
      file_level_metadata_dota_5fbroadcastmessages_2eproto[1]);
}

// ===================================================================

class CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTABroadcastMsg_LANLobbyReply_CLobbyMember>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
}
CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember(const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_name_){}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_player_name()) {
    _this->_impl_.player_name_.Set(from._internal_player_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
}

inline void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_name_){}
    , decltype(_impl_.account_id_){0u}
  };
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::~CDOTABroadcastMsg_LANLobbyReply_CLobbyMember() {
  // @@protoc_insertion_point(destructor:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_name_.Destroy();
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.player_name_.ClearNonDefaultToEmpty();
  }
  _impl_.account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string player_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_player_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_player_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  return target;
}

size_t CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string player_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_name());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::GetClassData() const { return &_class_data_; }


void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTABroadcastMsg_LANLobbyReply_CLobbyMember*>(&to_msg);
  auto& from = static_cast<const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_player_name(from._internal_player_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::CopyFrom(const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::IsInitialized() const {
  return true;
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::InternalSwap(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_name_, lhs_arena,
      &other->_impl_.player_name_, rhs_arena
  );
  swap(_impl_.account_id_, other->_impl_.account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fbroadcastmessages_2eproto_getter, &descriptor_table_dota_5fbroadcastmessages_2eproto_once,
      file_level_metadata_dota_5fbroadcastmessages_2eproto[2]);
}

// ===================================================================

class CDOTABroadcastMsg_LANLobbyReply::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTABroadcastMsg_LANLobbyReply>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tournament_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tournament_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_requires_pass_key(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_leader_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_players(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CDOTABroadcastMsg_LANLobbyReply::CDOTABroadcastMsg_LANLobbyReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTABroadcastMsg_LANLobbyReply)
}
CDOTABroadcastMsg_LANLobbyReply::CDOTABroadcastMsg_LANLobbyReply(const CDOTABroadcastMsg_LANLobbyReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTABroadcastMsg_LANLobbyReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.members_){from._impl_.members_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.tournament_id_){}
    , decltype(_impl_.tournament_game_id_){}
    , decltype(_impl_.requires_pass_key_){}
    , decltype(_impl_.leader_account_id_){}
    , decltype(_impl_.game_mode_){}
    , decltype(_impl_.players_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.players_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.players_));
  // @@protoc_insertion_point(copy_constructor:CDOTABroadcastMsg_LANLobbyReply)
}

inline void CDOTABroadcastMsg_LANLobbyReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.members_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.tournament_id_){0u}
    , decltype(_impl_.tournament_game_id_){0u}
    , decltype(_impl_.requires_pass_key_){false}
    , decltype(_impl_.leader_account_id_){0u}
    , decltype(_impl_.game_mode_){0u}
    , decltype(_impl_.players_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTABroadcastMsg_LANLobbyReply::~CDOTABroadcastMsg_LANLobbyReply() {
  // @@protoc_insertion_point(destructor:CDOTABroadcastMsg_LANLobbyReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTABroadcastMsg_LANLobbyReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.members_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void CDOTABroadcastMsg_LANLobbyReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTABroadcastMsg_LANLobbyReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTABroadcastMsg_LANLobbyReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.members_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.players_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.players_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTABroadcastMsg_LANLobbyReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tournament_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tournament_id(&has_bits);
          _impl_.tournament_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tournament_game_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tournament_game_id(&has_bits);
          _impl_.tournament_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool requires_pass_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_requires_pass_key(&has_bits);
          _impl_.requires_pass_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 leader_account_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_leader_account_id(&has_bits);
          _impl_.leader_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_game_mode(&has_bits);
          _impl_.game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTABroadcastMsg_LANLobbyReply.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 players = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_players(&has_bits);
          _impl_.players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTABroadcastMsg_LANLobbyReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTABroadcastMsg_LANLobbyReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 tournament_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tournament_id(), target);
  }

  // optional uint32 tournament_game_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tournament_game_id(), target);
  }

  // repeated .CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool requires_pass_key = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_requires_pass_key(), target);
  }

  // optional uint32 leader_account_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_leader_account_id(), target);
  }

  // optional uint32 game_mode = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_game_mode(), target);
  }

  // optional string name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTABroadcastMsg_LANLobbyReply.name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_name(), target);
  }

  // optional uint32 players = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_players(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTABroadcastMsg_LANLobbyReply)
  return target;
}

size_t CDOTABroadcastMsg_LANLobbyReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTABroadcastMsg_LANLobbyReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->_impl_.members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
    }

    // optional uint32 tournament_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tournament_id());
    }

    // optional uint32 tournament_game_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tournament_game_id());
    }

    // optional bool requires_pass_key = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 leader_account_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leader_account_id());
    }

    // optional uint32 game_mode = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_mode());
    }

    // optional uint32 players = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_players());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTABroadcastMsg_LANLobbyReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTABroadcastMsg_LANLobbyReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTABroadcastMsg_LANLobbyReply::GetClassData() const { return &_class_data_; }


void CDOTABroadcastMsg_LANLobbyReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTABroadcastMsg_LANLobbyReply*>(&to_msg);
  auto& from = static_cast<const CDOTABroadcastMsg_LANLobbyReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTABroadcastMsg_LANLobbyReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.members_.MergeFrom(from._impl_.members_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tournament_id_ = from._impl_.tournament_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tournament_game_id_ = from._impl_.tournament_game_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.requires_pass_key_ = from._impl_.requires_pass_key_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.leader_account_id_ = from._impl_.leader_account_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.game_mode_ = from._impl_.game_mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.players_ = from._impl_.players_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTABroadcastMsg_LANLobbyReply::CopyFrom(const CDOTABroadcastMsg_LANLobbyReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTABroadcastMsg_LANLobbyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcastMsg_LANLobbyReply::IsInitialized() const {
  return true;
}

void CDOTABroadcastMsg_LANLobbyReply::InternalSwap(CDOTABroadcastMsg_LANLobbyReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.members_.InternalSwap(&other->_impl_.members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, _impl_.players_)
      + sizeof(CDOTABroadcastMsg_LANLobbyReply::_impl_.players_)
      - PROTOBUF_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTABroadcastMsg_LANLobbyReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fbroadcastmessages_2eproto_getter, &descriptor_table_dota_5fbroadcastmessages_2eproto_once,
      file_level_metadata_dota_5fbroadcastmessages_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CDOTABroadcastMsg*
Arena::CreateMaybeMessage< ::CDOTABroadcastMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTABroadcastMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTABroadcastMsg_LANLobbyRequest*
Arena::CreateMaybeMessage< ::CDOTABroadcastMsg_LANLobbyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTABroadcastMsg_LANLobbyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember*
Arena::CreateMaybeMessage< ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTABroadcastMsg_LANLobbyReply*
Arena::CreateMaybeMessage< ::CDOTABroadcastMsg_LANLobbyReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTABroadcastMsg_LANLobbyReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
