// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_battle_report.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages.pb.h"
#include "dota_shared_enums.pb.h"
#include "dota_gcmessages_common.pb.h"
#include "dota_gcmessages_webapi.pb.h"
#include "gcsdk_gcmessages.pb.h"
#include "base_gcmessages.pb.h"
#include "econ_gcmessages.pb.h"
#include "dota_gcmessages_client.pb.h"
#include "valveextensions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
class CMsgBattleReport;
struct CMsgBattleReportDefaultTypeInternal;
extern CMsgBattleReportDefaultTypeInternal _CMsgBattleReport_default_instance_;
class CMsgBattleReportAggregateStats;
struct CMsgBattleReportAggregateStatsDefaultTypeInternal;
extern CMsgBattleReportAggregateStatsDefaultTypeInternal _CMsgBattleReportAggregateStats_default_instance_;
class CMsgBattleReportAggregateStats_CMsgBattleReportAggregate;
struct CMsgBattleReportAggregateStats_CMsgBattleReportAggregateDefaultTypeInternal;
extern CMsgBattleReportAggregateStats_CMsgBattleReportAggregateDefaultTypeInternal _CMsgBattleReportAggregateStats_CMsgBattleReportAggregate_default_instance_;
class CMsgBattleReportAggregateStats_CMsgBattleReportStat;
struct CMsgBattleReportAggregateStats_CMsgBattleReportStatDefaultTypeInternal;
extern CMsgBattleReportAggregateStats_CMsgBattleReportStatDefaultTypeInternal _CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_;
class CMsgBattleReportAggregatedGeneralStats;
struct CMsgBattleReportAggregatedGeneralStatsDefaultTypeInternal;
extern CMsgBattleReportAggregatedGeneralStatsDefaultTypeInternal _CMsgBattleReportAggregatedGeneralStats_default_instance_;
class CMsgBattleReportHighlights;
struct CMsgBattleReportHighlightsDefaultTypeInternal;
extern CMsgBattleReportHighlightsDefaultTypeInternal _CMsgBattleReportHighlights_default_instance_;
class CMsgBattleReportInfo;
struct CMsgBattleReportInfoDefaultTypeInternal;
extern CMsgBattleReportInfoDefaultTypeInternal _CMsgBattleReportInfo_default_instance_;
class CMsgBattleReportInfoList;
struct CMsgBattleReportInfoListDefaultTypeInternal;
extern CMsgBattleReportInfoListDefaultTypeInternal _CMsgBattleReportInfoList_default_instance_;
class CMsgBattleReport_Game;
struct CMsgBattleReport_GameDefaultTypeInternal;
extern CMsgBattleReport_GameDefaultTypeInternal _CMsgBattleReport_Game_default_instance_;
class CMsgBattleReport_GameList;
struct CMsgBattleReport_GameListDefaultTypeInternal;
extern CMsgBattleReport_GameListDefaultTypeInternal _CMsgBattleReport_GameList_default_instance_;
class CMsgBattleReport_Highlight;
struct CMsgBattleReport_HighlightDefaultTypeInternal;
extern CMsgBattleReport_HighlightDefaultTypeInternal _CMsgBattleReport_Highlight_default_instance_;
class CMsgBattleReport_HighlightGeneral;
struct CMsgBattleReport_HighlightGeneralDefaultTypeInternal;
extern CMsgBattleReport_HighlightGeneralDefaultTypeInternal _CMsgBattleReport_HighlightGeneral_default_instance_;
class CMsgClientToGCAcknowledgeBattleReport;
struct CMsgClientToGCAcknowledgeBattleReportDefaultTypeInternal;
extern CMsgClientToGCAcknowledgeBattleReportDefaultTypeInternal _CMsgClientToGCAcknowledgeBattleReport_default_instance_;
class CMsgClientToGCAcknowledgeBattleReportResponse;
struct CMsgClientToGCAcknowledgeBattleReportResponseDefaultTypeInternal;
extern CMsgClientToGCAcknowledgeBattleReportResponseDefaultTypeInternal _CMsgClientToGCAcknowledgeBattleReportResponse_default_instance_;
class CMsgClientToGCGetBattleReport;
struct CMsgClientToGCGetBattleReportDefaultTypeInternal;
extern CMsgClientToGCGetBattleReportDefaultTypeInternal _CMsgClientToGCGetBattleReport_default_instance_;
class CMsgClientToGCGetBattleReportAggregateStats;
struct CMsgClientToGCGetBattleReportAggregateStatsDefaultTypeInternal;
extern CMsgClientToGCGetBattleReportAggregateStatsDefaultTypeInternal _CMsgClientToGCGetBattleReportAggregateStats_default_instance_;
class CMsgClientToGCGetBattleReportAggregateStatsResponse;
struct CMsgClientToGCGetBattleReportAggregateStatsResponseDefaultTypeInternal;
extern CMsgClientToGCGetBattleReportAggregateStatsResponseDefaultTypeInternal _CMsgClientToGCGetBattleReportAggregateStatsResponse_default_instance_;
class CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey;
struct CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKeyDefaultTypeInternal;
extern CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKeyDefaultTypeInternal _CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey_default_instance_;
class CMsgClientToGCGetBattleReportInfo;
struct CMsgClientToGCGetBattleReportInfoDefaultTypeInternal;
extern CMsgClientToGCGetBattleReportInfoDefaultTypeInternal _CMsgClientToGCGetBattleReportInfo_default_instance_;
class CMsgClientToGCGetBattleReportInfoResponse;
struct CMsgClientToGCGetBattleReportInfoResponseDefaultTypeInternal;
extern CMsgClientToGCGetBattleReportInfoResponseDefaultTypeInternal _CMsgClientToGCGetBattleReportInfoResponse_default_instance_;
class CMsgClientToGCGetBattleReportMatchHistory;
struct CMsgClientToGCGetBattleReportMatchHistoryDefaultTypeInternal;
extern CMsgClientToGCGetBattleReportMatchHistoryDefaultTypeInternal _CMsgClientToGCGetBattleReportMatchHistory_default_instance_;
class CMsgClientToGCGetBattleReportMatchHistoryResponse;
struct CMsgClientToGCGetBattleReportMatchHistoryResponseDefaultTypeInternal;
extern CMsgClientToGCGetBattleReportMatchHistoryResponseDefaultTypeInternal _CMsgClientToGCGetBattleReportMatchHistoryResponse_default_instance_;
class CMsgClientToGCGetBattleReportResponse;
struct CMsgClientToGCGetBattleReportResponseDefaultTypeInternal;
extern CMsgClientToGCGetBattleReportResponseDefaultTypeInternal _CMsgClientToGCGetBattleReportResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgBattleReport* Arena::CreateMaybeMessage<::CMsgBattleReport>(Arena*);
template<> ::CMsgBattleReportAggregateStats* Arena::CreateMaybeMessage<::CMsgBattleReportAggregateStats>(Arena*);
template<> ::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* Arena::CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate>(Arena*);
template<> ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* Arena::CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(Arena*);
template<> ::CMsgBattleReportAggregatedGeneralStats* Arena::CreateMaybeMessage<::CMsgBattleReportAggregatedGeneralStats>(Arena*);
template<> ::CMsgBattleReportHighlights* Arena::CreateMaybeMessage<::CMsgBattleReportHighlights>(Arena*);
template<> ::CMsgBattleReportInfo* Arena::CreateMaybeMessage<::CMsgBattleReportInfo>(Arena*);
template<> ::CMsgBattleReportInfoList* Arena::CreateMaybeMessage<::CMsgBattleReportInfoList>(Arena*);
template<> ::CMsgBattleReport_Game* Arena::CreateMaybeMessage<::CMsgBattleReport_Game>(Arena*);
template<> ::CMsgBattleReport_GameList* Arena::CreateMaybeMessage<::CMsgBattleReport_GameList>(Arena*);
template<> ::CMsgBattleReport_Highlight* Arena::CreateMaybeMessage<::CMsgBattleReport_Highlight>(Arena*);
template<> ::CMsgBattleReport_HighlightGeneral* Arena::CreateMaybeMessage<::CMsgBattleReport_HighlightGeneral>(Arena*);
template<> ::CMsgClientToGCAcknowledgeBattleReport* Arena::CreateMaybeMessage<::CMsgClientToGCAcknowledgeBattleReport>(Arena*);
template<> ::CMsgClientToGCAcknowledgeBattleReportResponse* Arena::CreateMaybeMessage<::CMsgClientToGCAcknowledgeBattleReportResponse>(Arena*);
template<> ::CMsgClientToGCGetBattleReport* Arena::CreateMaybeMessage<::CMsgClientToGCGetBattleReport>(Arena*);
template<> ::CMsgClientToGCGetBattleReportAggregateStats* Arena::CreateMaybeMessage<::CMsgClientToGCGetBattleReportAggregateStats>(Arena*);
template<> ::CMsgClientToGCGetBattleReportAggregateStatsResponse* Arena::CreateMaybeMessage<::CMsgClientToGCGetBattleReportAggregateStatsResponse>(Arena*);
template<> ::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey* Arena::CreateMaybeMessage<::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey>(Arena*);
template<> ::CMsgClientToGCGetBattleReportInfo* Arena::CreateMaybeMessage<::CMsgClientToGCGetBattleReportInfo>(Arena*);
template<> ::CMsgClientToGCGetBattleReportInfoResponse* Arena::CreateMaybeMessage<::CMsgClientToGCGetBattleReportInfoResponse>(Arena*);
template<> ::CMsgClientToGCGetBattleReportMatchHistory* Arena::CreateMaybeMessage<::CMsgClientToGCGetBattleReportMatchHistory>(Arena*);
template<> ::CMsgClientToGCGetBattleReportMatchHistoryResponse* Arena::CreateMaybeMessage<::CMsgClientToGCGetBattleReportMatchHistoryResponse>(Arena*);
template<> ::CMsgClientToGCGetBattleReportResponse* Arena::CreateMaybeMessage<::CMsgClientToGCGetBattleReportResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CMsgClientToGCGetBattleReportResponse_EResponse : int {
  CMsgClientToGCGetBattleReportResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCGetBattleReportResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCGetBattleReportResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCGetBattleReportResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCGetBattleReportResponse_EResponse_k_ePermissionDenied = 4,
  CMsgClientToGCGetBattleReportResponse_EResponse_k_eNotSubscribedToDotaPlus = 5,
  CMsgClientToGCGetBattleReportResponse_EResponse_k_eInvalidParameters = 6,
  CMsgClientToGCGetBattleReportResponse_EResponse_k_eUnableToGetPlusSubInfo = 7,
  CMsgClientToGCGetBattleReportResponse_EResponse_k_eUnableToLoadBattleReport = 8,
  CMsgClientToGCGetBattleReportResponse_EResponse_k_eUnableToSaveBattleReport = 9,
  CMsgClientToGCGetBattleReportResponse_EResponse_k_eUnableToGetAggregates = 10,
  CMsgClientToGCGetBattleReportResponse_EResponse_k_eNotEnoughGamesPlayed = 11
};
bool CMsgClientToGCGetBattleReportResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCGetBattleReportResponse_EResponse CMsgClientToGCGetBattleReportResponse_EResponse_EResponse_MIN = CMsgClientToGCGetBattleReportResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCGetBattleReportResponse_EResponse CMsgClientToGCGetBattleReportResponse_EResponse_EResponse_MAX = CMsgClientToGCGetBattleReportResponse_EResponse_k_eNotEnoughGamesPlayed;
constexpr int CMsgClientToGCGetBattleReportResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCGetBattleReportResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCGetBattleReportResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCGetBattleReportResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCGetBattleReportResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCGetBattleReportResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCGetBattleReportResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCGetBattleReportResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCGetBattleReportResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCGetBattleReportResponse_EResponse>(
    CMsgClientToGCGetBattleReportResponse_EResponse_descriptor(), name, value);
}
enum CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse : int {
  CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_k_ePermissionDenied = 4,
  CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_k_eInvalidParams = 5,
  CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_k_eNotSubscribedToDotaPlus = 6
};
bool CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_EResponse_MIN = CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_EResponse_MAX = CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_k_eNotSubscribedToDotaPlus;
constexpr int CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse>(
    CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_descriptor(), name, value);
}
enum CMsgClientToGCGetBattleReportInfoResponse_EResponse : int {
  CMsgClientToGCGetBattleReportInfoResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCGetBattleReportInfoResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCGetBattleReportInfoResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCGetBattleReportInfoResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCGetBattleReportInfoResponse_EResponse_k_ePermissionDenied = 4,
  CMsgClientToGCGetBattleReportInfoResponse_EResponse_k_eNotSubscribedToDotaPlus = 5
};
bool CMsgClientToGCGetBattleReportInfoResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCGetBattleReportInfoResponse_EResponse CMsgClientToGCGetBattleReportInfoResponse_EResponse_EResponse_MIN = CMsgClientToGCGetBattleReportInfoResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCGetBattleReportInfoResponse_EResponse CMsgClientToGCGetBattleReportInfoResponse_EResponse_EResponse_MAX = CMsgClientToGCGetBattleReportInfoResponse_EResponse_k_eNotSubscribedToDotaPlus;
constexpr int CMsgClientToGCGetBattleReportInfoResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCGetBattleReportInfoResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCGetBattleReportInfoResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCGetBattleReportInfoResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCGetBattleReportInfoResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCGetBattleReportInfoResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCGetBattleReportInfoResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCGetBattleReportInfoResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCGetBattleReportInfoResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCGetBattleReportInfoResponse_EResponse>(
    CMsgClientToGCGetBattleReportInfoResponse_EResponse_descriptor(), name, value);
}
enum CMsgClientToGCAcknowledgeBattleReportResponse_EResponse : int {
  CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_eTimeout = 4,
  CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_ePermissionDenied = 5,
  CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_eUnableToLoadBattleReport = 6,
  CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_eAlreadyAcknowledged = 7,
  CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_eUnknownReport = 8,
  CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_eNotSubscribedToDotaPlus = 9,
  CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_eNotEnoughGamesPlayed = 10
};
bool CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCAcknowledgeBattleReportResponse_EResponse CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_EResponse_MIN = CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCAcknowledgeBattleReportResponse_EResponse CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_EResponse_MAX = CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_eNotEnoughGamesPlayed;
constexpr int CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCAcknowledgeBattleReportResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCAcknowledgeBattleReportResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCAcknowledgeBattleReportResponse_EResponse>(
    CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_descriptor(), name, value);
}
enum CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse : int {
  CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_k_eTimeout = 4,
  CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_k_ePermissionDenied = 5,
  CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_k_eNotSubscribedToDotaPlus = 6
};
bool CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_EResponse_MIN = CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_EResponse_MAX = CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_k_eNotSubscribedToDotaPlus;
constexpr int CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse>(
    CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_descriptor(), name, value);
}
enum CMsgBattleReport_HighlightType : int {
  k_eHighlightTypeInvalid = -1,
  k_eGameWinrate = 0,
  k_eLaneWinrate = 1,
  k_eMMRDelta = 2,
  k_eNumHeroesPlayed = 3,
  k_eNumGamesPlayed = 4,
  k_eAveragePowerRunesTaken = 5,
  k_eAverageBountyRunesTaken = 6,
  k_eTotalKillEnemyT1First = 7,
  k_eTotalRoshanKills = 8,
  k_eTotalDewards = 9,
  k_eTotalCampsStacked = 10,
  k_eMaxWinstreak = 11,
  k_eAverageDewards = 12,
  k_eAverageKills = 13,
  k_eMaxKills = 14,
  k_eAverageAssists = 15,
  k_eMaxAssists = 16,
  k_eAverageDeaths = 17,
  k_eMinDeaths = 18,
  k_eAverageCampsStacked = 19,
  k_eTotalLastHits = 20,
  k_eAverageLastHits = 21,
  k_eTotalDenies = 22,
  k_eAverageDenies = 23,
  k_eTotalGamesWithRoshanAdvantage = 24,
  k_ePercentGamesWithRoshanAdvantage = 25,
  k_eAverageStunDuration = 26,
  k_eTotalStunDuration = 27,
  k_eAverageTeleportsUsed = 28,
  k_eTotalTeleportsUsed = 29,
  k_eAverageHeroDamage = 30,
  k_eTotalHeroDamage = 31,
  k_eAverageHeroHealing = 32,
  k_eTotalHeroHealing = 33,
  k_eAverageTowerDamage = 34,
  k_eTotalTowerDamage = 35,
  k_eMaxLossStreak = 36,
  k_eAverageGameDuration = 37,
  k_eMaxGameDuration = 38,
  k_eMinGameDuration = 39,
  k_eAverageWinDuration = 40,
  k_eMaxWinDuration = 41,
  k_eMinWinDuration = 42,
  k_eAverageLossDuration = 43,
  k_eMaxLossDuration = 44,
  k_eMinLossDuration = 45,
  k_ePctGamesEnemyT1TakenFirst = 46,
  k_eMaxCampsStacked = 47,
  k_eMaxDewards = 48,
  k_eMaxRoshanKills = 49,
  k_eMaxBountyRunesTaken = 50,
  k_eMaxPowerRunesTaken = 51,
  k_eMaxDeaths = 52,
  k_eMaxLastHits = 53,
  k_eMaxDenies = 54,
  k_eRadiantWinRate = 55,
  k_eDireWinRate = 56,
  k_eRadiantGameCount = 57,
  k_eDireGameCount = 58,
  k_eMaxDamage = 59,
  k_eMaxHealing = 60,
  k_eMaxTowerDamage = 61,
  k_eAverageGPM = 62,
  k_eMaxGPM = 63,
  k_eAverageXPM = 64,
  k_eMaxXPM = 65
};
bool CMsgBattleReport_HighlightType_IsValid(int value);
constexpr CMsgBattleReport_HighlightType CMsgBattleReport_HighlightType_MIN = k_eHighlightTypeInvalid;
constexpr CMsgBattleReport_HighlightType CMsgBattleReport_HighlightType_MAX = k_eMaxXPM;
constexpr int CMsgBattleReport_HighlightType_ARRAYSIZE = CMsgBattleReport_HighlightType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgBattleReport_HighlightType_descriptor();
template<typename T>
inline const std::string& CMsgBattleReport_HighlightType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgBattleReport_HighlightType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgBattleReport_HighlightType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgBattleReport_HighlightType_descriptor(), enum_t_value);
}
inline bool CMsgBattleReport_HighlightType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgBattleReport_HighlightType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgBattleReport_HighlightType>(
    CMsgBattleReport_HighlightType_descriptor(), name, value);
}
enum CMsgBattleReport_HighlightCategory : int {
  k_eHighlightGeneral = 0,
  k_eHighlightHero = 1,
  k_eHighlightRole = 2
};
bool CMsgBattleReport_HighlightCategory_IsValid(int value);
constexpr CMsgBattleReport_HighlightCategory CMsgBattleReport_HighlightCategory_MIN = k_eHighlightGeneral;
constexpr CMsgBattleReport_HighlightCategory CMsgBattleReport_HighlightCategory_MAX = k_eHighlightRole;
constexpr int CMsgBattleReport_HighlightCategory_ARRAYSIZE = CMsgBattleReport_HighlightCategory_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgBattleReport_HighlightCategory_descriptor();
template<typename T>
inline const std::string& CMsgBattleReport_HighlightCategory_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgBattleReport_HighlightCategory>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgBattleReport_HighlightCategory_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgBattleReport_HighlightCategory_descriptor(), enum_t_value);
}
inline bool CMsgBattleReport_HighlightCategory_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgBattleReport_HighlightCategory* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgBattleReport_HighlightCategory>(
    CMsgBattleReport_HighlightCategory_descriptor(), name, value);
}
enum CMsgBattleReport_Role : int {
  k_eUnknownRole = -1,
  k_eSafelane = 0,
  k_eMidlane = 1,
  k_eOfflane = 2,
  k_eSupport = 3,
  k_eHardSupport = 4
};
bool CMsgBattleReport_Role_IsValid(int value);
constexpr CMsgBattleReport_Role CMsgBattleReport_Role_MIN = k_eUnknownRole;
constexpr CMsgBattleReport_Role CMsgBattleReport_Role_MAX = k_eHardSupport;
constexpr int CMsgBattleReport_Role_ARRAYSIZE = CMsgBattleReport_Role_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgBattleReport_Role_descriptor();
template<typename T>
inline const std::string& CMsgBattleReport_Role_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgBattleReport_Role>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgBattleReport_Role_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgBattleReport_Role_descriptor(), enum_t_value);
}
inline bool CMsgBattleReport_Role_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgBattleReport_Role* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgBattleReport_Role>(
    CMsgBattleReport_Role_descriptor(), name, value);
}
enum CMsgBattleReport_CompareContext : int {
  k_eCompareContextInvalid = -1,
  k_eAbsoluteValue = 0,
  k_ePlayersOfSimilarRank = 1,
  k_eAllPlayers = 2,
  k_ePlayersPersonalHistory = 3
};
bool CMsgBattleReport_CompareContext_IsValid(int value);
constexpr CMsgBattleReport_CompareContext CMsgBattleReport_CompareContext_MIN = k_eCompareContextInvalid;
constexpr CMsgBattleReport_CompareContext CMsgBattleReport_CompareContext_MAX = k_ePlayersPersonalHistory;
constexpr int CMsgBattleReport_CompareContext_ARRAYSIZE = CMsgBattleReport_CompareContext_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgBattleReport_CompareContext_descriptor();
template<typename T>
inline const std::string& CMsgBattleReport_CompareContext_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgBattleReport_CompareContext>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgBattleReport_CompareContext_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgBattleReport_CompareContext_descriptor(), enum_t_value);
}
inline bool CMsgBattleReport_CompareContext_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgBattleReport_CompareContext* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgBattleReport_CompareContext>(
    CMsgBattleReport_CompareContext_descriptor(), name, value);
}
enum CMsgBattleReport_HighlightTier : int {
  k_eHighlightTierLow = -1,
  k_eHighlightTierNone = 0,
  k_eHighlightTier1 = 1,
  k_eHighlightTier2 = 2,
  k_eHighlightTier3 = 3,
  k_eHighlightTierCustom = 4
};
bool CMsgBattleReport_HighlightTier_IsValid(int value);
constexpr CMsgBattleReport_HighlightTier CMsgBattleReport_HighlightTier_MIN = k_eHighlightTierLow;
constexpr CMsgBattleReport_HighlightTier CMsgBattleReport_HighlightTier_MAX = k_eHighlightTierCustom;
constexpr int CMsgBattleReport_HighlightTier_ARRAYSIZE = CMsgBattleReport_HighlightTier_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgBattleReport_HighlightTier_descriptor();
template<typename T>
inline const std::string& CMsgBattleReport_HighlightTier_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgBattleReport_HighlightTier>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgBattleReport_HighlightTier_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgBattleReport_HighlightTier_descriptor(), enum_t_value);
}
inline bool CMsgBattleReport_HighlightTier_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgBattleReport_HighlightTier* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgBattleReport_HighlightTier>(
    CMsgBattleReport_HighlightTier_descriptor(), name, value);
}
enum CMsgBattleReport_HighlightRarity : int {
  k_eHighlightCommon = 0,
  k_eHighlightUncommon = 1,
  k_eHighlightRare = 2
};
bool CMsgBattleReport_HighlightRarity_IsValid(int value);
constexpr CMsgBattleReport_HighlightRarity CMsgBattleReport_HighlightRarity_MIN = k_eHighlightCommon;
constexpr CMsgBattleReport_HighlightRarity CMsgBattleReport_HighlightRarity_MAX = k_eHighlightRare;
constexpr int CMsgBattleReport_HighlightRarity_ARRAYSIZE = CMsgBattleReport_HighlightRarity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgBattleReport_HighlightRarity_descriptor();
template<typename T>
inline const std::string& CMsgBattleReport_HighlightRarity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgBattleReport_HighlightRarity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgBattleReport_HighlightRarity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgBattleReport_HighlightRarity_descriptor(), enum_t_value);
}
inline bool CMsgBattleReport_HighlightRarity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgBattleReport_HighlightRarity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgBattleReport_HighlightRarity>(
    CMsgBattleReport_HighlightRarity_descriptor(), name, value);
}
enum CMsgBattleReport_EOutcome : int {
  k_eWin = 0,
  k_eLoss = 1
};
bool CMsgBattleReport_EOutcome_IsValid(int value);
constexpr CMsgBattleReport_EOutcome CMsgBattleReport_EOutcome_MIN = k_eWin;
constexpr CMsgBattleReport_EOutcome CMsgBattleReport_EOutcome_MAX = k_eLoss;
constexpr int CMsgBattleReport_EOutcome_ARRAYSIZE = CMsgBattleReport_EOutcome_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgBattleReport_EOutcome_descriptor();
template<typename T>
inline const std::string& CMsgBattleReport_EOutcome_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgBattleReport_EOutcome>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgBattleReport_EOutcome_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgBattleReport_EOutcome_descriptor(), enum_t_value);
}
inline bool CMsgBattleReport_EOutcome_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgBattleReport_EOutcome* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgBattleReport_EOutcome>(
    CMsgBattleReport_EOutcome_descriptor(), name, value);
}
enum CMsgBattleReport_ELaneOutcome : int {
  k_eUnknownLaneOutcome = -1,
  k_eWonLane = 0,
  k_eLostLane = 1,
  k_eEvenLane = 2
};
bool CMsgBattleReport_ELaneOutcome_IsValid(int value);
constexpr CMsgBattleReport_ELaneOutcome CMsgBattleReport_ELaneOutcome_MIN = k_eUnknownLaneOutcome;
constexpr CMsgBattleReport_ELaneOutcome CMsgBattleReport_ELaneOutcome_MAX = k_eEvenLane;
constexpr int CMsgBattleReport_ELaneOutcome_ARRAYSIZE = CMsgBattleReport_ELaneOutcome_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgBattleReport_ELaneOutcome_descriptor();
template<typename T>
inline const std::string& CMsgBattleReport_ELaneOutcome_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgBattleReport_ELaneOutcome>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgBattleReport_ELaneOutcome_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgBattleReport_ELaneOutcome_descriptor(), enum_t_value);
}
inline bool CMsgBattleReport_ELaneOutcome_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgBattleReport_ELaneOutcome* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgBattleReport_ELaneOutcome>(
    CMsgBattleReport_ELaneOutcome_descriptor(), name, value);
}
// ===================================================================

class CMsgClientToGCGetBattleReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCGetBattleReport) */ {
 public:
  inline CMsgClientToGCGetBattleReport() : CMsgClientToGCGetBattleReport(nullptr) {}
  ~CMsgClientToGCGetBattleReport() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCGetBattleReport(const CMsgClientToGCGetBattleReport& from);
  CMsgClientToGCGetBattleReport(CMsgClientToGCGetBattleReport&& from) noexcept
    : CMsgClientToGCGetBattleReport() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCGetBattleReport& operator=(const CMsgClientToGCGetBattleReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCGetBattleReport& operator=(CMsgClientToGCGetBattleReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCGetBattleReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCGetBattleReport* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCGetBattleReport*>(
               &_CMsgClientToGCGetBattleReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgClientToGCGetBattleReport& a, CMsgClientToGCGetBattleReport& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCGetBattleReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCGetBattleReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCGetBattleReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCGetBattleReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCGetBattleReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCGetBattleReport& from) {
    CMsgClientToGCGetBattleReport::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCGetBattleReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCGetBattleReport";
  }
  protected:
  explicit CMsgClientToGCGetBattleReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kDurationFieldNumber = 3,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional uint32 duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCGetBattleReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    uint32_t timestamp_;
    uint32_t duration_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
};
// -------------------------------------------------------------------

class CMsgBattleReport_Game final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBattleReport_Game) */ {
 public:
  inline CMsgBattleReport_Game() : CMsgBattleReport_Game(nullptr) {}
  ~CMsgBattleReport_Game() override;
  explicit PROTOBUF_CONSTEXPR CMsgBattleReport_Game(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBattleReport_Game(const CMsgBattleReport_Game& from);
  CMsgBattleReport_Game(CMsgBattleReport_Game&& from) noexcept
    : CMsgBattleReport_Game() {
    *this = ::std::move(from);
  }

  inline CMsgBattleReport_Game& operator=(const CMsgBattleReport_Game& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBattleReport_Game& operator=(CMsgBattleReport_Game&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBattleReport_Game& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBattleReport_Game* internal_default_instance() {
    return reinterpret_cast<const CMsgBattleReport_Game*>(
               &_CMsgBattleReport_Game_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgBattleReport_Game& a, CMsgBattleReport_Game& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBattleReport_Game* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBattleReport_Game* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBattleReport_Game* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBattleReport_Game>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBattleReport_Game& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBattleReport_Game& from) {
    CMsgBattleReport_Game::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBattleReport_Game* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBattleReport_Game";
  }
  protected:
  explicit CMsgBattleReport_Game(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroIdFieldNumber = 1,
    kKillsFieldNumber = 2,
    kDeathsFieldNumber = 3,
    kAssistsFieldNumber = 4,
    kRankChangeFieldNumber = 5,
    kLastHitsFieldNumber = 6,
    kGpmFieldNumber = 7,
    kXpmFieldNumber = 8,
    kOutcomeFieldNumber = 10,
    kLaneSelectionFlagsFieldNumber = 14,
    kMatchIdFieldNumber = 13,
    kPredictedPositionFieldNumber = 15,
    kRankedFieldNumber = 12,
    kPartyGameFieldNumber = 19,
    kSecondsDeadFieldNumber = 16,
    kWinningTeamFieldNumber = 17,
    kStartTimeFieldNumber = 20,
    kDeniesFieldNumber = 21,
    kBountyRunesFieldNumber = 22,
    kWaterRunesFieldNumber = 23,
    kPowerRunesFieldNumber = 24,
    kTimeEnemyT1TowerDestroyedFieldNumber = 25,
    kTimeFriendlyT1TowerDestroyedFieldNumber = 26,
    kEnemyRoshanKillsFieldNumber = 27,
    kPlayerSlotFieldNumber = 28,
    kTeleportsUsedFieldNumber = 29,
    kDewardsFieldNumber = 30,
    kCampsStackedFieldNumber = 31,
    kSupportGoldFieldNumber = 32,
    kHeroDamageFieldNumber = 33,
    kHeroHealingFieldNumber = 34,
    kTowerDamageFieldNumber = 35,
    kSuccessfulSmokesFieldNumber = 36,
    kStunDurationFieldNumber = 37,
    kDurationFieldNumber = 38,
    kFriendlyRoshanKillsFieldNumber = 39,
    kPreviousRankFieldNumber = 40,
    kGameModeFieldNumber = 41,
    kLobbyTypeFieldNumber = 42,
    kTimePurchasedShardFieldNumber = 43,
    kTimePurchasedScepterFieldNumber = 44,
    kRoleFieldNumber = 9,
    kLaneOutcomeFieldNumber = 11,
    kItem0FieldNumber = 45,
    kItem1FieldNumber = 46,
    kItem2FieldNumber = 47,
    kItem3FieldNumber = 48,
    kItem4FieldNumber = 49,
    kItem5FieldNumber = 50,
  };
  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 kills = 2;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  uint32_t kills() const;
  void set_kills(uint32_t value);
  private:
  uint32_t _internal_kills() const;
  void _internal_set_kills(uint32_t value);
  public:

  // optional uint32 deaths = 3;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  uint32_t deaths() const;
  void set_deaths(uint32_t value);
  private:
  uint32_t _internal_deaths() const;
  void _internal_set_deaths(uint32_t value);
  public:

  // optional uint32 assists = 4;
  bool has_assists() const;
  private:
  bool _internal_has_assists() const;
  public:
  void clear_assists();
  uint32_t assists() const;
  void set_assists(uint32_t value);
  private:
  uint32_t _internal_assists() const;
  void _internal_set_assists(uint32_t value);
  public:

  // optional int32 rank_change = 5;
  bool has_rank_change() const;
  private:
  bool _internal_has_rank_change() const;
  public:
  void clear_rank_change();
  int32_t rank_change() const;
  void set_rank_change(int32_t value);
  private:
  int32_t _internal_rank_change() const;
  void _internal_set_rank_change(int32_t value);
  public:

  // optional uint32 last_hits = 6;
  bool has_last_hits() const;
  private:
  bool _internal_has_last_hits() const;
  public:
  void clear_last_hits();
  uint32_t last_hits() const;
  void set_last_hits(uint32_t value);
  private:
  uint32_t _internal_last_hits() const;
  void _internal_set_last_hits(uint32_t value);
  public:

  // optional uint32 gpm = 7;
  bool has_gpm() const;
  private:
  bool _internal_has_gpm() const;
  public:
  void clear_gpm();
  uint32_t gpm() const;
  void set_gpm(uint32_t value);
  private:
  uint32_t _internal_gpm() const;
  void _internal_set_gpm(uint32_t value);
  public:

  // optional uint32 xpm = 8;
  bool has_xpm() const;
  private:
  bool _internal_has_xpm() const;
  public:
  void clear_xpm();
  uint32_t xpm() const;
  void set_xpm(uint32_t value);
  private:
  uint32_t _internal_xpm() const;
  void _internal_set_xpm(uint32_t value);
  public:

  // optional .CMsgBattleReport_EOutcome outcome = 10 [default = k_eWin];
  bool has_outcome() const;
  private:
  bool _internal_has_outcome() const;
  public:
  void clear_outcome();
  ::CMsgBattleReport_EOutcome outcome() const;
  void set_outcome(::CMsgBattleReport_EOutcome value);
  private:
  ::CMsgBattleReport_EOutcome _internal_outcome() const;
  void _internal_set_outcome(::CMsgBattleReport_EOutcome value);
  public:

  // optional uint32 lane_selection_flags = 14;
  bool has_lane_selection_flags() const;
  private:
  bool _internal_has_lane_selection_flags() const;
  public:
  void clear_lane_selection_flags();
  uint32_t lane_selection_flags() const;
  void set_lane_selection_flags(uint32_t value);
  private:
  uint32_t _internal_lane_selection_flags() const;
  void _internal_set_lane_selection_flags(uint32_t value);
  public:

  // optional uint64 match_id = 13;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint32 predicted_position = 15;
  bool has_predicted_position() const;
  private:
  bool _internal_has_predicted_position() const;
  public:
  void clear_predicted_position();
  uint32_t predicted_position() const;
  void set_predicted_position(uint32_t value);
  private:
  uint32_t _internal_predicted_position() const;
  void _internal_set_predicted_position(uint32_t value);
  public:

  // optional bool ranked = 12;
  bool has_ranked() const;
  private:
  bool _internal_has_ranked() const;
  public:
  void clear_ranked();
  bool ranked() const;
  void set_ranked(bool value);
  private:
  bool _internal_ranked() const;
  void _internal_set_ranked(bool value);
  public:

  // optional bool party_game = 19;
  bool has_party_game() const;
  private:
  bool _internal_has_party_game() const;
  public:
  void clear_party_game();
  bool party_game() const;
  void set_party_game(bool value);
  private:
  bool _internal_party_game() const;
  void _internal_set_party_game(bool value);
  public:

  // optional uint32 seconds_dead = 16;
  bool has_seconds_dead() const;
  private:
  bool _internal_has_seconds_dead() const;
  public:
  void clear_seconds_dead();
  uint32_t seconds_dead() const;
  void set_seconds_dead(uint32_t value);
  private:
  uint32_t _internal_seconds_dead() const;
  void _internal_set_seconds_dead(uint32_t value);
  public:

  // optional uint32 winning_team = 17;
  bool has_winning_team() const;
  private:
  bool _internal_has_winning_team() const;
  public:
  void clear_winning_team();
  uint32_t winning_team() const;
  void set_winning_team(uint32_t value);
  private:
  uint32_t _internal_winning_team() const;
  void _internal_set_winning_team(uint32_t value);
  public:

  // optional uint32 start_time = 20;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  uint32_t start_time() const;
  void set_start_time(uint32_t value);
  private:
  uint32_t _internal_start_time() const;
  void _internal_set_start_time(uint32_t value);
  public:

  // optional uint32 denies = 21;
  bool has_denies() const;
  private:
  bool _internal_has_denies() const;
  public:
  void clear_denies();
  uint32_t denies() const;
  void set_denies(uint32_t value);
  private:
  uint32_t _internal_denies() const;
  void _internal_set_denies(uint32_t value);
  public:

  // optional uint32 bounty_runes = 22;
  bool has_bounty_runes() const;
  private:
  bool _internal_has_bounty_runes() const;
  public:
  void clear_bounty_runes();
  uint32_t bounty_runes() const;
  void set_bounty_runes(uint32_t value);
  private:
  uint32_t _internal_bounty_runes() const;
  void _internal_set_bounty_runes(uint32_t value);
  public:

  // optional uint32 water_runes = 23;
  bool has_water_runes() const;
  private:
  bool _internal_has_water_runes() const;
  public:
  void clear_water_runes();
  uint32_t water_runes() const;
  void set_water_runes(uint32_t value);
  private:
  uint32_t _internal_water_runes() const;
  void _internal_set_water_runes(uint32_t value);
  public:

  // optional uint32 power_runes = 24;
  bool has_power_runes() const;
  private:
  bool _internal_has_power_runes() const;
  public:
  void clear_power_runes();
  uint32_t power_runes() const;
  void set_power_runes(uint32_t value);
  private:
  uint32_t _internal_power_runes() const;
  void _internal_set_power_runes(uint32_t value);
  public:

  // optional uint32 time_enemy_t1_tower_destroyed = 25;
  bool has_time_enemy_t1_tower_destroyed() const;
  private:
  bool _internal_has_time_enemy_t1_tower_destroyed() const;
  public:
  void clear_time_enemy_t1_tower_destroyed();
  uint32_t time_enemy_t1_tower_destroyed() const;
  void set_time_enemy_t1_tower_destroyed(uint32_t value);
  private:
  uint32_t _internal_time_enemy_t1_tower_destroyed() const;
  void _internal_set_time_enemy_t1_tower_destroyed(uint32_t value);
  public:

  // optional uint32 time_friendly_t1_tower_destroyed = 26;
  bool has_time_friendly_t1_tower_destroyed() const;
  private:
  bool _internal_has_time_friendly_t1_tower_destroyed() const;
  public:
  void clear_time_friendly_t1_tower_destroyed();
  uint32_t time_friendly_t1_tower_destroyed() const;
  void set_time_friendly_t1_tower_destroyed(uint32_t value);
  private:
  uint32_t _internal_time_friendly_t1_tower_destroyed() const;
  void _internal_set_time_friendly_t1_tower_destroyed(uint32_t value);
  public:

  // optional uint32 enemy_roshan_kills = 27;
  bool has_enemy_roshan_kills() const;
  private:
  bool _internal_has_enemy_roshan_kills() const;
  public:
  void clear_enemy_roshan_kills();
  uint32_t enemy_roshan_kills() const;
  void set_enemy_roshan_kills(uint32_t value);
  private:
  uint32_t _internal_enemy_roshan_kills() const;
  void _internal_set_enemy_roshan_kills(uint32_t value);
  public:

  // optional uint32 player_slot = 28;
  bool has_player_slot() const;
  private:
  bool _internal_has_player_slot() const;
  public:
  void clear_player_slot();
  uint32_t player_slot() const;
  void set_player_slot(uint32_t value);
  private:
  uint32_t _internal_player_slot() const;
  void _internal_set_player_slot(uint32_t value);
  public:

  // optional uint32 teleports_used = 29;
  bool has_teleports_used() const;
  private:
  bool _internal_has_teleports_used() const;
  public:
  void clear_teleports_used();
  uint32_t teleports_used() const;
  void set_teleports_used(uint32_t value);
  private:
  uint32_t _internal_teleports_used() const;
  void _internal_set_teleports_used(uint32_t value);
  public:

  // optional uint32 dewards = 30;
  bool has_dewards() const;
  private:
  bool _internal_has_dewards() const;
  public:
  void clear_dewards();
  uint32_t dewards() const;
  void set_dewards(uint32_t value);
  private:
  uint32_t _internal_dewards() const;
  void _internal_set_dewards(uint32_t value);
  public:

  // optional uint32 camps_stacked = 31;
  bool has_camps_stacked() const;
  private:
  bool _internal_has_camps_stacked() const;
  public:
  void clear_camps_stacked();
  uint32_t camps_stacked() const;
  void set_camps_stacked(uint32_t value);
  private:
  uint32_t _internal_camps_stacked() const;
  void _internal_set_camps_stacked(uint32_t value);
  public:

  // optional uint32 support_gold = 32;
  bool has_support_gold() const;
  private:
  bool _internal_has_support_gold() const;
  public:
  void clear_support_gold();
  uint32_t support_gold() const;
  void set_support_gold(uint32_t value);
  private:
  uint32_t _internal_support_gold() const;
  void _internal_set_support_gold(uint32_t value);
  public:

  // optional uint32 hero_damage = 33;
  bool has_hero_damage() const;
  private:
  bool _internal_has_hero_damage() const;
  public:
  void clear_hero_damage();
  uint32_t hero_damage() const;
  void set_hero_damage(uint32_t value);
  private:
  uint32_t _internal_hero_damage() const;
  void _internal_set_hero_damage(uint32_t value);
  public:

  // optional uint32 hero_healing = 34;
  bool has_hero_healing() const;
  private:
  bool _internal_has_hero_healing() const;
  public:
  void clear_hero_healing();
  uint32_t hero_healing() const;
  void set_hero_healing(uint32_t value);
  private:
  uint32_t _internal_hero_healing() const;
  void _internal_set_hero_healing(uint32_t value);
  public:

  // optional uint32 tower_damage = 35;
  bool has_tower_damage() const;
  private:
  bool _internal_has_tower_damage() const;
  public:
  void clear_tower_damage();
  uint32_t tower_damage() const;
  void set_tower_damage(uint32_t value);
  private:
  uint32_t _internal_tower_damage() const;
  void _internal_set_tower_damage(uint32_t value);
  public:

  // optional uint32 successful_smokes = 36;
  bool has_successful_smokes() const;
  private:
  bool _internal_has_successful_smokes() const;
  public:
  void clear_successful_smokes();
  uint32_t successful_smokes() const;
  void set_successful_smokes(uint32_t value);
  private:
  uint32_t _internal_successful_smokes() const;
  void _internal_set_successful_smokes(uint32_t value);
  public:

  // optional uint32 stun_duration = 37;
  bool has_stun_duration() const;
  private:
  bool _internal_has_stun_duration() const;
  public:
  void clear_stun_duration();
  uint32_t stun_duration() const;
  void set_stun_duration(uint32_t value);
  private:
  uint32_t _internal_stun_duration() const;
  void _internal_set_stun_duration(uint32_t value);
  public:

  // optional uint32 duration = 38;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // optional uint32 friendly_roshan_kills = 39;
  bool has_friendly_roshan_kills() const;
  private:
  bool _internal_has_friendly_roshan_kills() const;
  public:
  void clear_friendly_roshan_kills();
  uint32_t friendly_roshan_kills() const;
  void set_friendly_roshan_kills(uint32_t value);
  private:
  uint32_t _internal_friendly_roshan_kills() const;
  void _internal_set_friendly_roshan_kills(uint32_t value);
  public:

  // optional int32 previous_rank = 40;
  bool has_previous_rank() const;
  private:
  bool _internal_has_previous_rank() const;
  public:
  void clear_previous_rank();
  int32_t previous_rank() const;
  void set_previous_rank(int32_t value);
  private:
  int32_t _internal_previous_rank() const;
  void _internal_set_previous_rank(int32_t value);
  public:

  // optional uint32 game_mode = 41;
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  uint32_t game_mode() const;
  void set_game_mode(uint32_t value);
  private:
  uint32_t _internal_game_mode() const;
  void _internal_set_game_mode(uint32_t value);
  public:

  // optional uint32 lobby_type = 42;
  bool has_lobby_type() const;
  private:
  bool _internal_has_lobby_type() const;
  public:
  void clear_lobby_type();
  uint32_t lobby_type() const;
  void set_lobby_type(uint32_t value);
  private:
  uint32_t _internal_lobby_type() const;
  void _internal_set_lobby_type(uint32_t value);
  public:

  // optional float time_purchased_shard = 43;
  bool has_time_purchased_shard() const;
  private:
  bool _internal_has_time_purchased_shard() const;
  public:
  void clear_time_purchased_shard();
  float time_purchased_shard() const;
  void set_time_purchased_shard(float value);
  private:
  float _internal_time_purchased_shard() const;
  void _internal_set_time_purchased_shard(float value);
  public:

  // optional float time_purchased_scepter = 44;
  bool has_time_purchased_scepter() const;
  private:
  bool _internal_has_time_purchased_scepter() const;
  public:
  void clear_time_purchased_scepter();
  float time_purchased_scepter() const;
  void set_time_purchased_scepter(float value);
  private:
  float _internal_time_purchased_scepter() const;
  void _internal_set_time_purchased_scepter(float value);
  public:

  // optional .CMsgBattleReport_Role role = 9 [default = k_eUnknownRole];
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  ::CMsgBattleReport_Role role() const;
  void set_role(::CMsgBattleReport_Role value);
  private:
  ::CMsgBattleReport_Role _internal_role() const;
  void _internal_set_role(::CMsgBattleReport_Role value);
  public:

  // optional .CMsgBattleReport_ELaneOutcome lane_outcome = 11 [default = k_eUnknownLaneOutcome];
  bool has_lane_outcome() const;
  private:
  bool _internal_has_lane_outcome() const;
  public:
  void clear_lane_outcome();
  ::CMsgBattleReport_ELaneOutcome lane_outcome() const;
  void set_lane_outcome(::CMsgBattleReport_ELaneOutcome value);
  private:
  ::CMsgBattleReport_ELaneOutcome _internal_lane_outcome() const;
  void _internal_set_lane_outcome(::CMsgBattleReport_ELaneOutcome value);
  public:

  // optional int32 item0 = 45 [default = -1];
  bool has_item0() const;
  private:
  bool _internal_has_item0() const;
  public:
  void clear_item0();
  int32_t item0() const;
  void set_item0(int32_t value);
  private:
  int32_t _internal_item0() const;
  void _internal_set_item0(int32_t value);
  public:

  // optional int32 item1 = 46 [default = -1];
  bool has_item1() const;
  private:
  bool _internal_has_item1() const;
  public:
  void clear_item1();
  int32_t item1() const;
  void set_item1(int32_t value);
  private:
  int32_t _internal_item1() const;
  void _internal_set_item1(int32_t value);
  public:

  // optional int32 item2 = 47 [default = -1];
  bool has_item2() const;
  private:
  bool _internal_has_item2() const;
  public:
  void clear_item2();
  int32_t item2() const;
  void set_item2(int32_t value);
  private:
  int32_t _internal_item2() const;
  void _internal_set_item2(int32_t value);
  public:

  // optional int32 item3 = 48 [default = -1];
  bool has_item3() const;
  private:
  bool _internal_has_item3() const;
  public:
  void clear_item3();
  int32_t item3() const;
  void set_item3(int32_t value);
  private:
  int32_t _internal_item3() const;
  void _internal_set_item3(int32_t value);
  public:

  // optional int32 item4 = 49 [default = -1];
  bool has_item4() const;
  private:
  bool _internal_has_item4() const;
  public:
  void clear_item4();
  int32_t item4() const;
  void set_item4(int32_t value);
  private:
  int32_t _internal_item4() const;
  void _internal_set_item4(int32_t value);
  public:

  // optional int32 item5 = 50 [default = -1];
  bool has_item5() const;
  private:
  bool _internal_has_item5() const;
  public:
  void clear_item5();
  int32_t item5() const;
  void set_item5(int32_t value);
  private:
  int32_t _internal_item5() const;
  void _internal_set_item5(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBattleReport_Game)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t hero_id_;
    uint32_t kills_;
    uint32_t deaths_;
    uint32_t assists_;
    int32_t rank_change_;
    uint32_t last_hits_;
    uint32_t gpm_;
    uint32_t xpm_;
    int outcome_;
    uint32_t lane_selection_flags_;
    uint64_t match_id_;
    uint32_t predicted_position_;
    bool ranked_;
    bool party_game_;
    uint32_t seconds_dead_;
    uint32_t winning_team_;
    uint32_t start_time_;
    uint32_t denies_;
    uint32_t bounty_runes_;
    uint32_t water_runes_;
    uint32_t power_runes_;
    uint32_t time_enemy_t1_tower_destroyed_;
    uint32_t time_friendly_t1_tower_destroyed_;
    uint32_t enemy_roshan_kills_;
    uint32_t player_slot_;
    uint32_t teleports_used_;
    uint32_t dewards_;
    uint32_t camps_stacked_;
    uint32_t support_gold_;
    uint32_t hero_damage_;
    uint32_t hero_healing_;
    uint32_t tower_damage_;
    uint32_t successful_smokes_;
    uint32_t stun_duration_;
    uint32_t duration_;
    uint32_t friendly_roshan_kills_;
    int32_t previous_rank_;
    uint32_t game_mode_;
    uint32_t lobby_type_;
    float time_purchased_shard_;
    float time_purchased_scepter_;
    int role_;
    int lane_outcome_;
    int32_t item0_;
    int32_t item1_;
    int32_t item2_;
    int32_t item3_;
    int32_t item4_;
    int32_t item5_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
};
// -------------------------------------------------------------------

class CMsgBattleReport_GameList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBattleReport_GameList) */ {
 public:
  inline CMsgBattleReport_GameList() : CMsgBattleReport_GameList(nullptr) {}
  ~CMsgBattleReport_GameList() override;
  explicit PROTOBUF_CONSTEXPR CMsgBattleReport_GameList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBattleReport_GameList(const CMsgBattleReport_GameList& from);
  CMsgBattleReport_GameList(CMsgBattleReport_GameList&& from) noexcept
    : CMsgBattleReport_GameList() {
    *this = ::std::move(from);
  }

  inline CMsgBattleReport_GameList& operator=(const CMsgBattleReport_GameList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBattleReport_GameList& operator=(CMsgBattleReport_GameList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBattleReport_GameList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBattleReport_GameList* internal_default_instance() {
    return reinterpret_cast<const CMsgBattleReport_GameList*>(
               &_CMsgBattleReport_GameList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgBattleReport_GameList& a, CMsgBattleReport_GameList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBattleReport_GameList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBattleReport_GameList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBattleReport_GameList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBattleReport_GameList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBattleReport_GameList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBattleReport_GameList& from) {
    CMsgBattleReport_GameList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBattleReport_GameList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBattleReport_GameList";
  }
  protected:
  explicit CMsgBattleReport_GameList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGamesFieldNumber = 1,
  };
  // repeated .CMsgBattleReport_Game games = 1;
  int games_size() const;
  private:
  int _internal_games_size() const;
  public:
  void clear_games();
  ::CMsgBattleReport_Game* mutable_games(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReport_Game >*
      mutable_games();
  private:
  const ::CMsgBattleReport_Game& _internal_games(int index) const;
  ::CMsgBattleReport_Game* _internal_add_games();
  public:
  const ::CMsgBattleReport_Game& games(int index) const;
  ::CMsgBattleReport_Game* add_games();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReport_Game >&
      games() const;

  // @@protoc_insertion_point(class_scope:CMsgBattleReport_GameList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReport_Game > games_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
};
// -------------------------------------------------------------------

class CMsgBattleReport_HighlightGeneral final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBattleReport.HighlightGeneral) */ {
 public:
  inline CMsgBattleReport_HighlightGeneral() : CMsgBattleReport_HighlightGeneral(nullptr) {}
  ~CMsgBattleReport_HighlightGeneral() override;
  explicit PROTOBUF_CONSTEXPR CMsgBattleReport_HighlightGeneral(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBattleReport_HighlightGeneral(const CMsgBattleReport_HighlightGeneral& from);
  CMsgBattleReport_HighlightGeneral(CMsgBattleReport_HighlightGeneral&& from) noexcept
    : CMsgBattleReport_HighlightGeneral() {
    *this = ::std::move(from);
  }

  inline CMsgBattleReport_HighlightGeneral& operator=(const CMsgBattleReport_HighlightGeneral& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBattleReport_HighlightGeneral& operator=(CMsgBattleReport_HighlightGeneral&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBattleReport_HighlightGeneral& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBattleReport_HighlightGeneral* internal_default_instance() {
    return reinterpret_cast<const CMsgBattleReport_HighlightGeneral*>(
               &_CMsgBattleReport_HighlightGeneral_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgBattleReport_HighlightGeneral& a, CMsgBattleReport_HighlightGeneral& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBattleReport_HighlightGeneral* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBattleReport_HighlightGeneral* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBattleReport_HighlightGeneral* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBattleReport_HighlightGeneral>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBattleReport_HighlightGeneral& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBattleReport_HighlightGeneral& from) {
    CMsgBattleReport_HighlightGeneral::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBattleReport_HighlightGeneral* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBattleReport.HighlightGeneral";
  }
  protected:
  explicit CMsgBattleReport_HighlightGeneral(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinLossWindowFieldNumber = 1,
    kWinPercentFieldNumber = 2,
    kMmrDeltaFieldNumber = 3,
    kHighlightScoreFieldNumber = 4,
  };
  // optional int32 win_loss_window = 1;
  bool has_win_loss_window() const;
  private:
  bool _internal_has_win_loss_window() const;
  public:
  void clear_win_loss_window();
  int32_t win_loss_window() const;
  void set_win_loss_window(int32_t value);
  private:
  int32_t _internal_win_loss_window() const;
  void _internal_set_win_loss_window(int32_t value);
  public:

  // optional float win_percent = 2;
  bool has_win_percent() const;
  private:
  bool _internal_has_win_percent() const;
  public:
  void clear_win_percent();
  float win_percent() const;
  void set_win_percent(float value);
  private:
  float _internal_win_percent() const;
  void _internal_set_win_percent(float value);
  public:

  // optional int32 mmr_delta = 3;
  bool has_mmr_delta() const;
  private:
  bool _internal_has_mmr_delta() const;
  public:
  void clear_mmr_delta();
  int32_t mmr_delta() const;
  void set_mmr_delta(int32_t value);
  private:
  int32_t _internal_mmr_delta() const;
  void _internal_set_mmr_delta(int32_t value);
  public:

  // optional float highlight_score = 4;
  bool has_highlight_score() const;
  private:
  bool _internal_has_highlight_score() const;
  public:
  void clear_highlight_score();
  float highlight_score() const;
  void set_highlight_score(float value);
  private:
  float _internal_highlight_score() const;
  void _internal_set_highlight_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBattleReport.HighlightGeneral)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t win_loss_window_;
    float win_percent_;
    int32_t mmr_delta_;
    float highlight_score_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
};
// -------------------------------------------------------------------

class CMsgBattleReport_Highlight final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBattleReport.Highlight) */ {
 public:
  inline CMsgBattleReport_Highlight() : CMsgBattleReport_Highlight(nullptr) {}
  ~CMsgBattleReport_Highlight() override;
  explicit PROTOBUF_CONSTEXPR CMsgBattleReport_Highlight(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBattleReport_Highlight(const CMsgBattleReport_Highlight& from);
  CMsgBattleReport_Highlight(CMsgBattleReport_Highlight&& from) noexcept
    : CMsgBattleReport_Highlight() {
    *this = ::std::move(from);
  }

  inline CMsgBattleReport_Highlight& operator=(const CMsgBattleReport_Highlight& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBattleReport_Highlight& operator=(CMsgBattleReport_Highlight&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBattleReport_Highlight& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBattleReport_Highlight* internal_default_instance() {
    return reinterpret_cast<const CMsgBattleReport_Highlight*>(
               &_CMsgBattleReport_Highlight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgBattleReport_Highlight& a, CMsgBattleReport_Highlight& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBattleReport_Highlight* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBattleReport_Highlight* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBattleReport_Highlight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBattleReport_Highlight>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBattleReport_Highlight& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBattleReport_Highlight& from) {
    CMsgBattleReport_Highlight::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBattleReport_Highlight* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBattleReport.Highlight";
  }
  protected:
  explicit CMsgBattleReport_Highlight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighlightIdFieldNumber = 1,
    kCategoryFieldNumber = 2,
    kRarityFieldNumber = 4,
    kScoreFieldNumber = 5,
    kConfidenceFieldNumber = 6,
    kHeroIdFieldNumber = 7,
    kComparisonDeltaValueFieldNumber = 9,
    kContextFieldNumber = 10,
    kTierFieldNumber = 3,
    kRoleFieldNumber = 8,
  };
  // required uint32 highlight_id = 1;
  bool has_highlight_id() const;
  private:
  bool _internal_has_highlight_id() const;
  public:
  void clear_highlight_id();
  uint32_t highlight_id() const;
  void set_highlight_id(uint32_t value);
  private:
  uint32_t _internal_highlight_id() const;
  void _internal_set_highlight_id(uint32_t value);
  public:

  // required .CMsgBattleReport_HighlightCategory category = 2 [default = k_eHighlightGeneral];
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  ::CMsgBattleReport_HighlightCategory category() const;
  void set_category(::CMsgBattleReport_HighlightCategory value);
  private:
  ::CMsgBattleReport_HighlightCategory _internal_category() const;
  void _internal_set_category(::CMsgBattleReport_HighlightCategory value);
  public:

  // optional .CMsgBattleReport_HighlightRarity rarity = 4 [default = k_eHighlightCommon];
  bool has_rarity() const;
  private:
  bool _internal_has_rarity() const;
  public:
  void clear_rarity();
  ::CMsgBattleReport_HighlightRarity rarity() const;
  void set_rarity(::CMsgBattleReport_HighlightRarity value);
  private:
  ::CMsgBattleReport_HighlightRarity _internal_rarity() const;
  void _internal_set_rarity(::CMsgBattleReport_HighlightRarity value);
  public:

  // optional float score = 5;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // optional float confidence = 6;
  bool has_confidence() const;
  private:
  bool _internal_has_confidence() const;
  public:
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // optional uint32 hero_id = 7;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional float comparison_delta_value = 9;
  bool has_comparison_delta_value() const;
  private:
  bool _internal_has_comparison_delta_value() const;
  public:
  void clear_comparison_delta_value();
  float comparison_delta_value() const;
  void set_comparison_delta_value(float value);
  private:
  float _internal_comparison_delta_value() const;
  void _internal_set_comparison_delta_value(float value);
  public:

  // optional .CMsgBattleReport_CompareContext context = 10 [default = k_eCompareContextInvalid];
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  ::CMsgBattleReport_CompareContext context() const;
  void set_context(::CMsgBattleReport_CompareContext value);
  private:
  ::CMsgBattleReport_CompareContext _internal_context() const;
  void _internal_set_context(::CMsgBattleReport_CompareContext value);
  public:

  // optional .CMsgBattleReport_HighlightTier tier = 3 [default = k_eHighlightTierLow];
  bool has_tier() const;
  private:
  bool _internal_has_tier() const;
  public:
  void clear_tier();
  ::CMsgBattleReport_HighlightTier tier() const;
  void set_tier(::CMsgBattleReport_HighlightTier value);
  private:
  ::CMsgBattleReport_HighlightTier _internal_tier() const;
  void _internal_set_tier(::CMsgBattleReport_HighlightTier value);
  public:

  // optional .CMsgBattleReport_Role role = 8 [default = k_eUnknownRole];
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  ::CMsgBattleReport_Role role() const;
  void set_role(::CMsgBattleReport_Role value);
  private:
  ::CMsgBattleReport_Role _internal_role() const;
  void _internal_set_role(::CMsgBattleReport_Role value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBattleReport.Highlight)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t highlight_id_;
    int category_;
    int rarity_;
    float score_;
    float confidence_;
    uint32_t hero_id_;
    float comparison_delta_value_;
    int context_;
    int tier_;
    int role_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
};
// -------------------------------------------------------------------

class CMsgBattleReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBattleReport) */ {
 public:
  inline CMsgBattleReport() : CMsgBattleReport(nullptr) {}
  ~CMsgBattleReport() override;
  explicit PROTOBUF_CONSTEXPR CMsgBattleReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBattleReport(const CMsgBattleReport& from);
  CMsgBattleReport(CMsgBattleReport&& from) noexcept
    : CMsgBattleReport() {
    *this = ::std::move(from);
  }

  inline CMsgBattleReport& operator=(const CMsgBattleReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBattleReport& operator=(CMsgBattleReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBattleReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBattleReport* internal_default_instance() {
    return reinterpret_cast<const CMsgBattleReport*>(
               &_CMsgBattleReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgBattleReport& a, CMsgBattleReport& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBattleReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBattleReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBattleReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBattleReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBattleReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBattleReport& from) {
    CMsgBattleReport::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBattleReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBattleReport";
  }
  protected:
  explicit CMsgBattleReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgBattleReport_HighlightGeneral HighlightGeneral;
  typedef CMsgBattleReport_Highlight Highlight;

  // accessors -------------------------------------------------------

  enum : int {
    kGamesFieldNumber = 1,
    kHighlightsFieldNumber = 3,
  };
  // repeated .CMsgBattleReport_Game games = 1;
  int games_size() const;
  private:
  int _internal_games_size() const;
  public:
  void clear_games();
  ::CMsgBattleReport_Game* mutable_games(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReport_Game >*
      mutable_games();
  private:
  const ::CMsgBattleReport_Game& _internal_games(int index) const;
  ::CMsgBattleReport_Game* _internal_add_games();
  public:
  const ::CMsgBattleReport_Game& games(int index) const;
  ::CMsgBattleReport_Game* add_games();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReport_Game >&
      games() const;

  // optional .CMsgBattleReportHighlights highlights = 3;
  bool has_highlights() const;
  private:
  bool _internal_has_highlights() const;
  public:
  void clear_highlights();
  const ::CMsgBattleReportHighlights& highlights() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportHighlights* release_highlights();
  ::CMsgBattleReportHighlights* mutable_highlights();
  void set_allocated_highlights(::CMsgBattleReportHighlights* highlights);
  private:
  const ::CMsgBattleReportHighlights& _internal_highlights() const;
  ::CMsgBattleReportHighlights* _internal_mutable_highlights();
  public:
  void unsafe_arena_set_allocated_highlights(
      ::CMsgBattleReportHighlights* highlights);
  ::CMsgBattleReportHighlights* unsafe_arena_release_highlights();

  // @@protoc_insertion_point(class_scope:CMsgBattleReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReport_Game > games_;
    ::CMsgBattleReportHighlights* highlights_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
};
// -------------------------------------------------------------------

class CMsgBattleReportInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBattleReportInfo) */ {
 public:
  inline CMsgBattleReportInfo() : CMsgBattleReportInfo(nullptr) {}
  ~CMsgBattleReportInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgBattleReportInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBattleReportInfo(const CMsgBattleReportInfo& from);
  CMsgBattleReportInfo(CMsgBattleReportInfo&& from) noexcept
    : CMsgBattleReportInfo() {
    *this = ::std::move(from);
  }

  inline CMsgBattleReportInfo& operator=(const CMsgBattleReportInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBattleReportInfo& operator=(CMsgBattleReportInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBattleReportInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBattleReportInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgBattleReportInfo*>(
               &_CMsgBattleReportInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgBattleReportInfo& a, CMsgBattleReportInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBattleReportInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBattleReportInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBattleReportInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBattleReportInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBattleReportInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBattleReportInfo& from) {
    CMsgBattleReportInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBattleReportInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBattleReportInfo";
  }
  protected:
  explicit CMsgBattleReportInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMedalCountsFieldNumber = 7,
    kTimestampFieldNumber = 1,
    kDurationFieldNumber = 2,
    kAcknowledgedFieldNumber = 3,
    kFeaturedHeroIdFieldNumber = 4,
    kFeaturedPositionFieldNumber = 5,
    kGamesPlayedFieldNumber = 6,
  };
  // repeated uint32 medal_counts = 7;
  int medal_counts_size() const;
  private:
  int _internal_medal_counts_size() const;
  public:
  void clear_medal_counts();
  private:
  uint32_t _internal_medal_counts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_medal_counts() const;
  void _internal_add_medal_counts(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_medal_counts();
  public:
  uint32_t medal_counts(int index) const;
  void set_medal_counts(int index, uint32_t value);
  void add_medal_counts(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      medal_counts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_medal_counts();

  // optional uint32 timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional uint32 duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // optional bool acknowledged = 3;
  bool has_acknowledged() const;
  private:
  bool _internal_has_acknowledged() const;
  public:
  void clear_acknowledged();
  bool acknowledged() const;
  void set_acknowledged(bool value);
  private:
  bool _internal_acknowledged() const;
  void _internal_set_acknowledged(bool value);
  public:

  // optional uint32 featured_hero_id = 4;
  bool has_featured_hero_id() const;
  private:
  bool _internal_has_featured_hero_id() const;
  public:
  void clear_featured_hero_id();
  uint32_t featured_hero_id() const;
  void set_featured_hero_id(uint32_t value);
  private:
  uint32_t _internal_featured_hero_id() const;
  void _internal_set_featured_hero_id(uint32_t value);
  public:

  // optional uint32 featured_position = 5;
  bool has_featured_position() const;
  private:
  bool _internal_has_featured_position() const;
  public:
  void clear_featured_position();
  uint32_t featured_position() const;
  void set_featured_position(uint32_t value);
  private:
  uint32_t _internal_featured_position() const;
  void _internal_set_featured_position(uint32_t value);
  public:

  // optional uint32 games_played = 6;
  bool has_games_played() const;
  private:
  bool _internal_has_games_played() const;
  public:
  void clear_games_played();
  uint32_t games_played() const;
  void set_games_played(uint32_t value);
  private:
  uint32_t _internal_games_played() const;
  void _internal_set_games_played(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBattleReportInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > medal_counts_;
    uint32_t timestamp_;
    uint32_t duration_;
    bool acknowledged_;
    uint32_t featured_hero_id_;
    uint32_t featured_position_;
    uint32_t games_played_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
};
// -------------------------------------------------------------------

class CMsgBattleReportInfoList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBattleReportInfoList) */ {
 public:
  inline CMsgBattleReportInfoList() : CMsgBattleReportInfoList(nullptr) {}
  ~CMsgBattleReportInfoList() override;
  explicit PROTOBUF_CONSTEXPR CMsgBattleReportInfoList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBattleReportInfoList(const CMsgBattleReportInfoList& from);
  CMsgBattleReportInfoList(CMsgBattleReportInfoList&& from) noexcept
    : CMsgBattleReportInfoList() {
    *this = ::std::move(from);
  }

  inline CMsgBattleReportInfoList& operator=(const CMsgBattleReportInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBattleReportInfoList& operator=(CMsgBattleReportInfoList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBattleReportInfoList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBattleReportInfoList* internal_default_instance() {
    return reinterpret_cast<const CMsgBattleReportInfoList*>(
               &_CMsgBattleReportInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgBattleReportInfoList& a, CMsgBattleReportInfoList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBattleReportInfoList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBattleReportInfoList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBattleReportInfoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBattleReportInfoList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBattleReportInfoList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBattleReportInfoList& from) {
    CMsgBattleReportInfoList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBattleReportInfoList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBattleReportInfoList";
  }
  protected:
  explicit CMsgBattleReportInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBattleReportInfoFieldNumber = 1,
  };
  // repeated .CMsgBattleReportInfo battle_report_info = 1;
  int battle_report_info_size() const;
  private:
  int _internal_battle_report_info_size() const;
  public:
  void clear_battle_report_info();
  ::CMsgBattleReportInfo* mutable_battle_report_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReportInfo >*
      mutable_battle_report_info();
  private:
  const ::CMsgBattleReportInfo& _internal_battle_report_info(int index) const;
  ::CMsgBattleReportInfo* _internal_add_battle_report_info();
  public:
  const ::CMsgBattleReportInfo& battle_report_info(int index) const;
  ::CMsgBattleReportInfo* add_battle_report_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReportInfo >&
      battle_report_info() const;

  // @@protoc_insertion_point(class_scope:CMsgBattleReportInfoList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReportInfo > battle_report_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
};
// -------------------------------------------------------------------

class CMsgBattleReportHighlights final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBattleReportHighlights) */ {
 public:
  inline CMsgBattleReportHighlights() : CMsgBattleReportHighlights(nullptr) {}
  ~CMsgBattleReportHighlights() override;
  explicit PROTOBUF_CONSTEXPR CMsgBattleReportHighlights(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBattleReportHighlights(const CMsgBattleReportHighlights& from);
  CMsgBattleReportHighlights(CMsgBattleReportHighlights&& from) noexcept
    : CMsgBattleReportHighlights() {
    *this = ::std::move(from);
  }

  inline CMsgBattleReportHighlights& operator=(const CMsgBattleReportHighlights& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBattleReportHighlights& operator=(CMsgBattleReportHighlights&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBattleReportHighlights& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBattleReportHighlights* internal_default_instance() {
    return reinterpret_cast<const CMsgBattleReportHighlights*>(
               &_CMsgBattleReportHighlights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgBattleReportHighlights& a, CMsgBattleReportHighlights& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBattleReportHighlights* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBattleReportHighlights* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBattleReportHighlights* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBattleReportHighlights>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBattleReportHighlights& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBattleReportHighlights& from) {
    CMsgBattleReportHighlights::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBattleReportHighlights* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBattleReportHighlights";
  }
  protected:
  explicit CMsgBattleReportHighlights(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighlightsFieldNumber = 1,
  };
  // repeated .CMsgBattleReport.Highlight highlights = 1;
  int highlights_size() const;
  private:
  int _internal_highlights_size() const;
  public:
  void clear_highlights();
  ::CMsgBattleReport_Highlight* mutable_highlights(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReport_Highlight >*
      mutable_highlights();
  private:
  const ::CMsgBattleReport_Highlight& _internal_highlights(int index) const;
  ::CMsgBattleReport_Highlight* _internal_add_highlights();
  public:
  const ::CMsgBattleReport_Highlight& highlights(int index) const;
  ::CMsgBattleReport_Highlight* add_highlights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReport_Highlight >&
      highlights() const;

  // @@protoc_insertion_point(class_scope:CMsgBattleReportHighlights)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReport_Highlight > highlights_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
};
// -------------------------------------------------------------------

class CMsgBattleReportAggregateStats_CMsgBattleReportStat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBattleReportAggregateStats.CMsgBattleReportStat) */ {
 public:
  inline CMsgBattleReportAggregateStats_CMsgBattleReportStat() : CMsgBattleReportAggregateStats_CMsgBattleReportStat(nullptr) {}
  ~CMsgBattleReportAggregateStats_CMsgBattleReportStat() override;
  explicit PROTOBUF_CONSTEXPR CMsgBattleReportAggregateStats_CMsgBattleReportStat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBattleReportAggregateStats_CMsgBattleReportStat(const CMsgBattleReportAggregateStats_CMsgBattleReportStat& from);
  CMsgBattleReportAggregateStats_CMsgBattleReportStat(CMsgBattleReportAggregateStats_CMsgBattleReportStat&& from) noexcept
    : CMsgBattleReportAggregateStats_CMsgBattleReportStat() {
    *this = ::std::move(from);
  }

  inline CMsgBattleReportAggregateStats_CMsgBattleReportStat& operator=(const CMsgBattleReportAggregateStats_CMsgBattleReportStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBattleReportAggregateStats_CMsgBattleReportStat& operator=(CMsgBattleReportAggregateStats_CMsgBattleReportStat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBattleReportAggregateStats_CMsgBattleReportStat& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBattleReportAggregateStats_CMsgBattleReportStat* internal_default_instance() {
    return reinterpret_cast<const CMsgBattleReportAggregateStats_CMsgBattleReportStat*>(
               &_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgBattleReportAggregateStats_CMsgBattleReportStat& a, CMsgBattleReportAggregateStats_CMsgBattleReportStat& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBattleReportAggregateStats_CMsgBattleReportStat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBattleReportAggregateStats_CMsgBattleReportStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBattleReportAggregateStats_CMsgBattleReportStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBattleReportAggregateStats_CMsgBattleReportStat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBattleReportAggregateStats_CMsgBattleReportStat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBattleReportAggregateStats_CMsgBattleReportStat& from) {
    CMsgBattleReportAggregateStats_CMsgBattleReportStat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBattleReportAggregateStats_CMsgBattleReportStat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBattleReportAggregateStats.CMsgBattleReportStat";
  }
  protected:
  explicit CMsgBattleReportAggregateStats_CMsgBattleReportStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeanFieldNumber = 1,
    kStdevFieldNumber = 2,
  };
  // optional float mean = 1;
  bool has_mean() const;
  private:
  bool _internal_has_mean() const;
  public:
  void clear_mean();
  float mean() const;
  void set_mean(float value);
  private:
  float _internal_mean() const;
  void _internal_set_mean(float value);
  public:

  // optional float stdev = 2;
  bool has_stdev() const;
  private:
  bool _internal_has_stdev() const;
  public:
  void clear_stdev();
  float stdev() const;
  void set_stdev(float value);
  private:
  float _internal_stdev() const;
  void _internal_set_stdev(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBattleReportAggregateStats.CMsgBattleReportStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float mean_;
    float stdev_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
};
// -------------------------------------------------------------------

class CMsgBattleReportAggregateStats_CMsgBattleReportAggregate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate) */ {
 public:
  inline CMsgBattleReportAggregateStats_CMsgBattleReportAggregate() : CMsgBattleReportAggregateStats_CMsgBattleReportAggregate(nullptr) {}
  ~CMsgBattleReportAggregateStats_CMsgBattleReportAggregate() override;
  explicit PROTOBUF_CONSTEXPR CMsgBattleReportAggregateStats_CMsgBattleReportAggregate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBattleReportAggregateStats_CMsgBattleReportAggregate(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate& from);
  CMsgBattleReportAggregateStats_CMsgBattleReportAggregate(CMsgBattleReportAggregateStats_CMsgBattleReportAggregate&& from) noexcept
    : CMsgBattleReportAggregateStats_CMsgBattleReportAggregate() {
    *this = ::std::move(from);
  }

  inline CMsgBattleReportAggregateStats_CMsgBattleReportAggregate& operator=(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBattleReportAggregateStats_CMsgBattleReportAggregate& operator=(CMsgBattleReportAggregateStats_CMsgBattleReportAggregate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* internal_default_instance() {
    return reinterpret_cast<const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate*>(
               &_CMsgBattleReportAggregateStats_CMsgBattleReportAggregate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgBattleReportAggregateStats_CMsgBattleReportAggregate& a, CMsgBattleReportAggregateStats_CMsgBattleReportAggregate& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBattleReportAggregateStats_CMsgBattleReportAggregate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBattleReportAggregateStats_CMsgBattleReportAggregate& from) {
    CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBattleReportAggregateStats.CMsgBattleReportAggregate";
  }
  protected:
  explicit CMsgBattleReportAggregateStats_CMsgBattleReportAggregate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKillsFieldNumber = 6,
    kDeathsFieldNumber = 7,
    kAssistsFieldNumber = 8,
    kRankChangeFieldNumber = 9,
    kLastHitsFieldNumber = 10,
    kDeniesFieldNumber = 11,
    kGpmFieldNumber = 12,
    kXpmFieldNumber = 13,
    kSecondsDeadFieldNumber = 14,
    kBountyRunesFieldNumber = 15,
    kWaterRunesFieldNumber = 16,
    kPowerRunesFieldNumber = 17,
    kTimeEnemyT1TowerDestroyedFieldNumber = 18,
    kTimeFriendlyT1TowerDestroyedFieldNumber = 19,
    kEnemyRoshanKillsFieldNumber = 20,
    kTeleportsUsedFieldNumber = 21,
    kDewardsFieldNumber = 22,
    kCampsStackedFieldNumber = 23,
    kSupportGoldFieldNumber = 24,
    kHeroDamageFieldNumber = 25,
    kHeroHealingFieldNumber = 26,
    kTowerDamageFieldNumber = 27,
    kSuccessfulSmokesFieldNumber = 28,
    kStunDurationFieldNumber = 29,
    kDurationFieldNumber = 30,
    kFriendlyRoshanKillsFieldNumber = 31,
    kHeroIdFieldNumber = 1,
    kPredictedPositionFieldNumber = 2,
    kGameCountFieldNumber = 3,
    kWinCountFieldNumber = 4,
    kLaneWinCountFieldNumber = 5,
  };
  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat kills = 6;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& kills() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_kills();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_kills();
  void set_allocated_kills(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* kills);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_kills() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_kills();
  public:
  void unsafe_arena_set_allocated_kills(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* kills);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_kills();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat deaths = 7;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& deaths() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_deaths();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_deaths();
  void set_allocated_deaths(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* deaths);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_deaths() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_deaths();
  public:
  void unsafe_arena_set_allocated_deaths(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* deaths);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_deaths();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat assists = 8;
  bool has_assists() const;
  private:
  bool _internal_has_assists() const;
  public:
  void clear_assists();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& assists() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_assists();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_assists();
  void set_allocated_assists(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* assists);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_assists() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_assists();
  public:
  void unsafe_arena_set_allocated_assists(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* assists);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_assists();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat rank_change = 9;
  bool has_rank_change() const;
  private:
  bool _internal_has_rank_change() const;
  public:
  void clear_rank_change();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& rank_change() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_rank_change();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_rank_change();
  void set_allocated_rank_change(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* rank_change);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_rank_change() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_rank_change();
  public:
  void unsafe_arena_set_allocated_rank_change(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* rank_change);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_rank_change();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat last_hits = 10;
  bool has_last_hits() const;
  private:
  bool _internal_has_last_hits() const;
  public:
  void clear_last_hits();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& last_hits() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_last_hits();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_last_hits();
  void set_allocated_last_hits(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* last_hits);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_last_hits() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_last_hits();
  public:
  void unsafe_arena_set_allocated_last_hits(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* last_hits);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_last_hits();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat denies = 11;
  bool has_denies() const;
  private:
  bool _internal_has_denies() const;
  public:
  void clear_denies();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& denies() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_denies();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_denies();
  void set_allocated_denies(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* denies);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_denies() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_denies();
  public:
  void unsafe_arena_set_allocated_denies(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* denies);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_denies();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat gpm = 12;
  bool has_gpm() const;
  private:
  bool _internal_has_gpm() const;
  public:
  void clear_gpm();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& gpm() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_gpm();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_gpm();
  void set_allocated_gpm(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* gpm);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_gpm() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_gpm();
  public:
  void unsafe_arena_set_allocated_gpm(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* gpm);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_gpm();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat xpm = 13;
  bool has_xpm() const;
  private:
  bool _internal_has_xpm() const;
  public:
  void clear_xpm();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& xpm() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_xpm();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_xpm();
  void set_allocated_xpm(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* xpm);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_xpm() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_xpm();
  public:
  void unsafe_arena_set_allocated_xpm(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* xpm);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_xpm();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat seconds_dead = 14;
  bool has_seconds_dead() const;
  private:
  bool _internal_has_seconds_dead() const;
  public:
  void clear_seconds_dead();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& seconds_dead() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_seconds_dead();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_seconds_dead();
  void set_allocated_seconds_dead(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* seconds_dead);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_seconds_dead() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_seconds_dead();
  public:
  void unsafe_arena_set_allocated_seconds_dead(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* seconds_dead);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_seconds_dead();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat bounty_runes = 15;
  bool has_bounty_runes() const;
  private:
  bool _internal_has_bounty_runes() const;
  public:
  void clear_bounty_runes();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& bounty_runes() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_bounty_runes();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_bounty_runes();
  void set_allocated_bounty_runes(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* bounty_runes);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_bounty_runes() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_bounty_runes();
  public:
  void unsafe_arena_set_allocated_bounty_runes(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* bounty_runes);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_bounty_runes();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat water_runes = 16;
  bool has_water_runes() const;
  private:
  bool _internal_has_water_runes() const;
  public:
  void clear_water_runes();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& water_runes() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_water_runes();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_water_runes();
  void set_allocated_water_runes(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* water_runes);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_water_runes() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_water_runes();
  public:
  void unsafe_arena_set_allocated_water_runes(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* water_runes);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_water_runes();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat power_runes = 17;
  bool has_power_runes() const;
  private:
  bool _internal_has_power_runes() const;
  public:
  void clear_power_runes();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& power_runes() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_power_runes();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_power_runes();
  void set_allocated_power_runes(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* power_runes);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_power_runes() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_power_runes();
  public:
  void unsafe_arena_set_allocated_power_runes(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* power_runes);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_power_runes();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat time_enemy_t1_tower_destroyed = 18;
  bool has_time_enemy_t1_tower_destroyed() const;
  private:
  bool _internal_has_time_enemy_t1_tower_destroyed() const;
  public:
  void clear_time_enemy_t1_tower_destroyed();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& time_enemy_t1_tower_destroyed() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_time_enemy_t1_tower_destroyed();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_time_enemy_t1_tower_destroyed();
  void set_allocated_time_enemy_t1_tower_destroyed(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* time_enemy_t1_tower_destroyed);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_time_enemy_t1_tower_destroyed() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_time_enemy_t1_tower_destroyed();
  public:
  void unsafe_arena_set_allocated_time_enemy_t1_tower_destroyed(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* time_enemy_t1_tower_destroyed);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_time_enemy_t1_tower_destroyed();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat time_friendly_t1_tower_destroyed = 19;
  bool has_time_friendly_t1_tower_destroyed() const;
  private:
  bool _internal_has_time_friendly_t1_tower_destroyed() const;
  public:
  void clear_time_friendly_t1_tower_destroyed();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& time_friendly_t1_tower_destroyed() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_time_friendly_t1_tower_destroyed();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_time_friendly_t1_tower_destroyed();
  void set_allocated_time_friendly_t1_tower_destroyed(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* time_friendly_t1_tower_destroyed);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_time_friendly_t1_tower_destroyed() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_time_friendly_t1_tower_destroyed();
  public:
  void unsafe_arena_set_allocated_time_friendly_t1_tower_destroyed(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* time_friendly_t1_tower_destroyed);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_time_friendly_t1_tower_destroyed();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat enemy_roshan_kills = 20;
  bool has_enemy_roshan_kills() const;
  private:
  bool _internal_has_enemy_roshan_kills() const;
  public:
  void clear_enemy_roshan_kills();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& enemy_roshan_kills() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_enemy_roshan_kills();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_enemy_roshan_kills();
  void set_allocated_enemy_roshan_kills(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* enemy_roshan_kills);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_enemy_roshan_kills() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_enemy_roshan_kills();
  public:
  void unsafe_arena_set_allocated_enemy_roshan_kills(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* enemy_roshan_kills);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_enemy_roshan_kills();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat teleports_used = 21;
  bool has_teleports_used() const;
  private:
  bool _internal_has_teleports_used() const;
  public:
  void clear_teleports_used();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& teleports_used() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_teleports_used();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_teleports_used();
  void set_allocated_teleports_used(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* teleports_used);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_teleports_used() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_teleports_used();
  public:
  void unsafe_arena_set_allocated_teleports_used(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* teleports_used);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_teleports_used();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat dewards = 22;
  bool has_dewards() const;
  private:
  bool _internal_has_dewards() const;
  public:
  void clear_dewards();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& dewards() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_dewards();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_dewards();
  void set_allocated_dewards(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* dewards);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_dewards() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_dewards();
  public:
  void unsafe_arena_set_allocated_dewards(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* dewards);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_dewards();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat camps_stacked = 23;
  bool has_camps_stacked() const;
  private:
  bool _internal_has_camps_stacked() const;
  public:
  void clear_camps_stacked();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& camps_stacked() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_camps_stacked();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_camps_stacked();
  void set_allocated_camps_stacked(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* camps_stacked);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_camps_stacked() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_camps_stacked();
  public:
  void unsafe_arena_set_allocated_camps_stacked(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* camps_stacked);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_camps_stacked();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat support_gold = 24;
  bool has_support_gold() const;
  private:
  bool _internal_has_support_gold() const;
  public:
  void clear_support_gold();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& support_gold() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_support_gold();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_support_gold();
  void set_allocated_support_gold(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* support_gold);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_support_gold() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_support_gold();
  public:
  void unsafe_arena_set_allocated_support_gold(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* support_gold);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_support_gold();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat hero_damage = 25;
  bool has_hero_damage() const;
  private:
  bool _internal_has_hero_damage() const;
  public:
  void clear_hero_damage();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& hero_damage() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_hero_damage();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_hero_damage();
  void set_allocated_hero_damage(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* hero_damage);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_hero_damage() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_hero_damage();
  public:
  void unsafe_arena_set_allocated_hero_damage(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* hero_damage);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_hero_damage();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat hero_healing = 26;
  bool has_hero_healing() const;
  private:
  bool _internal_has_hero_healing() const;
  public:
  void clear_hero_healing();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& hero_healing() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_hero_healing();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_hero_healing();
  void set_allocated_hero_healing(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* hero_healing);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_hero_healing() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_hero_healing();
  public:
  void unsafe_arena_set_allocated_hero_healing(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* hero_healing);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_hero_healing();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat tower_damage = 27;
  bool has_tower_damage() const;
  private:
  bool _internal_has_tower_damage() const;
  public:
  void clear_tower_damage();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& tower_damage() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_tower_damage();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_tower_damage();
  void set_allocated_tower_damage(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* tower_damage);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_tower_damage() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_tower_damage();
  public:
  void unsafe_arena_set_allocated_tower_damage(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* tower_damage);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_tower_damage();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat successful_smokes = 28;
  bool has_successful_smokes() const;
  private:
  bool _internal_has_successful_smokes() const;
  public:
  void clear_successful_smokes();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& successful_smokes() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_successful_smokes();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_successful_smokes();
  void set_allocated_successful_smokes(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* successful_smokes);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_successful_smokes() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_successful_smokes();
  public:
  void unsafe_arena_set_allocated_successful_smokes(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* successful_smokes);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_successful_smokes();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat stun_duration = 29;
  bool has_stun_duration() const;
  private:
  bool _internal_has_stun_duration() const;
  public:
  void clear_stun_duration();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& stun_duration() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_stun_duration();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_stun_duration();
  void set_allocated_stun_duration(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* stun_duration);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_stun_duration() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_stun_duration();
  public:
  void unsafe_arena_set_allocated_stun_duration(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* stun_duration);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_stun_duration();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat duration = 30;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& duration() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_duration();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_duration();
  void set_allocated_duration(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* duration);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_duration() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* duration);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_duration();

  // optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat friendly_roshan_kills = 31;
  bool has_friendly_roshan_kills() const;
  private:
  bool _internal_has_friendly_roshan_kills() const;
  public:
  void clear_friendly_roshan_kills();
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& friendly_roshan_kills() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* release_friendly_roshan_kills();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* mutable_friendly_roshan_kills();
  void set_allocated_friendly_roshan_kills(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* friendly_roshan_kills);
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& _internal_friendly_roshan_kills() const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _internal_mutable_friendly_roshan_kills();
  public:
  void unsafe_arena_set_allocated_friendly_roshan_kills(
      ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* friendly_roshan_kills);
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* unsafe_arena_release_friendly_roshan_kills();

  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 predicted_position = 2;
  bool has_predicted_position() const;
  private:
  bool _internal_has_predicted_position() const;
  public:
  void clear_predicted_position();
  uint32_t predicted_position() const;
  void set_predicted_position(uint32_t value);
  private:
  uint32_t _internal_predicted_position() const;
  void _internal_set_predicted_position(uint32_t value);
  public:

  // optional uint32 game_count = 3;
  bool has_game_count() const;
  private:
  bool _internal_has_game_count() const;
  public:
  void clear_game_count();
  uint32_t game_count() const;
  void set_game_count(uint32_t value);
  private:
  uint32_t _internal_game_count() const;
  void _internal_set_game_count(uint32_t value);
  public:

  // optional uint32 win_count = 4;
  bool has_win_count() const;
  private:
  bool _internal_has_win_count() const;
  public:
  void clear_win_count();
  uint32_t win_count() const;
  void set_win_count(uint32_t value);
  private:
  uint32_t _internal_win_count() const;
  void _internal_set_win_count(uint32_t value);
  public:

  // optional uint32 lane_win_count = 5;
  bool has_lane_win_count() const;
  private:
  bool _internal_has_lane_win_count() const;
  public:
  void clear_lane_win_count();
  uint32_t lane_win_count() const;
  void set_lane_win_count(uint32_t value);
  private:
  uint32_t _internal_lane_win_count() const;
  void _internal_set_lane_win_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* kills_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* deaths_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* assists_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* rank_change_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* last_hits_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* denies_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* gpm_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* xpm_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* seconds_dead_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* bounty_runes_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* water_runes_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* power_runes_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* time_enemy_t1_tower_destroyed_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* time_friendly_t1_tower_destroyed_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* enemy_roshan_kills_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* teleports_used_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* dewards_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* camps_stacked_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* support_gold_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* hero_damage_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* hero_healing_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* tower_damage_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* successful_smokes_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* stun_duration_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* duration_;
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* friendly_roshan_kills_;
    uint32_t hero_id_;
    uint32_t predicted_position_;
    uint32_t game_count_;
    uint32_t win_count_;
    uint32_t lane_win_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
};
// -------------------------------------------------------------------

class CMsgBattleReportAggregateStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBattleReportAggregateStats) */ {
 public:
  inline CMsgBattleReportAggregateStats() : CMsgBattleReportAggregateStats(nullptr) {}
  ~CMsgBattleReportAggregateStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgBattleReportAggregateStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBattleReportAggregateStats(const CMsgBattleReportAggregateStats& from);
  CMsgBattleReportAggregateStats(CMsgBattleReportAggregateStats&& from) noexcept
    : CMsgBattleReportAggregateStats() {
    *this = ::std::move(from);
  }

  inline CMsgBattleReportAggregateStats& operator=(const CMsgBattleReportAggregateStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBattleReportAggregateStats& operator=(CMsgBattleReportAggregateStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBattleReportAggregateStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBattleReportAggregateStats* internal_default_instance() {
    return reinterpret_cast<const CMsgBattleReportAggregateStats*>(
               &_CMsgBattleReportAggregateStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgBattleReportAggregateStats& a, CMsgBattleReportAggregateStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBattleReportAggregateStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBattleReportAggregateStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBattleReportAggregateStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBattleReportAggregateStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBattleReportAggregateStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgBattleReportAggregateStats& from) {
    CMsgBattleReportAggregateStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBattleReportAggregateStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBattleReportAggregateStats";
  }
  protected:
  explicit CMsgBattleReportAggregateStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgBattleReportAggregateStats_CMsgBattleReportStat CMsgBattleReportStat;
  typedef CMsgBattleReportAggregateStats_CMsgBattleReportAggregate CMsgBattleReportAggregate;

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // repeated .CMsgBattleReportAggregateStats.CMsgBattleReportAggregate result = 1;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate >*
      mutable_result();
  private:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate& _internal_result(int index) const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* _internal_add_result();
  public:
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate& result(int index) const;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate >&
      result() const;

  // @@protoc_insertion_point(class_scope:CMsgBattleReportAggregateStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate > result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
};
// -------------------------------------------------------------------

class CMsgBattleReportAggregatedGeneralStats final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgBattleReportAggregatedGeneralStats) */ {
 public:
  inline CMsgBattleReportAggregatedGeneralStats() : CMsgBattleReportAggregatedGeneralStats(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CMsgBattleReportAggregatedGeneralStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBattleReportAggregatedGeneralStats(const CMsgBattleReportAggregatedGeneralStats& from);
  CMsgBattleReportAggregatedGeneralStats(CMsgBattleReportAggregatedGeneralStats&& from) noexcept
    : CMsgBattleReportAggregatedGeneralStats() {
    *this = ::std::move(from);
  }

  inline CMsgBattleReportAggregatedGeneralStats& operator=(const CMsgBattleReportAggregatedGeneralStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBattleReportAggregatedGeneralStats& operator=(CMsgBattleReportAggregatedGeneralStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBattleReportAggregatedGeneralStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBattleReportAggregatedGeneralStats* internal_default_instance() {
    return reinterpret_cast<const CMsgBattleReportAggregatedGeneralStats*>(
               &_CMsgBattleReportAggregatedGeneralStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgBattleReportAggregatedGeneralStats& a, CMsgBattleReportAggregatedGeneralStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBattleReportAggregatedGeneralStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBattleReportAggregatedGeneralStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBattleReportAggregatedGeneralStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBattleReportAggregatedGeneralStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgBattleReportAggregatedGeneralStats& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgBattleReportAggregatedGeneralStats& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBattleReportAggregatedGeneralStats";
  }
  protected:
  explicit CMsgBattleReportAggregatedGeneralStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgBattleReportAggregatedGeneralStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCGetBattleReportResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCGetBattleReportResponse) */ {
 public:
  inline CMsgClientToGCGetBattleReportResponse() : CMsgClientToGCGetBattleReportResponse(nullptr) {}
  ~CMsgClientToGCGetBattleReportResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCGetBattleReportResponse(const CMsgClientToGCGetBattleReportResponse& from);
  CMsgClientToGCGetBattleReportResponse(CMsgClientToGCGetBattleReportResponse&& from) noexcept
    : CMsgClientToGCGetBattleReportResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCGetBattleReportResponse& operator=(const CMsgClientToGCGetBattleReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCGetBattleReportResponse& operator=(CMsgClientToGCGetBattleReportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCGetBattleReportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCGetBattleReportResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCGetBattleReportResponse*>(
               &_CMsgClientToGCGetBattleReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgClientToGCGetBattleReportResponse& a, CMsgClientToGCGetBattleReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCGetBattleReportResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCGetBattleReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCGetBattleReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCGetBattleReportResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCGetBattleReportResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCGetBattleReportResponse& from) {
    CMsgClientToGCGetBattleReportResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCGetBattleReportResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCGetBattleReportResponse";
  }
  protected:
  explicit CMsgClientToGCGetBattleReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCGetBattleReportResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCGetBattleReportResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCGetBattleReportResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCGetBattleReportResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCGetBattleReportResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_ePermissionDenied =
    CMsgClientToGCGetBattleReportResponse_EResponse_k_ePermissionDenied;
  static constexpr EResponse k_eNotSubscribedToDotaPlus =
    CMsgClientToGCGetBattleReportResponse_EResponse_k_eNotSubscribedToDotaPlus;
  static constexpr EResponse k_eInvalidParameters =
    CMsgClientToGCGetBattleReportResponse_EResponse_k_eInvalidParameters;
  static constexpr EResponse k_eUnableToGetPlusSubInfo =
    CMsgClientToGCGetBattleReportResponse_EResponse_k_eUnableToGetPlusSubInfo;
  static constexpr EResponse k_eUnableToLoadBattleReport =
    CMsgClientToGCGetBattleReportResponse_EResponse_k_eUnableToLoadBattleReport;
  static constexpr EResponse k_eUnableToSaveBattleReport =
    CMsgClientToGCGetBattleReportResponse_EResponse_k_eUnableToSaveBattleReport;
  static constexpr EResponse k_eUnableToGetAggregates =
    CMsgClientToGCGetBattleReportResponse_EResponse_k_eUnableToGetAggregates;
  static constexpr EResponse k_eNotEnoughGamesPlayed =
    CMsgClientToGCGetBattleReportResponse_EResponse_k_eNotEnoughGamesPlayed;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCGetBattleReportResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCGetBattleReportResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCGetBattleReportResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCGetBattleReportResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCGetBattleReportResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCGetBattleReportResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCGetBattleReportResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReportFieldNumber = 1,
    kAggregateStatsFieldNumber = 3,
    kInfoFieldNumber = 4,
    kResponseFieldNumber = 2,
  };
  // optional .CMsgBattleReport report = 1;
  bool has_report() const;
  private:
  bool _internal_has_report() const;
  public:
  void clear_report();
  const ::CMsgBattleReport& report() const;
  PROTOBUF_NODISCARD ::CMsgBattleReport* release_report();
  ::CMsgBattleReport* mutable_report();
  void set_allocated_report(::CMsgBattleReport* report);
  private:
  const ::CMsgBattleReport& _internal_report() const;
  ::CMsgBattleReport* _internal_mutable_report();
  public:
  void unsafe_arena_set_allocated_report(
      ::CMsgBattleReport* report);
  ::CMsgBattleReport* unsafe_arena_release_report();

  // optional .CMsgBattleReportAggregateStats aggregate_stats = 3;
  bool has_aggregate_stats() const;
  private:
  bool _internal_has_aggregate_stats() const;
  public:
  void clear_aggregate_stats();
  const ::CMsgBattleReportAggregateStats& aggregate_stats() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats* release_aggregate_stats();
  ::CMsgBattleReportAggregateStats* mutable_aggregate_stats();
  void set_allocated_aggregate_stats(::CMsgBattleReportAggregateStats* aggregate_stats);
  private:
  const ::CMsgBattleReportAggregateStats& _internal_aggregate_stats() const;
  ::CMsgBattleReportAggregateStats* _internal_mutable_aggregate_stats();
  public:
  void unsafe_arena_set_allocated_aggregate_stats(
      ::CMsgBattleReportAggregateStats* aggregate_stats);
  ::CMsgBattleReportAggregateStats* unsafe_arena_release_aggregate_stats();

  // optional .CMsgBattleReportInfo info = 4;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::CMsgBattleReportInfo& info() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportInfo* release_info();
  ::CMsgBattleReportInfo* mutable_info();
  void set_allocated_info(::CMsgBattleReportInfo* info);
  private:
  const ::CMsgBattleReportInfo& _internal_info() const;
  ::CMsgBattleReportInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::CMsgBattleReportInfo* info);
  ::CMsgBattleReportInfo* unsafe_arena_release_info();

  // optional .CMsgClientToGCGetBattleReportResponse.EResponse response = 2 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCGetBattleReportResponse_EResponse response() const;
  void set_response(::CMsgClientToGCGetBattleReportResponse_EResponse value);
  private:
  ::CMsgClientToGCGetBattleReportResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCGetBattleReportResponse_EResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCGetBattleReportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgBattleReport* report_;
    ::CMsgBattleReportAggregateStats* aggregate_stats_;
    ::CMsgBattleReportInfo* info_;
    int response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCGetBattleReportAggregateStats.CMsgBattleReportAggregateKey) */ {
 public:
  inline CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey() : CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey(nullptr) {}
  ~CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey(const CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey& from);
  CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey(CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey&& from) noexcept
    : CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey& operator=(const CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey& operator=(CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey*>(
               &_CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey& a, CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey& from) {
    CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCGetBattleReportAggregateStats.CMsgBattleReportAggregateKey";
  }
  protected:
  explicit CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroIdFieldNumber = 1,
    kPredictedPositionFieldNumber = 2,
  };
  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 predicted_position = 2;
  bool has_predicted_position() const;
  private:
  bool _internal_has_predicted_position() const;
  public:
  void clear_predicted_position();
  uint32_t predicted_position() const;
  void set_predicted_position(uint32_t value);
  private:
  uint32_t _internal_predicted_position() const;
  void _internal_set_predicted_position(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCGetBattleReportAggregateStats.CMsgBattleReportAggregateKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t hero_id_;
    uint32_t predicted_position_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCGetBattleReportAggregateStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCGetBattleReportAggregateStats) */ {
 public:
  inline CMsgClientToGCGetBattleReportAggregateStats() : CMsgClientToGCGetBattleReportAggregateStats(nullptr) {}
  ~CMsgClientToGCGetBattleReportAggregateStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportAggregateStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCGetBattleReportAggregateStats(const CMsgClientToGCGetBattleReportAggregateStats& from);
  CMsgClientToGCGetBattleReportAggregateStats(CMsgClientToGCGetBattleReportAggregateStats&& from) noexcept
    : CMsgClientToGCGetBattleReportAggregateStats() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCGetBattleReportAggregateStats& operator=(const CMsgClientToGCGetBattleReportAggregateStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCGetBattleReportAggregateStats& operator=(CMsgClientToGCGetBattleReportAggregateStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCGetBattleReportAggregateStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCGetBattleReportAggregateStats* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCGetBattleReportAggregateStats*>(
               &_CMsgClientToGCGetBattleReportAggregateStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMsgClientToGCGetBattleReportAggregateStats& a, CMsgClientToGCGetBattleReportAggregateStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCGetBattleReportAggregateStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCGetBattleReportAggregateStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCGetBattleReportAggregateStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCGetBattleReportAggregateStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCGetBattleReportAggregateStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCGetBattleReportAggregateStats& from) {
    CMsgClientToGCGetBattleReportAggregateStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCGetBattleReportAggregateStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCGetBattleReportAggregateStats";
  }
  protected:
  explicit CMsgClientToGCGetBattleReportAggregateStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey CMsgBattleReportAggregateKey;

  // accessors -------------------------------------------------------

  enum : int {
    kAggregateKeysFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kDurationFieldNumber = 3,
    kRankFieldNumber = 4,
  };
  // repeated .CMsgClientToGCGetBattleReportAggregateStats.CMsgBattleReportAggregateKey aggregate_keys = 1;
  int aggregate_keys_size() const;
  private:
  int _internal_aggregate_keys_size() const;
  public:
  void clear_aggregate_keys();
  ::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey* mutable_aggregate_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey >*
      mutable_aggregate_keys();
  private:
  const ::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey& _internal_aggregate_keys(int index) const;
  ::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey* _internal_add_aggregate_keys();
  public:
  const ::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey& aggregate_keys(int index) const;
  ::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey* add_aggregate_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey >&
      aggregate_keys() const;

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional uint32 duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // optional uint32 rank = 4;
  bool has_rank() const;
  private:
  bool _internal_has_rank() const;
  public:
  void clear_rank();
  uint32_t rank() const;
  void set_rank(uint32_t value);
  private:
  uint32_t _internal_rank() const;
  void _internal_set_rank(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCGetBattleReportAggregateStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey > aggregate_keys_;
    uint32_t timestamp_;
    uint32_t duration_;
    uint32_t rank_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCGetBattleReportAggregateStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCGetBattleReportAggregateStatsResponse) */ {
 public:
  inline CMsgClientToGCGetBattleReportAggregateStatsResponse() : CMsgClientToGCGetBattleReportAggregateStatsResponse(nullptr) {}
  ~CMsgClientToGCGetBattleReportAggregateStatsResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportAggregateStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCGetBattleReportAggregateStatsResponse(const CMsgClientToGCGetBattleReportAggregateStatsResponse& from);
  CMsgClientToGCGetBattleReportAggregateStatsResponse(CMsgClientToGCGetBattleReportAggregateStatsResponse&& from) noexcept
    : CMsgClientToGCGetBattleReportAggregateStatsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCGetBattleReportAggregateStatsResponse& operator=(const CMsgClientToGCGetBattleReportAggregateStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCGetBattleReportAggregateStatsResponse& operator=(CMsgClientToGCGetBattleReportAggregateStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCGetBattleReportAggregateStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCGetBattleReportAggregateStatsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCGetBattleReportAggregateStatsResponse*>(
               &_CMsgClientToGCGetBattleReportAggregateStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMsgClientToGCGetBattleReportAggregateStatsResponse& a, CMsgClientToGCGetBattleReportAggregateStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCGetBattleReportAggregateStatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCGetBattleReportAggregateStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCGetBattleReportAggregateStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCGetBattleReportAggregateStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCGetBattleReportAggregateStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCGetBattleReportAggregateStatsResponse& from) {
    CMsgClientToGCGetBattleReportAggregateStatsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCGetBattleReportAggregateStatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCGetBattleReportAggregateStatsResponse";
  }
  protected:
  explicit CMsgClientToGCGetBattleReportAggregateStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_ePermissionDenied =
    CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_k_ePermissionDenied;
  static constexpr EResponse k_eInvalidParams =
    CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_k_eInvalidParams;
  static constexpr EResponse k_eNotSubscribedToDotaPlus =
    CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_k_eNotSubscribedToDotaPlus;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAggregateStatsFieldNumber = 1,
    kResponseFieldNumber = 2,
  };
  // optional .CMsgBattleReportAggregateStats aggregate_stats = 1;
  bool has_aggregate_stats() const;
  private:
  bool _internal_has_aggregate_stats() const;
  public:
  void clear_aggregate_stats();
  const ::CMsgBattleReportAggregateStats& aggregate_stats() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportAggregateStats* release_aggregate_stats();
  ::CMsgBattleReportAggregateStats* mutable_aggregate_stats();
  void set_allocated_aggregate_stats(::CMsgBattleReportAggregateStats* aggregate_stats);
  private:
  const ::CMsgBattleReportAggregateStats& _internal_aggregate_stats() const;
  ::CMsgBattleReportAggregateStats* _internal_mutable_aggregate_stats();
  public:
  void unsafe_arena_set_allocated_aggregate_stats(
      ::CMsgBattleReportAggregateStats* aggregate_stats);
  ::CMsgBattleReportAggregateStats* unsafe_arena_release_aggregate_stats();

  // optional .CMsgClientToGCGetBattleReportAggregateStatsResponse.EResponse response = 2 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse response() const;
  void set_response(::CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse value);
  private:
  ::CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCGetBattleReportAggregateStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgBattleReportAggregateStats* aggregate_stats_;
    int response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCGetBattleReportInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCGetBattleReportInfo) */ {
 public:
  inline CMsgClientToGCGetBattleReportInfo() : CMsgClientToGCGetBattleReportInfo(nullptr) {}
  ~CMsgClientToGCGetBattleReportInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCGetBattleReportInfo(const CMsgClientToGCGetBattleReportInfo& from);
  CMsgClientToGCGetBattleReportInfo(CMsgClientToGCGetBattleReportInfo&& from) noexcept
    : CMsgClientToGCGetBattleReportInfo() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCGetBattleReportInfo& operator=(const CMsgClientToGCGetBattleReportInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCGetBattleReportInfo& operator=(CMsgClientToGCGetBattleReportInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCGetBattleReportInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCGetBattleReportInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCGetBattleReportInfo*>(
               &_CMsgClientToGCGetBattleReportInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgClientToGCGetBattleReportInfo& a, CMsgClientToGCGetBattleReportInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCGetBattleReportInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCGetBattleReportInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCGetBattleReportInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCGetBattleReportInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCGetBattleReportInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCGetBattleReportInfo& from) {
    CMsgClientToGCGetBattleReportInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCGetBattleReportInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCGetBattleReportInfo";
  }
  protected:
  explicit CMsgClientToGCGetBattleReportInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCGetBattleReportInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCGetBattleReportInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCGetBattleReportInfoResponse) */ {
 public:
  inline CMsgClientToGCGetBattleReportInfoResponse() : CMsgClientToGCGetBattleReportInfoResponse(nullptr) {}
  ~CMsgClientToGCGetBattleReportInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCGetBattleReportInfoResponse(const CMsgClientToGCGetBattleReportInfoResponse& from);
  CMsgClientToGCGetBattleReportInfoResponse(CMsgClientToGCGetBattleReportInfoResponse&& from) noexcept
    : CMsgClientToGCGetBattleReportInfoResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCGetBattleReportInfoResponse& operator=(const CMsgClientToGCGetBattleReportInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCGetBattleReportInfoResponse& operator=(CMsgClientToGCGetBattleReportInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCGetBattleReportInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCGetBattleReportInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCGetBattleReportInfoResponse*>(
               &_CMsgClientToGCGetBattleReportInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgClientToGCGetBattleReportInfoResponse& a, CMsgClientToGCGetBattleReportInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCGetBattleReportInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCGetBattleReportInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCGetBattleReportInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCGetBattleReportInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCGetBattleReportInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCGetBattleReportInfoResponse& from) {
    CMsgClientToGCGetBattleReportInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCGetBattleReportInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCGetBattleReportInfoResponse";
  }
  protected:
  explicit CMsgClientToGCGetBattleReportInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCGetBattleReportInfoResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCGetBattleReportInfoResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCGetBattleReportInfoResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCGetBattleReportInfoResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCGetBattleReportInfoResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_ePermissionDenied =
    CMsgClientToGCGetBattleReportInfoResponse_EResponse_k_ePermissionDenied;
  static constexpr EResponse k_eNotSubscribedToDotaPlus =
    CMsgClientToGCGetBattleReportInfoResponse_EResponse_k_eNotSubscribedToDotaPlus;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCGetBattleReportInfoResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCGetBattleReportInfoResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCGetBattleReportInfoResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCGetBattleReportInfoResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCGetBattleReportInfoResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCGetBattleReportInfoResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCGetBattleReportInfoResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBattleReportInfoListFieldNumber = 1,
    kResponseFieldNumber = 2,
  };
  // optional .CMsgBattleReportInfoList battle_report_info_list = 1;
  bool has_battle_report_info_list() const;
  private:
  bool _internal_has_battle_report_info_list() const;
  public:
  void clear_battle_report_info_list();
  const ::CMsgBattleReportInfoList& battle_report_info_list() const;
  PROTOBUF_NODISCARD ::CMsgBattleReportInfoList* release_battle_report_info_list();
  ::CMsgBattleReportInfoList* mutable_battle_report_info_list();
  void set_allocated_battle_report_info_list(::CMsgBattleReportInfoList* battle_report_info_list);
  private:
  const ::CMsgBattleReportInfoList& _internal_battle_report_info_list() const;
  ::CMsgBattleReportInfoList* _internal_mutable_battle_report_info_list();
  public:
  void unsafe_arena_set_allocated_battle_report_info_list(
      ::CMsgBattleReportInfoList* battle_report_info_list);
  ::CMsgBattleReportInfoList* unsafe_arena_release_battle_report_info_list();

  // optional .CMsgClientToGCGetBattleReportInfoResponse.EResponse response = 2 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCGetBattleReportInfoResponse_EResponse response() const;
  void set_response(::CMsgClientToGCGetBattleReportInfoResponse_EResponse value);
  private:
  ::CMsgClientToGCGetBattleReportInfoResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCGetBattleReportInfoResponse_EResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCGetBattleReportInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgBattleReportInfoList* battle_report_info_list_;
    int response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCAcknowledgeBattleReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCAcknowledgeBattleReport) */ {
 public:
  inline CMsgClientToGCAcknowledgeBattleReport() : CMsgClientToGCAcknowledgeBattleReport(nullptr) {}
  ~CMsgClientToGCAcknowledgeBattleReport() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCAcknowledgeBattleReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCAcknowledgeBattleReport(const CMsgClientToGCAcknowledgeBattleReport& from);
  CMsgClientToGCAcknowledgeBattleReport(CMsgClientToGCAcknowledgeBattleReport&& from) noexcept
    : CMsgClientToGCAcknowledgeBattleReport() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCAcknowledgeBattleReport& operator=(const CMsgClientToGCAcknowledgeBattleReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCAcknowledgeBattleReport& operator=(CMsgClientToGCAcknowledgeBattleReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCAcknowledgeBattleReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCAcknowledgeBattleReport* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCAcknowledgeBattleReport*>(
               &_CMsgClientToGCAcknowledgeBattleReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMsgClientToGCAcknowledgeBattleReport& a, CMsgClientToGCAcknowledgeBattleReport& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCAcknowledgeBattleReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCAcknowledgeBattleReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCAcknowledgeBattleReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCAcknowledgeBattleReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCAcknowledgeBattleReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCAcknowledgeBattleReport& from) {
    CMsgClientToGCAcknowledgeBattleReport::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCAcknowledgeBattleReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCAcknowledgeBattleReport";
  }
  protected:
  explicit CMsgClientToGCAcknowledgeBattleReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kDurationFieldNumber = 3,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional uint32 duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCAcknowledgeBattleReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    uint32_t timestamp_;
    uint32_t duration_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCAcknowledgeBattleReportResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCAcknowledgeBattleReportResponse) */ {
 public:
  inline CMsgClientToGCAcknowledgeBattleReportResponse() : CMsgClientToGCAcknowledgeBattleReportResponse(nullptr) {}
  ~CMsgClientToGCAcknowledgeBattleReportResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCAcknowledgeBattleReportResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCAcknowledgeBattleReportResponse(const CMsgClientToGCAcknowledgeBattleReportResponse& from);
  CMsgClientToGCAcknowledgeBattleReportResponse(CMsgClientToGCAcknowledgeBattleReportResponse&& from) noexcept
    : CMsgClientToGCAcknowledgeBattleReportResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCAcknowledgeBattleReportResponse& operator=(const CMsgClientToGCAcknowledgeBattleReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCAcknowledgeBattleReportResponse& operator=(CMsgClientToGCAcknowledgeBattleReportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCAcknowledgeBattleReportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCAcknowledgeBattleReportResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCAcknowledgeBattleReportResponse*>(
               &_CMsgClientToGCAcknowledgeBattleReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMsgClientToGCAcknowledgeBattleReportResponse& a, CMsgClientToGCAcknowledgeBattleReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCAcknowledgeBattleReportResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCAcknowledgeBattleReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCAcknowledgeBattleReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCAcknowledgeBattleReportResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCAcknowledgeBattleReportResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCAcknowledgeBattleReportResponse& from) {
    CMsgClientToGCAcknowledgeBattleReportResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCAcknowledgeBattleReportResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCAcknowledgeBattleReportResponse";
  }
  protected:
  explicit CMsgClientToGCAcknowledgeBattleReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCAcknowledgeBattleReportResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_eTimeout =
    CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_eTimeout;
  static constexpr EResponse k_ePermissionDenied =
    CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_ePermissionDenied;
  static constexpr EResponse k_eUnableToLoadBattleReport =
    CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_eUnableToLoadBattleReport;
  static constexpr EResponse k_eAlreadyAcknowledged =
    CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_eAlreadyAcknowledged;
  static constexpr EResponse k_eUnknownReport =
    CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_eUnknownReport;
  static constexpr EResponse k_eNotSubscribedToDotaPlus =
    CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_eNotSubscribedToDotaPlus;
  static constexpr EResponse k_eNotEnoughGamesPlayed =
    CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_k_eNotEnoughGamesPlayed;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
    kShardsAwardedFieldNumber = 2,
  };
  // optional .CMsgClientToGCAcknowledgeBattleReportResponse.EResponse response = 1 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCAcknowledgeBattleReportResponse_EResponse response() const;
  void set_response(::CMsgClientToGCAcknowledgeBattleReportResponse_EResponse value);
  private:
  ::CMsgClientToGCAcknowledgeBattleReportResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCAcknowledgeBattleReportResponse_EResponse value);
  public:

  // optional uint32 shards_awarded = 2;
  bool has_shards_awarded() const;
  private:
  bool _internal_has_shards_awarded() const;
  public:
  void clear_shards_awarded();
  uint32_t shards_awarded() const;
  void set_shards_awarded(uint32_t value);
  private:
  uint32_t _internal_shards_awarded() const;
  void _internal_set_shards_awarded(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCAcknowledgeBattleReportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int response_;
    uint32_t shards_awarded_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCGetBattleReportMatchHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCGetBattleReportMatchHistory) */ {
 public:
  inline CMsgClientToGCGetBattleReportMatchHistory() : CMsgClientToGCGetBattleReportMatchHistory(nullptr) {}
  ~CMsgClientToGCGetBattleReportMatchHistory() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportMatchHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCGetBattleReportMatchHistory(const CMsgClientToGCGetBattleReportMatchHistory& from);
  CMsgClientToGCGetBattleReportMatchHistory(CMsgClientToGCGetBattleReportMatchHistory&& from) noexcept
    : CMsgClientToGCGetBattleReportMatchHistory() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCGetBattleReportMatchHistory& operator=(const CMsgClientToGCGetBattleReportMatchHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCGetBattleReportMatchHistory& operator=(CMsgClientToGCGetBattleReportMatchHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCGetBattleReportMatchHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCGetBattleReportMatchHistory* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCGetBattleReportMatchHistory*>(
               &_CMsgClientToGCGetBattleReportMatchHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMsgClientToGCGetBattleReportMatchHistory& a, CMsgClientToGCGetBattleReportMatchHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCGetBattleReportMatchHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCGetBattleReportMatchHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCGetBattleReportMatchHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCGetBattleReportMatchHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCGetBattleReportMatchHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCGetBattleReportMatchHistory& from) {
    CMsgClientToGCGetBattleReportMatchHistory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCGetBattleReportMatchHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCGetBattleReportMatchHistory";
  }
  protected:
  explicit CMsgClientToGCGetBattleReportMatchHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kDurationFieldNumber = 3,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional uint32 duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCGetBattleReportMatchHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    uint32_t timestamp_;
    uint32_t duration_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCGetBattleReportMatchHistoryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCGetBattleReportMatchHistoryResponse) */ {
 public:
  inline CMsgClientToGCGetBattleReportMatchHistoryResponse() : CMsgClientToGCGetBattleReportMatchHistoryResponse(nullptr) {}
  ~CMsgClientToGCGetBattleReportMatchHistoryResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCGetBattleReportMatchHistoryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCGetBattleReportMatchHistoryResponse(const CMsgClientToGCGetBattleReportMatchHistoryResponse& from);
  CMsgClientToGCGetBattleReportMatchHistoryResponse(CMsgClientToGCGetBattleReportMatchHistoryResponse&& from) noexcept
    : CMsgClientToGCGetBattleReportMatchHistoryResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCGetBattleReportMatchHistoryResponse& operator=(const CMsgClientToGCGetBattleReportMatchHistoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCGetBattleReportMatchHistoryResponse& operator=(CMsgClientToGCGetBattleReportMatchHistoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCGetBattleReportMatchHistoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCGetBattleReportMatchHistoryResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCGetBattleReportMatchHistoryResponse*>(
               &_CMsgClientToGCGetBattleReportMatchHistoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CMsgClientToGCGetBattleReportMatchHistoryResponse& a, CMsgClientToGCGetBattleReportMatchHistoryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCGetBattleReportMatchHistoryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCGetBattleReportMatchHistoryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCGetBattleReportMatchHistoryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCGetBattleReportMatchHistoryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCGetBattleReportMatchHistoryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCGetBattleReportMatchHistoryResponse& from) {
    CMsgClientToGCGetBattleReportMatchHistoryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCGetBattleReportMatchHistoryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCGetBattleReportMatchHistoryResponse";
  }
  protected:
  explicit CMsgClientToGCGetBattleReportMatchHistoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_eTimeout =
    CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_k_eTimeout;
  static constexpr EResponse k_ePermissionDenied =
    CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_k_ePermissionDenied;
  static constexpr EResponse k_eNotSubscribedToDotaPlus =
    CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_k_eNotSubscribedToDotaPlus;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGamesFieldNumber = 2,
    kResponseFieldNumber = 1,
  };
  // optional .CMsgBattleReport_GameList games = 2;
  bool has_games() const;
  private:
  bool _internal_has_games() const;
  public:
  void clear_games();
  const ::CMsgBattleReport_GameList& games() const;
  PROTOBUF_NODISCARD ::CMsgBattleReport_GameList* release_games();
  ::CMsgBattleReport_GameList* mutable_games();
  void set_allocated_games(::CMsgBattleReport_GameList* games);
  private:
  const ::CMsgBattleReport_GameList& _internal_games() const;
  ::CMsgBattleReport_GameList* _internal_mutable_games();
  public:
  void unsafe_arena_set_allocated_games(
      ::CMsgBattleReport_GameList* games);
  ::CMsgBattleReport_GameList* unsafe_arena_release_games();

  // optional .CMsgClientToGCGetBattleReportMatchHistoryResponse.EResponse response = 1 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse response() const;
  void set_response(::CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse value);
  private:
  ::CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCGetBattleReportMatchHistoryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgBattleReport_GameList* games_;
    int response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgClientToGCGetBattleReport

// optional uint32 account_id = 1;
inline bool CMsgClientToGCGetBattleReport::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCGetBattleReport::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgClientToGCGetBattleReport::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCGetBattleReport::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgClientToGCGetBattleReport::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetBattleReport.account_id)
  return _internal_account_id();
}
inline void CMsgClientToGCGetBattleReport::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgClientToGCGetBattleReport::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetBattleReport.account_id)
}

// optional uint32 timestamp = 2;
inline bool CMsgClientToGCGetBattleReport::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCGetBattleReport::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgClientToGCGetBattleReport::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCGetBattleReport::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgClientToGCGetBattleReport::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetBattleReport.timestamp)
  return _internal_timestamp();
}
inline void CMsgClientToGCGetBattleReport::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_ = value;
}
inline void CMsgClientToGCGetBattleReport::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetBattleReport.timestamp)
}

// optional uint32 duration = 3;
inline bool CMsgClientToGCGetBattleReport::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientToGCGetBattleReport::has_duration() const {
  return _internal_has_duration();
}
inline void CMsgClientToGCGetBattleReport::clear_duration() {
  _impl_.duration_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientToGCGetBattleReport::_internal_duration() const {
  return _impl_.duration_;
}
inline uint32_t CMsgClientToGCGetBattleReport::duration() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetBattleReport.duration)
  return _internal_duration();
}
inline void CMsgClientToGCGetBattleReport::_internal_set_duration(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.duration_ = value;
}
inline void CMsgClientToGCGetBattleReport::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetBattleReport.duration)
}

// -------------------------------------------------------------------

// CMsgBattleReport_Game

// optional uint32 hero_id = 1;
inline bool CMsgBattleReport_Game::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgBattleReport_Game::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgBattleReport_Game::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgBattleReport_Game::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.hero_id)
  return _internal_hero_id();
}
inline void CMsgBattleReport_Game::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hero_id_ = value;
}
inline void CMsgBattleReport_Game::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.hero_id)
}

// optional uint32 kills = 2;
inline bool CMsgBattleReport_Game::_internal_has_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_kills() const {
  return _internal_has_kills();
}
inline void CMsgBattleReport_Game::clear_kills() {
  _impl_.kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgBattleReport_Game::_internal_kills() const {
  return _impl_.kills_;
}
inline uint32_t CMsgBattleReport_Game::kills() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.kills)
  return _internal_kills();
}
inline void CMsgBattleReport_Game::_internal_set_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.kills_ = value;
}
inline void CMsgBattleReport_Game::set_kills(uint32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.kills)
}

// optional uint32 deaths = 3;
inline bool CMsgBattleReport_Game::_internal_has_deaths() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_deaths() const {
  return _internal_has_deaths();
}
inline void CMsgBattleReport_Game::clear_deaths() {
  _impl_.deaths_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgBattleReport_Game::_internal_deaths() const {
  return _impl_.deaths_;
}
inline uint32_t CMsgBattleReport_Game::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.deaths)
  return _internal_deaths();
}
inline void CMsgBattleReport_Game::_internal_set_deaths(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.deaths_ = value;
}
inline void CMsgBattleReport_Game::set_deaths(uint32_t value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.deaths)
}

// optional uint32 assists = 4;
inline bool CMsgBattleReport_Game::_internal_has_assists() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_assists() const {
  return _internal_has_assists();
}
inline void CMsgBattleReport_Game::clear_assists() {
  _impl_.assists_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgBattleReport_Game::_internal_assists() const {
  return _impl_.assists_;
}
inline uint32_t CMsgBattleReport_Game::assists() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.assists)
  return _internal_assists();
}
inline void CMsgBattleReport_Game::_internal_set_assists(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.assists_ = value;
}
inline void CMsgBattleReport_Game::set_assists(uint32_t value) {
  _internal_set_assists(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.assists)
}

// optional int32 rank_change = 5;
inline bool CMsgBattleReport_Game::_internal_has_rank_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_rank_change() const {
  return _internal_has_rank_change();
}
inline void CMsgBattleReport_Game::clear_rank_change() {
  _impl_.rank_change_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t CMsgBattleReport_Game::_internal_rank_change() const {
  return _impl_.rank_change_;
}
inline int32_t CMsgBattleReport_Game::rank_change() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.rank_change)
  return _internal_rank_change();
}
inline void CMsgBattleReport_Game::_internal_set_rank_change(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rank_change_ = value;
}
inline void CMsgBattleReport_Game::set_rank_change(int32_t value) {
  _internal_set_rank_change(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.rank_change)
}

// optional uint32 last_hits = 6;
inline bool CMsgBattleReport_Game::_internal_has_last_hits() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_last_hits() const {
  return _internal_has_last_hits();
}
inline void CMsgBattleReport_Game::clear_last_hits() {
  _impl_.last_hits_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgBattleReport_Game::_internal_last_hits() const {
  return _impl_.last_hits_;
}
inline uint32_t CMsgBattleReport_Game::last_hits() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.last_hits)
  return _internal_last_hits();
}
inline void CMsgBattleReport_Game::_internal_set_last_hits(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.last_hits_ = value;
}
inline void CMsgBattleReport_Game::set_last_hits(uint32_t value) {
  _internal_set_last_hits(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.last_hits)
}

// optional uint32 denies = 21;
inline bool CMsgBattleReport_Game::_internal_has_denies() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_denies() const {
  return _internal_has_denies();
}
inline void CMsgBattleReport_Game::clear_denies() {
  _impl_.denies_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CMsgBattleReport_Game::_internal_denies() const {
  return _impl_.denies_;
}
inline uint32_t CMsgBattleReport_Game::denies() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.denies)
  return _internal_denies();
}
inline void CMsgBattleReport_Game::_internal_set_denies(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.denies_ = value;
}
inline void CMsgBattleReport_Game::set_denies(uint32_t value) {
  _internal_set_denies(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.denies)
}

// optional uint32 gpm = 7;
inline bool CMsgBattleReport_Game::_internal_has_gpm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_gpm() const {
  return _internal_has_gpm();
}
inline void CMsgBattleReport_Game::clear_gpm() {
  _impl_.gpm_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgBattleReport_Game::_internal_gpm() const {
  return _impl_.gpm_;
}
inline uint32_t CMsgBattleReport_Game::gpm() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.gpm)
  return _internal_gpm();
}
inline void CMsgBattleReport_Game::_internal_set_gpm(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.gpm_ = value;
}
inline void CMsgBattleReport_Game::set_gpm(uint32_t value) {
  _internal_set_gpm(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.gpm)
}

// optional uint32 xpm = 8;
inline bool CMsgBattleReport_Game::_internal_has_xpm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_xpm() const {
  return _internal_has_xpm();
}
inline void CMsgBattleReport_Game::clear_xpm() {
  _impl_.xpm_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgBattleReport_Game::_internal_xpm() const {
  return _impl_.xpm_;
}
inline uint32_t CMsgBattleReport_Game::xpm() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.xpm)
  return _internal_xpm();
}
inline void CMsgBattleReport_Game::_internal_set_xpm(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.xpm_ = value;
}
inline void CMsgBattleReport_Game::set_xpm(uint32_t value) {
  _internal_set_xpm(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.xpm)
}

// optional .CMsgBattleReport_Role role = 9 [default = k_eUnknownRole];
inline bool CMsgBattleReport_Game::_internal_has_role() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_role() const {
  return _internal_has_role();
}
inline void CMsgBattleReport_Game::clear_role() {
  _impl_.role_ = -1;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline ::CMsgBattleReport_Role CMsgBattleReport_Game::_internal_role() const {
  return static_cast< ::CMsgBattleReport_Role >(_impl_.role_);
}
inline ::CMsgBattleReport_Role CMsgBattleReport_Game::role() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.role)
  return _internal_role();
}
inline void CMsgBattleReport_Game::_internal_set_role(::CMsgBattleReport_Role value) {
  assert(::CMsgBattleReport_Role_IsValid(value));
  _impl_._has_bits_[1] |= 0x00000200u;
  _impl_.role_ = value;
}
inline void CMsgBattleReport_Game::set_role(::CMsgBattleReport_Role value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.role)
}

// optional .CMsgBattleReport_EOutcome outcome = 10 [default = k_eWin];
inline bool CMsgBattleReport_Game::_internal_has_outcome() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_outcome() const {
  return _internal_has_outcome();
}
inline void CMsgBattleReport_Game::clear_outcome() {
  _impl_.outcome_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::CMsgBattleReport_EOutcome CMsgBattleReport_Game::_internal_outcome() const {
  return static_cast< ::CMsgBattleReport_EOutcome >(_impl_.outcome_);
}
inline ::CMsgBattleReport_EOutcome CMsgBattleReport_Game::outcome() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.outcome)
  return _internal_outcome();
}
inline void CMsgBattleReport_Game::_internal_set_outcome(::CMsgBattleReport_EOutcome value) {
  assert(::CMsgBattleReport_EOutcome_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.outcome_ = value;
}
inline void CMsgBattleReport_Game::set_outcome(::CMsgBattleReport_EOutcome value) {
  _internal_set_outcome(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.outcome)
}

// optional .CMsgBattleReport_ELaneOutcome lane_outcome = 11 [default = k_eUnknownLaneOutcome];
inline bool CMsgBattleReport_Game::_internal_has_lane_outcome() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_lane_outcome() const {
  return _internal_has_lane_outcome();
}
inline void CMsgBattleReport_Game::clear_lane_outcome() {
  _impl_.lane_outcome_ = -1;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline ::CMsgBattleReport_ELaneOutcome CMsgBattleReport_Game::_internal_lane_outcome() const {
  return static_cast< ::CMsgBattleReport_ELaneOutcome >(_impl_.lane_outcome_);
}
inline ::CMsgBattleReport_ELaneOutcome CMsgBattleReport_Game::lane_outcome() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.lane_outcome)
  return _internal_lane_outcome();
}
inline void CMsgBattleReport_Game::_internal_set_lane_outcome(::CMsgBattleReport_ELaneOutcome value) {
  assert(::CMsgBattleReport_ELaneOutcome_IsValid(value));
  _impl_._has_bits_[1] |= 0x00000400u;
  _impl_.lane_outcome_ = value;
}
inline void CMsgBattleReport_Game::set_lane_outcome(::CMsgBattleReport_ELaneOutcome value) {
  _internal_set_lane_outcome(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.lane_outcome)
}

// optional bool ranked = 12;
inline bool CMsgBattleReport_Game::_internal_has_ranked() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_ranked() const {
  return _internal_has_ranked();
}
inline void CMsgBattleReport_Game::clear_ranked() {
  _impl_.ranked_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool CMsgBattleReport_Game::_internal_ranked() const {
  return _impl_.ranked_;
}
inline bool CMsgBattleReport_Game::ranked() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.ranked)
  return _internal_ranked();
}
inline void CMsgBattleReport_Game::_internal_set_ranked(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.ranked_ = value;
}
inline void CMsgBattleReport_Game::set_ranked(bool value) {
  _internal_set_ranked(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.ranked)
}

// optional uint64 match_id = 13;
inline bool CMsgBattleReport_Game::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgBattleReport_Game::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint64_t CMsgBattleReport_Game::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgBattleReport_Game::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.match_id)
  return _internal_match_id();
}
inline void CMsgBattleReport_Game::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.match_id_ = value;
}
inline void CMsgBattleReport_Game::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.match_id)
}

// optional uint32 lane_selection_flags = 14;
inline bool CMsgBattleReport_Game::_internal_has_lane_selection_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_lane_selection_flags() const {
  return _internal_has_lane_selection_flags();
}
inline void CMsgBattleReport_Game::clear_lane_selection_flags() {
  _impl_.lane_selection_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgBattleReport_Game::_internal_lane_selection_flags() const {
  return _impl_.lane_selection_flags_;
}
inline uint32_t CMsgBattleReport_Game::lane_selection_flags() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.lane_selection_flags)
  return _internal_lane_selection_flags();
}
inline void CMsgBattleReport_Game::_internal_set_lane_selection_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.lane_selection_flags_ = value;
}
inline void CMsgBattleReport_Game::set_lane_selection_flags(uint32_t value) {
  _internal_set_lane_selection_flags(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.lane_selection_flags)
}

// optional uint32 predicted_position = 15;
inline bool CMsgBattleReport_Game::_internal_has_predicted_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_predicted_position() const {
  return _internal_has_predicted_position();
}
inline void CMsgBattleReport_Game::clear_predicted_position() {
  _impl_.predicted_position_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgBattleReport_Game::_internal_predicted_position() const {
  return _impl_.predicted_position_;
}
inline uint32_t CMsgBattleReport_Game::predicted_position() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.predicted_position)
  return _internal_predicted_position();
}
inline void CMsgBattleReport_Game::_internal_set_predicted_position(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.predicted_position_ = value;
}
inline void CMsgBattleReport_Game::set_predicted_position(uint32_t value) {
  _internal_set_predicted_position(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.predicted_position)
}

// optional uint32 seconds_dead = 16;
inline bool CMsgBattleReport_Game::_internal_has_seconds_dead() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_seconds_dead() const {
  return _internal_has_seconds_dead();
}
inline void CMsgBattleReport_Game::clear_seconds_dead() {
  _impl_.seconds_dead_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CMsgBattleReport_Game::_internal_seconds_dead() const {
  return _impl_.seconds_dead_;
}
inline uint32_t CMsgBattleReport_Game::seconds_dead() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.seconds_dead)
  return _internal_seconds_dead();
}
inline void CMsgBattleReport_Game::_internal_set_seconds_dead(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.seconds_dead_ = value;
}
inline void CMsgBattleReport_Game::set_seconds_dead(uint32_t value) {
  _internal_set_seconds_dead(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.seconds_dead)
}

// optional uint32 winning_team = 17;
inline bool CMsgBattleReport_Game::_internal_has_winning_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_winning_team() const {
  return _internal_has_winning_team();
}
inline void CMsgBattleReport_Game::clear_winning_team() {
  _impl_.winning_team_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CMsgBattleReport_Game::_internal_winning_team() const {
  return _impl_.winning_team_;
}
inline uint32_t CMsgBattleReport_Game::winning_team() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.winning_team)
  return _internal_winning_team();
}
inline void CMsgBattleReport_Game::_internal_set_winning_team(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.winning_team_ = value;
}
inline void CMsgBattleReport_Game::set_winning_team(uint32_t value) {
  _internal_set_winning_team(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.winning_team)
}

// optional uint32 player_slot = 28;
inline bool CMsgBattleReport_Game::_internal_has_player_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_player_slot() const {
  return _internal_has_player_slot();
}
inline void CMsgBattleReport_Game::clear_player_slot() {
  _impl_.player_slot_ = 0u;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline uint32_t CMsgBattleReport_Game::_internal_player_slot() const {
  return _impl_.player_slot_;
}
inline uint32_t CMsgBattleReport_Game::player_slot() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.player_slot)
  return _internal_player_slot();
}
inline void CMsgBattleReport_Game::_internal_set_player_slot(uint32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.player_slot_ = value;
}
inline void CMsgBattleReport_Game::set_player_slot(uint32_t value) {
  _internal_set_player_slot(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.player_slot)
}

// optional bool party_game = 19;
inline bool CMsgBattleReport_Game::_internal_has_party_game() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_party_game() const {
  return _internal_has_party_game();
}
inline void CMsgBattleReport_Game::clear_party_game() {
  _impl_.party_game_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool CMsgBattleReport_Game::_internal_party_game() const {
  return _impl_.party_game_;
}
inline bool CMsgBattleReport_Game::party_game() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.party_game)
  return _internal_party_game();
}
inline void CMsgBattleReport_Game::_internal_set_party_game(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.party_game_ = value;
}
inline void CMsgBattleReport_Game::set_party_game(bool value) {
  _internal_set_party_game(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.party_game)
}

// optional uint32 start_time = 20;
inline bool CMsgBattleReport_Game::_internal_has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_start_time() const {
  return _internal_has_start_time();
}
inline void CMsgBattleReport_Game::clear_start_time() {
  _impl_.start_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CMsgBattleReport_Game::_internal_start_time() const {
  return _impl_.start_time_;
}
inline uint32_t CMsgBattleReport_Game::start_time() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.start_time)
  return _internal_start_time();
}
inline void CMsgBattleReport_Game::_internal_set_start_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.start_time_ = value;
}
inline void CMsgBattleReport_Game::set_start_time(uint32_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.start_time)
}

// optional uint32 bounty_runes = 22;
inline bool CMsgBattleReport_Game::_internal_has_bounty_runes() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_bounty_runes() const {
  return _internal_has_bounty_runes();
}
inline void CMsgBattleReport_Game::clear_bounty_runes() {
  _impl_.bounty_runes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint32_t CMsgBattleReport_Game::_internal_bounty_runes() const {
  return _impl_.bounty_runes_;
}
inline uint32_t CMsgBattleReport_Game::bounty_runes() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.bounty_runes)
  return _internal_bounty_runes();
}
inline void CMsgBattleReport_Game::_internal_set_bounty_runes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.bounty_runes_ = value;
}
inline void CMsgBattleReport_Game::set_bounty_runes(uint32_t value) {
  _internal_set_bounty_runes(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.bounty_runes)
}

// optional uint32 water_runes = 23;
inline bool CMsgBattleReport_Game::_internal_has_water_runes() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_water_runes() const {
  return _internal_has_water_runes();
}
inline void CMsgBattleReport_Game::clear_water_runes() {
  _impl_.water_runes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CMsgBattleReport_Game::_internal_water_runes() const {
  return _impl_.water_runes_;
}
inline uint32_t CMsgBattleReport_Game::water_runes() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.water_runes)
  return _internal_water_runes();
}
inline void CMsgBattleReport_Game::_internal_set_water_runes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.water_runes_ = value;
}
inline void CMsgBattleReport_Game::set_water_runes(uint32_t value) {
  _internal_set_water_runes(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.water_runes)
}

// optional uint32 power_runes = 24;
inline bool CMsgBattleReport_Game::_internal_has_power_runes() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_power_runes() const {
  return _internal_has_power_runes();
}
inline void CMsgBattleReport_Game::clear_power_runes() {
  _impl_.power_runes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CMsgBattleReport_Game::_internal_power_runes() const {
  return _impl_.power_runes_;
}
inline uint32_t CMsgBattleReport_Game::power_runes() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.power_runes)
  return _internal_power_runes();
}
inline void CMsgBattleReport_Game::_internal_set_power_runes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.power_runes_ = value;
}
inline void CMsgBattleReport_Game::set_power_runes(uint32_t value) {
  _internal_set_power_runes(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.power_runes)
}

// optional uint32 time_enemy_t1_tower_destroyed = 25;
inline bool CMsgBattleReport_Game::_internal_has_time_enemy_t1_tower_destroyed() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_time_enemy_t1_tower_destroyed() const {
  return _internal_has_time_enemy_t1_tower_destroyed();
}
inline void CMsgBattleReport_Game::clear_time_enemy_t1_tower_destroyed() {
  _impl_.time_enemy_t1_tower_destroyed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline uint32_t CMsgBattleReport_Game::_internal_time_enemy_t1_tower_destroyed() const {
  return _impl_.time_enemy_t1_tower_destroyed_;
}
inline uint32_t CMsgBattleReport_Game::time_enemy_t1_tower_destroyed() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.time_enemy_t1_tower_destroyed)
  return _internal_time_enemy_t1_tower_destroyed();
}
inline void CMsgBattleReport_Game::_internal_set_time_enemy_t1_tower_destroyed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.time_enemy_t1_tower_destroyed_ = value;
}
inline void CMsgBattleReport_Game::set_time_enemy_t1_tower_destroyed(uint32_t value) {
  _internal_set_time_enemy_t1_tower_destroyed(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.time_enemy_t1_tower_destroyed)
}

// optional uint32 time_friendly_t1_tower_destroyed = 26;
inline bool CMsgBattleReport_Game::_internal_has_time_friendly_t1_tower_destroyed() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_time_friendly_t1_tower_destroyed() const {
  return _internal_has_time_friendly_t1_tower_destroyed();
}
inline void CMsgBattleReport_Game::clear_time_friendly_t1_tower_destroyed() {
  _impl_.time_friendly_t1_tower_destroyed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline uint32_t CMsgBattleReport_Game::_internal_time_friendly_t1_tower_destroyed() const {
  return _impl_.time_friendly_t1_tower_destroyed_;
}
inline uint32_t CMsgBattleReport_Game::time_friendly_t1_tower_destroyed() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.time_friendly_t1_tower_destroyed)
  return _internal_time_friendly_t1_tower_destroyed();
}
inline void CMsgBattleReport_Game::_internal_set_time_friendly_t1_tower_destroyed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.time_friendly_t1_tower_destroyed_ = value;
}
inline void CMsgBattleReport_Game::set_time_friendly_t1_tower_destroyed(uint32_t value) {
  _internal_set_time_friendly_t1_tower_destroyed(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.time_friendly_t1_tower_destroyed)
}

// optional uint32 enemy_roshan_kills = 27;
inline bool CMsgBattleReport_Game::_internal_has_enemy_roshan_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_enemy_roshan_kills() const {
  return _internal_has_enemy_roshan_kills();
}
inline void CMsgBattleReport_Game::clear_enemy_roshan_kills() {
  _impl_.enemy_roshan_kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline uint32_t CMsgBattleReport_Game::_internal_enemy_roshan_kills() const {
  return _impl_.enemy_roshan_kills_;
}
inline uint32_t CMsgBattleReport_Game::enemy_roshan_kills() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.enemy_roshan_kills)
  return _internal_enemy_roshan_kills();
}
inline void CMsgBattleReport_Game::_internal_set_enemy_roshan_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.enemy_roshan_kills_ = value;
}
inline void CMsgBattleReport_Game::set_enemy_roshan_kills(uint32_t value) {
  _internal_set_enemy_roshan_kills(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.enemy_roshan_kills)
}

// optional uint32 teleports_used = 29;
inline bool CMsgBattleReport_Game::_internal_has_teleports_used() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_teleports_used() const {
  return _internal_has_teleports_used();
}
inline void CMsgBattleReport_Game::clear_teleports_used() {
  _impl_.teleports_used_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint32_t CMsgBattleReport_Game::_internal_teleports_used() const {
  return _impl_.teleports_used_;
}
inline uint32_t CMsgBattleReport_Game::teleports_used() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.teleports_used)
  return _internal_teleports_used();
}
inline void CMsgBattleReport_Game::_internal_set_teleports_used(uint32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.teleports_used_ = value;
}
inline void CMsgBattleReport_Game::set_teleports_used(uint32_t value) {
  _internal_set_teleports_used(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.teleports_used)
}

// optional uint32 dewards = 30;
inline bool CMsgBattleReport_Game::_internal_has_dewards() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_dewards() const {
  return _internal_has_dewards();
}
inline void CMsgBattleReport_Game::clear_dewards() {
  _impl_.dewards_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint32_t CMsgBattleReport_Game::_internal_dewards() const {
  return _impl_.dewards_;
}
inline uint32_t CMsgBattleReport_Game::dewards() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.dewards)
  return _internal_dewards();
}
inline void CMsgBattleReport_Game::_internal_set_dewards(uint32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.dewards_ = value;
}
inline void CMsgBattleReport_Game::set_dewards(uint32_t value) {
  _internal_set_dewards(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.dewards)
}

// optional uint32 camps_stacked = 31;
inline bool CMsgBattleReport_Game::_internal_has_camps_stacked() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_camps_stacked() const {
  return _internal_has_camps_stacked();
}
inline void CMsgBattleReport_Game::clear_camps_stacked() {
  _impl_.camps_stacked_ = 0u;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline uint32_t CMsgBattleReport_Game::_internal_camps_stacked() const {
  return _impl_.camps_stacked_;
}
inline uint32_t CMsgBattleReport_Game::camps_stacked() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.camps_stacked)
  return _internal_camps_stacked();
}
inline void CMsgBattleReport_Game::_internal_set_camps_stacked(uint32_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.camps_stacked_ = value;
}
inline void CMsgBattleReport_Game::set_camps_stacked(uint32_t value) {
  _internal_set_camps_stacked(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.camps_stacked)
}

// optional uint32 support_gold = 32;
inline bool CMsgBattleReport_Game::_internal_has_support_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_support_gold() const {
  return _internal_has_support_gold();
}
inline void CMsgBattleReport_Game::clear_support_gold() {
  _impl_.support_gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline uint32_t CMsgBattleReport_Game::_internal_support_gold() const {
  return _impl_.support_gold_;
}
inline uint32_t CMsgBattleReport_Game::support_gold() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.support_gold)
  return _internal_support_gold();
}
inline void CMsgBattleReport_Game::_internal_set_support_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.support_gold_ = value;
}
inline void CMsgBattleReport_Game::set_support_gold(uint32_t value) {
  _internal_set_support_gold(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.support_gold)
}

// optional uint32 hero_damage = 33;
inline bool CMsgBattleReport_Game::_internal_has_hero_damage() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_hero_damage() const {
  return _internal_has_hero_damage();
}
inline void CMsgBattleReport_Game::clear_hero_damage() {
  _impl_.hero_damage_ = 0u;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline uint32_t CMsgBattleReport_Game::_internal_hero_damage() const {
  return _impl_.hero_damage_;
}
inline uint32_t CMsgBattleReport_Game::hero_damage() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.hero_damage)
  return _internal_hero_damage();
}
inline void CMsgBattleReport_Game::_internal_set_hero_damage(uint32_t value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.hero_damage_ = value;
}
inline void CMsgBattleReport_Game::set_hero_damage(uint32_t value) {
  _internal_set_hero_damage(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.hero_damage)
}

// optional uint32 hero_healing = 34;
inline bool CMsgBattleReport_Game::_internal_has_hero_healing() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_hero_healing() const {
  return _internal_has_hero_healing();
}
inline void CMsgBattleReport_Game::clear_hero_healing() {
  _impl_.hero_healing_ = 0u;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline uint32_t CMsgBattleReport_Game::_internal_hero_healing() const {
  return _impl_.hero_healing_;
}
inline uint32_t CMsgBattleReport_Game::hero_healing() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.hero_healing)
  return _internal_hero_healing();
}
inline void CMsgBattleReport_Game::_internal_set_hero_healing(uint32_t value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.hero_healing_ = value;
}
inline void CMsgBattleReport_Game::set_hero_healing(uint32_t value) {
  _internal_set_hero_healing(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.hero_healing)
}

// optional uint32 tower_damage = 35;
inline bool CMsgBattleReport_Game::_internal_has_tower_damage() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_tower_damage() const {
  return _internal_has_tower_damage();
}
inline void CMsgBattleReport_Game::clear_tower_damage() {
  _impl_.tower_damage_ = 0u;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline uint32_t CMsgBattleReport_Game::_internal_tower_damage() const {
  return _impl_.tower_damage_;
}
inline uint32_t CMsgBattleReport_Game::tower_damage() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.tower_damage)
  return _internal_tower_damage();
}
inline void CMsgBattleReport_Game::_internal_set_tower_damage(uint32_t value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.tower_damage_ = value;
}
inline void CMsgBattleReport_Game::set_tower_damage(uint32_t value) {
  _internal_set_tower_damage(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.tower_damage)
}

// optional uint32 successful_smokes = 36;
inline bool CMsgBattleReport_Game::_internal_has_successful_smokes() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_successful_smokes() const {
  return _internal_has_successful_smokes();
}
inline void CMsgBattleReport_Game::clear_successful_smokes() {
  _impl_.successful_smokes_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline uint32_t CMsgBattleReport_Game::_internal_successful_smokes() const {
  return _impl_.successful_smokes_;
}
inline uint32_t CMsgBattleReport_Game::successful_smokes() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.successful_smokes)
  return _internal_successful_smokes();
}
inline void CMsgBattleReport_Game::_internal_set_successful_smokes(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.successful_smokes_ = value;
}
inline void CMsgBattleReport_Game::set_successful_smokes(uint32_t value) {
  _internal_set_successful_smokes(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.successful_smokes)
}

// optional uint32 stun_duration = 37;
inline bool CMsgBattleReport_Game::_internal_has_stun_duration() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_stun_duration() const {
  return _internal_has_stun_duration();
}
inline void CMsgBattleReport_Game::clear_stun_duration() {
  _impl_.stun_duration_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline uint32_t CMsgBattleReport_Game::_internal_stun_duration() const {
  return _impl_.stun_duration_;
}
inline uint32_t CMsgBattleReport_Game::stun_duration() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.stun_duration)
  return _internal_stun_duration();
}
inline void CMsgBattleReport_Game::_internal_set_stun_duration(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.stun_duration_ = value;
}
inline void CMsgBattleReport_Game::set_stun_duration(uint32_t value) {
  _internal_set_stun_duration(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.stun_duration)
}

// optional uint32 duration = 38;
inline bool CMsgBattleReport_Game::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_duration() const {
  return _internal_has_duration();
}
inline void CMsgBattleReport_Game::clear_duration() {
  _impl_.duration_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline uint32_t CMsgBattleReport_Game::_internal_duration() const {
  return _impl_.duration_;
}
inline uint32_t CMsgBattleReport_Game::duration() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.duration)
  return _internal_duration();
}
inline void CMsgBattleReport_Game::_internal_set_duration(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.duration_ = value;
}
inline void CMsgBattleReport_Game::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.duration)
}

// optional uint32 friendly_roshan_kills = 39;
inline bool CMsgBattleReport_Game::_internal_has_friendly_roshan_kills() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_friendly_roshan_kills() const {
  return _internal_has_friendly_roshan_kills();
}
inline void CMsgBattleReport_Game::clear_friendly_roshan_kills() {
  _impl_.friendly_roshan_kills_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline uint32_t CMsgBattleReport_Game::_internal_friendly_roshan_kills() const {
  return _impl_.friendly_roshan_kills_;
}
inline uint32_t CMsgBattleReport_Game::friendly_roshan_kills() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.friendly_roshan_kills)
  return _internal_friendly_roshan_kills();
}
inline void CMsgBattleReport_Game::_internal_set_friendly_roshan_kills(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.friendly_roshan_kills_ = value;
}
inline void CMsgBattleReport_Game::set_friendly_roshan_kills(uint32_t value) {
  _internal_set_friendly_roshan_kills(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.friendly_roshan_kills)
}

// optional int32 previous_rank = 40;
inline bool CMsgBattleReport_Game::_internal_has_previous_rank() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_previous_rank() const {
  return _internal_has_previous_rank();
}
inline void CMsgBattleReport_Game::clear_previous_rank() {
  _impl_.previous_rank_ = 0;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline int32_t CMsgBattleReport_Game::_internal_previous_rank() const {
  return _impl_.previous_rank_;
}
inline int32_t CMsgBattleReport_Game::previous_rank() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.previous_rank)
  return _internal_previous_rank();
}
inline void CMsgBattleReport_Game::_internal_set_previous_rank(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.previous_rank_ = value;
}
inline void CMsgBattleReport_Game::set_previous_rank(int32_t value) {
  _internal_set_previous_rank(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.previous_rank)
}

// optional uint32 game_mode = 41;
inline bool CMsgBattleReport_Game::_internal_has_game_mode() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CMsgBattleReport_Game::clear_game_mode() {
  _impl_.game_mode_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline uint32_t CMsgBattleReport_Game::_internal_game_mode() const {
  return _impl_.game_mode_;
}
inline uint32_t CMsgBattleReport_Game::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.game_mode)
  return _internal_game_mode();
}
inline void CMsgBattleReport_Game::_internal_set_game_mode(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.game_mode_ = value;
}
inline void CMsgBattleReport_Game::set_game_mode(uint32_t value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.game_mode)
}

// optional uint32 lobby_type = 42;
inline bool CMsgBattleReport_Game::_internal_has_lobby_type() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_lobby_type() const {
  return _internal_has_lobby_type();
}
inline void CMsgBattleReport_Game::clear_lobby_type() {
  _impl_.lobby_type_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline uint32_t CMsgBattleReport_Game::_internal_lobby_type() const {
  return _impl_.lobby_type_;
}
inline uint32_t CMsgBattleReport_Game::lobby_type() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.lobby_type)
  return _internal_lobby_type();
}
inline void CMsgBattleReport_Game::_internal_set_lobby_type(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.lobby_type_ = value;
}
inline void CMsgBattleReport_Game::set_lobby_type(uint32_t value) {
  _internal_set_lobby_type(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.lobby_type)
}

// optional float time_purchased_shard = 43;
inline bool CMsgBattleReport_Game::_internal_has_time_purchased_shard() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_time_purchased_shard() const {
  return _internal_has_time_purchased_shard();
}
inline void CMsgBattleReport_Game::clear_time_purchased_shard() {
  _impl_.time_purchased_shard_ = 0;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline float CMsgBattleReport_Game::_internal_time_purchased_shard() const {
  return _impl_.time_purchased_shard_;
}
inline float CMsgBattleReport_Game::time_purchased_shard() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.time_purchased_shard)
  return _internal_time_purchased_shard();
}
inline void CMsgBattleReport_Game::_internal_set_time_purchased_shard(float value) {
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.time_purchased_shard_ = value;
}
inline void CMsgBattleReport_Game::set_time_purchased_shard(float value) {
  _internal_set_time_purchased_shard(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.time_purchased_shard)
}

// optional float time_purchased_scepter = 44;
inline bool CMsgBattleReport_Game::_internal_has_time_purchased_scepter() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_time_purchased_scepter() const {
  return _internal_has_time_purchased_scepter();
}
inline void CMsgBattleReport_Game::clear_time_purchased_scepter() {
  _impl_.time_purchased_scepter_ = 0;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline float CMsgBattleReport_Game::_internal_time_purchased_scepter() const {
  return _impl_.time_purchased_scepter_;
}
inline float CMsgBattleReport_Game::time_purchased_scepter() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.time_purchased_scepter)
  return _internal_time_purchased_scepter();
}
inline void CMsgBattleReport_Game::_internal_set_time_purchased_scepter(float value) {
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.time_purchased_scepter_ = value;
}
inline void CMsgBattleReport_Game::set_time_purchased_scepter(float value) {
  _internal_set_time_purchased_scepter(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.time_purchased_scepter)
}

// optional int32 item0 = 45 [default = -1];
inline bool CMsgBattleReport_Game::_internal_has_item0() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_item0() const {
  return _internal_has_item0();
}
inline void CMsgBattleReport_Game::clear_item0() {
  _impl_.item0_ = -1;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline int32_t CMsgBattleReport_Game::_internal_item0() const {
  return _impl_.item0_;
}
inline int32_t CMsgBattleReport_Game::item0() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.item0)
  return _internal_item0();
}
inline void CMsgBattleReport_Game::_internal_set_item0(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000800u;
  _impl_.item0_ = value;
}
inline void CMsgBattleReport_Game::set_item0(int32_t value) {
  _internal_set_item0(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.item0)
}

// optional int32 item1 = 46 [default = -1];
inline bool CMsgBattleReport_Game::_internal_has_item1() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_item1() const {
  return _internal_has_item1();
}
inline void CMsgBattleReport_Game::clear_item1() {
  _impl_.item1_ = -1;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline int32_t CMsgBattleReport_Game::_internal_item1() const {
  return _impl_.item1_;
}
inline int32_t CMsgBattleReport_Game::item1() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.item1)
  return _internal_item1();
}
inline void CMsgBattleReport_Game::_internal_set_item1(int32_t value) {
  _impl_._has_bits_[1] |= 0x00001000u;
  _impl_.item1_ = value;
}
inline void CMsgBattleReport_Game::set_item1(int32_t value) {
  _internal_set_item1(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.item1)
}

// optional int32 item2 = 47 [default = -1];
inline bool CMsgBattleReport_Game::_internal_has_item2() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_item2() const {
  return _internal_has_item2();
}
inline void CMsgBattleReport_Game::clear_item2() {
  _impl_.item2_ = -1;
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline int32_t CMsgBattleReport_Game::_internal_item2() const {
  return _impl_.item2_;
}
inline int32_t CMsgBattleReport_Game::item2() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.item2)
  return _internal_item2();
}
inline void CMsgBattleReport_Game::_internal_set_item2(int32_t value) {
  _impl_._has_bits_[1] |= 0x00002000u;
  _impl_.item2_ = value;
}
inline void CMsgBattleReport_Game::set_item2(int32_t value) {
  _internal_set_item2(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.item2)
}

// optional int32 item3 = 48 [default = -1];
inline bool CMsgBattleReport_Game::_internal_has_item3() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_item3() const {
  return _internal_has_item3();
}
inline void CMsgBattleReport_Game::clear_item3() {
  _impl_.item3_ = -1;
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline int32_t CMsgBattleReport_Game::_internal_item3() const {
  return _impl_.item3_;
}
inline int32_t CMsgBattleReport_Game::item3() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.item3)
  return _internal_item3();
}
inline void CMsgBattleReport_Game::_internal_set_item3(int32_t value) {
  _impl_._has_bits_[1] |= 0x00004000u;
  _impl_.item3_ = value;
}
inline void CMsgBattleReport_Game::set_item3(int32_t value) {
  _internal_set_item3(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.item3)
}

// optional int32 item4 = 49 [default = -1];
inline bool CMsgBattleReport_Game::_internal_has_item4() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_item4() const {
  return _internal_has_item4();
}
inline void CMsgBattleReport_Game::clear_item4() {
  _impl_.item4_ = -1;
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline int32_t CMsgBattleReport_Game::_internal_item4() const {
  return _impl_.item4_;
}
inline int32_t CMsgBattleReport_Game::item4() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.item4)
  return _internal_item4();
}
inline void CMsgBattleReport_Game::_internal_set_item4(int32_t value) {
  _impl_._has_bits_[1] |= 0x00008000u;
  _impl_.item4_ = value;
}
inline void CMsgBattleReport_Game::set_item4(int32_t value) {
  _internal_set_item4(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.item4)
}

// optional int32 item5 = 50 [default = -1];
inline bool CMsgBattleReport_Game::_internal_has_item5() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgBattleReport_Game::has_item5() const {
  return _internal_has_item5();
}
inline void CMsgBattleReport_Game::clear_item5() {
  _impl_.item5_ = -1;
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline int32_t CMsgBattleReport_Game::_internal_item5() const {
  return _impl_.item5_;
}
inline int32_t CMsgBattleReport_Game::item5() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_Game.item5)
  return _internal_item5();
}
inline void CMsgBattleReport_Game::_internal_set_item5(int32_t value) {
  _impl_._has_bits_[1] |= 0x00010000u;
  _impl_.item5_ = value;
}
inline void CMsgBattleReport_Game::set_item5(int32_t value) {
  _internal_set_item5(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport_Game.item5)
}

// -------------------------------------------------------------------

// CMsgBattleReport_GameList

// repeated .CMsgBattleReport_Game games = 1;
inline int CMsgBattleReport_GameList::_internal_games_size() const {
  return _impl_.games_.size();
}
inline int CMsgBattleReport_GameList::games_size() const {
  return _internal_games_size();
}
inline void CMsgBattleReport_GameList::clear_games() {
  _impl_.games_.Clear();
}
inline ::CMsgBattleReport_Game* CMsgBattleReport_GameList::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBattleReport_GameList.games)
  return _impl_.games_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReport_Game >*
CMsgBattleReport_GameList::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBattleReport_GameList.games)
  return &_impl_.games_;
}
inline const ::CMsgBattleReport_Game& CMsgBattleReport_GameList::_internal_games(int index) const {
  return _impl_.games_.Get(index);
}
inline const ::CMsgBattleReport_Game& CMsgBattleReport_GameList::games(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport_GameList.games)
  return _internal_games(index);
}
inline ::CMsgBattleReport_Game* CMsgBattleReport_GameList::_internal_add_games() {
  return _impl_.games_.Add();
}
inline ::CMsgBattleReport_Game* CMsgBattleReport_GameList::add_games() {
  ::CMsgBattleReport_Game* _add = _internal_add_games();
  // @@protoc_insertion_point(field_add:CMsgBattleReport_GameList.games)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReport_Game >&
CMsgBattleReport_GameList::games() const {
  // @@protoc_insertion_point(field_list:CMsgBattleReport_GameList.games)
  return _impl_.games_;
}

// -------------------------------------------------------------------

// CMsgBattleReport_HighlightGeneral

// optional int32 win_loss_window = 1;
inline bool CMsgBattleReport_HighlightGeneral::_internal_has_win_loss_window() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBattleReport_HighlightGeneral::has_win_loss_window() const {
  return _internal_has_win_loss_window();
}
inline void CMsgBattleReport_HighlightGeneral::clear_win_loss_window() {
  _impl_.win_loss_window_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgBattleReport_HighlightGeneral::_internal_win_loss_window() const {
  return _impl_.win_loss_window_;
}
inline int32_t CMsgBattleReport_HighlightGeneral::win_loss_window() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport.HighlightGeneral.win_loss_window)
  return _internal_win_loss_window();
}
inline void CMsgBattleReport_HighlightGeneral::_internal_set_win_loss_window(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.win_loss_window_ = value;
}
inline void CMsgBattleReport_HighlightGeneral::set_win_loss_window(int32_t value) {
  _internal_set_win_loss_window(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport.HighlightGeneral.win_loss_window)
}

// optional float win_percent = 2;
inline bool CMsgBattleReport_HighlightGeneral::_internal_has_win_percent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBattleReport_HighlightGeneral::has_win_percent() const {
  return _internal_has_win_percent();
}
inline void CMsgBattleReport_HighlightGeneral::clear_win_percent() {
  _impl_.win_percent_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CMsgBattleReport_HighlightGeneral::_internal_win_percent() const {
  return _impl_.win_percent_;
}
inline float CMsgBattleReport_HighlightGeneral::win_percent() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport.HighlightGeneral.win_percent)
  return _internal_win_percent();
}
inline void CMsgBattleReport_HighlightGeneral::_internal_set_win_percent(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.win_percent_ = value;
}
inline void CMsgBattleReport_HighlightGeneral::set_win_percent(float value) {
  _internal_set_win_percent(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport.HighlightGeneral.win_percent)
}

// optional int32 mmr_delta = 3;
inline bool CMsgBattleReport_HighlightGeneral::_internal_has_mmr_delta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBattleReport_HighlightGeneral::has_mmr_delta() const {
  return _internal_has_mmr_delta();
}
inline void CMsgBattleReport_HighlightGeneral::clear_mmr_delta() {
  _impl_.mmr_delta_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgBattleReport_HighlightGeneral::_internal_mmr_delta() const {
  return _impl_.mmr_delta_;
}
inline int32_t CMsgBattleReport_HighlightGeneral::mmr_delta() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport.HighlightGeneral.mmr_delta)
  return _internal_mmr_delta();
}
inline void CMsgBattleReport_HighlightGeneral::_internal_set_mmr_delta(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.mmr_delta_ = value;
}
inline void CMsgBattleReport_HighlightGeneral::set_mmr_delta(int32_t value) {
  _internal_set_mmr_delta(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport.HighlightGeneral.mmr_delta)
}

// optional float highlight_score = 4;
inline bool CMsgBattleReport_HighlightGeneral::_internal_has_highlight_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBattleReport_HighlightGeneral::has_highlight_score() const {
  return _internal_has_highlight_score();
}
inline void CMsgBattleReport_HighlightGeneral::clear_highlight_score() {
  _impl_.highlight_score_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float CMsgBattleReport_HighlightGeneral::_internal_highlight_score() const {
  return _impl_.highlight_score_;
}
inline float CMsgBattleReport_HighlightGeneral::highlight_score() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport.HighlightGeneral.highlight_score)
  return _internal_highlight_score();
}
inline void CMsgBattleReport_HighlightGeneral::_internal_set_highlight_score(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.highlight_score_ = value;
}
inline void CMsgBattleReport_HighlightGeneral::set_highlight_score(float value) {
  _internal_set_highlight_score(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport.HighlightGeneral.highlight_score)
}

// -------------------------------------------------------------------

// CMsgBattleReport_Highlight

// required uint32 highlight_id = 1;
inline bool CMsgBattleReport_Highlight::_internal_has_highlight_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBattleReport_Highlight::has_highlight_id() const {
  return _internal_has_highlight_id();
}
inline void CMsgBattleReport_Highlight::clear_highlight_id() {
  _impl_.highlight_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgBattleReport_Highlight::_internal_highlight_id() const {
  return _impl_.highlight_id_;
}
inline uint32_t CMsgBattleReport_Highlight::highlight_id() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport.Highlight.highlight_id)
  return _internal_highlight_id();
}
inline void CMsgBattleReport_Highlight::_internal_set_highlight_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.highlight_id_ = value;
}
inline void CMsgBattleReport_Highlight::set_highlight_id(uint32_t value) {
  _internal_set_highlight_id(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport.Highlight.highlight_id)
}

// required .CMsgBattleReport_HighlightCategory category = 2 [default = k_eHighlightGeneral];
inline bool CMsgBattleReport_Highlight::_internal_has_category() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBattleReport_Highlight::has_category() const {
  return _internal_has_category();
}
inline void CMsgBattleReport_Highlight::clear_category() {
  _impl_.category_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgBattleReport_HighlightCategory CMsgBattleReport_Highlight::_internal_category() const {
  return static_cast< ::CMsgBattleReport_HighlightCategory >(_impl_.category_);
}
inline ::CMsgBattleReport_HighlightCategory CMsgBattleReport_Highlight::category() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport.Highlight.category)
  return _internal_category();
}
inline void CMsgBattleReport_Highlight::_internal_set_category(::CMsgBattleReport_HighlightCategory value) {
  assert(::CMsgBattleReport_HighlightCategory_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.category_ = value;
}
inline void CMsgBattleReport_Highlight::set_category(::CMsgBattleReport_HighlightCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport.Highlight.category)
}

// optional .CMsgBattleReport_HighlightTier tier = 3 [default = k_eHighlightTierLow];
inline bool CMsgBattleReport_Highlight::_internal_has_tier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgBattleReport_Highlight::has_tier() const {
  return _internal_has_tier();
}
inline void CMsgBattleReport_Highlight::clear_tier() {
  _impl_.tier_ = -1;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::CMsgBattleReport_HighlightTier CMsgBattleReport_Highlight::_internal_tier() const {
  return static_cast< ::CMsgBattleReport_HighlightTier >(_impl_.tier_);
}
inline ::CMsgBattleReport_HighlightTier CMsgBattleReport_Highlight::tier() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport.Highlight.tier)
  return _internal_tier();
}
inline void CMsgBattleReport_Highlight::_internal_set_tier(::CMsgBattleReport_HighlightTier value) {
  assert(::CMsgBattleReport_HighlightTier_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.tier_ = value;
}
inline void CMsgBattleReport_Highlight::set_tier(::CMsgBattleReport_HighlightTier value) {
  _internal_set_tier(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport.Highlight.tier)
}

// optional .CMsgBattleReport_HighlightRarity rarity = 4 [default = k_eHighlightCommon];
inline bool CMsgBattleReport_Highlight::_internal_has_rarity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBattleReport_Highlight::has_rarity() const {
  return _internal_has_rarity();
}
inline void CMsgBattleReport_Highlight::clear_rarity() {
  _impl_.rarity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::CMsgBattleReport_HighlightRarity CMsgBattleReport_Highlight::_internal_rarity() const {
  return static_cast< ::CMsgBattleReport_HighlightRarity >(_impl_.rarity_);
}
inline ::CMsgBattleReport_HighlightRarity CMsgBattleReport_Highlight::rarity() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport.Highlight.rarity)
  return _internal_rarity();
}
inline void CMsgBattleReport_Highlight::_internal_set_rarity(::CMsgBattleReport_HighlightRarity value) {
  assert(::CMsgBattleReport_HighlightRarity_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.rarity_ = value;
}
inline void CMsgBattleReport_Highlight::set_rarity(::CMsgBattleReport_HighlightRarity value) {
  _internal_set_rarity(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport.Highlight.rarity)
}

// optional float score = 5;
inline bool CMsgBattleReport_Highlight::_internal_has_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBattleReport_Highlight::has_score() const {
  return _internal_has_score();
}
inline void CMsgBattleReport_Highlight::clear_score() {
  _impl_.score_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float CMsgBattleReport_Highlight::_internal_score() const {
  return _impl_.score_;
}
inline float CMsgBattleReport_Highlight::score() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport.Highlight.score)
  return _internal_score();
}
inline void CMsgBattleReport_Highlight::_internal_set_score(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.score_ = value;
}
inline void CMsgBattleReport_Highlight::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport.Highlight.score)
}

// optional float confidence = 6;
inline bool CMsgBattleReport_Highlight::_internal_has_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBattleReport_Highlight::has_confidence() const {
  return _internal_has_confidence();
}
inline void CMsgBattleReport_Highlight::clear_confidence() {
  _impl_.confidence_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float CMsgBattleReport_Highlight::_internal_confidence() const {
  return _impl_.confidence_;
}
inline float CMsgBattleReport_Highlight::confidence() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport.Highlight.confidence)
  return _internal_confidence();
}
inline void CMsgBattleReport_Highlight::_internal_set_confidence(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.confidence_ = value;
}
inline void CMsgBattleReport_Highlight::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport.Highlight.confidence)
}

// optional uint32 hero_id = 7;
inline bool CMsgBattleReport_Highlight::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBattleReport_Highlight::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgBattleReport_Highlight::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgBattleReport_Highlight::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgBattleReport_Highlight::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport.Highlight.hero_id)
  return _internal_hero_id();
}
inline void CMsgBattleReport_Highlight::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.hero_id_ = value;
}
inline void CMsgBattleReport_Highlight::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport.Highlight.hero_id)
}

// optional .CMsgBattleReport_Role role = 8 [default = k_eUnknownRole];
inline bool CMsgBattleReport_Highlight::_internal_has_role() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgBattleReport_Highlight::has_role() const {
  return _internal_has_role();
}
inline void CMsgBattleReport_Highlight::clear_role() {
  _impl_.role_ = -1;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::CMsgBattleReport_Role CMsgBattleReport_Highlight::_internal_role() const {
  return static_cast< ::CMsgBattleReport_Role >(_impl_.role_);
}
inline ::CMsgBattleReport_Role CMsgBattleReport_Highlight::role() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport.Highlight.role)
  return _internal_role();
}
inline void CMsgBattleReport_Highlight::_internal_set_role(::CMsgBattleReport_Role value) {
  assert(::CMsgBattleReport_Role_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.role_ = value;
}
inline void CMsgBattleReport_Highlight::set_role(::CMsgBattleReport_Role value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport.Highlight.role)
}

// optional float comparison_delta_value = 9;
inline bool CMsgBattleReport_Highlight::_internal_has_comparison_delta_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgBattleReport_Highlight::has_comparison_delta_value() const {
  return _internal_has_comparison_delta_value();
}
inline void CMsgBattleReport_Highlight::clear_comparison_delta_value() {
  _impl_.comparison_delta_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float CMsgBattleReport_Highlight::_internal_comparison_delta_value() const {
  return _impl_.comparison_delta_value_;
}
inline float CMsgBattleReport_Highlight::comparison_delta_value() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport.Highlight.comparison_delta_value)
  return _internal_comparison_delta_value();
}
inline void CMsgBattleReport_Highlight::_internal_set_comparison_delta_value(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.comparison_delta_value_ = value;
}
inline void CMsgBattleReport_Highlight::set_comparison_delta_value(float value) {
  _internal_set_comparison_delta_value(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport.Highlight.comparison_delta_value)
}

// optional .CMsgBattleReport_CompareContext context = 10 [default = k_eCompareContextInvalid];
inline bool CMsgBattleReport_Highlight::_internal_has_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgBattleReport_Highlight::has_context() const {
  return _internal_has_context();
}
inline void CMsgBattleReport_Highlight::clear_context() {
  _impl_.context_ = -1;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::CMsgBattleReport_CompareContext CMsgBattleReport_Highlight::_internal_context() const {
  return static_cast< ::CMsgBattleReport_CompareContext >(_impl_.context_);
}
inline ::CMsgBattleReport_CompareContext CMsgBattleReport_Highlight::context() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport.Highlight.context)
  return _internal_context();
}
inline void CMsgBattleReport_Highlight::_internal_set_context(::CMsgBattleReport_CompareContext value) {
  assert(::CMsgBattleReport_CompareContext_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.context_ = value;
}
inline void CMsgBattleReport_Highlight::set_context(::CMsgBattleReport_CompareContext value) {
  _internal_set_context(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReport.Highlight.context)
}

// -------------------------------------------------------------------

// CMsgBattleReport

// repeated .CMsgBattleReport_Game games = 1;
inline int CMsgBattleReport::_internal_games_size() const {
  return _impl_.games_.size();
}
inline int CMsgBattleReport::games_size() const {
  return _internal_games_size();
}
inline void CMsgBattleReport::clear_games() {
  _impl_.games_.Clear();
}
inline ::CMsgBattleReport_Game* CMsgBattleReport::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBattleReport.games)
  return _impl_.games_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReport_Game >*
CMsgBattleReport::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBattleReport.games)
  return &_impl_.games_;
}
inline const ::CMsgBattleReport_Game& CMsgBattleReport::_internal_games(int index) const {
  return _impl_.games_.Get(index);
}
inline const ::CMsgBattleReport_Game& CMsgBattleReport::games(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport.games)
  return _internal_games(index);
}
inline ::CMsgBattleReport_Game* CMsgBattleReport::_internal_add_games() {
  return _impl_.games_.Add();
}
inline ::CMsgBattleReport_Game* CMsgBattleReport::add_games() {
  ::CMsgBattleReport_Game* _add = _internal_add_games();
  // @@protoc_insertion_point(field_add:CMsgBattleReport.games)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReport_Game >&
CMsgBattleReport::games() const {
  // @@protoc_insertion_point(field_list:CMsgBattleReport.games)
  return _impl_.games_;
}

// optional .CMsgBattleReportHighlights highlights = 3;
inline bool CMsgBattleReport::_internal_has_highlights() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.highlights_ != nullptr);
  return value;
}
inline bool CMsgBattleReport::has_highlights() const {
  return _internal_has_highlights();
}
inline void CMsgBattleReport::clear_highlights() {
  if (_impl_.highlights_ != nullptr) _impl_.highlights_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgBattleReportHighlights& CMsgBattleReport::_internal_highlights() const {
  const ::CMsgBattleReportHighlights* p = _impl_.highlights_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportHighlights&>(
      ::_CMsgBattleReportHighlights_default_instance_);
}
inline const ::CMsgBattleReportHighlights& CMsgBattleReport::highlights() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReport.highlights)
  return _internal_highlights();
}
inline void CMsgBattleReport::unsafe_arena_set_allocated_highlights(
    ::CMsgBattleReportHighlights* highlights) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.highlights_);
  }
  _impl_.highlights_ = highlights;
  if (highlights) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReport.highlights)
}
inline ::CMsgBattleReportHighlights* CMsgBattleReport::release_highlights() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBattleReportHighlights* temp = _impl_.highlights_;
  _impl_.highlights_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportHighlights* CMsgBattleReport::unsafe_arena_release_highlights() {
  // @@protoc_insertion_point(field_release:CMsgBattleReport.highlights)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBattleReportHighlights* temp = _impl_.highlights_;
  _impl_.highlights_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportHighlights* CMsgBattleReport::_internal_mutable_highlights() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.highlights_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportHighlights>(GetArenaForAllocation());
    _impl_.highlights_ = p;
  }
  return _impl_.highlights_;
}
inline ::CMsgBattleReportHighlights* CMsgBattleReport::mutable_highlights() {
  ::CMsgBattleReportHighlights* _msg = _internal_mutable_highlights();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReport.highlights)
  return _msg;
}
inline void CMsgBattleReport::set_allocated_highlights(::CMsgBattleReportHighlights* highlights) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.highlights_;
  }
  if (highlights) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(highlights);
    if (message_arena != submessage_arena) {
      highlights = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, highlights, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.highlights_ = highlights;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReport.highlights)
}

// -------------------------------------------------------------------

// CMsgBattleReportInfo

// optional uint32 timestamp = 1;
inline bool CMsgBattleReportInfo::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBattleReportInfo::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgBattleReportInfo::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgBattleReportInfo::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgBattleReportInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportInfo.timestamp)
  return _internal_timestamp();
}
inline void CMsgBattleReportInfo::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.timestamp_ = value;
}
inline void CMsgBattleReportInfo::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReportInfo.timestamp)
}

// optional uint32 duration = 2;
inline bool CMsgBattleReportInfo::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBattleReportInfo::has_duration() const {
  return _internal_has_duration();
}
inline void CMsgBattleReportInfo::clear_duration() {
  _impl_.duration_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgBattleReportInfo::_internal_duration() const {
  return _impl_.duration_;
}
inline uint32_t CMsgBattleReportInfo::duration() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportInfo.duration)
  return _internal_duration();
}
inline void CMsgBattleReportInfo::_internal_set_duration(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.duration_ = value;
}
inline void CMsgBattleReportInfo::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReportInfo.duration)
}

// optional bool acknowledged = 3;
inline bool CMsgBattleReportInfo::_internal_has_acknowledged() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBattleReportInfo::has_acknowledged() const {
  return _internal_has_acknowledged();
}
inline void CMsgBattleReportInfo::clear_acknowledged() {
  _impl_.acknowledged_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgBattleReportInfo::_internal_acknowledged() const {
  return _impl_.acknowledged_;
}
inline bool CMsgBattleReportInfo::acknowledged() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportInfo.acknowledged)
  return _internal_acknowledged();
}
inline void CMsgBattleReportInfo::_internal_set_acknowledged(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.acknowledged_ = value;
}
inline void CMsgBattleReportInfo::set_acknowledged(bool value) {
  _internal_set_acknowledged(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReportInfo.acknowledged)
}

// optional uint32 featured_hero_id = 4;
inline bool CMsgBattleReportInfo::_internal_has_featured_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBattleReportInfo::has_featured_hero_id() const {
  return _internal_has_featured_hero_id();
}
inline void CMsgBattleReportInfo::clear_featured_hero_id() {
  _impl_.featured_hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgBattleReportInfo::_internal_featured_hero_id() const {
  return _impl_.featured_hero_id_;
}
inline uint32_t CMsgBattleReportInfo::featured_hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportInfo.featured_hero_id)
  return _internal_featured_hero_id();
}
inline void CMsgBattleReportInfo::_internal_set_featured_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.featured_hero_id_ = value;
}
inline void CMsgBattleReportInfo::set_featured_hero_id(uint32_t value) {
  _internal_set_featured_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReportInfo.featured_hero_id)
}

// optional uint32 featured_position = 5;
inline bool CMsgBattleReportInfo::_internal_has_featured_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBattleReportInfo::has_featured_position() const {
  return _internal_has_featured_position();
}
inline void CMsgBattleReportInfo::clear_featured_position() {
  _impl_.featured_position_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgBattleReportInfo::_internal_featured_position() const {
  return _impl_.featured_position_;
}
inline uint32_t CMsgBattleReportInfo::featured_position() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportInfo.featured_position)
  return _internal_featured_position();
}
inline void CMsgBattleReportInfo::_internal_set_featured_position(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.featured_position_ = value;
}
inline void CMsgBattleReportInfo::set_featured_position(uint32_t value) {
  _internal_set_featured_position(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReportInfo.featured_position)
}

// optional uint32 games_played = 6;
inline bool CMsgBattleReportInfo::_internal_has_games_played() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBattleReportInfo::has_games_played() const {
  return _internal_has_games_played();
}
inline void CMsgBattleReportInfo::clear_games_played() {
  _impl_.games_played_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgBattleReportInfo::_internal_games_played() const {
  return _impl_.games_played_;
}
inline uint32_t CMsgBattleReportInfo::games_played() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportInfo.games_played)
  return _internal_games_played();
}
inline void CMsgBattleReportInfo::_internal_set_games_played(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.games_played_ = value;
}
inline void CMsgBattleReportInfo::set_games_played(uint32_t value) {
  _internal_set_games_played(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReportInfo.games_played)
}

// repeated uint32 medal_counts = 7;
inline int CMsgBattleReportInfo::_internal_medal_counts_size() const {
  return _impl_.medal_counts_.size();
}
inline int CMsgBattleReportInfo::medal_counts_size() const {
  return _internal_medal_counts_size();
}
inline void CMsgBattleReportInfo::clear_medal_counts() {
  _impl_.medal_counts_.Clear();
}
inline uint32_t CMsgBattleReportInfo::_internal_medal_counts(int index) const {
  return _impl_.medal_counts_.Get(index);
}
inline uint32_t CMsgBattleReportInfo::medal_counts(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportInfo.medal_counts)
  return _internal_medal_counts(index);
}
inline void CMsgBattleReportInfo::set_medal_counts(int index, uint32_t value) {
  _impl_.medal_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgBattleReportInfo.medal_counts)
}
inline void CMsgBattleReportInfo::_internal_add_medal_counts(uint32_t value) {
  _impl_.medal_counts_.Add(value);
}
inline void CMsgBattleReportInfo::add_medal_counts(uint32_t value) {
  _internal_add_medal_counts(value);
  // @@protoc_insertion_point(field_add:CMsgBattleReportInfo.medal_counts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgBattleReportInfo::_internal_medal_counts() const {
  return _impl_.medal_counts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgBattleReportInfo::medal_counts() const {
  // @@protoc_insertion_point(field_list:CMsgBattleReportInfo.medal_counts)
  return _internal_medal_counts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgBattleReportInfo::_internal_mutable_medal_counts() {
  return &_impl_.medal_counts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgBattleReportInfo::mutable_medal_counts() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBattleReportInfo.medal_counts)
  return _internal_mutable_medal_counts();
}

// -------------------------------------------------------------------

// CMsgBattleReportInfoList

// repeated .CMsgBattleReportInfo battle_report_info = 1;
inline int CMsgBattleReportInfoList::_internal_battle_report_info_size() const {
  return _impl_.battle_report_info_.size();
}
inline int CMsgBattleReportInfoList::battle_report_info_size() const {
  return _internal_battle_report_info_size();
}
inline void CMsgBattleReportInfoList::clear_battle_report_info() {
  _impl_.battle_report_info_.Clear();
}
inline ::CMsgBattleReportInfo* CMsgBattleReportInfoList::mutable_battle_report_info(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportInfoList.battle_report_info)
  return _impl_.battle_report_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReportInfo >*
CMsgBattleReportInfoList::mutable_battle_report_info() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBattleReportInfoList.battle_report_info)
  return &_impl_.battle_report_info_;
}
inline const ::CMsgBattleReportInfo& CMsgBattleReportInfoList::_internal_battle_report_info(int index) const {
  return _impl_.battle_report_info_.Get(index);
}
inline const ::CMsgBattleReportInfo& CMsgBattleReportInfoList::battle_report_info(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportInfoList.battle_report_info)
  return _internal_battle_report_info(index);
}
inline ::CMsgBattleReportInfo* CMsgBattleReportInfoList::_internal_add_battle_report_info() {
  return _impl_.battle_report_info_.Add();
}
inline ::CMsgBattleReportInfo* CMsgBattleReportInfoList::add_battle_report_info() {
  ::CMsgBattleReportInfo* _add = _internal_add_battle_report_info();
  // @@protoc_insertion_point(field_add:CMsgBattleReportInfoList.battle_report_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReportInfo >&
CMsgBattleReportInfoList::battle_report_info() const {
  // @@protoc_insertion_point(field_list:CMsgBattleReportInfoList.battle_report_info)
  return _impl_.battle_report_info_;
}

// -------------------------------------------------------------------

// CMsgBattleReportHighlights

// repeated .CMsgBattleReport.Highlight highlights = 1;
inline int CMsgBattleReportHighlights::_internal_highlights_size() const {
  return _impl_.highlights_.size();
}
inline int CMsgBattleReportHighlights::highlights_size() const {
  return _internal_highlights_size();
}
inline void CMsgBattleReportHighlights::clear_highlights() {
  _impl_.highlights_.Clear();
}
inline ::CMsgBattleReport_Highlight* CMsgBattleReportHighlights::mutable_highlights(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportHighlights.highlights)
  return _impl_.highlights_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReport_Highlight >*
CMsgBattleReportHighlights::mutable_highlights() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBattleReportHighlights.highlights)
  return &_impl_.highlights_;
}
inline const ::CMsgBattleReport_Highlight& CMsgBattleReportHighlights::_internal_highlights(int index) const {
  return _impl_.highlights_.Get(index);
}
inline const ::CMsgBattleReport_Highlight& CMsgBattleReportHighlights::highlights(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportHighlights.highlights)
  return _internal_highlights(index);
}
inline ::CMsgBattleReport_Highlight* CMsgBattleReportHighlights::_internal_add_highlights() {
  return _impl_.highlights_.Add();
}
inline ::CMsgBattleReport_Highlight* CMsgBattleReportHighlights::add_highlights() {
  ::CMsgBattleReport_Highlight* _add = _internal_add_highlights();
  // @@protoc_insertion_point(field_add:CMsgBattleReportHighlights.highlights)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReport_Highlight >&
CMsgBattleReportHighlights::highlights() const {
  // @@protoc_insertion_point(field_list:CMsgBattleReportHighlights.highlights)
  return _impl_.highlights_;
}

// -------------------------------------------------------------------

// CMsgBattleReportAggregateStats_CMsgBattleReportStat

// optional float mean = 1;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportStat::_internal_has_mean() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportStat::has_mean() const {
  return _internal_has_mean();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportStat::clear_mean() {
  _impl_.mean_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CMsgBattleReportAggregateStats_CMsgBattleReportStat::_internal_mean() const {
  return _impl_.mean_;
}
inline float CMsgBattleReportAggregateStats_CMsgBattleReportStat::mean() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportStat.mean)
  return _internal_mean();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportStat::_internal_set_mean(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mean_ = value;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportStat::set_mean(float value) {
  _internal_set_mean(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReportAggregateStats.CMsgBattleReportStat.mean)
}

// optional float stdev = 2;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportStat::_internal_has_stdev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportStat::has_stdev() const {
  return _internal_has_stdev();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportStat::clear_stdev() {
  _impl_.stdev_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CMsgBattleReportAggregateStats_CMsgBattleReportStat::_internal_stdev() const {
  return _impl_.stdev_;
}
inline float CMsgBattleReportAggregateStats_CMsgBattleReportStat::stdev() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportStat.stdev)
  return _internal_stdev();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportStat::_internal_set_stdev(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.stdev_ = value;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportStat::set_stdev(float value) {
  _internal_set_stdev(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReportAggregateStats.CMsgBattleReportStat.stdev)
}

// -------------------------------------------------------------------

// CMsgBattleReportAggregateStats_CMsgBattleReportAggregate

// optional uint32 hero_id = 1;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint32_t CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.hero_id)
  return _internal_hero_id();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.hero_id_ = value;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.hero_id)
}

// optional uint32 predicted_position = 2;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_predicted_position() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_predicted_position() const {
  return _internal_has_predicted_position();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_predicted_position() {
  _impl_.predicted_position_ = 0u;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline uint32_t CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_predicted_position() const {
  return _impl_.predicted_position_;
}
inline uint32_t CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::predicted_position() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.predicted_position)
  return _internal_predicted_position();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_set_predicted_position(uint32_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.predicted_position_ = value;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_predicted_position(uint32_t value) {
  _internal_set_predicted_position(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.predicted_position)
}

// optional uint32 game_count = 3;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_game_count() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_game_count() const {
  return _internal_has_game_count();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_game_count() {
  _impl_.game_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline uint32_t CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_game_count() const {
  return _impl_.game_count_;
}
inline uint32_t CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::game_count() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.game_count)
  return _internal_game_count();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_set_game_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.game_count_ = value;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_game_count(uint32_t value) {
  _internal_set_game_count(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.game_count)
}

// optional uint32 win_count = 4;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_win_count() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_win_count() const {
  return _internal_has_win_count();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_win_count() {
  _impl_.win_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline uint32_t CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_win_count() const {
  return _impl_.win_count_;
}
inline uint32_t CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::win_count() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.win_count)
  return _internal_win_count();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_set_win_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.win_count_ = value;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_win_count(uint32_t value) {
  _internal_set_win_count(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.win_count)
}

// optional uint32 lane_win_count = 5;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_lane_win_count() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_lane_win_count() const {
  return _internal_has_lane_win_count();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_lane_win_count() {
  _impl_.lane_win_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline uint32_t CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_lane_win_count() const {
  return _impl_.lane_win_count_;
}
inline uint32_t CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::lane_win_count() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.lane_win_count)
  return _internal_lane_win_count();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_set_lane_win_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.lane_win_count_ = value;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_lane_win_count(uint32_t value) {
  _internal_set_lane_win_count(value);
  // @@protoc_insertion_point(field_set:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.lane_win_count)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat kills = 6;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kills_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_kills() const {
  return _internal_has_kills();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_kills() {
  if (_impl_.kills_ != nullptr) _impl_.kills_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_kills() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.kills_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::kills() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.kills)
  return _internal_kills();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_kills(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* kills) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kills_);
  }
  _impl_.kills_ = kills;
  if (kills) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.kills)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_kills() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.kills_;
  _impl_.kills_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_kills() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.kills)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.kills_;
  _impl_.kills_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_kills() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.kills_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.kills_ = p;
  }
  return _impl_.kills_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_kills() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_kills();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.kills)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_kills(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* kills) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.kills_;
  }
  if (kills) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(kills);
    if (message_arena != submessage_arena) {
      kills = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kills, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.kills_ = kills;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.kills)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat deaths = 7;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_deaths() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deaths_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_deaths() const {
  return _internal_has_deaths();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_deaths() {
  if (_impl_.deaths_ != nullptr) _impl_.deaths_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_deaths() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.deaths_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.deaths)
  return _internal_deaths();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_deaths(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* deaths) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deaths_);
  }
  _impl_.deaths_ = deaths;
  if (deaths) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.deaths)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_deaths() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.deaths_;
  _impl_.deaths_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_deaths() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.deaths)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.deaths_;
  _impl_.deaths_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_deaths() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.deaths_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.deaths_ = p;
  }
  return _impl_.deaths_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_deaths() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_deaths();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.deaths)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_deaths(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* deaths) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.deaths_;
  }
  if (deaths) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(deaths);
    if (message_arena != submessage_arena) {
      deaths = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deaths, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.deaths_ = deaths;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.deaths)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat assists = 8;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_assists() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.assists_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_assists() const {
  return _internal_has_assists();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_assists() {
  if (_impl_.assists_ != nullptr) _impl_.assists_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_assists() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.assists_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::assists() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.assists)
  return _internal_assists();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_assists(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* assists) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.assists_);
  }
  _impl_.assists_ = assists;
  if (assists) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.assists)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_assists() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.assists_;
  _impl_.assists_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_assists() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.assists)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.assists_;
  _impl_.assists_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_assists() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.assists_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.assists_ = p;
  }
  return _impl_.assists_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_assists() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_assists();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.assists)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_assists(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* assists) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.assists_;
  }
  if (assists) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(assists);
    if (message_arena != submessage_arena) {
      assists = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assists, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.assists_ = assists;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.assists)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat rank_change = 9;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_rank_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rank_change_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_rank_change() const {
  return _internal_has_rank_change();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_rank_change() {
  if (_impl_.rank_change_ != nullptr) _impl_.rank_change_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_rank_change() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.rank_change_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::rank_change() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.rank_change)
  return _internal_rank_change();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_rank_change(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* rank_change) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rank_change_);
  }
  _impl_.rank_change_ = rank_change;
  if (rank_change) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.rank_change)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_rank_change() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.rank_change_;
  _impl_.rank_change_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_rank_change() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.rank_change)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.rank_change_;
  _impl_.rank_change_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_rank_change() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.rank_change_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.rank_change_ = p;
  }
  return _impl_.rank_change_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_rank_change() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_rank_change();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.rank_change)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_rank_change(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* rank_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rank_change_;
  }
  if (rank_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rank_change);
    if (message_arena != submessage_arena) {
      rank_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rank_change, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.rank_change_ = rank_change;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.rank_change)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat last_hits = 10;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_last_hits() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_hits_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_last_hits() const {
  return _internal_has_last_hits();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_last_hits() {
  if (_impl_.last_hits_ != nullptr) _impl_.last_hits_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_last_hits() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.last_hits_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::last_hits() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.last_hits)
  return _internal_last_hits();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_last_hits(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* last_hits) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_hits_);
  }
  _impl_.last_hits_ = last_hits;
  if (last_hits) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.last_hits)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_last_hits() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.last_hits_;
  _impl_.last_hits_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_last_hits() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.last_hits)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.last_hits_;
  _impl_.last_hits_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_last_hits() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.last_hits_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.last_hits_ = p;
  }
  return _impl_.last_hits_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_last_hits() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_last_hits();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.last_hits)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_last_hits(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* last_hits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.last_hits_;
  }
  if (last_hits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(last_hits);
    if (message_arena != submessage_arena) {
      last_hits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_hits, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.last_hits_ = last_hits;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.last_hits)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat denies = 11;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_denies() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.denies_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_denies() const {
  return _internal_has_denies();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_denies() {
  if (_impl_.denies_ != nullptr) _impl_.denies_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_denies() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.denies_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::denies() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.denies)
  return _internal_denies();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_denies(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* denies) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.denies_);
  }
  _impl_.denies_ = denies;
  if (denies) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.denies)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_denies() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.denies_;
  _impl_.denies_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_denies() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.denies)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.denies_;
  _impl_.denies_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_denies() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.denies_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.denies_ = p;
  }
  return _impl_.denies_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_denies() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_denies();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.denies)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_denies(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* denies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.denies_;
  }
  if (denies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(denies);
    if (message_arena != submessage_arena) {
      denies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, denies, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.denies_ = denies;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.denies)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat gpm = 12;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_gpm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gpm_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_gpm() const {
  return _internal_has_gpm();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_gpm() {
  if (_impl_.gpm_ != nullptr) _impl_.gpm_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_gpm() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.gpm_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::gpm() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.gpm)
  return _internal_gpm();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_gpm(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* gpm) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gpm_);
  }
  _impl_.gpm_ = gpm;
  if (gpm) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.gpm)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_gpm() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.gpm_;
  _impl_.gpm_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_gpm() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.gpm)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.gpm_;
  _impl_.gpm_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_gpm() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.gpm_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.gpm_ = p;
  }
  return _impl_.gpm_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_gpm() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_gpm();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.gpm)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_gpm(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* gpm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gpm_;
  }
  if (gpm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gpm);
    if (message_arena != submessage_arena) {
      gpm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpm, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.gpm_ = gpm;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.gpm)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat xpm = 13;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_xpm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.xpm_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_xpm() const {
  return _internal_has_xpm();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_xpm() {
  if (_impl_.xpm_ != nullptr) _impl_.xpm_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_xpm() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.xpm_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::xpm() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.xpm)
  return _internal_xpm();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_xpm(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* xpm) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.xpm_);
  }
  _impl_.xpm_ = xpm;
  if (xpm) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.xpm)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_xpm() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.xpm_;
  _impl_.xpm_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_xpm() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.xpm)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.xpm_;
  _impl_.xpm_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_xpm() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.xpm_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.xpm_ = p;
  }
  return _impl_.xpm_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_xpm() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_xpm();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.xpm)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_xpm(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* xpm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.xpm_;
  }
  if (xpm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(xpm);
    if (message_arena != submessage_arena) {
      xpm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, xpm, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.xpm_ = xpm;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.xpm)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat seconds_dead = 14;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_seconds_dead() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.seconds_dead_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_seconds_dead() const {
  return _internal_has_seconds_dead();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_seconds_dead() {
  if (_impl_.seconds_dead_ != nullptr) _impl_.seconds_dead_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_seconds_dead() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.seconds_dead_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::seconds_dead() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.seconds_dead)
  return _internal_seconds_dead();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_seconds_dead(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* seconds_dead) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.seconds_dead_);
  }
  _impl_.seconds_dead_ = seconds_dead;
  if (seconds_dead) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.seconds_dead)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_seconds_dead() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.seconds_dead_;
  _impl_.seconds_dead_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_seconds_dead() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.seconds_dead)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.seconds_dead_;
  _impl_.seconds_dead_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_seconds_dead() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.seconds_dead_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.seconds_dead_ = p;
  }
  return _impl_.seconds_dead_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_seconds_dead() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_seconds_dead();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.seconds_dead)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_seconds_dead(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* seconds_dead) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.seconds_dead_;
  }
  if (seconds_dead) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(seconds_dead);
    if (message_arena != submessage_arena) {
      seconds_dead = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seconds_dead, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.seconds_dead_ = seconds_dead;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.seconds_dead)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat bounty_runes = 15;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_bounty_runes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bounty_runes_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_bounty_runes() const {
  return _internal_has_bounty_runes();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_bounty_runes() {
  if (_impl_.bounty_runes_ != nullptr) _impl_.bounty_runes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_bounty_runes() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.bounty_runes_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::bounty_runes() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.bounty_runes)
  return _internal_bounty_runes();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_bounty_runes(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* bounty_runes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bounty_runes_);
  }
  _impl_.bounty_runes_ = bounty_runes;
  if (bounty_runes) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.bounty_runes)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_bounty_runes() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.bounty_runes_;
  _impl_.bounty_runes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_bounty_runes() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.bounty_runes)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.bounty_runes_;
  _impl_.bounty_runes_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_bounty_runes() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.bounty_runes_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.bounty_runes_ = p;
  }
  return _impl_.bounty_runes_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_bounty_runes() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_bounty_runes();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.bounty_runes)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_bounty_runes(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* bounty_runes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bounty_runes_;
  }
  if (bounty_runes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bounty_runes);
    if (message_arena != submessage_arena) {
      bounty_runes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounty_runes, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.bounty_runes_ = bounty_runes;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.bounty_runes)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat water_runes = 16;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_water_runes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.water_runes_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_water_runes() const {
  return _internal_has_water_runes();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_water_runes() {
  if (_impl_.water_runes_ != nullptr) _impl_.water_runes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_water_runes() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.water_runes_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::water_runes() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.water_runes)
  return _internal_water_runes();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_water_runes(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* water_runes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.water_runes_);
  }
  _impl_.water_runes_ = water_runes;
  if (water_runes) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.water_runes)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_water_runes() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.water_runes_;
  _impl_.water_runes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_water_runes() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.water_runes)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.water_runes_;
  _impl_.water_runes_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_water_runes() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.water_runes_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.water_runes_ = p;
  }
  return _impl_.water_runes_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_water_runes() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_water_runes();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.water_runes)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_water_runes(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* water_runes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.water_runes_;
  }
  if (water_runes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(water_runes);
    if (message_arena != submessage_arena) {
      water_runes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, water_runes, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.water_runes_ = water_runes;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.water_runes)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat power_runes = 17;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_power_runes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.power_runes_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_power_runes() const {
  return _internal_has_power_runes();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_power_runes() {
  if (_impl_.power_runes_ != nullptr) _impl_.power_runes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_power_runes() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.power_runes_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::power_runes() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.power_runes)
  return _internal_power_runes();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_power_runes(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* power_runes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.power_runes_);
  }
  _impl_.power_runes_ = power_runes;
  if (power_runes) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.power_runes)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_power_runes() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.power_runes_;
  _impl_.power_runes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_power_runes() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.power_runes)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.power_runes_;
  _impl_.power_runes_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_power_runes() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.power_runes_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.power_runes_ = p;
  }
  return _impl_.power_runes_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_power_runes() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_power_runes();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.power_runes)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_power_runes(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* power_runes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.power_runes_;
  }
  if (power_runes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(power_runes);
    if (message_arena != submessage_arena) {
      power_runes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power_runes, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.power_runes_ = power_runes;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.power_runes)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat time_enemy_t1_tower_destroyed = 18;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_time_enemy_t1_tower_destroyed() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_enemy_t1_tower_destroyed_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_time_enemy_t1_tower_destroyed() const {
  return _internal_has_time_enemy_t1_tower_destroyed();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_time_enemy_t1_tower_destroyed() {
  if (_impl_.time_enemy_t1_tower_destroyed_ != nullptr) _impl_.time_enemy_t1_tower_destroyed_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_time_enemy_t1_tower_destroyed() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.time_enemy_t1_tower_destroyed_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::time_enemy_t1_tower_destroyed() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.time_enemy_t1_tower_destroyed)
  return _internal_time_enemy_t1_tower_destroyed();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_time_enemy_t1_tower_destroyed(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* time_enemy_t1_tower_destroyed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_enemy_t1_tower_destroyed_);
  }
  _impl_.time_enemy_t1_tower_destroyed_ = time_enemy_t1_tower_destroyed;
  if (time_enemy_t1_tower_destroyed) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.time_enemy_t1_tower_destroyed)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_time_enemy_t1_tower_destroyed() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.time_enemy_t1_tower_destroyed_;
  _impl_.time_enemy_t1_tower_destroyed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_time_enemy_t1_tower_destroyed() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.time_enemy_t1_tower_destroyed)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.time_enemy_t1_tower_destroyed_;
  _impl_.time_enemy_t1_tower_destroyed_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_time_enemy_t1_tower_destroyed() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.time_enemy_t1_tower_destroyed_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.time_enemy_t1_tower_destroyed_ = p;
  }
  return _impl_.time_enemy_t1_tower_destroyed_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_time_enemy_t1_tower_destroyed() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_time_enemy_t1_tower_destroyed();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.time_enemy_t1_tower_destroyed)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_time_enemy_t1_tower_destroyed(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* time_enemy_t1_tower_destroyed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.time_enemy_t1_tower_destroyed_;
  }
  if (time_enemy_t1_tower_destroyed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(time_enemy_t1_tower_destroyed);
    if (message_arena != submessage_arena) {
      time_enemy_t1_tower_destroyed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_enemy_t1_tower_destroyed, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.time_enemy_t1_tower_destroyed_ = time_enemy_t1_tower_destroyed;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.time_enemy_t1_tower_destroyed)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat time_friendly_t1_tower_destroyed = 19;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_time_friendly_t1_tower_destroyed() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_friendly_t1_tower_destroyed_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_time_friendly_t1_tower_destroyed() const {
  return _internal_has_time_friendly_t1_tower_destroyed();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_time_friendly_t1_tower_destroyed() {
  if (_impl_.time_friendly_t1_tower_destroyed_ != nullptr) _impl_.time_friendly_t1_tower_destroyed_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_time_friendly_t1_tower_destroyed() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.time_friendly_t1_tower_destroyed_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::time_friendly_t1_tower_destroyed() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.time_friendly_t1_tower_destroyed)
  return _internal_time_friendly_t1_tower_destroyed();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_time_friendly_t1_tower_destroyed(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* time_friendly_t1_tower_destroyed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_friendly_t1_tower_destroyed_);
  }
  _impl_.time_friendly_t1_tower_destroyed_ = time_friendly_t1_tower_destroyed;
  if (time_friendly_t1_tower_destroyed) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.time_friendly_t1_tower_destroyed)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_time_friendly_t1_tower_destroyed() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.time_friendly_t1_tower_destroyed_;
  _impl_.time_friendly_t1_tower_destroyed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_time_friendly_t1_tower_destroyed() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.time_friendly_t1_tower_destroyed)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.time_friendly_t1_tower_destroyed_;
  _impl_.time_friendly_t1_tower_destroyed_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_time_friendly_t1_tower_destroyed() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.time_friendly_t1_tower_destroyed_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.time_friendly_t1_tower_destroyed_ = p;
  }
  return _impl_.time_friendly_t1_tower_destroyed_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_time_friendly_t1_tower_destroyed() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_time_friendly_t1_tower_destroyed();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.time_friendly_t1_tower_destroyed)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_time_friendly_t1_tower_destroyed(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* time_friendly_t1_tower_destroyed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.time_friendly_t1_tower_destroyed_;
  }
  if (time_friendly_t1_tower_destroyed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(time_friendly_t1_tower_destroyed);
    if (message_arena != submessage_arena) {
      time_friendly_t1_tower_destroyed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_friendly_t1_tower_destroyed, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.time_friendly_t1_tower_destroyed_ = time_friendly_t1_tower_destroyed;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.time_friendly_t1_tower_destroyed)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat enemy_roshan_kills = 20;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_enemy_roshan_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.enemy_roshan_kills_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_enemy_roshan_kills() const {
  return _internal_has_enemy_roshan_kills();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_enemy_roshan_kills() {
  if (_impl_.enemy_roshan_kills_ != nullptr) _impl_.enemy_roshan_kills_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_enemy_roshan_kills() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.enemy_roshan_kills_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::enemy_roshan_kills() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.enemy_roshan_kills)
  return _internal_enemy_roshan_kills();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_enemy_roshan_kills(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* enemy_roshan_kills) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enemy_roshan_kills_);
  }
  _impl_.enemy_roshan_kills_ = enemy_roshan_kills;
  if (enemy_roshan_kills) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.enemy_roshan_kills)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_enemy_roshan_kills() {
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.enemy_roshan_kills_;
  _impl_.enemy_roshan_kills_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_enemy_roshan_kills() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.enemy_roshan_kills)
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.enemy_roshan_kills_;
  _impl_.enemy_roshan_kills_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_enemy_roshan_kills() {
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.enemy_roshan_kills_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.enemy_roshan_kills_ = p;
  }
  return _impl_.enemy_roshan_kills_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_enemy_roshan_kills() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_enemy_roshan_kills();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.enemy_roshan_kills)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_enemy_roshan_kills(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* enemy_roshan_kills) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.enemy_roshan_kills_;
  }
  if (enemy_roshan_kills) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(enemy_roshan_kills);
    if (message_arena != submessage_arena) {
      enemy_roshan_kills = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enemy_roshan_kills, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.enemy_roshan_kills_ = enemy_roshan_kills;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.enemy_roshan_kills)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat teleports_used = 21;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_teleports_used() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.teleports_used_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_teleports_used() const {
  return _internal_has_teleports_used();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_teleports_used() {
  if (_impl_.teleports_used_ != nullptr) _impl_.teleports_used_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_teleports_used() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.teleports_used_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::teleports_used() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.teleports_used)
  return _internal_teleports_used();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_teleports_used(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* teleports_used) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teleports_used_);
  }
  _impl_.teleports_used_ = teleports_used;
  if (teleports_used) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.teleports_used)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_teleports_used() {
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.teleports_used_;
  _impl_.teleports_used_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_teleports_used() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.teleports_used)
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.teleports_used_;
  _impl_.teleports_used_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_teleports_used() {
  _impl_._has_bits_[0] |= 0x00008000u;
  if (_impl_.teleports_used_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.teleports_used_ = p;
  }
  return _impl_.teleports_used_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_teleports_used() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_teleports_used();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.teleports_used)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_teleports_used(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* teleports_used) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.teleports_used_;
  }
  if (teleports_used) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(teleports_used);
    if (message_arena != submessage_arena) {
      teleports_used = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teleports_used, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.teleports_used_ = teleports_used;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.teleports_used)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat dewards = 22;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_dewards() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dewards_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_dewards() const {
  return _internal_has_dewards();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_dewards() {
  if (_impl_.dewards_ != nullptr) _impl_.dewards_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_dewards() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.dewards_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::dewards() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.dewards)
  return _internal_dewards();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_dewards(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* dewards) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dewards_);
  }
  _impl_.dewards_ = dewards;
  if (dewards) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.dewards)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_dewards() {
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.dewards_;
  _impl_.dewards_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_dewards() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.dewards)
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.dewards_;
  _impl_.dewards_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_dewards() {
  _impl_._has_bits_[0] |= 0x00010000u;
  if (_impl_.dewards_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.dewards_ = p;
  }
  return _impl_.dewards_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_dewards() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_dewards();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.dewards)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_dewards(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* dewards) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dewards_;
  }
  if (dewards) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dewards);
    if (message_arena != submessage_arena) {
      dewards = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dewards, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.dewards_ = dewards;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.dewards)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat camps_stacked = 23;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_camps_stacked() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.camps_stacked_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_camps_stacked() const {
  return _internal_has_camps_stacked();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_camps_stacked() {
  if (_impl_.camps_stacked_ != nullptr) _impl_.camps_stacked_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_camps_stacked() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.camps_stacked_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::camps_stacked() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.camps_stacked)
  return _internal_camps_stacked();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_camps_stacked(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* camps_stacked) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camps_stacked_);
  }
  _impl_.camps_stacked_ = camps_stacked;
  if (camps_stacked) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.camps_stacked)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_camps_stacked() {
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.camps_stacked_;
  _impl_.camps_stacked_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_camps_stacked() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.camps_stacked)
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.camps_stacked_;
  _impl_.camps_stacked_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_camps_stacked() {
  _impl_._has_bits_[0] |= 0x00020000u;
  if (_impl_.camps_stacked_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.camps_stacked_ = p;
  }
  return _impl_.camps_stacked_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_camps_stacked() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_camps_stacked();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.camps_stacked)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_camps_stacked(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* camps_stacked) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camps_stacked_;
  }
  if (camps_stacked) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camps_stacked);
    if (message_arena != submessage_arena) {
      camps_stacked = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camps_stacked, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.camps_stacked_ = camps_stacked;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.camps_stacked)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat support_gold = 24;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_support_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.support_gold_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_support_gold() const {
  return _internal_has_support_gold();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_support_gold() {
  if (_impl_.support_gold_ != nullptr) _impl_.support_gold_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_support_gold() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.support_gold_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::support_gold() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.support_gold)
  return _internal_support_gold();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_support_gold(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* support_gold) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.support_gold_);
  }
  _impl_.support_gold_ = support_gold;
  if (support_gold) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.support_gold)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_support_gold() {
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.support_gold_;
  _impl_.support_gold_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_support_gold() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.support_gold)
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.support_gold_;
  _impl_.support_gold_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_support_gold() {
  _impl_._has_bits_[0] |= 0x00040000u;
  if (_impl_.support_gold_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.support_gold_ = p;
  }
  return _impl_.support_gold_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_support_gold() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_support_gold();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.support_gold)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_support_gold(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* support_gold) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.support_gold_;
  }
  if (support_gold) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(support_gold);
    if (message_arena != submessage_arena) {
      support_gold = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, support_gold, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  _impl_.support_gold_ = support_gold;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.support_gold)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat hero_damage = 25;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_hero_damage() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hero_damage_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_hero_damage() const {
  return _internal_has_hero_damage();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_hero_damage() {
  if (_impl_.hero_damage_ != nullptr) _impl_.hero_damage_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_hero_damage() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.hero_damage_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::hero_damage() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.hero_damage)
  return _internal_hero_damage();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_hero_damage(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* hero_damage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hero_damage_);
  }
  _impl_.hero_damage_ = hero_damage;
  if (hero_damage) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.hero_damage)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_hero_damage() {
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.hero_damage_;
  _impl_.hero_damage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_hero_damage() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.hero_damage)
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.hero_damage_;
  _impl_.hero_damage_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_hero_damage() {
  _impl_._has_bits_[0] |= 0x00080000u;
  if (_impl_.hero_damage_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.hero_damage_ = p;
  }
  return _impl_.hero_damage_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_hero_damage() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_hero_damage();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.hero_damage)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_hero_damage(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* hero_damage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hero_damage_;
  }
  if (hero_damage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hero_damage);
    if (message_arena != submessage_arena) {
      hero_damage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hero_damage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  _impl_.hero_damage_ = hero_damage;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.hero_damage)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat hero_healing = 26;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_hero_healing() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hero_healing_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_hero_healing() const {
  return _internal_has_hero_healing();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_hero_healing() {
  if (_impl_.hero_healing_ != nullptr) _impl_.hero_healing_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_hero_healing() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.hero_healing_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::hero_healing() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.hero_healing)
  return _internal_hero_healing();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_hero_healing(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* hero_healing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hero_healing_);
  }
  _impl_.hero_healing_ = hero_healing;
  if (hero_healing) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.hero_healing)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_hero_healing() {
  _impl_._has_bits_[0] &= ~0x00100000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.hero_healing_;
  _impl_.hero_healing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_hero_healing() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.hero_healing)
  _impl_._has_bits_[0] &= ~0x00100000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.hero_healing_;
  _impl_.hero_healing_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_hero_healing() {
  _impl_._has_bits_[0] |= 0x00100000u;
  if (_impl_.hero_healing_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.hero_healing_ = p;
  }
  return _impl_.hero_healing_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_hero_healing() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_hero_healing();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.hero_healing)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_hero_healing(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* hero_healing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hero_healing_;
  }
  if (hero_healing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hero_healing);
    if (message_arena != submessage_arena) {
      hero_healing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hero_healing, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  _impl_.hero_healing_ = hero_healing;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.hero_healing)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat tower_damage = 27;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_tower_damage() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tower_damage_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_tower_damage() const {
  return _internal_has_tower_damage();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_tower_damage() {
  if (_impl_.tower_damage_ != nullptr) _impl_.tower_damage_->Clear();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_tower_damage() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.tower_damage_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::tower_damage() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.tower_damage)
  return _internal_tower_damage();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_tower_damage(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* tower_damage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tower_damage_);
  }
  _impl_.tower_damage_ = tower_damage;
  if (tower_damage) {
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.tower_damage)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_tower_damage() {
  _impl_._has_bits_[0] &= ~0x00200000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.tower_damage_;
  _impl_.tower_damage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_tower_damage() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.tower_damage)
  _impl_._has_bits_[0] &= ~0x00200000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.tower_damage_;
  _impl_.tower_damage_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_tower_damage() {
  _impl_._has_bits_[0] |= 0x00200000u;
  if (_impl_.tower_damage_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.tower_damage_ = p;
  }
  return _impl_.tower_damage_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_tower_damage() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_tower_damage();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.tower_damage)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_tower_damage(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* tower_damage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tower_damage_;
  }
  if (tower_damage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tower_damage);
    if (message_arena != submessage_arena) {
      tower_damage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tower_damage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  _impl_.tower_damage_ = tower_damage;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.tower_damage)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat successful_smokes = 28;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_successful_smokes() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.successful_smokes_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_successful_smokes() const {
  return _internal_has_successful_smokes();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_successful_smokes() {
  if (_impl_.successful_smokes_ != nullptr) _impl_.successful_smokes_->Clear();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_successful_smokes() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.successful_smokes_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::successful_smokes() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.successful_smokes)
  return _internal_successful_smokes();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_successful_smokes(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* successful_smokes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.successful_smokes_);
  }
  _impl_.successful_smokes_ = successful_smokes;
  if (successful_smokes) {
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.successful_smokes)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_successful_smokes() {
  _impl_._has_bits_[0] &= ~0x00400000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.successful_smokes_;
  _impl_.successful_smokes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_successful_smokes() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.successful_smokes)
  _impl_._has_bits_[0] &= ~0x00400000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.successful_smokes_;
  _impl_.successful_smokes_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_successful_smokes() {
  _impl_._has_bits_[0] |= 0x00400000u;
  if (_impl_.successful_smokes_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.successful_smokes_ = p;
  }
  return _impl_.successful_smokes_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_successful_smokes() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_successful_smokes();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.successful_smokes)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_successful_smokes(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* successful_smokes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.successful_smokes_;
  }
  if (successful_smokes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(successful_smokes);
    if (message_arena != submessage_arena) {
      successful_smokes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, successful_smokes, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  _impl_.successful_smokes_ = successful_smokes;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.successful_smokes)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat stun_duration = 29;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_stun_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stun_duration_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_stun_duration() const {
  return _internal_has_stun_duration();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_stun_duration() {
  if (_impl_.stun_duration_ != nullptr) _impl_.stun_duration_->Clear();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_stun_duration() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.stun_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::stun_duration() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.stun_duration)
  return _internal_stun_duration();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_stun_duration(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* stun_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stun_duration_);
  }
  _impl_.stun_duration_ = stun_duration;
  if (stun_duration) {
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.stun_duration)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_stun_duration() {
  _impl_._has_bits_[0] &= ~0x00800000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.stun_duration_;
  _impl_.stun_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_stun_duration() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.stun_duration)
  _impl_._has_bits_[0] &= ~0x00800000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.stun_duration_;
  _impl_.stun_duration_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_stun_duration() {
  _impl_._has_bits_[0] |= 0x00800000u;
  if (_impl_.stun_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.stun_duration_ = p;
  }
  return _impl_.stun_duration_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_stun_duration() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_stun_duration();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.stun_duration)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_stun_duration(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* stun_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stun_duration_;
  }
  if (stun_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stun_duration);
    if (message_arena != submessage_arena) {
      stun_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stun_duration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  _impl_.stun_duration_ = stun_duration;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.stun_duration)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat duration = 30;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.duration_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_duration() const {
  return _internal_has_duration();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_duration() {
  if (_impl_.duration_ != nullptr) _impl_.duration_->Clear();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_duration() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::duration() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.duration)
  return _internal_duration();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_duration(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.duration_);
  }
  _impl_.duration_ = duration;
  if (duration) {
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.duration)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_duration() {
  _impl_._has_bits_[0] &= ~0x01000000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.duration_;
  _impl_.duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.duration)
  _impl_._has_bits_[0] &= ~0x01000000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.duration_;
  _impl_.duration_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_duration() {
  _impl_._has_bits_[0] |= 0x01000000u;
  if (_impl_.duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.duration_ = p;
  }
  return _impl_.duration_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_duration() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.duration)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_duration(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.duration_;
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(duration);
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  _impl_.duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.duration)
}

// optional .CMsgBattleReportAggregateStats.CMsgBattleReportStat friendly_roshan_kills = 31;
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_has_friendly_roshan_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.friendly_roshan_kills_ != nullptr);
  return value;
}
inline bool CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::has_friendly_roshan_kills() const {
  return _internal_has_friendly_roshan_kills();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::clear_friendly_roshan_kills() {
  if (_impl_.friendly_roshan_kills_ != nullptr) _impl_.friendly_roshan_kills_->Clear();
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_friendly_roshan_kills() const {
  const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* p = _impl_.friendly_roshan_kills_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat&>(
      ::_CMsgBattleReportAggregateStats_CMsgBattleReportStat_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportStat& CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::friendly_roshan_kills() const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.friendly_roshan_kills)
  return _internal_friendly_roshan_kills();
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_set_allocated_friendly_roshan_kills(
    ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* friendly_roshan_kills) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.friendly_roshan_kills_);
  }
  _impl_.friendly_roshan_kills_ = friendly_roshan_kills;
  if (friendly_roshan_kills) {
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.friendly_roshan_kills)
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::release_friendly_roshan_kills() {
  _impl_._has_bits_[0] &= ~0x02000000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.friendly_roshan_kills_;
  _impl_.friendly_roshan_kills_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::unsafe_arena_release_friendly_roshan_kills() {
  // @@protoc_insertion_point(field_release:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.friendly_roshan_kills)
  _impl_._has_bits_[0] &= ~0x02000000u;
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* temp = _impl_.friendly_roshan_kills_;
  _impl_.friendly_roshan_kills_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::_internal_mutable_friendly_roshan_kills() {
  _impl_._has_bits_[0] |= 0x02000000u;
  if (_impl_.friendly_roshan_kills_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats_CMsgBattleReportStat>(GetArenaForAllocation());
    _impl_.friendly_roshan_kills_ = p;
  }
  return _impl_.friendly_roshan_kills_;
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::mutable_friendly_roshan_kills() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportStat* _msg = _internal_mutable_friendly_roshan_kills();
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.friendly_roshan_kills)
  return _msg;
}
inline void CMsgBattleReportAggregateStats_CMsgBattleReportAggregate::set_allocated_friendly_roshan_kills(::CMsgBattleReportAggregateStats_CMsgBattleReportStat* friendly_roshan_kills) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.friendly_roshan_kills_;
  }
  if (friendly_roshan_kills) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(friendly_roshan_kills);
    if (message_arena != submessage_arena) {
      friendly_roshan_kills = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friendly_roshan_kills, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  _impl_.friendly_roshan_kills_ = friendly_roshan_kills;
  // @@protoc_insertion_point(field_set_allocated:CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.friendly_roshan_kills)
}

// -------------------------------------------------------------------

// CMsgBattleReportAggregateStats

// repeated .CMsgBattleReportAggregateStats.CMsgBattleReportAggregate result = 1;
inline int CMsgBattleReportAggregateStats::_internal_result_size() const {
  return _impl_.result_.size();
}
inline int CMsgBattleReportAggregateStats::result_size() const {
  return _internal_result_size();
}
inline void CMsgBattleReportAggregateStats::clear_result() {
  _impl_.result_.Clear();
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* CMsgBattleReportAggregateStats::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBattleReportAggregateStats.result)
  return _impl_.result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate >*
CMsgBattleReportAggregateStats::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBattleReportAggregateStats.result)
  return &_impl_.result_;
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate& CMsgBattleReportAggregateStats::_internal_result(int index) const {
  return _impl_.result_.Get(index);
}
inline const ::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate& CMsgBattleReportAggregateStats::result(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBattleReportAggregateStats.result)
  return _internal_result(index);
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* CMsgBattleReportAggregateStats::_internal_add_result() {
  return _impl_.result_.Add();
}
inline ::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* CMsgBattleReportAggregateStats::add_result() {
  ::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate* _add = _internal_add_result();
  // @@protoc_insertion_point(field_add:CMsgBattleReportAggregateStats.result)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBattleReportAggregateStats_CMsgBattleReportAggregate >&
CMsgBattleReportAggregateStats::result() const {
  // @@protoc_insertion_point(field_list:CMsgBattleReportAggregateStats.result)
  return _impl_.result_;
}

// -------------------------------------------------------------------

// CMsgBattleReportAggregatedGeneralStats

// -------------------------------------------------------------------

// CMsgClientToGCGetBattleReportResponse

// optional .CMsgBattleReport report = 1;
inline bool CMsgClientToGCGetBattleReportResponse::_internal_has_report() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.report_ != nullptr);
  return value;
}
inline bool CMsgClientToGCGetBattleReportResponse::has_report() const {
  return _internal_has_report();
}
inline void CMsgClientToGCGetBattleReportResponse::clear_report() {
  if (_impl_.report_ != nullptr) _impl_.report_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgBattleReport& CMsgClientToGCGetBattleReportResponse::_internal_report() const {
  const ::CMsgBattleReport* p = _impl_.report_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReport&>(
      ::_CMsgBattleReport_default_instance_);
}
inline const ::CMsgBattleReport& CMsgClientToGCGetBattleReportResponse::report() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetBattleReportResponse.report)
  return _internal_report();
}
inline void CMsgClientToGCGetBattleReportResponse::unsafe_arena_set_allocated_report(
    ::CMsgBattleReport* report) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.report_);
  }
  _impl_.report_ = report;
  if (report) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientToGCGetBattleReportResponse.report)
}
inline ::CMsgBattleReport* CMsgClientToGCGetBattleReportResponse::release_report() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBattleReport* temp = _impl_.report_;
  _impl_.report_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReport* CMsgClientToGCGetBattleReportResponse::unsafe_arena_release_report() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCGetBattleReportResponse.report)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBattleReport* temp = _impl_.report_;
  _impl_.report_ = nullptr;
  return temp;
}
inline ::CMsgBattleReport* CMsgClientToGCGetBattleReportResponse::_internal_mutable_report() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.report_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReport>(GetArenaForAllocation());
    _impl_.report_ = p;
  }
  return _impl_.report_;
}
inline ::CMsgBattleReport* CMsgClientToGCGetBattleReportResponse::mutable_report() {
  ::CMsgBattleReport* _msg = _internal_mutable_report();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCGetBattleReportResponse.report)
  return _msg;
}
inline void CMsgClientToGCGetBattleReportResponse::set_allocated_report(::CMsgBattleReport* report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.report_;
  }
  if (report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(report);
    if (message_arena != submessage_arena) {
      report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, report, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.report_ = report;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCGetBattleReportResponse.report)
}

// optional .CMsgClientToGCGetBattleReportResponse.EResponse response = 2 [default = k_eInternalError];
inline bool CMsgClientToGCGetBattleReportResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientToGCGetBattleReportResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCGetBattleReportResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::CMsgClientToGCGetBattleReportResponse_EResponse CMsgClientToGCGetBattleReportResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCGetBattleReportResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCGetBattleReportResponse_EResponse CMsgClientToGCGetBattleReportResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetBattleReportResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCGetBattleReportResponse::_internal_set_response(::CMsgClientToGCGetBattleReportResponse_EResponse value) {
  assert(::CMsgClientToGCGetBattleReportResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCGetBattleReportResponse::set_response(::CMsgClientToGCGetBattleReportResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetBattleReportResponse.response)
}

// optional .CMsgBattleReportAggregateStats aggregate_stats = 3;
inline bool CMsgClientToGCGetBattleReportResponse::_internal_has_aggregate_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.aggregate_stats_ != nullptr);
  return value;
}
inline bool CMsgClientToGCGetBattleReportResponse::has_aggregate_stats() const {
  return _internal_has_aggregate_stats();
}
inline void CMsgClientToGCGetBattleReportResponse::clear_aggregate_stats() {
  if (_impl_.aggregate_stats_ != nullptr) _impl_.aggregate_stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgBattleReportAggregateStats& CMsgClientToGCGetBattleReportResponse::_internal_aggregate_stats() const {
  const ::CMsgBattleReportAggregateStats* p = _impl_.aggregate_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats&>(
      ::_CMsgBattleReportAggregateStats_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats& CMsgClientToGCGetBattleReportResponse::aggregate_stats() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetBattleReportResponse.aggregate_stats)
  return _internal_aggregate_stats();
}
inline void CMsgClientToGCGetBattleReportResponse::unsafe_arena_set_allocated_aggregate_stats(
    ::CMsgBattleReportAggregateStats* aggregate_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aggregate_stats_);
  }
  _impl_.aggregate_stats_ = aggregate_stats;
  if (aggregate_stats) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientToGCGetBattleReportResponse.aggregate_stats)
}
inline ::CMsgBattleReportAggregateStats* CMsgClientToGCGetBattleReportResponse::release_aggregate_stats() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgBattleReportAggregateStats* temp = _impl_.aggregate_stats_;
  _impl_.aggregate_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats* CMsgClientToGCGetBattleReportResponse::unsafe_arena_release_aggregate_stats() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCGetBattleReportResponse.aggregate_stats)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgBattleReportAggregateStats* temp = _impl_.aggregate_stats_;
  _impl_.aggregate_stats_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats* CMsgClientToGCGetBattleReportResponse::_internal_mutable_aggregate_stats() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.aggregate_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats>(GetArenaForAllocation());
    _impl_.aggregate_stats_ = p;
  }
  return _impl_.aggregate_stats_;
}
inline ::CMsgBattleReportAggregateStats* CMsgClientToGCGetBattleReportResponse::mutable_aggregate_stats() {
  ::CMsgBattleReportAggregateStats* _msg = _internal_mutable_aggregate_stats();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCGetBattleReportResponse.aggregate_stats)
  return _msg;
}
inline void CMsgClientToGCGetBattleReportResponse::set_allocated_aggregate_stats(::CMsgBattleReportAggregateStats* aggregate_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.aggregate_stats_;
  }
  if (aggregate_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(aggregate_stats);
    if (message_arena != submessage_arena) {
      aggregate_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aggregate_stats, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.aggregate_stats_ = aggregate_stats;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCGetBattleReportResponse.aggregate_stats)
}

// optional .CMsgBattleReportInfo info = 4;
inline bool CMsgClientToGCGetBattleReportResponse::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool CMsgClientToGCGetBattleReportResponse::has_info() const {
  return _internal_has_info();
}
inline void CMsgClientToGCGetBattleReportResponse::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgBattleReportInfo& CMsgClientToGCGetBattleReportResponse::_internal_info() const {
  const ::CMsgBattleReportInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportInfo&>(
      ::_CMsgBattleReportInfo_default_instance_);
}
inline const ::CMsgBattleReportInfo& CMsgClientToGCGetBattleReportResponse::info() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetBattleReportResponse.info)
  return _internal_info();
}
inline void CMsgClientToGCGetBattleReportResponse::unsafe_arena_set_allocated_info(
    ::CMsgBattleReportInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientToGCGetBattleReportResponse.info)
}
inline ::CMsgBattleReportInfo* CMsgClientToGCGetBattleReportResponse::release_info() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgBattleReportInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportInfo* CMsgClientToGCGetBattleReportResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCGetBattleReportResponse.info)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgBattleReportInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportInfo* CMsgClientToGCGetBattleReportResponse::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::CMsgBattleReportInfo* CMsgClientToGCGetBattleReportResponse::mutable_info() {
  ::CMsgBattleReportInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCGetBattleReportResponse.info)
  return _msg;
}
inline void CMsgClientToGCGetBattleReportResponse::set_allocated_info(::CMsgBattleReportInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCGetBattleReportResponse.info)
}

// -------------------------------------------------------------------

// CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey

// optional uint32 hero_id = 1;
inline bool CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetBattleReportAggregateStats.CMsgBattleReportAggregateKey.hero_id)
  return _internal_hero_id();
}
inline void CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hero_id_ = value;
}
inline void CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetBattleReportAggregateStats.CMsgBattleReportAggregateKey.hero_id)
}

// optional uint32 predicted_position = 2;
inline bool CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::_internal_has_predicted_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::has_predicted_position() const {
  return _internal_has_predicted_position();
}
inline void CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::clear_predicted_position() {
  _impl_.predicted_position_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::_internal_predicted_position() const {
  return _impl_.predicted_position_;
}
inline uint32_t CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::predicted_position() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetBattleReportAggregateStats.CMsgBattleReportAggregateKey.predicted_position)
  return _internal_predicted_position();
}
inline void CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::_internal_set_predicted_position(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.predicted_position_ = value;
}
inline void CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey::set_predicted_position(uint32_t value) {
  _internal_set_predicted_position(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetBattleReportAggregateStats.CMsgBattleReportAggregateKey.predicted_position)
}

// -------------------------------------------------------------------

// CMsgClientToGCGetBattleReportAggregateStats

// repeated .CMsgClientToGCGetBattleReportAggregateStats.CMsgBattleReportAggregateKey aggregate_keys = 1;
inline int CMsgClientToGCGetBattleReportAggregateStats::_internal_aggregate_keys_size() const {
  return _impl_.aggregate_keys_.size();
}
inline int CMsgClientToGCGetBattleReportAggregateStats::aggregate_keys_size() const {
  return _internal_aggregate_keys_size();
}
inline void CMsgClientToGCGetBattleReportAggregateStats::clear_aggregate_keys() {
  _impl_.aggregate_keys_.Clear();
}
inline ::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey* CMsgClientToGCGetBattleReportAggregateStats::mutable_aggregate_keys(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCGetBattleReportAggregateStats.aggregate_keys)
  return _impl_.aggregate_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey >*
CMsgClientToGCGetBattleReportAggregateStats::mutable_aggregate_keys() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientToGCGetBattleReportAggregateStats.aggregate_keys)
  return &_impl_.aggregate_keys_;
}
inline const ::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey& CMsgClientToGCGetBattleReportAggregateStats::_internal_aggregate_keys(int index) const {
  return _impl_.aggregate_keys_.Get(index);
}
inline const ::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey& CMsgClientToGCGetBattleReportAggregateStats::aggregate_keys(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetBattleReportAggregateStats.aggregate_keys)
  return _internal_aggregate_keys(index);
}
inline ::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey* CMsgClientToGCGetBattleReportAggregateStats::_internal_add_aggregate_keys() {
  return _impl_.aggregate_keys_.Add();
}
inline ::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey* CMsgClientToGCGetBattleReportAggregateStats::add_aggregate_keys() {
  ::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey* _add = _internal_add_aggregate_keys();
  // @@protoc_insertion_point(field_add:CMsgClientToGCGetBattleReportAggregateStats.aggregate_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey >&
CMsgClientToGCGetBattleReportAggregateStats::aggregate_keys() const {
  // @@protoc_insertion_point(field_list:CMsgClientToGCGetBattleReportAggregateStats.aggregate_keys)
  return _impl_.aggregate_keys_;
}

// optional uint32 timestamp = 2;
inline bool CMsgClientToGCGetBattleReportAggregateStats::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCGetBattleReportAggregateStats::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgClientToGCGetBattleReportAggregateStats::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCGetBattleReportAggregateStats::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgClientToGCGetBattleReportAggregateStats::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetBattleReportAggregateStats.timestamp)
  return _internal_timestamp();
}
inline void CMsgClientToGCGetBattleReportAggregateStats::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.timestamp_ = value;
}
inline void CMsgClientToGCGetBattleReportAggregateStats::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetBattleReportAggregateStats.timestamp)
}

// optional uint32 duration = 3;
inline bool CMsgClientToGCGetBattleReportAggregateStats::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCGetBattleReportAggregateStats::has_duration() const {
  return _internal_has_duration();
}
inline void CMsgClientToGCGetBattleReportAggregateStats::clear_duration() {
  _impl_.duration_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCGetBattleReportAggregateStats::_internal_duration() const {
  return _impl_.duration_;
}
inline uint32_t CMsgClientToGCGetBattleReportAggregateStats::duration() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetBattleReportAggregateStats.duration)
  return _internal_duration();
}
inline void CMsgClientToGCGetBattleReportAggregateStats::_internal_set_duration(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.duration_ = value;
}
inline void CMsgClientToGCGetBattleReportAggregateStats::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetBattleReportAggregateStats.duration)
}

// optional uint32 rank = 4;
inline bool CMsgClientToGCGetBattleReportAggregateStats::_internal_has_rank() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientToGCGetBattleReportAggregateStats::has_rank() const {
  return _internal_has_rank();
}
inline void CMsgClientToGCGetBattleReportAggregateStats::clear_rank() {
  _impl_.rank_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientToGCGetBattleReportAggregateStats::_internal_rank() const {
  return _impl_.rank_;
}
inline uint32_t CMsgClientToGCGetBattleReportAggregateStats::rank() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetBattleReportAggregateStats.rank)
  return _internal_rank();
}
inline void CMsgClientToGCGetBattleReportAggregateStats::_internal_set_rank(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.rank_ = value;
}
inline void CMsgClientToGCGetBattleReportAggregateStats::set_rank(uint32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetBattleReportAggregateStats.rank)
}

// -------------------------------------------------------------------

// CMsgClientToGCGetBattleReportAggregateStatsResponse

// optional .CMsgBattleReportAggregateStats aggregate_stats = 1;
inline bool CMsgClientToGCGetBattleReportAggregateStatsResponse::_internal_has_aggregate_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.aggregate_stats_ != nullptr);
  return value;
}
inline bool CMsgClientToGCGetBattleReportAggregateStatsResponse::has_aggregate_stats() const {
  return _internal_has_aggregate_stats();
}
inline void CMsgClientToGCGetBattleReportAggregateStatsResponse::clear_aggregate_stats() {
  if (_impl_.aggregate_stats_ != nullptr) _impl_.aggregate_stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgBattleReportAggregateStats& CMsgClientToGCGetBattleReportAggregateStatsResponse::_internal_aggregate_stats() const {
  const ::CMsgBattleReportAggregateStats* p = _impl_.aggregate_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportAggregateStats&>(
      ::_CMsgBattleReportAggregateStats_default_instance_);
}
inline const ::CMsgBattleReportAggregateStats& CMsgClientToGCGetBattleReportAggregateStatsResponse::aggregate_stats() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetBattleReportAggregateStatsResponse.aggregate_stats)
  return _internal_aggregate_stats();
}
inline void CMsgClientToGCGetBattleReportAggregateStatsResponse::unsafe_arena_set_allocated_aggregate_stats(
    ::CMsgBattleReportAggregateStats* aggregate_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aggregate_stats_);
  }
  _impl_.aggregate_stats_ = aggregate_stats;
  if (aggregate_stats) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientToGCGetBattleReportAggregateStatsResponse.aggregate_stats)
}
inline ::CMsgBattleReportAggregateStats* CMsgClientToGCGetBattleReportAggregateStatsResponse::release_aggregate_stats() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBattleReportAggregateStats* temp = _impl_.aggregate_stats_;
  _impl_.aggregate_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportAggregateStats* CMsgClientToGCGetBattleReportAggregateStatsResponse::unsafe_arena_release_aggregate_stats() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCGetBattleReportAggregateStatsResponse.aggregate_stats)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBattleReportAggregateStats* temp = _impl_.aggregate_stats_;
  _impl_.aggregate_stats_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportAggregateStats* CMsgClientToGCGetBattleReportAggregateStatsResponse::_internal_mutable_aggregate_stats() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.aggregate_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportAggregateStats>(GetArenaForAllocation());
    _impl_.aggregate_stats_ = p;
  }
  return _impl_.aggregate_stats_;
}
inline ::CMsgBattleReportAggregateStats* CMsgClientToGCGetBattleReportAggregateStatsResponse::mutable_aggregate_stats() {
  ::CMsgBattleReportAggregateStats* _msg = _internal_mutable_aggregate_stats();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCGetBattleReportAggregateStatsResponse.aggregate_stats)
  return _msg;
}
inline void CMsgClientToGCGetBattleReportAggregateStatsResponse::set_allocated_aggregate_stats(::CMsgBattleReportAggregateStats* aggregate_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.aggregate_stats_;
  }
  if (aggregate_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(aggregate_stats);
    if (message_arena != submessage_arena) {
      aggregate_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aggregate_stats, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.aggregate_stats_ = aggregate_stats;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCGetBattleReportAggregateStatsResponse.aggregate_stats)
}

// optional .CMsgClientToGCGetBattleReportAggregateStatsResponse.EResponse response = 2 [default = k_eInternalError];
inline bool CMsgClientToGCGetBattleReportAggregateStatsResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCGetBattleReportAggregateStatsResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCGetBattleReportAggregateStatsResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse CMsgClientToGCGetBattleReportAggregateStatsResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse CMsgClientToGCGetBattleReportAggregateStatsResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetBattleReportAggregateStatsResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCGetBattleReportAggregateStatsResponse::_internal_set_response(::CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse value) {
  assert(::CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCGetBattleReportAggregateStatsResponse::set_response(::CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetBattleReportAggregateStatsResponse.response)
}

// -------------------------------------------------------------------

// CMsgClientToGCGetBattleReportInfo

// optional uint32 account_id = 1;
inline bool CMsgClientToGCGetBattleReportInfo::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCGetBattleReportInfo::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgClientToGCGetBattleReportInfo::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCGetBattleReportInfo::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgClientToGCGetBattleReportInfo::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetBattleReportInfo.account_id)
  return _internal_account_id();
}
inline void CMsgClientToGCGetBattleReportInfo::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgClientToGCGetBattleReportInfo::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetBattleReportInfo.account_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCGetBattleReportInfoResponse

// optional .CMsgBattleReportInfoList battle_report_info_list = 1;
inline bool CMsgClientToGCGetBattleReportInfoResponse::_internal_has_battle_report_info_list() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.battle_report_info_list_ != nullptr);
  return value;
}
inline bool CMsgClientToGCGetBattleReportInfoResponse::has_battle_report_info_list() const {
  return _internal_has_battle_report_info_list();
}
inline void CMsgClientToGCGetBattleReportInfoResponse::clear_battle_report_info_list() {
  if (_impl_.battle_report_info_list_ != nullptr) _impl_.battle_report_info_list_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgBattleReportInfoList& CMsgClientToGCGetBattleReportInfoResponse::_internal_battle_report_info_list() const {
  const ::CMsgBattleReportInfoList* p = _impl_.battle_report_info_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReportInfoList&>(
      ::_CMsgBattleReportInfoList_default_instance_);
}
inline const ::CMsgBattleReportInfoList& CMsgClientToGCGetBattleReportInfoResponse::battle_report_info_list() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetBattleReportInfoResponse.battle_report_info_list)
  return _internal_battle_report_info_list();
}
inline void CMsgClientToGCGetBattleReportInfoResponse::unsafe_arena_set_allocated_battle_report_info_list(
    ::CMsgBattleReportInfoList* battle_report_info_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.battle_report_info_list_);
  }
  _impl_.battle_report_info_list_ = battle_report_info_list;
  if (battle_report_info_list) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientToGCGetBattleReportInfoResponse.battle_report_info_list)
}
inline ::CMsgBattleReportInfoList* CMsgClientToGCGetBattleReportInfoResponse::release_battle_report_info_list() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBattleReportInfoList* temp = _impl_.battle_report_info_list_;
  _impl_.battle_report_info_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReportInfoList* CMsgClientToGCGetBattleReportInfoResponse::unsafe_arena_release_battle_report_info_list() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCGetBattleReportInfoResponse.battle_report_info_list)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBattleReportInfoList* temp = _impl_.battle_report_info_list_;
  _impl_.battle_report_info_list_ = nullptr;
  return temp;
}
inline ::CMsgBattleReportInfoList* CMsgClientToGCGetBattleReportInfoResponse::_internal_mutable_battle_report_info_list() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.battle_report_info_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReportInfoList>(GetArenaForAllocation());
    _impl_.battle_report_info_list_ = p;
  }
  return _impl_.battle_report_info_list_;
}
inline ::CMsgBattleReportInfoList* CMsgClientToGCGetBattleReportInfoResponse::mutable_battle_report_info_list() {
  ::CMsgBattleReportInfoList* _msg = _internal_mutable_battle_report_info_list();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCGetBattleReportInfoResponse.battle_report_info_list)
  return _msg;
}
inline void CMsgClientToGCGetBattleReportInfoResponse::set_allocated_battle_report_info_list(::CMsgBattleReportInfoList* battle_report_info_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.battle_report_info_list_;
  }
  if (battle_report_info_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(battle_report_info_list);
    if (message_arena != submessage_arena) {
      battle_report_info_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battle_report_info_list, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.battle_report_info_list_ = battle_report_info_list;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCGetBattleReportInfoResponse.battle_report_info_list)
}

// optional .CMsgClientToGCGetBattleReportInfoResponse.EResponse response = 2 [default = k_eInternalError];
inline bool CMsgClientToGCGetBattleReportInfoResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCGetBattleReportInfoResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCGetBattleReportInfoResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgClientToGCGetBattleReportInfoResponse_EResponse CMsgClientToGCGetBattleReportInfoResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCGetBattleReportInfoResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCGetBattleReportInfoResponse_EResponse CMsgClientToGCGetBattleReportInfoResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetBattleReportInfoResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCGetBattleReportInfoResponse::_internal_set_response(::CMsgClientToGCGetBattleReportInfoResponse_EResponse value) {
  assert(::CMsgClientToGCGetBattleReportInfoResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCGetBattleReportInfoResponse::set_response(::CMsgClientToGCGetBattleReportInfoResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetBattleReportInfoResponse.response)
}

// -------------------------------------------------------------------

// CMsgClientToGCAcknowledgeBattleReport

// optional uint32 account_id = 1;
inline bool CMsgClientToGCAcknowledgeBattleReport::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCAcknowledgeBattleReport::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgClientToGCAcknowledgeBattleReport::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCAcknowledgeBattleReport::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgClientToGCAcknowledgeBattleReport::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCAcknowledgeBattleReport.account_id)
  return _internal_account_id();
}
inline void CMsgClientToGCAcknowledgeBattleReport::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgClientToGCAcknowledgeBattleReport::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCAcknowledgeBattleReport.account_id)
}

// optional uint32 timestamp = 2;
inline bool CMsgClientToGCAcknowledgeBattleReport::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCAcknowledgeBattleReport::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgClientToGCAcknowledgeBattleReport::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCAcknowledgeBattleReport::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgClientToGCAcknowledgeBattleReport::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCAcknowledgeBattleReport.timestamp)
  return _internal_timestamp();
}
inline void CMsgClientToGCAcknowledgeBattleReport::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_ = value;
}
inline void CMsgClientToGCAcknowledgeBattleReport::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCAcknowledgeBattleReport.timestamp)
}

// optional uint32 duration = 3;
inline bool CMsgClientToGCAcknowledgeBattleReport::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientToGCAcknowledgeBattleReport::has_duration() const {
  return _internal_has_duration();
}
inline void CMsgClientToGCAcknowledgeBattleReport::clear_duration() {
  _impl_.duration_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientToGCAcknowledgeBattleReport::_internal_duration() const {
  return _impl_.duration_;
}
inline uint32_t CMsgClientToGCAcknowledgeBattleReport::duration() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCAcknowledgeBattleReport.duration)
  return _internal_duration();
}
inline void CMsgClientToGCAcknowledgeBattleReport::_internal_set_duration(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.duration_ = value;
}
inline void CMsgClientToGCAcknowledgeBattleReport::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCAcknowledgeBattleReport.duration)
}

// -------------------------------------------------------------------

// CMsgClientToGCAcknowledgeBattleReportResponse

// optional .CMsgClientToGCAcknowledgeBattleReportResponse.EResponse response = 1 [default = k_eInternalError];
inline bool CMsgClientToGCAcknowledgeBattleReportResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCAcknowledgeBattleReportResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCAcknowledgeBattleReportResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgClientToGCAcknowledgeBattleReportResponse_EResponse CMsgClientToGCAcknowledgeBattleReportResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCAcknowledgeBattleReportResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCAcknowledgeBattleReportResponse_EResponse CMsgClientToGCAcknowledgeBattleReportResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCAcknowledgeBattleReportResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCAcknowledgeBattleReportResponse::_internal_set_response(::CMsgClientToGCAcknowledgeBattleReportResponse_EResponse value) {
  assert(::CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCAcknowledgeBattleReportResponse::set_response(::CMsgClientToGCAcknowledgeBattleReportResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCAcknowledgeBattleReportResponse.response)
}

// optional uint32 shards_awarded = 2;
inline bool CMsgClientToGCAcknowledgeBattleReportResponse::_internal_has_shards_awarded() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCAcknowledgeBattleReportResponse::has_shards_awarded() const {
  return _internal_has_shards_awarded();
}
inline void CMsgClientToGCAcknowledgeBattleReportResponse::clear_shards_awarded() {
  _impl_.shards_awarded_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCAcknowledgeBattleReportResponse::_internal_shards_awarded() const {
  return _impl_.shards_awarded_;
}
inline uint32_t CMsgClientToGCAcknowledgeBattleReportResponse::shards_awarded() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCAcknowledgeBattleReportResponse.shards_awarded)
  return _internal_shards_awarded();
}
inline void CMsgClientToGCAcknowledgeBattleReportResponse::_internal_set_shards_awarded(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.shards_awarded_ = value;
}
inline void CMsgClientToGCAcknowledgeBattleReportResponse::set_shards_awarded(uint32_t value) {
  _internal_set_shards_awarded(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCAcknowledgeBattleReportResponse.shards_awarded)
}

// -------------------------------------------------------------------

// CMsgClientToGCGetBattleReportMatchHistory

// optional uint32 account_id = 1;
inline bool CMsgClientToGCGetBattleReportMatchHistory::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCGetBattleReportMatchHistory::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgClientToGCGetBattleReportMatchHistory::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCGetBattleReportMatchHistory::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgClientToGCGetBattleReportMatchHistory::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetBattleReportMatchHistory.account_id)
  return _internal_account_id();
}
inline void CMsgClientToGCGetBattleReportMatchHistory::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgClientToGCGetBattleReportMatchHistory::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetBattleReportMatchHistory.account_id)
}

// optional uint32 timestamp = 2;
inline bool CMsgClientToGCGetBattleReportMatchHistory::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCGetBattleReportMatchHistory::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgClientToGCGetBattleReportMatchHistory::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCGetBattleReportMatchHistory::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgClientToGCGetBattleReportMatchHistory::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetBattleReportMatchHistory.timestamp)
  return _internal_timestamp();
}
inline void CMsgClientToGCGetBattleReportMatchHistory::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_ = value;
}
inline void CMsgClientToGCGetBattleReportMatchHistory::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetBattleReportMatchHistory.timestamp)
}

// optional uint32 duration = 3;
inline bool CMsgClientToGCGetBattleReportMatchHistory::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientToGCGetBattleReportMatchHistory::has_duration() const {
  return _internal_has_duration();
}
inline void CMsgClientToGCGetBattleReportMatchHistory::clear_duration() {
  _impl_.duration_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientToGCGetBattleReportMatchHistory::_internal_duration() const {
  return _impl_.duration_;
}
inline uint32_t CMsgClientToGCGetBattleReportMatchHistory::duration() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetBattleReportMatchHistory.duration)
  return _internal_duration();
}
inline void CMsgClientToGCGetBattleReportMatchHistory::_internal_set_duration(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.duration_ = value;
}
inline void CMsgClientToGCGetBattleReportMatchHistory::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetBattleReportMatchHistory.duration)
}

// -------------------------------------------------------------------

// CMsgClientToGCGetBattleReportMatchHistoryResponse

// optional .CMsgClientToGCGetBattleReportMatchHistoryResponse.EResponse response = 1 [default = k_eInternalError];
inline bool CMsgClientToGCGetBattleReportMatchHistoryResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCGetBattleReportMatchHistoryResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCGetBattleReportMatchHistoryResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse CMsgClientToGCGetBattleReportMatchHistoryResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse CMsgClientToGCGetBattleReportMatchHistoryResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetBattleReportMatchHistoryResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCGetBattleReportMatchHistoryResponse::_internal_set_response(::CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse value) {
  assert(::CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCGetBattleReportMatchHistoryResponse::set_response(::CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetBattleReportMatchHistoryResponse.response)
}

// optional .CMsgBattleReport_GameList games = 2;
inline bool CMsgClientToGCGetBattleReportMatchHistoryResponse::_internal_has_games() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.games_ != nullptr);
  return value;
}
inline bool CMsgClientToGCGetBattleReportMatchHistoryResponse::has_games() const {
  return _internal_has_games();
}
inline void CMsgClientToGCGetBattleReportMatchHistoryResponse::clear_games() {
  if (_impl_.games_ != nullptr) _impl_.games_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgBattleReport_GameList& CMsgClientToGCGetBattleReportMatchHistoryResponse::_internal_games() const {
  const ::CMsgBattleReport_GameList* p = _impl_.games_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleReport_GameList&>(
      ::_CMsgBattleReport_GameList_default_instance_);
}
inline const ::CMsgBattleReport_GameList& CMsgClientToGCGetBattleReportMatchHistoryResponse::games() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetBattleReportMatchHistoryResponse.games)
  return _internal_games();
}
inline void CMsgClientToGCGetBattleReportMatchHistoryResponse::unsafe_arena_set_allocated_games(
    ::CMsgBattleReport_GameList* games) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.games_);
  }
  _impl_.games_ = games;
  if (games) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientToGCGetBattleReportMatchHistoryResponse.games)
}
inline ::CMsgBattleReport_GameList* CMsgClientToGCGetBattleReportMatchHistoryResponse::release_games() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBattleReport_GameList* temp = _impl_.games_;
  _impl_.games_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleReport_GameList* CMsgClientToGCGetBattleReportMatchHistoryResponse::unsafe_arena_release_games() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCGetBattleReportMatchHistoryResponse.games)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgBattleReport_GameList* temp = _impl_.games_;
  _impl_.games_ = nullptr;
  return temp;
}
inline ::CMsgBattleReport_GameList* CMsgClientToGCGetBattleReportMatchHistoryResponse::_internal_mutable_games() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.games_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleReport_GameList>(GetArenaForAllocation());
    _impl_.games_ = p;
  }
  return _impl_.games_;
}
inline ::CMsgBattleReport_GameList* CMsgClientToGCGetBattleReportMatchHistoryResponse::mutable_games() {
  ::CMsgBattleReport_GameList* _msg = _internal_mutable_games();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCGetBattleReportMatchHistoryResponse.games)
  return _msg;
}
inline void CMsgClientToGCGetBattleReportMatchHistoryResponse::set_allocated_games(::CMsgBattleReport_GameList* games) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.games_;
  }
  if (games) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(games);
    if (message_arena != submessage_arena) {
      games = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, games, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.games_ = games;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCGetBattleReportMatchHistoryResponse.games)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CMsgClientToGCGetBattleReportResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCGetBattleReportResponse_EResponse>() {
  return ::CMsgClientToGCGetBattleReportResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse>() {
  return ::CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCGetBattleReportInfoResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCGetBattleReportInfoResponse_EResponse>() {
  return ::CMsgClientToGCGetBattleReportInfoResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCAcknowledgeBattleReportResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCAcknowledgeBattleReportResponse_EResponse>() {
  return ::CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse>() {
  return ::CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::CMsgBattleReport_HighlightType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgBattleReport_HighlightType>() {
  return ::CMsgBattleReport_HighlightType_descriptor();
}
template <> struct is_proto_enum< ::CMsgBattleReport_HighlightCategory> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgBattleReport_HighlightCategory>() {
  return ::CMsgBattleReport_HighlightCategory_descriptor();
}
template <> struct is_proto_enum< ::CMsgBattleReport_Role> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgBattleReport_Role>() {
  return ::CMsgBattleReport_Role_descriptor();
}
template <> struct is_proto_enum< ::CMsgBattleReport_CompareContext> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgBattleReport_CompareContext>() {
  return ::CMsgBattleReport_CompareContext_descriptor();
}
template <> struct is_proto_enum< ::CMsgBattleReport_HighlightTier> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgBattleReport_HighlightTier>() {
  return ::CMsgBattleReport_HighlightTier_descriptor();
}
template <> struct is_proto_enum< ::CMsgBattleReport_HighlightRarity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgBattleReport_HighlightRarity>() {
  return ::CMsgBattleReport_HighlightRarity_descriptor();
}
template <> struct is_proto_enum< ::CMsgBattleReport_EOutcome> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgBattleReport_EOutcome>() {
  return ::CMsgBattleReport_EOutcome_descriptor();
}
template <> struct is_proto_enum< ::CMsgBattleReport_ELaneOutcome> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgBattleReport_ELaneOutcome>() {
  return ::CMsgBattleReport_ELaneOutcome_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fbattle_5freport_2eproto
