// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_player.steamworkssdk.proto

#include "steammessages_player.steamworkssdk.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CPlayer_GetMutualFriendsForIncomingInvites_Request::CPlayer_GetMutualFriendsForIncomingInvites_Request(
    ::_pbi::ConstantInitialized) {}
struct CPlayer_GetMutualFriendsForIncomingInvites_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_GetMutualFriendsForIncomingInvites_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_GetMutualFriendsForIncomingInvites_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetMutualFriendsForIncomingInvites_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_GetMutualFriendsForIncomingInvites_RequestDefaultTypeInternal _CPlayer_GetMutualFriendsForIncomingInvites_Request_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_IncomingInviteMutualFriendList::CPlayer_IncomingInviteMutualFriendList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mutual_friend_account_ids_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}} {}
struct CPlayer_IncomingInviteMutualFriendListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_IncomingInviteMutualFriendListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_IncomingInviteMutualFriendListDefaultTypeInternal() {}
  union {
    CPlayer_IncomingInviteMutualFriendList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_IncomingInviteMutualFriendListDefaultTypeInternal _CPlayer_IncomingInviteMutualFriendList_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_GetMutualFriendsForIncomingInvites_Response::CPlayer_GetMutualFriendsForIncomingInvites_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.incoming_invite_mutual_friends_lists_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CPlayer_GetMutualFriendsForIncomingInvites_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_GetMutualFriendsForIncomingInvites_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_GetMutualFriendsForIncomingInvites_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetMutualFriendsForIncomingInvites_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_GetMutualFriendsForIncomingInvites_ResponseDefaultTypeInternal _CPlayer_GetMutualFriendsForIncomingInvites_Response_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_GetFriendsGameplayInfo_Request::CPlayer_GetFriendsGameplayInfo_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.appid_)*/0u} {}
struct CPlayer_GetFriendsGameplayInfo_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_GetFriendsGameplayInfo_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_GetFriendsGameplayInfo_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetFriendsGameplayInfo_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_GetFriendsGameplayInfo_RequestDefaultTypeInternal _CPlayer_GetFriendsGameplayInfo_Request_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.minutes_played_)*/0u
  , /*decltype(_impl_.minutes_played_forever_)*/0u} {}
struct CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfoDefaultTypeInternal() {}
  union {
    CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfoDefaultTypeInternal _CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.minutes_played_)*/0u
  , /*decltype(_impl_.minutes_played_forever_)*/0u
  , /*decltype(_impl_.in_wishlist_)*/false
  , /*decltype(_impl_.owned_)*/false} {}
struct CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfoDefaultTypeInternal() {}
  union {
    CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfoDefaultTypeInternal _CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_GetFriendsGameplayInfo_Response::CPlayer_GetFriendsGameplayInfo_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.in_game_)*/{}
  , /*decltype(_impl_.played_recently_)*/{}
  , /*decltype(_impl_.played_ever_)*/{}
  , /*decltype(_impl_.owns_)*/{}
  , /*decltype(_impl_.in_wishlist_)*/{}
  , /*decltype(_impl_.your_info_)*/nullptr} {}
struct CPlayer_GetFriendsGameplayInfo_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_GetFriendsGameplayInfo_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_GetFriendsGameplayInfo_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetFriendsGameplayInfo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_GetFriendsGameplayInfo_ResponseDefaultTypeInternal _CPlayer_GetFriendsGameplayInfo_Response_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_GetGameBadgeLevels_Request::CPlayer_GetGameBadgeLevels_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.appid_)*/0u} {}
struct CPlayer_GetGameBadgeLevels_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_GetGameBadgeLevels_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_GetGameBadgeLevels_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetGameBadgeLevels_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_GetGameBadgeLevels_RequestDefaultTypeInternal _CPlayer_GetGameBadgeLevels_Request_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_GetGameBadgeLevels_Response_Badge::CPlayer_GetGameBadgeLevels_Response_Badge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.series_)*/0
  , /*decltype(_impl_.border_color_)*/0u} {}
struct CPlayer_GetGameBadgeLevels_Response_BadgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_GetGameBadgeLevels_Response_BadgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_GetGameBadgeLevels_Response_BadgeDefaultTypeInternal() {}
  union {
    CPlayer_GetGameBadgeLevels_Response_Badge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_GetGameBadgeLevels_Response_BadgeDefaultTypeInternal _CPlayer_GetGameBadgeLevels_Response_Badge_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_GetGameBadgeLevels_Response::CPlayer_GetGameBadgeLevels_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.badges_)*/{}
  , /*decltype(_impl_.player_level_)*/0u} {}
struct CPlayer_GetGameBadgeLevels_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_GetGameBadgeLevels_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_GetGameBadgeLevels_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetGameBadgeLevels_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_GetGameBadgeLevels_ResponseDefaultTypeInternal _CPlayer_GetGameBadgeLevels_Response_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_GetLastPlayedTimes_Request::CPlayer_GetLastPlayedTimes_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.min_last_played_)*/0u} {}
struct CPlayer_GetLastPlayedTimes_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_GetLastPlayedTimes_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_GetLastPlayedTimes_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetLastPlayedTimes_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_GetLastPlayedTimes_RequestDefaultTypeInternal _CPlayer_GetLastPlayedTimes_Request_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_GetLastPlayedTimes_Response_Game::CPlayer_GetLastPlayedTimes_Response_Game(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.appid_)*/0
  , /*decltype(_impl_.last_playtime_)*/0u
  , /*decltype(_impl_.playtime_2weeks_)*/0
  , /*decltype(_impl_.playtime_forever_)*/0
  , /*decltype(_impl_.first_playtime_)*/0u} {}
struct CPlayer_GetLastPlayedTimes_Response_GameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_GetLastPlayedTimes_Response_GameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_GetLastPlayedTimes_Response_GameDefaultTypeInternal() {}
  union {
    CPlayer_GetLastPlayedTimes_Response_Game _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_GetLastPlayedTimes_Response_GameDefaultTypeInternal _CPlayer_GetLastPlayedTimes_Response_Game_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_GetLastPlayedTimes_Response::CPlayer_GetLastPlayedTimes_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.games_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CPlayer_GetLastPlayedTimes_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_GetLastPlayedTimes_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_GetLastPlayedTimes_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetLastPlayedTimes_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_GetLastPlayedTimes_ResponseDefaultTypeInternal _CPlayer_GetLastPlayedTimes_Response_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_AcceptSSA_Request::CPlayer_AcceptSSA_Request(
    ::_pbi::ConstantInitialized) {}
struct CPlayer_AcceptSSA_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_AcceptSSA_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_AcceptSSA_RequestDefaultTypeInternal() {}
  union {
    CPlayer_AcceptSSA_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_AcceptSSA_RequestDefaultTypeInternal _CPlayer_AcceptSSA_Request_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_AcceptSSA_Response::CPlayer_AcceptSSA_Response(
    ::_pbi::ConstantInitialized) {}
struct CPlayer_AcceptSSA_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_AcceptSSA_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_AcceptSSA_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_AcceptSSA_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_AcceptSSA_ResponseDefaultTypeInternal _CPlayer_AcceptSSA_Response_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_GetNicknameList_Request::CPlayer_GetNicknameList_Request(
    ::_pbi::ConstantInitialized) {}
struct CPlayer_GetNicknameList_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_GetNicknameList_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_GetNicknameList_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetNicknameList_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_GetNicknameList_RequestDefaultTypeInternal _CPlayer_GetNicknameList_Request_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_GetNicknameList_Response_PlayerNickname::CPlayer_GetNicknameList_Response_PlayerNickname(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.accountid_)*/0u} {}
struct CPlayer_GetNicknameList_Response_PlayerNicknameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_GetNicknameList_Response_PlayerNicknameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_GetNicknameList_Response_PlayerNicknameDefaultTypeInternal() {}
  union {
    CPlayer_GetNicknameList_Response_PlayerNickname _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_GetNicknameList_Response_PlayerNicknameDefaultTypeInternal _CPlayer_GetNicknameList_Response_PlayerNickname_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_GetNicknameList_Response::CPlayer_GetNicknameList_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nicknames_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CPlayer_GetNicknameList_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_GetNicknameList_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_GetNicknameList_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetNicknameList_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_GetNicknameList_ResponseDefaultTypeInternal _CPlayer_GetNicknameList_Response_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_GetPerFriendPreferences_Request::CPlayer_GetPerFriendPreferences_Request(
    ::_pbi::ConstantInitialized) {}
struct CPlayer_GetPerFriendPreferences_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_GetPerFriendPreferences_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_GetPerFriendPreferences_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetPerFriendPreferences_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_GetPerFriendPreferences_RequestDefaultTypeInternal _CPlayer_GetPerFriendPreferences_Request_default_instance_;
PROTOBUF_CONSTEXPR PerFriendPreferences::PerFriendPreferences(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.accountid_)*/0u
  , /*decltype(_impl_.notifications_showingame_)*/0
  , /*decltype(_impl_.notifications_showonline_)*/0
  , /*decltype(_impl_.notifications_showmessages_)*/0
  , /*decltype(_impl_.sounds_showingame_)*/0
  , /*decltype(_impl_.sounds_showonline_)*/0
  , /*decltype(_impl_.sounds_showmessages_)*/0
  , /*decltype(_impl_.notifications_sendmobile_)*/0} {}
struct PerFriendPreferencesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerFriendPreferencesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerFriendPreferencesDefaultTypeInternal() {}
  union {
    PerFriendPreferences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerFriendPreferencesDefaultTypeInternal _PerFriendPreferences_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_GetPerFriendPreferences_Response::CPlayer_GetPerFriendPreferences_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.preferences_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CPlayer_GetPerFriendPreferences_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_GetPerFriendPreferences_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_GetPerFriendPreferences_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetPerFriendPreferences_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_GetPerFriendPreferences_ResponseDefaultTypeInternal _CPlayer_GetPerFriendPreferences_Response_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_SetPerFriendPreferences_Request::CPlayer_SetPerFriendPreferences_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.preferences_)*/nullptr} {}
struct CPlayer_SetPerFriendPreferences_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_SetPerFriendPreferences_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_SetPerFriendPreferences_RequestDefaultTypeInternal() {}
  union {
    CPlayer_SetPerFriendPreferences_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_SetPerFriendPreferences_RequestDefaultTypeInternal _CPlayer_SetPerFriendPreferences_Request_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_SetPerFriendPreferences_Response::CPlayer_SetPerFriendPreferences_Response(
    ::_pbi::ConstantInitialized) {}
struct CPlayer_SetPerFriendPreferences_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_SetPerFriendPreferences_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_SetPerFriendPreferences_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_SetPerFriendPreferences_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_SetPerFriendPreferences_ResponseDefaultTypeInternal _CPlayer_SetPerFriendPreferences_Response_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_AddFriend_Request::CPlayer_AddFriend_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}} {}
struct CPlayer_AddFriend_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_AddFriend_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_AddFriend_RequestDefaultTypeInternal() {}
  union {
    CPlayer_AddFriend_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_AddFriend_RequestDefaultTypeInternal _CPlayer_AddFriend_Request_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_AddFriend_Response::CPlayer_AddFriend_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.invite_sent_)*/false
  , /*decltype(_impl_.friend_relationship_)*/0u} {}
struct CPlayer_AddFriend_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_AddFriend_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_AddFriend_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_AddFriend_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_AddFriend_ResponseDefaultTypeInternal _CPlayer_AddFriend_Response_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_RemoveFriend_Request::CPlayer_RemoveFriend_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}} {}
struct CPlayer_RemoveFriend_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_RemoveFriend_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_RemoveFriend_RequestDefaultTypeInternal() {}
  union {
    CPlayer_RemoveFriend_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_RemoveFriend_RequestDefaultTypeInternal _CPlayer_RemoveFriend_Request_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_RemoveFriend_Response::CPlayer_RemoveFriend_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.friend_relationship_)*/0u} {}
struct CPlayer_RemoveFriend_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_RemoveFriend_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_RemoveFriend_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_RemoveFriend_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_RemoveFriend_ResponseDefaultTypeInternal _CPlayer_RemoveFriend_Response_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_IgnoreFriend_Request::CPlayer_IgnoreFriend_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.unignore_)*/false} {}
struct CPlayer_IgnoreFriend_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_IgnoreFriend_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_IgnoreFriend_RequestDefaultTypeInternal() {}
  union {
    CPlayer_IgnoreFriend_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_IgnoreFriend_RequestDefaultTypeInternal _CPlayer_IgnoreFriend_Request_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_IgnoreFriend_Response::CPlayer_IgnoreFriend_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.friend_relationship_)*/0u} {}
struct CPlayer_IgnoreFriend_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_IgnoreFriend_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_IgnoreFriend_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_IgnoreFriend_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_IgnoreFriend_ResponseDefaultTypeInternal _CPlayer_IgnoreFriend_Response_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_GetCommunityPreferences_Request::CPlayer_GetCommunityPreferences_Request(
    ::_pbi::ConstantInitialized) {}
struct CPlayer_GetCommunityPreferences_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_GetCommunityPreferences_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_GetCommunityPreferences_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetCommunityPreferences_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_GetCommunityPreferences_RequestDefaultTypeInternal _CPlayer_GetCommunityPreferences_Request_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_CommunityPreferences::CPlayer_CommunityPreferences(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_updated_)*/0u
  , /*decltype(_impl_.parenthesize_nicknames_)*/false
  , /*decltype(_impl_.hide_adult_content_violence_)*/true
  , /*decltype(_impl_.hide_adult_content_sex_)*/true} {}
struct CPlayer_CommunityPreferencesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_CommunityPreferencesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_CommunityPreferencesDefaultTypeInternal() {}
  union {
    CPlayer_CommunityPreferences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_CommunityPreferencesDefaultTypeInternal _CPlayer_CommunityPreferences_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_GetCommunityPreferences_Response::CPlayer_GetCommunityPreferences_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.preferences_)*/nullptr} {}
struct CPlayer_GetCommunityPreferences_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_GetCommunityPreferences_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_GetCommunityPreferences_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetCommunityPreferences_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_GetCommunityPreferences_ResponseDefaultTypeInternal _CPlayer_GetCommunityPreferences_Response_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_SetCommunityPreferences_Request::CPlayer_SetCommunityPreferences_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.preferences_)*/nullptr} {}
struct CPlayer_SetCommunityPreferences_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_SetCommunityPreferences_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_SetCommunityPreferences_RequestDefaultTypeInternal() {}
  union {
    CPlayer_SetCommunityPreferences_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_SetCommunityPreferences_RequestDefaultTypeInternal _CPlayer_SetCommunityPreferences_Request_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_SetCommunityPreferences_Response::CPlayer_SetCommunityPreferences_Response(
    ::_pbi::ConstantInitialized) {}
struct CPlayer_SetCommunityPreferences_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_SetCommunityPreferences_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_SetCommunityPreferences_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_SetCommunityPreferences_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_SetCommunityPreferences_ResponseDefaultTypeInternal _CPlayer_SetCommunityPreferences_Response_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_GetNewSteamAnnouncementState_Request::CPlayer_GetNewSteamAnnouncementState_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.language_)*/0} {}
struct CPlayer_GetNewSteamAnnouncementState_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_GetNewSteamAnnouncementState_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_GetNewSteamAnnouncementState_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetNewSteamAnnouncementState_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_GetNewSteamAnnouncementState_RequestDefaultTypeInternal _CPlayer_GetNewSteamAnnouncementState_Request_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_GetNewSteamAnnouncementState_Response::CPlayer_GetNewSteamAnnouncementState_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.announcement_headline_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.announcement_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.time_posted_)*/0u
  , /*decltype(_impl_.announcement_gid_)*/uint64_t{0u}} {}
struct CPlayer_GetNewSteamAnnouncementState_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_GetNewSteamAnnouncementState_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_GetNewSteamAnnouncementState_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetNewSteamAnnouncementState_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_GetNewSteamAnnouncementState_ResponseDefaultTypeInternal _CPlayer_GetNewSteamAnnouncementState_Response_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_UpdateSteamAnnouncementLastRead_Request::CPlayer_UpdateSteamAnnouncementLastRead_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.announcement_gid_)*/uint64_t{0u}
  , /*decltype(_impl_.time_posted_)*/0u} {}
struct CPlayer_UpdateSteamAnnouncementLastRead_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_UpdateSteamAnnouncementLastRead_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_UpdateSteamAnnouncementLastRead_RequestDefaultTypeInternal() {}
  union {
    CPlayer_UpdateSteamAnnouncementLastRead_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_UpdateSteamAnnouncementLastRead_RequestDefaultTypeInternal _CPlayer_UpdateSteamAnnouncementLastRead_Request_default_instance_;
PROTOBUF_CONSTEXPR CPlayer_UpdateSteamAnnouncementLastRead_Response::CPlayer_UpdateSteamAnnouncementLastRead_Response(
    ::_pbi::ConstantInitialized) {}
struct CPlayer_UpdateSteamAnnouncementLastRead_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPlayer_UpdateSteamAnnouncementLastRead_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPlayer_UpdateSteamAnnouncementLastRead_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_UpdateSteamAnnouncementLastRead_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPlayer_UpdateSteamAnnouncementLastRead_ResponseDefaultTypeInternal _CPlayer_UpdateSteamAnnouncementLastRead_Response_default_instance_;
static ::_pb::Metadata file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[38];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_steammessages_5fplayer_2esteamworkssdk_2eproto[1];
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_steammessages_5fplayer_2esteamworkssdk_2eproto[1];

const uint32_t TableStruct_steammessages_5fplayer_2esteamworkssdk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetMutualFriendsForIncomingInvites_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_IncomingInviteMutualFriendList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_IncomingInviteMutualFriendList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_IncomingInviteMutualFriendList, _impl_.steamid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_IncomingInviteMutualFriendList, _impl_.mutual_friend_account_ids_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetMutualFriendsForIncomingInvites_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetMutualFriendsForIncomingInvites_Response, _impl_.incoming_invite_mutual_friends_lists_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Request, _impl_.appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo, _impl_.steamid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo, _impl_.minutes_played_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo, _impl_.minutes_played_forever_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, _impl_.steamid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, _impl_.minutes_played_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, _impl_.minutes_played_forever_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, _impl_.in_wishlist_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, _impl_.owned_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, _impl_.your_info_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, _impl_.in_game_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, _impl_.played_recently_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, _impl_.played_ever_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, _impl_.owns_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, _impl_.in_wishlist_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Request, _impl_.appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response_Badge, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response_Badge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response_Badge, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response_Badge, _impl_.series_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response_Badge, _impl_.border_color_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response, _impl_.player_level_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response, _impl_.badges_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Request, _impl_.min_last_played_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, _impl_.last_playtime_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, _impl_.playtime_2weeks_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, _impl_.playtime_forever_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, _impl_.first_playtime_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response, _impl_.games_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_AcceptSSA_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_AcceptSSA_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNicknameList_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNicknameList_Response_PlayerNickname, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNicknameList_Response_PlayerNickname, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNicknameList_Response_PlayerNickname, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNicknameList_Response_PlayerNickname, _impl_.nickname_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNicknameList_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNicknameList_Response, _impl_.nicknames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPerFriendPreferences_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, _impl_.notifications_showingame_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, _impl_.notifications_showonline_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, _impl_.notifications_showmessages_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, _impl_.sounds_showingame_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, _impl_.sounds_showonline_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, _impl_.sounds_showmessages_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, _impl_.notifications_sendmobile_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPerFriendPreferences_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPerFriendPreferences_Response, _impl_.preferences_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetPerFriendPreferences_Request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetPerFriendPreferences_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetPerFriendPreferences_Request, _impl_.preferences_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetPerFriendPreferences_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_AddFriend_Request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_AddFriend_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_AddFriend_Request, _impl_.steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_AddFriend_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_AddFriend_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_AddFriend_Response, _impl_.invite_sent_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_AddFriend_Response, _impl_.friend_relationship_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CPlayer_RemoveFriend_Request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_RemoveFriend_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_RemoveFriend_Request, _impl_.steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_RemoveFriend_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_RemoveFriend_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_RemoveFriend_Response, _impl_.friend_relationship_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_IgnoreFriend_Request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_IgnoreFriend_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_IgnoreFriend_Request, _impl_.steamid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_IgnoreFriend_Request, _impl_.unignore_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CPlayer_IgnoreFriend_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_IgnoreFriend_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_IgnoreFriend_Response, _impl_.friend_relationship_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetCommunityPreferences_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_CommunityPreferences, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_CommunityPreferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_CommunityPreferences, _impl_.hide_adult_content_violence_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_CommunityPreferences, _impl_.hide_adult_content_sex_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_CommunityPreferences, _impl_.parenthesize_nicknames_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_CommunityPreferences, _impl_.timestamp_updated_),
  2,
  3,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetCommunityPreferences_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetCommunityPreferences_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetCommunityPreferences_Response, _impl_.preferences_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetCommunityPreferences_Request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetCommunityPreferences_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetCommunityPreferences_Request, _impl_.preferences_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetCommunityPreferences_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Request, _impl_.language_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Response, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Response, _impl_.announcement_headline_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Response, _impl_.announcement_url_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Response, _impl_.time_posted_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Response, _impl_.announcement_gid_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CPlayer_UpdateSteamAnnouncementLastRead_Request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_UpdateSteamAnnouncementLastRead_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_UpdateSteamAnnouncementLastRead_Request, _impl_.announcement_gid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_UpdateSteamAnnouncementLastRead_Request, _impl_.time_posted_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_UpdateSteamAnnouncementLastRead_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::CPlayer_GetMutualFriendsForIncomingInvites_Request)},
  { 6, 14, -1, sizeof(::CPlayer_IncomingInviteMutualFriendList)},
  { 16, -1, -1, sizeof(::CPlayer_GetMutualFriendsForIncomingInvites_Response)},
  { 23, 30, -1, sizeof(::CPlayer_GetFriendsGameplayInfo_Request)},
  { 31, 40, -1, sizeof(::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo)},
  { 43, 54, -1, sizeof(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo)},
  { 59, 71, -1, sizeof(::CPlayer_GetFriendsGameplayInfo_Response)},
  { 77, 84, -1, sizeof(::CPlayer_GetGameBadgeLevels_Request)},
  { 85, 94, -1, sizeof(::CPlayer_GetGameBadgeLevels_Response_Badge)},
  { 97, 105, -1, sizeof(::CPlayer_GetGameBadgeLevels_Response)},
  { 107, 114, -1, sizeof(::CPlayer_GetLastPlayedTimes_Request)},
  { 115, 126, -1, sizeof(::CPlayer_GetLastPlayedTimes_Response_Game)},
  { 131, -1, -1, sizeof(::CPlayer_GetLastPlayedTimes_Response)},
  { 138, -1, -1, sizeof(::CPlayer_AcceptSSA_Request)},
  { 144, -1, -1, sizeof(::CPlayer_AcceptSSA_Response)},
  { 150, -1, -1, sizeof(::CPlayer_GetNicknameList_Request)},
  { 156, 164, -1, sizeof(::CPlayer_GetNicknameList_Response_PlayerNickname)},
  { 166, -1, -1, sizeof(::CPlayer_GetNicknameList_Response)},
  { 173, -1, -1, sizeof(::CPlayer_GetPerFriendPreferences_Request)},
  { 179, 194, -1, sizeof(::PerFriendPreferences)},
  { 203, -1, -1, sizeof(::CPlayer_GetPerFriendPreferences_Response)},
  { 210, 217, -1, sizeof(::CPlayer_SetPerFriendPreferences_Request)},
  { 218, -1, -1, sizeof(::CPlayer_SetPerFriendPreferences_Response)},
  { 224, 231, -1, sizeof(::CPlayer_AddFriend_Request)},
  { 232, 240, -1, sizeof(::CPlayer_AddFriend_Response)},
  { 242, 249, -1, sizeof(::CPlayer_RemoveFriend_Request)},
  { 250, 257, -1, sizeof(::CPlayer_RemoveFriend_Response)},
  { 258, 266, -1, sizeof(::CPlayer_IgnoreFriend_Request)},
  { 268, 275, -1, sizeof(::CPlayer_IgnoreFriend_Response)},
  { 276, -1, -1, sizeof(::CPlayer_GetCommunityPreferences_Request)},
  { 282, 292, -1, sizeof(::CPlayer_CommunityPreferences)},
  { 296, 303, -1, sizeof(::CPlayer_GetCommunityPreferences_Response)},
  { 304, 311, -1, sizeof(::CPlayer_SetCommunityPreferences_Request)},
  { 312, -1, -1, sizeof(::CPlayer_SetCommunityPreferences_Response)},
  { 318, 325, -1, sizeof(::CPlayer_GetNewSteamAnnouncementState_Request)},
  { 326, 337, -1, sizeof(::CPlayer_GetNewSteamAnnouncementState_Response)},
  { 342, 350, -1, sizeof(::CPlayer_UpdateSteamAnnouncementLastRead_Request)},
  { 352, -1, -1, sizeof(::CPlayer_UpdateSteamAnnouncementLastRead_Response)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CPlayer_GetMutualFriendsForIncomingInvites_Request_default_instance_._instance,
  &::_CPlayer_IncomingInviteMutualFriendList_default_instance_._instance,
  &::_CPlayer_GetMutualFriendsForIncomingInvites_Response_default_instance_._instance,
  &::_CPlayer_GetFriendsGameplayInfo_Request_default_instance_._instance,
  &::_CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo_default_instance_._instance,
  &::_CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo_default_instance_._instance,
  &::_CPlayer_GetFriendsGameplayInfo_Response_default_instance_._instance,
  &::_CPlayer_GetGameBadgeLevels_Request_default_instance_._instance,
  &::_CPlayer_GetGameBadgeLevels_Response_Badge_default_instance_._instance,
  &::_CPlayer_GetGameBadgeLevels_Response_default_instance_._instance,
  &::_CPlayer_GetLastPlayedTimes_Request_default_instance_._instance,
  &::_CPlayer_GetLastPlayedTimes_Response_Game_default_instance_._instance,
  &::_CPlayer_GetLastPlayedTimes_Response_default_instance_._instance,
  &::_CPlayer_AcceptSSA_Request_default_instance_._instance,
  &::_CPlayer_AcceptSSA_Response_default_instance_._instance,
  &::_CPlayer_GetNicknameList_Request_default_instance_._instance,
  &::_CPlayer_GetNicknameList_Response_PlayerNickname_default_instance_._instance,
  &::_CPlayer_GetNicknameList_Response_default_instance_._instance,
  &::_CPlayer_GetPerFriendPreferences_Request_default_instance_._instance,
  &::_PerFriendPreferences_default_instance_._instance,
  &::_CPlayer_GetPerFriendPreferences_Response_default_instance_._instance,
  &::_CPlayer_SetPerFriendPreferences_Request_default_instance_._instance,
  &::_CPlayer_SetPerFriendPreferences_Response_default_instance_._instance,
  &::_CPlayer_AddFriend_Request_default_instance_._instance,
  &::_CPlayer_AddFriend_Response_default_instance_._instance,
  &::_CPlayer_RemoveFriend_Request_default_instance_._instance,
  &::_CPlayer_RemoveFriend_Response_default_instance_._instance,
  &::_CPlayer_IgnoreFriend_Request_default_instance_._instance,
  &::_CPlayer_IgnoreFriend_Response_default_instance_._instance,
  &::_CPlayer_GetCommunityPreferences_Request_default_instance_._instance,
  &::_CPlayer_CommunityPreferences_default_instance_._instance,
  &::_CPlayer_GetCommunityPreferences_Response_default_instance_._instance,
  &::_CPlayer_SetCommunityPreferences_Request_default_instance_._instance,
  &::_CPlayer_SetCommunityPreferences_Response_default_instance_._instance,
  &::_CPlayer_GetNewSteamAnnouncementState_Request_default_instance_._instance,
  &::_CPlayer_GetNewSteamAnnouncementState_Response_default_instance_._instance,
  &::_CPlayer_UpdateSteamAnnouncementLastRead_Request_default_instance_._instance,
  &::_CPlayer_UpdateSteamAnnouncementLastRead_Response_default_instance_._instance,
};

const char descriptor_table_protodef_steammessages_5fplayer_2esteamworkssdk_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(steammessages_player.steamworkssdk.pro"
  "to\032.steammessages_unified_base.steamwork"
  "ssdk.proto\"4\n2CPlayer_GetMutualFriendsFo"
  "rIncomingInvites_Request\"\\\n&CPlayer_Inco"
  "mingInviteMutualFriendList\022\017\n\007steamid\030\001 "
  "\001(\006\022!\n\031mutual_friend_account_ids\030\002 \003(\r\"\214"
  "\001\n3CPlayer_GetMutualFriendsForIncomingIn"
  "vites_Response\022U\n$incoming_invite_mutual"
  "_friends_lists\030\001 \003(\0132\'.CPlayer_IncomingI"
  "nviteMutualFriendList\"7\n&CPlayer_GetFrie"
  "ndsGameplayInfo_Request\022\r\n\005appid\030\001 \001(\r\"\356"
  "\005\n\'CPlayer_GetFriendsGameplayInfo_Respon"
  "se\022K\n\tyour_info\030\001 \001(\01328.CPlayer_GetFrien"
  "dsGameplayInfo_Response.OwnGameplayInfo\022"
  "M\n\007in_game\030\002 \003(\0132<.CPlayer_GetFriendsGam"
  "eplayInfo_Response.FriendsGameplayInfo\022U"
  "\n\017played_recently\030\003 \003(\0132<.CPlayer_GetFri"
  "endsGameplayInfo_Response.FriendsGamepla"
  "yInfo\022Q\n\013played_ever\030\004 \003(\0132<.CPlayer_Get"
  "FriendsGameplayInfo_Response.FriendsGame"
  "playInfo\022J\n\004owns\030\005 \003(\0132<.CPlayer_GetFrie"
  "ndsGameplayInfo_Response.FriendsGameplay"
  "Info\022Q\n\013in_wishlist\030\006 \003(\0132<.CPlayer_GetF"
  "riendsGameplayInfo_Response.FriendsGamep"
  "layInfo\032^\n\023FriendsGameplayInfo\022\017\n\007steami"
  "d\030\001 \001(\006\022\026\n\016minutes_played\030\002 \001(\r\022\036\n\026minut"
  "es_played_forever\030\003 \001(\r\032~\n\017OwnGameplayIn"
  "fo\022\017\n\007steamid\030\001 \001(\006\022\026\n\016minutes_played\030\002 "
  "\001(\r\022\036\n\026minutes_played_forever\030\003 \001(\r\022\023\n\013i"
  "n_wishlist\030\004 \001(\010\022\r\n\005owned\030\005 \001(\010\"3\n\"CPlay"
  "er_GetGameBadgeLevels_Request\022\r\n\005appid\030\001"
  " \001(\r\"\265\001\n#CPlayer_GetGameBadgeLevels_Resp"
  "onse\022\024\n\014player_level\030\001 \001(\r\022:\n\006badges\030\002 \003"
  "(\0132*.CPlayer_GetGameBadgeLevels_Response"
  ".Badge\032<\n\005Badge\022\r\n\005level\030\001 \001(\005\022\016\n\006series"
  "\030\002 \001(\005\022\024\n\014border_color\030\003 \001(\r\"\202\001\n\"CPlayer"
  "_GetLastPlayedTimes_Request\022\\\n\017min_last_"
  "played\030\001 \001(\rBC\202\265\030\?The most recent last-p"
  "layed time the client already knows abou"
  "t\"\330\001\n#CPlayer_GetLastPlayedTimes_Respons"
  "e\0228\n\005games\030\001 \003(\0132).CPlayer_GetLastPlayed"
  "Times_Response.Game\032w\n\004Game\022\r\n\005appid\030\001 \001"
  "(\005\022\025\n\rlast_playtime\030\002 \001(\r\022\027\n\017playtime_2w"
  "eeks\030\003 \001(\005\022\030\n\020playtime_forever\030\004 \001(\005\022\026\n\016"
  "first_playtime\030\005 \001(\r\"\033\n\031CPlayer_AcceptSS"
  "A_Request\"\034\n\032CPlayer_AcceptSSA_Response\""
  "!\n\037CPlayer_GetNicknameList_Request\"\236\001\n C"
  "Player_GetNicknameList_Response\022C\n\tnickn"
  "ames\030\001 \003(\01320.CPlayer_GetNicknameList_Res"
  "ponse.PlayerNickname\0325\n\016PlayerNickname\022\021"
  "\n\taccountid\030\001 \001(\007\022\020\n\010nickname\030\002 \001(\t\")\n\'C"
  "Player_GetPerFriendPreferences_Request\"\321"
  "\005\n\024PerFriendPreferences\022\021\n\taccountid\030\001 \001"
  "(\007\022\020\n\010nickname\030\002 \001(\t\022_\n\030notifications_sh"
  "owingame\030\003 \001(\0162\025.ENotificationSetting:&k"
  "_ENotificationSettingNotifyUseDefault\022_\n"
  "\030notifications_showonline\030\004 \001(\0162\025.ENotif"
  "icationSetting:&k_ENotificationSettingNo"
  "tifyUseDefault\022a\n\032notifications_showmess"
  "ages\030\005 \001(\0162\025.ENotificationSetting:&k_ENo"
  "tificationSettingNotifyUseDefault\022X\n\021sou"
  "nds_showingame\030\006 \001(\0162\025.ENotificationSett"
  "ing:&k_ENotificationSettingNotifyUseDefa"
  "ult\022X\n\021sounds_showonline\030\007 \001(\0162\025.ENotifi"
  "cationSetting:&k_ENotificationSettingNot"
  "ifyUseDefault\022Z\n\023sounds_showmessages\030\010 \001"
  "(\0162\025.ENotificationSetting:&k_ENotificati"
  "onSettingNotifyUseDefault\022_\n\030notificatio"
  "ns_sendmobile\030\t \001(\0162\025.ENotificationSetti"
  "ng:&k_ENotificationSettingNotifyUseDefau"
  "lt\"V\n(CPlayer_GetPerFriendPreferences_Re"
  "sponse\022*\n\013preferences\030\001 \003(\0132\025.PerFriendP"
  "references\"U\n\'CPlayer_SetPerFriendPrefer"
  "ences_Request\022*\n\013preferences\030\001 \001(\0132\025.Per"
  "FriendPreferences\"*\n(CPlayer_SetPerFrien"
  "dPreferences_Response\"c\n\031CPlayer_AddFrie"
  "nd_Request\022F\n\007steamid\030\001 \001(\006B5\202\265\0301Steam I"
  "D of user to whom to send a friend invit"
  "e.\"\366\001\n\032CPlayer_AddFriend_Response\022O\n\013inv"
  "ite_sent\030\001 \001(\010B:\202\265\0306True if the operatio"
  "n was successful, false otherwise.\022\206\001\n\023f"
  "riend_relationship\030\002 \001(\rBi\202\265\030ethe result"
  "ing relationship.  Depending on state, m"
  "ay move directly to friends rather than "
  "invite sent\"R\n\034CPlayer_RemoveFriend_Requ"
  "est\0222\n\007steamid\030\001 \001(\006B!\202\265\030\035Steam ID of fr"
  "iend to remove.\"\\\n\035CPlayer_RemoveFriend_"
  "Response\022;\n\023friend_relationship\030\001 \001(\rB\036\202"
  "\265\030\032the resulting relationship\"\177\n\034CPlayer"
  "_IgnoreFriend_Request\022\017\n\007steamid\030\001 \001(\006\022N"
  "\n\010unignore\030\002 \001(\010B<\202\265\0308If set, remove fro"
  "m ignore/block list instead of adding \"\\"
  "\n\035CPlayer_IgnoreFriend_Response\022;\n\023frien"
  "d_relationship\030\001 \001(\rB\036\202\265\030\032the resulting "
  "relationship\")\n\'CPlayer_GetCommunityPref"
  "erences_Request\"\261\001\n\034CPlayer_CommunityPre"
  "ferences\022)\n\033hide_adult_content_violence\030"
  "\001 \001(\010:\004true\022$\n\026hide_adult_content_sex\030\002 "
  "\001(\010:\004true\022%\n\026parenthesize_nicknames\030\004 \001("
  "\010:\005false\022\031\n\021timestamp_updated\030\003 \001(\r\"^\n(C"
  "Player_GetCommunityPreferences_Response\022"
  "2\n\013preferences\030\001 \001(\0132\035.CPlayer_Community"
  "Preferences\"]\n\'CPlayer_SetCommunityPrefe"
  "rences_Request\0222\n\013preferences\030\001 \001(\0132\035.CP"
  "layer_CommunityPreferences\"*\n(CPlayer_Se"
  "tCommunityPreferences_Response\"@\n,CPlaye"
  "r_GetNewSteamAnnouncementState_Request\022\020"
  "\n\010language\030\001 \001(\005\"\246\001\n-CPlayer_GetNewSteam"
  "AnnouncementState_Response\022\r\n\005state\030\001 \001("
  "\005\022\035\n\025announcement_headline\030\002 \001(\t\022\030\n\020anno"
  "uncement_url\030\003 \001(\t\022\023\n\013time_posted\030\004 \001(\r\022"
  "\030\n\020announcement_gid\030\005 \001(\004\"`\n/CPlayer_Upd"
  "ateSteamAnnouncementLastRead_Request\022\030\n\020"
  "announcement_gid\030\001 \001(\004\022\023\n\013time_posted\030\002 "
  "\001(\r\"2\n0CPlayer_UpdateSteamAnnouncementLa"
  "stRead_Response*\205\001\n\024ENotificationSetting"
  "\022*\n&k_ENotificationSettingNotifyUseDefau"
  "lt\020\000\022 \n\034k_ENotificationSettingAlways\020\001\022\037"
  "\n\033k_ENotificationSettingNever\020\0022\255\024\n\006Play"
  "er\022\357\001\n\"GetMutualFriendsForIncomingInvite"
  "s\0223.CPlayer_GetMutualFriendsForIncomingI"
  "nvites_Request\0324.CPlayer_GetMutualFriend"
  "sForIncomingInvites_Response\"^\202\265\030ZGet me"
  " the mutual friends for each of my pendi"
  "ng incoming invites (individuals and cla"
  "ns).\022\270\001\n\026GetFriendsGameplayInfo\022\'.CPlaye"
  "r_GetFriendsGameplayInfo_Request\032(.CPlay"
  "er_GetFriendsGameplayInfo_Response\"K\202\265\030G"
  "Get a list of friends who are playing, h"
  "ave played, own, or want a game\022\266\001\n\022GetG"
  "ameBadgeLevels\022#.CPlayer_GetGameBadgeLev"
  "els_Request\032$.CPlayer_GetGameBadgeLevels"
  "_Response\"U\202\265\030QReturns the Steam Level o"
  "f a user, the Badge level for the game, "
  "and if it\'s foil\022\225\001\n\030ClientGetLastPlayed"
  "Times\022#.CPlayer_GetLastPlayedTimes_Reque"
  "st\032$.CPlayer_GetLastPlayedTimes_Response"
  "\".\202\265\030*Gets the last-played times for the"
  " account\022c\n\tAcceptSSA\022\032.CPlayer_AcceptSS"
  "A_Request\032\033.CPlayer_AcceptSSA_Response\"\035"
  "\202\265\030\031User is accepting the SSA\022\224\001\n\017GetNic"
  "knameList\022 .CPlayer_GetNicknameList_Requ"
  "est\032!.CPlayer_GetNicknameList_Response\"<"
  "\202\265\0308Gets the list of nicknames this user"
  " has for other users\022\275\001\n\027GetPerFriendPre"
  "ferences\022(.CPlayer_GetPerFriendPreferenc"
  "es_Request\032).CPlayer_GetPerFriendPrefere"
  "nces_Response\"M\202\265\030IGets the list of per-"
  "friend preferences this user has set for"
  " other users\022\267\001\n\027SetPerFriendPreferences"
  "\022(.CPlayer_SetPerFriendPreferences_Reque"
  "st\032).CPlayer_SetPerFriendPreferences_Res"
  "ponse\"G\202\265\030CSets the logged in user\'s per"
  "-friend preferences for the given user\022s"
  "\n\tAddFriend\022\032.CPlayer_AddFriend_Request\032"
  "\033.CPlayer_AddFriend_Response\"-\202\265\030)Invite"
  "s another Steam user to be a friend\022\202\001\n\014"
  "RemoveFriend\022\035.CPlayer_RemoveFriend_Requ"
  "est\032\036.CPlayer_RemoveFriend_Response\"3\202\265\030"
  "/Removes a friend or ignores a friend su"
  "ggestion\022\246\001\n\014IgnoreFriend\022\035.CPlayer_Igno"
  "reFriend_Request\032\036.CPlayer_IgnoreFriend_"
  "Response\"W\202\265\030SBlocks or unblocks communi"
  "cation with the user.  Despite name, can"
  " be a non-friend.\022\236\001\n\027GetCommunityPrefer"
  "ences\022(.CPlayer_GetCommunityPreferences_"
  "Request\032).CPlayer_GetCommunityPreference"
  "s_Response\".\202\265\030*Returns the player\'s com"
  "munity preferences\022\233\001\n\027SetCommunityPrefe"
  "rences\022(.CPlayer_SetCommunityPreferences"
  "_Request\032).CPlayer_SetCommunityPreferenc"
  "es_Response\"+\202\265\030\'Sets the player\'s commu"
  "nity preferences\022\336\001\n\034GetNewSteamAnnounce"
  "mentState\022-.CPlayer_GetNewSteamAnnouncem"
  "entState_Request\032..CPlayer_GetNewSteamAn"
  "nouncementState_Response\"_\202\265\030[Calculates"
  " and returns what to display for UI that"
  " renders new steam announcement availabl"
  "e\022\274\001\n\037UpdateSteamAnnouncementLastRead\0220."
  "CPlayer_UpdateSteamAnnouncementLastRead_"
  "Request\0321.CPlayer_UpdateSteamAnnouncemen"
  "tLastRead_Response\"4\202\265\0300Marks latest ann"
  "ouncement timestamp read by user\032-\202\265\030)A "
  "service for accessing Steam player dataB"
  "\003\200\001\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_deps[1] = {
  &::descriptor_table_steammessages_5funified_5fbase_2esteamworkssdk_2eproto,
};
static ::_pbi::once_flag descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto = {
    false, false, 7364, descriptor_table_protodef_steammessages_5fplayer_2esteamworkssdk_2eproto,
    "steammessages_player.steamworkssdk.proto",
    &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once, descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_deps, 1, 38,
    schemas, file_default_instances, TableStruct_steammessages_5fplayer_2esteamworkssdk_2eproto::offsets,
    file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto, file_level_enum_descriptors_steammessages_5fplayer_2esteamworkssdk_2eproto,
    file_level_service_descriptors_steammessages_5fplayer_2esteamworkssdk_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter() {
  return &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fplayer_2esteamworkssdk_2eproto(&descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENotificationSetting_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto);
  return file_level_enum_descriptors_steammessages_5fplayer_2esteamworkssdk_2eproto[0];
}
bool ENotificationSetting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CPlayer_GetMutualFriendsForIncomingInvites_Request::_Internal {
 public:
};

CPlayer_GetMutualFriendsForIncomingInvites_Request::CPlayer_GetMutualFriendsForIncomingInvites_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetMutualFriendsForIncomingInvites_Request)
}
CPlayer_GetMutualFriendsForIncomingInvites_Request::CPlayer_GetMutualFriendsForIncomingInvites_Request(const CPlayer_GetMutualFriendsForIncomingInvites_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CPlayer_GetMutualFriendsForIncomingInvites_Request* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetMutualFriendsForIncomingInvites_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetMutualFriendsForIncomingInvites_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetMutualFriendsForIncomingInvites_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetMutualFriendsForIncomingInvites_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[0]);
}

// ===================================================================

class CPlayer_IncomingInviteMutualFriendList::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_IncomingInviteMutualFriendList>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_IncomingInviteMutualFriendList::CPlayer_IncomingInviteMutualFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_IncomingInviteMutualFriendList)
}
CPlayer_IncomingInviteMutualFriendList::CPlayer_IncomingInviteMutualFriendList(const CPlayer_IncomingInviteMutualFriendList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_IncomingInviteMutualFriendList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mutual_friend_account_ids_){from._impl_.mutual_friend_account_ids_}
    , decltype(_impl_.steamid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.steamid_ = from._impl_.steamid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_IncomingInviteMutualFriendList)
}

inline void CPlayer_IncomingInviteMutualFriendList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mutual_friend_account_ids_){arena}
    , decltype(_impl_.steamid_){uint64_t{0u}}
  };
}

CPlayer_IncomingInviteMutualFriendList::~CPlayer_IncomingInviteMutualFriendList() {
  // @@protoc_insertion_point(destructor:CPlayer_IncomingInviteMutualFriendList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_IncomingInviteMutualFriendList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mutual_friend_account_ids_.~RepeatedField();
}

void CPlayer_IncomingInviteMutualFriendList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_IncomingInviteMutualFriendList::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_IncomingInviteMutualFriendList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mutual_friend_account_ids_.Clear();
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_IncomingInviteMutualFriendList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 mutual_friend_account_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_mutual_friend_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_mutual_friend_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_IncomingInviteMutualFriendList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_IncomingInviteMutualFriendList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // repeated uint32 mutual_friend_account_ids = 2;
  for (int i = 0, n = this->_internal_mutual_friend_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mutual_friend_account_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_IncomingInviteMutualFriendList)
  return target;
}

size_t CPlayer_IncomingInviteMutualFriendList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_IncomingInviteMutualFriendList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 mutual_friend_account_ids = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.mutual_friend_account_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_mutual_friend_account_ids_size());
    total_size += data_size;
  }

  // optional fixed64 steamid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_IncomingInviteMutualFriendList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_IncomingInviteMutualFriendList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_IncomingInviteMutualFriendList::GetClassData() const { return &_class_data_; }


void CPlayer_IncomingInviteMutualFriendList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_IncomingInviteMutualFriendList*>(&to_msg);
  auto& from = static_cast<const CPlayer_IncomingInviteMutualFriendList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_IncomingInviteMutualFriendList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mutual_friend_account_ids_.MergeFrom(from._impl_.mutual_friend_account_ids_);
  if (from._internal_has_steamid()) {
    _this->_internal_set_steamid(from._internal_steamid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_IncomingInviteMutualFriendList::CopyFrom(const CPlayer_IncomingInviteMutualFriendList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_IncomingInviteMutualFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_IncomingInviteMutualFriendList::IsInitialized() const {
  return true;
}

void CPlayer_IncomingInviteMutualFriendList::InternalSwap(CPlayer_IncomingInviteMutualFriendList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mutual_friend_account_ids_.InternalSwap(&other->_impl_.mutual_friend_account_ids_);
  swap(_impl_.steamid_, other->_impl_.steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_IncomingInviteMutualFriendList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[1]);
}

// ===================================================================

class CPlayer_GetMutualFriendsForIncomingInvites_Response::_Internal {
 public:
};

CPlayer_GetMutualFriendsForIncomingInvites_Response::CPlayer_GetMutualFriendsForIncomingInvites_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetMutualFriendsForIncomingInvites_Response)
}
CPlayer_GetMutualFriendsForIncomingInvites_Response::CPlayer_GetMutualFriendsForIncomingInvites_Response(const CPlayer_GetMutualFriendsForIncomingInvites_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_GetMutualFriendsForIncomingInvites_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.incoming_invite_mutual_friends_lists_){from._impl_.incoming_invite_mutual_friends_lists_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetMutualFriendsForIncomingInvites_Response)
}

inline void CPlayer_GetMutualFriendsForIncomingInvites_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.incoming_invite_mutual_friends_lists_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CPlayer_GetMutualFriendsForIncomingInvites_Response::~CPlayer_GetMutualFriendsForIncomingInvites_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetMutualFriendsForIncomingInvites_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_GetMutualFriendsForIncomingInvites_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.incoming_invite_mutual_friends_lists_.~RepeatedPtrField();
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetMutualFriendsForIncomingInvites_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.incoming_invite_mutual_friends_lists_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetMutualFriendsForIncomingInvites_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_incoming_invite_mutual_friends_lists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetMutualFriendsForIncomingInvites_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetMutualFriendsForIncomingInvites_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_incoming_invite_mutual_friends_lists_size()); i < n; i++) {
    const auto& repfield = this->_internal_incoming_invite_mutual_friends_lists(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetMutualFriendsForIncomingInvites_Response)
  return target;
}

size_t CPlayer_GetMutualFriendsForIncomingInvites_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetMutualFriendsForIncomingInvites_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists = 1;
  total_size += 1UL * this->_internal_incoming_invite_mutual_friends_lists_size();
  for (const auto& msg : this->_impl_.incoming_invite_mutual_friends_lists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetMutualFriendsForIncomingInvites_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_GetMutualFriendsForIncomingInvites_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetMutualFriendsForIncomingInvites_Response::GetClassData() const { return &_class_data_; }


void CPlayer_GetMutualFriendsForIncomingInvites_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_GetMutualFriendsForIncomingInvites_Response*>(&to_msg);
  auto& from = static_cast<const CPlayer_GetMutualFriendsForIncomingInvites_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetMutualFriendsForIncomingInvites_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.incoming_invite_mutual_friends_lists_.MergeFrom(from._impl_.incoming_invite_mutual_friends_lists_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::CopyFrom(const CPlayer_GetMutualFriendsForIncomingInvites_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetMutualFriendsForIncomingInvites_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetMutualFriendsForIncomingInvites_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::InternalSwap(CPlayer_GetMutualFriendsForIncomingInvites_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.incoming_invite_mutual_friends_lists_.InternalSwap(&other->_impl_.incoming_invite_mutual_friends_lists_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetMutualFriendsForIncomingInvites_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[2]);
}

// ===================================================================

class CPlayer_GetFriendsGameplayInfo_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetFriendsGameplayInfo_Request>()._impl_._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetFriendsGameplayInfo_Request::CPlayer_GetFriendsGameplayInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetFriendsGameplayInfo_Request)
}
CPlayer_GetFriendsGameplayInfo_Request::CPlayer_GetFriendsGameplayInfo_Request(const CPlayer_GetFriendsGameplayInfo_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_GetFriendsGameplayInfo_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.appid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.appid_ = from._impl_.appid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetFriendsGameplayInfo_Request)
}

inline void CPlayer_GetFriendsGameplayInfo_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.appid_){0u}
  };
}

CPlayer_GetFriendsGameplayInfo_Request::~CPlayer_GetFriendsGameplayInfo_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetFriendsGameplayInfo_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_GetFriendsGameplayInfo_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetFriendsGameplayInfo_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_GetFriendsGameplayInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetFriendsGameplayInfo_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.appid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetFriendsGameplayInfo_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetFriendsGameplayInfo_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetFriendsGameplayInfo_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetFriendsGameplayInfo_Request)
  return target;
}

size_t CPlayer_GetFriendsGameplayInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetFriendsGameplayInfo_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetFriendsGameplayInfo_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_GetFriendsGameplayInfo_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetFriendsGameplayInfo_Request::GetClassData() const { return &_class_data_; }


void CPlayer_GetFriendsGameplayInfo_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_GetFriendsGameplayInfo_Request*>(&to_msg);
  auto& from = static_cast<const CPlayer_GetFriendsGameplayInfo_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetFriendsGameplayInfo_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _this->_internal_set_appid(from._internal_appid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetFriendsGameplayInfo_Request::CopyFrom(const CPlayer_GetFriendsGameplayInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetFriendsGameplayInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetFriendsGameplayInfo_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetFriendsGameplayInfo_Request::InternalSwap(CPlayer_GetFriendsGameplayInfo_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.appid_, other->_impl_.appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetFriendsGameplayInfo_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[3]);
}

// ===================================================================

class CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minutes_played(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minutes_played_forever(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
}
CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo(const CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.minutes_played_){}
    , decltype(_impl_.minutes_played_forever_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.minutes_played_forever_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.minutes_played_forever_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
}

inline void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.minutes_played_){0u}
    , decltype(_impl_.minutes_played_forever_){0u}
  };
}

CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::~CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo() {
  // @@protoc_insertion_point(destructor:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.minutes_played_forever_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.minutes_played_forever_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 minutes_played = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_minutes_played(&has_bits);
          _impl_.minutes_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 minutes_played_forever = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_minutes_played_forever(&has_bits);
          _impl_.minutes_played_forever_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 minutes_played = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minutes_played(), target);
  }

  // optional uint32 minutes_played_forever = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_minutes_played_forever(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
  return target;
}

size_t CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 minutes_played = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minutes_played());
    }

    // optional uint32 minutes_played_forever = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minutes_played_forever());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::GetClassData() const { return &_class_data_; }


void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo*>(&to_msg);
  auto& from = static_cast<const CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.minutes_played_ = from._impl_.minutes_played_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.minutes_played_forever_ = from._impl_.minutes_played_forever_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::CopyFrom(const CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::IsInitialized() const {
  return true;
}

void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::InternalSwap(CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo, _impl_.minutes_played_forever_)
      + sizeof(CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::_impl_.minutes_played_forever_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[4]);
}

// ===================================================================

class CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minutes_played(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minutes_played_forever(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_in_wishlist(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_owned(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
}
CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo(const CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.minutes_played_){}
    , decltype(_impl_.minutes_played_forever_){}
    , decltype(_impl_.in_wishlist_){}
    , decltype(_impl_.owned_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.owned_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.owned_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
}

inline void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.minutes_played_){0u}
    , decltype(_impl_.minutes_played_forever_){0u}
    , decltype(_impl_.in_wishlist_){false}
    , decltype(_impl_.owned_){false}
  };
}

CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::~CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo() {
  // @@protoc_insertion_point(destructor:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.owned_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.owned_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 minutes_played = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_minutes_played(&has_bits);
          _impl_.minutes_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 minutes_played_forever = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_minutes_played_forever(&has_bits);
          _impl_.minutes_played_forever_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool in_wishlist = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_in_wishlist(&has_bits);
          _impl_.in_wishlist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool owned = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_owned(&has_bits);
          _impl_.owned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 minutes_played = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minutes_played(), target);
  }

  // optional uint32 minutes_played_forever = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_minutes_played_forever(), target);
  }

  // optional bool in_wishlist = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_in_wishlist(), target);
  }

  // optional bool owned = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_owned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
  return target;
}

size_t CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 minutes_played = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minutes_played());
    }

    // optional uint32 minutes_played_forever = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minutes_played_forever());
    }

    // optional bool in_wishlist = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool owned = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::GetClassData() const { return &_class_data_; }


void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo*>(&to_msg);
  auto& from = static_cast<const CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.minutes_played_ = from._impl_.minutes_played_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.minutes_played_forever_ = from._impl_.minutes_played_forever_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.in_wishlist_ = from._impl_.in_wishlist_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.owned_ = from._impl_.owned_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::CopyFrom(const CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::IsInitialized() const {
  return true;
}

void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::InternalSwap(CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, _impl_.owned_)
      + sizeof(CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_impl_.owned_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[5]);
}

// ===================================================================

class CPlayer_GetFriendsGameplayInfo_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetFriendsGameplayInfo_Response>()._impl_._has_bits_);
  static const ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& your_info(const CPlayer_GetFriendsGameplayInfo_Response* msg);
  static void set_has_your_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo&
CPlayer_GetFriendsGameplayInfo_Response::_Internal::your_info(const CPlayer_GetFriendsGameplayInfo_Response* msg) {
  return *msg->_impl_.your_info_;
}
CPlayer_GetFriendsGameplayInfo_Response::CPlayer_GetFriendsGameplayInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetFriendsGameplayInfo_Response)
}
CPlayer_GetFriendsGameplayInfo_Response::CPlayer_GetFriendsGameplayInfo_Response(const CPlayer_GetFriendsGameplayInfo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_GetFriendsGameplayInfo_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.in_game_){from._impl_.in_game_}
    , decltype(_impl_.played_recently_){from._impl_.played_recently_}
    , decltype(_impl_.played_ever_){from._impl_.played_ever_}
    , decltype(_impl_.owns_){from._impl_.owns_}
    , decltype(_impl_.in_wishlist_){from._impl_.in_wishlist_}
    , decltype(_impl_.your_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_your_info()) {
    _this->_impl_.your_info_ = new ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo(*from._impl_.your_info_);
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetFriendsGameplayInfo_Response)
}

inline void CPlayer_GetFriendsGameplayInfo_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.in_game_){arena}
    , decltype(_impl_.played_recently_){arena}
    , decltype(_impl_.played_ever_){arena}
    , decltype(_impl_.owns_){arena}
    , decltype(_impl_.in_wishlist_){arena}
    , decltype(_impl_.your_info_){nullptr}
  };
}

CPlayer_GetFriendsGameplayInfo_Response::~CPlayer_GetFriendsGameplayInfo_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetFriendsGameplayInfo_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_GetFriendsGameplayInfo_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.in_game_.~RepeatedPtrField();
  _impl_.played_recently_.~RepeatedPtrField();
  _impl_.played_ever_.~RepeatedPtrField();
  _impl_.owns_.~RepeatedPtrField();
  _impl_.in_wishlist_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.your_info_;
}

void CPlayer_GetFriendsGameplayInfo_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_GetFriendsGameplayInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetFriendsGameplayInfo_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.in_game_.Clear();
  _impl_.played_recently_.Clear();
  _impl_.played_ever_.Clear();
  _impl_.owns_.Clear();
  _impl_.in_wishlist_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.your_info_ != nullptr);
    _impl_.your_info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetFriendsGameplayInfo_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo your_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_your_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_game = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_in_game(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_recently = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_played_recently(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_ever = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_played_ever(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo owns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_wishlist = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_in_wishlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetFriendsGameplayInfo_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetFriendsGameplayInfo_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo your_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::your_info(this),
        _Internal::your_info(this).GetCachedSize(), target, stream);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_game = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_in_game_size()); i < n; i++) {
    const auto& repfield = this->_internal_in_game(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_recently = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_played_recently_size()); i < n; i++) {
    const auto& repfield = this->_internal_played_recently(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_ever = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_played_ever_size()); i < n; i++) {
    const auto& repfield = this->_internal_played_ever(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo owns = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_owns_size()); i < n; i++) {
    const auto& repfield = this->_internal_owns(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_wishlist = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_in_wishlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_in_wishlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetFriendsGameplayInfo_Response)
  return target;
}

size_t CPlayer_GetFriendsGameplayInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetFriendsGameplayInfo_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_game = 2;
  total_size += 1UL * this->_internal_in_game_size();
  for (const auto& msg : this->_impl_.in_game_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_recently = 3;
  total_size += 1UL * this->_internal_played_recently_size();
  for (const auto& msg : this->_impl_.played_recently_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_ever = 4;
  total_size += 1UL * this->_internal_played_ever_size();
  for (const auto& msg : this->_impl_.played_ever_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo owns = 5;
  total_size += 1UL * this->_internal_owns_size();
  for (const auto& msg : this->_impl_.owns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_wishlist = 6;
  total_size += 1UL * this->_internal_in_wishlist_size();
  for (const auto& msg : this->_impl_.in_wishlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo your_info = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.your_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetFriendsGameplayInfo_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_GetFriendsGameplayInfo_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetFriendsGameplayInfo_Response::GetClassData() const { return &_class_data_; }


void CPlayer_GetFriendsGameplayInfo_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_GetFriendsGameplayInfo_Response*>(&to_msg);
  auto& from = static_cast<const CPlayer_GetFriendsGameplayInfo_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetFriendsGameplayInfo_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.in_game_.MergeFrom(from._impl_.in_game_);
  _this->_impl_.played_recently_.MergeFrom(from._impl_.played_recently_);
  _this->_impl_.played_ever_.MergeFrom(from._impl_.played_ever_);
  _this->_impl_.owns_.MergeFrom(from._impl_.owns_);
  _this->_impl_.in_wishlist_.MergeFrom(from._impl_.in_wishlist_);
  if (from._internal_has_your_info()) {
    _this->_internal_mutable_your_info()->::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::MergeFrom(
        from._internal_your_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetFriendsGameplayInfo_Response::CopyFrom(const CPlayer_GetFriendsGameplayInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetFriendsGameplayInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetFriendsGameplayInfo_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetFriendsGameplayInfo_Response::InternalSwap(CPlayer_GetFriendsGameplayInfo_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.in_game_.InternalSwap(&other->_impl_.in_game_);
  _impl_.played_recently_.InternalSwap(&other->_impl_.played_recently_);
  _impl_.played_ever_.InternalSwap(&other->_impl_.played_ever_);
  _impl_.owns_.InternalSwap(&other->_impl_.owns_);
  _impl_.in_wishlist_.InternalSwap(&other->_impl_.in_wishlist_);
  swap(_impl_.your_info_, other->_impl_.your_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetFriendsGameplayInfo_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[6]);
}

// ===================================================================

class CPlayer_GetGameBadgeLevels_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetGameBadgeLevels_Request>()._impl_._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetGameBadgeLevels_Request::CPlayer_GetGameBadgeLevels_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetGameBadgeLevels_Request)
}
CPlayer_GetGameBadgeLevels_Request::CPlayer_GetGameBadgeLevels_Request(const CPlayer_GetGameBadgeLevels_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_GetGameBadgeLevels_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.appid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.appid_ = from._impl_.appid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetGameBadgeLevels_Request)
}

inline void CPlayer_GetGameBadgeLevels_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.appid_){0u}
  };
}

CPlayer_GetGameBadgeLevels_Request::~CPlayer_GetGameBadgeLevels_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetGameBadgeLevels_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_GetGameBadgeLevels_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetGameBadgeLevels_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_GetGameBadgeLevels_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetGameBadgeLevels_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.appid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetGameBadgeLevels_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetGameBadgeLevels_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetGameBadgeLevels_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetGameBadgeLevels_Request)
  return target;
}

size_t CPlayer_GetGameBadgeLevels_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetGameBadgeLevels_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetGameBadgeLevels_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_GetGameBadgeLevels_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetGameBadgeLevels_Request::GetClassData() const { return &_class_data_; }


void CPlayer_GetGameBadgeLevels_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_GetGameBadgeLevels_Request*>(&to_msg);
  auto& from = static_cast<const CPlayer_GetGameBadgeLevels_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetGameBadgeLevels_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _this->_internal_set_appid(from._internal_appid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetGameBadgeLevels_Request::CopyFrom(const CPlayer_GetGameBadgeLevels_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetGameBadgeLevels_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetGameBadgeLevels_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetGameBadgeLevels_Request::InternalSwap(CPlayer_GetGameBadgeLevels_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.appid_, other->_impl_.appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetGameBadgeLevels_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[7]);
}

// ===================================================================

class CPlayer_GetGameBadgeLevels_Response_Badge::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetGameBadgeLevels_Response_Badge>()._impl_._has_bits_);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_series(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_border_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPlayer_GetGameBadgeLevels_Response_Badge::CPlayer_GetGameBadgeLevels_Response_Badge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetGameBadgeLevels_Response.Badge)
}
CPlayer_GetGameBadgeLevels_Response_Badge::CPlayer_GetGameBadgeLevels_Response_Badge(const CPlayer_GetGameBadgeLevels_Response_Badge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_GetGameBadgeLevels_Response_Badge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.level_){}
    , decltype(_impl_.series_){}
    , decltype(_impl_.border_color_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.level_, &from._impl_.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.border_color_) -
    reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.border_color_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetGameBadgeLevels_Response.Badge)
}

inline void CPlayer_GetGameBadgeLevels_Response_Badge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.series_){0}
    , decltype(_impl_.border_color_){0u}
  };
}

CPlayer_GetGameBadgeLevels_Response_Badge::~CPlayer_GetGameBadgeLevels_Response_Badge() {
  // @@protoc_insertion_point(destructor:CPlayer_GetGameBadgeLevels_Response.Badge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_GetGameBadgeLevels_Response_Badge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetGameBadgeLevels_Response_Badge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_GetGameBadgeLevels_Response_Badge::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetGameBadgeLevels_Response.Badge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.border_color_) -
        reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.border_color_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetGameBadgeLevels_Response_Badge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 series = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_series(&has_bits);
          _impl_.series_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 border_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_border_color(&has_bits);
          _impl_.border_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetGameBadgeLevels_Response_Badge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetGameBadgeLevels_Response.Badge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  // optional int32 series = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_series(), target);
  }

  // optional uint32 border_color = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_border_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetGameBadgeLevels_Response.Badge)
  return target;
}

size_t CPlayer_GetGameBadgeLevels_Response_Badge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetGameBadgeLevels_Response.Badge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 level = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
    }

    // optional int32 series = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_series());
    }

    // optional uint32 border_color = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_border_color());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetGameBadgeLevels_Response_Badge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_GetGameBadgeLevels_Response_Badge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetGameBadgeLevels_Response_Badge::GetClassData() const { return &_class_data_; }


void CPlayer_GetGameBadgeLevels_Response_Badge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_GetGameBadgeLevels_Response_Badge*>(&to_msg);
  auto& from = static_cast<const CPlayer_GetGameBadgeLevels_Response_Badge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetGameBadgeLevels_Response.Badge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.series_ = from._impl_.series_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.border_color_ = from._impl_.border_color_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetGameBadgeLevels_Response_Badge::CopyFrom(const CPlayer_GetGameBadgeLevels_Response_Badge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetGameBadgeLevels_Response.Badge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetGameBadgeLevels_Response_Badge::IsInitialized() const {
  return true;
}

void CPlayer_GetGameBadgeLevels_Response_Badge::InternalSwap(CPlayer_GetGameBadgeLevels_Response_Badge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetGameBadgeLevels_Response_Badge, _impl_.border_color_)
      + sizeof(CPlayer_GetGameBadgeLevels_Response_Badge::_impl_.border_color_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetGameBadgeLevels_Response_Badge, _impl_.level_)>(
          reinterpret_cast<char*>(&_impl_.level_),
          reinterpret_cast<char*>(&other->_impl_.level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetGameBadgeLevels_Response_Badge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[8]);
}

// ===================================================================

class CPlayer_GetGameBadgeLevels_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetGameBadgeLevels_Response>()._impl_._has_bits_);
  static void set_has_player_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetGameBadgeLevels_Response::CPlayer_GetGameBadgeLevels_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetGameBadgeLevels_Response)
}
CPlayer_GetGameBadgeLevels_Response::CPlayer_GetGameBadgeLevels_Response(const CPlayer_GetGameBadgeLevels_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_GetGameBadgeLevels_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.badges_){from._impl_.badges_}
    , decltype(_impl_.player_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.player_level_ = from._impl_.player_level_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetGameBadgeLevels_Response)
}

inline void CPlayer_GetGameBadgeLevels_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.badges_){arena}
    , decltype(_impl_.player_level_){0u}
  };
}

CPlayer_GetGameBadgeLevels_Response::~CPlayer_GetGameBadgeLevels_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetGameBadgeLevels_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_GetGameBadgeLevels_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.badges_.~RepeatedPtrField();
}

void CPlayer_GetGameBadgeLevels_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_GetGameBadgeLevels_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetGameBadgeLevels_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.badges_.Clear();
  _impl_.player_level_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetGameBadgeLevels_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 player_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_level(&has_bits);
          _impl_.player_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_badges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetGameBadgeLevels_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetGameBadgeLevels_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 player_level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_level(), target);
  }

  // repeated .CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_badges_size()); i < n; i++) {
    const auto& repfield = this->_internal_badges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetGameBadgeLevels_Response)
  return target;
}

size_t CPlayer_GetGameBadgeLevels_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetGameBadgeLevels_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
  total_size += 1UL * this->_internal_badges_size();
  for (const auto& msg : this->_impl_.badges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 player_level = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetGameBadgeLevels_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_GetGameBadgeLevels_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetGameBadgeLevels_Response::GetClassData() const { return &_class_data_; }


void CPlayer_GetGameBadgeLevels_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_GetGameBadgeLevels_Response*>(&to_msg);
  auto& from = static_cast<const CPlayer_GetGameBadgeLevels_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetGameBadgeLevels_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.badges_.MergeFrom(from._impl_.badges_);
  if (from._internal_has_player_level()) {
    _this->_internal_set_player_level(from._internal_player_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetGameBadgeLevels_Response::CopyFrom(const CPlayer_GetGameBadgeLevels_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetGameBadgeLevels_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetGameBadgeLevels_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetGameBadgeLevels_Response::InternalSwap(CPlayer_GetGameBadgeLevels_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.badges_.InternalSwap(&other->_impl_.badges_);
  swap(_impl_.player_level_, other->_impl_.player_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetGameBadgeLevels_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[9]);
}

// ===================================================================

class CPlayer_GetLastPlayedTimes_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetLastPlayedTimes_Request>()._impl_._has_bits_);
  static void set_has_min_last_played(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetLastPlayedTimes_Request::CPlayer_GetLastPlayedTimes_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetLastPlayedTimes_Request)
}
CPlayer_GetLastPlayedTimes_Request::CPlayer_GetLastPlayedTimes_Request(const CPlayer_GetLastPlayedTimes_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_GetLastPlayedTimes_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_last_played_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.min_last_played_ = from._impl_.min_last_played_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetLastPlayedTimes_Request)
}

inline void CPlayer_GetLastPlayedTimes_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_last_played_){0u}
  };
}

CPlayer_GetLastPlayedTimes_Request::~CPlayer_GetLastPlayedTimes_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetLastPlayedTimes_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_GetLastPlayedTimes_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetLastPlayedTimes_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_GetLastPlayedTimes_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetLastPlayedTimes_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.min_last_played_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetLastPlayedTimes_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 min_last_played = 1 [(.description) = "The most recent last-played time the client already knows about"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_min_last_played(&has_bits);
          _impl_.min_last_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetLastPlayedTimes_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetLastPlayedTimes_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 min_last_played = 1 [(.description) = "The most recent last-played time the client already knows about"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_min_last_played(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetLastPlayedTimes_Request)
  return target;
}

size_t CPlayer_GetLastPlayedTimes_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetLastPlayedTimes_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 min_last_played = 1 [(.description) = "The most recent last-played time the client already knows about"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min_last_played());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetLastPlayedTimes_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_GetLastPlayedTimes_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetLastPlayedTimes_Request::GetClassData() const { return &_class_data_; }


void CPlayer_GetLastPlayedTimes_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_GetLastPlayedTimes_Request*>(&to_msg);
  auto& from = static_cast<const CPlayer_GetLastPlayedTimes_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetLastPlayedTimes_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_min_last_played()) {
    _this->_internal_set_min_last_played(from._internal_min_last_played());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetLastPlayedTimes_Request::CopyFrom(const CPlayer_GetLastPlayedTimes_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetLastPlayedTimes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetLastPlayedTimes_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetLastPlayedTimes_Request::InternalSwap(CPlayer_GetLastPlayedTimes_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.min_last_played_, other->_impl_.min_last_played_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetLastPlayedTimes_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[10]);
}

// ===================================================================

class CPlayer_GetLastPlayedTimes_Response_Game::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetLastPlayedTimes_Response_Game>()._impl_._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_playtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_playtime_2weeks(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_playtime_forever(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_first_playtime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CPlayer_GetLastPlayedTimes_Response_Game::CPlayer_GetLastPlayedTimes_Response_Game(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetLastPlayedTimes_Response.Game)
}
CPlayer_GetLastPlayedTimes_Response_Game::CPlayer_GetLastPlayedTimes_Response_Game(const CPlayer_GetLastPlayedTimes_Response_Game& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_GetLastPlayedTimes_Response_Game* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.last_playtime_){}
    , decltype(_impl_.playtime_2weeks_){}
    , decltype(_impl_.playtime_forever_){}
    , decltype(_impl_.first_playtime_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.appid_, &from._impl_.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.first_playtime_) -
    reinterpret_cast<char*>(&_impl_.appid_)) + sizeof(_impl_.first_playtime_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetLastPlayedTimes_Response.Game)
}

inline void CPlayer_GetLastPlayedTimes_Response_Game::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.appid_){0}
    , decltype(_impl_.last_playtime_){0u}
    , decltype(_impl_.playtime_2weeks_){0}
    , decltype(_impl_.playtime_forever_){0}
    , decltype(_impl_.first_playtime_){0u}
  };
}

CPlayer_GetLastPlayedTimes_Response_Game::~CPlayer_GetLastPlayedTimes_Response_Game() {
  // @@protoc_insertion_point(destructor:CPlayer_GetLastPlayedTimes_Response.Game)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_GetLastPlayedTimes_Response_Game::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetLastPlayedTimes_Response_Game::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_GetLastPlayedTimes_Response_Game::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetLastPlayedTimes_Response.Game)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.first_playtime_) -
        reinterpret_cast<char*>(&_impl_.appid_)) + sizeof(_impl_.first_playtime_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetLastPlayedTimes_Response_Game::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_playtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_last_playtime(&has_bits);
          _impl_.last_playtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 playtime_2weeks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_playtime_2weeks(&has_bits);
          _impl_.playtime_2weeks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 playtime_forever = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_playtime_forever(&has_bits);
          _impl_.playtime_forever_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 first_playtime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_first_playtime(&has_bits);
          _impl_.first_playtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetLastPlayedTimes_Response_Game::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetLastPlayedTimes_Response.Game)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 last_playtime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_last_playtime(), target);
  }

  // optional int32 playtime_2weeks = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_playtime_2weeks(), target);
  }

  // optional int32 playtime_forever = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_playtime_forever(), target);
  }

  // optional uint32 first_playtime = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_first_playtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetLastPlayedTimes_Response.Game)
  return target;
}

size_t CPlayer_GetLastPlayedTimes_Response_Game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetLastPlayedTimes_Response.Game)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 last_playtime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_playtime());
    }

    // optional int32 playtime_2weeks = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playtime_2weeks());
    }

    // optional int32 playtime_forever = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playtime_forever());
    }

    // optional uint32 first_playtime = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_first_playtime());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetLastPlayedTimes_Response_Game::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_GetLastPlayedTimes_Response_Game::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetLastPlayedTimes_Response_Game::GetClassData() const { return &_class_data_; }


void CPlayer_GetLastPlayedTimes_Response_Game::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_GetLastPlayedTimes_Response_Game*>(&to_msg);
  auto& from = static_cast<const CPlayer_GetLastPlayedTimes_Response_Game&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetLastPlayedTimes_Response.Game)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.last_playtime_ = from._impl_.last_playtime_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.playtime_2weeks_ = from._impl_.playtime_2weeks_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.playtime_forever_ = from._impl_.playtime_forever_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.first_playtime_ = from._impl_.first_playtime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetLastPlayedTimes_Response_Game::CopyFrom(const CPlayer_GetLastPlayedTimes_Response_Game& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetLastPlayedTimes_Response.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetLastPlayedTimes_Response_Game::IsInitialized() const {
  return true;
}

void CPlayer_GetLastPlayedTimes_Response_Game::InternalSwap(CPlayer_GetLastPlayedTimes_Response_Game* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetLastPlayedTimes_Response_Game, _impl_.first_playtime_)
      + sizeof(CPlayer_GetLastPlayedTimes_Response_Game::_impl_.first_playtime_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetLastPlayedTimes_Response_Game, _impl_.appid_)>(
          reinterpret_cast<char*>(&_impl_.appid_),
          reinterpret_cast<char*>(&other->_impl_.appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetLastPlayedTimes_Response_Game::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[11]);
}

// ===================================================================

class CPlayer_GetLastPlayedTimes_Response::_Internal {
 public:
};

CPlayer_GetLastPlayedTimes_Response::CPlayer_GetLastPlayedTimes_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetLastPlayedTimes_Response)
}
CPlayer_GetLastPlayedTimes_Response::CPlayer_GetLastPlayedTimes_Response(const CPlayer_GetLastPlayedTimes_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_GetLastPlayedTimes_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.games_){from._impl_.games_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetLastPlayedTimes_Response)
}

inline void CPlayer_GetLastPlayedTimes_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.games_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CPlayer_GetLastPlayedTimes_Response::~CPlayer_GetLastPlayedTimes_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetLastPlayedTimes_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_GetLastPlayedTimes_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.games_.~RepeatedPtrField();
}

void CPlayer_GetLastPlayedTimes_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_GetLastPlayedTimes_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetLastPlayedTimes_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.games_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetLastPlayedTimes_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CPlayer_GetLastPlayedTimes_Response.Game games = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_games(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetLastPlayedTimes_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetLastPlayedTimes_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_games_size()); i < n; i++) {
    const auto& repfield = this->_internal_games(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetLastPlayedTimes_Response)
  return target;
}

size_t CPlayer_GetLastPlayedTimes_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetLastPlayedTimes_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  total_size += 1UL * this->_internal_games_size();
  for (const auto& msg : this->_impl_.games_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetLastPlayedTimes_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_GetLastPlayedTimes_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetLastPlayedTimes_Response::GetClassData() const { return &_class_data_; }


void CPlayer_GetLastPlayedTimes_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_GetLastPlayedTimes_Response*>(&to_msg);
  auto& from = static_cast<const CPlayer_GetLastPlayedTimes_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetLastPlayedTimes_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.games_.MergeFrom(from._impl_.games_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetLastPlayedTimes_Response::CopyFrom(const CPlayer_GetLastPlayedTimes_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetLastPlayedTimes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetLastPlayedTimes_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetLastPlayedTimes_Response::InternalSwap(CPlayer_GetLastPlayedTimes_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.games_.InternalSwap(&other->_impl_.games_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetLastPlayedTimes_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[12]);
}

// ===================================================================

class CPlayer_AcceptSSA_Request::_Internal {
 public:
};

CPlayer_AcceptSSA_Request::CPlayer_AcceptSSA_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_AcceptSSA_Request)
}
CPlayer_AcceptSSA_Request::CPlayer_AcceptSSA_Request(const CPlayer_AcceptSSA_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CPlayer_AcceptSSA_Request* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_AcceptSSA_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_AcceptSSA_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_AcceptSSA_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_AcceptSSA_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[13]);
}

// ===================================================================

class CPlayer_AcceptSSA_Response::_Internal {
 public:
};

CPlayer_AcceptSSA_Response::CPlayer_AcceptSSA_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_AcceptSSA_Response)
}
CPlayer_AcceptSSA_Response::CPlayer_AcceptSSA_Response(const CPlayer_AcceptSSA_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CPlayer_AcceptSSA_Response* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_AcceptSSA_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_AcceptSSA_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_AcceptSSA_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_AcceptSSA_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[14]);
}

// ===================================================================

class CPlayer_GetNicknameList_Request::_Internal {
 public:
};

CPlayer_GetNicknameList_Request::CPlayer_GetNicknameList_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetNicknameList_Request)
}
CPlayer_GetNicknameList_Request::CPlayer_GetNicknameList_Request(const CPlayer_GetNicknameList_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CPlayer_GetNicknameList_Request* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetNicknameList_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetNicknameList_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetNicknameList_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetNicknameList_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[15]);
}

// ===================================================================

class CPlayer_GetNicknameList_Response_PlayerNickname::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetNicknameList_Response_PlayerNickname>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetNicknameList_Response_PlayerNickname::CPlayer_GetNicknameList_Response_PlayerNickname(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetNicknameList_Response.PlayerNickname)
}
CPlayer_GetNicknameList_Response_PlayerNickname::CPlayer_GetNicknameList_Response_PlayerNickname(const CPlayer_GetNicknameList_Response_PlayerNickname& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_GetNicknameList_Response_PlayerNickname* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.accountid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nickname()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.accountid_ = from._impl_.accountid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetNicknameList_Response.PlayerNickname)
}

inline void CPlayer_GetNicknameList_Response_PlayerNickname::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.accountid_){0u}
  };
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CPlayer_GetNicknameList_Response_PlayerNickname::~CPlayer_GetNicknameList_Response_PlayerNickname() {
  // @@protoc_insertion_point(destructor:CPlayer_GetNicknameList_Response.PlayerNickname)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_GetNicknameList_Response_PlayerNickname::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nickname_.Destroy();
}

void CPlayer_GetNicknameList_Response_PlayerNickname::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_GetNicknameList_Response_PlayerNickname::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetNicknameList_Response.PlayerNickname)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.nickname_.ClearNonDefaultToEmpty();
  }
  _impl_.accountid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetNicknameList_Response_PlayerNickname::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CPlayer_GetNicknameList_Response.PlayerNickname.nickname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetNicknameList_Response_PlayerNickname::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetNicknameList_Response.PlayerNickname)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_accountid(), target);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetNicknameList_Response.PlayerNickname.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetNicknameList_Response.PlayerNickname)
  return target;
}

size_t CPlayer_GetNicknameList_Response_PlayerNickname::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetNicknameList_Response.PlayerNickname)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string nickname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
    }

    // optional fixed32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetNicknameList_Response_PlayerNickname::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_GetNicknameList_Response_PlayerNickname::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetNicknameList_Response_PlayerNickname::GetClassData() const { return &_class_data_; }


void CPlayer_GetNicknameList_Response_PlayerNickname::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_GetNicknameList_Response_PlayerNickname*>(&to_msg);
  auto& from = static_cast<const CPlayer_GetNicknameList_Response_PlayerNickname&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetNicknameList_Response.PlayerNickname)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_nickname(from._internal_nickname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetNicknameList_Response_PlayerNickname::CopyFrom(const CPlayer_GetNicknameList_Response_PlayerNickname& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetNicknameList_Response.PlayerNickname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetNicknameList_Response_PlayerNickname::IsInitialized() const {
  return true;
}

void CPlayer_GetNicknameList_Response_PlayerNickname::InternalSwap(CPlayer_GetNicknameList_Response_PlayerNickname* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  swap(_impl_.accountid_, other->_impl_.accountid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetNicknameList_Response_PlayerNickname::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[16]);
}

// ===================================================================

class CPlayer_GetNicknameList_Response::_Internal {
 public:
};

CPlayer_GetNicknameList_Response::CPlayer_GetNicknameList_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetNicknameList_Response)
}
CPlayer_GetNicknameList_Response::CPlayer_GetNicknameList_Response(const CPlayer_GetNicknameList_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_GetNicknameList_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nicknames_){from._impl_.nicknames_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetNicknameList_Response)
}

inline void CPlayer_GetNicknameList_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nicknames_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CPlayer_GetNicknameList_Response::~CPlayer_GetNicknameList_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetNicknameList_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_GetNicknameList_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nicknames_.~RepeatedPtrField();
}

void CPlayer_GetNicknameList_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_GetNicknameList_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetNicknameList_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nicknames_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetNicknameList_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CPlayer_GetNicknameList_Response.PlayerNickname nicknames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nicknames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetNicknameList_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetNicknameList_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPlayer_GetNicknameList_Response.PlayerNickname nicknames = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nicknames_size()); i < n; i++) {
    const auto& repfield = this->_internal_nicknames(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetNicknameList_Response)
  return target;
}

size_t CPlayer_GetNicknameList_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetNicknameList_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_GetNicknameList_Response.PlayerNickname nicknames = 1;
  total_size += 1UL * this->_internal_nicknames_size();
  for (const auto& msg : this->_impl_.nicknames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetNicknameList_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_GetNicknameList_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetNicknameList_Response::GetClassData() const { return &_class_data_; }


void CPlayer_GetNicknameList_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_GetNicknameList_Response*>(&to_msg);
  auto& from = static_cast<const CPlayer_GetNicknameList_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetNicknameList_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nicknames_.MergeFrom(from._impl_.nicknames_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetNicknameList_Response::CopyFrom(const CPlayer_GetNicknameList_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetNicknameList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetNicknameList_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetNicknameList_Response::InternalSwap(CPlayer_GetNicknameList_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nicknames_.InternalSwap(&other->_impl_.nicknames_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetNicknameList_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[17]);
}

// ===================================================================

class CPlayer_GetPerFriendPreferences_Request::_Internal {
 public:
};

CPlayer_GetPerFriendPreferences_Request::CPlayer_GetPerFriendPreferences_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetPerFriendPreferences_Request)
}
CPlayer_GetPerFriendPreferences_Request::CPlayer_GetPerFriendPreferences_Request(const CPlayer_GetPerFriendPreferences_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CPlayer_GetPerFriendPreferences_Request* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetPerFriendPreferences_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetPerFriendPreferences_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetPerFriendPreferences_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetPerFriendPreferences_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[18]);
}

// ===================================================================

class PerFriendPreferences::_Internal {
 public:
  using HasBits = decltype(std::declval<PerFriendPreferences>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_notifications_showingame(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_notifications_showonline(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_notifications_showmessages(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sounds_showingame(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sounds_showonline(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sounds_showmessages(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_notifications_sendmobile(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

PerFriendPreferences::PerFriendPreferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PerFriendPreferences)
}
PerFriendPreferences::PerFriendPreferences(const PerFriendPreferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PerFriendPreferences* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.notifications_showingame_){}
    , decltype(_impl_.notifications_showonline_){}
    , decltype(_impl_.notifications_showmessages_){}
    , decltype(_impl_.sounds_showingame_){}
    , decltype(_impl_.sounds_showonline_){}
    , decltype(_impl_.sounds_showmessages_){}
    , decltype(_impl_.notifications_sendmobile_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nickname()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.accountid_, &from._impl_.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.notifications_sendmobile_) -
    reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.notifications_sendmobile_));
  // @@protoc_insertion_point(copy_constructor:PerFriendPreferences)
}

inline void PerFriendPreferences::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.accountid_){0u}
    , decltype(_impl_.notifications_showingame_){0}
    , decltype(_impl_.notifications_showonline_){0}
    , decltype(_impl_.notifications_showmessages_){0}
    , decltype(_impl_.sounds_showingame_){0}
    , decltype(_impl_.sounds_showonline_){0}
    , decltype(_impl_.sounds_showmessages_){0}
    , decltype(_impl_.notifications_sendmobile_){0}
  };
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PerFriendPreferences::~PerFriendPreferences() {
  // @@protoc_insertion_point(destructor:PerFriendPreferences)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerFriendPreferences::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nickname_.Destroy();
}

void PerFriendPreferences::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerFriendPreferences::Clear() {
// @@protoc_insertion_point(message_clear_start:PerFriendPreferences)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.nickname_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sounds_showmessages_) -
        reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.sounds_showmessages_));
  }
  _impl_.notifications_sendmobile_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerFriendPreferences::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "PerFriendPreferences.nickname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .ENotificationSetting notifications_showingame = 3 [default = k_ENotificationSettingNotifyUseDefault];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENotificationSetting_IsValid(val))) {
            _internal_set_notifications_showingame(static_cast<::ENotificationSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ENotificationSetting notifications_showonline = 4 [default = k_ENotificationSettingNotifyUseDefault];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENotificationSetting_IsValid(val))) {
            _internal_set_notifications_showonline(static_cast<::ENotificationSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ENotificationSetting notifications_showmessages = 5 [default = k_ENotificationSettingNotifyUseDefault];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENotificationSetting_IsValid(val))) {
            _internal_set_notifications_showmessages(static_cast<::ENotificationSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ENotificationSetting sounds_showingame = 6 [default = k_ENotificationSettingNotifyUseDefault];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENotificationSetting_IsValid(val))) {
            _internal_set_sounds_showingame(static_cast<::ENotificationSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ENotificationSetting sounds_showonline = 7 [default = k_ENotificationSettingNotifyUseDefault];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENotificationSetting_IsValid(val))) {
            _internal_set_sounds_showonline(static_cast<::ENotificationSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ENotificationSetting sounds_showmessages = 8 [default = k_ENotificationSettingNotifyUseDefault];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENotificationSetting_IsValid(val))) {
            _internal_set_sounds_showmessages(static_cast<::ENotificationSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ENotificationSetting notifications_sendmobile = 9 [default = k_ENotificationSettingNotifyUseDefault];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENotificationSetting_IsValid(val))) {
            _internal_set_notifications_sendmobile(static_cast<::ENotificationSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerFriendPreferences::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PerFriendPreferences)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_accountid(), target);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PerFriendPreferences.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // optional .ENotificationSetting notifications_showingame = 3 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_notifications_showingame(), target);
  }

  // optional .ENotificationSetting notifications_showonline = 4 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_notifications_showonline(), target);
  }

  // optional .ENotificationSetting notifications_showmessages = 5 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_notifications_showmessages(), target);
  }

  // optional .ENotificationSetting sounds_showingame = 6 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_sounds_showingame(), target);
  }

  // optional .ENotificationSetting sounds_showonline = 7 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_sounds_showonline(), target);
  }

  // optional .ENotificationSetting sounds_showmessages = 8 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_sounds_showmessages(), target);
  }

  // optional .ENotificationSetting notifications_sendmobile = 9 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_notifications_sendmobile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PerFriendPreferences)
  return target;
}

size_t PerFriendPreferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PerFriendPreferences)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string nickname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
    }

    // optional fixed32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional .ENotificationSetting notifications_showingame = 3 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_notifications_showingame());
    }

    // optional .ENotificationSetting notifications_showonline = 4 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_notifications_showonline());
    }

    // optional .ENotificationSetting notifications_showmessages = 5 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_notifications_showmessages());
    }

    // optional .ENotificationSetting sounds_showingame = 6 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_sounds_showingame());
    }

    // optional .ENotificationSetting sounds_showonline = 7 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_sounds_showonline());
    }

    // optional .ENotificationSetting sounds_showmessages = 8 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_sounds_showmessages());
    }

  }
  // optional .ENotificationSetting notifications_sendmobile = 9 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_notifications_sendmobile());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerFriendPreferences::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PerFriendPreferences::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerFriendPreferences::GetClassData() const { return &_class_data_; }


void PerFriendPreferences::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PerFriendPreferences*>(&to_msg);
  auto& from = static_cast<const PerFriendPreferences&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PerFriendPreferences)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_nickname(from._internal_nickname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.notifications_showingame_ = from._impl_.notifications_showingame_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.notifications_showonline_ = from._impl_.notifications_showonline_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.notifications_showmessages_ = from._impl_.notifications_showmessages_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.sounds_showingame_ = from._impl_.sounds_showingame_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.sounds_showonline_ = from._impl_.sounds_showonline_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.sounds_showmessages_ = from._impl_.sounds_showmessages_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_notifications_sendmobile(from._internal_notifications_sendmobile());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerFriendPreferences::CopyFrom(const PerFriendPreferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PerFriendPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerFriendPreferences::IsInitialized() const {
  return true;
}

void PerFriendPreferences::InternalSwap(PerFriendPreferences* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerFriendPreferences, _impl_.notifications_sendmobile_)
      + sizeof(PerFriendPreferences::_impl_.notifications_sendmobile_)
      - PROTOBUF_FIELD_OFFSET(PerFriendPreferences, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerFriendPreferences::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[19]);
}

// ===================================================================

class CPlayer_GetPerFriendPreferences_Response::_Internal {
 public:
};

CPlayer_GetPerFriendPreferences_Response::CPlayer_GetPerFriendPreferences_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetPerFriendPreferences_Response)
}
CPlayer_GetPerFriendPreferences_Response::CPlayer_GetPerFriendPreferences_Response(const CPlayer_GetPerFriendPreferences_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_GetPerFriendPreferences_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.preferences_){from._impl_.preferences_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetPerFriendPreferences_Response)
}

inline void CPlayer_GetPerFriendPreferences_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.preferences_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CPlayer_GetPerFriendPreferences_Response::~CPlayer_GetPerFriendPreferences_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetPerFriendPreferences_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_GetPerFriendPreferences_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.preferences_.~RepeatedPtrField();
}

void CPlayer_GetPerFriendPreferences_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_GetPerFriendPreferences_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetPerFriendPreferences_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.preferences_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetPerFriendPreferences_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PerFriendPreferences preferences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_preferences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetPerFriendPreferences_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetPerFriendPreferences_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PerFriendPreferences preferences = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_preferences_size()); i < n; i++) {
    const auto& repfield = this->_internal_preferences(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetPerFriendPreferences_Response)
  return target;
}

size_t CPlayer_GetPerFriendPreferences_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetPerFriendPreferences_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PerFriendPreferences preferences = 1;
  total_size += 1UL * this->_internal_preferences_size();
  for (const auto& msg : this->_impl_.preferences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetPerFriendPreferences_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_GetPerFriendPreferences_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetPerFriendPreferences_Response::GetClassData() const { return &_class_data_; }


void CPlayer_GetPerFriendPreferences_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_GetPerFriendPreferences_Response*>(&to_msg);
  auto& from = static_cast<const CPlayer_GetPerFriendPreferences_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetPerFriendPreferences_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.preferences_.MergeFrom(from._impl_.preferences_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetPerFriendPreferences_Response::CopyFrom(const CPlayer_GetPerFriendPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetPerFriendPreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetPerFriendPreferences_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetPerFriendPreferences_Response::InternalSwap(CPlayer_GetPerFriendPreferences_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.preferences_.InternalSwap(&other->_impl_.preferences_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetPerFriendPreferences_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[20]);
}

// ===================================================================

class CPlayer_SetPerFriendPreferences_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_SetPerFriendPreferences_Request>()._impl_._has_bits_);
  static const ::PerFriendPreferences& preferences(const CPlayer_SetPerFriendPreferences_Request* msg);
  static void set_has_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PerFriendPreferences&
CPlayer_SetPerFriendPreferences_Request::_Internal::preferences(const CPlayer_SetPerFriendPreferences_Request* msg) {
  return *msg->_impl_.preferences_;
}
CPlayer_SetPerFriendPreferences_Request::CPlayer_SetPerFriendPreferences_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetPerFriendPreferences_Request)
}
CPlayer_SetPerFriendPreferences_Request::CPlayer_SetPerFriendPreferences_Request(const CPlayer_SetPerFriendPreferences_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_SetPerFriendPreferences_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.preferences_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preferences()) {
    _this->_impl_.preferences_ = new ::PerFriendPreferences(*from._impl_.preferences_);
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetPerFriendPreferences_Request)
}

inline void CPlayer_SetPerFriendPreferences_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.preferences_){nullptr}
  };
}

CPlayer_SetPerFriendPreferences_Request::~CPlayer_SetPerFriendPreferences_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_SetPerFriendPreferences_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_SetPerFriendPreferences_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.preferences_;
}

void CPlayer_SetPerFriendPreferences_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_SetPerFriendPreferences_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_SetPerFriendPreferences_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.preferences_ != nullptr);
    _impl_.preferences_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_SetPerFriendPreferences_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .PerFriendPreferences preferences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preferences(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_SetPerFriendPreferences_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_SetPerFriendPreferences_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .PerFriendPreferences preferences = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::preferences(this),
        _Internal::preferences(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_SetPerFriendPreferences_Request)
  return target;
}

size_t CPlayer_SetPerFriendPreferences_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_SetPerFriendPreferences_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PerFriendPreferences preferences = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.preferences_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetPerFriendPreferences_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_SetPerFriendPreferences_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetPerFriendPreferences_Request::GetClassData() const { return &_class_data_; }


void CPlayer_SetPerFriendPreferences_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_SetPerFriendPreferences_Request*>(&to_msg);
  auto& from = static_cast<const CPlayer_SetPerFriendPreferences_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_SetPerFriendPreferences_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_preferences()) {
    _this->_internal_mutable_preferences()->::PerFriendPreferences::MergeFrom(
        from._internal_preferences());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_SetPerFriendPreferences_Request::CopyFrom(const CPlayer_SetPerFriendPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_SetPerFriendPreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_SetPerFriendPreferences_Request::IsInitialized() const {
  return true;
}

void CPlayer_SetPerFriendPreferences_Request::InternalSwap(CPlayer_SetPerFriendPreferences_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.preferences_, other->_impl_.preferences_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetPerFriendPreferences_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[21]);
}

// ===================================================================

class CPlayer_SetPerFriendPreferences_Response::_Internal {
 public:
};

CPlayer_SetPerFriendPreferences_Response::CPlayer_SetPerFriendPreferences_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetPerFriendPreferences_Response)
}
CPlayer_SetPerFriendPreferences_Response::CPlayer_SetPerFriendPreferences_Response(const CPlayer_SetPerFriendPreferences_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CPlayer_SetPerFriendPreferences_Response* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetPerFriendPreferences_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetPerFriendPreferences_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetPerFriendPreferences_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetPerFriendPreferences_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[22]);
}

// ===================================================================

class CPlayer_AddFriend_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_AddFriend_Request>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_AddFriend_Request::CPlayer_AddFriend_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_AddFriend_Request)
}
CPlayer_AddFriend_Request::CPlayer_AddFriend_Request(const CPlayer_AddFriend_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_AddFriend_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.steamid_ = from._impl_.steamid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_AddFriend_Request)
}

inline void CPlayer_AddFriend_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
  };
}

CPlayer_AddFriend_Request::~CPlayer_AddFriend_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_AddFriend_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_AddFriend_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_AddFriend_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_AddFriend_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_AddFriend_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_AddFriend_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.description) = "Steam ID of user to whom to send a friend invite."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_AddFriend_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_AddFriend_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "Steam ID of user to whom to send a friend invite."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_AddFriend_Request)
  return target;
}

size_t CPlayer_AddFriend_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_AddFriend_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1 [(.description) = "Steam ID of user to whom to send a friend invite."];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_AddFriend_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_AddFriend_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_AddFriend_Request::GetClassData() const { return &_class_data_; }


void CPlayer_AddFriend_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_AddFriend_Request*>(&to_msg);
  auto& from = static_cast<const CPlayer_AddFriend_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_AddFriend_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _this->_internal_set_steamid(from._internal_steamid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_AddFriend_Request::CopyFrom(const CPlayer_AddFriend_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_AddFriend_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_AddFriend_Request::IsInitialized() const {
  return true;
}

void CPlayer_AddFriend_Request::InternalSwap(CPlayer_AddFriend_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.steamid_, other->_impl_.steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_AddFriend_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[23]);
}

// ===================================================================

class CPlayer_AddFriend_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_AddFriend_Response>()._impl_._has_bits_);
  static void set_has_invite_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_friend_relationship(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPlayer_AddFriend_Response::CPlayer_AddFriend_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_AddFriend_Response)
}
CPlayer_AddFriend_Response::CPlayer_AddFriend_Response(const CPlayer_AddFriend_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_AddFriend_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.invite_sent_){}
    , decltype(_impl_.friend_relationship_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.invite_sent_, &from._impl_.invite_sent_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.friend_relationship_) -
    reinterpret_cast<char*>(&_impl_.invite_sent_)) + sizeof(_impl_.friend_relationship_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_AddFriend_Response)
}

inline void CPlayer_AddFriend_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.invite_sent_){false}
    , decltype(_impl_.friend_relationship_){0u}
  };
}

CPlayer_AddFriend_Response::~CPlayer_AddFriend_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_AddFriend_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_AddFriend_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_AddFriend_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_AddFriend_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_AddFriend_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.invite_sent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.friend_relationship_) -
        reinterpret_cast<char*>(&_impl_.invite_sent_)) + sizeof(_impl_.friend_relationship_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_AddFriend_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool invite_sent = 1 [(.description) = "True if the operation was successful, false otherwise."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_invite_sent(&has_bits);
          _impl_.invite_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 friend_relationship = 2 [(.description) = "the resulting relationship.  Depending on state, may move directly to friends rather than invite sent"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_friend_relationship(&has_bits);
          _impl_.friend_relationship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_AddFriend_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_AddFriend_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool invite_sent = 1 [(.description) = "True if the operation was successful, false otherwise."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_invite_sent(), target);
  }

  // optional uint32 friend_relationship = 2 [(.description) = "the resulting relationship.  Depending on state, may move directly to friends rather than invite sent"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_friend_relationship(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_AddFriend_Response)
  return target;
}

size_t CPlayer_AddFriend_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_AddFriend_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool invite_sent = 1 [(.description) = "True if the operation was successful, false otherwise."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 friend_relationship = 2 [(.description) = "the resulting relationship.  Depending on state, may move directly to friends rather than invite sent"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_friend_relationship());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_AddFriend_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_AddFriend_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_AddFriend_Response::GetClassData() const { return &_class_data_; }


void CPlayer_AddFriend_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_AddFriend_Response*>(&to_msg);
  auto& from = static_cast<const CPlayer_AddFriend_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_AddFriend_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.invite_sent_ = from._impl_.invite_sent_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.friend_relationship_ = from._impl_.friend_relationship_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_AddFriend_Response::CopyFrom(const CPlayer_AddFriend_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_AddFriend_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_AddFriend_Response::IsInitialized() const {
  return true;
}

void CPlayer_AddFriend_Response::InternalSwap(CPlayer_AddFriend_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_AddFriend_Response, _impl_.friend_relationship_)
      + sizeof(CPlayer_AddFriend_Response::_impl_.friend_relationship_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_AddFriend_Response, _impl_.invite_sent_)>(
          reinterpret_cast<char*>(&_impl_.invite_sent_),
          reinterpret_cast<char*>(&other->_impl_.invite_sent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_AddFriend_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[24]);
}

// ===================================================================

class CPlayer_RemoveFriend_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_RemoveFriend_Request>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_RemoveFriend_Request::CPlayer_RemoveFriend_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_RemoveFriend_Request)
}
CPlayer_RemoveFriend_Request::CPlayer_RemoveFriend_Request(const CPlayer_RemoveFriend_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_RemoveFriend_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.steamid_ = from._impl_.steamid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_RemoveFriend_Request)
}

inline void CPlayer_RemoveFriend_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
  };
}

CPlayer_RemoveFriend_Request::~CPlayer_RemoveFriend_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_RemoveFriend_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_RemoveFriend_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_RemoveFriend_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_RemoveFriend_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_RemoveFriend_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_RemoveFriend_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.description) = "Steam ID of friend to remove."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_RemoveFriend_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_RemoveFriend_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "Steam ID of friend to remove."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_RemoveFriend_Request)
  return target;
}

size_t CPlayer_RemoveFriend_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_RemoveFriend_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1 [(.description) = "Steam ID of friend to remove."];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_RemoveFriend_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_RemoveFriend_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_RemoveFriend_Request::GetClassData() const { return &_class_data_; }


void CPlayer_RemoveFriend_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_RemoveFriend_Request*>(&to_msg);
  auto& from = static_cast<const CPlayer_RemoveFriend_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_RemoveFriend_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _this->_internal_set_steamid(from._internal_steamid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_RemoveFriend_Request::CopyFrom(const CPlayer_RemoveFriend_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_RemoveFriend_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_RemoveFriend_Request::IsInitialized() const {
  return true;
}

void CPlayer_RemoveFriend_Request::InternalSwap(CPlayer_RemoveFriend_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.steamid_, other->_impl_.steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_RemoveFriend_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[25]);
}

// ===================================================================

class CPlayer_RemoveFriend_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_RemoveFriend_Response>()._impl_._has_bits_);
  static void set_has_friend_relationship(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_RemoveFriend_Response::CPlayer_RemoveFriend_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_RemoveFriend_Response)
}
CPlayer_RemoveFriend_Response::CPlayer_RemoveFriend_Response(const CPlayer_RemoveFriend_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_RemoveFriend_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.friend_relationship_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.friend_relationship_ = from._impl_.friend_relationship_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_RemoveFriend_Response)
}

inline void CPlayer_RemoveFriend_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.friend_relationship_){0u}
  };
}

CPlayer_RemoveFriend_Response::~CPlayer_RemoveFriend_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_RemoveFriend_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_RemoveFriend_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_RemoveFriend_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_RemoveFriend_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_RemoveFriend_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.friend_relationship_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_RemoveFriend_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 friend_relationship = 1 [(.description) = "the resulting relationship"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_friend_relationship(&has_bits);
          _impl_.friend_relationship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_RemoveFriend_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_RemoveFriend_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 friend_relationship = 1 [(.description) = "the resulting relationship"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_friend_relationship(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_RemoveFriend_Response)
  return target;
}

size_t CPlayer_RemoveFriend_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_RemoveFriend_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 friend_relationship = 1 [(.description) = "the resulting relationship"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_friend_relationship());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_RemoveFriend_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_RemoveFriend_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_RemoveFriend_Response::GetClassData() const { return &_class_data_; }


void CPlayer_RemoveFriend_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_RemoveFriend_Response*>(&to_msg);
  auto& from = static_cast<const CPlayer_RemoveFriend_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_RemoveFriend_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_friend_relationship()) {
    _this->_internal_set_friend_relationship(from._internal_friend_relationship());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_RemoveFriend_Response::CopyFrom(const CPlayer_RemoveFriend_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_RemoveFriend_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_RemoveFriend_Response::IsInitialized() const {
  return true;
}

void CPlayer_RemoveFriend_Response::InternalSwap(CPlayer_RemoveFriend_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.friend_relationship_, other->_impl_.friend_relationship_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_RemoveFriend_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[26]);
}

// ===================================================================

class CPlayer_IgnoreFriend_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_IgnoreFriend_Request>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unignore(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPlayer_IgnoreFriend_Request::CPlayer_IgnoreFriend_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_IgnoreFriend_Request)
}
CPlayer_IgnoreFriend_Request::CPlayer_IgnoreFriend_Request(const CPlayer_IgnoreFriend_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_IgnoreFriend_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.unignore_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unignore_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.unignore_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_IgnoreFriend_Request)
}

inline void CPlayer_IgnoreFriend_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.unignore_){false}
  };
}

CPlayer_IgnoreFriend_Request::~CPlayer_IgnoreFriend_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_IgnoreFriend_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_IgnoreFriend_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_IgnoreFriend_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_IgnoreFriend_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_IgnoreFriend_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.unignore_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.unignore_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_IgnoreFriend_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool unignore = 2 [(.description) = "If set, remove from ignore/block list instead of adding "];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_unignore(&has_bits);
          _impl_.unignore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_IgnoreFriend_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_IgnoreFriend_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional bool unignore = 2 [(.description) = "If set, remove from ignore/block list instead of adding "];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_unignore(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_IgnoreFriend_Request)
  return target;
}

size_t CPlayer_IgnoreFriend_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_IgnoreFriend_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool unignore = 2 [(.description) = "If set, remove from ignore/block list instead of adding "];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_IgnoreFriend_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_IgnoreFriend_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_IgnoreFriend_Request::GetClassData() const { return &_class_data_; }


void CPlayer_IgnoreFriend_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_IgnoreFriend_Request*>(&to_msg);
  auto& from = static_cast<const CPlayer_IgnoreFriend_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_IgnoreFriend_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unignore_ = from._impl_.unignore_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_IgnoreFriend_Request::CopyFrom(const CPlayer_IgnoreFriend_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_IgnoreFriend_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_IgnoreFriend_Request::IsInitialized() const {
  return true;
}

void CPlayer_IgnoreFriend_Request::InternalSwap(CPlayer_IgnoreFriend_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_IgnoreFriend_Request, _impl_.unignore_)
      + sizeof(CPlayer_IgnoreFriend_Request::_impl_.unignore_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_IgnoreFriend_Request, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_IgnoreFriend_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[27]);
}

// ===================================================================

class CPlayer_IgnoreFriend_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_IgnoreFriend_Response>()._impl_._has_bits_);
  static void set_has_friend_relationship(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_IgnoreFriend_Response::CPlayer_IgnoreFriend_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_IgnoreFriend_Response)
}
CPlayer_IgnoreFriend_Response::CPlayer_IgnoreFriend_Response(const CPlayer_IgnoreFriend_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_IgnoreFriend_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.friend_relationship_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.friend_relationship_ = from._impl_.friend_relationship_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_IgnoreFriend_Response)
}

inline void CPlayer_IgnoreFriend_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.friend_relationship_){0u}
  };
}

CPlayer_IgnoreFriend_Response::~CPlayer_IgnoreFriend_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_IgnoreFriend_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_IgnoreFriend_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_IgnoreFriend_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_IgnoreFriend_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_IgnoreFriend_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.friend_relationship_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_IgnoreFriend_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 friend_relationship = 1 [(.description) = "the resulting relationship"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_friend_relationship(&has_bits);
          _impl_.friend_relationship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_IgnoreFriend_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_IgnoreFriend_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 friend_relationship = 1 [(.description) = "the resulting relationship"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_friend_relationship(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_IgnoreFriend_Response)
  return target;
}

size_t CPlayer_IgnoreFriend_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_IgnoreFriend_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 friend_relationship = 1 [(.description) = "the resulting relationship"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_friend_relationship());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_IgnoreFriend_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_IgnoreFriend_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_IgnoreFriend_Response::GetClassData() const { return &_class_data_; }


void CPlayer_IgnoreFriend_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_IgnoreFriend_Response*>(&to_msg);
  auto& from = static_cast<const CPlayer_IgnoreFriend_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_IgnoreFriend_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_friend_relationship()) {
    _this->_internal_set_friend_relationship(from._internal_friend_relationship());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_IgnoreFriend_Response::CopyFrom(const CPlayer_IgnoreFriend_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_IgnoreFriend_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_IgnoreFriend_Response::IsInitialized() const {
  return true;
}

void CPlayer_IgnoreFriend_Response::InternalSwap(CPlayer_IgnoreFriend_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.friend_relationship_, other->_impl_.friend_relationship_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_IgnoreFriend_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[28]);
}

// ===================================================================

class CPlayer_GetCommunityPreferences_Request::_Internal {
 public:
};

CPlayer_GetCommunityPreferences_Request::CPlayer_GetCommunityPreferences_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetCommunityPreferences_Request)
}
CPlayer_GetCommunityPreferences_Request::CPlayer_GetCommunityPreferences_Request(const CPlayer_GetCommunityPreferences_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CPlayer_GetCommunityPreferences_Request* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetCommunityPreferences_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetCommunityPreferences_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetCommunityPreferences_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetCommunityPreferences_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[29]);
}

// ===================================================================

class CPlayer_CommunityPreferences::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_CommunityPreferences>()._impl_._has_bits_);
  static void set_has_hide_adult_content_violence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hide_adult_content_sex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_parenthesize_nicknames(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_CommunityPreferences::CPlayer_CommunityPreferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_CommunityPreferences)
}
CPlayer_CommunityPreferences::CPlayer_CommunityPreferences(const CPlayer_CommunityPreferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_CommunityPreferences* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_updated_){}
    , decltype(_impl_.parenthesize_nicknames_){}
    , decltype(_impl_.hide_adult_content_violence_){}
    , decltype(_impl_.hide_adult_content_sex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_updated_, &from._impl_.timestamp_updated_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hide_adult_content_sex_) -
    reinterpret_cast<char*>(&_impl_.timestamp_updated_)) + sizeof(_impl_.hide_adult_content_sex_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_CommunityPreferences)
}

inline void CPlayer_CommunityPreferences::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_updated_){0u}
    , decltype(_impl_.parenthesize_nicknames_){false}
    , decltype(_impl_.hide_adult_content_violence_){true}
    , decltype(_impl_.hide_adult_content_sex_){true}
  };
}

CPlayer_CommunityPreferences::~CPlayer_CommunityPreferences() {
  // @@protoc_insertion_point(destructor:CPlayer_CommunityPreferences)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_CommunityPreferences::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_CommunityPreferences::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_CommunityPreferences::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_CommunityPreferences)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.timestamp_updated_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.parenthesize_nicknames_) -
        reinterpret_cast<char*>(&_impl_.timestamp_updated_)) + sizeof(_impl_.parenthesize_nicknames_));
    _impl_.hide_adult_content_violence_ = true;
    _impl_.hide_adult_content_sex_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_CommunityPreferences::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool hide_adult_content_violence = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hide_adult_content_violence(&has_bits);
          _impl_.hide_adult_content_violence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hide_adult_content_sex = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hide_adult_content_sex(&has_bits);
          _impl_.hide_adult_content_sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp_updated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_timestamp_updated(&has_bits);
          _impl_.timestamp_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool parenthesize_nicknames = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_parenthesize_nicknames(&has_bits);
          _impl_.parenthesize_nicknames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_CommunityPreferences::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_CommunityPreferences)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool hide_adult_content_violence = 1 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_hide_adult_content_violence(), target);
  }

  // optional bool hide_adult_content_sex = 2 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_hide_adult_content_sex(), target);
  }

  // optional uint32 timestamp_updated = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp_updated(), target);
  }

  // optional bool parenthesize_nicknames = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_parenthesize_nicknames(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_CommunityPreferences)
  return target;
}

size_t CPlayer_CommunityPreferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_CommunityPreferences)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 timestamp_updated = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp_updated());
    }

    // optional bool parenthesize_nicknames = 4 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool hide_adult_content_violence = 1 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool hide_adult_content_sex = 2 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_CommunityPreferences::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_CommunityPreferences::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_CommunityPreferences::GetClassData() const { return &_class_data_; }


void CPlayer_CommunityPreferences::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_CommunityPreferences*>(&to_msg);
  auto& from = static_cast<const CPlayer_CommunityPreferences&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_CommunityPreferences)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_updated_ = from._impl_.timestamp_updated_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.parenthesize_nicknames_ = from._impl_.parenthesize_nicknames_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hide_adult_content_violence_ = from._impl_.hide_adult_content_violence_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.hide_adult_content_sex_ = from._impl_.hide_adult_content_sex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_CommunityPreferences::CopyFrom(const CPlayer_CommunityPreferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_CommunityPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_CommunityPreferences::IsInitialized() const {
  return true;
}

void CPlayer_CommunityPreferences::InternalSwap(CPlayer_CommunityPreferences* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_CommunityPreferences, _impl_.parenthesize_nicknames_)
      + sizeof(CPlayer_CommunityPreferences::_impl_.parenthesize_nicknames_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_CommunityPreferences, _impl_.timestamp_updated_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_updated_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_updated_));
  swap(_impl_.hide_adult_content_violence_, other->_impl_.hide_adult_content_violence_);
  swap(_impl_.hide_adult_content_sex_, other->_impl_.hide_adult_content_sex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_CommunityPreferences::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[30]);
}

// ===================================================================

class CPlayer_GetCommunityPreferences_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetCommunityPreferences_Response>()._impl_._has_bits_);
  static const ::CPlayer_CommunityPreferences& preferences(const CPlayer_GetCommunityPreferences_Response* msg);
  static void set_has_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CPlayer_CommunityPreferences&
CPlayer_GetCommunityPreferences_Response::_Internal::preferences(const CPlayer_GetCommunityPreferences_Response* msg) {
  return *msg->_impl_.preferences_;
}
CPlayer_GetCommunityPreferences_Response::CPlayer_GetCommunityPreferences_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetCommunityPreferences_Response)
}
CPlayer_GetCommunityPreferences_Response::CPlayer_GetCommunityPreferences_Response(const CPlayer_GetCommunityPreferences_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_GetCommunityPreferences_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.preferences_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preferences()) {
    _this->_impl_.preferences_ = new ::CPlayer_CommunityPreferences(*from._impl_.preferences_);
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetCommunityPreferences_Response)
}

inline void CPlayer_GetCommunityPreferences_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.preferences_){nullptr}
  };
}

CPlayer_GetCommunityPreferences_Response::~CPlayer_GetCommunityPreferences_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetCommunityPreferences_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_GetCommunityPreferences_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.preferences_;
}

void CPlayer_GetCommunityPreferences_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_GetCommunityPreferences_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetCommunityPreferences_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.preferences_ != nullptr);
    _impl_.preferences_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetCommunityPreferences_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CPlayer_CommunityPreferences preferences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preferences(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetCommunityPreferences_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetCommunityPreferences_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CPlayer_CommunityPreferences preferences = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::preferences(this),
        _Internal::preferences(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetCommunityPreferences_Response)
  return target;
}

size_t CPlayer_GetCommunityPreferences_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetCommunityPreferences_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CPlayer_CommunityPreferences preferences = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.preferences_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetCommunityPreferences_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_GetCommunityPreferences_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetCommunityPreferences_Response::GetClassData() const { return &_class_data_; }


void CPlayer_GetCommunityPreferences_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_GetCommunityPreferences_Response*>(&to_msg);
  auto& from = static_cast<const CPlayer_GetCommunityPreferences_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetCommunityPreferences_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_preferences()) {
    _this->_internal_mutable_preferences()->::CPlayer_CommunityPreferences::MergeFrom(
        from._internal_preferences());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetCommunityPreferences_Response::CopyFrom(const CPlayer_GetCommunityPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetCommunityPreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetCommunityPreferences_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetCommunityPreferences_Response::InternalSwap(CPlayer_GetCommunityPreferences_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.preferences_, other->_impl_.preferences_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetCommunityPreferences_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[31]);
}

// ===================================================================

class CPlayer_SetCommunityPreferences_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_SetCommunityPreferences_Request>()._impl_._has_bits_);
  static const ::CPlayer_CommunityPreferences& preferences(const CPlayer_SetCommunityPreferences_Request* msg);
  static void set_has_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CPlayer_CommunityPreferences&
CPlayer_SetCommunityPreferences_Request::_Internal::preferences(const CPlayer_SetCommunityPreferences_Request* msg) {
  return *msg->_impl_.preferences_;
}
CPlayer_SetCommunityPreferences_Request::CPlayer_SetCommunityPreferences_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetCommunityPreferences_Request)
}
CPlayer_SetCommunityPreferences_Request::CPlayer_SetCommunityPreferences_Request(const CPlayer_SetCommunityPreferences_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_SetCommunityPreferences_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.preferences_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preferences()) {
    _this->_impl_.preferences_ = new ::CPlayer_CommunityPreferences(*from._impl_.preferences_);
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetCommunityPreferences_Request)
}

inline void CPlayer_SetCommunityPreferences_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.preferences_){nullptr}
  };
}

CPlayer_SetCommunityPreferences_Request::~CPlayer_SetCommunityPreferences_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_SetCommunityPreferences_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_SetCommunityPreferences_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.preferences_;
}

void CPlayer_SetCommunityPreferences_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_SetCommunityPreferences_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_SetCommunityPreferences_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.preferences_ != nullptr);
    _impl_.preferences_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_SetCommunityPreferences_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CPlayer_CommunityPreferences preferences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preferences(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_SetCommunityPreferences_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_SetCommunityPreferences_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CPlayer_CommunityPreferences preferences = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::preferences(this),
        _Internal::preferences(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_SetCommunityPreferences_Request)
  return target;
}

size_t CPlayer_SetCommunityPreferences_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_SetCommunityPreferences_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CPlayer_CommunityPreferences preferences = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.preferences_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetCommunityPreferences_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_SetCommunityPreferences_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetCommunityPreferences_Request::GetClassData() const { return &_class_data_; }


void CPlayer_SetCommunityPreferences_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_SetCommunityPreferences_Request*>(&to_msg);
  auto& from = static_cast<const CPlayer_SetCommunityPreferences_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_SetCommunityPreferences_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_preferences()) {
    _this->_internal_mutable_preferences()->::CPlayer_CommunityPreferences::MergeFrom(
        from._internal_preferences());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_SetCommunityPreferences_Request::CopyFrom(const CPlayer_SetCommunityPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_SetCommunityPreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_SetCommunityPreferences_Request::IsInitialized() const {
  return true;
}

void CPlayer_SetCommunityPreferences_Request::InternalSwap(CPlayer_SetCommunityPreferences_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.preferences_, other->_impl_.preferences_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetCommunityPreferences_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[32]);
}

// ===================================================================

class CPlayer_SetCommunityPreferences_Response::_Internal {
 public:
};

CPlayer_SetCommunityPreferences_Response::CPlayer_SetCommunityPreferences_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetCommunityPreferences_Response)
}
CPlayer_SetCommunityPreferences_Response::CPlayer_SetCommunityPreferences_Response(const CPlayer_SetCommunityPreferences_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CPlayer_SetCommunityPreferences_Response* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetCommunityPreferences_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetCommunityPreferences_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetCommunityPreferences_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetCommunityPreferences_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[33]);
}

// ===================================================================

class CPlayer_GetNewSteamAnnouncementState_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetNewSteamAnnouncementState_Request>()._impl_._has_bits_);
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetNewSteamAnnouncementState_Request::CPlayer_GetNewSteamAnnouncementState_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetNewSteamAnnouncementState_Request)
}
CPlayer_GetNewSteamAnnouncementState_Request::CPlayer_GetNewSteamAnnouncementState_Request(const CPlayer_GetNewSteamAnnouncementState_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_GetNewSteamAnnouncementState_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.language_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.language_ = from._impl_.language_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetNewSteamAnnouncementState_Request)
}

inline void CPlayer_GetNewSteamAnnouncementState_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.language_){0}
  };
}

CPlayer_GetNewSteamAnnouncementState_Request::~CPlayer_GetNewSteamAnnouncementState_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetNewSteamAnnouncementState_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_GetNewSteamAnnouncementState_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetNewSteamAnnouncementState_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_GetNewSteamAnnouncementState_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetNewSteamAnnouncementState_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.language_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetNewSteamAnnouncementState_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_language(&has_bits);
          _impl_.language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetNewSteamAnnouncementState_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetNewSteamAnnouncementState_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 language = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetNewSteamAnnouncementState_Request)
  return target;
}

size_t CPlayer_GetNewSteamAnnouncementState_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetNewSteamAnnouncementState_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 language = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_language());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetNewSteamAnnouncementState_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_GetNewSteamAnnouncementState_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetNewSteamAnnouncementState_Request::GetClassData() const { return &_class_data_; }


void CPlayer_GetNewSteamAnnouncementState_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_GetNewSteamAnnouncementState_Request*>(&to_msg);
  auto& from = static_cast<const CPlayer_GetNewSteamAnnouncementState_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetNewSteamAnnouncementState_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_language()) {
    _this->_internal_set_language(from._internal_language());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetNewSteamAnnouncementState_Request::CopyFrom(const CPlayer_GetNewSteamAnnouncementState_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetNewSteamAnnouncementState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetNewSteamAnnouncementState_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetNewSteamAnnouncementState_Request::InternalSwap(CPlayer_GetNewSteamAnnouncementState_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.language_, other->_impl_.language_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetNewSteamAnnouncementState_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[34]);
}

// ===================================================================

class CPlayer_GetNewSteamAnnouncementState_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetNewSteamAnnouncementState_Response>()._impl_._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_announcement_headline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_announcement_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_posted(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_announcement_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CPlayer_GetNewSteamAnnouncementState_Response::CPlayer_GetNewSteamAnnouncementState_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetNewSteamAnnouncementState_Response)
}
CPlayer_GetNewSteamAnnouncementState_Response::CPlayer_GetNewSteamAnnouncementState_Response(const CPlayer_GetNewSteamAnnouncementState_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_GetNewSteamAnnouncementState_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.announcement_headline_){}
    , decltype(_impl_.announcement_url_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.time_posted_){}
    , decltype(_impl_.announcement_gid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.announcement_headline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.announcement_headline_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_announcement_headline()) {
    _this->_impl_.announcement_headline_.Set(from._internal_announcement_headline(), 
      _this->GetArenaForAllocation());
  }
  _impl_.announcement_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.announcement_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_announcement_url()) {
    _this->_impl_.announcement_url_.Set(from._internal_announcement_url(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.state_, &from._impl_.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.announcement_gid_) -
    reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.announcement_gid_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetNewSteamAnnouncementState_Response)
}

inline void CPlayer_GetNewSteamAnnouncementState_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.announcement_headline_){}
    , decltype(_impl_.announcement_url_){}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.time_posted_){0u}
    , decltype(_impl_.announcement_gid_){uint64_t{0u}}
  };
  _impl_.announcement_headline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.announcement_headline_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.announcement_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.announcement_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CPlayer_GetNewSteamAnnouncementState_Response::~CPlayer_GetNewSteamAnnouncementState_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetNewSteamAnnouncementState_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_GetNewSteamAnnouncementState_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.announcement_headline_.Destroy();
  _impl_.announcement_url_.Destroy();
}

void CPlayer_GetNewSteamAnnouncementState_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_GetNewSteamAnnouncementState_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetNewSteamAnnouncementState_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.announcement_headline_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.announcement_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.announcement_gid_) -
        reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.announcement_gid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetNewSteamAnnouncementState_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_state(&has_bits);
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string announcement_headline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_announcement_headline();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string announcement_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_announcement_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CPlayer_GetNewSteamAnnouncementState_Response.announcement_url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_posted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_time_posted(&has_bits);
          _impl_.time_posted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 announcement_gid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_announcement_gid(&has_bits);
          _impl_.announcement_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetNewSteamAnnouncementState_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetNewSteamAnnouncementState_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 state = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // optional string announcement_headline = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_announcement_headline().data(), static_cast<int>(this->_internal_announcement_headline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_announcement_headline(), target);
  }

  // optional string announcement_url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_announcement_url().data(), static_cast<int>(this->_internal_announcement_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetNewSteamAnnouncementState_Response.announcement_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_announcement_url(), target);
  }

  // optional uint32 time_posted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_time_posted(), target);
  }

  // optional uint64 announcement_gid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_announcement_gid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetNewSteamAnnouncementState_Response)
  return target;
}

size_t CPlayer_GetNewSteamAnnouncementState_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetNewSteamAnnouncementState_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string announcement_headline = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_announcement_headline());
    }

    // optional string announcement_url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_announcement_url());
    }

    // optional int32 state = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
    }

    // optional uint32 time_posted = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_posted());
    }

    // optional uint64 announcement_gid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_announcement_gid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetNewSteamAnnouncementState_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_GetNewSteamAnnouncementState_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetNewSteamAnnouncementState_Response::GetClassData() const { return &_class_data_; }


void CPlayer_GetNewSteamAnnouncementState_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_GetNewSteamAnnouncementState_Response*>(&to_msg);
  auto& from = static_cast<const CPlayer_GetNewSteamAnnouncementState_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetNewSteamAnnouncementState_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_announcement_headline(from._internal_announcement_headline());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_announcement_url(from._internal_announcement_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.time_posted_ = from._impl_.time_posted_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.announcement_gid_ = from._impl_.announcement_gid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetNewSteamAnnouncementState_Response::CopyFrom(const CPlayer_GetNewSteamAnnouncementState_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetNewSteamAnnouncementState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetNewSteamAnnouncementState_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetNewSteamAnnouncementState_Response::InternalSwap(CPlayer_GetNewSteamAnnouncementState_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.announcement_headline_, lhs_arena,
      &other->_impl_.announcement_headline_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.announcement_url_, lhs_arena,
      &other->_impl_.announcement_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetNewSteamAnnouncementState_Response, _impl_.announcement_gid_)
      + sizeof(CPlayer_GetNewSteamAnnouncementState_Response::_impl_.announcement_gid_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetNewSteamAnnouncementState_Response, _impl_.state_)>(
          reinterpret_cast<char*>(&_impl_.state_),
          reinterpret_cast<char*>(&other->_impl_.state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetNewSteamAnnouncementState_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[35]);
}

// ===================================================================

class CPlayer_UpdateSteamAnnouncementLastRead_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_UpdateSteamAnnouncementLastRead_Request>()._impl_._has_bits_);
  static void set_has_announcement_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_posted(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPlayer_UpdateSteamAnnouncementLastRead_Request::CPlayer_UpdateSteamAnnouncementLastRead_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPlayer_UpdateSteamAnnouncementLastRead_Request)
}
CPlayer_UpdateSteamAnnouncementLastRead_Request::CPlayer_UpdateSteamAnnouncementLastRead_Request(const CPlayer_UpdateSteamAnnouncementLastRead_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPlayer_UpdateSteamAnnouncementLastRead_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.announcement_gid_){}
    , decltype(_impl_.time_posted_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.announcement_gid_, &from._impl_.announcement_gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_posted_) -
    reinterpret_cast<char*>(&_impl_.announcement_gid_)) + sizeof(_impl_.time_posted_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_UpdateSteamAnnouncementLastRead_Request)
}

inline void CPlayer_UpdateSteamAnnouncementLastRead_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.announcement_gid_){uint64_t{0u}}
    , decltype(_impl_.time_posted_){0u}
  };
}

CPlayer_UpdateSteamAnnouncementLastRead_Request::~CPlayer_UpdateSteamAnnouncementLastRead_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_UpdateSteamAnnouncementLastRead_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPlayer_UpdateSteamAnnouncementLastRead_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_UpdateSteamAnnouncementLastRead_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.announcement_gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.time_posted_) -
        reinterpret_cast<char*>(&_impl_.announcement_gid_)) + sizeof(_impl_.time_posted_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_UpdateSteamAnnouncementLastRead_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 announcement_gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_announcement_gid(&has_bits);
          _impl_.announcement_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_posted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_posted(&has_bits);
          _impl_.time_posted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_UpdateSteamAnnouncementLastRead_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_UpdateSteamAnnouncementLastRead_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 announcement_gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_announcement_gid(), target);
  }

  // optional uint32 time_posted = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_posted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_UpdateSteamAnnouncementLastRead_Request)
  return target;
}

size_t CPlayer_UpdateSteamAnnouncementLastRead_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_UpdateSteamAnnouncementLastRead_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 announcement_gid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_announcement_gid());
    }

    // optional uint32 time_posted = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_posted());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_UpdateSteamAnnouncementLastRead_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPlayer_UpdateSteamAnnouncementLastRead_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_UpdateSteamAnnouncementLastRead_Request::GetClassData() const { return &_class_data_; }


void CPlayer_UpdateSteamAnnouncementLastRead_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPlayer_UpdateSteamAnnouncementLastRead_Request*>(&to_msg);
  auto& from = static_cast<const CPlayer_UpdateSteamAnnouncementLastRead_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_UpdateSteamAnnouncementLastRead_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.announcement_gid_ = from._impl_.announcement_gid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.time_posted_ = from._impl_.time_posted_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::CopyFrom(const CPlayer_UpdateSteamAnnouncementLastRead_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_UpdateSteamAnnouncementLastRead_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_UpdateSteamAnnouncementLastRead_Request::IsInitialized() const {
  return true;
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::InternalSwap(CPlayer_UpdateSteamAnnouncementLastRead_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_UpdateSteamAnnouncementLastRead_Request, _impl_.time_posted_)
      + sizeof(CPlayer_UpdateSteamAnnouncementLastRead_Request::_impl_.time_posted_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_UpdateSteamAnnouncementLastRead_Request, _impl_.announcement_gid_)>(
          reinterpret_cast<char*>(&_impl_.announcement_gid_),
          reinterpret_cast<char*>(&other->_impl_.announcement_gid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_UpdateSteamAnnouncementLastRead_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[36]);
}

// ===================================================================

class CPlayer_UpdateSteamAnnouncementLastRead_Response::_Internal {
 public:
};

CPlayer_UpdateSteamAnnouncementLastRead_Response::CPlayer_UpdateSteamAnnouncementLastRead_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_UpdateSteamAnnouncementLastRead_Response)
}
CPlayer_UpdateSteamAnnouncementLastRead_Response::CPlayer_UpdateSteamAnnouncementLastRead_Response(const CPlayer_UpdateSteamAnnouncementLastRead_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CPlayer_UpdateSteamAnnouncementLastRead_Response* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_UpdateSteamAnnouncementLastRead_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_UpdateSteamAnnouncementLastRead_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_UpdateSteamAnnouncementLastRead_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_UpdateSteamAnnouncementLastRead_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[37]);
}

// ===================================================================

Player::~Player() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Player::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto);
  return file_level_service_descriptors_steammessages_5fplayer_2esteamworkssdk_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Player::GetDescriptor() {
  return descriptor();
}

void Player::GetMutualFriendsForIncomingInvites(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetMutualFriendsForIncomingInvites_Request*,
                         ::CPlayer_GetMutualFriendsForIncomingInvites_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMutualFriendsForIncomingInvites() not implemented.");
  done->Run();
}

void Player::GetFriendsGameplayInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetFriendsGameplayInfo_Request*,
                         ::CPlayer_GetFriendsGameplayInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFriendsGameplayInfo() not implemented.");
  done->Run();
}

void Player::GetGameBadgeLevels(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetGameBadgeLevels_Request*,
                         ::CPlayer_GetGameBadgeLevels_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetGameBadgeLevels() not implemented.");
  done->Run();
}

void Player::ClientGetLastPlayedTimes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetLastPlayedTimes_Request*,
                         ::CPlayer_GetLastPlayedTimes_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientGetLastPlayedTimes() not implemented.");
  done->Run();
}

void Player::AcceptSSA(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_AcceptSSA_Request*,
                         ::CPlayer_AcceptSSA_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AcceptSSA() not implemented.");
  done->Run();
}

void Player::GetNicknameList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetNicknameList_Request*,
                         ::CPlayer_GetNicknameList_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetNicknameList() not implemented.");
  done->Run();
}

void Player::GetPerFriendPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetPerFriendPreferences_Request*,
                         ::CPlayer_GetPerFriendPreferences_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetPerFriendPreferences() not implemented.");
  done->Run();
}

void Player::SetPerFriendPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_SetPerFriendPreferences_Request*,
                         ::CPlayer_SetPerFriendPreferences_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetPerFriendPreferences() not implemented.");
  done->Run();
}

void Player::AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_AddFriend_Request*,
                         ::CPlayer_AddFriend_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddFriend() not implemented.");
  done->Run();
}

void Player::RemoveFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_RemoveFriend_Request*,
                         ::CPlayer_RemoveFriend_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveFriend() not implemented.");
  done->Run();
}

void Player::IgnoreFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_IgnoreFriend_Request*,
                         ::CPlayer_IgnoreFriend_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method IgnoreFriend() not implemented.");
  done->Run();
}

void Player::GetCommunityPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetCommunityPreferences_Request*,
                         ::CPlayer_GetCommunityPreferences_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetCommunityPreferences() not implemented.");
  done->Run();
}

void Player::SetCommunityPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_SetCommunityPreferences_Request*,
                         ::CPlayer_SetCommunityPreferences_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetCommunityPreferences() not implemented.");
  done->Run();
}

void Player::GetNewSteamAnnouncementState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetNewSteamAnnouncementState_Request*,
                         ::CPlayer_GetNewSteamAnnouncementState_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetNewSteamAnnouncementState() not implemented.");
  done->Run();
}

void Player::UpdateSteamAnnouncementLastRead(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_UpdateSteamAnnouncementLastRead_Request*,
                         ::CPlayer_UpdateSteamAnnouncementLastRead_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateSteamAnnouncementLastRead() not implemented.");
  done->Run();
}

void Player::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fplayer_2esteamworkssdk_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetMutualFriendsForIncomingInvites(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetMutualFriendsForIncomingInvites_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetMutualFriendsForIncomingInvites_Response*>(
                 response),
             done);
      break;
    case 1:
      GetFriendsGameplayInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetFriendsGameplayInfo_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetFriendsGameplayInfo_Response*>(
                 response),
             done);
      break;
    case 2:
      GetGameBadgeLevels(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetGameBadgeLevels_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetGameBadgeLevels_Response*>(
                 response),
             done);
      break;
    case 3:
      ClientGetLastPlayedTimes(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetLastPlayedTimes_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetLastPlayedTimes_Response*>(
                 response),
             done);
      break;
    case 4:
      AcceptSSA(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_AcceptSSA_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_AcceptSSA_Response*>(
                 response),
             done);
      break;
    case 5:
      GetNicknameList(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetNicknameList_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetNicknameList_Response*>(
                 response),
             done);
      break;
    case 6:
      GetPerFriendPreferences(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetPerFriendPreferences_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetPerFriendPreferences_Response*>(
                 response),
             done);
      break;
    case 7:
      SetPerFriendPreferences(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_SetPerFriendPreferences_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_SetPerFriendPreferences_Response*>(
                 response),
             done);
      break;
    case 8:
      AddFriend(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_AddFriend_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_AddFriend_Response*>(
                 response),
             done);
      break;
    case 9:
      RemoveFriend(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_RemoveFriend_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_RemoveFriend_Response*>(
                 response),
             done);
      break;
    case 10:
      IgnoreFriend(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_IgnoreFriend_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_IgnoreFriend_Response*>(
                 response),
             done);
      break;
    case 11:
      GetCommunityPreferences(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetCommunityPreferences_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetCommunityPreferences_Response*>(
                 response),
             done);
      break;
    case 12:
      SetCommunityPreferences(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_SetCommunityPreferences_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_SetCommunityPreferences_Response*>(
                 response),
             done);
      break;
    case 13:
      GetNewSteamAnnouncementState(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetNewSteamAnnouncementState_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetNewSteamAnnouncementState_Response*>(
                 response),
             done);
      break;
    case 14:
      UpdateSteamAnnouncementLastRead(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_UpdateSteamAnnouncementLastRead_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_UpdateSteamAnnouncementLastRead_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Player::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CPlayer_GetMutualFriendsForIncomingInvites_Request::default_instance();
    case 1:
      return ::CPlayer_GetFriendsGameplayInfo_Request::default_instance();
    case 2:
      return ::CPlayer_GetGameBadgeLevels_Request::default_instance();
    case 3:
      return ::CPlayer_GetLastPlayedTimes_Request::default_instance();
    case 4:
      return ::CPlayer_AcceptSSA_Request::default_instance();
    case 5:
      return ::CPlayer_GetNicknameList_Request::default_instance();
    case 6:
      return ::CPlayer_GetPerFriendPreferences_Request::default_instance();
    case 7:
      return ::CPlayer_SetPerFriendPreferences_Request::default_instance();
    case 8:
      return ::CPlayer_AddFriend_Request::default_instance();
    case 9:
      return ::CPlayer_RemoveFriend_Request::default_instance();
    case 10:
      return ::CPlayer_IgnoreFriend_Request::default_instance();
    case 11:
      return ::CPlayer_GetCommunityPreferences_Request::default_instance();
    case 12:
      return ::CPlayer_SetCommunityPreferences_Request::default_instance();
    case 13:
      return ::CPlayer_GetNewSteamAnnouncementState_Request::default_instance();
    case 14:
      return ::CPlayer_UpdateSteamAnnouncementLastRead_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Player::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CPlayer_GetMutualFriendsForIncomingInvites_Response::default_instance();
    case 1:
      return ::CPlayer_GetFriendsGameplayInfo_Response::default_instance();
    case 2:
      return ::CPlayer_GetGameBadgeLevels_Response::default_instance();
    case 3:
      return ::CPlayer_GetLastPlayedTimes_Response::default_instance();
    case 4:
      return ::CPlayer_AcceptSSA_Response::default_instance();
    case 5:
      return ::CPlayer_GetNicknameList_Response::default_instance();
    case 6:
      return ::CPlayer_GetPerFriendPreferences_Response::default_instance();
    case 7:
      return ::CPlayer_SetPerFriendPreferences_Response::default_instance();
    case 8:
      return ::CPlayer_AddFriend_Response::default_instance();
    case 9:
      return ::CPlayer_RemoveFriend_Response::default_instance();
    case 10:
      return ::CPlayer_IgnoreFriend_Response::default_instance();
    case 11:
      return ::CPlayer_GetCommunityPreferences_Response::default_instance();
    case 12:
      return ::CPlayer_SetCommunityPreferences_Response::default_instance();
    case 13:
      return ::CPlayer_GetNewSteamAnnouncementState_Response::default_instance();
    case 14:
      return ::CPlayer_UpdateSteamAnnouncementLastRead_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Player_Stub::Player_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Player_Stub::Player_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Player_Stub::~Player_Stub() {
  if (owns_channel_) delete channel_;
}

void Player_Stub::GetMutualFriendsForIncomingInvites(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetMutualFriendsForIncomingInvites_Request* request,
                              ::CPlayer_GetMutualFriendsForIncomingInvites_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Player_Stub::GetFriendsGameplayInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetFriendsGameplayInfo_Request* request,
                              ::CPlayer_GetFriendsGameplayInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Player_Stub::GetGameBadgeLevels(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetGameBadgeLevels_Request* request,
                              ::CPlayer_GetGameBadgeLevels_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Player_Stub::ClientGetLastPlayedTimes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetLastPlayedTimes_Request* request,
                              ::CPlayer_GetLastPlayedTimes_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Player_Stub::AcceptSSA(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_AcceptSSA_Request* request,
                              ::CPlayer_AcceptSSA_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Player_Stub::GetNicknameList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetNicknameList_Request* request,
                              ::CPlayer_GetNicknameList_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void Player_Stub::GetPerFriendPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetPerFriendPreferences_Request* request,
                              ::CPlayer_GetPerFriendPreferences_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void Player_Stub::SetPerFriendPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_SetPerFriendPreferences_Request* request,
                              ::CPlayer_SetPerFriendPreferences_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void Player_Stub::AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_AddFriend_Request* request,
                              ::CPlayer_AddFriend_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void Player_Stub::RemoveFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_RemoveFriend_Request* request,
                              ::CPlayer_RemoveFriend_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void Player_Stub::IgnoreFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_IgnoreFriend_Request* request,
                              ::CPlayer_IgnoreFriend_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void Player_Stub::GetCommunityPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetCommunityPreferences_Request* request,
                              ::CPlayer_GetCommunityPreferences_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void Player_Stub::SetCommunityPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_SetCommunityPreferences_Request* request,
                              ::CPlayer_SetCommunityPreferences_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void Player_Stub::GetNewSteamAnnouncementState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetNewSteamAnnouncementState_Request* request,
                              ::CPlayer_GetNewSteamAnnouncementState_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void Player_Stub::UpdateSteamAnnouncementLastRead(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_UpdateSteamAnnouncementLastRead_Request* request,
                              ::CPlayer_UpdateSteamAnnouncementLastRead_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CPlayer_GetMutualFriendsForIncomingInvites_Request*
Arena::CreateMaybeMessage< ::CPlayer_GetMutualFriendsForIncomingInvites_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetMutualFriendsForIncomingInvites_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_IncomingInviteMutualFriendList*
Arena::CreateMaybeMessage< ::CPlayer_IncomingInviteMutualFriendList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_IncomingInviteMutualFriendList >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetMutualFriendsForIncomingInvites_Response*
Arena::CreateMaybeMessage< ::CPlayer_GetMutualFriendsForIncomingInvites_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetMutualFriendsForIncomingInvites_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetFriendsGameplayInfo_Request*
Arena::CreateMaybeMessage< ::CPlayer_GetFriendsGameplayInfo_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetFriendsGameplayInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo*
Arena::CreateMaybeMessage< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo*
Arena::CreateMaybeMessage< ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetFriendsGameplayInfo_Response*
Arena::CreateMaybeMessage< ::CPlayer_GetFriendsGameplayInfo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetFriendsGameplayInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetGameBadgeLevels_Request*
Arena::CreateMaybeMessage< ::CPlayer_GetGameBadgeLevels_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetGameBadgeLevels_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetGameBadgeLevels_Response_Badge*
Arena::CreateMaybeMessage< ::CPlayer_GetGameBadgeLevels_Response_Badge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetGameBadgeLevels_Response_Badge >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetGameBadgeLevels_Response*
Arena::CreateMaybeMessage< ::CPlayer_GetGameBadgeLevels_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetGameBadgeLevels_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetLastPlayedTimes_Request*
Arena::CreateMaybeMessage< ::CPlayer_GetLastPlayedTimes_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetLastPlayedTimes_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetLastPlayedTimes_Response_Game*
Arena::CreateMaybeMessage< ::CPlayer_GetLastPlayedTimes_Response_Game >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetLastPlayedTimes_Response_Game >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetLastPlayedTimes_Response*
Arena::CreateMaybeMessage< ::CPlayer_GetLastPlayedTimes_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetLastPlayedTimes_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_AcceptSSA_Request*
Arena::CreateMaybeMessage< ::CPlayer_AcceptSSA_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_AcceptSSA_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_AcceptSSA_Response*
Arena::CreateMaybeMessage< ::CPlayer_AcceptSSA_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_AcceptSSA_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetNicknameList_Request*
Arena::CreateMaybeMessage< ::CPlayer_GetNicknameList_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetNicknameList_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetNicknameList_Response_PlayerNickname*
Arena::CreateMaybeMessage< ::CPlayer_GetNicknameList_Response_PlayerNickname >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetNicknameList_Response_PlayerNickname >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetNicknameList_Response*
Arena::CreateMaybeMessage< ::CPlayer_GetNicknameList_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetNicknameList_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetPerFriendPreferences_Request*
Arena::CreateMaybeMessage< ::CPlayer_GetPerFriendPreferences_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetPerFriendPreferences_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::PerFriendPreferences*
Arena::CreateMaybeMessage< ::PerFriendPreferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PerFriendPreferences >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetPerFriendPreferences_Response*
Arena::CreateMaybeMessage< ::CPlayer_GetPerFriendPreferences_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetPerFriendPreferences_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetPerFriendPreferences_Request*
Arena::CreateMaybeMessage< ::CPlayer_SetPerFriendPreferences_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetPerFriendPreferences_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetPerFriendPreferences_Response*
Arena::CreateMaybeMessage< ::CPlayer_SetPerFriendPreferences_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetPerFriendPreferences_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_AddFriend_Request*
Arena::CreateMaybeMessage< ::CPlayer_AddFriend_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_AddFriend_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_AddFriend_Response*
Arena::CreateMaybeMessage< ::CPlayer_AddFriend_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_AddFriend_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_RemoveFriend_Request*
Arena::CreateMaybeMessage< ::CPlayer_RemoveFriend_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_RemoveFriend_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_RemoveFriend_Response*
Arena::CreateMaybeMessage< ::CPlayer_RemoveFriend_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_RemoveFriend_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_IgnoreFriend_Request*
Arena::CreateMaybeMessage< ::CPlayer_IgnoreFriend_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_IgnoreFriend_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_IgnoreFriend_Response*
Arena::CreateMaybeMessage< ::CPlayer_IgnoreFriend_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_IgnoreFriend_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetCommunityPreferences_Request*
Arena::CreateMaybeMessage< ::CPlayer_GetCommunityPreferences_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetCommunityPreferences_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_CommunityPreferences*
Arena::CreateMaybeMessage< ::CPlayer_CommunityPreferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_CommunityPreferences >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetCommunityPreferences_Response*
Arena::CreateMaybeMessage< ::CPlayer_GetCommunityPreferences_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetCommunityPreferences_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetCommunityPreferences_Request*
Arena::CreateMaybeMessage< ::CPlayer_SetCommunityPreferences_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetCommunityPreferences_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetCommunityPreferences_Response*
Arena::CreateMaybeMessage< ::CPlayer_SetCommunityPreferences_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetCommunityPreferences_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetNewSteamAnnouncementState_Request*
Arena::CreateMaybeMessage< ::CPlayer_GetNewSteamAnnouncementState_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetNewSteamAnnouncementState_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetNewSteamAnnouncementState_Response*
Arena::CreateMaybeMessage< ::CPlayer_GetNewSteamAnnouncementState_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetNewSteamAnnouncementState_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_UpdateSteamAnnouncementLastRead_Request*
Arena::CreateMaybeMessage< ::CPlayer_UpdateSteamAnnouncementLastRead_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_UpdateSteamAnnouncementLastRead_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_UpdateSteamAnnouncementLastRead_Response*
Arena::CreateMaybeMessage< ::CPlayer_UpdateSteamAnnouncementLastRead_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_UpdateSteamAnnouncementLastRead_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
