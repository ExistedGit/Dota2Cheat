// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_watch.proto

#include "dota_gcmessages_client_watch.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CSourceTVGameSmall_Player::CSourceTVGameSmall_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.hero_id_)*/0u} {}
struct CSourceTVGameSmall_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSourceTVGameSmall_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSourceTVGameSmall_PlayerDefaultTypeInternal() {}
  union {
    CSourceTVGameSmall_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSourceTVGameSmall_PlayerDefaultTypeInternal _CSourceTVGameSmall_Player_default_instance_;
PROTOBUF_CONSTEXPR CSourceTVGameSmall::CSourceTVGameSmall(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.team_name_radiant_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_name_dire_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.activate_time_)*/0u
  , /*decltype(_impl_.deactivate_time_)*/0u
  , /*decltype(_impl_.server_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.league_id_)*/0u
  , /*decltype(_impl_.lobby_type_)*/0u
  , /*decltype(_impl_.game_time_)*/0
  , /*decltype(_impl_.delay_)*/0u
  , /*decltype(_impl_.spectators_)*/0u
  , /*decltype(_impl_.game_mode_)*/0u
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.average_mmr_)*/0u
  , /*decltype(_impl_.series_id_)*/0u
  , /*decltype(_impl_.sort_score_)*/0u
  , /*decltype(_impl_.last_update_time_)*/0
  , /*decltype(_impl_.radiant_lead_)*/0
  , /*decltype(_impl_.radiant_score_)*/0u
  , /*decltype(_impl_.dire_score_)*/0u
  , /*decltype(_impl_.building_state_)*/0u
  , /*decltype(_impl_.team_logo_radiant_)*/uint64_t{0u}
  , /*decltype(_impl_.team_logo_dire_)*/uint64_t{0u}
  , /*decltype(_impl_.weekend_tourney_tournament_id_)*/0u
  , /*decltype(_impl_.weekend_tourney_division_)*/0u
  , /*decltype(_impl_.weekend_tourney_skill_level_)*/0u
  , /*decltype(_impl_.weekend_tourney_bracket_round_)*/0u
  , /*decltype(_impl_.team_id_radiant_)*/0u
  , /*decltype(_impl_.team_id_dire_)*/0u
  , /*decltype(_impl_.custom_game_difficulty_)*/0u} {}
struct CSourceTVGameSmallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSourceTVGameSmallDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSourceTVGameSmallDefaultTypeInternal() {}
  union {
    CSourceTVGameSmall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSourceTVGameSmallDefaultTypeInternal _CSourceTVGameSmall_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCFindTopSourceTVGames::CMsgClientToGCFindTopSourceTVGames(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lobby_ids_)*/{}
  , /*decltype(_impl_.search_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.league_id_)*/0u
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.start_game_)*/0u
  , /*decltype(_impl_.game_list_index_)*/0u} {}
struct CMsgClientToGCFindTopSourceTVGamesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCFindTopSourceTVGamesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCFindTopSourceTVGamesDefaultTypeInternal() {}
  union {
    CMsgClientToGCFindTopSourceTVGames _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCFindTopSourceTVGamesDefaultTypeInternal _CMsgClientToGCFindTopSourceTVGames_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientFindTopSourceTVGamesResponse::CMsgGCToClientFindTopSourceTVGamesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.game_list_)*/{}
  , /*decltype(_impl_.search_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bot_game_)*/nullptr
  , /*decltype(_impl_.league_id_)*/0u
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.start_game_)*/0u
  , /*decltype(_impl_.num_games_)*/0u
  , /*decltype(_impl_.game_list_index_)*/0u
  , /*decltype(_impl_.specific_games_)*/false} {}
struct CMsgGCToClientFindTopSourceTVGamesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientFindTopSourceTVGamesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientFindTopSourceTVGamesResponseDefaultTypeInternal() {}
  union {
    CMsgGCToClientFindTopSourceTVGamesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientFindTopSourceTVGamesResponseDefaultTypeInternal _CMsgGCToClientFindTopSourceTVGamesResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientTopWeekendTourneyGames::CMsgGCToClientTopWeekendTourneyGames(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.live_games_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgGCToClientTopWeekendTourneyGamesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientTopWeekendTourneyGamesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientTopWeekendTourneyGamesDefaultTypeInternal() {}
  union {
    CMsgGCToClientTopWeekendTourneyGames _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientTopWeekendTourneyGamesDefaultTypeInternal _CMsgGCToClientTopWeekendTourneyGames_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCTopLeagueMatchesRequest::CMsgClientToGCTopLeagueMatchesRequest(
    ::_pbi::ConstantInitialized) {}
struct CMsgClientToGCTopLeagueMatchesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCTopLeagueMatchesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCTopLeagueMatchesRequestDefaultTypeInternal() {}
  union {
    CMsgClientToGCTopLeagueMatchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCTopLeagueMatchesRequestDefaultTypeInternal _CMsgClientToGCTopLeagueMatchesRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCTopFriendMatchesRequest::CMsgClientToGCTopFriendMatchesRequest(
    ::_pbi::ConstantInitialized) {}
struct CMsgClientToGCTopFriendMatchesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCTopFriendMatchesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCTopFriendMatchesRequestDefaultTypeInternal() {}
  union {
    CMsgClientToGCTopFriendMatchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCTopFriendMatchesRequestDefaultTypeInternal _CMsgClientToGCTopFriendMatchesRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCMatchesMinimalRequest::CMsgClientToGCMatchesMinimalRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.match_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgClientToGCMatchesMinimalRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCMatchesMinimalRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCMatchesMinimalRequestDefaultTypeInternal() {}
  union {
    CMsgClientToGCMatchesMinimalRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCMatchesMinimalRequestDefaultTypeInternal _CMsgClientToGCMatchesMinimalRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCMatchesMinimalResponse::CMsgClientToGCMatchesMinimalResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.matches_)*/{}
  , /*decltype(_impl_.last_match_)*/false} {}
struct CMsgClientToGCMatchesMinimalResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCMatchesMinimalResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCMatchesMinimalResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCMatchesMinimalResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCMatchesMinimalResponseDefaultTypeInternal _CMsgClientToGCMatchesMinimalResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientTopLeagueMatchesResponse::CMsgGCToClientTopLeagueMatchesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.matches_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgGCToClientTopLeagueMatchesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientTopLeagueMatchesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientTopLeagueMatchesResponseDefaultTypeInternal() {}
  union {
    CMsgGCToClientTopLeagueMatchesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientTopLeagueMatchesResponseDefaultTypeInternal _CMsgGCToClientTopLeagueMatchesResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientTopFriendMatchesResponse::CMsgGCToClientTopFriendMatchesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.matches_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgGCToClientTopFriendMatchesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientTopFriendMatchesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientTopFriendMatchesResponseDefaultTypeInternal() {}
  union {
    CMsgGCToClientTopFriendMatchesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientTopFriendMatchesResponseDefaultTypeInternal _CMsgGCToClientTopFriendMatchesResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgSpectateFriendGame::CMsgSpectateFriendGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.live_)*/false} {}
struct CMsgSpectateFriendGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSpectateFriendGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSpectateFriendGameDefaultTypeInternal() {}
  union {
    CMsgSpectateFriendGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSpectateFriendGameDefaultTypeInternal _CMsgSpectateFriendGame_default_instance_;
PROTOBUF_CONSTEXPR CMsgSpectateFriendGameResponse::CMsgSpectateFriendGameResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.server_steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.watch_live_result_)*/0} {}
struct CMsgSpectateFriendGameResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSpectateFriendGameResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSpectateFriendGameResponseDefaultTypeInternal() {}
  union {
    CMsgSpectateFriendGameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSpectateFriendGameResponseDefaultTypeInternal _CMsgSpectateFriendGameResponse_default_instance_;
PROTOBUF_CONSTEXPR CDOTAReplayDownloadInfo_Highlight::CDOTAReplayDownloadInfo_Highlight(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/0u} {}
struct CDOTAReplayDownloadInfo_HighlightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAReplayDownloadInfo_HighlightDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAReplayDownloadInfo_HighlightDefaultTypeInternal() {}
  union {
    CDOTAReplayDownloadInfo_Highlight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAReplayDownloadInfo_HighlightDefaultTypeInternal _CDOTAReplayDownloadInfo_Highlight_default_instance_;
PROTOBUF_CONSTEXPR CDOTAReplayDownloadInfo::CDOTAReplayDownloadInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.match_)*/nullptr
  , /*decltype(_impl_.size_)*/0u
  , /*decltype(_impl_.exists_on_disk_)*/false} {}
struct CDOTAReplayDownloadInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAReplayDownloadInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAReplayDownloadInfoDefaultTypeInternal() {}
  union {
    CDOTAReplayDownloadInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAReplayDownloadInfoDefaultTypeInternal _CDOTAReplayDownloadInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgWatchGame::CMsgWatchGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.regions_)*/{}
  , /*decltype(_impl_.server_steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.watch_server_steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.client_version_)*/0u} {}
struct CMsgWatchGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgWatchGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgWatchGameDefaultTypeInternal() {}
  union {
    CMsgWatchGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgWatchGameDefaultTypeInternal _CMsgWatchGame_default_instance_;
PROTOBUF_CONSTEXPR CMsgCancelWatchGame::CMsgCancelWatchGame(
    ::_pbi::ConstantInitialized) {}
struct CMsgCancelWatchGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgCancelWatchGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgCancelWatchGameDefaultTypeInternal() {}
  union {
    CMsgCancelWatchGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgCancelWatchGameDefaultTypeInternal _CMsgCancelWatchGame_default_instance_;
PROTOBUF_CONSTEXPR CMsgWatchGameResponse::CMsgWatchGameResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.watch_game_result_)*/0
  , /*decltype(_impl_.source_tv_public_addr_)*/0u
  , /*decltype(_impl_.source_tv_private_addr_)*/0u
  , /*decltype(_impl_.source_tv_port_)*/0u
  , /*decltype(_impl_.game_server_steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.watch_server_steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.watch_tv_unique_secret_code_)*/uint64_t{0u}} {}
struct CMsgWatchGameResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgWatchGameResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgWatchGameResponseDefaultTypeInternal() {}
  union {
    CMsgWatchGameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgWatchGameResponseDefaultTypeInternal _CMsgWatchGameResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgPartyLeaderWatchGamePrompt::CMsgPartyLeaderWatchGamePrompt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.game_server_steamid_)*/uint64_t{0u}} {}
struct CMsgPartyLeaderWatchGamePromptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPartyLeaderWatchGamePromptDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPartyLeaderWatchGamePromptDefaultTypeInternal() {}
  union {
    CMsgPartyLeaderWatchGamePrompt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPartyLeaderWatchGamePromptDefaultTypeInternal _CMsgPartyLeaderWatchGamePrompt_default_instance_;
PROTOBUF_CONSTEXPR CDOTABroadcasterInfo::CDOTABroadcasterInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_name_radiant_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_name_dire_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.node_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.live_)*/false
  , /*decltype(_impl_.allow_live_video_)*/false
  , /*decltype(_impl_.series_game_)*/0u
  , /*decltype(_impl_.upcoming_broadcast_timestamp_)*/0u
  , /*decltype(_impl_.node_type_)*/0u} {}
struct CDOTABroadcasterInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTABroadcasterInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTABroadcasterInfoDefaultTypeInternal() {}
  union {
    CDOTABroadcasterInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTABroadcasterInfoDefaultTypeInternal _CDOTABroadcasterInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTASeries_TeamInfo::CMsgDOTASeries_TeamInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_logo_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_.wager_count_)*/0u} {}
struct CMsgDOTASeries_TeamInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTASeries_TeamInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTASeries_TeamInfoDefaultTypeInternal() {}
  union {
    CMsgDOTASeries_TeamInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTASeries_TeamInfoDefaultTypeInternal _CMsgDOTASeries_TeamInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTASeries_LiveGame::CMsgDOTASeries_LiveGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_radiant_)*/nullptr
  , /*decltype(_impl_.team_dire_)*/nullptr
  , /*decltype(_impl_.server_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.team_radiant_score_)*/0u
  , /*decltype(_impl_.team_dire_score_)*/0u} {}
struct CMsgDOTASeries_LiveGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTASeries_LiveGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTASeries_LiveGameDefaultTypeInternal() {}
  union {
    CMsgDOTASeries_LiveGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTASeries_LiveGameDefaultTypeInternal _CMsgDOTASeries_LiveGame_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTASeries::CMsgDOTASeries(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.match_minimal_)*/{}
  , /*decltype(_impl_.team_1_)*/nullptr
  , /*decltype(_impl_.team_2_)*/nullptr
  , /*decltype(_impl_.live_game_)*/nullptr
  , /*decltype(_impl_.series_id_)*/0u
  , /*decltype(_impl_.series_type_)*/0u} {}
struct CMsgDOTASeriesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTASeriesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTASeriesDefaultTypeInternal() {}
  union {
    CMsgDOTASeries _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTASeriesDefaultTypeInternal _CMsgDOTASeries_default_instance_;
static ::_pb::Metadata file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[23];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fwatch_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fclient_5fwatch_2eproto = nullptr;

const uint32_t TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall_Player, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall_Player, _impl_.hero_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.activate_time_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.deactivate_time_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.league_id_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.lobby_type_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.game_time_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.delay_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.spectators_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.game_mode_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.average_mmr_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.series_id_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.team_name_radiant_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.team_name_dire_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.team_logo_radiant_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.team_logo_dire_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.team_id_radiant_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.team_id_dire_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.sort_score_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.last_update_time_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.radiant_lead_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.radiant_score_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.dire_score_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.building_state_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.weekend_tourney_tournament_id_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.weekend_tourney_division_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.weekend_tourney_skill_level_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.weekend_tourney_bracket_round_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _impl_.custom_game_difficulty_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  12,
  14,
  0,
  1,
  21,
  22,
  27,
  28,
  15,
  16,
  17,
  18,
  19,
  ~0u,
  20,
  23,
  24,
  25,
  26,
  29,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopSourceTVGames, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopSourceTVGames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopSourceTVGames, _impl_.search_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopSourceTVGames, _impl_.league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopSourceTVGames, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopSourceTVGames, _impl_.start_game_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopSourceTVGames, _impl_.game_list_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopSourceTVGames, _impl_.lobby_ids_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopSourceTVGamesResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopSourceTVGamesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopSourceTVGamesResponse, _impl_.search_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopSourceTVGamesResponse, _impl_.league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopSourceTVGamesResponse, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopSourceTVGamesResponse, _impl_.start_game_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopSourceTVGamesResponse, _impl_.num_games_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopSourceTVGamesResponse, _impl_.game_list_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopSourceTVGamesResponse, _impl_.game_list_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopSourceTVGamesResponse, _impl_.specific_games_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopSourceTVGamesResponse, _impl_.bot_game_),
  0,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  7,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientTopWeekendTourneyGames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientTopWeekendTourneyGames, _impl_.live_games_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCTopLeagueMatchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCTopFriendMatchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCMatchesMinimalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCMatchesMinimalRequest, _impl_.match_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCMatchesMinimalResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCMatchesMinimalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCMatchesMinimalResponse, _impl_.matches_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCMatchesMinimalResponse, _impl_.last_match_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientTopLeagueMatchesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientTopLeagueMatchesResponse, _impl_.matches_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientTopFriendMatchesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientTopFriendMatchesResponse, _impl_.matches_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectateFriendGame, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectateFriendGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSpectateFriendGame, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectateFriendGame, _impl_.live_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSpectateFriendGameResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectateFriendGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSpectateFriendGameResponse, _impl_.server_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectateFriendGameResponse, _impl_.watch_live_result_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo_Highlight, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo_Highlight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo_Highlight, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo_Highlight, _impl_.description_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo, _impl_.match_),
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo, _impl_.exists_on_disk_),
  2,
  0,
  1,
  3,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGame, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGame, _impl_.server_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGame, _impl_.client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGame, _impl_.watch_server_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGame, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGame, _impl_.regions_),
  0,
  3,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgCancelWatchGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGameResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGameResponse, _impl_.watch_game_result_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGameResponse, _impl_.source_tv_public_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGameResponse, _impl_.source_tv_private_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGameResponse, _impl_.source_tv_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGameResponse, _impl_.game_server_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGameResponse, _impl_.watch_server_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGameResponse, _impl_.watch_tv_unique_secret_code_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgPartyLeaderWatchGamePrompt, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyLeaderWatchGamePrompt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyLeaderWatchGamePrompt, _impl_.game_server_steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, _impl_.server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, _impl_.live_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, _impl_.team_name_radiant_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, _impl_.team_name_dire_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, _impl_.series_game_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, _impl_.upcoming_broadcast_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, _impl_.allow_live_video_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, _impl_.node_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, _impl_.node_name_),
  4,
  3,
  5,
  0,
  1,
  7,
  8,
  6,
  9,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_TeamInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_TeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_TeamInfo, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_TeamInfo, _impl_.team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_TeamInfo, _impl_.team_logo_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_TeamInfo, _impl_.wager_count_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_LiveGame, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_LiveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_LiveGame, _impl_.server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_LiveGame, _impl_.team_radiant_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_LiveGame, _impl_.team_dire_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_LiveGame, _impl_.team_radiant_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_LiveGame, _impl_.team_dire_score_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries, _impl_.series_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries, _impl_.series_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries, _impl_.team_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries, _impl_.team_2_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries, _impl_.match_minimal_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries, _impl_.live_game_),
  3,
  4,
  0,
  1,
  ~0u,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CSourceTVGameSmall_Player)},
  { 10, 47, -1, sizeof(::CSourceTVGameSmall)},
  { 78, 90, -1, sizeof(::CMsgClientToGCFindTopSourceTVGames)},
  { 96, 111, -1, sizeof(::CMsgGCToClientFindTopSourceTVGamesResponse)},
  { 120, -1, -1, sizeof(::CMsgGCToClientTopWeekendTourneyGames)},
  { 127, -1, -1, sizeof(::CMsgClientToGCTopLeagueMatchesRequest)},
  { 133, -1, -1, sizeof(::CMsgClientToGCTopFriendMatchesRequest)},
  { 139, -1, -1, sizeof(::CMsgClientToGCMatchesMinimalRequest)},
  { 146, 154, -1, sizeof(::CMsgClientToGCMatchesMinimalResponse)},
  { 156, -1, -1, sizeof(::CMsgGCToClientTopLeagueMatchesResponse)},
  { 163, -1, -1, sizeof(::CMsgGCToClientTopFriendMatchesResponse)},
  { 170, 178, -1, sizeof(::CMsgSpectateFriendGame)},
  { 180, 188, -1, sizeof(::CMsgSpectateFriendGameResponse)},
  { 190, 198, -1, sizeof(::CDOTAReplayDownloadInfo_Highlight)},
  { 200, 212, -1, sizeof(::CDOTAReplayDownloadInfo)},
  { 218, 229, -1, sizeof(::CMsgWatchGame)},
  { 234, -1, -1, sizeof(::CMsgCancelWatchGame)},
  { 240, 253, -1, sizeof(::CMsgWatchGameResponse)},
  { 260, 267, -1, sizeof(::CMsgPartyLeaderWatchGamePrompt)},
  { 268, 284, -1, sizeof(::CDOTABroadcasterInfo)},
  { 294, 304, -1, sizeof(::CMsgDOTASeries_TeamInfo)},
  { 308, 319, -1, sizeof(::CMsgDOTASeries_LiveGame)},
  { 324, 336, -1, sizeof(::CMsgDOTASeries)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CSourceTVGameSmall_Player_default_instance_._instance,
  &::_CSourceTVGameSmall_default_instance_._instance,
  &::_CMsgClientToGCFindTopSourceTVGames_default_instance_._instance,
  &::_CMsgGCToClientFindTopSourceTVGamesResponse_default_instance_._instance,
  &::_CMsgGCToClientTopWeekendTourneyGames_default_instance_._instance,
  &::_CMsgClientToGCTopLeagueMatchesRequest_default_instance_._instance,
  &::_CMsgClientToGCTopFriendMatchesRequest_default_instance_._instance,
  &::_CMsgClientToGCMatchesMinimalRequest_default_instance_._instance,
  &::_CMsgClientToGCMatchesMinimalResponse_default_instance_._instance,
  &::_CMsgGCToClientTopLeagueMatchesResponse_default_instance_._instance,
  &::_CMsgGCToClientTopFriendMatchesResponse_default_instance_._instance,
  &::_CMsgSpectateFriendGame_default_instance_._instance,
  &::_CMsgSpectateFriendGameResponse_default_instance_._instance,
  &::_CDOTAReplayDownloadInfo_Highlight_default_instance_._instance,
  &::_CDOTAReplayDownloadInfo_default_instance_._instance,
  &::_CMsgWatchGame_default_instance_._instance,
  &::_CMsgCancelWatchGame_default_instance_._instance,
  &::_CMsgWatchGameResponse_default_instance_._instance,
  &::_CMsgPartyLeaderWatchGamePrompt_default_instance_._instance,
  &::_CDOTABroadcasterInfo_default_instance_._instance,
  &::_CMsgDOTASeries_TeamInfo_default_instance_._instance,
  &::_CMsgDOTASeries_LiveGame_default_instance_._instance,
  &::_CMsgDOTASeries_default_instance_._instance,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fclient_5fwatch_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"dota_gcmessages_client_watch.proto\032\034do"
  "ta_gcmessages_common.proto\"\306\006\n\022CSourceTV"
  "GameSmall\022\025\n\ractivate_time\030\001 \001(\r\022\027\n\017deac"
  "tivate_time\030\002 \001(\r\022\027\n\017server_steam_id\030\003 \001"
  "(\004\022\020\n\010lobby_id\030\004 \001(\004\022\021\n\tleague_id\030\005 \001(\r\022"
  "\022\n\nlobby_type\030\006 \001(\r\022\021\n\tgame_time\030\007 \001(\005\022\r"
  "\n\005delay\030\010 \001(\r\022\022\n\nspectators\030\t \001(\r\022\021\n\tgam"
  "e_mode\030\n \001(\r\022\023\n\013average_mmr\030\013 \001(\r\022\020\n\010mat"
  "ch_id\030\014 \001(\004\022\021\n\tseries_id\030\r \001(\r\022\031\n\021team_n"
  "ame_radiant\030\017 \001(\t\022\026\n\016team_name_dire\030\020 \001("
  "\t\022\031\n\021team_logo_radiant\030\030 \001(\006\022\026\n\016team_log"
  "o_dire\030\031 \001(\006\022\027\n\017team_id_radiant\030\036 \001(\r\022\024\n"
  "\014team_id_dire\030\037 \001(\r\022\022\n\nsort_score\030\021 \001(\r\022"
  "\030\n\020last_update_time\030\022 \001(\002\022\024\n\014radiant_lea"
  "d\030\023 \001(\005\022\025\n\rradiant_score\030\024 \001(\r\022\022\n\ndire_s"
  "core\030\025 \001(\r\022+\n\007players\030\026 \003(\0132\032.CSourceTVG"
  "ameSmall.Player\022\026\n\016building_state\030\027 \001(\007\022"
  "%\n\035weekend_tourney_tournament_id\030\032 \001(\r\022 "
  "\n\030weekend_tourney_division\030\033 \001(\r\022#\n\033week"
  "end_tourney_skill_level\030\034 \001(\r\022%\n\035weekend"
  "_tourney_bracket_round\030\035 \001(\r\022\036\n\026custom_g"
  "ame_difficulty\030  \001(\r\032-\n\006Player\022\022\n\naccoun"
  "t_id\030\001 \001(\r\022\017\n\007hero_id\030\002 \001(\r\"\234\001\n\"CMsgClie"
  "ntToGCFindTopSourceTVGames\022\022\n\nsearch_key"
  "\030\001 \001(\t\022\021\n\tleague_id\030\002 \001(\r\022\017\n\007hero_id\030\003 \001"
  "(\r\022\022\n\nstart_game\030\004 \001(\r\022\027\n\017game_list_inde"
  "x\030\005 \001(\r\022\021\n\tlobby_ids\030\006 \003(\004\"\213\002\n*CMsgGCToC"
  "lientFindTopSourceTVGamesResponse\022\022\n\nsea"
  "rch_key\030\001 \001(\t\022\021\n\tleague_id\030\002 \001(\r\022\017\n\007hero"
  "_id\030\003 \001(\r\022\022\n\nstart_game\030\004 \001(\r\022\021\n\tnum_gam"
  "es\030\005 \001(\r\022\027\n\017game_list_index\030\006 \001(\r\022&\n\tgam"
  "e_list\030\007 \003(\0132\023.CSourceTVGameSmall\022\026\n\016spe"
  "cific_games\030\010 \001(\010\022%\n\010bot_game\030\t \001(\0132\023.CS"
  "ourceTVGameSmall\"O\n$CMsgGCToClientTopWee"
  "kendTourneyGames\022\'\n\nlive_games\030\001 \003(\0132\023.C"
  "SourceTVGameSmall\"\'\n%CMsgClientToGCTopLe"
  "agueMatchesRequest\"\'\n%CMsgClientToGCTopF"
  "riendMatchesRequest\"8\n#CMsgClientToGCMat"
  "chesMinimalRequest\022\021\n\tmatch_ids\030\001 \003(\004\"b\n"
  "$CMsgClientToGCMatchesMinimalResponse\022&\n"
  "\007matches\030\001 \003(\0132\025.CMsgDOTAMatchMinimal\022\022\n"
  "\nlast_match\030\002 \001(\010\"P\n&CMsgGCToClientTopLe"
  "agueMatchesResponse\022&\n\007matches\030\002 \003(\0132\025.C"
  "MsgDOTAMatchMinimal\"P\n&CMsgGCToClientTop"
  "FriendMatchesResponse\022&\n\007matches\030\001 \003(\0132\025"
  ".CMsgDOTAMatchMinimal\"8\n\026CMsgSpectateFri"
  "endGame\022\020\n\010steam_id\030\001 \001(\006\022\014\n\004live\030\002 \001(\010\""
  "\270\004\n\036CMsgSpectateFriendGameResponse\022\026\n\016se"
  "rver_steamid\030\004 \001(\006\022T\n\021watch_live_result\030"
  "\005 \001(\01620.CMsgSpectateFriendGameResponse.E"
  "WatchLiveResult:\007SUCCESS\"\247\003\n\020EWatchLiveR"
  "esult\022\013\n\007SUCCESS\020\000\022\021\n\rERROR_GENERIC\020\001\022\021\n"
  "\rERROR_NO_PLUS\020\002\022\025\n\021ERROR_NOT_FRIENDS\020\003\022"
  "\031\n\025ERROR_LOBBY_NOT_FOUND\020\004\022\036\n\032ERROR_SPEC"
  "TATOR_IN_A_LOBBY\020\005\022\026\n\022ERROR_LOBBY_IS_LAN"
  "\020\006\022\032\n\026ERROR_WRONG_LOBBY_TYPE\020\007\022\033\n\027ERROR_"
  "WRONG_LOBBY_STATE\020\010\022\033\n\027ERROR_PLAYER_NOT_"
  "PLAYER\020\t\022\035\n\031ERROR_TOO_MANY_SPECTATORS\020\n\022"
  "\"\n\036ERROR_SPECTATOR_SWITCHED_TEAMS\020\013\022\037\n\033E"
  "RROR_FRIENDS_ON_BOTH_SIDES\020\014\022!\n\035ERROR_SP"
  "ECTATOR_IN_THIS_LOBBY\020\r\022\031\n\025ERROR_LOBBY_I"
  "S_LEAGUE\020\016\"\314\001\n\027CDOTAReplayDownloadInfo\022$"
  "\n\005match\030\001 \001(\0132\025.CMsgDOTAMatchMinimal\022\r\n\005"
  "title\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022\014\n\004size"
  "\030\004 \001(\r\022\014\n\004tags\030\005 \003(\t\022\026\n\016exists_on_disk\030\006"
  " \001(\010\0323\n\tHighlight\022\021\n\ttimestamp\030\001 \001(\r\022\023\n\013"
  "description\030\002 \001(\t\"\200\001\n\rCMsgWatchGame\022\026\n\016s"
  "erver_steamid\030\001 \001(\006\022\026\n\016client_version\030\002 "
  "\001(\r\022\034\n\024watch_server_steamid\030\003 \001(\006\022\020\n\010lob"
  "by_id\030\004 \001(\004\022\017\n\007regions\030\005 \003(\r\"\025\n\023CMsgCanc"
  "elWatchGame\"\311\003\n\025CMsgWatchGameResponse\022J\n"
  "\021watch_game_result\030\001 \001(\0162&.CMsgWatchGame"
  "Response.WatchGameResult:\007PENDING\022\035\n\025sou"
  "rce_tv_public_addr\030\002 \001(\r\022\036\n\026source_tv_pr"
  "ivate_addr\030\003 \001(\r\022\026\n\016source_tv_port\030\004 \001(\r"
  "\022\033\n\023game_server_steamid\030\005 \001(\006\022\034\n\024watch_s"
  "erver_steamid\030\006 \001(\006\022#\n\033watch_tv_unique_s"
  "ecret_code\030\007 \001(\006\"\254\001\n\017WatchGameResult\022\013\n\007"
  "PENDING\020\000\022\t\n\005READY\020\001\022\026\n\022GAMESERVERNOTFOU"
  "ND\020\002\022\017\n\013UNAVAILABLE\020\003\022\r\n\tCANCELLED\020\004\022\027\n\023"
  "INCOMPATIBLEVERSION\020\005\022\035\n\031MISSINGLEAGUESU"
  "BSCRIPTION\020\006\022\021\n\rLOBBYNOTFOUND\020\007\"=\n\036CMsgP"
  "artyLeaderWatchGamePrompt\022\033\n\023game_server"
  "_steamid\030\005 \001(\006\"\377\001\n\024CDOTABroadcasterInfo\022"
  "\022\n\naccount_id\030\001 \001(\r\022\027\n\017server_steam_id\030\002"
  " \001(\006\022\014\n\004live\030\003 \001(\010\022\031\n\021team_name_radiant\030"
  "\004 \001(\t\022\026\n\016team_name_dire\030\005 \001(\t\022\023\n\013series_"
  "game\030\007 \001(\r\022$\n\034upcoming_broadcast_timesta"
  "mp\030\t \001(\r\022\030\n\020allow_live_video\030\n \001(\010\022\021\n\tno"
  "de_type\030\013 \001(\r\022\021\n\tnode_name\030\014 \001(\t\"\373\003\n\016CMs"
  "gDOTASeries\022\021\n\tseries_id\030\001 \001(\r\022\023\n\013series"
  "_type\030\002 \001(\r\022(\n\006team_1\030\003 \001(\0132\030.CMsgDOTASe"
  "ries.TeamInfo\022(\n\006team_2\030\004 \001(\0132\030.CMsgDOTA"
  "Series.TeamInfo\022,\n\rmatch_minimal\030\005 \003(\0132\025"
  ".CMsgDOTAMatchMinimal\022+\n\tlive_game\030\006 \001(\013"
  "2\030.CMsgDOTASeries.LiveGame\032Z\n\010TeamInfo\022\017"
  "\n\007team_id\030\001 \001(\r\022\021\n\tteam_name\030\002 \001(\t\022\025\n\rte"
  "am_logo_url\030\003 \001(\t\022\023\n\013wager_count\030\004 \001(\r\032\265"
  "\001\n\010LiveGame\022\027\n\017server_steam_id\030\001 \001(\006\022.\n\014"
  "team_radiant\030\002 \001(\0132\030.CMsgDOTASeries.Team"
  "Info\022+\n\tteam_dire\030\003 \001(\0132\030.CMsgDOTASeries"
  ".TeamInfo\022\032\n\022team_radiant_score\030\004 \001(\r\022\027\n"
  "\017team_dire_score\030\005 \001(\r"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_deps[1] = {
  &::descriptor_table_dota_5fgcmessages_5fcommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto = {
    false, false, 4102, descriptor_table_protodef_dota_5fgcmessages_5fclient_5fwatch_2eproto,
    "dota_gcmessages_client_watch.proto",
    &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once, descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_deps, 1, 23,
    schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto::offsets,
    file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fwatch_2eproto,
    file_level_service_descriptors_dota_5fgcmessages_5fclient_5fwatch_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter() {
  return &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fclient_5fwatch_2eproto(&descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgSpectateFriendGameResponse_EWatchLiveResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fwatch_2eproto[0];
}
bool CMsgSpectateFriendGameResponse_EWatchLiveResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::SUCCESS;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_GENERIC;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_NO_PLUS;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_NOT_FRIENDS;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_LOBBY_NOT_FOUND;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_SPECTATOR_IN_A_LOBBY;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_LOBBY_IS_LAN;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_WRONG_LOBBY_TYPE;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_WRONG_LOBBY_STATE;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_PLAYER_NOT_PLAYER;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_TOO_MANY_SPECTATORS;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_SPECTATOR_SWITCHED_TEAMS;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_FRIENDS_ON_BOTH_SIDES;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_SPECTATOR_IN_THIS_LOBBY;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_LOBBY_IS_LEAGUE;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::EWatchLiveResult_MIN;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::EWatchLiveResult_MAX;
constexpr int CMsgSpectateFriendGameResponse::EWatchLiveResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgWatchGameResponse_WatchGameResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fwatch_2eproto[1];
}
bool CMsgWatchGameResponse_WatchGameResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::PENDING;
constexpr CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::READY;
constexpr CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::GAMESERVERNOTFOUND;
constexpr CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::UNAVAILABLE;
constexpr CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::CANCELLED;
constexpr CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::INCOMPATIBLEVERSION;
constexpr CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::MISSINGLEAGUESUBSCRIPTION;
constexpr CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::LOBBYNOTFOUND;
constexpr CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::WatchGameResult_MIN;
constexpr CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::WatchGameResult_MAX;
constexpr int CMsgWatchGameResponse::WatchGameResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CSourceTVGameSmall_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CSourceTVGameSmall_Player>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSourceTVGameSmall_Player::CSourceTVGameSmall_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSourceTVGameSmall.Player)
}
CSourceTVGameSmall_Player::CSourceTVGameSmall_Player(const CSourceTVGameSmall_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSourceTVGameSmall_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.hero_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hero_id_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.hero_id_));
  // @@protoc_insertion_point(copy_constructor:CSourceTVGameSmall.Player)
}

inline void CSourceTVGameSmall_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.hero_id_){0u}
  };
}

CSourceTVGameSmall_Player::~CSourceTVGameSmall_Player() {
  // @@protoc_insertion_point(destructor:CSourceTVGameSmall.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSourceTVGameSmall_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSourceTVGameSmall_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSourceTVGameSmall_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CSourceTVGameSmall.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.hero_id_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.hero_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSourceTVGameSmall_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSourceTVGameSmall_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSourceTVGameSmall.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSourceTVGameSmall.Player)
  return target;
}

size_t CSourceTVGameSmall_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSourceTVGameSmall.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSourceTVGameSmall_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSourceTVGameSmall_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSourceTVGameSmall_Player::GetClassData() const { return &_class_data_; }


void CSourceTVGameSmall_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSourceTVGameSmall_Player*>(&to_msg);
  auto& from = static_cast<const CSourceTVGameSmall_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSourceTVGameSmall.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSourceTVGameSmall_Player::CopyFrom(const CSourceTVGameSmall_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSourceTVGameSmall.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSourceTVGameSmall_Player::IsInitialized() const {
  return true;
}

void CSourceTVGameSmall_Player::InternalSwap(CSourceTVGameSmall_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSourceTVGameSmall_Player, _impl_.hero_id_)
      + sizeof(CSourceTVGameSmall_Player::_impl_.hero_id_)
      - PROTOBUF_FIELD_OFFSET(CSourceTVGameSmall_Player, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSourceTVGameSmall_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[0]);
}

// ===================================================================

class CSourceTVGameSmall::_Internal {
 public:
  using HasBits = decltype(std::declval<CSourceTVGameSmall>()._impl_._has_bits_);
  static void set_has_activate_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deactivate_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lobby_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_spectators(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_average_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_series_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_team_name_radiant(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_name_dire(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_logo_radiant(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_team_logo_dire(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_team_id_radiant(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_team_id_dire(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_sort_score(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_last_update_time(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_radiant_lead(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_radiant_score(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_dire_score(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_building_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_weekend_tourney_tournament_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_weekend_tourney_division(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_weekend_tourney_skill_level(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_weekend_tourney_bracket_round(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_custom_game_difficulty(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
};

CSourceTVGameSmall::CSourceTVGameSmall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSourceTVGameSmall)
}
CSourceTVGameSmall::CSourceTVGameSmall(const CSourceTVGameSmall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSourceTVGameSmall* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.team_name_radiant_){}
    , decltype(_impl_.team_name_dire_){}
    , decltype(_impl_.activate_time_){}
    , decltype(_impl_.deactivate_time_){}
    , decltype(_impl_.server_steam_id_){}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.league_id_){}
    , decltype(_impl_.lobby_type_){}
    , decltype(_impl_.game_time_){}
    , decltype(_impl_.delay_){}
    , decltype(_impl_.spectators_){}
    , decltype(_impl_.game_mode_){}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.average_mmr_){}
    , decltype(_impl_.series_id_){}
    , decltype(_impl_.sort_score_){}
    , decltype(_impl_.last_update_time_){}
    , decltype(_impl_.radiant_lead_){}
    , decltype(_impl_.radiant_score_){}
    , decltype(_impl_.dire_score_){}
    , decltype(_impl_.building_state_){}
    , decltype(_impl_.team_logo_radiant_){}
    , decltype(_impl_.team_logo_dire_){}
    , decltype(_impl_.weekend_tourney_tournament_id_){}
    , decltype(_impl_.weekend_tourney_division_){}
    , decltype(_impl_.weekend_tourney_skill_level_){}
    , decltype(_impl_.weekend_tourney_bracket_round_){}
    , decltype(_impl_.team_id_radiant_){}
    , decltype(_impl_.team_id_dire_){}
    , decltype(_impl_.custom_game_difficulty_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.team_name_radiant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_radiant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_name_radiant()) {
    _this->_impl_.team_name_radiant_.Set(from._internal_team_name_radiant(), 
      _this->GetArenaForAllocation());
  }
  _impl_.team_name_dire_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_dire_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_name_dire()) {
    _this->_impl_.team_name_dire_.Set(from._internal_team_name_dire(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.activate_time_, &from._impl_.activate_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.custom_game_difficulty_) -
    reinterpret_cast<char*>(&_impl_.activate_time_)) + sizeof(_impl_.custom_game_difficulty_));
  // @@protoc_insertion_point(copy_constructor:CSourceTVGameSmall)
}

inline void CSourceTVGameSmall::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){arena}
    , decltype(_impl_.team_name_radiant_){}
    , decltype(_impl_.team_name_dire_){}
    , decltype(_impl_.activate_time_){0u}
    , decltype(_impl_.deactivate_time_){0u}
    , decltype(_impl_.server_steam_id_){uint64_t{0u}}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.league_id_){0u}
    , decltype(_impl_.lobby_type_){0u}
    , decltype(_impl_.game_time_){0}
    , decltype(_impl_.delay_){0u}
    , decltype(_impl_.spectators_){0u}
    , decltype(_impl_.game_mode_){0u}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.average_mmr_){0u}
    , decltype(_impl_.series_id_){0u}
    , decltype(_impl_.sort_score_){0u}
    , decltype(_impl_.last_update_time_){0}
    , decltype(_impl_.radiant_lead_){0}
    , decltype(_impl_.radiant_score_){0u}
    , decltype(_impl_.dire_score_){0u}
    , decltype(_impl_.building_state_){0u}
    , decltype(_impl_.team_logo_radiant_){uint64_t{0u}}
    , decltype(_impl_.team_logo_dire_){uint64_t{0u}}
    , decltype(_impl_.weekend_tourney_tournament_id_){0u}
    , decltype(_impl_.weekend_tourney_division_){0u}
    , decltype(_impl_.weekend_tourney_skill_level_){0u}
    , decltype(_impl_.weekend_tourney_bracket_round_){0u}
    , decltype(_impl_.team_id_radiant_){0u}
    , decltype(_impl_.team_id_dire_){0u}
    , decltype(_impl_.custom_game_difficulty_){0u}
  };
  _impl_.team_name_radiant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_radiant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.team_name_dire_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_dire_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSourceTVGameSmall::~CSourceTVGameSmall() {
  // @@protoc_insertion_point(destructor:CSourceTVGameSmall)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSourceTVGameSmall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  _impl_.team_name_radiant_.Destroy();
  _impl_.team_name_dire_.Destroy();
}

void CSourceTVGameSmall::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSourceTVGameSmall::Clear() {
// @@protoc_insertion_point(message_clear_start:CSourceTVGameSmall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.team_name_radiant_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.team_name_dire_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.activate_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lobby_type_) -
        reinterpret_cast<char*>(&_impl_.activate_time_)) + sizeof(_impl_.lobby_type_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.game_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sort_score_) -
        reinterpret_cast<char*>(&_impl_.game_time_)) + sizeof(_impl_.sort_score_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.last_update_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.weekend_tourney_tournament_id_) -
        reinterpret_cast<char*>(&_impl_.last_update_time_)) + sizeof(_impl_.weekend_tourney_tournament_id_));
  }
  if (cached_has_bits & 0x3f000000u) {
    ::memset(&_impl_.weekend_tourney_division_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.custom_game_difficulty_) -
        reinterpret_cast<char*>(&_impl_.weekend_tourney_division_)) + sizeof(_impl_.custom_game_difficulty_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSourceTVGameSmall::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 activate_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_activate_time(&has_bits);
          _impl_.activate_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deactivate_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_deactivate_time(&has_bits);
          _impl_.deactivate_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 server_steam_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_server_steam_id(&has_bits);
          _impl_.server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 lobby_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 league_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lobby_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_lobby_type(&has_bits);
          _impl_.lobby_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 game_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_game_time(&has_bits);
          _impl_.game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 delay = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_delay(&has_bits);
          _impl_.delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 spectators = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_spectators(&has_bits);
          _impl_.spectators_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_game_mode(&has_bits);
          _impl_.game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 average_mmr = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_average_mmr(&has_bits);
          _impl_.average_mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 series_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_series_id(&has_bits);
          _impl_.series_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string team_name_radiant = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_team_name_radiant();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSourceTVGameSmall.team_name_radiant");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string team_name_dire = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_team_name_dire();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSourceTVGameSmall.team_name_dire");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sort_score = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_sort_score(&has_bits);
          _impl_.sort_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float last_update_time = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_last_update_time(&has_bits);
          _impl_.last_update_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 radiant_lead = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_radiant_lead(&has_bits);
          _impl_.radiant_lead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 radiant_score = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_radiant_score(&has_bits);
          _impl_.radiant_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 dire_score = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_dire_score(&has_bits);
          _impl_.dire_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CSourceTVGameSmall.Player players = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 building_state = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          _Internal::set_has_building_state(&has_bits);
          _impl_.building_state_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 team_logo_radiant = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _Internal::set_has_team_logo_radiant(&has_bits);
          _impl_.team_logo_radiant_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 team_logo_dire = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _Internal::set_has_team_logo_dire(&has_bits);
          _impl_.team_logo_dire_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 weekend_tourney_tournament_id = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_weekend_tourney_tournament_id(&has_bits);
          _impl_.weekend_tourney_tournament_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 weekend_tourney_division = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_weekend_tourney_division(&has_bits);
          _impl_.weekend_tourney_division_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 weekend_tourney_skill_level = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_weekend_tourney_skill_level(&has_bits);
          _impl_.weekend_tourney_skill_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 weekend_tourney_bracket_round = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_weekend_tourney_bracket_round(&has_bits);
          _impl_.weekend_tourney_bracket_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_id_radiant = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_team_id_radiant(&has_bits);
          _impl_.team_id_radiant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_id_dire = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_team_id_dire(&has_bits);
          _impl_.team_id_dire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 custom_game_difficulty = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_custom_game_difficulty(&has_bits);
          _impl_.custom_game_difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSourceTVGameSmall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSourceTVGameSmall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 activate_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_activate_time(), target);
  }

  // optional uint32 deactivate_time = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_deactivate_time(), target);
  }

  // optional uint64 server_steam_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_server_steam_id(), target);
  }

  // optional uint64 lobby_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_lobby_id(), target);
  }

  // optional uint32 league_id = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_league_id(), target);
  }

  // optional uint32 lobby_type = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_lobby_type(), target);
  }

  // optional int32 game_time = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_game_time(), target);
  }

  // optional uint32 delay = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_delay(), target);
  }

  // optional uint32 spectators = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_spectators(), target);
  }

  // optional uint32 game_mode = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_game_mode(), target);
  }

  // optional uint32 average_mmr = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_average_mmr(), target);
  }

  // optional uint64 match_id = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_match_id(), target);
  }

  // optional uint32 series_id = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_series_id(), target);
  }

  // optional string team_name_radiant = 15;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name_radiant().data(), static_cast<int>(this->_internal_team_name_radiant().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSourceTVGameSmall.team_name_radiant");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_team_name_radiant(), target);
  }

  // optional string team_name_dire = 16;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name_dire().data(), static_cast<int>(this->_internal_team_name_dire().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSourceTVGameSmall.team_name_dire");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_team_name_dire(), target);
  }

  // optional uint32 sort_score = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_sort_score(), target);
  }

  // optional float last_update_time = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_last_update_time(), target);
  }

  // optional int32 radiant_lead = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_radiant_lead(), target);
  }

  // optional uint32 radiant_score = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_radiant_score(), target);
  }

  // optional uint32 dire_score = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_dire_score(), target);
  }

  // repeated .CSourceTVGameSmall.Player players = 22;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional fixed32 building_state = 23;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(23, this->_internal_building_state(), target);
  }

  // optional fixed64 team_logo_radiant = 24;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(24, this->_internal_team_logo_radiant(), target);
  }

  // optional fixed64 team_logo_dire = 25;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(25, this->_internal_team_logo_dire(), target);
  }

  // optional uint32 weekend_tourney_tournament_id = 26;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_weekend_tourney_tournament_id(), target);
  }

  // optional uint32 weekend_tourney_division = 27;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_weekend_tourney_division(), target);
  }

  // optional uint32 weekend_tourney_skill_level = 28;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_weekend_tourney_skill_level(), target);
  }

  // optional uint32 weekend_tourney_bracket_round = 29;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(29, this->_internal_weekend_tourney_bracket_round(), target);
  }

  // optional uint32 team_id_radiant = 30;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(30, this->_internal_team_id_radiant(), target);
  }

  // optional uint32 team_id_dire = 31;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(31, this->_internal_team_id_dire(), target);
  }

  // optional uint32 custom_game_difficulty = 32;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(32, this->_internal_custom_game_difficulty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSourceTVGameSmall)
  return target;
}

size_t CSourceTVGameSmall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSourceTVGameSmall)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSourceTVGameSmall.Player players = 22;
  total_size += 2UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string team_name_radiant = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name_radiant());
    }

    // optional string team_name_dire = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name_dire());
    }

    // optional uint32 activate_time = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_activate_time());
    }

    // optional uint32 deactivate_time = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deactivate_time());
    }

    // optional uint64 server_steam_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_server_steam_id());
    }

    // optional uint64 lobby_id = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lobby_id());
    }

    // optional uint32 league_id = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

    // optional uint32 lobby_type = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lobby_type());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 game_time = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_game_time());
    }

    // optional uint32 delay = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_delay());
    }

    // optional uint32 spectators = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_spectators());
    }

    // optional uint32 game_mode = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_mode());
    }

    // optional uint64 match_id = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 average_mmr = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_average_mmr());
    }

    // optional uint32 series_id = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_series_id());
    }

    // optional uint32 sort_score = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_sort_score());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float last_update_time = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional int32 radiant_lead = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_radiant_lead());
    }

    // optional uint32 radiant_score = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_radiant_score());
    }

    // optional uint32 dire_score = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_dire_score());
    }

    // optional fixed32 building_state = 23;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional fixed64 team_logo_radiant = 24;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional fixed64 team_logo_dire = 25;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional uint32 weekend_tourney_tournament_id = 26;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_weekend_tourney_tournament_id());
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional uint32 weekend_tourney_division = 27;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_weekend_tourney_division());
    }

    // optional uint32 weekend_tourney_skill_level = 28;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_weekend_tourney_skill_level());
    }

    // optional uint32 weekend_tourney_bracket_round = 29;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_weekend_tourney_bracket_round());
    }

    // optional uint32 team_id_radiant = 30;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_team_id_radiant());
    }

    // optional uint32 team_id_dire = 31;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_team_id_dire());
    }

    // optional uint32 custom_game_difficulty = 32;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_custom_game_difficulty());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSourceTVGameSmall::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSourceTVGameSmall::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSourceTVGameSmall::GetClassData() const { return &_class_data_; }


void CSourceTVGameSmall::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSourceTVGameSmall*>(&to_msg);
  auto& from = static_cast<const CSourceTVGameSmall&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSourceTVGameSmall)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_team_name_radiant(from._internal_team_name_radiant());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_team_name_dire(from._internal_team_name_dire());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.activate_time_ = from._impl_.activate_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.deactivate_time_ = from._impl_.deactivate_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.server_steam_id_ = from._impl_.server_steam_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.lobby_type_ = from._impl_.lobby_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.game_time_ = from._impl_.game_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.delay_ = from._impl_.delay_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.spectators_ = from._impl_.spectators_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.game_mode_ = from._impl_.game_mode_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.average_mmr_ = from._impl_.average_mmr_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.series_id_ = from._impl_.series_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.sort_score_ = from._impl_.sort_score_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.last_update_time_ = from._impl_.last_update_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.radiant_lead_ = from._impl_.radiant_lead_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.radiant_score_ = from._impl_.radiant_score_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.dire_score_ = from._impl_.dire_score_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.building_state_ = from._impl_.building_state_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.team_logo_radiant_ = from._impl_.team_logo_radiant_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.team_logo_dire_ = from._impl_.team_logo_dire_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.weekend_tourney_tournament_id_ = from._impl_.weekend_tourney_tournament_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.weekend_tourney_division_ = from._impl_.weekend_tourney_division_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.weekend_tourney_skill_level_ = from._impl_.weekend_tourney_skill_level_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.weekend_tourney_bracket_round_ = from._impl_.weekend_tourney_bracket_round_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.team_id_radiant_ = from._impl_.team_id_radiant_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.team_id_dire_ = from._impl_.team_id_dire_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.custom_game_difficulty_ = from._impl_.custom_game_difficulty_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSourceTVGameSmall::CopyFrom(const CSourceTVGameSmall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSourceTVGameSmall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSourceTVGameSmall::IsInitialized() const {
  return true;
}

void CSourceTVGameSmall::InternalSwap(CSourceTVGameSmall* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_name_radiant_, lhs_arena,
      &other->_impl_.team_name_radiant_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_name_dire_, lhs_arena,
      &other->_impl_.team_name_dire_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSourceTVGameSmall, _impl_.custom_game_difficulty_)
      + sizeof(CSourceTVGameSmall::_impl_.custom_game_difficulty_)
      - PROTOBUF_FIELD_OFFSET(CSourceTVGameSmall, _impl_.activate_time_)>(
          reinterpret_cast<char*>(&_impl_.activate_time_),
          reinterpret_cast<char*>(&other->_impl_.activate_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSourceTVGameSmall::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[1]);
}

// ===================================================================

class CMsgClientToGCFindTopSourceTVGames::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCFindTopSourceTVGames>()._impl_._has_bits_);
  static void set_has_search_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_game(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_list_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgClientToGCFindTopSourceTVGames::CMsgClientToGCFindTopSourceTVGames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCFindTopSourceTVGames)
}
CMsgClientToGCFindTopSourceTVGames::CMsgClientToGCFindTopSourceTVGames(const CMsgClientToGCFindTopSourceTVGames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCFindTopSourceTVGames* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lobby_ids_){from._impl_.lobby_ids_}
    , decltype(_impl_.search_key_){}
    , decltype(_impl_.league_id_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.start_game_){}
    , decltype(_impl_.game_list_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.search_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_search_key()) {
    _this->_impl_.search_key_.Set(from._internal_search_key(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.league_id_, &from._impl_.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.game_list_index_) -
    reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.game_list_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCFindTopSourceTVGames)
}

inline void CMsgClientToGCFindTopSourceTVGames::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lobby_ids_){arena}
    , decltype(_impl_.search_key_){}
    , decltype(_impl_.league_id_){0u}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.start_game_){0u}
    , decltype(_impl_.game_list_index_){0u}
  };
  _impl_.search_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientToGCFindTopSourceTVGames::~CMsgClientToGCFindTopSourceTVGames() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCFindTopSourceTVGames)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCFindTopSourceTVGames::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lobby_ids_.~RepeatedField();
  _impl_.search_key_.Destroy();
}

void CMsgClientToGCFindTopSourceTVGames::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCFindTopSourceTVGames::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCFindTopSourceTVGames)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lobby_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.search_key_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.game_list_index_) -
        reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.game_list_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCFindTopSourceTVGames::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string search_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_search_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientToGCFindTopSourceTVGames.search_key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 league_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 start_game = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_start_game(&has_bits);
          _impl_.start_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_list_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_game_list_index(&has_bits);
          _impl_.game_list_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 lobby_ids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_lobby_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_lobby_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCFindTopSourceTVGames::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCFindTopSourceTVGames)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_search_key().data(), static_cast<int>(this->_internal_search_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCFindTopSourceTVGames.search_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_search_key(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_league_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_id(), target);
  }

  // optional uint32 start_game = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_start_game(), target);
  }

  // optional uint32 game_list_index = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_game_list_index(), target);
  }

  // repeated uint64 lobby_ids = 6;
  for (int i = 0, n = this->_internal_lobby_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_lobby_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCFindTopSourceTVGames)
  return target;
}

size_t CMsgClientToGCFindTopSourceTVGames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCFindTopSourceTVGames)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 lobby_ids = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.lobby_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_lobby_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string search_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_search_key());
    }

    // optional uint32 league_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 start_game = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_start_game());
    }

    // optional uint32 game_list_index = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_list_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCFindTopSourceTVGames::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCFindTopSourceTVGames::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCFindTopSourceTVGames::GetClassData() const { return &_class_data_; }


void CMsgClientToGCFindTopSourceTVGames::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCFindTopSourceTVGames*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCFindTopSourceTVGames&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCFindTopSourceTVGames)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lobby_ids_.MergeFrom(from._impl_.lobby_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_search_key(from._internal_search_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.start_game_ = from._impl_.start_game_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.game_list_index_ = from._impl_.game_list_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCFindTopSourceTVGames::CopyFrom(const CMsgClientToGCFindTopSourceTVGames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCFindTopSourceTVGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCFindTopSourceTVGames::IsInitialized() const {
  return true;
}

void CMsgClientToGCFindTopSourceTVGames::InternalSwap(CMsgClientToGCFindTopSourceTVGames* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.lobby_ids_.InternalSwap(&other->_impl_.lobby_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.search_key_, lhs_arena,
      &other->_impl_.search_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCFindTopSourceTVGames, _impl_.game_list_index_)
      + sizeof(CMsgClientToGCFindTopSourceTVGames::_impl_.game_list_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCFindTopSourceTVGames, _impl_.league_id_)>(
          reinterpret_cast<char*>(&_impl_.league_id_),
          reinterpret_cast<char*>(&other->_impl_.league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCFindTopSourceTVGames::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[2]);
}

// ===================================================================

class CMsgGCToClientFindTopSourceTVGamesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientFindTopSourceTVGamesResponse>()._impl_._has_bits_);
  static void set_has_search_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_start_game(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_games(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_game_list_index(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_specific_games(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CSourceTVGameSmall& bot_game(const CMsgGCToClientFindTopSourceTVGamesResponse* msg);
  static void set_has_bot_game(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CSourceTVGameSmall&
CMsgGCToClientFindTopSourceTVGamesResponse::_Internal::bot_game(const CMsgGCToClientFindTopSourceTVGamesResponse* msg) {
  return *msg->_impl_.bot_game_;
}
CMsgGCToClientFindTopSourceTVGamesResponse::CMsgGCToClientFindTopSourceTVGamesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientFindTopSourceTVGamesResponse)
}
CMsgGCToClientFindTopSourceTVGamesResponse::CMsgGCToClientFindTopSourceTVGamesResponse(const CMsgGCToClientFindTopSourceTVGamesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToClientFindTopSourceTVGamesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_list_){from._impl_.game_list_}
    , decltype(_impl_.search_key_){}
    , decltype(_impl_.bot_game_){nullptr}
    , decltype(_impl_.league_id_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.start_game_){}
    , decltype(_impl_.num_games_){}
    , decltype(_impl_.game_list_index_){}
    , decltype(_impl_.specific_games_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.search_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_search_key()) {
    _this->_impl_.search_key_.Set(from._internal_search_key(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_bot_game()) {
    _this->_impl_.bot_game_ = new ::CSourceTVGameSmall(*from._impl_.bot_game_);
  }
  ::memcpy(&_impl_.league_id_, &from._impl_.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.specific_games_) -
    reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.specific_games_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientFindTopSourceTVGamesResponse)
}

inline void CMsgGCToClientFindTopSourceTVGamesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_list_){arena}
    , decltype(_impl_.search_key_){}
    , decltype(_impl_.bot_game_){nullptr}
    , decltype(_impl_.league_id_){0u}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.start_game_){0u}
    , decltype(_impl_.num_games_){0u}
    , decltype(_impl_.game_list_index_){0u}
    , decltype(_impl_.specific_games_){false}
  };
  _impl_.search_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCToClientFindTopSourceTVGamesResponse::~CMsgGCToClientFindTopSourceTVGamesResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientFindTopSourceTVGamesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToClientFindTopSourceTVGamesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.game_list_.~RepeatedPtrField();
  _impl_.search_key_.Destroy();
  if (this != internal_default_instance()) delete _impl_.bot_game_;
}

void CMsgGCToClientFindTopSourceTVGamesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToClientFindTopSourceTVGamesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientFindTopSourceTVGamesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.game_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.search_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.bot_game_ != nullptr);
      _impl_.bot_game_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.specific_games_) -
        reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.specific_games_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientFindTopSourceTVGamesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string search_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_search_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCToClientFindTopSourceTVGamesResponse.search_key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 league_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 start_game = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_start_game(&has_bits);
          _impl_.start_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_games = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_num_games(&has_bits);
          _impl_.num_games_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_list_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_game_list_index(&has_bits);
          _impl_.game_list_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CSourceTVGameSmall game_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_game_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool specific_games = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_specific_games(&has_bits);
          _impl_.specific_games_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CSourceTVGameSmall bot_game = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_game(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientFindTopSourceTVGamesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientFindTopSourceTVGamesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_search_key().data(), static_cast<int>(this->_internal_search_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToClientFindTopSourceTVGamesResponse.search_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_search_key(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_league_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_id(), target);
  }

  // optional uint32 start_game = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_start_game(), target);
  }

  // optional uint32 num_games = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_num_games(), target);
  }

  // optional uint32 game_list_index = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_game_list_index(), target);
  }

  // repeated .CSourceTVGameSmall game_list = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_game_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_game_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool specific_games = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_specific_games(), target);
  }

  // optional .CSourceTVGameSmall bot_game = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::bot_game(this),
        _Internal::bot_game(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientFindTopSourceTVGamesResponse)
  return target;
}

size_t CMsgGCToClientFindTopSourceTVGamesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientFindTopSourceTVGamesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSourceTVGameSmall game_list = 7;
  total_size += 1UL * this->_internal_game_list_size();
  for (const auto& msg : this->_impl_.game_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string search_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_search_key());
    }

    // optional .CSourceTVGameSmall bot_game = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bot_game_);
    }

    // optional uint32 league_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 start_game = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_start_game());
    }

    // optional uint32 num_games = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_games());
    }

    // optional uint32 game_list_index = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_list_index());
    }

    // optional bool specific_games = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientFindTopSourceTVGamesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToClientFindTopSourceTVGamesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientFindTopSourceTVGamesResponse::GetClassData() const { return &_class_data_; }


void CMsgGCToClientFindTopSourceTVGamesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToClientFindTopSourceTVGamesResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCToClientFindTopSourceTVGamesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientFindTopSourceTVGamesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.game_list_.MergeFrom(from._impl_.game_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_search_key(from._internal_search_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_bot_game()->::CSourceTVGameSmall::MergeFrom(
          from._internal_bot_game());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.start_game_ = from._impl_.start_game_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.num_games_ = from._impl_.num_games_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.game_list_index_ = from._impl_.game_list_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.specific_games_ = from._impl_.specific_games_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientFindTopSourceTVGamesResponse::CopyFrom(const CMsgGCToClientFindTopSourceTVGamesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientFindTopSourceTVGamesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientFindTopSourceTVGamesResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientFindTopSourceTVGamesResponse::InternalSwap(CMsgGCToClientFindTopSourceTVGamesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.game_list_.InternalSwap(&other->_impl_.game_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.search_key_, lhs_arena,
      &other->_impl_.search_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, _impl_.specific_games_)
      + sizeof(CMsgGCToClientFindTopSourceTVGamesResponse::_impl_.specific_games_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, _impl_.bot_game_)>(
          reinterpret_cast<char*>(&_impl_.bot_game_),
          reinterpret_cast<char*>(&other->_impl_.bot_game_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientFindTopSourceTVGamesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[3]);
}

// ===================================================================

class CMsgGCToClientTopWeekendTourneyGames::_Internal {
 public:
};

CMsgGCToClientTopWeekendTourneyGames::CMsgGCToClientTopWeekendTourneyGames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientTopWeekendTourneyGames)
}
CMsgGCToClientTopWeekendTourneyGames::CMsgGCToClientTopWeekendTourneyGames(const CMsgGCToClientTopWeekendTourneyGames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToClientTopWeekendTourneyGames* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.live_games_){from._impl_.live_games_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientTopWeekendTourneyGames)
}

inline void CMsgGCToClientTopWeekendTourneyGames::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.live_games_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgGCToClientTopWeekendTourneyGames::~CMsgGCToClientTopWeekendTourneyGames() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientTopWeekendTourneyGames)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToClientTopWeekendTourneyGames::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.live_games_.~RepeatedPtrField();
}

void CMsgGCToClientTopWeekendTourneyGames::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToClientTopWeekendTourneyGames::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientTopWeekendTourneyGames)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.live_games_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientTopWeekendTourneyGames::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CSourceTVGameSmall live_games = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_live_games(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientTopWeekendTourneyGames::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientTopWeekendTourneyGames)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CSourceTVGameSmall live_games = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_live_games_size()); i < n; i++) {
    const auto& repfield = this->_internal_live_games(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientTopWeekendTourneyGames)
  return target;
}

size_t CMsgGCToClientTopWeekendTourneyGames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientTopWeekendTourneyGames)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSourceTVGameSmall live_games = 1;
  total_size += 1UL * this->_internal_live_games_size();
  for (const auto& msg : this->_impl_.live_games_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientTopWeekendTourneyGames::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToClientTopWeekendTourneyGames::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientTopWeekendTourneyGames::GetClassData() const { return &_class_data_; }


void CMsgGCToClientTopWeekendTourneyGames::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToClientTopWeekendTourneyGames*>(&to_msg);
  auto& from = static_cast<const CMsgGCToClientTopWeekendTourneyGames&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientTopWeekendTourneyGames)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.live_games_.MergeFrom(from._impl_.live_games_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientTopWeekendTourneyGames::CopyFrom(const CMsgGCToClientTopWeekendTourneyGames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientTopWeekendTourneyGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientTopWeekendTourneyGames::IsInitialized() const {
  return true;
}

void CMsgGCToClientTopWeekendTourneyGames::InternalSwap(CMsgGCToClientTopWeekendTourneyGames* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.live_games_.InternalSwap(&other->_impl_.live_games_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientTopWeekendTourneyGames::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[4]);
}

// ===================================================================

class CMsgClientToGCTopLeagueMatchesRequest::_Internal {
 public:
};

CMsgClientToGCTopLeagueMatchesRequest::CMsgClientToGCTopLeagueMatchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCTopLeagueMatchesRequest)
}
CMsgClientToGCTopLeagueMatchesRequest::CMsgClientToGCTopLeagueMatchesRequest(const CMsgClientToGCTopLeagueMatchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgClientToGCTopLeagueMatchesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCTopLeagueMatchesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCTopLeagueMatchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCTopLeagueMatchesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCTopLeagueMatchesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[5]);
}

// ===================================================================

class CMsgClientToGCTopFriendMatchesRequest::_Internal {
 public:
};

CMsgClientToGCTopFriendMatchesRequest::CMsgClientToGCTopFriendMatchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCTopFriendMatchesRequest)
}
CMsgClientToGCTopFriendMatchesRequest::CMsgClientToGCTopFriendMatchesRequest(const CMsgClientToGCTopFriendMatchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgClientToGCTopFriendMatchesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCTopFriendMatchesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCTopFriendMatchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCTopFriendMatchesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCTopFriendMatchesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[6]);
}

// ===================================================================

class CMsgClientToGCMatchesMinimalRequest::_Internal {
 public:
};

CMsgClientToGCMatchesMinimalRequest::CMsgClientToGCMatchesMinimalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCMatchesMinimalRequest)
}
CMsgClientToGCMatchesMinimalRequest::CMsgClientToGCMatchesMinimalRequest(const CMsgClientToGCMatchesMinimalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCMatchesMinimalRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.match_ids_){from._impl_.match_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCMatchesMinimalRequest)
}

inline void CMsgClientToGCMatchesMinimalRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.match_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgClientToGCMatchesMinimalRequest::~CMsgClientToGCMatchesMinimalRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCMatchesMinimalRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCMatchesMinimalRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.match_ids_.~RepeatedField();
}

void CMsgClientToGCMatchesMinimalRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCMatchesMinimalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCMatchesMinimalRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.match_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCMatchesMinimalRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 match_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_match_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_match_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCMatchesMinimalRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCMatchesMinimalRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 match_ids = 1;
  for (int i = 0, n = this->_internal_match_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCMatchesMinimalRequest)
  return target;
}

size_t CMsgClientToGCMatchesMinimalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCMatchesMinimalRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 match_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.match_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_match_ids_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCMatchesMinimalRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCMatchesMinimalRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCMatchesMinimalRequest::GetClassData() const { return &_class_data_; }


void CMsgClientToGCMatchesMinimalRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCMatchesMinimalRequest*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCMatchesMinimalRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCMatchesMinimalRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.match_ids_.MergeFrom(from._impl_.match_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCMatchesMinimalRequest::CopyFrom(const CMsgClientToGCMatchesMinimalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCMatchesMinimalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCMatchesMinimalRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCMatchesMinimalRequest::InternalSwap(CMsgClientToGCMatchesMinimalRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.match_ids_.InternalSwap(&other->_impl_.match_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCMatchesMinimalRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[7]);
}

// ===================================================================

class CMsgClientToGCMatchesMinimalResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCMatchesMinimalResponse>()._impl_._has_bits_);
  static void set_has_last_match(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void CMsgClientToGCMatchesMinimalResponse::clear_matches() {
  _impl_.matches_.Clear();
}
CMsgClientToGCMatchesMinimalResponse::CMsgClientToGCMatchesMinimalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCMatchesMinimalResponse)
}
CMsgClientToGCMatchesMinimalResponse::CMsgClientToGCMatchesMinimalResponse(const CMsgClientToGCMatchesMinimalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCMatchesMinimalResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.matches_){from._impl_.matches_}
    , decltype(_impl_.last_match_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.last_match_ = from._impl_.last_match_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCMatchesMinimalResponse)
}

inline void CMsgClientToGCMatchesMinimalResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.matches_){arena}
    , decltype(_impl_.last_match_){false}
  };
}

CMsgClientToGCMatchesMinimalResponse::~CMsgClientToGCMatchesMinimalResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCMatchesMinimalResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCMatchesMinimalResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.matches_.~RepeatedPtrField();
}

void CMsgClientToGCMatchesMinimalResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCMatchesMinimalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCMatchesMinimalResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.matches_.Clear();
  _impl_.last_match_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCMatchesMinimalResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgDOTAMatchMinimal matches = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool last_match = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_last_match(&has_bits);
          _impl_.last_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCMatchesMinimalResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCMatchesMinimalResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAMatchMinimal matches = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_matches_size()); i < n; i++) {
    const auto& repfield = this->_internal_matches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool last_match = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_last_match(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCMatchesMinimalResponse)
  return target;
}

size_t CMsgClientToGCMatchesMinimalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCMatchesMinimalResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAMatchMinimal matches = 1;
  total_size += 1UL * this->_internal_matches_size();
  for (const auto& msg : this->_impl_.matches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool last_match = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCMatchesMinimalResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCMatchesMinimalResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCMatchesMinimalResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCMatchesMinimalResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCMatchesMinimalResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCMatchesMinimalResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCMatchesMinimalResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.matches_.MergeFrom(from._impl_.matches_);
  if (from._internal_has_last_match()) {
    _this->_internal_set_last_match(from._internal_last_match());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCMatchesMinimalResponse::CopyFrom(const CMsgClientToGCMatchesMinimalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCMatchesMinimalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCMatchesMinimalResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCMatchesMinimalResponse::InternalSwap(CMsgClientToGCMatchesMinimalResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.matches_.InternalSwap(&other->_impl_.matches_);
  swap(_impl_.last_match_, other->_impl_.last_match_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCMatchesMinimalResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[8]);
}

// ===================================================================

class CMsgGCToClientTopLeagueMatchesResponse::_Internal {
 public:
};

void CMsgGCToClientTopLeagueMatchesResponse::clear_matches() {
  _impl_.matches_.Clear();
}
CMsgGCToClientTopLeagueMatchesResponse::CMsgGCToClientTopLeagueMatchesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientTopLeagueMatchesResponse)
}
CMsgGCToClientTopLeagueMatchesResponse::CMsgGCToClientTopLeagueMatchesResponse(const CMsgGCToClientTopLeagueMatchesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToClientTopLeagueMatchesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.matches_){from._impl_.matches_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientTopLeagueMatchesResponse)
}

inline void CMsgGCToClientTopLeagueMatchesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.matches_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgGCToClientTopLeagueMatchesResponse::~CMsgGCToClientTopLeagueMatchesResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientTopLeagueMatchesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToClientTopLeagueMatchesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.matches_.~RepeatedPtrField();
}

void CMsgGCToClientTopLeagueMatchesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToClientTopLeagueMatchesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientTopLeagueMatchesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.matches_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientTopLeagueMatchesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgDOTAMatchMinimal matches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientTopLeagueMatchesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientTopLeagueMatchesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAMatchMinimal matches = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_matches_size()); i < n; i++) {
    const auto& repfield = this->_internal_matches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientTopLeagueMatchesResponse)
  return target;
}

size_t CMsgGCToClientTopLeagueMatchesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientTopLeagueMatchesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAMatchMinimal matches = 2;
  total_size += 1UL * this->_internal_matches_size();
  for (const auto& msg : this->_impl_.matches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientTopLeagueMatchesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToClientTopLeagueMatchesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientTopLeagueMatchesResponse::GetClassData() const { return &_class_data_; }


void CMsgGCToClientTopLeagueMatchesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToClientTopLeagueMatchesResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCToClientTopLeagueMatchesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientTopLeagueMatchesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.matches_.MergeFrom(from._impl_.matches_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientTopLeagueMatchesResponse::CopyFrom(const CMsgGCToClientTopLeagueMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientTopLeagueMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientTopLeagueMatchesResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientTopLeagueMatchesResponse::InternalSwap(CMsgGCToClientTopLeagueMatchesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.matches_.InternalSwap(&other->_impl_.matches_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientTopLeagueMatchesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[9]);
}

// ===================================================================

class CMsgGCToClientTopFriendMatchesResponse::_Internal {
 public:
};

void CMsgGCToClientTopFriendMatchesResponse::clear_matches() {
  _impl_.matches_.Clear();
}
CMsgGCToClientTopFriendMatchesResponse::CMsgGCToClientTopFriendMatchesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientTopFriendMatchesResponse)
}
CMsgGCToClientTopFriendMatchesResponse::CMsgGCToClientTopFriendMatchesResponse(const CMsgGCToClientTopFriendMatchesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToClientTopFriendMatchesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.matches_){from._impl_.matches_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientTopFriendMatchesResponse)
}

inline void CMsgGCToClientTopFriendMatchesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.matches_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgGCToClientTopFriendMatchesResponse::~CMsgGCToClientTopFriendMatchesResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientTopFriendMatchesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToClientTopFriendMatchesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.matches_.~RepeatedPtrField();
}

void CMsgGCToClientTopFriendMatchesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToClientTopFriendMatchesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientTopFriendMatchesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.matches_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientTopFriendMatchesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgDOTAMatchMinimal matches = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientTopFriendMatchesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientTopFriendMatchesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAMatchMinimal matches = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_matches_size()); i < n; i++) {
    const auto& repfield = this->_internal_matches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientTopFriendMatchesResponse)
  return target;
}

size_t CMsgGCToClientTopFriendMatchesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientTopFriendMatchesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAMatchMinimal matches = 1;
  total_size += 1UL * this->_internal_matches_size();
  for (const auto& msg : this->_impl_.matches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientTopFriendMatchesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToClientTopFriendMatchesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientTopFriendMatchesResponse::GetClassData() const { return &_class_data_; }


void CMsgGCToClientTopFriendMatchesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToClientTopFriendMatchesResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCToClientTopFriendMatchesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientTopFriendMatchesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.matches_.MergeFrom(from._impl_.matches_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientTopFriendMatchesResponse::CopyFrom(const CMsgGCToClientTopFriendMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientTopFriendMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientTopFriendMatchesResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientTopFriendMatchesResponse::InternalSwap(CMsgGCToClientTopFriendMatchesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.matches_.InternalSwap(&other->_impl_.matches_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientTopFriendMatchesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[10]);
}

// ===================================================================

class CMsgSpectateFriendGame::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSpectateFriendGame>()._impl_._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_live(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSpectateFriendGame::CMsgSpectateFriendGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSpectateFriendGame)
}
CMsgSpectateFriendGame::CMsgSpectateFriendGame(const CMsgSpectateFriendGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSpectateFriendGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steam_id_){}
    , decltype(_impl_.live_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steam_id_, &from._impl_.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.live_) -
    reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.live_));
  // @@protoc_insertion_point(copy_constructor:CMsgSpectateFriendGame)
}

inline void CMsgSpectateFriendGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
    , decltype(_impl_.live_){false}
  };
}

CMsgSpectateFriendGame::~CMsgSpectateFriendGame() {
  // @@protoc_insertion_point(destructor:CMsgSpectateFriendGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSpectateFriendGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSpectateFriendGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSpectateFriendGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSpectateFriendGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.live_) -
        reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.live_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSpectateFriendGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool live = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_live(&has_bits);
          _impl_.live_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSpectateFriendGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpectateFriendGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional bool live = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_live(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpectateFriendGame)
  return target;
}

size_t CMsgSpectateFriendGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSpectateFriendGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool live = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSpectateFriendGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSpectateFriendGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSpectateFriendGame::GetClassData() const { return &_class_data_; }


void CMsgSpectateFriendGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSpectateFriendGame*>(&to_msg);
  auto& from = static_cast<const CMsgSpectateFriendGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSpectateFriendGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.live_ = from._impl_.live_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSpectateFriendGame::CopyFrom(const CMsgSpectateFriendGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSpectateFriendGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectateFriendGame::IsInitialized() const {
  return true;
}

void CMsgSpectateFriendGame::InternalSwap(CMsgSpectateFriendGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSpectateFriendGame, _impl_.live_)
      + sizeof(CMsgSpectateFriendGame::_impl_.live_)
      - PROTOBUF_FIELD_OFFSET(CMsgSpectateFriendGame, _impl_.steam_id_)>(
          reinterpret_cast<char*>(&_impl_.steam_id_),
          reinterpret_cast<char*>(&other->_impl_.steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSpectateFriendGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[11]);
}

// ===================================================================

class CMsgSpectateFriendGameResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSpectateFriendGameResponse>()._impl_._has_bits_);
  static void set_has_server_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_watch_live_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSpectateFriendGameResponse::CMsgSpectateFriendGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSpectateFriendGameResponse)
}
CMsgSpectateFriendGameResponse::CMsgSpectateFriendGameResponse(const CMsgSpectateFriendGameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSpectateFriendGameResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_steamid_){}
    , decltype(_impl_.watch_live_result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.server_steamid_, &from._impl_.server_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.watch_live_result_) -
    reinterpret_cast<char*>(&_impl_.server_steamid_)) + sizeof(_impl_.watch_live_result_));
  // @@protoc_insertion_point(copy_constructor:CMsgSpectateFriendGameResponse)
}

inline void CMsgSpectateFriendGameResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_steamid_){uint64_t{0u}}
    , decltype(_impl_.watch_live_result_){0}
  };
}

CMsgSpectateFriendGameResponse::~CMsgSpectateFriendGameResponse() {
  // @@protoc_insertion_point(destructor:CMsgSpectateFriendGameResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSpectateFriendGameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSpectateFriendGameResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSpectateFriendGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSpectateFriendGameResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.server_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.watch_live_result_) -
        reinterpret_cast<char*>(&_impl_.server_steamid_)) + sizeof(_impl_.watch_live_result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSpectateFriendGameResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 server_steamid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_server_steamid(&has_bits);
          _impl_.server_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgSpectateFriendGameResponse.EWatchLiveResult watch_live_result = 5 [default = SUCCESS];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgSpectateFriendGameResponse_EWatchLiveResult_IsValid(val))) {
            _internal_set_watch_live_result(static_cast<::CMsgSpectateFriendGameResponse_EWatchLiveResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSpectateFriendGameResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpectateFriendGameResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 server_steamid = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(4, this->_internal_server_steamid(), target);
  }

  // optional .CMsgSpectateFriendGameResponse.EWatchLiveResult watch_live_result = 5 [default = SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_watch_live_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpectateFriendGameResponse)
  return target;
}

size_t CMsgSpectateFriendGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSpectateFriendGameResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 server_steamid = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .CMsgSpectateFriendGameResponse.EWatchLiveResult watch_live_result = 5 [default = SUCCESS];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_watch_live_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSpectateFriendGameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSpectateFriendGameResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSpectateFriendGameResponse::GetClassData() const { return &_class_data_; }


void CMsgSpectateFriendGameResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSpectateFriendGameResponse*>(&to_msg);
  auto& from = static_cast<const CMsgSpectateFriendGameResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSpectateFriendGameResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.server_steamid_ = from._impl_.server_steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.watch_live_result_ = from._impl_.watch_live_result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSpectateFriendGameResponse::CopyFrom(const CMsgSpectateFriendGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSpectateFriendGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectateFriendGameResponse::IsInitialized() const {
  return true;
}

void CMsgSpectateFriendGameResponse::InternalSwap(CMsgSpectateFriendGameResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSpectateFriendGameResponse, _impl_.watch_live_result_)
      + sizeof(CMsgSpectateFriendGameResponse::_impl_.watch_live_result_)
      - PROTOBUF_FIELD_OFFSET(CMsgSpectateFriendGameResponse, _impl_.server_steamid_)>(
          reinterpret_cast<char*>(&_impl_.server_steamid_),
          reinterpret_cast<char*>(&other->_impl_.server_steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSpectateFriendGameResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[12]);
}

// ===================================================================

class CDOTAReplayDownloadInfo_Highlight::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAReplayDownloadInfo_Highlight>()._impl_._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAReplayDownloadInfo_Highlight::CDOTAReplayDownloadInfo_Highlight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAReplayDownloadInfo.Highlight)
}
CDOTAReplayDownloadInfo_Highlight::CDOTAReplayDownloadInfo_Highlight(const CDOTAReplayDownloadInfo_Highlight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAReplayDownloadInfo_Highlight* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.description_){}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:CDOTAReplayDownloadInfo.Highlight)
}

inline void CDOTAReplayDownloadInfo_Highlight::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.description_){}
    , decltype(_impl_.timestamp_){0u}
  };
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAReplayDownloadInfo_Highlight::~CDOTAReplayDownloadInfo_Highlight() {
  // @@protoc_insertion_point(destructor:CDOTAReplayDownloadInfo.Highlight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAReplayDownloadInfo_Highlight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.description_.Destroy();
}

void CDOTAReplayDownloadInfo_Highlight::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAReplayDownloadInfo_Highlight::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAReplayDownloadInfo.Highlight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.description_.ClearNonDefaultToEmpty();
  }
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAReplayDownloadInfo_Highlight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAReplayDownloadInfo.Highlight.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAReplayDownloadInfo_Highlight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAReplayDownloadInfo.Highlight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAReplayDownloadInfo.Highlight.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAReplayDownloadInfo.Highlight)
  return target;
}

size_t CDOTAReplayDownloadInfo_Highlight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAReplayDownloadInfo.Highlight)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string description = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional uint32 timestamp = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAReplayDownloadInfo_Highlight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAReplayDownloadInfo_Highlight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAReplayDownloadInfo_Highlight::GetClassData() const { return &_class_data_; }


void CDOTAReplayDownloadInfo_Highlight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAReplayDownloadInfo_Highlight*>(&to_msg);
  auto& from = static_cast<const CDOTAReplayDownloadInfo_Highlight&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAReplayDownloadInfo.Highlight)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAReplayDownloadInfo_Highlight::CopyFrom(const CDOTAReplayDownloadInfo_Highlight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAReplayDownloadInfo.Highlight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAReplayDownloadInfo_Highlight::IsInitialized() const {
  return true;
}

void CDOTAReplayDownloadInfo_Highlight::InternalSwap(CDOTAReplayDownloadInfo_Highlight* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAReplayDownloadInfo_Highlight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[13]);
}

// ===================================================================

class CDOTAReplayDownloadInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAReplayDownloadInfo>()._impl_._has_bits_);
  static const ::CMsgDOTAMatchMinimal& match(const CDOTAReplayDownloadInfo* msg);
  static void set_has_match(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_exists_on_disk(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgDOTAMatchMinimal&
CDOTAReplayDownloadInfo::_Internal::match(const CDOTAReplayDownloadInfo* msg) {
  return *msg->_impl_.match_;
}
void CDOTAReplayDownloadInfo::clear_match() {
  if (_impl_.match_ != nullptr) _impl_.match_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CDOTAReplayDownloadInfo::CDOTAReplayDownloadInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAReplayDownloadInfo)
}
CDOTAReplayDownloadInfo::CDOTAReplayDownloadInfo(const CDOTAReplayDownloadInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAReplayDownloadInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.match_){nullptr}
    , decltype(_impl_.size_){}
    , decltype(_impl_.exists_on_disk_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_match()) {
    _this->_impl_.match_ = new ::CMsgDOTAMatchMinimal(*from._impl_.match_);
  }
  ::memcpy(&_impl_.size_, &from._impl_.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.exists_on_disk_) -
    reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.exists_on_disk_));
  // @@protoc_insertion_point(copy_constructor:CDOTAReplayDownloadInfo)
}

inline void CDOTAReplayDownloadInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tags_){arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.match_){nullptr}
    , decltype(_impl_.size_){0u}
    , decltype(_impl_.exists_on_disk_){false}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAReplayDownloadInfo::~CDOTAReplayDownloadInfo() {
  // @@protoc_insertion_point(destructor:CDOTAReplayDownloadInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAReplayDownloadInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tags_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.match_;
}

void CDOTAReplayDownloadInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAReplayDownloadInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAReplayDownloadInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.match_ != nullptr);
      _impl_.match_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.exists_on_disk_) -
        reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.exists_on_disk_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAReplayDownloadInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgDOTAMatchMinimal match = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_match(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAReplayDownloadInfo.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAReplayDownloadInfo.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CDOTAReplayDownloadInfo.tags");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool exists_on_disk = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_exists_on_disk(&has_bits);
          _impl_.exists_on_disk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAReplayDownloadInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAReplayDownloadInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgDOTAMatchMinimal match = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::match(this),
        _Internal::match(this).GetCachedSize(), target, stream);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAReplayDownloadInfo.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAReplayDownloadInfo.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // optional uint32 size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_size(), target);
  }

  // repeated string tags = 5;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAReplayDownloadInfo.tags");
    target = stream->WriteString(5, s, target);
  }

  // optional bool exists_on_disk = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_exists_on_disk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAReplayDownloadInfo)
  return target;
}

size_t CDOTAReplayDownloadInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAReplayDownloadInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string description = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional .CMsgDOTAMatchMinimal match = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.match_);
    }

    // optional uint32 size = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
    }

    // optional bool exists_on_disk = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAReplayDownloadInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAReplayDownloadInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAReplayDownloadInfo::GetClassData() const { return &_class_data_; }


void CDOTAReplayDownloadInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAReplayDownloadInfo*>(&to_msg);
  auto& from = static_cast<const CDOTAReplayDownloadInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAReplayDownloadInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_match()->::CMsgDOTAMatchMinimal::MergeFrom(
          from._internal_match());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.exists_on_disk_ = from._impl_.exists_on_disk_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAReplayDownloadInfo::CopyFrom(const CDOTAReplayDownloadInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAReplayDownloadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAReplayDownloadInfo::IsInitialized() const {
  return true;
}

void CDOTAReplayDownloadInfo::InternalSwap(CDOTAReplayDownloadInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAReplayDownloadInfo, _impl_.exists_on_disk_)
      + sizeof(CDOTAReplayDownloadInfo::_impl_.exists_on_disk_)
      - PROTOBUF_FIELD_OFFSET(CDOTAReplayDownloadInfo, _impl_.match_)>(
          reinterpret_cast<char*>(&_impl_.match_),
          reinterpret_cast<char*>(&other->_impl_.match_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAReplayDownloadInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[14]);
}

// ===================================================================

class CMsgWatchGame::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgWatchGame>()._impl_._has_bits_);
  static void set_has_server_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_watch_server_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgWatchGame::CMsgWatchGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgWatchGame)
}
CMsgWatchGame::CMsgWatchGame(const CMsgWatchGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgWatchGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.regions_){from._impl_.regions_}
    , decltype(_impl_.server_steamid_){}
    , decltype(_impl_.watch_server_steamid_){}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.client_version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.server_steamid_, &from._impl_.server_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.client_version_) -
    reinterpret_cast<char*>(&_impl_.server_steamid_)) + sizeof(_impl_.client_version_));
  // @@protoc_insertion_point(copy_constructor:CMsgWatchGame)
}

inline void CMsgWatchGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.regions_){arena}
    , decltype(_impl_.server_steamid_){uint64_t{0u}}
    , decltype(_impl_.watch_server_steamid_){uint64_t{0u}}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.client_version_){0u}
  };
}

CMsgWatchGame::~CMsgWatchGame() {
  // @@protoc_insertion_point(destructor:CMsgWatchGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgWatchGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.regions_.~RepeatedField();
}

void CMsgWatchGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgWatchGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgWatchGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.regions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.server_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.client_version_) -
        reinterpret_cast<char*>(&_impl_.server_steamid_)) + sizeof(_impl_.client_version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgWatchGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 server_steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_server_steamid(&has_bits);
          _impl_.server_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client_version(&has_bits);
          _impl_.client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 watch_server_steamid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_watch_server_steamid(&has_bits);
          _impl_.watch_server_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 lobby_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 regions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_regions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_regions(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgWatchGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgWatchGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 server_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_server_steamid(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_version(), target);
  }

  // optional fixed64 watch_server_steamid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_watch_server_steamid(), target);
  }

  // optional uint64 lobby_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_lobby_id(), target);
  }

  // repeated uint32 regions = 5;
  for (int i = 0, n = this->_internal_regions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_regions(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgWatchGame)
  return target;
}

size_t CMsgWatchGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgWatchGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 regions = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.regions_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_regions_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 server_steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 watch_server_steamid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint64 lobby_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lobby_id());
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgWatchGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgWatchGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgWatchGame::GetClassData() const { return &_class_data_; }


void CMsgWatchGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgWatchGame*>(&to_msg);
  auto& from = static_cast<const CMsgWatchGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgWatchGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.regions_.MergeFrom(from._impl_.regions_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.server_steamid_ = from._impl_.server_steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.watch_server_steamid_ = from._impl_.watch_server_steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.client_version_ = from._impl_.client_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgWatchGame::CopyFrom(const CMsgWatchGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgWatchGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWatchGame::IsInitialized() const {
  return true;
}

void CMsgWatchGame::InternalSwap(CMsgWatchGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.regions_.InternalSwap(&other->_impl_.regions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgWatchGame, _impl_.client_version_)
      + sizeof(CMsgWatchGame::_impl_.client_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgWatchGame, _impl_.server_steamid_)>(
          reinterpret_cast<char*>(&_impl_.server_steamid_),
          reinterpret_cast<char*>(&other->_impl_.server_steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgWatchGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[15]);
}

// ===================================================================

class CMsgCancelWatchGame::_Internal {
 public:
};

CMsgCancelWatchGame::CMsgCancelWatchGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgCancelWatchGame)
}
CMsgCancelWatchGame::CMsgCancelWatchGame(const CMsgCancelWatchGame& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgCancelWatchGame* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgCancelWatchGame)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgCancelWatchGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgCancelWatchGame::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgCancelWatchGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[16]);
}

// ===================================================================

class CMsgWatchGameResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgWatchGameResponse>()._impl_._has_bits_);
  static void set_has_watch_game_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_tv_public_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_tv_private_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_source_tv_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_server_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_watch_server_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_watch_tv_unique_secret_code(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgWatchGameResponse::CMsgWatchGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgWatchGameResponse)
}
CMsgWatchGameResponse::CMsgWatchGameResponse(const CMsgWatchGameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgWatchGameResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.watch_game_result_){}
    , decltype(_impl_.source_tv_public_addr_){}
    , decltype(_impl_.source_tv_private_addr_){}
    , decltype(_impl_.source_tv_port_){}
    , decltype(_impl_.game_server_steamid_){}
    , decltype(_impl_.watch_server_steamid_){}
    , decltype(_impl_.watch_tv_unique_secret_code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.watch_game_result_, &from._impl_.watch_game_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.watch_tv_unique_secret_code_) -
    reinterpret_cast<char*>(&_impl_.watch_game_result_)) + sizeof(_impl_.watch_tv_unique_secret_code_));
  // @@protoc_insertion_point(copy_constructor:CMsgWatchGameResponse)
}

inline void CMsgWatchGameResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.watch_game_result_){0}
    , decltype(_impl_.source_tv_public_addr_){0u}
    , decltype(_impl_.source_tv_private_addr_){0u}
    , decltype(_impl_.source_tv_port_){0u}
    , decltype(_impl_.game_server_steamid_){uint64_t{0u}}
    , decltype(_impl_.watch_server_steamid_){uint64_t{0u}}
    , decltype(_impl_.watch_tv_unique_secret_code_){uint64_t{0u}}
  };
}

CMsgWatchGameResponse::~CMsgWatchGameResponse() {
  // @@protoc_insertion_point(destructor:CMsgWatchGameResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgWatchGameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgWatchGameResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgWatchGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgWatchGameResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.watch_game_result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.watch_tv_unique_secret_code_) -
        reinterpret_cast<char*>(&_impl_.watch_game_result_)) + sizeof(_impl_.watch_tv_unique_secret_code_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgWatchGameResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgWatchGameResponse_WatchGameResult_IsValid(val))) {
            _internal_set_watch_game_result(static_cast<::CMsgWatchGameResponse_WatchGameResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 source_tv_public_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_source_tv_public_addr(&has_bits);
          _impl_.source_tv_public_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 source_tv_private_addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_source_tv_private_addr(&has_bits);
          _impl_.source_tv_private_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 source_tv_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_source_tv_port(&has_bits);
          _impl_.source_tv_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 game_server_steamid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_game_server_steamid(&has_bits);
          _impl_.game_server_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 watch_server_steamid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_watch_server_steamid(&has_bits);
          _impl_.watch_server_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 watch_tv_unique_secret_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_watch_tv_unique_secret_code(&has_bits);
          _impl_.watch_tv_unique_secret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgWatchGameResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgWatchGameResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_watch_game_result(), target);
  }

  // optional uint32 source_tv_public_addr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_source_tv_public_addr(), target);
  }

  // optional uint32 source_tv_private_addr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_source_tv_private_addr(), target);
  }

  // optional uint32 source_tv_port = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_source_tv_port(), target);
  }

  // optional fixed64 game_server_steamid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(5, this->_internal_game_server_steamid(), target);
  }

  // optional fixed64 watch_server_steamid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(6, this->_internal_watch_server_steamid(), target);
  }

  // optional fixed64 watch_tv_unique_secret_code = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(7, this->_internal_watch_tv_unique_secret_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgWatchGameResponse)
  return target;
}

size_t CMsgWatchGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgWatchGameResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_watch_game_result());
    }

    // optional uint32 source_tv_public_addr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_tv_public_addr());
    }

    // optional uint32 source_tv_private_addr = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_tv_private_addr());
    }

    // optional uint32 source_tv_port = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_tv_port());
    }

    // optional fixed64 game_server_steamid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional fixed64 watch_server_steamid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional fixed64 watch_tv_unique_secret_code = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgWatchGameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgWatchGameResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgWatchGameResponse::GetClassData() const { return &_class_data_; }


void CMsgWatchGameResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgWatchGameResponse*>(&to_msg);
  auto& from = static_cast<const CMsgWatchGameResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgWatchGameResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.watch_game_result_ = from._impl_.watch_game_result_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.source_tv_public_addr_ = from._impl_.source_tv_public_addr_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.source_tv_private_addr_ = from._impl_.source_tv_private_addr_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.source_tv_port_ = from._impl_.source_tv_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.game_server_steamid_ = from._impl_.game_server_steamid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.watch_server_steamid_ = from._impl_.watch_server_steamid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.watch_tv_unique_secret_code_ = from._impl_.watch_tv_unique_secret_code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgWatchGameResponse::CopyFrom(const CMsgWatchGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgWatchGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWatchGameResponse::IsInitialized() const {
  return true;
}

void CMsgWatchGameResponse::InternalSwap(CMsgWatchGameResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgWatchGameResponse, _impl_.watch_tv_unique_secret_code_)
      + sizeof(CMsgWatchGameResponse::_impl_.watch_tv_unique_secret_code_)
      - PROTOBUF_FIELD_OFFSET(CMsgWatchGameResponse, _impl_.watch_game_result_)>(
          reinterpret_cast<char*>(&_impl_.watch_game_result_),
          reinterpret_cast<char*>(&other->_impl_.watch_game_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgWatchGameResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[17]);
}

// ===================================================================

class CMsgPartyLeaderWatchGamePrompt::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartyLeaderWatchGamePrompt>()._impl_._has_bits_);
  static void set_has_game_server_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPartyLeaderWatchGamePrompt::CMsgPartyLeaderWatchGamePrompt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyLeaderWatchGamePrompt)
}
CMsgPartyLeaderWatchGamePrompt::CMsgPartyLeaderWatchGamePrompt(const CMsgPartyLeaderWatchGamePrompt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPartyLeaderWatchGamePrompt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_server_steamid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.game_server_steamid_ = from._impl_.game_server_steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgPartyLeaderWatchGamePrompt)
}

inline void CMsgPartyLeaderWatchGamePrompt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_server_steamid_){uint64_t{0u}}
  };
}

CMsgPartyLeaderWatchGamePrompt::~CMsgPartyLeaderWatchGamePrompt() {
  // @@protoc_insertion_point(destructor:CMsgPartyLeaderWatchGamePrompt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPartyLeaderWatchGamePrompt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPartyLeaderWatchGamePrompt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPartyLeaderWatchGamePrompt::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyLeaderWatchGamePrompt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.game_server_steamid_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyLeaderWatchGamePrompt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 game_server_steamid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_game_server_steamid(&has_bits);
          _impl_.game_server_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPartyLeaderWatchGamePrompt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyLeaderWatchGamePrompt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 game_server_steamid = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(5, this->_internal_game_server_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyLeaderWatchGamePrompt)
  return target;
}

size_t CMsgPartyLeaderWatchGamePrompt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyLeaderWatchGamePrompt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 game_server_steamid = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPartyLeaderWatchGamePrompt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPartyLeaderWatchGamePrompt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPartyLeaderWatchGamePrompt::GetClassData() const { return &_class_data_; }


void CMsgPartyLeaderWatchGamePrompt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPartyLeaderWatchGamePrompt*>(&to_msg);
  auto& from = static_cast<const CMsgPartyLeaderWatchGamePrompt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyLeaderWatchGamePrompt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_server_steamid()) {
    _this->_internal_set_game_server_steamid(from._internal_game_server_steamid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPartyLeaderWatchGamePrompt::CopyFrom(const CMsgPartyLeaderWatchGamePrompt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyLeaderWatchGamePrompt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyLeaderWatchGamePrompt::IsInitialized() const {
  return true;
}

void CMsgPartyLeaderWatchGamePrompt::InternalSwap(CMsgPartyLeaderWatchGamePrompt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.game_server_steamid_, other->_impl_.game_server_steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyLeaderWatchGamePrompt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[18]);
}

// ===================================================================

class CDOTABroadcasterInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTABroadcasterInfo>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_live(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_team_name_radiant(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_name_dire(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_series_game(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_upcoming_broadcast_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_allow_live_video(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_node_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_node_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTABroadcasterInfo::CDOTABroadcasterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTABroadcasterInfo)
}
CDOTABroadcasterInfo::CDOTABroadcasterInfo(const CDOTABroadcasterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTABroadcasterInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_name_radiant_){}
    , decltype(_impl_.team_name_dire_){}
    , decltype(_impl_.node_name_){}
    , decltype(_impl_.server_steam_id_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.live_){}
    , decltype(_impl_.allow_live_video_){}
    , decltype(_impl_.series_game_){}
    , decltype(_impl_.upcoming_broadcast_timestamp_){}
    , decltype(_impl_.node_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.team_name_radiant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_radiant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_name_radiant()) {
    _this->_impl_.team_name_radiant_.Set(from._internal_team_name_radiant(), 
      _this->GetArenaForAllocation());
  }
  _impl_.team_name_dire_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_dire_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_name_dire()) {
    _this->_impl_.team_name_dire_.Set(from._internal_team_name_dire(), 
      _this->GetArenaForAllocation());
  }
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_node_name()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.server_steam_id_, &from._impl_.server_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.node_type_) -
    reinterpret_cast<char*>(&_impl_.server_steam_id_)) + sizeof(_impl_.node_type_));
  // @@protoc_insertion_point(copy_constructor:CDOTABroadcasterInfo)
}

inline void CDOTABroadcasterInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_name_radiant_){}
    , decltype(_impl_.team_name_dire_){}
    , decltype(_impl_.node_name_){}
    , decltype(_impl_.server_steam_id_){uint64_t{0u}}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.live_){false}
    , decltype(_impl_.allow_live_video_){false}
    , decltype(_impl_.series_game_){0u}
    , decltype(_impl_.upcoming_broadcast_timestamp_){0u}
    , decltype(_impl_.node_type_){0u}
  };
  _impl_.team_name_radiant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_radiant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.team_name_dire_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_dire_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTABroadcasterInfo::~CDOTABroadcasterInfo() {
  // @@protoc_insertion_point(destructor:CDOTABroadcasterInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTABroadcasterInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.team_name_radiant_.Destroy();
  _impl_.team_name_dire_.Destroy();
  _impl_.node_name_.Destroy();
}

void CDOTABroadcasterInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTABroadcasterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTABroadcasterInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.team_name_radiant_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.team_name_dire_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.node_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.server_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.series_game_) -
        reinterpret_cast<char*>(&_impl_.server_steam_id_)) + sizeof(_impl_.series_game_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.upcoming_broadcast_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.node_type_) -
        reinterpret_cast<char*>(&_impl_.upcoming_broadcast_timestamp_)) + sizeof(_impl_.node_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTABroadcasterInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 server_steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_server_steam_id(&has_bits);
          _impl_.server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool live = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_live(&has_bits);
          _impl_.live_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string team_name_radiant = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_team_name_radiant();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTABroadcasterInfo.team_name_radiant");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string team_name_dire = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_team_name_dire();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTABroadcasterInfo.team_name_dire");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 series_game = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_series_game(&has_bits);
          _impl_.series_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 upcoming_broadcast_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_upcoming_broadcast_timestamp(&has_bits);
          _impl_.upcoming_broadcast_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_live_video = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_allow_live_video(&has_bits);
          _impl_.allow_live_video_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 node_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_node_type(&has_bits);
          _impl_.node_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string node_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_node_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTABroadcasterInfo.node_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTABroadcasterInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTABroadcasterInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional fixed64 server_steam_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_server_steam_id(), target);
  }

  // optional bool live = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_live(), target);
  }

  // optional string team_name_radiant = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name_radiant().data(), static_cast<int>(this->_internal_team_name_radiant().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTABroadcasterInfo.team_name_radiant");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_team_name_radiant(), target);
  }

  // optional string team_name_dire = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name_dire().data(), static_cast<int>(this->_internal_team_name_dire().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTABroadcasterInfo.team_name_dire");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_team_name_dire(), target);
  }

  // optional uint32 series_game = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_series_game(), target);
  }

  // optional uint32 upcoming_broadcast_timestamp = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_upcoming_broadcast_timestamp(), target);
  }

  // optional bool allow_live_video = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_allow_live_video(), target);
  }

  // optional uint32 node_type = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_node_type(), target);
  }

  // optional string node_name = 12;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_node_name().data(), static_cast<int>(this->_internal_node_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTABroadcasterInfo.node_name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_node_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTABroadcasterInfo)
  return target;
}

size_t CDOTABroadcasterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTABroadcasterInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string team_name_radiant = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name_radiant());
    }

    // optional string team_name_dire = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name_dire());
    }

    // optional string node_name = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_node_name());
    }

    // optional fixed64 server_steam_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional bool live = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool allow_live_video = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint32 series_game = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_series_game());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 upcoming_broadcast_timestamp = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_upcoming_broadcast_timestamp());
    }

    // optional uint32 node_type = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_node_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTABroadcasterInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTABroadcasterInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTABroadcasterInfo::GetClassData() const { return &_class_data_; }


void CDOTABroadcasterInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTABroadcasterInfo*>(&to_msg);
  auto& from = static_cast<const CDOTABroadcasterInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTABroadcasterInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_team_name_radiant(from._internal_team_name_radiant());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_team_name_dire(from._internal_team_name_dire());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_node_name(from._internal_node_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.server_steam_id_ = from._impl_.server_steam_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.live_ = from._impl_.live_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.allow_live_video_ = from._impl_.allow_live_video_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.series_game_ = from._impl_.series_game_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.upcoming_broadcast_timestamp_ = from._impl_.upcoming_broadcast_timestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.node_type_ = from._impl_.node_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTABroadcasterInfo::CopyFrom(const CDOTABroadcasterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTABroadcasterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcasterInfo::IsInitialized() const {
  return true;
}

void CDOTABroadcasterInfo::InternalSwap(CDOTABroadcasterInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_name_radiant_, lhs_arena,
      &other->_impl_.team_name_radiant_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_name_dire_, lhs_arena,
      &other->_impl_.team_name_dire_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_name_, lhs_arena,
      &other->_impl_.node_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTABroadcasterInfo, _impl_.node_type_)
      + sizeof(CDOTABroadcasterInfo::_impl_.node_type_)
      - PROTOBUF_FIELD_OFFSET(CDOTABroadcasterInfo, _impl_.server_steam_id_)>(
          reinterpret_cast<char*>(&_impl_.server_steam_id_),
          reinterpret_cast<char*>(&other->_impl_.server_steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTABroadcasterInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[19]);
}

// ===================================================================

class CMsgDOTASeries_TeamInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTASeries_TeamInfo>()._impl_._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_logo_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wager_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTASeries_TeamInfo::CMsgDOTASeries_TeamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTASeries.TeamInfo)
}
CMsgDOTASeries_TeamInfo::CMsgDOTASeries_TeamInfo(const CMsgDOTASeries_TeamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTASeries_TeamInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_name_){}
    , decltype(_impl_.team_logo_url_){}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.wager_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.team_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_name()) {
    _this->_impl_.team_name_.Set(from._internal_team_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.team_logo_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_logo_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_logo_url()) {
    _this->_impl_.team_logo_url_.Set(from._internal_team_logo_url(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.team_id_, &from._impl_.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.wager_count_) -
    reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.wager_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASeries.TeamInfo)
}

inline void CMsgDOTASeries_TeamInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_name_){}
    , decltype(_impl_.team_logo_url_){}
    , decltype(_impl_.team_id_){0u}
    , decltype(_impl_.wager_count_){0u}
  };
  _impl_.team_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.team_logo_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_logo_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTASeries_TeamInfo::~CMsgDOTASeries_TeamInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTASeries.TeamInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTASeries_TeamInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.team_name_.Destroy();
  _impl_.team_logo_url_.Destroy();
}

void CMsgDOTASeries_TeamInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTASeries_TeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTASeries.TeamInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.team_logo_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.wager_count_) -
        reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.wager_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTASeries_TeamInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string team_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_team_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTASeries.TeamInfo.team_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string team_logo_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_team_logo_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTASeries.TeamInfo.team_logo_url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 wager_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_wager_count(&has_bits);
          _impl_.wager_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTASeries_TeamInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASeries.TeamInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTASeries.TeamInfo.team_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_team_name(), target);
  }

  // optional string team_logo_url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_logo_url().data(), static_cast<int>(this->_internal_team_logo_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTASeries.TeamInfo.team_logo_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_team_logo_url(), target);
  }

  // optional uint32 wager_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_wager_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASeries.TeamInfo)
  return target;
}

size_t CMsgDOTASeries_TeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTASeries.TeamInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string team_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional string team_logo_url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_logo_url());
    }

    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

    // optional uint32 wager_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_wager_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTASeries_TeamInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTASeries_TeamInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTASeries_TeamInfo::GetClassData() const { return &_class_data_; }


void CMsgDOTASeries_TeamInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTASeries_TeamInfo*>(&to_msg);
  auto& from = static_cast<const CMsgDOTASeries_TeamInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTASeries.TeamInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_team_logo_url(from._internal_team_logo_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.wager_count_ = from._impl_.wager_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTASeries_TeamInfo::CopyFrom(const CMsgDOTASeries_TeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTASeries.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeries_TeamInfo::IsInitialized() const {
  return true;
}

void CMsgDOTASeries_TeamInfo::InternalSwap(CMsgDOTASeries_TeamInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_name_, lhs_arena,
      &other->_impl_.team_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_logo_url_, lhs_arena,
      &other->_impl_.team_logo_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTASeries_TeamInfo, _impl_.wager_count_)
      + sizeof(CMsgDOTASeries_TeamInfo::_impl_.wager_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTASeries_TeamInfo, _impl_.team_id_)>(
          reinterpret_cast<char*>(&_impl_.team_id_),
          reinterpret_cast<char*>(&other->_impl_.team_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTASeries_TeamInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[20]);
}

// ===================================================================

class CMsgDOTASeries_LiveGame::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTASeries_LiveGame>()._impl_._has_bits_);
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgDOTASeries_TeamInfo& team_radiant(const CMsgDOTASeries_LiveGame* msg);
  static void set_has_team_radiant(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgDOTASeries_TeamInfo& team_dire(const CMsgDOTASeries_LiveGame* msg);
  static void set_has_team_dire(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_radiant_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_team_dire_score(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgDOTASeries_TeamInfo&
CMsgDOTASeries_LiveGame::_Internal::team_radiant(const CMsgDOTASeries_LiveGame* msg) {
  return *msg->_impl_.team_radiant_;
}
const ::CMsgDOTASeries_TeamInfo&
CMsgDOTASeries_LiveGame::_Internal::team_dire(const CMsgDOTASeries_LiveGame* msg) {
  return *msg->_impl_.team_dire_;
}
CMsgDOTASeries_LiveGame::CMsgDOTASeries_LiveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTASeries.LiveGame)
}
CMsgDOTASeries_LiveGame::CMsgDOTASeries_LiveGame(const CMsgDOTASeries_LiveGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTASeries_LiveGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_radiant_){nullptr}
    , decltype(_impl_.team_dire_){nullptr}
    , decltype(_impl_.server_steam_id_){}
    , decltype(_impl_.team_radiant_score_){}
    , decltype(_impl_.team_dire_score_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_team_radiant()) {
    _this->_impl_.team_radiant_ = new ::CMsgDOTASeries_TeamInfo(*from._impl_.team_radiant_);
  }
  if (from._internal_has_team_dire()) {
    _this->_impl_.team_dire_ = new ::CMsgDOTASeries_TeamInfo(*from._impl_.team_dire_);
  }
  ::memcpy(&_impl_.server_steam_id_, &from._impl_.server_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_dire_score_) -
    reinterpret_cast<char*>(&_impl_.server_steam_id_)) + sizeof(_impl_.team_dire_score_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASeries.LiveGame)
}

inline void CMsgDOTASeries_LiveGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_radiant_){nullptr}
    , decltype(_impl_.team_dire_){nullptr}
    , decltype(_impl_.server_steam_id_){uint64_t{0u}}
    , decltype(_impl_.team_radiant_score_){0u}
    , decltype(_impl_.team_dire_score_){0u}
  };
}

CMsgDOTASeries_LiveGame::~CMsgDOTASeries_LiveGame() {
  // @@protoc_insertion_point(destructor:CMsgDOTASeries.LiveGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTASeries_LiveGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.team_radiant_;
  if (this != internal_default_instance()) delete _impl_.team_dire_;
}

void CMsgDOTASeries_LiveGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTASeries_LiveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTASeries.LiveGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.team_radiant_ != nullptr);
      _impl_.team_radiant_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.team_dire_ != nullptr);
      _impl_.team_dire_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.server_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.team_dire_score_) -
        reinterpret_cast<char*>(&_impl_.server_steam_id_)) + sizeof(_impl_.team_dire_score_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTASeries_LiveGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 server_steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_server_steam_id(&has_bits);
          _impl_.server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTASeries.TeamInfo team_radiant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_radiant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTASeries.TeamInfo team_dire = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_dire(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_radiant_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_team_radiant_score(&has_bits);
          _impl_.team_radiant_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_dire_score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_team_dire_score(&has_bits);
          _impl_.team_dire_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTASeries_LiveGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASeries.LiveGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_server_steam_id(), target);
  }

  // optional .CMsgDOTASeries.TeamInfo team_radiant = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::team_radiant(this),
        _Internal::team_radiant(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgDOTASeries.TeamInfo team_dire = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::team_dire(this),
        _Internal::team_dire(this).GetCachedSize(), target, stream);
  }

  // optional uint32 team_radiant_score = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_team_radiant_score(), target);
  }

  // optional uint32 team_dire_score = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_team_dire_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASeries.LiveGame)
  return target;
}

size_t CMsgDOTASeries_LiveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTASeries.LiveGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgDOTASeries.TeamInfo team_radiant = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.team_radiant_);
    }

    // optional .CMsgDOTASeries.TeamInfo team_dire = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.team_dire_);
    }

    // optional fixed64 server_steam_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 team_radiant_score = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_radiant_score());
    }

    // optional uint32 team_dire_score = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_dire_score());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTASeries_LiveGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTASeries_LiveGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTASeries_LiveGame::GetClassData() const { return &_class_data_; }


void CMsgDOTASeries_LiveGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTASeries_LiveGame*>(&to_msg);
  auto& from = static_cast<const CMsgDOTASeries_LiveGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTASeries.LiveGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_team_radiant()->::CMsgDOTASeries_TeamInfo::MergeFrom(
          from._internal_team_radiant());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_team_dire()->::CMsgDOTASeries_TeamInfo::MergeFrom(
          from._internal_team_dire());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.server_steam_id_ = from._impl_.server_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.team_radiant_score_ = from._impl_.team_radiant_score_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.team_dire_score_ = from._impl_.team_dire_score_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTASeries_LiveGame::CopyFrom(const CMsgDOTASeries_LiveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTASeries.LiveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeries_LiveGame::IsInitialized() const {
  return true;
}

void CMsgDOTASeries_LiveGame::InternalSwap(CMsgDOTASeries_LiveGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTASeries_LiveGame, _impl_.team_dire_score_)
      + sizeof(CMsgDOTASeries_LiveGame::_impl_.team_dire_score_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTASeries_LiveGame, _impl_.team_radiant_)>(
          reinterpret_cast<char*>(&_impl_.team_radiant_),
          reinterpret_cast<char*>(&other->_impl_.team_radiant_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTASeries_LiveGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[21]);
}

// ===================================================================

class CMsgDOTASeries::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTASeries>()._impl_._has_bits_);
  static void set_has_series_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_series_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgDOTASeries_TeamInfo& team_1(const CMsgDOTASeries* msg);
  static void set_has_team_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgDOTASeries_TeamInfo& team_2(const CMsgDOTASeries* msg);
  static void set_has_team_2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgDOTASeries_LiveGame& live_game(const CMsgDOTASeries* msg);
  static void set_has_live_game(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgDOTASeries_TeamInfo&
CMsgDOTASeries::_Internal::team_1(const CMsgDOTASeries* msg) {
  return *msg->_impl_.team_1_;
}
const ::CMsgDOTASeries_TeamInfo&
CMsgDOTASeries::_Internal::team_2(const CMsgDOTASeries* msg) {
  return *msg->_impl_.team_2_;
}
const ::CMsgDOTASeries_LiveGame&
CMsgDOTASeries::_Internal::live_game(const CMsgDOTASeries* msg) {
  return *msg->_impl_.live_game_;
}
void CMsgDOTASeries::clear_match_minimal() {
  _impl_.match_minimal_.Clear();
}
CMsgDOTASeries::CMsgDOTASeries(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTASeries)
}
CMsgDOTASeries::CMsgDOTASeries(const CMsgDOTASeries& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTASeries* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_minimal_){from._impl_.match_minimal_}
    , decltype(_impl_.team_1_){nullptr}
    , decltype(_impl_.team_2_){nullptr}
    , decltype(_impl_.live_game_){nullptr}
    , decltype(_impl_.series_id_){}
    , decltype(_impl_.series_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_team_1()) {
    _this->_impl_.team_1_ = new ::CMsgDOTASeries_TeamInfo(*from._impl_.team_1_);
  }
  if (from._internal_has_team_2()) {
    _this->_impl_.team_2_ = new ::CMsgDOTASeries_TeamInfo(*from._impl_.team_2_);
  }
  if (from._internal_has_live_game()) {
    _this->_impl_.live_game_ = new ::CMsgDOTASeries_LiveGame(*from._impl_.live_game_);
  }
  ::memcpy(&_impl_.series_id_, &from._impl_.series_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.series_type_) -
    reinterpret_cast<char*>(&_impl_.series_id_)) + sizeof(_impl_.series_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASeries)
}

inline void CMsgDOTASeries::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_minimal_){arena}
    , decltype(_impl_.team_1_){nullptr}
    , decltype(_impl_.team_2_){nullptr}
    , decltype(_impl_.live_game_){nullptr}
    , decltype(_impl_.series_id_){0u}
    , decltype(_impl_.series_type_){0u}
  };
}

CMsgDOTASeries::~CMsgDOTASeries() {
  // @@protoc_insertion_point(destructor:CMsgDOTASeries)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTASeries::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.match_minimal_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.team_1_;
  if (this != internal_default_instance()) delete _impl_.team_2_;
  if (this != internal_default_instance()) delete _impl_.live_game_;
}

void CMsgDOTASeries::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTASeries::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTASeries)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.match_minimal_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.team_1_ != nullptr);
      _impl_.team_1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.team_2_ != nullptr);
      _impl_.team_2_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.live_game_ != nullptr);
      _impl_.live_game_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.series_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.series_type_) -
        reinterpret_cast<char*>(&_impl_.series_id_)) + sizeof(_impl_.series_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTASeries::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 series_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_series_id(&has_bits);
          _impl_.series_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 series_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_series_type(&has_bits);
          _impl_.series_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTASeries.TeamInfo team_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTASeries.TeamInfo team_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDOTAMatchMinimal match_minimal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_match_minimal(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTASeries.LiveGame live_game = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_live_game(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTASeries::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASeries)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 series_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_series_id(), target);
  }

  // optional uint32 series_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_series_type(), target);
  }

  // optional .CMsgDOTASeries.TeamInfo team_1 = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::team_1(this),
        _Internal::team_1(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgDOTASeries.TeamInfo team_2 = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::team_2(this),
        _Internal::team_2(this).GetCachedSize(), target, stream);
  }

  // repeated .CMsgDOTAMatchMinimal match_minimal = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_match_minimal_size()); i < n; i++) {
    const auto& repfield = this->_internal_match_minimal(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .CMsgDOTASeries.LiveGame live_game = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::live_game(this),
        _Internal::live_game(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASeries)
  return target;
}

size_t CMsgDOTASeries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTASeries)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAMatchMinimal match_minimal = 5;
  total_size += 1UL * this->_internal_match_minimal_size();
  for (const auto& msg : this->_impl_.match_minimal_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgDOTASeries.TeamInfo team_1 = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.team_1_);
    }

    // optional .CMsgDOTASeries.TeamInfo team_2 = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.team_2_);
    }

    // optional .CMsgDOTASeries.LiveGame live_game = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.live_game_);
    }

    // optional uint32 series_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_series_id());
    }

    // optional uint32 series_type = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_series_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTASeries::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTASeries::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTASeries::GetClassData() const { return &_class_data_; }


void CMsgDOTASeries::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTASeries*>(&to_msg);
  auto& from = static_cast<const CMsgDOTASeries&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTASeries)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.match_minimal_.MergeFrom(from._impl_.match_minimal_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_team_1()->::CMsgDOTASeries_TeamInfo::MergeFrom(
          from._internal_team_1());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_team_2()->::CMsgDOTASeries_TeamInfo::MergeFrom(
          from._internal_team_2());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_live_game()->::CMsgDOTASeries_LiveGame::MergeFrom(
          from._internal_live_game());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.series_id_ = from._impl_.series_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.series_type_ = from._impl_.series_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTASeries::CopyFrom(const CMsgDOTASeries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTASeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeries::IsInitialized() const {
  return true;
}

void CMsgDOTASeries::InternalSwap(CMsgDOTASeries* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.match_minimal_.InternalSwap(&other->_impl_.match_minimal_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTASeries, _impl_.series_type_)
      + sizeof(CMsgDOTASeries::_impl_.series_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTASeries, _impl_.team_1_)>(
          reinterpret_cast<char*>(&_impl_.team_1_),
          reinterpret_cast<char*>(&other->_impl_.team_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTASeries::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[22]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CSourceTVGameSmall_Player*
Arena::CreateMaybeMessage< ::CSourceTVGameSmall_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSourceTVGameSmall_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CSourceTVGameSmall*
Arena::CreateMaybeMessage< ::CSourceTVGameSmall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSourceTVGameSmall >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCFindTopSourceTVGames*
Arena::CreateMaybeMessage< ::CMsgClientToGCFindTopSourceTVGames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCFindTopSourceTVGames >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientFindTopSourceTVGamesResponse*
Arena::CreateMaybeMessage< ::CMsgGCToClientFindTopSourceTVGamesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientFindTopSourceTVGamesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientTopWeekendTourneyGames*
Arena::CreateMaybeMessage< ::CMsgGCToClientTopWeekendTourneyGames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientTopWeekendTourneyGames >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCTopLeagueMatchesRequest*
Arena::CreateMaybeMessage< ::CMsgClientToGCTopLeagueMatchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCTopLeagueMatchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCTopFriendMatchesRequest*
Arena::CreateMaybeMessage< ::CMsgClientToGCTopFriendMatchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCTopFriendMatchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCMatchesMinimalRequest*
Arena::CreateMaybeMessage< ::CMsgClientToGCMatchesMinimalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCMatchesMinimalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCMatchesMinimalResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCMatchesMinimalResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCMatchesMinimalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientTopLeagueMatchesResponse*
Arena::CreateMaybeMessage< ::CMsgGCToClientTopLeagueMatchesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientTopLeagueMatchesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientTopFriendMatchesResponse*
Arena::CreateMaybeMessage< ::CMsgGCToClientTopFriendMatchesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientTopFriendMatchesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSpectateFriendGame*
Arena::CreateMaybeMessage< ::CMsgSpectateFriendGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSpectateFriendGame >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSpectateFriendGameResponse*
Arena::CreateMaybeMessage< ::CMsgSpectateFriendGameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSpectateFriendGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAReplayDownloadInfo_Highlight*
Arena::CreateMaybeMessage< ::CDOTAReplayDownloadInfo_Highlight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAReplayDownloadInfo_Highlight >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAReplayDownloadInfo*
Arena::CreateMaybeMessage< ::CDOTAReplayDownloadInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAReplayDownloadInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgWatchGame*
Arena::CreateMaybeMessage< ::CMsgWatchGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgWatchGame >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCancelWatchGame*
Arena::CreateMaybeMessage< ::CMsgCancelWatchGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCancelWatchGame >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgWatchGameResponse*
Arena::CreateMaybeMessage< ::CMsgWatchGameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgWatchGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyLeaderWatchGamePrompt*
Arena::CreateMaybeMessage< ::CMsgPartyLeaderWatchGamePrompt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyLeaderWatchGamePrompt >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTABroadcasterInfo*
Arena::CreateMaybeMessage< ::CDOTABroadcasterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTABroadcasterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTASeries_TeamInfo*
Arena::CreateMaybeMessage< ::CMsgDOTASeries_TeamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTASeries_TeamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTASeries_LiveGame*
Arena::CreateMaybeMessage< ::CMsgDOTASeries_LiveGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTASeries_LiveGame >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTASeries*
Arena::CreateMaybeMessage< ::CMsgDOTASeries >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTASeries >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
