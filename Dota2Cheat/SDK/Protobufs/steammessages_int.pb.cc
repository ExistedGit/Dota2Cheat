// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_int.proto

#include "steammessages_int.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgWebAPIKey::CMsgWebAPIKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.domain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.publisher_group_id_)*/0u
  , /*decltype(_impl_.key_id_)*/0u
  , /*decltype(_impl_.status_)*/255u} {}
struct CMsgWebAPIKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgWebAPIKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgWebAPIKeyDefaultTypeInternal() {}
  union {
    CMsgWebAPIKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgWebAPIKeyDefaultTypeInternal _CMsgWebAPIKey_default_instance_;
PROTOBUF_CONSTEXPR CMsgHttpRequest_RequestHeader::CMsgHttpRequest_RequestHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CMsgHttpRequest_RequestHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgHttpRequest_RequestHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgHttpRequest_RequestHeaderDefaultTypeInternal() {}
  union {
    CMsgHttpRequest_RequestHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgHttpRequest_RequestHeaderDefaultTypeInternal _CMsgHttpRequest_RequestHeader_default_instance_;
PROTOBUF_CONSTEXPR CMsgHttpRequest_QueryParam::CMsgHttpRequest_QueryParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CMsgHttpRequest_QueryParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgHttpRequest_QueryParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgHttpRequest_QueryParamDefaultTypeInternal() {}
  union {
    CMsgHttpRequest_QueryParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgHttpRequest_QueryParamDefaultTypeInternal _CMsgHttpRequest_QueryParam_default_instance_;
PROTOBUF_CONSTEXPR CMsgHttpRequest::CMsgHttpRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.headers_)*/{}
  , /*decltype(_impl_.get_params_)*/{}
  , /*decltype(_impl_.post_params_)*/{}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_method_)*/0u
  , /*decltype(_impl_.absolute_timeout_)*/0u
  , /*decltype(_impl_.use_https_)*/false} {}
struct CMsgHttpRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgHttpRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgHttpRequestDefaultTypeInternal() {}
  union {
    CMsgHttpRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgHttpRequestDefaultTypeInternal _CMsgHttpRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgWebAPIRequest::CMsgWebAPIRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.interface_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.api_key_)*/nullptr
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_.routing_app_id_)*/0u} {}
struct CMsgWebAPIRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgWebAPIRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgWebAPIRequestDefaultTypeInternal() {}
  union {
    CMsgWebAPIRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgWebAPIRequestDefaultTypeInternal _CMsgWebAPIRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgHttpResponse_ResponseHeader::CMsgHttpResponse_ResponseHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CMsgHttpResponse_ResponseHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgHttpResponse_ResponseHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgHttpResponse_ResponseHeaderDefaultTypeInternal() {}
  union {
    CMsgHttpResponse_ResponseHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgHttpResponse_ResponseHeaderDefaultTypeInternal _CMsgHttpResponse_ResponseHeader_default_instance_;
PROTOBUF_CONSTEXPR CMsgHttpResponse::CMsgHttpResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.headers_)*/{}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_code_)*/0u} {}
struct CMsgHttpResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgHttpResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgHttpResponseDefaultTypeInternal() {}
  union {
    CMsgHttpResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgHttpResponseDefaultTypeInternal _CMsgHttpResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgAMFindAccounts::CMsgAMFindAccounts(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.search_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.search_type_)*/0u} {}
struct CMsgAMFindAccountsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAMFindAccountsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAMFindAccountsDefaultTypeInternal() {}
  union {
    CMsgAMFindAccounts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAMFindAccountsDefaultTypeInternal _CMsgAMFindAccounts_default_instance_;
PROTOBUF_CONSTEXPR CMsgAMFindAccountsResponse::CMsgAMFindAccountsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.steam_id_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgAMFindAccountsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAMFindAccountsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAMFindAccountsResponseDefaultTypeInternal() {}
  union {
    CMsgAMFindAccountsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAMFindAccountsResponseDefaultTypeInternal _CMsgAMFindAccountsResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgNotifyWatchdog::CMsgNotifyWatchdog(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.recipient_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/0u
  , /*decltype(_impl_.alert_type_)*/0u
  , /*decltype(_impl_.critical_)*/false
  , /*decltype(_impl_.time_)*/0u
  , /*decltype(_impl_.appid_)*/0u} {}
struct CMsgNotifyWatchdogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgNotifyWatchdogDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgNotifyWatchdogDefaultTypeInternal() {}
  union {
    CMsgNotifyWatchdog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgNotifyWatchdogDefaultTypeInternal _CMsgNotifyWatchdog_default_instance_;
PROTOBUF_CONSTEXPR CMsgAMGetLicenses::CMsgAMGetLicenses(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}} {}
struct CMsgAMGetLicensesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAMGetLicensesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAMGetLicensesDefaultTypeInternal() {}
  union {
    CMsgAMGetLicenses _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAMGetLicensesDefaultTypeInternal _CMsgAMGetLicenses_default_instance_;
PROTOBUF_CONSTEXPR CMsgPackageLicense::CMsgPackageLicense(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.package_id_)*/0u
  , /*decltype(_impl_.time_created_)*/0u
  , /*decltype(_impl_.owner_id_)*/0u} {}
struct CMsgPackageLicenseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPackageLicenseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPackageLicenseDefaultTypeInternal() {}
  union {
    CMsgPackageLicense _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPackageLicenseDefaultTypeInternal _CMsgPackageLicense_default_instance_;
PROTOBUF_CONSTEXPR CMsgAMGetLicensesResponse::CMsgAMGetLicensesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.license_)*/{}
  , /*decltype(_impl_.result_)*/0u} {}
struct CMsgAMGetLicensesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAMGetLicensesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAMGetLicensesResponseDefaultTypeInternal() {}
  union {
    CMsgAMGetLicensesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAMGetLicensesResponseDefaultTypeInternal _CMsgAMGetLicensesResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgAMGetUserGameStats::CMsgAMGetUserGameStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.game_id_)*/uint64_t{0u}} {}
struct CMsgAMGetUserGameStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAMGetUserGameStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAMGetUserGameStatsDefaultTypeInternal() {}
  union {
    CMsgAMGetUserGameStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAMGetUserGameStatsDefaultTypeInternal _CMsgAMGetUserGameStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgAMGetUserGameStatsResponse_Stats::CMsgAMGetUserGameStatsResponse_Stats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stat_id_)*/0u
  , /*decltype(_impl_.stat_value_)*/0u} {}
struct CMsgAMGetUserGameStatsResponse_StatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAMGetUserGameStatsResponse_StatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAMGetUserGameStatsResponse_StatsDefaultTypeInternal() {}
  union {
    CMsgAMGetUserGameStatsResponse_Stats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAMGetUserGameStatsResponse_StatsDefaultTypeInternal _CMsgAMGetUserGameStatsResponse_Stats_default_instance_;
PROTOBUF_CONSTEXPR CMsgAMGetUserGameStatsResponse_Achievement_Blocks::CMsgAMGetUserGameStatsResponse_Achievement_Blocks(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.achievement_id_)*/0u
  , /*decltype(_impl_.achievement_bit_id_)*/0u
  , /*decltype(_impl_.unlock_time_)*/0u} {}
struct CMsgAMGetUserGameStatsResponse_Achievement_BlocksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAMGetUserGameStatsResponse_Achievement_BlocksDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAMGetUserGameStatsResponse_Achievement_BlocksDefaultTypeInternal() {}
  union {
    CMsgAMGetUserGameStatsResponse_Achievement_Blocks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAMGetUserGameStatsResponse_Achievement_BlocksDefaultTypeInternal _CMsgAMGetUserGameStatsResponse_Achievement_Blocks_default_instance_;
PROTOBUF_CONSTEXPR CMsgAMGetUserGameStatsResponse::CMsgAMGetUserGameStatsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.achievement_blocks_)*/{}
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.game_id_)*/uint64_t{0u}
  , /*decltype(_impl_.eresult_)*/2} {}
struct CMsgAMGetUserGameStatsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAMGetUserGameStatsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAMGetUserGameStatsResponseDefaultTypeInternal() {}
  union {
    CMsgAMGetUserGameStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAMGetUserGameStatsResponseDefaultTypeInternal _CMsgAMGetUserGameStatsResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCGetCommandList::CMsgGCGetCommandList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.command_prefix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/0u} {}
struct CMsgGCGetCommandListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCGetCommandListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCGetCommandListDefaultTypeInternal() {}
  union {
    CMsgGCGetCommandList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCGetCommandListDefaultTypeInternal _CMsgGCGetCommandList_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCGetCommandListResponse::CMsgGCGetCommandListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.command_name_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgGCGetCommandListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCGetCommandListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCGetCommandListResponseDefaultTypeInternal() {}
  union {
    CMsgGCGetCommandListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCGetCommandListResponseDefaultTypeInternal _CMsgGCGetCommandListResponse_default_instance_;
PROTOBUF_CONSTEXPR CGCMsgMemCachedGet::CGCMsgMemCachedGet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGCMsgMemCachedGetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCMsgMemCachedGetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCMsgMemCachedGetDefaultTypeInternal() {}
  union {
    CGCMsgMemCachedGet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCMsgMemCachedGetDefaultTypeInternal _CGCMsgMemCachedGet_default_instance_;
PROTOBUF_CONSTEXPR CGCMsgMemCachedGetResponse_ValueTag::CGCMsgMemCachedGetResponse_ValueTag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.found_)*/false} {}
struct CGCMsgMemCachedGetResponse_ValueTagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCMsgMemCachedGetResponse_ValueTagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCMsgMemCachedGetResponse_ValueTagDefaultTypeInternal() {}
  union {
    CGCMsgMemCachedGetResponse_ValueTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCMsgMemCachedGetResponse_ValueTagDefaultTypeInternal _CGCMsgMemCachedGetResponse_ValueTag_default_instance_;
PROTOBUF_CONSTEXPR CGCMsgMemCachedGetResponse::CGCMsgMemCachedGetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGCMsgMemCachedGetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCMsgMemCachedGetResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCMsgMemCachedGetResponseDefaultTypeInternal() {}
  union {
    CGCMsgMemCachedGetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCMsgMemCachedGetResponseDefaultTypeInternal _CGCMsgMemCachedGetResponse_default_instance_;
PROTOBUF_CONSTEXPR CGCMsgMemCachedSet_KeyPair::CGCMsgMemCachedSet_KeyPair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CGCMsgMemCachedSet_KeyPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCMsgMemCachedSet_KeyPairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCMsgMemCachedSet_KeyPairDefaultTypeInternal() {}
  union {
    CGCMsgMemCachedSet_KeyPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCMsgMemCachedSet_KeyPairDefaultTypeInternal _CGCMsgMemCachedSet_KeyPair_default_instance_;
PROTOBUF_CONSTEXPR CGCMsgMemCachedSet::CGCMsgMemCachedSet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGCMsgMemCachedSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCMsgMemCachedSetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCMsgMemCachedSetDefaultTypeInternal() {}
  union {
    CGCMsgMemCachedSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCMsgMemCachedSetDefaultTypeInternal _CGCMsgMemCachedSet_default_instance_;
PROTOBUF_CONSTEXPR CGCMsgMemCachedDelete::CGCMsgMemCachedDelete(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGCMsgMemCachedDeleteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCMsgMemCachedDeleteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCMsgMemCachedDeleteDefaultTypeInternal() {}
  union {
    CGCMsgMemCachedDelete _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCMsgMemCachedDeleteDefaultTypeInternal _CGCMsgMemCachedDelete_default_instance_;
PROTOBUF_CONSTEXPR CGCMsgMemCachedStats::CGCMsgMemCachedStats(
    ::_pbi::ConstantInitialized) {}
struct CGCMsgMemCachedStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCMsgMemCachedStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCMsgMemCachedStatsDefaultTypeInternal() {}
  union {
    CGCMsgMemCachedStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCMsgMemCachedStatsDefaultTypeInternal _CGCMsgMemCachedStats_default_instance_;
PROTOBUF_CONSTEXPR CGCMsgMemCachedStatsResponse::CGCMsgMemCachedStatsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.curr_connections_)*/uint64_t{0u}
  , /*decltype(_impl_.cmd_get_)*/uint64_t{0u}
  , /*decltype(_impl_.cmd_set_)*/uint64_t{0u}
  , /*decltype(_impl_.cmd_flush_)*/uint64_t{0u}
  , /*decltype(_impl_.get_hits_)*/uint64_t{0u}
  , /*decltype(_impl_.get_misses_)*/uint64_t{0u}
  , /*decltype(_impl_.delete_hits_)*/uint64_t{0u}
  , /*decltype(_impl_.delete_misses_)*/uint64_t{0u}
  , /*decltype(_impl_.bytes_read_)*/uint64_t{0u}
  , /*decltype(_impl_.bytes_written_)*/uint64_t{0u}
  , /*decltype(_impl_.limit_maxbytes_)*/uint64_t{0u}
  , /*decltype(_impl_.curr_items_)*/uint64_t{0u}
  , /*decltype(_impl_.evictions_)*/uint64_t{0u}
  , /*decltype(_impl_.bytes_)*/uint64_t{0u}} {}
struct CGCMsgMemCachedStatsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCMsgMemCachedStatsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCMsgMemCachedStatsResponseDefaultTypeInternal() {}
  union {
    CGCMsgMemCachedStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCMsgMemCachedStatsResponseDefaultTypeInternal _CGCMsgMemCachedStatsResponse_default_instance_;
PROTOBUF_CONSTEXPR CGCMsgSQLStats::CGCMsgSQLStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.schema_catalog_)*/0u} {}
struct CGCMsgSQLStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCMsgSQLStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCMsgSQLStatsDefaultTypeInternal() {}
  union {
    CGCMsgSQLStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCMsgSQLStatsDefaultTypeInternal _CGCMsgSQLStats_default_instance_;
PROTOBUF_CONSTEXPR CGCMsgSQLStatsResponse::CGCMsgSQLStatsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.threads_)*/0u
  , /*decltype(_impl_.threads_connected_)*/0u
  , /*decltype(_impl_.threads_active_)*/0u
  , /*decltype(_impl_.operations_submitted_)*/0u
  , /*decltype(_impl_.prepared_statements_executed_)*/0u
  , /*decltype(_impl_.non_prepared_statements_executed_)*/0u
  , /*decltype(_impl_.deadlock_retries_)*/0u
  , /*decltype(_impl_.operations_timed_out_in_queue_)*/0u
  , /*decltype(_impl_.errors_)*/0u} {}
struct CGCMsgSQLStatsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCMsgSQLStatsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCMsgSQLStatsResponseDefaultTypeInternal() {}
  union {
    CGCMsgSQLStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCMsgSQLStatsResponseDefaultTypeInternal _CGCMsgSQLStatsResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgAMAddFreeLicense::CMsgAMAddFreeLicense(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.store_country_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.ip_public_)*/0u
  , /*decltype(_impl_.packageid_)*/0u} {}
struct CMsgAMAddFreeLicenseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAMAddFreeLicenseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAMAddFreeLicenseDefaultTypeInternal() {}
  union {
    CMsgAMAddFreeLicense _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAMAddFreeLicenseDefaultTypeInternal _CMsgAMAddFreeLicense_default_instance_;
PROTOBUF_CONSTEXPR CMsgAMAddFreeLicenseResponse::CMsgAMAddFreeLicenseResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.transid_)*/uint64_t{0u}
  , /*decltype(_impl_.purchase_result_detail_)*/0
  , /*decltype(_impl_.eresult_)*/2} {}
struct CMsgAMAddFreeLicenseResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAMAddFreeLicenseResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAMAddFreeLicenseResponseDefaultTypeInternal() {}
  union {
    CMsgAMAddFreeLicenseResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAMAddFreeLicenseResponseDefaultTypeInternal _CMsgAMAddFreeLicenseResponse_default_instance_;
PROTOBUF_CONSTEXPR CGCMsgGetIPLocation::CGCMsgGetIPLocation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ips_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGCMsgGetIPLocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCMsgGetIPLocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCMsgGetIPLocationDefaultTypeInternal() {}
  union {
    CGCMsgGetIPLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCMsgGetIPLocationDefaultTypeInternal _CGCMsgGetIPLocation_default_instance_;
PROTOBUF_CONSTEXPR CGCMsgGetIPASN::CGCMsgGetIPASN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ips_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGCMsgGetIPASNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCMsgGetIPASNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCMsgGetIPASNDefaultTypeInternal() {}
  union {
    CGCMsgGetIPASN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCMsgGetIPASNDefaultTypeInternal _CGCMsgGetIPASN_default_instance_;
PROTOBUF_CONSTEXPR CIPASNInfo::CIPASNInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ip_)*/0u
  , /*decltype(_impl_.asn_)*/0u} {}
struct CIPASNInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CIPASNInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CIPASNInfoDefaultTypeInternal() {}
  union {
    CIPASNInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CIPASNInfoDefaultTypeInternal _CIPASNInfo_default_instance_;
PROTOBUF_CONSTEXPR CGCMsgGetIPASNResponse::CGCMsgGetIPASNResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.infos_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGCMsgGetIPASNResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCMsgGetIPASNResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCMsgGetIPASNResponseDefaultTypeInternal() {}
  union {
    CGCMsgGetIPASNResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCMsgGetIPASNResponseDefaultTypeInternal _CGCMsgGetIPASNResponse_default_instance_;
PROTOBUF_CONSTEXPR CGCMsgSystemStatsSchema::CGCMsgSystemStatsSchema(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.schema_kv_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gc_app_id_)*/0u} {}
struct CGCMsgSystemStatsSchemaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCMsgSystemStatsSchemaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCMsgSystemStatsSchemaDefaultTypeInternal() {}
  union {
    CGCMsgSystemStatsSchema _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCMsgSystemStatsSchemaDefaultTypeInternal _CGCMsgSystemStatsSchema_default_instance_;
PROTOBUF_CONSTEXPR CGCMsgGetSystemStats::CGCMsgGetSystemStats(
    ::_pbi::ConstantInitialized) {}
struct CGCMsgGetSystemStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCMsgGetSystemStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCMsgGetSystemStatsDefaultTypeInternal() {}
  union {
    CGCMsgGetSystemStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCMsgGetSystemStatsDefaultTypeInternal _CGCMsgGetSystemStats_default_instance_;
PROTOBUF_CONSTEXPR CGCMsgGetSystemStatsResponse::CGCMsgGetSystemStatsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stats_kv_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gc_app_id_)*/0u
  , /*decltype(_impl_.active_jobs_)*/0u
  , /*decltype(_impl_.yielding_jobs_)*/0u
  , /*decltype(_impl_.user_sessions_)*/0u
  , /*decltype(_impl_.game_server_sessions_)*/0u
  , /*decltype(_impl_.socaches_)*/0u
  , /*decltype(_impl_.socaches_to_unload_)*/0u
  , /*decltype(_impl_.socaches_loading_)*/0u
  , /*decltype(_impl_.writeback_queue_)*/0u
  , /*decltype(_impl_.steamid_locks_)*/0u
  , /*decltype(_impl_.logon_queue_)*/0u
  , /*decltype(_impl_.logon_jobs_)*/0u} {}
struct CGCMsgGetSystemStatsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCMsgGetSystemStatsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCMsgGetSystemStatsResponseDefaultTypeInternal() {}
  union {
    CGCMsgGetSystemStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCMsgGetSystemStatsResponseDefaultTypeInternal _CGCMsgGetSystemStatsResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgAMSendEmail_ReplacementToken::CMsgAMSendEmail_ReplacementToken(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CMsgAMSendEmail_ReplacementTokenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAMSendEmail_ReplacementTokenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAMSendEmail_ReplacementTokenDefaultTypeInternal() {}
  union {
    CMsgAMSendEmail_ReplacementToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAMSendEmail_ReplacementTokenDefaultTypeInternal _CMsgAMSendEmail_ReplacementToken_default_instance_;
PROTOBUF_CONSTEXPR CMsgAMSendEmail_PersonaNameReplacementToken::CMsgAMSendEmail_PersonaNameReplacementToken(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}} {}
struct CMsgAMSendEmail_PersonaNameReplacementTokenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAMSendEmail_PersonaNameReplacementTokenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAMSendEmail_PersonaNameReplacementTokenDefaultTypeInternal() {}
  union {
    CMsgAMSendEmail_PersonaNameReplacementToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAMSendEmail_PersonaNameReplacementTokenDefaultTypeInternal _CMsgAMSendEmail_PersonaNameReplacementToken_default_instance_;
PROTOBUF_CONSTEXPR CMsgAMSendEmail::CMsgAMSendEmail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.persona_name_tokens_)*/{}
  , /*decltype(_impl_.tokens_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.email_msg_type_)*/0u
  , /*decltype(_impl_.email_format_)*/0u
  , /*decltype(_impl_.source_gc_)*/0u} {}
struct CMsgAMSendEmailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAMSendEmailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAMSendEmailDefaultTypeInternal() {}
  union {
    CMsgAMSendEmail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAMSendEmailDefaultTypeInternal _CMsgAMSendEmail_default_instance_;
PROTOBUF_CONSTEXPR CMsgAMSendEmailResponse::CMsgAMSendEmailResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.eresult_)*/2u} {}
struct CMsgAMSendEmailResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAMSendEmailResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAMSendEmailResponseDefaultTypeInternal() {}
  union {
    CMsgAMSendEmailResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAMSendEmailResponseDefaultTypeInternal _CMsgAMSendEmailResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCGetEmailTemplate::CMsgGCGetEmailTemplate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.email_msg_type_)*/0u
  , /*decltype(_impl_.email_lang_)*/0
  , /*decltype(_impl_.email_format_)*/0} {}
struct CMsgGCGetEmailTemplateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCGetEmailTemplateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCGetEmailTemplateDefaultTypeInternal() {}
  union {
    CMsgGCGetEmailTemplate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCGetEmailTemplateDefaultTypeInternal _CMsgGCGetEmailTemplate_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCGetEmailTemplateResponse::CMsgGCGetEmailTemplateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.template__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.template_exists_)*/false
  , /*decltype(_impl_.eresult_)*/2u} {}
struct CMsgGCGetEmailTemplateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCGetEmailTemplateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCGetEmailTemplateResponseDefaultTypeInternal() {}
  union {
    CMsgGCGetEmailTemplateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCGetEmailTemplateResponseDefaultTypeInternal _CMsgGCGetEmailTemplateResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgAMGrantGuestPasses2::CMsgAMGrantGuestPasses2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.package_id_)*/0u
  , /*decltype(_impl_.passes_to_grant_)*/0
  , /*decltype(_impl_.days_to_expiration_)*/0
  , /*decltype(_impl_.action_)*/0} {}
struct CMsgAMGrantGuestPasses2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAMGrantGuestPasses2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAMGrantGuestPasses2DefaultTypeInternal() {}
  union {
    CMsgAMGrantGuestPasses2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAMGrantGuestPasses2DefaultTypeInternal _CMsgAMGrantGuestPasses2_default_instance_;
PROTOBUF_CONSTEXPR CMsgAMGrantGuestPasses2Response::CMsgAMGrantGuestPasses2Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.passes_granted_)*/0
  , /*decltype(_impl_.eresult_)*/2} {}
struct CMsgAMGrantGuestPasses2ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAMGrantGuestPasses2ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAMGrantGuestPasses2ResponseDefaultTypeInternal() {}
  union {
    CMsgAMGrantGuestPasses2Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAMGrantGuestPasses2ResponseDefaultTypeInternal _CMsgAMGrantGuestPasses2Response_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCGetPersonaNames::CMsgGCGetPersonaNames(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.steamids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgGCGetPersonaNamesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCGetPersonaNamesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCGetPersonaNamesDefaultTypeInternal() {}
  union {
    CMsgGCGetPersonaNames _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCGetPersonaNamesDefaultTypeInternal _CMsgGCGetPersonaNames_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCGetPersonaNames_Response_PersonaName::CMsgGCGetPersonaNames_Response_PersonaName(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.persona_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}} {}
struct CMsgGCGetPersonaNames_Response_PersonaNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCGetPersonaNames_Response_PersonaNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCGetPersonaNames_Response_PersonaNameDefaultTypeInternal() {}
  union {
    CMsgGCGetPersonaNames_Response_PersonaName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCGetPersonaNames_Response_PersonaNameDefaultTypeInternal _CMsgGCGetPersonaNames_Response_PersonaName_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCGetPersonaNames_Response::CMsgGCGetPersonaNames_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.succeeded_lookups_)*/{}
  , /*decltype(_impl_.failed_lookup_steamids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgGCGetPersonaNames_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCGetPersonaNames_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCGetPersonaNames_ResponseDefaultTypeInternal() {}
  union {
    CMsgGCGetPersonaNames_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCGetPersonaNames_ResponseDefaultTypeInternal _CMsgGCGetPersonaNames_Response_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCheckFriendship::CMsgGCCheckFriendship(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_left_)*/uint64_t{0u}
  , /*decltype(_impl_.steamid_right_)*/uint64_t{0u}} {}
struct CMsgGCCheckFriendshipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCheckFriendshipDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCheckFriendshipDefaultTypeInternal() {}
  union {
    CMsgGCCheckFriendship _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCheckFriendshipDefaultTypeInternal _CMsgGCCheckFriendship_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCheckFriendship_Response::CMsgGCCheckFriendship_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.found_friendship_)*/false} {}
struct CMsgGCCheckFriendship_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCheckFriendship_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCheckFriendship_ResponseDefaultTypeInternal() {}
  union {
    CMsgGCCheckFriendship_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCheckFriendship_ResponseDefaultTypeInternal _CMsgGCCheckFriendship_Response_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCGetAppFriendsList::CMsgGCGetAppFriendsList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.include_friendship_timestamps_)*/false} {}
struct CMsgGCGetAppFriendsListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCGetAppFriendsListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCGetAppFriendsListDefaultTypeInternal() {}
  union {
    CMsgGCGetAppFriendsList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCGetAppFriendsListDefaultTypeInternal _CMsgGCGetAppFriendsList_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCGetAppFriendsList_Response::CMsgGCGetAppFriendsList_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamids_)*/{}
  , /*decltype(_impl_.friendship_timestamps_)*/{}
  , /*decltype(_impl_.last_playtimes_)*/{}
  , /*decltype(_impl_.success_)*/false} {}
struct CMsgGCGetAppFriendsList_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCGetAppFriendsList_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCGetAppFriendsList_ResponseDefaultTypeInternal() {}
  union {
    CMsgGCGetAppFriendsList_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCGetAppFriendsList_ResponseDefaultTypeInternal _CMsgGCGetAppFriendsList_Response_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetDirectory_SubGC::CMsgGCMsgMasterSetDirectory_SubGC(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.box_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.command_line_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gc_binary_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dir_index_)*/-1} {}
struct CMsgGCMsgMasterSetDirectory_SubGCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetDirectory_SubGCDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCMsgMasterSetDirectory_SubGCDefaultTypeInternal() {}
  union {
    CMsgGCMsgMasterSetDirectory_SubGC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCMsgMasterSetDirectory_SubGCDefaultTypeInternal _CMsgGCMsgMasterSetDirectory_SubGC_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetDirectory::CMsgGCMsgMasterSetDirectory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dir_)*/{}
  , /*decltype(_impl_.master_dir_index_)*/-1} {}
struct CMsgGCMsgMasterSetDirectoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetDirectoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCMsgMasterSetDirectoryDefaultTypeInternal() {}
  union {
    CMsgGCMsgMasterSetDirectory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCMsgMasterSetDirectoryDefaultTypeInternal _CMsgGCMsgMasterSetDirectory_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetDirectory_Response::CMsgGCMsgMasterSetDirectory_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eresult_)*/2} {}
struct CMsgGCMsgMasterSetDirectory_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetDirectory_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCMsgMasterSetDirectory_ResponseDefaultTypeInternal() {}
  union {
    CMsgGCMsgMasterSetDirectory_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCMsgMasterSetDirectory_ResponseDefaultTypeInternal _CMsgGCMsgMasterSetDirectory_Response_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCMsgWebAPIJobRequestForwardResponse::CMsgGCMsgWebAPIJobRequestForwardResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dir_index_)*/-1} {}
struct CMsgGCMsgWebAPIJobRequestForwardResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCMsgWebAPIJobRequestForwardResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCMsgWebAPIJobRequestForwardResponseDefaultTypeInternal() {}
  union {
    CMsgGCMsgWebAPIJobRequestForwardResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCMsgWebAPIJobRequestForwardResponseDefaultTypeInternal _CMsgGCMsgWebAPIJobRequestForwardResponse_default_instance_;
PROTOBUF_CONSTEXPR CGCSystemMsg_GetPurchaseTrust_Request::CGCSystemMsg_GetPurchaseTrust_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}} {}
struct CGCSystemMsg_GetPurchaseTrust_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCSystemMsg_GetPurchaseTrust_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCSystemMsg_GetPurchaseTrust_RequestDefaultTypeInternal() {}
  union {
    CGCSystemMsg_GetPurchaseTrust_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCSystemMsg_GetPurchaseTrust_RequestDefaultTypeInternal _CGCSystemMsg_GetPurchaseTrust_Request_default_instance_;
PROTOBUF_CONSTEXPR CGCSystemMsg_GetPurchaseTrust_Response::CGCSystemMsg_GetPurchaseTrust_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.has_prior_purchase_history_)*/false
  , /*decltype(_impl_.has_no_recent_password_resets_)*/false
  , /*decltype(_impl_.is_wallet_cash_trusted_)*/false
  , /*decltype(_impl_.time_all_trusted_)*/0u} {}
struct CGCSystemMsg_GetPurchaseTrust_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCSystemMsg_GetPurchaseTrust_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCSystemMsg_GetPurchaseTrust_ResponseDefaultTypeInternal() {}
  union {
    CGCSystemMsg_GetPurchaseTrust_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCSystemMsg_GetPurchaseTrust_ResponseDefaultTypeInternal _CGCSystemMsg_GetPurchaseTrust_Response_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCHAccountVacStatusChange::CMsgGCHAccountVacStatusChange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.rtime_vacban_starts_)*/0u
  , /*decltype(_impl_.is_banned_now_)*/false
  , /*decltype(_impl_.is_banned_future_)*/false} {}
struct CMsgGCHAccountVacStatusChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCHAccountVacStatusChangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCHAccountVacStatusChangeDefaultTypeInternal() {}
  union {
    CMsgGCHAccountVacStatusChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCHAccountVacStatusChangeDefaultTypeInternal _CMsgGCHAccountVacStatusChange_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCGetPartnerAccountLink::CMsgGCGetPartnerAccountLink(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}} {}
struct CMsgGCGetPartnerAccountLinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCGetPartnerAccountLinkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCGetPartnerAccountLinkDefaultTypeInternal() {}
  union {
    CMsgGCGetPartnerAccountLink _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCGetPartnerAccountLinkDefaultTypeInternal _CMsgGCGetPartnerAccountLink_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCGetPartnerAccountLink_Response::CMsgGCGetPartnerAccountLink_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pwid_)*/0u
  , /*decltype(_impl_.nexonid_)*/0u
  , /*decltype(_impl_.ageclass_)*/0
  , /*decltype(_impl_.id_verified_)*/true
  , /*decltype(_impl_.is_adult_)*/true} {}
struct CMsgGCGetPartnerAccountLink_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCGetPartnerAccountLink_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCGetPartnerAccountLink_ResponseDefaultTypeInternal() {}
  union {
    CMsgGCGetPartnerAccountLink_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCGetPartnerAccountLink_ResponseDefaultTypeInternal _CMsgGCGetPartnerAccountLink_Response_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCRoutingInfo::CMsgGCRoutingInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dir_index_)*/{}
  , /*decltype(_impl_.webapi_param_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_)*/0
  , /*decltype(_impl_.protobuf_field_)*/0u
  , /*decltype(_impl_.fallback_)*/1} {}
struct CMsgGCRoutingInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCRoutingInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCRoutingInfoDefaultTypeInternal() {}
  union {
    CMsgGCRoutingInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCRoutingInfoDefaultTypeInternal _CMsgGCRoutingInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetWebAPIRouting_Entry::CMsgGCMsgMasterSetWebAPIRouting_Entry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.interface_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.routing_)*/nullptr} {}
struct CMsgGCMsgMasterSetWebAPIRouting_EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetWebAPIRouting_EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCMsgMasterSetWebAPIRouting_EntryDefaultTypeInternal() {}
  union {
    CMsgGCMsgMasterSetWebAPIRouting_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCMsgMasterSetWebAPIRouting_EntryDefaultTypeInternal _CMsgGCMsgMasterSetWebAPIRouting_Entry_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetWebAPIRouting::CMsgGCMsgMasterSetWebAPIRouting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgGCMsgMasterSetWebAPIRoutingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetWebAPIRoutingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCMsgMasterSetWebAPIRoutingDefaultTypeInternal() {}
  union {
    CMsgGCMsgMasterSetWebAPIRouting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCMsgMasterSetWebAPIRoutingDefaultTypeInternal _CMsgGCMsgMasterSetWebAPIRouting_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetClientMsgRouting_Entry::CMsgGCMsgMasterSetClientMsgRouting_Entry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.routing_)*/nullptr
  , /*decltype(_impl_.msg_type_)*/0u} {}
struct CMsgGCMsgMasterSetClientMsgRouting_EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetClientMsgRouting_EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCMsgMasterSetClientMsgRouting_EntryDefaultTypeInternal() {}
  union {
    CMsgGCMsgMasterSetClientMsgRouting_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCMsgMasterSetClientMsgRouting_EntryDefaultTypeInternal _CMsgGCMsgMasterSetClientMsgRouting_Entry_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetClientMsgRouting::CMsgGCMsgMasterSetClientMsgRouting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgGCMsgMasterSetClientMsgRoutingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetClientMsgRoutingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCMsgMasterSetClientMsgRoutingDefaultTypeInternal() {}
  union {
    CMsgGCMsgMasterSetClientMsgRouting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCMsgMasterSetClientMsgRoutingDefaultTypeInternal _CMsgGCMsgMasterSetClientMsgRouting_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetWebAPIRouting_Response::CMsgGCMsgMasterSetWebAPIRouting_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.eresult_)*/2} {}
struct CMsgGCMsgMasterSetWebAPIRouting_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetWebAPIRouting_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCMsgMasterSetWebAPIRouting_ResponseDefaultTypeInternal() {}
  union {
    CMsgGCMsgMasterSetWebAPIRouting_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCMsgMasterSetWebAPIRouting_ResponseDefaultTypeInternal _CMsgGCMsgMasterSetWebAPIRouting_Response_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetClientMsgRouting_Response::CMsgGCMsgMasterSetClientMsgRouting_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.eresult_)*/2} {}
struct CMsgGCMsgMasterSetClientMsgRouting_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetClientMsgRouting_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCMsgMasterSetClientMsgRouting_ResponseDefaultTypeInternal() {}
  union {
    CMsgGCMsgMasterSetClientMsgRouting_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCMsgMasterSetClientMsgRouting_ResponseDefaultTypeInternal _CMsgGCMsgMasterSetClientMsgRouting_Response_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCMsgSetOptions_MessageRange::CMsgGCMsgSetOptions_MessageRange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.low_)*/0u
  , /*decltype(_impl_.high_)*/0u} {}
struct CMsgGCMsgSetOptions_MessageRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCMsgSetOptions_MessageRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCMsgSetOptions_MessageRangeDefaultTypeInternal() {}
  union {
    CMsgGCMsgSetOptions_MessageRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCMsgSetOptions_MessageRangeDefaultTypeInternal _CMsgGCMsgSetOptions_MessageRange_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCMsgSetOptions::CMsgGCMsgSetOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.options_)*/{}
  , /*decltype(_impl_.client_msg_ranges_)*/{}
  , /*decltype(_impl_.gcsql_version_)*/1} {}
struct CMsgGCMsgSetOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCMsgSetOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCMsgSetOptionsDefaultTypeInternal() {}
  union {
    CMsgGCMsgSetOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCMsgSetOptionsDefaultTypeInternal _CMsgGCMsgSetOptions_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCHUpdateSession_ExtraField::CMsgGCHUpdateSession_ExtraField(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CMsgGCHUpdateSession_ExtraFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCHUpdateSession_ExtraFieldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCHUpdateSession_ExtraFieldDefaultTypeInternal() {}
  union {
    CMsgGCHUpdateSession_ExtraField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCHUpdateSession_ExtraFieldDefaultTypeInternal _CMsgGCHUpdateSession_ExtraField_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCHUpdateSession::CMsgGCHUpdateSession(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.extra_fields_)*/{}
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.online_)*/false
  , /*decltype(_impl_.server_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.server_addr_)*/0u
  , /*decltype(_impl_.server_port_)*/0u
  , /*decltype(_impl_.os_type_)*/0u
  , /*decltype(_impl_.client_addr_)*/0u} {}
struct CMsgGCHUpdateSessionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCHUpdateSessionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCHUpdateSessionDefaultTypeInternal() {}
  union {
    CMsgGCHUpdateSession _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCHUpdateSessionDefaultTypeInternal _CMsgGCHUpdateSession_default_instance_;
PROTOBUF_CONSTEXPR CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.other_steamids_)*/{}
  , /*decltype(_impl_.app_instance_count_)*/0u} {}
struct CMsgNotificationOfSuspiciousActivity_MultipleGameInstancesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgNotificationOfSuspiciousActivity_MultipleGameInstancesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgNotificationOfSuspiciousActivity_MultipleGameInstancesDefaultTypeInternal() {}
  union {
    CMsgNotificationOfSuspiciousActivity_MultipleGameInstances _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgNotificationOfSuspiciousActivity_MultipleGameInstancesDefaultTypeInternal _CMsgNotificationOfSuspiciousActivity_MultipleGameInstances_default_instance_;
PROTOBUF_CONSTEXPR CMsgNotificationOfSuspiciousActivity::CMsgNotificationOfSuspiciousActivity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.multiple_instances_)*/nullptr
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.appid_)*/0u} {}
struct CMsgNotificationOfSuspiciousActivityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgNotificationOfSuspiciousActivityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgNotificationOfSuspiciousActivityDefaultTypeInternal() {}
  union {
    CMsgNotificationOfSuspiciousActivity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgNotificationOfSuspiciousActivityDefaultTypeInternal _CMsgNotificationOfSuspiciousActivity_default_instance_;
PROTOBUF_CONSTEXPR CMsgDPPartnerMicroTxns_PartnerMicroTxn::CMsgDPPartnerMicroTxns_PartnerMicroTxn(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.country_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.region_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.init_time_)*/0u
  , /*decltype(_impl_.last_update_time_)*/0u
  , /*decltype(_impl_.txn_id_)*/uint64_t{0u}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.line_item_)*/0u
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.price_)*/uint64_t{0u}
  , /*decltype(_impl_.tax_)*/uint64_t{0u}
  , /*decltype(_impl_.def_index_)*/0u
  , /*decltype(_impl_.purchase_type_)*/0u
  , /*decltype(_impl_.price_usd_)*/uint64_t{0u}
  , /*decltype(_impl_.tax_usd_)*/uint64_t{0u}
  , /*decltype(_impl_.steam_txn_type_)*/0u
  , /*decltype(_impl_.quantity_)*/0
  , /*decltype(_impl_.ref_trans_id_)*/uint64_t{0u}} {}
struct CMsgDPPartnerMicroTxns_PartnerMicroTxnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDPPartnerMicroTxns_PartnerMicroTxnDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDPPartnerMicroTxns_PartnerMicroTxnDefaultTypeInternal() {}
  union {
    CMsgDPPartnerMicroTxns_PartnerMicroTxn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDPPartnerMicroTxns_PartnerMicroTxnDefaultTypeInternal _CMsgDPPartnerMicroTxns_PartnerMicroTxn_default_instance_;
PROTOBUF_CONSTEXPR CMsgDPPartnerMicroTxns_PartnerInfo::CMsgDPPartnerMicroTxns_PartnerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.partner_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partner_id_)*/0u} {}
struct CMsgDPPartnerMicroTxns_PartnerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDPPartnerMicroTxns_PartnerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDPPartnerMicroTxns_PartnerInfoDefaultTypeInternal() {}
  union {
    CMsgDPPartnerMicroTxns_PartnerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDPPartnerMicroTxns_PartnerInfoDefaultTypeInternal _CMsgDPPartnerMicroTxns_PartnerInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgDPPartnerMicroTxns::CMsgDPPartnerMicroTxns(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.transactions_)*/{}
  , /*decltype(_impl_.gc_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partner_)*/nullptr
  , /*decltype(_impl_.appid_)*/0u} {}
struct CMsgDPPartnerMicroTxnsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDPPartnerMicroTxnsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDPPartnerMicroTxnsDefaultTypeInternal() {}
  union {
    CMsgDPPartnerMicroTxns _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDPPartnerMicroTxnsDefaultTypeInternal _CMsgDPPartnerMicroTxns_default_instance_;
PROTOBUF_CONSTEXPR CMsgDPPartnerMicroTxnsResponse::CMsgDPPartnerMicroTxnsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.eerrorcode_)*/0
  , /*decltype(_impl_.eresult_)*/2u} {}
struct CMsgDPPartnerMicroTxnsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDPPartnerMicroTxnsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDPPartnerMicroTxnsResponseDefaultTypeInternal() {}
  union {
    CMsgDPPartnerMicroTxnsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDPPartnerMicroTxnsResponseDefaultTypeInternal _CMsgDPPartnerMicroTxnsResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCHVacVerificationChange::CMsgGCHVacVerificationChange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.appid_)*/0u
  , /*decltype(_impl_.is_verified_)*/false} {}
struct CMsgGCHVacVerificationChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCHVacVerificationChangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCHVacVerificationChangeDefaultTypeInternal() {}
  union {
    CMsgGCHVacVerificationChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCHVacVerificationChangeDefaultTypeInternal _CMsgGCHVacVerificationChange_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCHAccountTwoFactorChange::CMsgGCHAccountTwoFactorChange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.appid_)*/0u
  , /*decltype(_impl_.twofactor_enabled_)*/false} {}
struct CMsgGCHAccountTwoFactorChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCHAccountTwoFactorChangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCHAccountTwoFactorChangeDefaultTypeInternal() {}
  union {
    CMsgGCHAccountTwoFactorChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCHAccountTwoFactorChangeDefaultTypeInternal _CMsgGCHAccountTwoFactorChange_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCheckClanMembership::CMsgGCCheckClanMembership(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.clanid_)*/0u} {}
struct CMsgGCCheckClanMembershipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCheckClanMembershipDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCheckClanMembershipDefaultTypeInternal() {}
  union {
    CMsgGCCheckClanMembership _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCheckClanMembershipDefaultTypeInternal _CMsgGCCheckClanMembership_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCheckClanMembership_Response::CMsgGCCheckClanMembership_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ismember_)*/false} {}
struct CMsgGCCheckClanMembership_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCheckClanMembership_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCheckClanMembership_ResponseDefaultTypeInternal() {}
  union {
    CMsgGCCheckClanMembership_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCheckClanMembership_ResponseDefaultTypeInternal _CMsgGCCheckClanMembership_Response_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCHAppCheersReceived_CheerTypeAmount::CMsgGCHAppCheersReceived_CheerTypeAmount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cheer_type_)*/0u
  , /*decltype(_impl_.cheer_amount_)*/0u} {}
struct CMsgGCHAppCheersReceived_CheerTypeAmountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCHAppCheersReceived_CheerTypeAmountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCHAppCheersReceived_CheerTypeAmountDefaultTypeInternal() {}
  union {
    CMsgGCHAppCheersReceived_CheerTypeAmount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCHAppCheersReceived_CheerTypeAmountDefaultTypeInternal _CMsgGCHAppCheersReceived_CheerTypeAmount_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCHAppCheersReceived_CheerTarget::CMsgGCHAppCheersReceived_CheerTarget(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cheer_types_)*/{}
  , /*decltype(_impl_.cheer_target_)*/uint64_t{0u}} {}
struct CMsgGCHAppCheersReceived_CheerTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCHAppCheersReceived_CheerTargetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCHAppCheersReceived_CheerTargetDefaultTypeInternal() {}
  union {
    CMsgGCHAppCheersReceived_CheerTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCHAppCheersReceived_CheerTargetDefaultTypeInternal _CMsgGCHAppCheersReceived_CheerTarget_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCHAppCheersReceived::CMsgGCHAppCheersReceived(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cheer_targets_)*/{}
  , /*decltype(_impl_.appid_)*/0u} {}
struct CMsgGCHAppCheersReceivedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCHAppCheersReceivedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCHAppCheersReceivedDefaultTypeInternal() {}
  union {
    CMsgGCHAppCheersReceived _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCHAppCheersReceivedDefaultTypeInternal _CMsgGCHAppCheersReceived_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCHAppCheersGetAllowedTypes::CMsgGCHAppCheersGetAllowedTypes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cheer_target_)*/uint64_t{0u}
  , /*decltype(_impl_.appid_)*/0u} {}
struct CMsgGCHAppCheersGetAllowedTypesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCHAppCheersGetAllowedTypesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCHAppCheersGetAllowedTypesDefaultTypeInternal() {}
  union {
    CMsgGCHAppCheersGetAllowedTypes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCHAppCheersGetAllowedTypesDefaultTypeInternal _CMsgGCHAppCheersGetAllowedTypes_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_ids_)*/{}
  , /*decltype(_impl_.original_cheer_type_)*/0u
  , /*decltype(_impl_.remapped_cheer_type_)*/0u} {}
struct CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemapsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemapsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemapsDefaultTypeInternal() {}
  union {
    CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemapsDefaultTypeInternal _CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCHAppCheersGetAllowedTypesResponse::CMsgGCHAppCheersGetAllowedTypesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cheer_types_valid_all_users_)*/{}
  , /*decltype(_impl_.cheer_remaps_)*/{}
  , /*decltype(_impl_.cache_duration_)*/0u} {}
struct CMsgGCHAppCheersGetAllowedTypesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCHAppCheersGetAllowedTypesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCHAppCheersGetAllowedTypesResponseDefaultTypeInternal() {}
  union {
    CMsgGCHAppCheersGetAllowedTypesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCHAppCheersGetAllowedTypesResponseDefaultTypeInternal _CMsgGCHAppCheersGetAllowedTypesResponse_default_instance_;
PROTOBUF_CONSTEXPR CGCSystemMsg_ReportExternalPurchase_Request::CGCSystemMsg_ReportExternalPurchase_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.provider_orderid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.item_description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.appid_)*/0u
  , /*decltype(_impl_.provider_)*/0
  , /*decltype(_impl_.orderid_)*/uint64_t{0u}
  , /*decltype(_impl_.amount_)*/int64_t{0}
  , /*decltype(_impl_.quantity_)*/0u
  , /*decltype(_impl_.itemid_)*/0u
  , /*decltype(_impl_.time_created_)*/0u} {}
struct CGCSystemMsg_ReportExternalPurchase_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCSystemMsg_ReportExternalPurchase_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCSystemMsg_ReportExternalPurchase_RequestDefaultTypeInternal() {}
  union {
    CGCSystemMsg_ReportExternalPurchase_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCSystemMsg_ReportExternalPurchase_RequestDefaultTypeInternal _CGCSystemMsg_ReportExternalPurchase_Request_default_instance_;
PROTOBUF_CONSTEXPR CGCSystemMsg_ReportExternalPurchase_Response::CGCSystemMsg_ReportExternalPurchase_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.transid_)*/uint64_t{0u}
  , /*decltype(_impl_.orderid_)*/uint64_t{0u}} {}
struct CGCSystemMsg_ReportExternalPurchase_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCSystemMsg_ReportExternalPurchase_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCSystemMsg_ReportExternalPurchase_ResponseDefaultTypeInternal() {}
  union {
    CGCSystemMsg_ReportExternalPurchase_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCSystemMsg_ReportExternalPurchase_ResponseDefaultTypeInternal _CGCSystemMsg_ReportExternalPurchase_Response_default_instance_;
PROTOBUF_CONSTEXPR CWorkshop_AddSpecialPayment_Request::CWorkshop_AddSpecialPayment_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.date_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.appid_)*/0u
  , /*decltype(_impl_.gameitemid_)*/0u
  , /*decltype(_impl_.payment_us_usd_)*/uint64_t{0u}
  , /*decltype(_impl_.payment_row_usd_)*/uint64_t{0u}} {}
struct CWorkshop_AddSpecialPayment_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CWorkshop_AddSpecialPayment_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CWorkshop_AddSpecialPayment_RequestDefaultTypeInternal() {}
  union {
    CWorkshop_AddSpecialPayment_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CWorkshop_AddSpecialPayment_RequestDefaultTypeInternal _CWorkshop_AddSpecialPayment_Request_default_instance_;
PROTOBUF_CONSTEXPR CWorkshop_AddSpecialPayment_Response::CWorkshop_AddSpecialPayment_Response(
    ::_pbi::ConstantInitialized) {}
struct CWorkshop_AddSpecialPayment_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CWorkshop_AddSpecialPayment_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CWorkshop_AddSpecialPayment_ResponseDefaultTypeInternal() {}
  union {
    CWorkshop_AddSpecialPayment_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CWorkshop_AddSpecialPayment_ResponseDefaultTypeInternal _CWorkshop_AddSpecialPayment_Response_default_instance_;
PROTOBUF_CONSTEXPR CWorkshop_GetSpecialPayments_Request::CWorkshop_GetSpecialPayments_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.date_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.appid_)*/0u
  , /*decltype(_impl_.gameitemid_)*/0u} {}
struct CWorkshop_GetSpecialPayments_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CWorkshop_GetSpecialPayments_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CWorkshop_GetSpecialPayments_RequestDefaultTypeInternal() {}
  union {
    CWorkshop_GetSpecialPayments_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CWorkshop_GetSpecialPayments_RequestDefaultTypeInternal _CWorkshop_GetSpecialPayments_Request_default_instance_;
PROTOBUF_CONSTEXPR CWorkshop_GetSpecialPayments_Response_SpecialPayment::CWorkshop_GetSpecialPayments_Response_SpecialPayment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.date_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.appid_)*/0u
  , /*decltype(_impl_.gameitemid_)*/0u
  , /*decltype(_impl_.net_payment_us_usd_)*/uint64_t{0u}
  , /*decltype(_impl_.net_payment_row_usd_)*/uint64_t{0u}} {}
struct CWorkshop_GetSpecialPayments_Response_SpecialPaymentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CWorkshop_GetSpecialPayments_Response_SpecialPaymentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CWorkshop_GetSpecialPayments_Response_SpecialPaymentDefaultTypeInternal() {}
  union {
    CWorkshop_GetSpecialPayments_Response_SpecialPayment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CWorkshop_GetSpecialPayments_Response_SpecialPaymentDefaultTypeInternal _CWorkshop_GetSpecialPayments_Response_SpecialPayment_default_instance_;
PROTOBUF_CONSTEXPR CWorkshop_GetSpecialPayments_Response::CWorkshop_GetSpecialPayments_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.special_payments_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CWorkshop_GetSpecialPayments_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CWorkshop_GetSpecialPayments_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CWorkshop_GetSpecialPayments_ResponseDefaultTypeInternal() {}
  union {
    CWorkshop_GetSpecialPayments_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CWorkshop_GetSpecialPayments_ResponseDefaultTypeInternal _CWorkshop_GetSpecialPayments_Response_default_instance_;
static ::_pb::Metadata file_level_metadata_steammessages_5fint_2eproto[96];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_steammessages_5fint_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fint_2eproto = nullptr;

const uint32_t TableStruct_steammessages_5fint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIKey, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIKey, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIKey, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIKey, _impl_.publisher_group_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIKey, _impl_.key_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIKey, _impl_.domain_),
  4,
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest_RequestHeader, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest_RequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest_RequestHeader, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest_RequestHeader, _impl_.value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest_QueryParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest_QueryParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest_QueryParam, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest_QueryParam, _impl_.value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest, _impl_.request_method_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest, _impl_.hostname_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest, _impl_.headers_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest, _impl_.get_params_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest, _impl_.post_params_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest, _impl_.absolute_timeout_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest, _impl_.use_https_),
  3,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIRequest, _impl_.interface_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIRequest, _impl_.method_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIRequest, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIRequest, _impl_.api_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIRequest, _impl_.request_),
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIRequest, _impl_.routing_app_id_),
  0,
  1,
  4,
  2,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgHttpResponse_ResponseHeader, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpResponse_ResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgHttpResponse_ResponseHeader, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpResponse_ResponseHeader, _impl_.value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgHttpResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgHttpResponse, _impl_.status_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpResponse, _impl_.headers_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpResponse, _impl_.body_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgAMFindAccounts, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMFindAccounts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMFindAccounts, _impl_.search_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMFindAccounts, _impl_.search_string_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgAMFindAccountsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMFindAccountsResponse, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotifyWatchdog, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotifyWatchdog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgNotifyWatchdog, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotifyWatchdog, _impl_.alert_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotifyWatchdog, _impl_.critical_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotifyWatchdog, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotifyWatchdog, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotifyWatchdog, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotifyWatchdog, _impl_.recipient_),
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetLicenses, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetLicenses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetLicenses, _impl_.steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPackageLicense, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPackageLicense, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPackageLicense, _impl_.package_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPackageLicense, _impl_.time_created_),
  PROTOBUF_FIELD_OFFSET(::CMsgPackageLicense, _impl_.owner_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetLicensesResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetLicensesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetLicensesResponse, _impl_.license_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetLicensesResponse, _impl_.result_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStats, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStats, _impl_.game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStats, _impl_.stats_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse_Stats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse_Stats, _impl_.stat_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse_Stats, _impl_.stat_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse_Achievement_Blocks, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse_Achievement_Blocks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse_Achievement_Blocks, _impl_.achievement_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse_Achievement_Blocks, _impl_.achievement_bit_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse_Achievement_Blocks, _impl_.unlock_time_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse, _impl_.game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse, _impl_.eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse, _impl_.stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse, _impl_.achievement_blocks_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetCommandList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetCommandList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetCommandList, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetCommandList, _impl_.command_prefix_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetCommandListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetCommandListResponse, _impl_.command_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedGet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedGet, _impl_.keys_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedGetResponse_ValueTag, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedGetResponse_ValueTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedGetResponse_ValueTag, _impl_.found_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedGetResponse_ValueTag, _impl_.value_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedGetResponse, _impl_.values_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedSet_KeyPair, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedSet_KeyPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedSet_KeyPair, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedSet_KeyPair, _impl_.value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedSet, _impl_.keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedDelete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedDelete, _impl_.keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, _impl_.curr_connections_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, _impl_.cmd_get_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, _impl_.cmd_set_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, _impl_.cmd_flush_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, _impl_.get_hits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, _impl_.get_misses_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, _impl_.delete_hits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, _impl_.delete_misses_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, _impl_.bytes_read_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, _impl_.bytes_written_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, _impl_.limit_maxbytes_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, _impl_.curr_items_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, _impl_.evictions_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, _impl_.bytes_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStats, _impl_.schema_catalog_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStatsResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStatsResponse, _impl_.threads_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStatsResponse, _impl_.threads_connected_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStatsResponse, _impl_.threads_active_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStatsResponse, _impl_.operations_submitted_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStatsResponse, _impl_.prepared_statements_executed_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStatsResponse, _impl_.non_prepared_statements_executed_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStatsResponse, _impl_.deadlock_retries_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStatsResponse, _impl_.operations_timed_out_in_queue_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStatsResponse, _impl_.errors_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgAMAddFreeLicense, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMAddFreeLicense, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMAddFreeLicense, _impl_.steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMAddFreeLicense, _impl_.ip_public_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMAddFreeLicense, _impl_.packageid_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMAddFreeLicense, _impl_.store_country_code_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgAMAddFreeLicenseResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMAddFreeLicenseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMAddFreeLicenseResponse, _impl_.eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMAddFreeLicenseResponse, _impl_.purchase_result_detail_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMAddFreeLicenseResponse, _impl_.transid_),
  2,
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetIPLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetIPLocation, _impl_.ips_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetIPASN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetIPASN, _impl_.ips_),
  PROTOBUF_FIELD_OFFSET(::CIPASNInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CIPASNInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CIPASNInfo, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::CIPASNInfo, _impl_.asn_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetIPASNResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetIPASNResponse, _impl_.infos_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSystemStatsSchema, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSystemStatsSchema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgSystemStatsSchema, _impl_.gc_app_id_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSystemStatsSchema, _impl_.schema_kv_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, _impl_.gc_app_id_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, _impl_.stats_kv_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, _impl_.active_jobs_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, _impl_.yielding_jobs_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, _impl_.user_sessions_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, _impl_.game_server_sessions_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, _impl_.socaches_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, _impl_.socaches_to_unload_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, _impl_.socaches_loading_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, _impl_.writeback_queue_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, _impl_.steamid_locks_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, _impl_.logon_queue_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, _impl_.logon_jobs_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail_ReplacementToken, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail_ReplacementToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail_ReplacementToken, _impl_.token_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail_ReplacementToken, _impl_.token_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail_PersonaNameReplacementToken, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail_PersonaNameReplacementToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail_PersonaNameReplacementToken, _impl_.steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail_PersonaNameReplacementToken, _impl_.token_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail, _impl_.steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail, _impl_.email_msg_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail, _impl_.email_format_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail, _impl_.persona_name_tokens_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail, _impl_.source_gc_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail, _impl_.tokens_),
  0,
  1,
  2,
  ~0u,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmailResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmailResponse, _impl_.eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetEmailTemplate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetEmailTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetEmailTemplate, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetEmailTemplate, _impl_.email_msg_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetEmailTemplate, _impl_.email_lang_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetEmailTemplate, _impl_.email_format_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetEmailTemplateResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetEmailTemplateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetEmailTemplateResponse, _impl_.eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetEmailTemplateResponse, _impl_.template_exists_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetEmailTemplateResponse, _impl_.template__),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgAMGrantGuestPasses2, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGrantGuestPasses2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMGrantGuestPasses2, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGrantGuestPasses2, _impl_.package_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGrantGuestPasses2, _impl_.passes_to_grant_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGrantGuestPasses2, _impl_.days_to_expiration_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGrantGuestPasses2, _impl_.action_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgAMGrantGuestPasses2Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGrantGuestPasses2Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMGrantGuestPasses2Response, _impl_.eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGrantGuestPasses2Response, _impl_.passes_granted_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPersonaNames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPersonaNames, _impl_.steamids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPersonaNames_Response_PersonaName, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPersonaNames_Response_PersonaName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPersonaNames_Response_PersonaName, _impl_.steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPersonaNames_Response_PersonaName, _impl_.persona_name_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPersonaNames_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPersonaNames_Response, _impl_.succeeded_lookups_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPersonaNames_Response, _impl_.failed_lookup_steamids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCheckFriendship, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCheckFriendship, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCheckFriendship, _impl_.steamid_left_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCheckFriendship, _impl_.steamid_right_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCheckFriendship_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCheckFriendship_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCheckFriendship_Response, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCheckFriendship_Response, _impl_.found_friendship_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetAppFriendsList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetAppFriendsList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetAppFriendsList, _impl_.steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetAppFriendsList, _impl_.include_friendship_timestamps_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetAppFriendsList_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetAppFriendsList_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetAppFriendsList_Response, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetAppFriendsList_Response, _impl_.steamids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetAppFriendsList_Response, _impl_.friendship_timestamps_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetAppFriendsList_Response, _impl_.last_playtimes_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory_SubGC, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory_SubGC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory_SubGC, _impl_.dir_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory_SubGC, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory_SubGC, _impl_.box_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory_SubGC, _impl_.command_line_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory_SubGC, _impl_.gc_binary_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory, _impl_.master_dir_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory, _impl_.dir_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory_Response, _impl_.eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory_Response, _impl_.message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgWebAPIJobRequestForwardResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgWebAPIJobRequestForwardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgWebAPIJobRequestForwardResponse, _impl_.dir_index_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetPurchaseTrust_Request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetPurchaseTrust_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetPurchaseTrust_Request, _impl_.steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetPurchaseTrust_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetPurchaseTrust_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetPurchaseTrust_Response, _impl_.has_prior_purchase_history_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetPurchaseTrust_Response, _impl_.has_no_recent_password_resets_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetPurchaseTrust_Response, _impl_.is_wallet_cash_trusted_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetPurchaseTrust_Response, _impl_.time_all_trusted_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountVacStatusChange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountVacStatusChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountVacStatusChange, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountVacStatusChange, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountVacStatusChange, _impl_.rtime_vacban_starts_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountVacStatusChange, _impl_.is_banned_now_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountVacStatusChange, _impl_.is_banned_future_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPartnerAccountLink, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPartnerAccountLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPartnerAccountLink, _impl_.steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPartnerAccountLink_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPartnerAccountLink_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPartnerAccountLink_Response, _impl_.pwid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPartnerAccountLink_Response, _impl_.nexonid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPartnerAccountLink_Response, _impl_.ageclass_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPartnerAccountLink_Response, _impl_.id_verified_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPartnerAccountLink_Response, _impl_.is_adult_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGCRoutingInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRoutingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCRoutingInfo, _impl_.dir_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRoutingInfo, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRoutingInfo, _impl_.fallback_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRoutingInfo, _impl_.protobuf_field_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRoutingInfo, _impl_.webapi_param_),
  ~0u,
  1,
  3,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetWebAPIRouting_Entry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetWebAPIRouting_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetWebAPIRouting_Entry, _impl_.interface_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetWebAPIRouting_Entry, _impl_.method_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetWebAPIRouting_Entry, _impl_.routing_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetWebAPIRouting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetWebAPIRouting, _impl_.entries_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetClientMsgRouting_Entry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetClientMsgRouting_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetClientMsgRouting_Entry, _impl_.msg_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetClientMsgRouting_Entry, _impl_.routing_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetClientMsgRouting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetClientMsgRouting, _impl_.entries_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetWebAPIRouting_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetWebAPIRouting_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetWebAPIRouting_Response, _impl_.eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetClientMsgRouting_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetClientMsgRouting_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetClientMsgRouting_Response, _impl_.eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgSetOptions_MessageRange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgSetOptions_MessageRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgSetOptions_MessageRange, _impl_.low_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgSetOptions_MessageRange, _impl_.high_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgSetOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgSetOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgSetOptions, _impl_.options_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgSetOptions, _impl_.client_msg_ranges_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgSetOptions, _impl_.gcsql_version_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession_ExtraField, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession_ExtraField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession_ExtraField, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession_ExtraField, _impl_.value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, _impl_.online_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, _impl_.server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, _impl_.server_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, _impl_.server_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, _impl_.os_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, _impl_.client_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, _impl_.extra_fields_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances, _impl_.app_instance_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances, _impl_.other_steamids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgNotificationOfSuspiciousActivity, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotificationOfSuspiciousActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgNotificationOfSuspiciousActivity, _impl_.steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotificationOfSuspiciousActivity, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotificationOfSuspiciousActivity, _impl_.multiple_instances_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, _impl_.init_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, _impl_.last_update_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, _impl_.txn_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, _impl_.line_item_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, _impl_.def_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, _impl_.tax_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, _impl_.price_usd_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, _impl_.tax_usd_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, _impl_.purchase_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, _impl_.steam_txn_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, _impl_.country_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, _impl_.region_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, _impl_.ref_trans_id_),
  2,
  3,
  4,
  5,
  6,
  7,
  10,
  8,
  9,
  12,
  13,
  11,
  14,
  0,
  1,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerInfo, _impl_.partner_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerInfo, _impl_.partner_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerInfo, _impl_.currency_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerInfo, _impl_.currency_name_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns, _impl_.gc_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns, _impl_.partner_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns, _impl_.transactions_),
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxnsResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxnsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxnsResponse, _impl_.eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxnsResponse, _impl_.eerrorcode_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCHVacVerificationChange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHVacVerificationChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCHVacVerificationChange, _impl_.steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHVacVerificationChange, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHVacVerificationChange, _impl_.is_verified_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountTwoFactorChange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountTwoFactorChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountTwoFactorChange, _impl_.steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountTwoFactorChange, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountTwoFactorChange, _impl_.twofactor_enabled_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCheckClanMembership, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCheckClanMembership, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCheckClanMembership, _impl_.steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCheckClanMembership, _impl_.clanid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCheckClanMembership_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCheckClanMembership_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCheckClanMembership_Response, _impl_.ismember_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersReceived_CheerTypeAmount, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersReceived_CheerTypeAmount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersReceived_CheerTypeAmount, _impl_.cheer_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersReceived_CheerTypeAmount, _impl_.cheer_amount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersReceived_CheerTarget, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersReceived_CheerTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersReceived_CheerTarget, _impl_.cheer_target_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersReceived_CheerTarget, _impl_.cheer_types_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersReceived, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersReceived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersReceived, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersReceived, _impl_.cheer_targets_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersGetAllowedTypes, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersGetAllowedTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersGetAllowedTypes, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersGetAllowedTypes, _impl_.cheer_target_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps, _impl_.original_cheer_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps, _impl_.remapped_cheer_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps, _impl_.account_ids_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersGetAllowedTypesResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersGetAllowedTypesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersGetAllowedTypesResponse, _impl_.cheer_types_valid_all_users_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersGetAllowedTypesResponse, _impl_.cheer_remaps_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAppCheersGetAllowedTypesResponse, _impl_.cache_duration_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_ReportExternalPurchase_Request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_ReportExternalPurchase_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_ReportExternalPurchase_Request, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_ReportExternalPurchase_Request, _impl_.steamid_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_ReportExternalPurchase_Request, _impl_.provider_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_ReportExternalPurchase_Request, _impl_.orderid_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_ReportExternalPurchase_Request, _impl_.provider_orderid_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_ReportExternalPurchase_Request, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_ReportExternalPurchase_Request, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_ReportExternalPurchase_Request, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_ReportExternalPurchase_Request, _impl_.itemid_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_ReportExternalPurchase_Request, _impl_.item_description_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_ReportExternalPurchase_Request, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_ReportExternalPurchase_Request, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_ReportExternalPurchase_Request, _impl_.time_created_),
  6,
  5,
  7,
  8,
  0,
  9,
  1,
  10,
  11,
  2,
  3,
  4,
  12,
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_ReportExternalPurchase_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_ReportExternalPurchase_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_ReportExternalPurchase_Response, _impl_.transid_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_ReportExternalPurchase_Response, _impl_.orderid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CWorkshop_AddSpecialPayment_Request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_AddSpecialPayment_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_AddSpecialPayment_Request, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_AddSpecialPayment_Request, _impl_.gameitemid_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_AddSpecialPayment_Request, _impl_.date_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_AddSpecialPayment_Request, _impl_.payment_us_usd_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_AddSpecialPayment_Request, _impl_.payment_row_usd_),
  1,
  2,
  0,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_AddSpecialPayment_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetSpecialPayments_Request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetSpecialPayments_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetSpecialPayments_Request, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetSpecialPayments_Request, _impl_.gameitemid_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetSpecialPayments_Request, _impl_.date_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetSpecialPayments_Response_SpecialPayment, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetSpecialPayments_Response_SpecialPayment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetSpecialPayments_Response_SpecialPayment, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetSpecialPayments_Response_SpecialPayment, _impl_.gameitemid_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetSpecialPayments_Response_SpecialPayment, _impl_.date_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetSpecialPayments_Response_SpecialPayment, _impl_.net_payment_us_usd_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetSpecialPayments_Response_SpecialPayment, _impl_.net_payment_row_usd_),
  1,
  2,
  0,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetSpecialPayments_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetSpecialPayments_Response, _impl_.special_payments_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::CMsgWebAPIKey)},
  { 16, 24, -1, sizeof(::CMsgHttpRequest_RequestHeader)},
  { 26, 34, -1, sizeof(::CMsgHttpRequest_QueryParam)},
  { 36, 51, -1, sizeof(::CMsgHttpRequest)},
  { 60, 72, -1, sizeof(::CMsgWebAPIRequest)},
  { 78, 86, -1, sizeof(::CMsgHttpResponse_ResponseHeader)},
  { 88, 97, -1, sizeof(::CMsgHttpResponse)},
  { 100, 108, -1, sizeof(::CMsgAMFindAccounts)},
  { 110, -1, -1, sizeof(::CMsgAMFindAccountsResponse)},
  { 117, 130, -1, sizeof(::CMsgNotifyWatchdog)},
  { 137, 144, -1, sizeof(::CMsgAMGetLicenses)},
  { 145, 154, -1, sizeof(::CMsgPackageLicense)},
  { 157, 165, -1, sizeof(::CMsgAMGetLicensesResponse)},
  { 167, 176, -1, sizeof(::CMsgAMGetUserGameStats)},
  { 179, 187, -1, sizeof(::CMsgAMGetUserGameStatsResponse_Stats)},
  { 189, 198, -1, sizeof(::CMsgAMGetUserGameStatsResponse_Achievement_Blocks)},
  { 201, 212, -1, sizeof(::CMsgAMGetUserGameStatsResponse)},
  { 217, 225, -1, sizeof(::CMsgGCGetCommandList)},
  { 227, -1, -1, sizeof(::CMsgGCGetCommandListResponse)},
  { 234, -1, -1, sizeof(::CGCMsgMemCachedGet)},
  { 241, 249, -1, sizeof(::CGCMsgMemCachedGetResponse_ValueTag)},
  { 251, -1, -1, sizeof(::CGCMsgMemCachedGetResponse)},
  { 258, 266, -1, sizeof(::CGCMsgMemCachedSet_KeyPair)},
  { 268, -1, -1, sizeof(::CGCMsgMemCachedSet)},
  { 275, -1, -1, sizeof(::CGCMsgMemCachedDelete)},
  { 282, -1, -1, sizeof(::CGCMsgMemCachedStats)},
  { 288, 308, -1, sizeof(::CGCMsgMemCachedStatsResponse)},
  { 322, 329, -1, sizeof(::CGCMsgSQLStats)},
  { 330, 345, -1, sizeof(::CGCMsgSQLStatsResponse)},
  { 354, 364, -1, sizeof(::CMsgAMAddFreeLicense)},
  { 368, 377, -1, sizeof(::CMsgAMAddFreeLicenseResponse)},
  { 380, -1, -1, sizeof(::CGCMsgGetIPLocation)},
  { 387, -1, -1, sizeof(::CGCMsgGetIPASN)},
  { 394, 402, -1, sizeof(::CIPASNInfo)},
  { 404, -1, -1, sizeof(::CGCMsgGetIPASNResponse)},
  { 411, 419, -1, sizeof(::CGCMsgSystemStatsSchema)},
  { 421, -1, -1, sizeof(::CGCMsgGetSystemStats)},
  { 427, 446, -1, sizeof(::CGCMsgGetSystemStatsResponse)},
  { 459, 467, -1, sizeof(::CMsgAMSendEmail_ReplacementToken)},
  { 469, 477, -1, sizeof(::CMsgAMSendEmail_PersonaNameReplacementToken)},
  { 479, 491, -1, sizeof(::CMsgAMSendEmail)},
  { 497, 504, -1, sizeof(::CMsgAMSendEmailResponse)},
  { 505, 515, -1, sizeof(::CMsgGCGetEmailTemplate)},
  { 519, 528, -1, sizeof(::CMsgGCGetEmailTemplateResponse)},
  { 531, 542, -1, sizeof(::CMsgAMGrantGuestPasses2)},
  { 547, 555, -1, sizeof(::CMsgAMGrantGuestPasses2Response)},
  { 557, -1, -1, sizeof(::CMsgGCGetPersonaNames)},
  { 564, 572, -1, sizeof(::CMsgGCGetPersonaNames_Response_PersonaName)},
  { 574, -1, -1, sizeof(::CMsgGCGetPersonaNames_Response)},
  { 582, 590, -1, sizeof(::CMsgGCCheckFriendship)},
  { 592, 600, -1, sizeof(::CMsgGCCheckFriendship_Response)},
  { 602, 610, -1, sizeof(::CMsgGCGetAppFriendsList)},
  { 612, 622, -1, sizeof(::CMsgGCGetAppFriendsList_Response)},
  { 626, 637, -1, sizeof(::CMsgGCMsgMasterSetDirectory_SubGC)},
  { 642, 650, -1, sizeof(::CMsgGCMsgMasterSetDirectory)},
  { 652, 660, -1, sizeof(::CMsgGCMsgMasterSetDirectory_Response)},
  { 662, 669, -1, sizeof(::CMsgGCMsgWebAPIJobRequestForwardResponse)},
  { 670, 677, -1, sizeof(::CGCSystemMsg_GetPurchaseTrust_Request)},
  { 678, 688, -1, sizeof(::CGCSystemMsg_GetPurchaseTrust_Response)},
  { 692, 703, -1, sizeof(::CMsgGCHAccountVacStatusChange)},
  { 708, 715, -1, sizeof(::CMsgGCGetPartnerAccountLink)},
  { 716, 727, -1, sizeof(::CMsgGCGetPartnerAccountLink_Response)},
  { 732, 743, -1, sizeof(::CMsgGCRoutingInfo)},
  { 748, 757, -1, sizeof(::CMsgGCMsgMasterSetWebAPIRouting_Entry)},
  { 760, -1, -1, sizeof(::CMsgGCMsgMasterSetWebAPIRouting)},
  { 767, 775, -1, sizeof(::CMsgGCMsgMasterSetClientMsgRouting_Entry)},
  { 777, -1, -1, sizeof(::CMsgGCMsgMasterSetClientMsgRouting)},
  { 784, 791, -1, sizeof(::CMsgGCMsgMasterSetWebAPIRouting_Response)},
  { 792, 799, -1, sizeof(::CMsgGCMsgMasterSetClientMsgRouting_Response)},
  { 800, 808, -1, sizeof(::CMsgGCMsgSetOptions_MessageRange)},
  { 810, 819, -1, sizeof(::CMsgGCMsgSetOptions)},
  { 822, 830, -1, sizeof(::CMsgGCHUpdateSession_ExtraField)},
  { 832, 847, -1, sizeof(::CMsgGCHUpdateSession)},
  { 856, 864, -1, sizeof(::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances)},
  { 866, 875, -1, sizeof(::CMsgNotificationOfSuspiciousActivity)},
  { 878, 901, -1, sizeof(::CMsgDPPartnerMicroTxns_PartnerMicroTxn)},
  { 918, 928, -1, sizeof(::CMsgDPPartnerMicroTxns_PartnerInfo)},
  { 932, 942, -1, sizeof(::CMsgDPPartnerMicroTxns)},
  { 946, 954, -1, sizeof(::CMsgDPPartnerMicroTxnsResponse)},
  { 956, 965, -1, sizeof(::CMsgGCHVacVerificationChange)},
  { 968, 977, -1, sizeof(::CMsgGCHAccountTwoFactorChange)},
  { 980, 988, -1, sizeof(::CMsgGCCheckClanMembership)},
  { 990, 997, -1, sizeof(::CMsgGCCheckClanMembership_Response)},
  { 998, 1006, -1, sizeof(::CMsgGCHAppCheersReceived_CheerTypeAmount)},
  { 1008, 1016, -1, sizeof(::CMsgGCHAppCheersReceived_CheerTarget)},
  { 1018, 1026, -1, sizeof(::CMsgGCHAppCheersReceived)},
  { 1028, 1036, -1, sizeof(::CMsgGCHAppCheersGetAllowedTypes)},
  { 1038, 1047, -1, sizeof(::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps)},
  { 1050, 1059, -1, sizeof(::CMsgGCHAppCheersGetAllowedTypesResponse)},
  { 1062, 1081, -1, sizeof(::CGCSystemMsg_ReportExternalPurchase_Request)},
  { 1094, 1102, -1, sizeof(::CGCSystemMsg_ReportExternalPurchase_Response)},
  { 1104, 1115, -1, sizeof(::CWorkshop_AddSpecialPayment_Request)},
  { 1120, -1, -1, sizeof(::CWorkshop_AddSpecialPayment_Response)},
  { 1126, 1135, -1, sizeof(::CWorkshop_GetSpecialPayments_Request)},
  { 1138, 1149, -1, sizeof(::CWorkshop_GetSpecialPayments_Response_SpecialPayment)},
  { 1154, -1, -1, sizeof(::CWorkshop_GetSpecialPayments_Response)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgWebAPIKey_default_instance_._instance,
  &::_CMsgHttpRequest_RequestHeader_default_instance_._instance,
  &::_CMsgHttpRequest_QueryParam_default_instance_._instance,
  &::_CMsgHttpRequest_default_instance_._instance,
  &::_CMsgWebAPIRequest_default_instance_._instance,
  &::_CMsgHttpResponse_ResponseHeader_default_instance_._instance,
  &::_CMsgHttpResponse_default_instance_._instance,
  &::_CMsgAMFindAccounts_default_instance_._instance,
  &::_CMsgAMFindAccountsResponse_default_instance_._instance,
  &::_CMsgNotifyWatchdog_default_instance_._instance,
  &::_CMsgAMGetLicenses_default_instance_._instance,
  &::_CMsgPackageLicense_default_instance_._instance,
  &::_CMsgAMGetLicensesResponse_default_instance_._instance,
  &::_CMsgAMGetUserGameStats_default_instance_._instance,
  &::_CMsgAMGetUserGameStatsResponse_Stats_default_instance_._instance,
  &::_CMsgAMGetUserGameStatsResponse_Achievement_Blocks_default_instance_._instance,
  &::_CMsgAMGetUserGameStatsResponse_default_instance_._instance,
  &::_CMsgGCGetCommandList_default_instance_._instance,
  &::_CMsgGCGetCommandListResponse_default_instance_._instance,
  &::_CGCMsgMemCachedGet_default_instance_._instance,
  &::_CGCMsgMemCachedGetResponse_ValueTag_default_instance_._instance,
  &::_CGCMsgMemCachedGetResponse_default_instance_._instance,
  &::_CGCMsgMemCachedSet_KeyPair_default_instance_._instance,
  &::_CGCMsgMemCachedSet_default_instance_._instance,
  &::_CGCMsgMemCachedDelete_default_instance_._instance,
  &::_CGCMsgMemCachedStats_default_instance_._instance,
  &::_CGCMsgMemCachedStatsResponse_default_instance_._instance,
  &::_CGCMsgSQLStats_default_instance_._instance,
  &::_CGCMsgSQLStatsResponse_default_instance_._instance,
  &::_CMsgAMAddFreeLicense_default_instance_._instance,
  &::_CMsgAMAddFreeLicenseResponse_default_instance_._instance,
  &::_CGCMsgGetIPLocation_default_instance_._instance,
  &::_CGCMsgGetIPASN_default_instance_._instance,
  &::_CIPASNInfo_default_instance_._instance,
  &::_CGCMsgGetIPASNResponse_default_instance_._instance,
  &::_CGCMsgSystemStatsSchema_default_instance_._instance,
  &::_CGCMsgGetSystemStats_default_instance_._instance,
  &::_CGCMsgGetSystemStatsResponse_default_instance_._instance,
  &::_CMsgAMSendEmail_ReplacementToken_default_instance_._instance,
  &::_CMsgAMSendEmail_PersonaNameReplacementToken_default_instance_._instance,
  &::_CMsgAMSendEmail_default_instance_._instance,
  &::_CMsgAMSendEmailResponse_default_instance_._instance,
  &::_CMsgGCGetEmailTemplate_default_instance_._instance,
  &::_CMsgGCGetEmailTemplateResponse_default_instance_._instance,
  &::_CMsgAMGrantGuestPasses2_default_instance_._instance,
  &::_CMsgAMGrantGuestPasses2Response_default_instance_._instance,
  &::_CMsgGCGetPersonaNames_default_instance_._instance,
  &::_CMsgGCGetPersonaNames_Response_PersonaName_default_instance_._instance,
  &::_CMsgGCGetPersonaNames_Response_default_instance_._instance,
  &::_CMsgGCCheckFriendship_default_instance_._instance,
  &::_CMsgGCCheckFriendship_Response_default_instance_._instance,
  &::_CMsgGCGetAppFriendsList_default_instance_._instance,
  &::_CMsgGCGetAppFriendsList_Response_default_instance_._instance,
  &::_CMsgGCMsgMasterSetDirectory_SubGC_default_instance_._instance,
  &::_CMsgGCMsgMasterSetDirectory_default_instance_._instance,
  &::_CMsgGCMsgMasterSetDirectory_Response_default_instance_._instance,
  &::_CMsgGCMsgWebAPIJobRequestForwardResponse_default_instance_._instance,
  &::_CGCSystemMsg_GetPurchaseTrust_Request_default_instance_._instance,
  &::_CGCSystemMsg_GetPurchaseTrust_Response_default_instance_._instance,
  &::_CMsgGCHAccountVacStatusChange_default_instance_._instance,
  &::_CMsgGCGetPartnerAccountLink_default_instance_._instance,
  &::_CMsgGCGetPartnerAccountLink_Response_default_instance_._instance,
  &::_CMsgGCRoutingInfo_default_instance_._instance,
  &::_CMsgGCMsgMasterSetWebAPIRouting_Entry_default_instance_._instance,
  &::_CMsgGCMsgMasterSetWebAPIRouting_default_instance_._instance,
  &::_CMsgGCMsgMasterSetClientMsgRouting_Entry_default_instance_._instance,
  &::_CMsgGCMsgMasterSetClientMsgRouting_default_instance_._instance,
  &::_CMsgGCMsgMasterSetWebAPIRouting_Response_default_instance_._instance,
  &::_CMsgGCMsgMasterSetClientMsgRouting_Response_default_instance_._instance,
  &::_CMsgGCMsgSetOptions_MessageRange_default_instance_._instance,
  &::_CMsgGCMsgSetOptions_default_instance_._instance,
  &::_CMsgGCHUpdateSession_ExtraField_default_instance_._instance,
  &::_CMsgGCHUpdateSession_default_instance_._instance,
  &::_CMsgNotificationOfSuspiciousActivity_MultipleGameInstances_default_instance_._instance,
  &::_CMsgNotificationOfSuspiciousActivity_default_instance_._instance,
  &::_CMsgDPPartnerMicroTxns_PartnerMicroTxn_default_instance_._instance,
  &::_CMsgDPPartnerMicroTxns_PartnerInfo_default_instance_._instance,
  &::_CMsgDPPartnerMicroTxns_default_instance_._instance,
  &::_CMsgDPPartnerMicroTxnsResponse_default_instance_._instance,
  &::_CMsgGCHVacVerificationChange_default_instance_._instance,
  &::_CMsgGCHAccountTwoFactorChange_default_instance_._instance,
  &::_CMsgGCCheckClanMembership_default_instance_._instance,
  &::_CMsgGCCheckClanMembership_Response_default_instance_._instance,
  &::_CMsgGCHAppCheersReceived_CheerTypeAmount_default_instance_._instance,
  &::_CMsgGCHAppCheersReceived_CheerTarget_default_instance_._instance,
  &::_CMsgGCHAppCheersReceived_default_instance_._instance,
  &::_CMsgGCHAppCheersGetAllowedTypes_default_instance_._instance,
  &::_CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps_default_instance_._instance,
  &::_CMsgGCHAppCheersGetAllowedTypesResponse_default_instance_._instance,
  &::_CGCSystemMsg_ReportExternalPurchase_Request_default_instance_._instance,
  &::_CGCSystemMsg_ReportExternalPurchase_Response_default_instance_._instance,
  &::_CWorkshop_AddSpecialPayment_Request_default_instance_._instance,
  &::_CWorkshop_AddSpecialPayment_Response_default_instance_._instance,
  &::_CWorkshop_GetSpecialPayments_Request_default_instance_._instance,
  &::_CWorkshop_GetSpecialPayments_Response_SpecialPayment_default_instance_._instance,
  &::_CWorkshop_GetSpecialPayments_Response_default_instance_._instance,
};

const char descriptor_table_protodef_steammessages_5fint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027steammessages_int.proto\032\023steammessages"
  ".proto\"z\n\rCMsgWebAPIKey\022\023\n\006status\030\001 \001(\r:"
  "\003255\022\025\n\naccount_id\030\002 \001(\r:\0010\022\035\n\022publisher"
  "_group_id\030\003 \001(\r:\0010\022\016\n\006key_id\030\004 \001(\r\022\016\n\006do"
  "main\030\005 \001(\t\"\360\002\n\017CMsgHttpRequest\022\026\n\016reques"
  "t_method\030\001 \001(\r\022\020\n\010hostname\030\002 \001(\t\022\013\n\003url\030"
  "\003 \001(\t\022/\n\007headers\030\004 \003(\0132\036.CMsgHttpRequest"
  ".RequestHeader\022/\n\nget_params\030\005 \003(\0132\033.CMs"
  "gHttpRequest.QueryParam\0220\n\013post_params\030\006"
  " \003(\0132\033.CMsgHttpRequest.QueryParam\022\014\n\004bod"
  "y\030\007 \001(\014\022\030\n\020absolute_timeout\030\010 \001(\r\022\021\n\tuse"
  "_https\030\t \001(\010\032,\n\rRequestHeader\022\014\n\004name\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\t\032)\n\nQueryParam\022\014\n\004name"
  "\030\001 \001(\t\022\r\n\005value\030\002 \001(\014\"\255\001\n\021CMsgWebAPIRequ"
  "est\022\026\n\016interface_name\030\002 \001(\t\022\023\n\013method_na"
  "me\030\003 \001(\t\022\017\n\007version\030\004 \001(\r\022\037\n\007api_key\030\005 \001"
  "(\0132\016.CMsgWebAPIKey\022!\n\007request\030\006 \001(\0132\020.CM"
  "sgHttpRequest\022\026\n\016routing_app_id\030\007 \001(\r\"\227\001"
  "\n\020CMsgHttpResponse\022\023\n\013status_code\030\001 \001(\r\022"
  "1\n\007headers\030\002 \003(\0132 .CMsgHttpResponse.Resp"
  "onseHeader\022\014\n\004body\030\003 \001(\014\032-\n\016ResponseHead"
  "er\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"@\n\022CMsgA"
  "MFindAccounts\022\023\n\013search_type\030\001 \001(\r\022\025\n\rse"
  "arch_string\030\002 \001(\t\".\n\032CMsgAMFindAccountsR"
  "esponse\022\020\n\010steam_id\030\001 \003(\006\"\210\001\n\022CMsgNotify"
  "Watchdog\022\016\n\006source\030\001 \001(\r\022\022\n\nalert_type\030\002"
  " \001(\r\022\020\n\010critical\030\004 \001(\010\022\014\n\004time\030\005 \001(\r\022\r\n\005"
  "appid\030\006 \001(\r\022\014\n\004text\030\007 \001(\t\022\021\n\trecipient\030\014"
  " \001(\t\"$\n\021CMsgAMGetLicenses\022\017\n\007steamid\030\001 \001"
  "(\006\"P\n\022CMsgPackageLicense\022\022\n\npackage_id\030\001"
  " \001(\r\022\024\n\014time_created\030\002 \001(\r\022\020\n\010owner_id\030\003"
  " \001(\r\"Q\n\031CMsgAMGetLicensesResponse\022$\n\007lic"
  "ense\030\001 \003(\0132\023.CMsgPackageLicense\022\016\n\006resul"
  "t\030\002 \001(\r\"J\n\026CMsgAMGetUserGameStats\022\020\n\010ste"
  "am_id\030\001 \001(\006\022\017\n\007game_id\030\002 \001(\006\022\r\n\005stats\030\003 "
  "\003(\r\"\352\002\n\036CMsgAMGetUserGameStatsResponse\022\020"
  "\n\010steam_id\030\001 \001(\006\022\017\n\007game_id\030\002 \001(\006\022\022\n\007ere"
  "sult\030\003 \001(\005:\0012\0224\n\005stats\030\004 \003(\0132%.CMsgAMGet"
  "UserGameStatsResponse.Stats\022N\n\022achieveme"
  "nt_blocks\030\005 \003(\01322.CMsgAMGetUserGameStats"
  "Response.Achievement_Blocks\032,\n\005Stats\022\017\n\007"
  "stat_id\030\001 \001(\r\022\022\n\nstat_value\030\002 \001(\r\032]\n\022Ach"
  "ievement_Blocks\022\026\n\016achievement_id\030\001 \001(\r\022"
  "\032\n\022achievement_bit_id\030\002 \001(\r\022\023\n\013unlock_ti"
  "me\030\003 \001(\007\">\n\024CMsgGCGetCommandList\022\016\n\006app_"
  "id\030\001 \001(\r\022\026\n\016command_prefix\030\002 \001(\t\"4\n\034CMsg"
  "GCGetCommandListResponse\022\024\n\014command_name"
  "\030\001 \003(\t\"\"\n\022CGCMsgMemCachedGet\022\014\n\004keys\030\001 \003"
  "(\t\"|\n\032CGCMsgMemCachedGetResponse\0224\n\006valu"
  "es\030\001 \003(\0132$.CGCMsgMemCachedGetResponse.Va"
  "lueTag\032(\n\010ValueTag\022\r\n\005found\030\001 \001(\010\022\r\n\005val"
  "ue\030\002 \001(\014\"g\n\022CGCMsgMemCachedSet\022)\n\004keys\030\001"
  " \003(\0132\033.CGCMsgMemCachedSet.KeyPair\032&\n\007Key"
  "Pair\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\014\"%\n\025CGC"
  "MsgMemCachedDelete\022\014\n\004keys\030\001 \003(\t\"\026\n\024CGCM"
  "sgMemCachedStats\"\270\002\n\034CGCMsgMemCachedStat"
  "sResponse\022\030\n\020curr_connections\030\001 \001(\004\022\017\n\007c"
  "md_get\030\002 \001(\004\022\017\n\007cmd_set\030\003 \001(\004\022\021\n\tcmd_flu"
  "sh\030\004 \001(\004\022\020\n\010get_hits\030\005 \001(\004\022\022\n\nget_misses"
  "\030\006 \001(\004\022\023\n\013delete_hits\030\007 \001(\004\022\025\n\rdelete_mi"
  "sses\030\010 \001(\004\022\022\n\nbytes_read\030\t \001(\004\022\025\n\rbytes_"
  "written\030\n \001(\004\022\026\n\016limit_maxbytes\030\013 \001(\004\022\022\n"
  "\ncurr_items\030\014 \001(\004\022\021\n\tevictions\030\r \001(\004\022\r\n\005"
  "bytes\030\016 \001(\004\"(\n\016CGCMsgSQLStats\022\026\n\016schema_"
  "catalog\030\001 \001(\r\"\233\002\n\026CGCMsgSQLStatsResponse"
  "\022\017\n\007threads\030\001 \001(\r\022\031\n\021threads_connected\030\002"
  " \001(\r\022\026\n\016threads_active\030\003 \001(\r\022\034\n\024operatio"
  "ns_submitted\030\004 \001(\r\022$\n\034prepared_statement"
  "s_executed\030\005 \001(\r\022(\n non_prepared_stateme"
  "nts_executed\030\006 \001(\r\022\030\n\020deadlock_retries\030\007"
  " \001(\r\022%\n\035operations_timed_out_in_queue\030\010 "
  "\001(\r\022\016\n\006errors\030\t \001(\r\"i\n\024CMsgAMAddFreeLice"
  "nse\022\017\n\007steamid\030\001 \001(\006\022\021\n\tip_public\030\002 \001(\r\022"
  "\021\n\tpackageid\030\003 \001(\r\022\032\n\022store_country_code"
  "\030\004 \001(\t\"c\n\034CMsgAMAddFreeLicenseResponse\022\022"
  "\n\007eresult\030\001 \001(\005:\0012\022\036\n\026purchase_result_de"
  "tail\030\002 \001(\005\022\017\n\007transid\030\003 \001(\006\"\"\n\023CGCMsgGet"
  "IPLocation\022\013\n\003ips\030\001 \003(\007\"\035\n\016CGCMsgGetIPAS"
  "N\022\013\n\003ips\030\001 \003(\007\"%\n\nCIPASNInfo\022\n\n\002ip\030\001 \001(\007"
  "\022\013\n\003asn\030\002 \001(\r\"4\n\026CGCMsgGetIPASNResponse\022"
  "\032\n\005infos\030\001 \003(\0132\013.CIPASNInfo\"\?\n\027CGCMsgSys"
  "temStatsSchema\022\021\n\tgc_app_id\030\001 \001(\r\022\021\n\tsch"
  "ema_kv\030\002 \001(\014\"\026\n\024CGCMsgGetSystemStats\"\305\002\n"
  "\034CGCMsgGetSystemStatsResponse\022\021\n\tgc_app_"
  "id\030\001 \001(\r\022\020\n\010stats_kv\030\002 \001(\014\022\023\n\013active_job"
  "s\030\003 \001(\r\022\025\n\ryielding_jobs\030\004 \001(\r\022\025\n\ruser_s"
  "essions\030\005 \001(\r\022\034\n\024game_server_sessions\030\006 "
  "\001(\r\022\020\n\010socaches\030\007 \001(\r\022\032\n\022socaches_to_unl"
  "oad\030\010 \001(\r\022\030\n\020socaches_loading\030\t \001(\r\022\027\n\017w"
  "riteback_queue\030\n \001(\r\022\025\n\rsteamid_locks\030\013 "
  "\001(\r\022\023\n\013logon_queue\030\014 \001(\r\022\022\n\nlogon_jobs\030\r"
  " \001(\r\"\342\002\n\017CMsgAMSendEmail\022\017\n\007steamid\030\001 \001("
  "\006\022\026\n\016email_msg_type\030\002 \001(\r\022\024\n\014email_forma"
  "t\030\003 \001(\r\022I\n\023persona_name_tokens\030\005 \003(\0132,.C"
  "MsgAMSendEmail.PersonaNameReplacementTok"
  "en\022\021\n\tsource_gc\030\006 \001(\r\0221\n\006tokens\030\007 \003(\0132!."
  "CMsgAMSendEmail.ReplacementToken\032;\n\020Repl"
  "acementToken\022\022\n\ntoken_name\030\001 \001(\t\022\023\n\013toke"
  "n_value\030\002 \001(\t\032B\n\033PersonaNameReplacementT"
  "oken\022\017\n\007steamid\030\001 \001(\006\022\022\n\ntoken_name\030\002 \001("
  "\t\"-\n\027CMsgAMSendEmailResponse\022\022\n\007eresult\030"
  "\001 \001(\r:\0012\"j\n\026CMsgGCGetEmailTemplate\022\016\n\006ap"
  "p_id\030\001 \001(\r\022\026\n\016email_msg_type\030\002 \001(\r\022\022\n\nem"
  "ail_lang\030\003 \001(\005\022\024\n\014email_format\030\004 \001(\005\"_\n\036"
  "CMsgGCGetEmailTemplateResponse\022\022\n\007eresul"
  "t\030\001 \001(\r:\0012\022\027\n\017template_exists\030\002 \001(\010\022\020\n\010t"
  "emplate\030\003 \001(\t\"\204\001\n\027CMsgAMGrantGuestPasses"
  "2\022\020\n\010steam_id\030\001 \001(\006\022\022\n\npackage_id\030\002 \001(\r\022"
  "\027\n\017passes_to_grant\030\003 \001(\005\022\032\n\022days_to_expi"
  "ration\030\004 \001(\005\022\016\n\006action\030\005 \001(\005\"P\n\037CMsgAMGr"
  "antGuestPasses2Response\022\022\n\007eresult\030\001 \001(\005"
  ":\0012\022\031\n\016passes_granted\030\002 \001(\005:\0010\")\n\025CMsgGC"
  "GetPersonaNames\022\020\n\010steamids\030\001 \003(\006\"\276\001\n\036CM"
  "sgGCGetPersonaNames_Response\022F\n\021succeede"
  "d_lookups\030\001 \003(\0132+.CMsgGCGetPersonaNames_"
  "Response.PersonaName\022\036\n\026failed_lookup_st"
  "eamids\030\002 \003(\006\0324\n\013PersonaName\022\017\n\007steamid\030\001"
  " \001(\006\022\024\n\014persona_name\030\002 \001(\t\"D\n\025CMsgGCChec"
  "kFriendship\022\024\n\014steamid_left\030\001 \001(\006\022\025\n\rste"
  "amid_right\030\002 \001(\006\"K\n\036CMsgGCCheckFriendshi"
  "p_Response\022\017\n\007success\030\001 \001(\010\022\030\n\020found_fri"
  "endship\030\002 \001(\010\"Q\n\027CMsgGCGetAppFriendsList"
  "\022\017\n\007steamid\030\001 \001(\006\022%\n\035include_friendship_"
  "timestamps\030\002 \001(\010\"|\n CMsgGCGetAppFriendsL"
  "ist_Response\022\017\n\007success\030\001 \001(\010\022\020\n\010steamid"
  "s\030\002 \003(\006\022\035\n\025friendship_timestamps\030\003 \003(\007\022\026"
  "\n\016last_playtimes\030\004 \003(\007\"\320\001\n\033CMsgGCMsgMast"
  "erSetDirectory\022\034\n\020master_dir_index\030\001 \001(\005"
  ":\002-1\022/\n\003dir\030\002 \003(\0132\".CMsgGCMsgMasterSetDi"
  "rectory.SubGC\032b\n\005SubGC\022\025\n\tdir_index\030\001 \001("
  "\005:\002-1\022\014\n\004name\030\002 \001(\t\022\013\n\003box\030\003 \001(\t\022\024\n\014comm"
  "and_line\030\004 \001(\t\022\021\n\tgc_binary\030\005 \001(\t\"K\n$CMs"
  "gGCMsgMasterSetDirectory_Response\022\022\n\007ere"
  "sult\030\001 \001(\005:\0012\022\017\n\007message\030\002 \001(\t\"A\n(CMsgGC"
  "MsgWebAPIJobRequestForwardResponse\022\025\n\tdi"
  "r_index\030\001 \001(\005:\002-1\"8\n%CGCSystemMsg_GetPur"
  "chaseTrust_Request\022\017\n\007steamid\030\001 \001(\006\"\255\001\n&"
  "CGCSystemMsg_GetPurchaseTrust_Response\022\""
  "\n\032has_prior_purchase_history\030\001 \001(\010\022%\n\035ha"
  "s_no_recent_password_resets\030\002 \001(\010\022\036\n\026is_"
  "wallet_cash_trusted\030\003 \001(\010\022\030\n\020time_all_tr"
  "usted\030\004 \001(\r\"\217\001\n\035CMsgGCHAccountVacStatusC"
  "hange\022\020\n\010steam_id\030\001 \001(\006\022\016\n\006app_id\030\002 \001(\r\022"
  "\033\n\023rtime_vacban_starts\030\003 \001(\r\022\025\n\ris_banne"
  "d_now\030\004 \001(\010\022\030\n\020is_banned_future\030\005 \001(\010\".\n"
  "\033CMsgGCGetPartnerAccountLink\022\017\n\007steamid\030"
  "\001 \001(\006\"\215\001\n$CMsgGCGetPartnerAccountLink_Re"
  "sponse\022\014\n\004pwid\030\001 \001(\r\022\017\n\007nexonid\030\002 \001(\r\022\023\n"
  "\010ageclass\030\003 \001(\005:\0010\022\031\n\013id_verified\030\004 \001(\010:"
  "\004true\022\026\n\010is_adult\030\005 \001(\010:\004true\"\333\002\n\021CMsgGC"
  "RoutingInfo\022\021\n\tdir_index\030\001 \003(\005\0228\n\006method"
  "\030\002 \001(\0162 .CMsgGCRoutingInfo.RoutingMethod"
  ":\006RANDOM\022;\n\010fallback\030\003 \001(\0162 .CMsgGCRouti"
  "ngInfo.RoutingMethod:\007DISCARD\022\026\n\016protobu"
  "f_field\030\004 \001(\r\022\024\n\014webapi_param\030\005 \001(\t\"\215\001\n\r"
  "RoutingMethod\022\n\n\006RANDOM\020\000\022\013\n\007DISCARD\020\001\022\022"
  "\n\016CLIENT_STEAMID\020\002\022\031\n\025PROTOBUF_FIELD_UIN"
  "T64\020\003\022\020\n\014WEBAPI_PARAM\020\004\022\"\n\036WEBAPI_PARAM_"
  "STEAMID_ACCOUNTID\020\005\"\265\001\n\037CMsgGCMsgMasterS"
  "etWebAPIRouting\0227\n\007entries\030\001 \003(\0132&.CMsgG"
  "CMsgMasterSetWebAPIRouting.Entry\032Y\n\005Entr"
  "y\022\026\n\016interface_name\030\001 \001(\t\022\023\n\013method_name"
  "\030\002 \001(\t\022#\n\007routing\030\003 \001(\0132\022.CMsgGCRoutingI"
  "nfo\"\240\001\n\"CMsgGCMsgMasterSetClientMsgRouti"
  "ng\022:\n\007entries\030\001 \003(\0132).CMsgGCMsgMasterSet"
  "ClientMsgRouting.Entry\032>\n\005Entry\022\020\n\010msg_t"
  "ype\030\001 \001(\r\022#\n\007routing\030\002 \001(\0132\022.CMsgGCRouti"
  "ngInfo\">\n(CMsgGCMsgMasterSetWebAPIRoutin"
  "g_Response\022\022\n\007eresult\030\001 \001(\005:\0012\"A\n+CMsgGC"
  "MsgMasterSetClientMsgRouting_Response\022\022\n"
  "\007eresult\030\001 \001(\005:\0012\"\266\003\n\023CMsgGCMsgSetOption"
  "s\022,\n\007options\030\001 \003(\0162\033.CMsgGCMsgSetOptions"
  ".Option\022<\n\021client_msg_ranges\030\002 \003(\0132!.CMs"
  "gGCMsgSetOptions.MessageRange\022P\n\rgcsql_v"
  "ersion\030\003 \001(\0162!.CMsgGCMsgSetOptions.GCSQL"
  "Version:\026GCSQL_VERSION_BASELINE\032)\n\014Messa"
  "geRange\022\013\n\003low\030\001 \002(\r\022\014\n\004high\030\002 \002(\r\"n\n\006Op"
  "tion\022\030\n\024NOTIFY_USER_SESSIONS\020\000\022\032\n\026NOTIFY"
  "_SERVER_SESSIONS\020\001\022\027\n\023NOTIFY_ACHIEVEMENT"
  "S\020\002\022\025\n\021NOTIFY_VAC_ACTION\020\003\"F\n\014GCSQLVersi"
  "on\022\032\n\026GCSQL_VERSION_BASELINE\020\001\022\032\n\026GCSQL_"
  "VERSION_BOOLTYPE\020\002\"\224\002\n\024CMsgGCHUpdateSess"
  "ion\022\020\n\010steam_id\030\001 \001(\006\022\016\n\006app_id\030\002 \001(\r\022\016\n"
  "\006online\030\003 \001(\010\022\027\n\017server_steam_id\030\004 \001(\006\022\023"
  "\n\013server_addr\030\005 \001(\r\022\023\n\013server_port\030\006 \001(\r"
  "\022\017\n\007os_type\030\007 \001(\r\022\023\n\013client_addr\030\010 \001(\r\0226"
  "\n\014extra_fields\030\t \003(\0132 .CMsgGCHUpdateSess"
  "ion.ExtraField\032)\n\nExtraField\022\014\n\004name\030\001 \001"
  "(\t\022\r\n\005value\030\002 \001(\t\"\354\001\n$CMsgNotificationOf"
  "SuspiciousActivity\022\017\n\007steamid\030\001 \001(\006\022\r\n\005a"
  "ppid\030\002 \001(\r\022W\n\022multiple_instances\030\003 \001(\0132;"
  ".CMsgNotificationOfSuspiciousActivity.Mu"
  "ltipleGameInstances\032K\n\025MultipleGameInsta"
  "nces\022\032\n\022app_instance_count\030\001 \001(\r\022\026\n\016othe"
  "r_steamids\030\002 \003(\006\"\362\004\n\026CMsgDPPartnerMicroT"
  "xns\022\r\n\005appid\030\001 \001(\r\022\017\n\007gc_name\030\002 \001(\t\0224\n\007p"
  "artner\030\003 \001(\0132#.CMsgDPPartnerMicroTxns.Pa"
  "rtnerInfo\022=\n\014transactions\030\004 \003(\0132\'.CMsgDP"
  "PartnerMicroTxns.PartnerMicroTxn\032\333\002\n\017Par"
  "tnerMicroTxn\022\021\n\tinit_time\030\001 \001(\r\022\030\n\020last_"
  "update_time\030\002 \001(\r\022\016\n\006txn_id\030\003 \001(\004\022\022\n\nacc"
  "ount_id\030\004 \001(\r\022\021\n\tline_item\030\005 \001(\r\022\017\n\007item"
  "_id\030\006 \001(\004\022\021\n\tdef_index\030\007 \001(\r\022\r\n\005price\030\010 "
  "\001(\004\022\013\n\003tax\030\t \001(\004\022\021\n\tprice_usd\030\n \001(\004\022\017\n\007t"
  "ax_usd\030\013 \001(\004\022\025\n\rpurchase_type\030\014 \001(\r\022\026\n\016s"
  "team_txn_type\030\r \001(\r\022\024\n\014country_code\030\016 \001("
  "\t\022\023\n\013region_code\030\017 \001(\t\022\020\n\010quantity\030\020 \001(\005"
  "\022\024\n\014ref_trans_id\030\021 \001(\004\032e\n\013PartnerInfo\022\022\n"
  "\npartner_id\030\001 \001(\r\022\024\n\014partner_name\030\002 \001(\t\022"
  "\025\n\rcurrency_code\030\003 \001(\t\022\025\n\rcurrency_name\030"
  "\004 \001(\t\"\376\002\n\036CMsgDPPartnerMicroTxnsResponse"
  "\022\022\n\007eresult\030\001 \001(\r:\0012\022J\n\neerrorcode\030\002 \001(\016"
  "2*.CMsgDPPartnerMicroTxnsResponse.EError"
  "Code:\nk_MsgValid\"\373\001\n\nEErrorCode\022\016\n\nk_Msg"
  "Valid\020\000\022\025\n\021k_MsgInvalidAppID\020\001\022\033\n\027k_MsgI"
  "nvalidPartnerInfo\020\002\022\027\n\023k_MsgNoTransactio"
  "ns\020\003\022\023\n\017k_MsgSQLFailure\020\004\022\037\n\033k_MsgPartne"
  "rInfoDiscrepancy\020\005\022 \n\034k_MsgTransactionIn"
  "sertFailed\020\007\022\027\n\023k_MsgAlreadyRunning\020\010\022\037\n"
  "\033k_MsgInvalidTransactionData\020\t\"S\n\034CMsgGC"
  "HVacVerificationChange\022\017\n\007steamid\030\001 \001(\006\022"
  "\r\n\005appid\030\002 \001(\r\022\023\n\013is_verified\030\003 \001(\010\"Z\n\035C"
  "MsgGCHAccountTwoFactorChange\022\017\n\007steamid\030"
  "\001 \001(\006\022\r\n\005appid\030\002 \001(\r\022\031\n\021twofactor_enable"
  "d\030\003 \001(\010\"<\n\031CMsgGCCheckClanMembership\022\017\n\007"
  "steamid\030\001 \001(\006\022\016\n\006clanid\030\002 \001(\r\"6\n\"CMsgGCC"
  "heckClanMembership_Response\022\020\n\010ismember\030"
  "\001 \001(\010\"\211\002\n\030CMsgGCHAppCheersReceived\022\r\n\005ap"
  "pid\030\001 \001(\r\022<\n\rcheer_targets\030\002 \003(\0132%.CMsgG"
  "CHAppCheersReceived.CheerTarget\032;\n\017Cheer"
  "TypeAmount\022\022\n\ncheer_type\030\001 \001(\r\022\024\n\014cheer_"
  "amount\030\002 \001(\r\032c\n\013CheerTarget\022\024\n\014cheer_tar"
  "get\030\001 \001(\004\022>\n\013cheer_types\030\002 \003(\0132).CMsgGCH"
  "AppCheersReceived.CheerTypeAmount\"F\n\037CMs"
  "gGCHAppCheersGetAllowedTypes\022\r\n\005appid\030\001 "
  "\001(\r\022\024\n\014cheer_target\030\002 \001(\004\"\220\002\n\'CMsgGCHApp"
  "CheersGetAllowedTypesResponse\022#\n\033cheer_t"
  "ypes_valid_all_users\030\001 \003(\r\022J\n\014cheer_rema"
  "ps\030\002 \003(\01324.CMsgGCHAppCheersGetAllowedTyp"
  "esResponse.CheerRemaps\022\026\n\016cache_duration"
  "\030\003 \001(\r\032\\\n\013CheerRemaps\022\033\n\023original_cheer_"
  "type\030\001 \001(\r\022\033\n\023remapped_cheer_type\030\002 \001(\r\022"
  "\023\n\013account_ids\030\003 \003(\r\"\335\002\n+CGCSystemMsg_Re"
  "portExternalPurchase_Request\022\r\n\005appid\030\001 "
  "\001(\r\022\017\n\007steamid\030\002 \001(\006\022K\n\010provider\030\003 \001(\0162\027"
  ".EMobilePaymentProvider: k_EMobilePaymen"
  "tProvider_Invalid\022\017\n\007orderid\030\004 \001(\004\022\030\n\020pr"
  "ovider_orderid\030\005 \001(\t\022\016\n\006amount\030\006 \001(\003\022\020\n\010"
  "currency\030\007 \001(\t\022\020\n\010quantity\030\010 \001(\r\022\016\n\006item"
  "id\030\t \001(\r\022\030\n\020item_description\030\n \001(\t\022\020\n\010la"
  "nguage\030\013 \001(\t\022\020\n\010category\030\014 \001(\t\022\024\n\014time_c"
  "reated\030\r \001(\r\"P\n,CGCSystemMsg_ReportExter"
  "nalPurchase_Response\022\017\n\007transid\030\001 \001(\006\022\017\n"
  "\007orderid\030\002 \001(\004\"\207\001\n#CWorkshop_AddSpecialP"
  "ayment_Request\022\r\n\005appid\030\001 \001(\r\022\022\n\ngameite"
  "mid\030\002 \001(\r\022\014\n\004date\030\003 \001(\t\022\026\n\016payment_us_us"
  "d\030\004 \001(\004\022\027\n\017payment_row_usd\030\005 \001(\004\"&\n$CWor"
  "kshop_AddSpecialPayment_Response\"W\n$CWor"
  "kshop_GetSpecialPayments_Request\022\r\n\005appi"
  "d\030\001 \001(\r\022\022\n\ngameitemid\030\002 \001(\r\022\014\n\004date\030\003 \001("
  "\t\"\364\001\n%CWorkshop_GetSpecialPayments_Respo"
  "nse\022O\n\020special_payments\030\001 \003(\01325.CWorksho"
  "p_GetSpecialPayments_Response.SpecialPay"
  "ment\032z\n\016SpecialPayment\022\r\n\005appid\030\001 \001(\r\022\022\n"
  "\ngameitemid\030\002 \001(\r\022\014\n\004date\030\003 \001(\t\022\032\n\022net_p"
  "ayment_us_usd\030\004 \001(\004\022\033\n\023net_payment_row_u"
  "sd\030\005 \001(\004*\223\001\n\026EMobilePaymentProvider\022$\n k"
  "_EMobilePaymentProvider_Invalid\020\000\022\'\n#k_E"
  "MobilePaymentProvider_GooglePlay\020\001\022*\n&k_"
  "EMobilePaymentProvider_AppleAppStore\020\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_steammessages_5fint_2eproto_deps[1] = {
  &::descriptor_table_steammessages_2eproto,
};
static ::_pbi::once_flag descriptor_table_steammessages_5fint_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_steammessages_5fint_2eproto = {
    false, false, 10798, descriptor_table_protodef_steammessages_5fint_2eproto,
    "steammessages_int.proto",
    &descriptor_table_steammessages_5fint_2eproto_once, descriptor_table_steammessages_5fint_2eproto_deps, 1, 96,
    schemas, file_default_instances, TableStruct_steammessages_5fint_2eproto::offsets,
    file_level_metadata_steammessages_5fint_2eproto, file_level_enum_descriptors_steammessages_5fint_2eproto,
    file_level_service_descriptors_steammessages_5fint_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_steammessages_5fint_2eproto_getter() {
  return &descriptor_table_steammessages_5fint_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fint_2eproto(&descriptor_table_steammessages_5fint_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGCRoutingInfo_RoutingMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fint_2eproto);
  return file_level_enum_descriptors_steammessages_5fint_2eproto[0];
}
bool CMsgGCRoutingInfo_RoutingMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::RANDOM;
constexpr CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::DISCARD;
constexpr CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::CLIENT_STEAMID;
constexpr CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::PROTOBUF_FIELD_UINT64;
constexpr CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::WEBAPI_PARAM;
constexpr CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::WEBAPI_PARAM_STEAMID_ACCOUNTID;
constexpr CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::RoutingMethod_MIN;
constexpr CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::RoutingMethod_MAX;
constexpr int CMsgGCRoutingInfo::RoutingMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGCMsgSetOptions_Option_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fint_2eproto);
  return file_level_enum_descriptors_steammessages_5fint_2eproto[1];
}
bool CMsgGCMsgSetOptions_Option_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::NOTIFY_USER_SESSIONS;
constexpr CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::NOTIFY_SERVER_SESSIONS;
constexpr CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::NOTIFY_ACHIEVEMENTS;
constexpr CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::NOTIFY_VAC_ACTION;
constexpr CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::Option_MIN;
constexpr CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::Option_MAX;
constexpr int CMsgGCMsgSetOptions::Option_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGCMsgSetOptions_GCSQLVersion_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fint_2eproto);
  return file_level_enum_descriptors_steammessages_5fint_2eproto[2];
}
bool CMsgGCMsgSetOptions_GCSQLVersion_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgGCMsgSetOptions_GCSQLVersion CMsgGCMsgSetOptions::GCSQL_VERSION_BASELINE;
constexpr CMsgGCMsgSetOptions_GCSQLVersion CMsgGCMsgSetOptions::GCSQL_VERSION_BOOLTYPE;
constexpr CMsgGCMsgSetOptions_GCSQLVersion CMsgGCMsgSetOptions::GCSQLVersion_MIN;
constexpr CMsgGCMsgSetOptions_GCSQLVersion CMsgGCMsgSetOptions::GCSQLVersion_MAX;
constexpr int CMsgGCMsgSetOptions::GCSQLVersion_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDPPartnerMicroTxnsResponse_EErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fint_2eproto);
  return file_level_enum_descriptors_steammessages_5fint_2eproto[3];
}
bool CMsgDPPartnerMicroTxnsResponse_EErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgValid;
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgInvalidAppID;
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgInvalidPartnerInfo;
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgNoTransactions;
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgSQLFailure;
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgPartnerInfoDiscrepancy;
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgTransactionInsertFailed;
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgAlreadyRunning;
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgInvalidTransactionData;
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::EErrorCode_MIN;
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::EErrorCode_MAX;
constexpr int CMsgDPPartnerMicroTxnsResponse::EErrorCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMobilePaymentProvider_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fint_2eproto);
  return file_level_enum_descriptors_steammessages_5fint_2eproto[4];
}
bool EMobilePaymentProvider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgWebAPIKey::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgWebAPIKey>()._impl_._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_publisher_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgWebAPIKey::CMsgWebAPIKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgWebAPIKey)
}
CMsgWebAPIKey::CMsgWebAPIKey(const CMsgWebAPIKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgWebAPIKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.publisher_group_id_){}
    , decltype(_impl_.key_id_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_domain()) {
    _this->_impl_.domain_.Set(from._internal_domain(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:CMsgWebAPIKey)
}

inline void CMsgWebAPIKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.publisher_group_id_){0u}
    , decltype(_impl_.key_id_){0u}
    , decltype(_impl_.status_){255u}
  };
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgWebAPIKey::~CMsgWebAPIKey() {
  // @@protoc_insertion_point(destructor:CMsgWebAPIKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgWebAPIKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.domain_.Destroy();
}

void CMsgWebAPIKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgWebAPIKey::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgWebAPIKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.domain_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.key_id_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.key_id_));
    _impl_.status_ = 255u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgWebAPIKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 status = 1 [default = 255];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 publisher_group_id = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_publisher_group_id(&has_bits);
          _impl_.publisher_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 key_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_key_id(&has_bits);
          _impl_.key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string domain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgWebAPIKey.domain");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgWebAPIKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgWebAPIKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 status = 1 [default = 255];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status(), target);
  }

  // optional uint32 account_id = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional uint32 publisher_group_id = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_publisher_group_id(), target);
  }

  // optional uint32 key_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_key_id(), target);
  }

  // optional string domain = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgWebAPIKey.domain");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_domain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgWebAPIKey)
  return target;
}

size_t CMsgWebAPIKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgWebAPIKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string domain = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_domain());
    }

    // optional uint32 account_id = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 publisher_group_id = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_publisher_group_id());
    }

    // optional uint32 key_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_key_id());
    }

    // optional uint32 status = 1 [default = 255];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgWebAPIKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgWebAPIKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgWebAPIKey::GetClassData() const { return &_class_data_; }


void CMsgWebAPIKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgWebAPIKey*>(&to_msg);
  auto& from = static_cast<const CMsgWebAPIKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgWebAPIKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_domain(from._internal_domain());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.publisher_group_id_ = from._impl_.publisher_group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.key_id_ = from._impl_.key_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgWebAPIKey::CopyFrom(const CMsgWebAPIKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgWebAPIKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWebAPIKey::IsInitialized() const {
  return true;
}

void CMsgWebAPIKey::InternalSwap(CMsgWebAPIKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.domain_, lhs_arena,
      &other->_impl_.domain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgWebAPIKey, _impl_.key_id_)
      + sizeof(CMsgWebAPIKey::_impl_.key_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgWebAPIKey, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgWebAPIKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[0]);
}

// ===================================================================

class CMsgHttpRequest_RequestHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHttpRequest_RequestHeader>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgHttpRequest_RequestHeader::CMsgHttpRequest_RequestHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgHttpRequest.RequestHeader)
}
CMsgHttpRequest_RequestHeader::CMsgHttpRequest_RequestHeader(const CMsgHttpRequest_RequestHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgHttpRequest_RequestHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgHttpRequest.RequestHeader)
}

inline void CMsgHttpRequest_RequestHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgHttpRequest_RequestHeader::~CMsgHttpRequest_RequestHeader() {
  // @@protoc_insertion_point(destructor:CMsgHttpRequest.RequestHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgHttpRequest_RequestHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
}

void CMsgHttpRequest_RequestHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgHttpRequest_RequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHttpRequest.RequestHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHttpRequest_RequestHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgHttpRequest.RequestHeader.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgHttpRequest.RequestHeader.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgHttpRequest_RequestHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHttpRequest.RequestHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgHttpRequest.RequestHeader.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgHttpRequest.RequestHeader.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHttpRequest.RequestHeader)
  return target;
}

size_t CMsgHttpRequest_RequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHttpRequest.RequestHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgHttpRequest_RequestHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgHttpRequest_RequestHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgHttpRequest_RequestHeader::GetClassData() const { return &_class_data_; }


void CMsgHttpRequest_RequestHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgHttpRequest_RequestHeader*>(&to_msg);
  auto& from = static_cast<const CMsgHttpRequest_RequestHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgHttpRequest.RequestHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgHttpRequest_RequestHeader::CopyFrom(const CMsgHttpRequest_RequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHttpRequest.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpRequest_RequestHeader::IsInitialized() const {
  return true;
}

void CMsgHttpRequest_RequestHeader::InternalSwap(CMsgHttpRequest_RequestHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHttpRequest_RequestHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[1]);
}

// ===================================================================

class CMsgHttpRequest_QueryParam::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHttpRequest_QueryParam>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgHttpRequest_QueryParam::CMsgHttpRequest_QueryParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgHttpRequest.QueryParam)
}
CMsgHttpRequest_QueryParam::CMsgHttpRequest_QueryParam(const CMsgHttpRequest_QueryParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgHttpRequest_QueryParam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgHttpRequest.QueryParam)
}

inline void CMsgHttpRequest_QueryParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgHttpRequest_QueryParam::~CMsgHttpRequest_QueryParam() {
  // @@protoc_insertion_point(destructor:CMsgHttpRequest.QueryParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgHttpRequest_QueryParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
}

void CMsgHttpRequest_QueryParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgHttpRequest_QueryParam::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHttpRequest.QueryParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHttpRequest_QueryParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgHttpRequest.QueryParam.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgHttpRequest_QueryParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHttpRequest.QueryParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgHttpRequest.QueryParam.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHttpRequest.QueryParam)
  return target;
}

size_t CMsgHttpRequest_QueryParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHttpRequest.QueryParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bytes value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgHttpRequest_QueryParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgHttpRequest_QueryParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgHttpRequest_QueryParam::GetClassData() const { return &_class_data_; }


void CMsgHttpRequest_QueryParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgHttpRequest_QueryParam*>(&to_msg);
  auto& from = static_cast<const CMsgHttpRequest_QueryParam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgHttpRequest.QueryParam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgHttpRequest_QueryParam::CopyFrom(const CMsgHttpRequest_QueryParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHttpRequest.QueryParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpRequest_QueryParam::IsInitialized() const {
  return true;
}

void CMsgHttpRequest_QueryParam::InternalSwap(CMsgHttpRequest_QueryParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHttpRequest_QueryParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[2]);
}

// ===================================================================

class CMsgHttpRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHttpRequest>()._impl_._has_bits_);
  static void set_has_request_method(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hostname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_absolute_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_use_https(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgHttpRequest::CMsgHttpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgHttpRequest)
}
CMsgHttpRequest::CMsgHttpRequest(const CMsgHttpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgHttpRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.headers_){from._impl_.headers_}
    , decltype(_impl_.get_params_){from._impl_.get_params_}
    , decltype(_impl_.post_params_){from._impl_.post_params_}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.request_method_){}
    , decltype(_impl_.absolute_timeout_){}
    , decltype(_impl_.use_https_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hostname()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_body()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.request_method_, &from._impl_.request_method_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.use_https_) -
    reinterpret_cast<char*>(&_impl_.request_method_)) + sizeof(_impl_.use_https_));
  // @@protoc_insertion_point(copy_constructor:CMsgHttpRequest)
}

inline void CMsgHttpRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.headers_){arena}
    , decltype(_impl_.get_params_){arena}
    , decltype(_impl_.post_params_){arena}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.request_method_){0u}
    , decltype(_impl_.absolute_timeout_){0u}
    , decltype(_impl_.use_https_){false}
  };
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgHttpRequest::~CMsgHttpRequest() {
  // @@protoc_insertion_point(destructor:CMsgHttpRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgHttpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.headers_.~RepeatedPtrField();
  _impl_.get_params_.~RepeatedPtrField();
  _impl_.post_params_.~RepeatedPtrField();
  _impl_.hostname_.Destroy();
  _impl_.url_.Destroy();
  _impl_.body_.Destroy();
}

void CMsgHttpRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgHttpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHttpRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.headers_.Clear();
  _impl_.get_params_.Clear();
  _impl_.post_params_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.hostname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.body_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.request_method_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.use_https_) -
        reinterpret_cast<char*>(&_impl_.request_method_)) + sizeof(_impl_.use_https_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHttpRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 request_method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_request_method(&has_bits);
          _impl_.request_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string hostname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgHttpRequest.hostname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgHttpRequest.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgHttpRequest.RequestHeader headers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgHttpRequest.QueryParam get_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_get_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgHttpRequest.QueryParam post_params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_post_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes body = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 absolute_timeout = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_absolute_timeout(&has_bits);
          _impl_.absolute_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_https = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_use_https(&has_bits);
          _impl_.use_https_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgHttpRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHttpRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 request_method = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_request_method(), target);
  }

  // optional string hostname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgHttpRequest.hostname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hostname(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgHttpRequest.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // repeated .CMsgHttpRequest.RequestHeader headers = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_headers_size()); i < n; i++) {
    const auto& repfield = this->_internal_headers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgHttpRequest.QueryParam get_params = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_get_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_get_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgHttpRequest.QueryParam post_params = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_post_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_post_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes body = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_body(), target);
  }

  // optional uint32 absolute_timeout = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_absolute_timeout(), target);
  }

  // optional bool use_https = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_use_https(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHttpRequest)
  return target;
}

size_t CMsgHttpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHttpRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgHttpRequest.RequestHeader headers = 4;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->_impl_.headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgHttpRequest.QueryParam get_params = 5;
  total_size += 1UL * this->_internal_get_params_size();
  for (const auto& msg : this->_impl_.get_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgHttpRequest.QueryParam post_params = 6;
  total_size += 1UL * this->_internal_post_params_size();
  for (const auto& msg : this->_impl_.post_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string hostname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hostname());
    }

    // optional string url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional bytes body = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_body());
    }

    // optional uint32 request_method = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_request_method());
    }

    // optional uint32 absolute_timeout = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_absolute_timeout());
    }

    // optional bool use_https = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgHttpRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgHttpRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgHttpRequest::GetClassData() const { return &_class_data_; }


void CMsgHttpRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgHttpRequest*>(&to_msg);
  auto& from = static_cast<const CMsgHttpRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgHttpRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
  _this->_impl_.get_params_.MergeFrom(from._impl_.get_params_);
  _this->_impl_.post_params_.MergeFrom(from._impl_.post_params_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_hostname(from._internal_hostname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.request_method_ = from._impl_.request_method_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.absolute_timeout_ = from._impl_.absolute_timeout_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.use_https_ = from._impl_.use_https_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgHttpRequest::CopyFrom(const CMsgHttpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpRequest::IsInitialized() const {
  return true;
}

void CMsgHttpRequest::InternalSwap(CMsgHttpRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.headers_.InternalSwap(&other->_impl_.headers_);
  _impl_.get_params_.InternalSwap(&other->_impl_.get_params_);
  _impl_.post_params_.InternalSwap(&other->_impl_.post_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgHttpRequest, _impl_.use_https_)
      + sizeof(CMsgHttpRequest::_impl_.use_https_)
      - PROTOBUF_FIELD_OFFSET(CMsgHttpRequest, _impl_.request_method_)>(
          reinterpret_cast<char*>(&_impl_.request_method_),
          reinterpret_cast<char*>(&other->_impl_.request_method_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHttpRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[3]);
}

// ===================================================================

class CMsgWebAPIRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgWebAPIRequest>()._impl_._has_bits_);
  static void set_has_interface_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_method_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgWebAPIKey& api_key(const CMsgWebAPIRequest* msg);
  static void set_has_api_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgHttpRequest& request(const CMsgWebAPIRequest* msg);
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_routing_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CMsgWebAPIKey&
CMsgWebAPIRequest::_Internal::api_key(const CMsgWebAPIRequest* msg) {
  return *msg->_impl_.api_key_;
}
const ::CMsgHttpRequest&
CMsgWebAPIRequest::_Internal::request(const CMsgWebAPIRequest* msg) {
  return *msg->_impl_.request_;
}
CMsgWebAPIRequest::CMsgWebAPIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgWebAPIRequest)
}
CMsgWebAPIRequest::CMsgWebAPIRequest(const CMsgWebAPIRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgWebAPIRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interface_name_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.api_key_){nullptr}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.version_){}
    , decltype(_impl_.routing_app_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.interface_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_interface_name()) {
    _this->_impl_.interface_name_.Set(from._internal_interface_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_method_name()) {
    _this->_impl_.method_name_.Set(from._internal_method_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_api_key()) {
    _this->_impl_.api_key_ = new ::CMsgWebAPIKey(*from._impl_.api_key_);
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::CMsgHttpRequest(*from._impl_.request_);
  }
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.routing_app_id_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.routing_app_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgWebAPIRequest)
}

inline void CMsgWebAPIRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interface_name_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.api_key_){nullptr}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.version_){0u}
    , decltype(_impl_.routing_app_id_){0u}
  };
  _impl_.interface_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgWebAPIRequest::~CMsgWebAPIRequest() {
  // @@protoc_insertion_point(destructor:CMsgWebAPIRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgWebAPIRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.interface_name_.Destroy();
  _impl_.method_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.api_key_;
  if (this != internal_default_instance()) delete _impl_.request_;
}

void CMsgWebAPIRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgWebAPIRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgWebAPIRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.interface_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.method_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.api_key_ != nullptr);
      _impl_.api_key_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.request_ != nullptr);
      _impl_.request_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.routing_app_id_) -
        reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.routing_app_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgWebAPIRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string interface_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_interface_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgWebAPIRequest.interface_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string method_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_method_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgWebAPIRequest.method_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgWebAPIKey api_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_api_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgHttpRequest request = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 routing_app_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_routing_app_id(&has_bits);
          _impl_.routing_app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgWebAPIRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgWebAPIRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string interface_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_interface_name().data(), static_cast<int>(this->_internal_interface_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgWebAPIRequest.interface_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_interface_name(), target);
  }

  // optional string method_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_method_name().data(), static_cast<int>(this->_internal_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgWebAPIRequest.method_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_method_name(), target);
  }

  // optional uint32 version = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_version(), target);
  }

  // optional .CMsgWebAPIKey api_key = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::api_key(this),
        _Internal::api_key(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgHttpRequest request = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  // optional uint32 routing_app_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_routing_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgWebAPIRequest)
  return target;
}

size_t CMsgWebAPIRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgWebAPIRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string interface_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_interface_name());
    }

    // optional string method_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_method_name());
    }

    // optional .CMsgWebAPIKey api_key = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.api_key_);
    }

    // optional .CMsgHttpRequest request = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_);
    }

    // optional uint32 version = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
    }

    // optional uint32 routing_app_id = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_routing_app_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgWebAPIRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgWebAPIRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgWebAPIRequest::GetClassData() const { return &_class_data_; }


void CMsgWebAPIRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgWebAPIRequest*>(&to_msg);
  auto& from = static_cast<const CMsgWebAPIRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgWebAPIRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_interface_name(from._internal_interface_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_method_name(from._internal_method_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_api_key()->::CMsgWebAPIKey::MergeFrom(
          from._internal_api_key());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_request()->::CMsgHttpRequest::MergeFrom(
          from._internal_request());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.routing_app_id_ = from._impl_.routing_app_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgWebAPIRequest::CopyFrom(const CMsgWebAPIRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgWebAPIRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWebAPIRequest::IsInitialized() const {
  return true;
}

void CMsgWebAPIRequest::InternalSwap(CMsgWebAPIRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.interface_name_, lhs_arena,
      &other->_impl_.interface_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_name_, lhs_arena,
      &other->_impl_.method_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgWebAPIRequest, _impl_.routing_app_id_)
      + sizeof(CMsgWebAPIRequest::_impl_.routing_app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgWebAPIRequest, _impl_.api_key_)>(
          reinterpret_cast<char*>(&_impl_.api_key_),
          reinterpret_cast<char*>(&other->_impl_.api_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgWebAPIRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[4]);
}

// ===================================================================

class CMsgHttpResponse_ResponseHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHttpResponse_ResponseHeader>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgHttpResponse_ResponseHeader::CMsgHttpResponse_ResponseHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgHttpResponse.ResponseHeader)
}
CMsgHttpResponse_ResponseHeader::CMsgHttpResponse_ResponseHeader(const CMsgHttpResponse_ResponseHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgHttpResponse_ResponseHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgHttpResponse.ResponseHeader)
}

inline void CMsgHttpResponse_ResponseHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgHttpResponse_ResponseHeader::~CMsgHttpResponse_ResponseHeader() {
  // @@protoc_insertion_point(destructor:CMsgHttpResponse.ResponseHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgHttpResponse_ResponseHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
}

void CMsgHttpResponse_ResponseHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgHttpResponse_ResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHttpResponse.ResponseHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHttpResponse_ResponseHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgHttpResponse.ResponseHeader.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgHttpResponse.ResponseHeader.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgHttpResponse_ResponseHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHttpResponse.ResponseHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgHttpResponse.ResponseHeader.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgHttpResponse.ResponseHeader.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHttpResponse.ResponseHeader)
  return target;
}

size_t CMsgHttpResponse_ResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHttpResponse.ResponseHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgHttpResponse_ResponseHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgHttpResponse_ResponseHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgHttpResponse_ResponseHeader::GetClassData() const { return &_class_data_; }


void CMsgHttpResponse_ResponseHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgHttpResponse_ResponseHeader*>(&to_msg);
  auto& from = static_cast<const CMsgHttpResponse_ResponseHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgHttpResponse.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgHttpResponse_ResponseHeader::CopyFrom(const CMsgHttpResponse_ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHttpResponse.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpResponse_ResponseHeader::IsInitialized() const {
  return true;
}

void CMsgHttpResponse_ResponseHeader::InternalSwap(CMsgHttpResponse_ResponseHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHttpResponse_ResponseHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[5]);
}

// ===================================================================

class CMsgHttpResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHttpResponse>()._impl_._has_bits_);
  static void set_has_status_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgHttpResponse::CMsgHttpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgHttpResponse)
}
CMsgHttpResponse::CMsgHttpResponse(const CMsgHttpResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgHttpResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.headers_){from._impl_.headers_}
    , decltype(_impl_.body_){}
    , decltype(_impl_.status_code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_body()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_code_ = from._impl_.status_code_;
  // @@protoc_insertion_point(copy_constructor:CMsgHttpResponse)
}

inline void CMsgHttpResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.headers_){arena}
    , decltype(_impl_.body_){}
    , decltype(_impl_.status_code_){0u}
  };
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgHttpResponse::~CMsgHttpResponse() {
  // @@protoc_insertion_point(destructor:CMsgHttpResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgHttpResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.headers_.~RepeatedPtrField();
  _impl_.body_.Destroy();
}

void CMsgHttpResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgHttpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHttpResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.headers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.body_.ClearNonDefaultToEmpty();
  }
  _impl_.status_code_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHttpResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_status_code(&has_bits);
          _impl_.status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgHttpResponse.ResponseHeader headers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgHttpResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHttpResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 status_code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status_code(), target);
  }

  // repeated .CMsgHttpResponse.ResponseHeader headers = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_headers_size()); i < n; i++) {
    const auto& repfield = this->_internal_headers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes body = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHttpResponse)
  return target;
}

size_t CMsgHttpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHttpResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgHttpResponse.ResponseHeader headers = 2;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->_impl_.headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes body = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_body());
    }

    // optional uint32 status_code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgHttpResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgHttpResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgHttpResponse::GetClassData() const { return &_class_data_; }


void CMsgHttpResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgHttpResponse*>(&to_msg);
  auto& from = static_cast<const CMsgHttpResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgHttpResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.status_code_ = from._impl_.status_code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgHttpResponse::CopyFrom(const CMsgHttpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHttpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpResponse::IsInitialized() const {
  return true;
}

void CMsgHttpResponse::InternalSwap(CMsgHttpResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.headers_.InternalSwap(&other->_impl_.headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  swap(_impl_.status_code_, other->_impl_.status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHttpResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[6]);
}

// ===================================================================

class CMsgAMFindAccounts::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMFindAccounts>()._impl_._has_bits_);
  static void set_has_search_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_search_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAMFindAccounts::CMsgAMFindAccounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAMFindAccounts)
}
CMsgAMFindAccounts::CMsgAMFindAccounts(const CMsgAMFindAccounts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAMFindAccounts* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.search_string_){}
    , decltype(_impl_.search_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.search_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_search_string()) {
    _this->_impl_.search_string_.Set(from._internal_search_string(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.search_type_ = from._impl_.search_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgAMFindAccounts)
}

inline void CMsgAMFindAccounts::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.search_string_){}
    , decltype(_impl_.search_type_){0u}
  };
  _impl_.search_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgAMFindAccounts::~CMsgAMFindAccounts() {
  // @@protoc_insertion_point(destructor:CMsgAMFindAccounts)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAMFindAccounts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.search_string_.Destroy();
}

void CMsgAMFindAccounts::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAMFindAccounts::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMFindAccounts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.search_string_.ClearNonDefaultToEmpty();
  }
  _impl_.search_type_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMFindAccounts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 search_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_search_type(&has_bits);
          _impl_.search_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string search_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_search_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgAMFindAccounts.search_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMFindAccounts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMFindAccounts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 search_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_search_type(), target);
  }

  // optional string search_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_search_string().data(), static_cast<int>(this->_internal_search_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgAMFindAccounts.search_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_search_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMFindAccounts)
  return target;
}

size_t CMsgAMFindAccounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMFindAccounts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string search_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_search_string());
    }

    // optional uint32 search_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_search_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMFindAccounts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAMFindAccounts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMFindAccounts::GetClassData() const { return &_class_data_; }


void CMsgAMFindAccounts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAMFindAccounts*>(&to_msg);
  auto& from = static_cast<const CMsgAMFindAccounts&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMFindAccounts)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_search_string(from._internal_search_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.search_type_ = from._impl_.search_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMFindAccounts::CopyFrom(const CMsgAMFindAccounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMFindAccounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMFindAccounts::IsInitialized() const {
  return true;
}

void CMsgAMFindAccounts::InternalSwap(CMsgAMFindAccounts* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.search_string_, lhs_arena,
      &other->_impl_.search_string_, rhs_arena
  );
  swap(_impl_.search_type_, other->_impl_.search_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMFindAccounts::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[7]);
}

// ===================================================================

class CMsgAMFindAccountsResponse::_Internal {
 public:
};

CMsgAMFindAccountsResponse::CMsgAMFindAccountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAMFindAccountsResponse)
}
CMsgAMFindAccountsResponse::CMsgAMFindAccountsResponse(const CMsgAMFindAccountsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAMFindAccountsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.steam_id_){from._impl_.steam_id_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgAMFindAccountsResponse)
}

inline void CMsgAMFindAccountsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.steam_id_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgAMFindAccountsResponse::~CMsgAMFindAccountsResponse() {
  // @@protoc_insertion_point(destructor:CMsgAMFindAccountsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAMFindAccountsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.steam_id_.~RepeatedField();
}

void CMsgAMFindAccountsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAMFindAccountsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMFindAccountsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.steam_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMFindAccountsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_steam_id(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_steam_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMFindAccountsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMFindAccountsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 steam_id = 1;
  for (int i = 0, n = this->_internal_steam_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMFindAccountsResponse)
  return target;
}

size_t CMsgAMFindAccountsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMFindAccountsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steam_id = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steam_id_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_steam_id_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMFindAccountsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAMFindAccountsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMFindAccountsResponse::GetClassData() const { return &_class_data_; }


void CMsgAMFindAccountsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAMFindAccountsResponse*>(&to_msg);
  auto& from = static_cast<const CMsgAMFindAccountsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMFindAccountsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.steam_id_.MergeFrom(from._impl_.steam_id_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMFindAccountsResponse::CopyFrom(const CMsgAMFindAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMFindAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMFindAccountsResponse::IsInitialized() const {
  return true;
}

void CMsgAMFindAccountsResponse::InternalSwap(CMsgAMFindAccountsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.steam_id_.InternalSwap(&other->_impl_.steam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMFindAccountsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[8]);
}

// ===================================================================

class CMsgNotifyWatchdog::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgNotifyWatchdog>()._impl_._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_alert_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_critical(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_recipient(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgNotifyWatchdog::CMsgNotifyWatchdog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgNotifyWatchdog)
}
CMsgNotifyWatchdog::CMsgNotifyWatchdog(const CMsgNotifyWatchdog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgNotifyWatchdog* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.recipient_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.alert_type_){}
    , decltype(_impl_.critical_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.appid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_recipient()) {
    _this->_impl_.recipient_.Set(from._internal_recipient(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.source_, &from._impl_.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.appid_) -
    reinterpret_cast<char*>(&_impl_.source_)) + sizeof(_impl_.appid_));
  // @@protoc_insertion_point(copy_constructor:CMsgNotifyWatchdog)
}

inline void CMsgNotifyWatchdog::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.recipient_){}
    , decltype(_impl_.source_){0u}
    , decltype(_impl_.alert_type_){0u}
    , decltype(_impl_.critical_){false}
    , decltype(_impl_.time_){0u}
    , decltype(_impl_.appid_){0u}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgNotifyWatchdog::~CMsgNotifyWatchdog() {
  // @@protoc_insertion_point(destructor:CMsgNotifyWatchdog)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgNotifyWatchdog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  _impl_.recipient_.Destroy();
}

void CMsgNotifyWatchdog::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgNotifyWatchdog::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgNotifyWatchdog)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.recipient_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.appid_) -
        reinterpret_cast<char*>(&_impl_.source_)) + sizeof(_impl_.appid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgNotifyWatchdog::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_source(&has_bits);
          _impl_.source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 alert_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_alert_type(&has_bits);
          _impl_.alert_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool critical = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_critical(&has_bits);
          _impl_.critical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_time(&has_bits);
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string text = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgNotifyWatchdog.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string recipient = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_recipient();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgNotifyWatchdog.recipient");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgNotifyWatchdog::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgNotifyWatchdog)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 source = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_source(), target);
  }

  // optional uint32 alert_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_alert_type(), target);
  }

  // optional bool critical = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_critical(), target);
  }

  // optional uint32 time = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time(), target);
  }

  // optional uint32 appid = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_appid(), target);
  }

  // optional string text = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgNotifyWatchdog.text");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_text(), target);
  }

  // optional string recipient = 12;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_recipient().data(), static_cast<int>(this->_internal_recipient().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgNotifyWatchdog.recipient");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_recipient(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgNotifyWatchdog)
  return target;
}

size_t CMsgNotifyWatchdog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgNotifyWatchdog)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string text = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional string recipient = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_recipient());
    }

    // optional uint32 source = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source());
    }

    // optional uint32 alert_type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_alert_type());
    }

    // optional bool critical = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 time = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
    }

    // optional uint32 appid = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgNotifyWatchdog::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgNotifyWatchdog::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgNotifyWatchdog::GetClassData() const { return &_class_data_; }


void CMsgNotifyWatchdog::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgNotifyWatchdog*>(&to_msg);
  auto& from = static_cast<const CMsgNotifyWatchdog&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgNotifyWatchdog)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_recipient(from._internal_recipient());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.source_ = from._impl_.source_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.alert_type_ = from._impl_.alert_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.critical_ = from._impl_.critical_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.time_ = from._impl_.time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgNotifyWatchdog::CopyFrom(const CMsgNotifyWatchdog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgNotifyWatchdog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNotifyWatchdog::IsInitialized() const {
  return true;
}

void CMsgNotifyWatchdog::InternalSwap(CMsgNotifyWatchdog* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.recipient_, lhs_arena,
      &other->_impl_.recipient_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgNotifyWatchdog, _impl_.appid_)
      + sizeof(CMsgNotifyWatchdog::_impl_.appid_)
      - PROTOBUF_FIELD_OFFSET(CMsgNotifyWatchdog, _impl_.source_)>(
          reinterpret_cast<char*>(&_impl_.source_),
          reinterpret_cast<char*>(&other->_impl_.source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgNotifyWatchdog::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[9]);
}

// ===================================================================

class CMsgAMGetLicenses::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMGetLicenses>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAMGetLicenses::CMsgAMGetLicenses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAMGetLicenses)
}
CMsgAMGetLicenses::CMsgAMGetLicenses(const CMsgAMGetLicenses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAMGetLicenses* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.steamid_ = from._impl_.steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgAMGetLicenses)
}

inline void CMsgAMGetLicenses::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
  };
}

CMsgAMGetLicenses::~CMsgAMGetLicenses() {
  // @@protoc_insertion_point(destructor:CMsgAMGetLicenses)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAMGetLicenses::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAMGetLicenses::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAMGetLicenses::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMGetLicenses)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMGetLicenses::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMGetLicenses::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMGetLicenses)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMGetLicenses)
  return target;
}

size_t CMsgAMGetLicenses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMGetLicenses)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMGetLicenses::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAMGetLicenses::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMGetLicenses::GetClassData() const { return &_class_data_; }


void CMsgAMGetLicenses::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAMGetLicenses*>(&to_msg);
  auto& from = static_cast<const CMsgAMGetLicenses&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMGetLicenses)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _this->_internal_set_steamid(from._internal_steamid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMGetLicenses::CopyFrom(const CMsgAMGetLicenses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMGetLicenses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetLicenses::IsInitialized() const {
  return true;
}

void CMsgAMGetLicenses::InternalSwap(CMsgAMGetLicenses* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.steamid_, other->_impl_.steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMGetLicenses::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[10]);
}

// ===================================================================

class CMsgPackageLicense::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPackageLicense>()._impl_._has_bits_);
  static void set_has_package_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_created(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgPackageLicense::CMsgPackageLicense(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPackageLicense)
}
CMsgPackageLicense::CMsgPackageLicense(const CMsgPackageLicense& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPackageLicense* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_id_){}
    , decltype(_impl_.time_created_){}
    , decltype(_impl_.owner_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.package_id_, &from._impl_.package_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.owner_id_) -
    reinterpret_cast<char*>(&_impl_.package_id_)) + sizeof(_impl_.owner_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgPackageLicense)
}

inline void CMsgPackageLicense::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.package_id_){0u}
    , decltype(_impl_.time_created_){0u}
    , decltype(_impl_.owner_id_){0u}
  };
}

CMsgPackageLicense::~CMsgPackageLicense() {
  // @@protoc_insertion_point(destructor:CMsgPackageLicense)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPackageLicense::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPackageLicense::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPackageLicense::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPackageLicense)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.package_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.owner_id_) -
        reinterpret_cast<char*>(&_impl_.package_id_)) + sizeof(_impl_.owner_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPackageLicense::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 package_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_package_id(&has_bits);
          _impl_.package_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_created = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_created(&has_bits);
          _impl_.time_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 owner_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_owner_id(&has_bits);
          _impl_.owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPackageLicense::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPackageLicense)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 package_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_package_id(), target);
  }

  // optional uint32 time_created = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_created(), target);
  }

  // optional uint32 owner_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_owner_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPackageLicense)
  return target;
}

size_t CMsgPackageLicense::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPackageLicense)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 package_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_package_id());
    }

    // optional uint32 time_created = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_created());
    }

    // optional uint32 owner_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPackageLicense::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPackageLicense::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPackageLicense::GetClassData() const { return &_class_data_; }


void CMsgPackageLicense::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPackageLicense*>(&to_msg);
  auto& from = static_cast<const CMsgPackageLicense&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPackageLicense)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.package_id_ = from._impl_.package_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.time_created_ = from._impl_.time_created_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.owner_id_ = from._impl_.owner_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPackageLicense::CopyFrom(const CMsgPackageLicense& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPackageLicense)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPackageLicense::IsInitialized() const {
  return true;
}

void CMsgPackageLicense::InternalSwap(CMsgPackageLicense* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPackageLicense, _impl_.owner_id_)
      + sizeof(CMsgPackageLicense::_impl_.owner_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgPackageLicense, _impl_.package_id_)>(
          reinterpret_cast<char*>(&_impl_.package_id_),
          reinterpret_cast<char*>(&other->_impl_.package_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPackageLicense::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[11]);
}

// ===================================================================

class CMsgAMGetLicensesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMGetLicensesResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAMGetLicensesResponse::CMsgAMGetLicensesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAMGetLicensesResponse)
}
CMsgAMGetLicensesResponse::CMsgAMGetLicensesResponse(const CMsgAMGetLicensesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAMGetLicensesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.license_){from._impl_.license_}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgAMGetLicensesResponse)
}

inline void CMsgAMGetLicensesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.license_){arena}
    , decltype(_impl_.result_){0u}
  };
}

CMsgAMGetLicensesResponse::~CMsgAMGetLicensesResponse() {
  // @@protoc_insertion_point(destructor:CMsgAMGetLicensesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAMGetLicensesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.license_.~RepeatedPtrField();
}

void CMsgAMGetLicensesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAMGetLicensesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMGetLicensesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.license_.Clear();
  _impl_.result_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMGetLicensesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgPackageLicense license = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_license(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMGetLicensesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMGetLicensesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgPackageLicense license = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_license_size()); i < n; i++) {
    const auto& repfield = this->_internal_license(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 result = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMGetLicensesResponse)
  return target;
}

size_t CMsgAMGetLicensesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMGetLicensesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgPackageLicense license = 1;
  total_size += 1UL * this->_internal_license_size();
  for (const auto& msg : this->_impl_.license_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 result = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMGetLicensesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAMGetLicensesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMGetLicensesResponse::GetClassData() const { return &_class_data_; }


void CMsgAMGetLicensesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAMGetLicensesResponse*>(&to_msg);
  auto& from = static_cast<const CMsgAMGetLicensesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMGetLicensesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.license_.MergeFrom(from._impl_.license_);
  if (from._internal_has_result()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMGetLicensesResponse::CopyFrom(const CMsgAMGetLicensesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMGetLicensesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetLicensesResponse::IsInitialized() const {
  return true;
}

void CMsgAMGetLicensesResponse::InternalSwap(CMsgAMGetLicensesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.license_.InternalSwap(&other->_impl_.license_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMGetLicensesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[12]);
}

// ===================================================================

class CMsgAMGetUserGameStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMGetUserGameStats>()._impl_._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgAMGetUserGameStats::CMsgAMGetUserGameStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAMGetUserGameStats)
}
CMsgAMGetUserGameStats::CMsgAMGetUserGameStats(const CMsgAMGetUserGameStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAMGetUserGameStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.steam_id_){}
    , decltype(_impl_.game_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steam_id_, &from._impl_.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.game_id_) -
    reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.game_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgAMGetUserGameStats)
}

inline void CMsgAMGetUserGameStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){arena}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
    , decltype(_impl_.game_id_){uint64_t{0u}}
  };
}

CMsgAMGetUserGameStats::~CMsgAMGetUserGameStats() {
  // @@protoc_insertion_point(destructor:CMsgAMGetUserGameStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAMGetUserGameStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedField();
}

void CMsgAMGetUserGameStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAMGetUserGameStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMGetUserGameStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.game_id_) -
        reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.game_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMGetUserGameStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_game_id(&has_bits);
          _impl_.game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_stats(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_stats(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMGetUserGameStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMGetUserGameStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_game_id(), target);
  }

  // repeated uint32 stats = 3;
  for (int i = 0, n = this->_internal_stats_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_stats(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMGetUserGameStats)
  return target;
}

size_t CMsgAMGetUserGameStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMGetUserGameStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 stats = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.stats_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_stats_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 game_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMGetUserGameStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAMGetUserGameStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMGetUserGameStats::GetClassData() const { return &_class_data_; }


void CMsgAMGetUserGameStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAMGetUserGameStats*>(&to_msg);
  auto& from = static_cast<const CMsgAMGetUserGameStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMGetUserGameStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.game_id_ = from._impl_.game_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMGetUserGameStats::CopyFrom(const CMsgAMGetUserGameStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMGetUserGameStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetUserGameStats::IsInitialized() const {
  return true;
}

void CMsgAMGetUserGameStats::InternalSwap(CMsgAMGetUserGameStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAMGetUserGameStats, _impl_.game_id_)
      + sizeof(CMsgAMGetUserGameStats::_impl_.game_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgAMGetUserGameStats, _impl_.steam_id_)>(
          reinterpret_cast<char*>(&_impl_.steam_id_),
          reinterpret_cast<char*>(&other->_impl_.steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMGetUserGameStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[13]);
}

// ===================================================================

class CMsgAMGetUserGameStatsResponse_Stats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMGetUserGameStatsResponse_Stats>()._impl_._has_bits_);
  static void set_has_stat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stat_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgAMGetUserGameStatsResponse_Stats::CMsgAMGetUserGameStatsResponse_Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAMGetUserGameStatsResponse.Stats)
}
CMsgAMGetUserGameStatsResponse_Stats::CMsgAMGetUserGameStatsResponse_Stats(const CMsgAMGetUserGameStatsResponse_Stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAMGetUserGameStatsResponse_Stats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stat_id_){}
    , decltype(_impl_.stat_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.stat_id_, &from._impl_.stat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stat_value_) -
    reinterpret_cast<char*>(&_impl_.stat_id_)) + sizeof(_impl_.stat_value_));
  // @@protoc_insertion_point(copy_constructor:CMsgAMGetUserGameStatsResponse.Stats)
}

inline void CMsgAMGetUserGameStatsResponse_Stats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stat_id_){0u}
    , decltype(_impl_.stat_value_){0u}
  };
}

CMsgAMGetUserGameStatsResponse_Stats::~CMsgAMGetUserGameStatsResponse_Stats() {
  // @@protoc_insertion_point(destructor:CMsgAMGetUserGameStatsResponse.Stats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAMGetUserGameStatsResponse_Stats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAMGetUserGameStatsResponse_Stats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAMGetUserGameStatsResponse_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMGetUserGameStatsResponse.Stats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.stat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.stat_value_) -
        reinterpret_cast<char*>(&_impl_.stat_id_)) + sizeof(_impl_.stat_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMGetUserGameStatsResponse_Stats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 stat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_stat_id(&has_bits);
          _impl_.stat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stat_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_stat_value(&has_bits);
          _impl_.stat_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMGetUserGameStatsResponse_Stats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMGetUserGameStatsResponse.Stats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stat_id(), target);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stat_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMGetUserGameStatsResponse.Stats)
  return target;
}

size_t CMsgAMGetUserGameStatsResponse_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMGetUserGameStatsResponse.Stats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stat_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stat_id());
    }

    // optional uint32 stat_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stat_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMGetUserGameStatsResponse_Stats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAMGetUserGameStatsResponse_Stats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMGetUserGameStatsResponse_Stats::GetClassData() const { return &_class_data_; }


void CMsgAMGetUserGameStatsResponse_Stats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAMGetUserGameStatsResponse_Stats*>(&to_msg);
  auto& from = static_cast<const CMsgAMGetUserGameStatsResponse_Stats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMGetUserGameStatsResponse.Stats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.stat_id_ = from._impl_.stat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.stat_value_ = from._impl_.stat_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMGetUserGameStatsResponse_Stats::CopyFrom(const CMsgAMGetUserGameStatsResponse_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMGetUserGameStatsResponse.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetUserGameStatsResponse_Stats::IsInitialized() const {
  return true;
}

void CMsgAMGetUserGameStatsResponse_Stats::InternalSwap(CMsgAMGetUserGameStatsResponse_Stats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Stats, _impl_.stat_value_)
      + sizeof(CMsgAMGetUserGameStatsResponse_Stats::_impl_.stat_value_)
      - PROTOBUF_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Stats, _impl_.stat_id_)>(
          reinterpret_cast<char*>(&_impl_.stat_id_),
          reinterpret_cast<char*>(&other->_impl_.stat_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMGetUserGameStatsResponse_Stats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[14]);
}

// ===================================================================

class CMsgAMGetUserGameStatsResponse_Achievement_Blocks::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMGetUserGameStatsResponse_Achievement_Blocks>()._impl_._has_bits_);
  static void set_has_achievement_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_achievement_bit_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unlock_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgAMGetUserGameStatsResponse_Achievement_Blocks::CMsgAMGetUserGameStatsResponse_Achievement_Blocks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
}
CMsgAMGetUserGameStatsResponse_Achievement_Blocks::CMsgAMGetUserGameStatsResponse_Achievement_Blocks(const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAMGetUserGameStatsResponse_Achievement_Blocks* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.achievement_id_){}
    , decltype(_impl_.achievement_bit_id_){}
    , decltype(_impl_.unlock_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.achievement_id_, &from._impl_.achievement_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unlock_time_) -
    reinterpret_cast<char*>(&_impl_.achievement_id_)) + sizeof(_impl_.unlock_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
}

inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.achievement_id_){0u}
    , decltype(_impl_.achievement_bit_id_){0u}
    , decltype(_impl_.unlock_time_){0u}
  };
}

CMsgAMGetUserGameStatsResponse_Achievement_Blocks::~CMsgAMGetUserGameStatsResponse_Achievement_Blocks() {
  // @@protoc_insertion_point(destructor:CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.achievement_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.unlock_time_) -
        reinterpret_cast<char*>(&_impl_.achievement_id_)) + sizeof(_impl_.unlock_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMGetUserGameStatsResponse_Achievement_Blocks::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 achievement_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_achievement_id(&has_bits);
          _impl_.achievement_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 achievement_bit_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_achievement_bit_id(&has_bits);
          _impl_.achievement_bit_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 unlock_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_unlock_time(&has_bits);
          _impl_.unlock_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMGetUserGameStatsResponse_Achievement_Blocks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 achievement_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_achievement_id(), target);
  }

  // optional uint32 achievement_bit_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_achievement_bit_id(), target);
  }

  // optional fixed32 unlock_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(3, this->_internal_unlock_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  return target;
}

size_t CMsgAMGetUserGameStatsResponse_Achievement_Blocks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 achievement_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_achievement_id());
    }

    // optional uint32 achievement_bit_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_achievement_bit_id());
    }

    // optional fixed32 unlock_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMGetUserGameStatsResponse_Achievement_Blocks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAMGetUserGameStatsResponse_Achievement_Blocks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMGetUserGameStatsResponse_Achievement_Blocks::GetClassData() const { return &_class_data_; }


void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAMGetUserGameStatsResponse_Achievement_Blocks*>(&to_msg);
  auto& from = static_cast<const CMsgAMGetUserGameStatsResponse_Achievement_Blocks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.achievement_id_ = from._impl_.achievement_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.achievement_bit_id_ = from._impl_.achievement_bit_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.unlock_time_ = from._impl_.unlock_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::CopyFrom(const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetUserGameStatsResponse_Achievement_Blocks::IsInitialized() const {
  return true;
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::InternalSwap(CMsgAMGetUserGameStatsResponse_Achievement_Blocks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Achievement_Blocks, _impl_.unlock_time_)
      + sizeof(CMsgAMGetUserGameStatsResponse_Achievement_Blocks::_impl_.unlock_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Achievement_Blocks, _impl_.achievement_id_)>(
          reinterpret_cast<char*>(&_impl_.achievement_id_),
          reinterpret_cast<char*>(&other->_impl_.achievement_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMGetUserGameStatsResponse_Achievement_Blocks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[15]);
}

// ===================================================================

class CMsgAMGetUserGameStatsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMGetUserGameStatsResponse>()._impl_._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgAMGetUserGameStatsResponse::CMsgAMGetUserGameStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAMGetUserGameStatsResponse)
}
CMsgAMGetUserGameStatsResponse::CMsgAMGetUserGameStatsResponse(const CMsgAMGetUserGameStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAMGetUserGameStatsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.achievement_blocks_){from._impl_.achievement_blocks_}
    , decltype(_impl_.steam_id_){}
    , decltype(_impl_.game_id_){}
    , decltype(_impl_.eresult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steam_id_, &from._impl_.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.eresult_) -
    reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgAMGetUserGameStatsResponse)
}

inline void CMsgAMGetUserGameStatsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){arena}
    , decltype(_impl_.achievement_blocks_){arena}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
    , decltype(_impl_.game_id_){uint64_t{0u}}
    , decltype(_impl_.eresult_){2}
  };
}

CMsgAMGetUserGameStatsResponse::~CMsgAMGetUserGameStatsResponse() {
  // @@protoc_insertion_point(destructor:CMsgAMGetUserGameStatsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAMGetUserGameStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
  _impl_.achievement_blocks_.~RepeatedPtrField();
}

void CMsgAMGetUserGameStatsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAMGetUserGameStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMGetUserGameStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  _impl_.achievement_blocks_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.game_id_) -
        reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.game_id_));
    _impl_.eresult_ = 2;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMGetUserGameStatsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_game_id(&has_bits);
          _impl_.game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 eresult = 3 [default = 2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_eresult(&has_bits);
          _impl_.eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgAMGetUserGameStatsResponse.Stats stats = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_achievement_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMGetUserGameStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMGetUserGameStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_game_id(), target);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_eresult(), target);
  }

  // repeated .CMsgAMGetUserGameStatsResponse.Stats stats = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_achievement_blocks_size()); i < n; i++) {
    const auto& repfield = this->_internal_achievement_blocks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMGetUserGameStatsResponse)
  return target;
}

size_t CMsgAMGetUserGameStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMGetUserGameStatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgAMGetUserGameStatsResponse.Stats stats = 4;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
  total_size += 1UL * this->_internal_achievement_blocks_size();
  for (const auto& msg : this->_impl_.achievement_blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 game_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 eresult = 3 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMGetUserGameStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAMGetUserGameStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMGetUserGameStatsResponse::GetClassData() const { return &_class_data_; }


void CMsgAMGetUserGameStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAMGetUserGameStatsResponse*>(&to_msg);
  auto& from = static_cast<const CMsgAMGetUserGameStatsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMGetUserGameStatsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  _this->_impl_.achievement_blocks_.MergeFrom(from._impl_.achievement_blocks_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.game_id_ = from._impl_.game_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.eresult_ = from._impl_.eresult_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMGetUserGameStatsResponse::CopyFrom(const CMsgAMGetUserGameStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMGetUserGameStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetUserGameStatsResponse::IsInitialized() const {
  return true;
}

void CMsgAMGetUserGameStatsResponse::InternalSwap(CMsgAMGetUserGameStatsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  _impl_.achievement_blocks_.InternalSwap(&other->_impl_.achievement_blocks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse, _impl_.game_id_)
      + sizeof(CMsgAMGetUserGameStatsResponse::_impl_.game_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse, _impl_.steam_id_)>(
          reinterpret_cast<char*>(&_impl_.steam_id_),
          reinterpret_cast<char*>(&other->_impl_.steam_id_));
  swap(_impl_.eresult_, other->_impl_.eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMGetUserGameStatsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[16]);
}

// ===================================================================

class CMsgGCGetCommandList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCGetCommandList>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_command_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCGetCommandList::CMsgGCGetCommandList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetCommandList)
}
CMsgGCGetCommandList::CMsgGCGetCommandList(const CMsgGCGetCommandList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCGetCommandList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.command_prefix_){}
    , decltype(_impl_.app_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.command_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_command_prefix()) {
    _this->_impl_.command_prefix_.Set(from._internal_command_prefix(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.app_id_ = from._impl_.app_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetCommandList)
}

inline void CMsgGCGetCommandList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.command_prefix_){}
    , decltype(_impl_.app_id_){0u}
  };
  _impl_.command_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCGetCommandList::~CMsgGCGetCommandList() {
  // @@protoc_insertion_point(destructor:CMsgGCGetCommandList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCGetCommandList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.command_prefix_.Destroy();
}

void CMsgGCGetCommandList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCGetCommandList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetCommandList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.command_prefix_.ClearNonDefaultToEmpty();
  }
  _impl_.app_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetCommandList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string command_prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_command_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCGetCommandList.command_prefix");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCGetCommandList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetCommandList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional string command_prefix = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_command_prefix().data(), static_cast<int>(this->_internal_command_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCGetCommandList.command_prefix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_command_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetCommandList)
  return target;
}

size_t CMsgGCGetCommandList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetCommandList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string command_prefix = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_command_prefix());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCGetCommandList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCGetCommandList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCGetCommandList::GetClassData() const { return &_class_data_; }


void CMsgGCGetCommandList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCGetCommandList*>(&to_msg);
  auto& from = static_cast<const CMsgGCGetCommandList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetCommandList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_command_prefix(from._internal_command_prefix());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCGetCommandList::CopyFrom(const CMsgGCGetCommandList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetCommandList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetCommandList::IsInitialized() const {
  return true;
}

void CMsgGCGetCommandList::InternalSwap(CMsgGCGetCommandList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.command_prefix_, lhs_arena,
      &other->_impl_.command_prefix_, rhs_arena
  );
  swap(_impl_.app_id_, other->_impl_.app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetCommandList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[17]);
}

// ===================================================================

class CMsgGCGetCommandListResponse::_Internal {
 public:
};

CMsgGCGetCommandListResponse::CMsgGCGetCommandListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetCommandListResponse)
}
CMsgGCGetCommandListResponse::CMsgGCGetCommandListResponse(const CMsgGCGetCommandListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCGetCommandListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.command_name_){from._impl_.command_name_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetCommandListResponse)
}

inline void CMsgGCGetCommandListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.command_name_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgGCGetCommandListResponse::~CMsgGCGetCommandListResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCGetCommandListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCGetCommandListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.command_name_.~RepeatedPtrField();
}

void CMsgGCGetCommandListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCGetCommandListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetCommandListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.command_name_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetCommandListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string command_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_command_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CMsgGCGetCommandListResponse.command_name");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCGetCommandListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetCommandListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string command_name = 1;
  for (int i = 0, n = this->_internal_command_name_size(); i < n; i++) {
    const auto& s = this->_internal_command_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCGetCommandListResponse.command_name");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetCommandListResponse)
  return target;
}

size_t CMsgGCGetCommandListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetCommandListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string command_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.command_name_.size());
  for (int i = 0, n = _impl_.command_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.command_name_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCGetCommandListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCGetCommandListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCGetCommandListResponse::GetClassData() const { return &_class_data_; }


void CMsgGCGetCommandListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCGetCommandListResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCGetCommandListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetCommandListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.command_name_.MergeFrom(from._impl_.command_name_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCGetCommandListResponse::CopyFrom(const CMsgGCGetCommandListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetCommandListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetCommandListResponse::IsInitialized() const {
  return true;
}

void CMsgGCGetCommandListResponse::InternalSwap(CMsgGCGetCommandListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.command_name_.InternalSwap(&other->_impl_.command_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetCommandListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[18]);
}

// ===================================================================

class CGCMsgMemCachedGet::_Internal {
 public:
};

CGCMsgMemCachedGet::CGCMsgMemCachedGet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CGCMsgMemCachedGet)
}
CGCMsgMemCachedGet::CGCMsgMemCachedGet(const CGCMsgMemCachedGet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCMsgMemCachedGet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGCMsgMemCachedGet)
}

inline void CGCMsgMemCachedGet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGCMsgMemCachedGet::~CGCMsgMemCachedGet() {
  // @@protoc_insertion_point(destructor:CGCMsgMemCachedGet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCMsgMemCachedGet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedPtrField();
}

void CGCMsgMemCachedGet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCMsgMemCachedGet::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgMemCachedGet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgMemCachedGet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CGCMsgMemCachedGet.keys");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgMemCachedGet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgMemCachedGet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCMsgMemCachedGet.keys");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgMemCachedGet)
  return target;
}

size_t CGCMsgMemCachedGet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgMemCachedGet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.keys_.size());
  for (int i = 0, n = _impl_.keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.keys_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgMemCachedGet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCMsgMemCachedGet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgMemCachedGet::GetClassData() const { return &_class_data_; }


void CGCMsgMemCachedGet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCMsgMemCachedGet*>(&to_msg);
  auto& from = static_cast<const CGCMsgMemCachedGet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgMemCachedGet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgMemCachedGet::CopyFrom(const CGCMsgMemCachedGet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgMemCachedGet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedGet::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedGet::InternalSwap(CGCMsgMemCachedGet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgMemCachedGet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[19]);
}

// ===================================================================

class CGCMsgMemCachedGetResponse_ValueTag::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgMemCachedGetResponse_ValueTag>()._impl_._has_bits_);
  static void set_has_found(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGCMsgMemCachedGetResponse_ValueTag::CGCMsgMemCachedGetResponse_ValueTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CGCMsgMemCachedGetResponse.ValueTag)
}
CGCMsgMemCachedGetResponse_ValueTag::CGCMsgMemCachedGetResponse_ValueTag(const CGCMsgMemCachedGetResponse_ValueTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCMsgMemCachedGetResponse_ValueTag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.found_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.found_ = from._impl_.found_;
  // @@protoc_insertion_point(copy_constructor:CGCMsgMemCachedGetResponse.ValueTag)
}

inline void CGCMsgMemCachedGetResponse_ValueTag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.found_){false}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGCMsgMemCachedGetResponse_ValueTag::~CGCMsgMemCachedGetResponse_ValueTag() {
  // @@protoc_insertion_point(destructor:CGCMsgMemCachedGetResponse.ValueTag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCMsgMemCachedGetResponse_ValueTag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void CGCMsgMemCachedGetResponse_ValueTag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCMsgMemCachedGetResponse_ValueTag::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgMemCachedGetResponse.ValueTag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.value_.ClearNonDefaultToEmpty();
  }
  _impl_.found_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgMemCachedGetResponse_ValueTag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool found = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_found(&has_bits);
          _impl_.found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgMemCachedGetResponse_ValueTag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgMemCachedGetResponse.ValueTag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool found = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_found(), target);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgMemCachedGetResponse.ValueTag)
  return target;
}

size_t CGCMsgMemCachedGetResponse_ValueTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgMemCachedGetResponse.ValueTag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_value());
    }

    // optional bool found = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgMemCachedGetResponse_ValueTag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCMsgMemCachedGetResponse_ValueTag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgMemCachedGetResponse_ValueTag::GetClassData() const { return &_class_data_; }


void CGCMsgMemCachedGetResponse_ValueTag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCMsgMemCachedGetResponse_ValueTag*>(&to_msg);
  auto& from = static_cast<const CGCMsgMemCachedGetResponse_ValueTag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgMemCachedGetResponse.ValueTag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.found_ = from._impl_.found_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgMemCachedGetResponse_ValueTag::CopyFrom(const CGCMsgMemCachedGetResponse_ValueTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgMemCachedGetResponse.ValueTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedGetResponse_ValueTag::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedGetResponse_ValueTag::InternalSwap(CGCMsgMemCachedGetResponse_ValueTag* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.found_, other->_impl_.found_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgMemCachedGetResponse_ValueTag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[20]);
}

// ===================================================================

class CGCMsgMemCachedGetResponse::_Internal {
 public:
};

CGCMsgMemCachedGetResponse::CGCMsgMemCachedGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CGCMsgMemCachedGetResponse)
}
CGCMsgMemCachedGetResponse::CGCMsgMemCachedGetResponse(const CGCMsgMemCachedGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCMsgMemCachedGetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGCMsgMemCachedGetResponse)
}

inline void CGCMsgMemCachedGetResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGCMsgMemCachedGetResponse::~CGCMsgMemCachedGetResponse() {
  // @@protoc_insertion_point(destructor:CGCMsgMemCachedGetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCMsgMemCachedGetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
}

void CGCMsgMemCachedGetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCMsgMemCachedGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgMemCachedGetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgMemCachedGetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CGCMsgMemCachedGetResponse.ValueTag values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgMemCachedGetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgMemCachedGetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGCMsgMemCachedGetResponse.ValueTag values = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgMemCachedGetResponse)
  return target;
}

size_t CGCMsgMemCachedGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgMemCachedGetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGCMsgMemCachedGetResponse.ValueTag values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_impl_.values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgMemCachedGetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCMsgMemCachedGetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgMemCachedGetResponse::GetClassData() const { return &_class_data_; }


void CGCMsgMemCachedGetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCMsgMemCachedGetResponse*>(&to_msg);
  auto& from = static_cast<const CGCMsgMemCachedGetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgMemCachedGetResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgMemCachedGetResponse::CopyFrom(const CGCMsgMemCachedGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgMemCachedGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedGetResponse::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedGetResponse::InternalSwap(CGCMsgMemCachedGetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgMemCachedGetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[21]);
}

// ===================================================================

class CGCMsgMemCachedSet_KeyPair::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgMemCachedSet_KeyPair>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGCMsgMemCachedSet_KeyPair::CGCMsgMemCachedSet_KeyPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CGCMsgMemCachedSet.KeyPair)
}
CGCMsgMemCachedSet_KeyPair::CGCMsgMemCachedSet_KeyPair(const CGCMsgMemCachedSet_KeyPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCMsgMemCachedSet_KeyPair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CGCMsgMemCachedSet.KeyPair)
}

inline void CGCMsgMemCachedSet_KeyPair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGCMsgMemCachedSet_KeyPair::~CGCMsgMemCachedSet_KeyPair() {
  // @@protoc_insertion_point(destructor:CGCMsgMemCachedSet.KeyPair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCMsgMemCachedSet_KeyPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
}

void CGCMsgMemCachedSet_KeyPair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCMsgMemCachedSet_KeyPair::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgMemCachedSet.KeyPair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgMemCachedSet_KeyPair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CGCMsgMemCachedSet.KeyPair.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgMemCachedSet_KeyPair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgMemCachedSet.KeyPair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCMsgMemCachedSet.KeyPair.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgMemCachedSet.KeyPair)
  return target;
}

size_t CGCMsgMemCachedSet_KeyPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgMemCachedSet.KeyPair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bytes value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgMemCachedSet_KeyPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCMsgMemCachedSet_KeyPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgMemCachedSet_KeyPair::GetClassData() const { return &_class_data_; }


void CGCMsgMemCachedSet_KeyPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCMsgMemCachedSet_KeyPair*>(&to_msg);
  auto& from = static_cast<const CGCMsgMemCachedSet_KeyPair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgMemCachedSet.KeyPair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgMemCachedSet_KeyPair::CopyFrom(const CGCMsgMemCachedSet_KeyPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgMemCachedSet.KeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedSet_KeyPair::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedSet_KeyPair::InternalSwap(CGCMsgMemCachedSet_KeyPair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgMemCachedSet_KeyPair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[22]);
}

// ===================================================================

class CGCMsgMemCachedSet::_Internal {
 public:
};

CGCMsgMemCachedSet::CGCMsgMemCachedSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CGCMsgMemCachedSet)
}
CGCMsgMemCachedSet::CGCMsgMemCachedSet(const CGCMsgMemCachedSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCMsgMemCachedSet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGCMsgMemCachedSet)
}

inline void CGCMsgMemCachedSet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGCMsgMemCachedSet::~CGCMsgMemCachedSet() {
  // @@protoc_insertion_point(destructor:CGCMsgMemCachedSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCMsgMemCachedSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedPtrField();
}

void CGCMsgMemCachedSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCMsgMemCachedSet::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgMemCachedSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgMemCachedSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CGCMsgMemCachedSet.KeyPair keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgMemCachedSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgMemCachedSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGCMsgMemCachedSet.KeyPair keys = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgMemCachedSet)
  return target;
}

size_t CGCMsgMemCachedSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgMemCachedSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGCMsgMemCachedSet.KeyPair keys = 1;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->_impl_.keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgMemCachedSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCMsgMemCachedSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgMemCachedSet::GetClassData() const { return &_class_data_; }


void CGCMsgMemCachedSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCMsgMemCachedSet*>(&to_msg);
  auto& from = static_cast<const CGCMsgMemCachedSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgMemCachedSet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgMemCachedSet::CopyFrom(const CGCMsgMemCachedSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgMemCachedSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedSet::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedSet::InternalSwap(CGCMsgMemCachedSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgMemCachedSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[23]);
}

// ===================================================================

class CGCMsgMemCachedDelete::_Internal {
 public:
};

CGCMsgMemCachedDelete::CGCMsgMemCachedDelete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CGCMsgMemCachedDelete)
}
CGCMsgMemCachedDelete::CGCMsgMemCachedDelete(const CGCMsgMemCachedDelete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCMsgMemCachedDelete* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGCMsgMemCachedDelete)
}

inline void CGCMsgMemCachedDelete::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGCMsgMemCachedDelete::~CGCMsgMemCachedDelete() {
  // @@protoc_insertion_point(destructor:CGCMsgMemCachedDelete)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCMsgMemCachedDelete::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedPtrField();
}

void CGCMsgMemCachedDelete::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCMsgMemCachedDelete::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgMemCachedDelete)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgMemCachedDelete::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CGCMsgMemCachedDelete.keys");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgMemCachedDelete::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgMemCachedDelete)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCMsgMemCachedDelete.keys");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgMemCachedDelete)
  return target;
}

size_t CGCMsgMemCachedDelete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgMemCachedDelete)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.keys_.size());
  for (int i = 0, n = _impl_.keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.keys_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgMemCachedDelete::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCMsgMemCachedDelete::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgMemCachedDelete::GetClassData() const { return &_class_data_; }


void CGCMsgMemCachedDelete::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCMsgMemCachedDelete*>(&to_msg);
  auto& from = static_cast<const CGCMsgMemCachedDelete&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgMemCachedDelete)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgMemCachedDelete::CopyFrom(const CGCMsgMemCachedDelete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgMemCachedDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedDelete::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedDelete::InternalSwap(CGCMsgMemCachedDelete* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgMemCachedDelete::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[24]);
}

// ===================================================================

class CGCMsgMemCachedStats::_Internal {
 public:
};

CGCMsgMemCachedStats::CGCMsgMemCachedStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CGCMsgMemCachedStats)
}
CGCMsgMemCachedStats::CGCMsgMemCachedStats(const CGCMsgMemCachedStats& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CGCMsgMemCachedStats* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGCMsgMemCachedStats)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgMemCachedStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgMemCachedStats::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgMemCachedStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[25]);
}

// ===================================================================

class CGCMsgMemCachedStatsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgMemCachedStatsResponse>()._impl_._has_bits_);
  static void set_has_curr_connections(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cmd_get(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cmd_set(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cmd_flush(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_get_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_get_misses(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_delete_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_delete_misses(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bytes_read(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bytes_written(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_limit_maxbytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_curr_items(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_evictions(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

CGCMsgMemCachedStatsResponse::CGCMsgMemCachedStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CGCMsgMemCachedStatsResponse)
}
CGCMsgMemCachedStatsResponse::CGCMsgMemCachedStatsResponse(const CGCMsgMemCachedStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCMsgMemCachedStatsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.curr_connections_){}
    , decltype(_impl_.cmd_get_){}
    , decltype(_impl_.cmd_set_){}
    , decltype(_impl_.cmd_flush_){}
    , decltype(_impl_.get_hits_){}
    , decltype(_impl_.get_misses_){}
    , decltype(_impl_.delete_hits_){}
    , decltype(_impl_.delete_misses_){}
    , decltype(_impl_.bytes_read_){}
    , decltype(_impl_.bytes_written_){}
    , decltype(_impl_.limit_maxbytes_){}
    , decltype(_impl_.curr_items_){}
    , decltype(_impl_.evictions_){}
    , decltype(_impl_.bytes_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.curr_connections_, &from._impl_.curr_connections_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bytes_) -
    reinterpret_cast<char*>(&_impl_.curr_connections_)) + sizeof(_impl_.bytes_));
  // @@protoc_insertion_point(copy_constructor:CGCMsgMemCachedStatsResponse)
}

inline void CGCMsgMemCachedStatsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.curr_connections_){uint64_t{0u}}
    , decltype(_impl_.cmd_get_){uint64_t{0u}}
    , decltype(_impl_.cmd_set_){uint64_t{0u}}
    , decltype(_impl_.cmd_flush_){uint64_t{0u}}
    , decltype(_impl_.get_hits_){uint64_t{0u}}
    , decltype(_impl_.get_misses_){uint64_t{0u}}
    , decltype(_impl_.delete_hits_){uint64_t{0u}}
    , decltype(_impl_.delete_misses_){uint64_t{0u}}
    , decltype(_impl_.bytes_read_){uint64_t{0u}}
    , decltype(_impl_.bytes_written_){uint64_t{0u}}
    , decltype(_impl_.limit_maxbytes_){uint64_t{0u}}
    , decltype(_impl_.curr_items_){uint64_t{0u}}
    , decltype(_impl_.evictions_){uint64_t{0u}}
    , decltype(_impl_.bytes_){uint64_t{0u}}
  };
}

CGCMsgMemCachedStatsResponse::~CGCMsgMemCachedStatsResponse() {
  // @@protoc_insertion_point(destructor:CGCMsgMemCachedStatsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCMsgMemCachedStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCMsgMemCachedStatsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCMsgMemCachedStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgMemCachedStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.curr_connections_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.delete_misses_) -
        reinterpret_cast<char*>(&_impl_.curr_connections_)) + sizeof(_impl_.delete_misses_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.bytes_read_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bytes_) -
        reinterpret_cast<char*>(&_impl_.bytes_read_)) + sizeof(_impl_.bytes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgMemCachedStatsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 curr_connections = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_curr_connections(&has_bits);
          _impl_.curr_connections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 cmd_get = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cmd_get(&has_bits);
          _impl_.cmd_get_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 cmd_set = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_cmd_set(&has_bits);
          _impl_.cmd_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 cmd_flush = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cmd_flush(&has_bits);
          _impl_.cmd_flush_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 get_hits = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_get_hits(&has_bits);
          _impl_.get_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 get_misses = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_get_misses(&has_bits);
          _impl_.get_misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 delete_hits = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_delete_hits(&has_bits);
          _impl_.delete_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 delete_misses = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_delete_misses(&has_bits);
          _impl_.delete_misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_read = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_bytes_read(&has_bits);
          _impl_.bytes_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_written = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_bytes_written(&has_bits);
          _impl_.bytes_written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 limit_maxbytes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_limit_maxbytes(&has_bits);
          _impl_.limit_maxbytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 curr_items = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_curr_items(&has_bits);
          _impl_.curr_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 evictions = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_evictions(&has_bits);
          _impl_.evictions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_bytes(&has_bits);
          _impl_.bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgMemCachedStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgMemCachedStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 curr_connections = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_curr_connections(), target);
  }

  // optional uint64 cmd_get = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_cmd_get(), target);
  }

  // optional uint64 cmd_set = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_cmd_set(), target);
  }

  // optional uint64 cmd_flush = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_cmd_flush(), target);
  }

  // optional uint64 get_hits = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_get_hits(), target);
  }

  // optional uint64 get_misses = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_get_misses(), target);
  }

  // optional uint64 delete_hits = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_delete_hits(), target);
  }

  // optional uint64 delete_misses = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_delete_misses(), target);
  }

  // optional uint64 bytes_read = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_bytes_read(), target);
  }

  // optional uint64 bytes_written = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_bytes_written(), target);
  }

  // optional uint64 limit_maxbytes = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_limit_maxbytes(), target);
  }

  // optional uint64 curr_items = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_curr_items(), target);
  }

  // optional uint64 evictions = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_evictions(), target);
  }

  // optional uint64 bytes = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgMemCachedStatsResponse)
  return target;
}

size_t CGCMsgMemCachedStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgMemCachedStatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 curr_connections = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_curr_connections());
    }

    // optional uint64 cmd_get = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cmd_get());
    }

    // optional uint64 cmd_set = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cmd_set());
    }

    // optional uint64 cmd_flush = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cmd_flush());
    }

    // optional uint64 get_hits = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_get_hits());
    }

    // optional uint64 get_misses = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_get_misses());
    }

    // optional uint64 delete_hits = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_delete_hits());
    }

    // optional uint64 delete_misses = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_delete_misses());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint64 bytes_read = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_read());
    }

    // optional uint64 bytes_written = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_written());
    }

    // optional uint64 limit_maxbytes = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_limit_maxbytes());
    }

    // optional uint64 curr_items = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_curr_items());
    }

    // optional uint64 evictions = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_evictions());
    }

    // optional uint64 bytes = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgMemCachedStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCMsgMemCachedStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgMemCachedStatsResponse::GetClassData() const { return &_class_data_; }


void CGCMsgMemCachedStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCMsgMemCachedStatsResponse*>(&to_msg);
  auto& from = static_cast<const CGCMsgMemCachedStatsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgMemCachedStatsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.curr_connections_ = from._impl_.curr_connections_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cmd_get_ = from._impl_.cmd_get_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.cmd_set_ = from._impl_.cmd_set_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cmd_flush_ = from._impl_.cmd_flush_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.get_hits_ = from._impl_.get_hits_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.get_misses_ = from._impl_.get_misses_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.delete_hits_ = from._impl_.delete_hits_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.delete_misses_ = from._impl_.delete_misses_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.bytes_read_ = from._impl_.bytes_read_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.bytes_written_ = from._impl_.bytes_written_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.limit_maxbytes_ = from._impl_.limit_maxbytes_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.curr_items_ = from._impl_.curr_items_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.evictions_ = from._impl_.evictions_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.bytes_ = from._impl_.bytes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgMemCachedStatsResponse::CopyFrom(const CGCMsgMemCachedStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgMemCachedStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedStatsResponse::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedStatsResponse::InternalSwap(CGCMsgMemCachedStatsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCMsgMemCachedStatsResponse, _impl_.bytes_)
      + sizeof(CGCMsgMemCachedStatsResponse::_impl_.bytes_)
      - PROTOBUF_FIELD_OFFSET(CGCMsgMemCachedStatsResponse, _impl_.curr_connections_)>(
          reinterpret_cast<char*>(&_impl_.curr_connections_),
          reinterpret_cast<char*>(&other->_impl_.curr_connections_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgMemCachedStatsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[26]);
}

// ===================================================================

class CGCMsgSQLStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgSQLStats>()._impl_._has_bits_);
  static void set_has_schema_catalog(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGCMsgSQLStats::CGCMsgSQLStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CGCMsgSQLStats)
}
CGCMsgSQLStats::CGCMsgSQLStats(const CGCMsgSQLStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCMsgSQLStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.schema_catalog_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.schema_catalog_ = from._impl_.schema_catalog_;
  // @@protoc_insertion_point(copy_constructor:CGCMsgSQLStats)
}

inline void CGCMsgSQLStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.schema_catalog_){0u}
  };
}

CGCMsgSQLStats::~CGCMsgSQLStats() {
  // @@protoc_insertion_point(destructor:CGCMsgSQLStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCMsgSQLStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCMsgSQLStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCMsgSQLStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgSQLStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.schema_catalog_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgSQLStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 schema_catalog = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_schema_catalog(&has_bits);
          _impl_.schema_catalog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgSQLStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgSQLStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 schema_catalog = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_schema_catalog(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgSQLStats)
  return target;
}

size_t CGCMsgSQLStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgSQLStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 schema_catalog = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_schema_catalog());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgSQLStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCMsgSQLStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgSQLStats::GetClassData() const { return &_class_data_; }


void CGCMsgSQLStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCMsgSQLStats*>(&to_msg);
  auto& from = static_cast<const CGCMsgSQLStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgSQLStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_schema_catalog()) {
    _this->_internal_set_schema_catalog(from._internal_schema_catalog());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgSQLStats::CopyFrom(const CGCMsgSQLStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgSQLStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgSQLStats::IsInitialized() const {
  return true;
}

void CGCMsgSQLStats::InternalSwap(CGCMsgSQLStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.schema_catalog_, other->_impl_.schema_catalog_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgSQLStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[27]);
}

// ===================================================================

class CGCMsgSQLStatsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgSQLStatsResponse>()._impl_._has_bits_);
  static void set_has_threads(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_threads_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_threads_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_operations_submitted(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_prepared_statements_executed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_non_prepared_statements_executed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_deadlock_retries(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_operations_timed_out_in_queue(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CGCMsgSQLStatsResponse::CGCMsgSQLStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CGCMsgSQLStatsResponse)
}
CGCMsgSQLStatsResponse::CGCMsgSQLStatsResponse(const CGCMsgSQLStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCMsgSQLStatsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.threads_){}
    , decltype(_impl_.threads_connected_){}
    , decltype(_impl_.threads_active_){}
    , decltype(_impl_.operations_submitted_){}
    , decltype(_impl_.prepared_statements_executed_){}
    , decltype(_impl_.non_prepared_statements_executed_){}
    , decltype(_impl_.deadlock_retries_){}
    , decltype(_impl_.operations_timed_out_in_queue_){}
    , decltype(_impl_.errors_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.threads_, &from._impl_.threads_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.errors_) -
    reinterpret_cast<char*>(&_impl_.threads_)) + sizeof(_impl_.errors_));
  // @@protoc_insertion_point(copy_constructor:CGCMsgSQLStatsResponse)
}

inline void CGCMsgSQLStatsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.threads_){0u}
    , decltype(_impl_.threads_connected_){0u}
    , decltype(_impl_.threads_active_){0u}
    , decltype(_impl_.operations_submitted_){0u}
    , decltype(_impl_.prepared_statements_executed_){0u}
    , decltype(_impl_.non_prepared_statements_executed_){0u}
    , decltype(_impl_.deadlock_retries_){0u}
    , decltype(_impl_.operations_timed_out_in_queue_){0u}
    , decltype(_impl_.errors_){0u}
  };
}

CGCMsgSQLStatsResponse::~CGCMsgSQLStatsResponse() {
  // @@protoc_insertion_point(destructor:CGCMsgSQLStatsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCMsgSQLStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCMsgSQLStatsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCMsgSQLStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgSQLStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.threads_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.operations_timed_out_in_queue_) -
        reinterpret_cast<char*>(&_impl_.threads_)) + sizeof(_impl_.operations_timed_out_in_queue_));
  }
  _impl_.errors_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgSQLStatsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 threads = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_threads(&has_bits);
          _impl_.threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 threads_connected = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_threads_connected(&has_bits);
          _impl_.threads_connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 threads_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_threads_active(&has_bits);
          _impl_.threads_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 operations_submitted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_operations_submitted(&has_bits);
          _impl_.operations_submitted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 prepared_statements_executed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_prepared_statements_executed(&has_bits);
          _impl_.prepared_statements_executed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 non_prepared_statements_executed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_non_prepared_statements_executed(&has_bits);
          _impl_.non_prepared_statements_executed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deadlock_retries = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_deadlock_retries(&has_bits);
          _impl_.deadlock_retries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 operations_timed_out_in_queue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_operations_timed_out_in_queue(&has_bits);
          _impl_.operations_timed_out_in_queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 errors = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_errors(&has_bits);
          _impl_.errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgSQLStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgSQLStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 threads = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_threads(), target);
  }

  // optional uint32 threads_connected = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_threads_connected(), target);
  }

  // optional uint32 threads_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_threads_active(), target);
  }

  // optional uint32 operations_submitted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_operations_submitted(), target);
  }

  // optional uint32 prepared_statements_executed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_prepared_statements_executed(), target);
  }

  // optional uint32 non_prepared_statements_executed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_non_prepared_statements_executed(), target);
  }

  // optional uint32 deadlock_retries = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_deadlock_retries(), target);
  }

  // optional uint32 operations_timed_out_in_queue = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_operations_timed_out_in_queue(), target);
  }

  // optional uint32 errors = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_errors(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgSQLStatsResponse)
  return target;
}

size_t CGCMsgSQLStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgSQLStatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 threads = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_threads());
    }

    // optional uint32 threads_connected = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_threads_connected());
    }

    // optional uint32 threads_active = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_threads_active());
    }

    // optional uint32 operations_submitted = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_operations_submitted());
    }

    // optional uint32 prepared_statements_executed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prepared_statements_executed());
    }

    // optional uint32 non_prepared_statements_executed = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_non_prepared_statements_executed());
    }

    // optional uint32 deadlock_retries = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deadlock_retries());
    }

    // optional uint32 operations_timed_out_in_queue = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_operations_timed_out_in_queue());
    }

  }
  // optional uint32 errors = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_errors());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgSQLStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCMsgSQLStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgSQLStatsResponse::GetClassData() const { return &_class_data_; }


void CGCMsgSQLStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCMsgSQLStatsResponse*>(&to_msg);
  auto& from = static_cast<const CGCMsgSQLStatsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgSQLStatsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.threads_ = from._impl_.threads_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.threads_connected_ = from._impl_.threads_connected_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.threads_active_ = from._impl_.threads_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.operations_submitted_ = from._impl_.operations_submitted_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.prepared_statements_executed_ = from._impl_.prepared_statements_executed_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.non_prepared_statements_executed_ = from._impl_.non_prepared_statements_executed_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.deadlock_retries_ = from._impl_.deadlock_retries_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.operations_timed_out_in_queue_ = from._impl_.operations_timed_out_in_queue_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_errors(from._internal_errors());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgSQLStatsResponse::CopyFrom(const CGCMsgSQLStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgSQLStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgSQLStatsResponse::IsInitialized() const {
  return true;
}

void CGCMsgSQLStatsResponse::InternalSwap(CGCMsgSQLStatsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCMsgSQLStatsResponse, _impl_.errors_)
      + sizeof(CGCMsgSQLStatsResponse::_impl_.errors_)
      - PROTOBUF_FIELD_OFFSET(CGCMsgSQLStatsResponse, _impl_.threads_)>(
          reinterpret_cast<char*>(&_impl_.threads_),
          reinterpret_cast<char*>(&other->_impl_.threads_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgSQLStatsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[28]);
}

// ===================================================================

class CMsgAMAddFreeLicense::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMAddFreeLicense>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ip_public(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_store_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAMAddFreeLicense::CMsgAMAddFreeLicense(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAMAddFreeLicense)
}
CMsgAMAddFreeLicense::CMsgAMAddFreeLicense(const CMsgAMAddFreeLicense& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAMAddFreeLicense* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.store_country_code_){}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.ip_public_){}
    , decltype(_impl_.packageid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.store_country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.store_country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_store_country_code()) {
    _this->_impl_.store_country_code_.Set(from._internal_store_country_code(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.packageid_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.packageid_));
  // @@protoc_insertion_point(copy_constructor:CMsgAMAddFreeLicense)
}

inline void CMsgAMAddFreeLicense::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.store_country_code_){}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.ip_public_){0u}
    , decltype(_impl_.packageid_){0u}
  };
  _impl_.store_country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.store_country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgAMAddFreeLicense::~CMsgAMAddFreeLicense() {
  // @@protoc_insertion_point(destructor:CMsgAMAddFreeLicense)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAMAddFreeLicense::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.store_country_code_.Destroy();
}

void CMsgAMAddFreeLicense::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAMAddFreeLicense::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMAddFreeLicense)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.store_country_code_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.packageid_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.packageid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMAddFreeLicense::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ip_public = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ip_public(&has_bits);
          _impl_.ip_public_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 packageid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_packageid(&has_bits);
          _impl_.packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string store_country_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_store_country_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgAMAddFreeLicense.store_country_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMAddFreeLicense::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMAddFreeLicense)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 ip_public = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ip_public(), target);
  }

  // optional uint32 packageid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_packageid(), target);
  }

  // optional string store_country_code = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_store_country_code().data(), static_cast<int>(this->_internal_store_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgAMAddFreeLicense.store_country_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_store_country_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMAddFreeLicense)
  return target;
}

size_t CMsgAMAddFreeLicense::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMAddFreeLicense)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string store_country_code = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_store_country_code());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 ip_public = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ip_public());
    }

    // optional uint32 packageid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packageid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMAddFreeLicense::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAMAddFreeLicense::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMAddFreeLicense::GetClassData() const { return &_class_data_; }


void CMsgAMAddFreeLicense::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAMAddFreeLicense*>(&to_msg);
  auto& from = static_cast<const CMsgAMAddFreeLicense&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMAddFreeLicense)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_store_country_code(from._internal_store_country_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ip_public_ = from._impl_.ip_public_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.packageid_ = from._impl_.packageid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMAddFreeLicense::CopyFrom(const CMsgAMAddFreeLicense& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMAddFreeLicense)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMAddFreeLicense::IsInitialized() const {
  return true;
}

void CMsgAMAddFreeLicense::InternalSwap(CMsgAMAddFreeLicense* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.store_country_code_, lhs_arena,
      &other->_impl_.store_country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAMAddFreeLicense, _impl_.packageid_)
      + sizeof(CMsgAMAddFreeLicense::_impl_.packageid_)
      - PROTOBUF_FIELD_OFFSET(CMsgAMAddFreeLicense, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMAddFreeLicense::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[29]);
}

// ===================================================================

class CMsgAMAddFreeLicenseResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMAddFreeLicenseResponse>()._impl_._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_purchase_result_detail(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_transid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAMAddFreeLicenseResponse::CMsgAMAddFreeLicenseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAMAddFreeLicenseResponse)
}
CMsgAMAddFreeLicenseResponse::CMsgAMAddFreeLicenseResponse(const CMsgAMAddFreeLicenseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAMAddFreeLicenseResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transid_){}
    , decltype(_impl_.purchase_result_detail_){}
    , decltype(_impl_.eresult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.transid_, &from._impl_.transid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.eresult_) -
    reinterpret_cast<char*>(&_impl_.transid_)) + sizeof(_impl_.eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgAMAddFreeLicenseResponse)
}

inline void CMsgAMAddFreeLicenseResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transid_){uint64_t{0u}}
    , decltype(_impl_.purchase_result_detail_){0}
    , decltype(_impl_.eresult_){2}
  };
}

CMsgAMAddFreeLicenseResponse::~CMsgAMAddFreeLicenseResponse() {
  // @@protoc_insertion_point(destructor:CMsgAMAddFreeLicenseResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAMAddFreeLicenseResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAMAddFreeLicenseResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAMAddFreeLicenseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMAddFreeLicenseResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.transid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.purchase_result_detail_) -
        reinterpret_cast<char*>(&_impl_.transid_)) + sizeof(_impl_.purchase_result_detail_));
    _impl_.eresult_ = 2;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMAddFreeLicenseResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          _impl_.eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 purchase_result_detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_purchase_result_detail(&has_bits);
          _impl_.purchase_result_detail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 transid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_transid(&has_bits);
          _impl_.transid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMAddFreeLicenseResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMAddFreeLicenseResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional int32 purchase_result_detail = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_purchase_result_detail(), target);
  }

  // optional fixed64 transid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_transid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMAddFreeLicenseResponse)
  return target;
}

size_t CMsgAMAddFreeLicenseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMAddFreeLicenseResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 transid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 purchase_result_detail = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_purchase_result_detail());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMAddFreeLicenseResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAMAddFreeLicenseResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMAddFreeLicenseResponse::GetClassData() const { return &_class_data_; }


void CMsgAMAddFreeLicenseResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAMAddFreeLicenseResponse*>(&to_msg);
  auto& from = static_cast<const CMsgAMAddFreeLicenseResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMAddFreeLicenseResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.transid_ = from._impl_.transid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.purchase_result_detail_ = from._impl_.purchase_result_detail_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.eresult_ = from._impl_.eresult_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMAddFreeLicenseResponse::CopyFrom(const CMsgAMAddFreeLicenseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMAddFreeLicenseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMAddFreeLicenseResponse::IsInitialized() const {
  return true;
}

void CMsgAMAddFreeLicenseResponse::InternalSwap(CMsgAMAddFreeLicenseResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAMAddFreeLicenseResponse, _impl_.purchase_result_detail_)
      + sizeof(CMsgAMAddFreeLicenseResponse::_impl_.purchase_result_detail_)
      - PROTOBUF_FIELD_OFFSET(CMsgAMAddFreeLicenseResponse, _impl_.transid_)>(
          reinterpret_cast<char*>(&_impl_.transid_),
          reinterpret_cast<char*>(&other->_impl_.transid_));
  swap(_impl_.eresult_, other->_impl_.eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMAddFreeLicenseResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[30]);
}

// ===================================================================

class CGCMsgGetIPLocation::_Internal {
 public:
};

CGCMsgGetIPLocation::CGCMsgGetIPLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CGCMsgGetIPLocation)
}
CGCMsgGetIPLocation::CGCMsgGetIPLocation(const CGCMsgGetIPLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCMsgGetIPLocation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ips_){from._impl_.ips_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGCMsgGetIPLocation)
}

inline void CGCMsgGetIPLocation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ips_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGCMsgGetIPLocation::~CGCMsgGetIPLocation() {
  // @@protoc_insertion_point(destructor:CGCMsgGetIPLocation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCMsgGetIPLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ips_.~RepeatedField();
}

void CGCMsgGetIPLocation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCMsgGetIPLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgGetIPLocation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ips_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgGetIPLocation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed32 ips = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ips(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
            ptr += sizeof(uint32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_ips(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgGetIPLocation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgGetIPLocation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 ips = 1;
  for (int i = 0, n = this->_internal_ips_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_ips(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgGetIPLocation)
  return target;
}

size_t CGCMsgGetIPLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgGetIPLocation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ips = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ips_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_ips_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgGetIPLocation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCMsgGetIPLocation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgGetIPLocation::GetClassData() const { return &_class_data_; }


void CGCMsgGetIPLocation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCMsgGetIPLocation*>(&to_msg);
  auto& from = static_cast<const CGCMsgGetIPLocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgGetIPLocation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ips_.MergeFrom(from._impl_.ips_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgGetIPLocation::CopyFrom(const CGCMsgGetIPLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgGetIPLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetIPLocation::IsInitialized() const {
  return true;
}

void CGCMsgGetIPLocation::InternalSwap(CGCMsgGetIPLocation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ips_.InternalSwap(&other->_impl_.ips_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgGetIPLocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[31]);
}

// ===================================================================

class CGCMsgGetIPASN::_Internal {
 public:
};

CGCMsgGetIPASN::CGCMsgGetIPASN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CGCMsgGetIPASN)
}
CGCMsgGetIPASN::CGCMsgGetIPASN(const CGCMsgGetIPASN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCMsgGetIPASN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ips_){from._impl_.ips_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGCMsgGetIPASN)
}

inline void CGCMsgGetIPASN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ips_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGCMsgGetIPASN::~CGCMsgGetIPASN() {
  // @@protoc_insertion_point(destructor:CGCMsgGetIPASN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCMsgGetIPASN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ips_.~RepeatedField();
}

void CGCMsgGetIPASN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCMsgGetIPASN::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgGetIPASN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ips_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgGetIPASN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed32 ips = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ips(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
            ptr += sizeof(uint32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_ips(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgGetIPASN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgGetIPASN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 ips = 1;
  for (int i = 0, n = this->_internal_ips_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_ips(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgGetIPASN)
  return target;
}

size_t CGCMsgGetIPASN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgGetIPASN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ips = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ips_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_ips_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgGetIPASN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCMsgGetIPASN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgGetIPASN::GetClassData() const { return &_class_data_; }


void CGCMsgGetIPASN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCMsgGetIPASN*>(&to_msg);
  auto& from = static_cast<const CGCMsgGetIPASN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgGetIPASN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ips_.MergeFrom(from._impl_.ips_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgGetIPASN::CopyFrom(const CGCMsgGetIPASN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgGetIPASN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetIPASN::IsInitialized() const {
  return true;
}

void CGCMsgGetIPASN::InternalSwap(CGCMsgGetIPASN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ips_.InternalSwap(&other->_impl_.ips_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgGetIPASN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[32]);
}

// ===================================================================

class CIPASNInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CIPASNInfo>()._impl_._has_bits_);
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_asn(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CIPASNInfo::CIPASNInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CIPASNInfo)
}
CIPASNInfo::CIPASNInfo(const CIPASNInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CIPASNInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.asn_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ip_, &from._impl_.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.asn_) -
    reinterpret_cast<char*>(&_impl_.ip_)) + sizeof(_impl_.asn_));
  // @@protoc_insertion_point(copy_constructor:CIPASNInfo)
}

inline void CIPASNInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_){0u}
    , decltype(_impl_.asn_){0u}
  };
}

CIPASNInfo::~CIPASNInfo() {
  // @@protoc_insertion_point(destructor:CIPASNInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CIPASNInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CIPASNInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CIPASNInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CIPASNInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.asn_) -
        reinterpret_cast<char*>(&_impl_.ip_)) + sizeof(_impl_.asn_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CIPASNInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_ip(&has_bits);
          _impl_.ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 asn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_asn(&has_bits);
          _impl_.asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIPASNInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIPASNInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_ip(), target);
  }

  // optional uint32 asn = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_asn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIPASNInfo)
  return target;
}

size_t CIPASNInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIPASNInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed32 ip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 asn = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_asn());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CIPASNInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CIPASNInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CIPASNInfo::GetClassData() const { return &_class_data_; }


void CIPASNInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CIPASNInfo*>(&to_msg);
  auto& from = static_cast<const CIPASNInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CIPASNInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ip_ = from._impl_.ip_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.asn_ = from._impl_.asn_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CIPASNInfo::CopyFrom(const CIPASNInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIPASNInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIPASNInfo::IsInitialized() const {
  return true;
}

void CIPASNInfo::InternalSwap(CIPASNInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIPASNInfo, _impl_.asn_)
      + sizeof(CIPASNInfo::_impl_.asn_)
      - PROTOBUF_FIELD_OFFSET(CIPASNInfo, _impl_.ip_)>(
          reinterpret_cast<char*>(&_impl_.ip_),
          reinterpret_cast<char*>(&other->_impl_.ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CIPASNInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[33]);
}

// ===================================================================

class CGCMsgGetIPASNResponse::_Internal {
 public:
};

CGCMsgGetIPASNResponse::CGCMsgGetIPASNResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CGCMsgGetIPASNResponse)
}
CGCMsgGetIPASNResponse::CGCMsgGetIPASNResponse(const CGCMsgGetIPASNResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCMsgGetIPASNResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.infos_){from._impl_.infos_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGCMsgGetIPASNResponse)
}

inline void CGCMsgGetIPASNResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.infos_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGCMsgGetIPASNResponse::~CGCMsgGetIPASNResponse() {
  // @@protoc_insertion_point(destructor:CGCMsgGetIPASNResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCMsgGetIPASNResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.infos_.~RepeatedPtrField();
}

void CGCMsgGetIPASNResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCMsgGetIPASNResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgGetIPASNResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgGetIPASNResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CIPASNInfo infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgGetIPASNResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgGetIPASNResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CIPASNInfo infos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgGetIPASNResponse)
  return target;
}

size_t CGCMsgGetIPASNResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgGetIPASNResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CIPASNInfo infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->_impl_.infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgGetIPASNResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCMsgGetIPASNResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgGetIPASNResponse::GetClassData() const { return &_class_data_; }


void CGCMsgGetIPASNResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCMsgGetIPASNResponse*>(&to_msg);
  auto& from = static_cast<const CGCMsgGetIPASNResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgGetIPASNResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.infos_.MergeFrom(from._impl_.infos_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgGetIPASNResponse::CopyFrom(const CGCMsgGetIPASNResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgGetIPASNResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetIPASNResponse::IsInitialized() const {
  return true;
}

void CGCMsgGetIPASNResponse::InternalSwap(CGCMsgGetIPASNResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.infos_.InternalSwap(&other->_impl_.infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgGetIPASNResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[34]);
}

// ===================================================================

class CGCMsgSystemStatsSchema::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgSystemStatsSchema>()._impl_._has_bits_);
  static void set_has_gc_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_schema_kv(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGCMsgSystemStatsSchema::CGCMsgSystemStatsSchema(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CGCMsgSystemStatsSchema)
}
CGCMsgSystemStatsSchema::CGCMsgSystemStatsSchema(const CGCMsgSystemStatsSchema& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCMsgSystemStatsSchema* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.schema_kv_){}
    , decltype(_impl_.gc_app_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.schema_kv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_kv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_schema_kv()) {
    _this->_impl_.schema_kv_.Set(from._internal_schema_kv(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.gc_app_id_ = from._impl_.gc_app_id_;
  // @@protoc_insertion_point(copy_constructor:CGCMsgSystemStatsSchema)
}

inline void CGCMsgSystemStatsSchema::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.schema_kv_){}
    , decltype(_impl_.gc_app_id_){0u}
  };
  _impl_.schema_kv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_kv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGCMsgSystemStatsSchema::~CGCMsgSystemStatsSchema() {
  // @@protoc_insertion_point(destructor:CGCMsgSystemStatsSchema)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCMsgSystemStatsSchema::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.schema_kv_.Destroy();
}

void CGCMsgSystemStatsSchema::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCMsgSystemStatsSchema::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgSystemStatsSchema)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.schema_kv_.ClearNonDefaultToEmpty();
  }
  _impl_.gc_app_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgSystemStatsSchema::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 gc_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gc_app_id(&has_bits);
          _impl_.gc_app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes schema_kv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_schema_kv();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgSystemStatsSchema::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgSystemStatsSchema)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 gc_app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gc_app_id(), target);
  }

  // optional bytes schema_kv = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_schema_kv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgSystemStatsSchema)
  return target;
}

size_t CGCMsgSystemStatsSchema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgSystemStatsSchema)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes schema_kv = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_schema_kv());
    }

    // optional uint32 gc_app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gc_app_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgSystemStatsSchema::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCMsgSystemStatsSchema::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgSystemStatsSchema::GetClassData() const { return &_class_data_; }


void CGCMsgSystemStatsSchema::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCMsgSystemStatsSchema*>(&to_msg);
  auto& from = static_cast<const CGCMsgSystemStatsSchema&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgSystemStatsSchema)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_schema_kv(from._internal_schema_kv());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gc_app_id_ = from._impl_.gc_app_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgSystemStatsSchema::CopyFrom(const CGCMsgSystemStatsSchema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgSystemStatsSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgSystemStatsSchema::IsInitialized() const {
  return true;
}

void CGCMsgSystemStatsSchema::InternalSwap(CGCMsgSystemStatsSchema* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.schema_kv_, lhs_arena,
      &other->_impl_.schema_kv_, rhs_arena
  );
  swap(_impl_.gc_app_id_, other->_impl_.gc_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgSystemStatsSchema::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[35]);
}

// ===================================================================

class CGCMsgGetSystemStats::_Internal {
 public:
};

CGCMsgGetSystemStats::CGCMsgGetSystemStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CGCMsgGetSystemStats)
}
CGCMsgGetSystemStats::CGCMsgGetSystemStats(const CGCMsgGetSystemStats& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CGCMsgGetSystemStats* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGCMsgGetSystemStats)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgGetSystemStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgGetSystemStats::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgGetSystemStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[36]);
}

// ===================================================================

class CGCMsgGetSystemStatsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgGetSystemStatsResponse>()._impl_._has_bits_);
  static void set_has_gc_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stats_kv(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_active_jobs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_yielding_jobs(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_sessions(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_game_server_sessions(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_socaches(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_socaches_to_unload(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_socaches_loading(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_writeback_queue(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_steamid_locks(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_logon_queue(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_logon_jobs(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

CGCMsgGetSystemStatsResponse::CGCMsgGetSystemStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CGCMsgGetSystemStatsResponse)
}
CGCMsgGetSystemStatsResponse::CGCMsgGetSystemStatsResponse(const CGCMsgGetSystemStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCMsgGetSystemStatsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_kv_){}
    , decltype(_impl_.gc_app_id_){}
    , decltype(_impl_.active_jobs_){}
    , decltype(_impl_.yielding_jobs_){}
    , decltype(_impl_.user_sessions_){}
    , decltype(_impl_.game_server_sessions_){}
    , decltype(_impl_.socaches_){}
    , decltype(_impl_.socaches_to_unload_){}
    , decltype(_impl_.socaches_loading_){}
    , decltype(_impl_.writeback_queue_){}
    , decltype(_impl_.steamid_locks_){}
    , decltype(_impl_.logon_queue_){}
    , decltype(_impl_.logon_jobs_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stats_kv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stats_kv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stats_kv()) {
    _this->_impl_.stats_kv_.Set(from._internal_stats_kv(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.gc_app_id_, &from._impl_.gc_app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.logon_jobs_) -
    reinterpret_cast<char*>(&_impl_.gc_app_id_)) + sizeof(_impl_.logon_jobs_));
  // @@protoc_insertion_point(copy_constructor:CGCMsgGetSystemStatsResponse)
}

inline void CGCMsgGetSystemStatsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_kv_){}
    , decltype(_impl_.gc_app_id_){0u}
    , decltype(_impl_.active_jobs_){0u}
    , decltype(_impl_.yielding_jobs_){0u}
    , decltype(_impl_.user_sessions_){0u}
    , decltype(_impl_.game_server_sessions_){0u}
    , decltype(_impl_.socaches_){0u}
    , decltype(_impl_.socaches_to_unload_){0u}
    , decltype(_impl_.socaches_loading_){0u}
    , decltype(_impl_.writeback_queue_){0u}
    , decltype(_impl_.steamid_locks_){0u}
    , decltype(_impl_.logon_queue_){0u}
    , decltype(_impl_.logon_jobs_){0u}
  };
  _impl_.stats_kv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stats_kv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGCMsgGetSystemStatsResponse::~CGCMsgGetSystemStatsResponse() {
  // @@protoc_insertion_point(destructor:CGCMsgGetSystemStatsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCMsgGetSystemStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_kv_.Destroy();
}

void CGCMsgGetSystemStatsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCMsgGetSystemStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgGetSystemStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.stats_kv_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.gc_app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.socaches_to_unload_) -
        reinterpret_cast<char*>(&_impl_.gc_app_id_)) + sizeof(_impl_.socaches_to_unload_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.socaches_loading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.logon_jobs_) -
        reinterpret_cast<char*>(&_impl_.socaches_loading_)) + sizeof(_impl_.logon_jobs_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgGetSystemStatsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 gc_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gc_app_id(&has_bits);
          _impl_.gc_app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes stats_kv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stats_kv();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 active_jobs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_active_jobs(&has_bits);
          _impl_.active_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 yielding_jobs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_yielding_jobs(&has_bits);
          _impl_.yielding_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 user_sessions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_user_sessions(&has_bits);
          _impl_.user_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_server_sessions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_game_server_sessions(&has_bits);
          _impl_.game_server_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 socaches = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_socaches(&has_bits);
          _impl_.socaches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 socaches_to_unload = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_socaches_to_unload(&has_bits);
          _impl_.socaches_to_unload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 socaches_loading = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_socaches_loading(&has_bits);
          _impl_.socaches_loading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 writeback_queue = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_writeback_queue(&has_bits);
          _impl_.writeback_queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 steamid_locks = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_steamid_locks(&has_bits);
          _impl_.steamid_locks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 logon_queue = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_logon_queue(&has_bits);
          _impl_.logon_queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 logon_jobs = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_logon_jobs(&has_bits);
          _impl_.logon_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgGetSystemStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgGetSystemStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 gc_app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gc_app_id(), target);
  }

  // optional bytes stats_kv = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_stats_kv(), target);
  }

  // optional uint32 active_jobs = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_active_jobs(), target);
  }

  // optional uint32 yielding_jobs = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_yielding_jobs(), target);
  }

  // optional uint32 user_sessions = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_user_sessions(), target);
  }

  // optional uint32 game_server_sessions = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_game_server_sessions(), target);
  }

  // optional uint32 socaches = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_socaches(), target);
  }

  // optional uint32 socaches_to_unload = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_socaches_to_unload(), target);
  }

  // optional uint32 socaches_loading = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_socaches_loading(), target);
  }

  // optional uint32 writeback_queue = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_writeback_queue(), target);
  }

  // optional uint32 steamid_locks = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_steamid_locks(), target);
  }

  // optional uint32 logon_queue = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_logon_queue(), target);
  }

  // optional uint32 logon_jobs = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_logon_jobs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgGetSystemStatsResponse)
  return target;
}

size_t CGCMsgGetSystemStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgGetSystemStatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes stats_kv = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_stats_kv());
    }

    // optional uint32 gc_app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gc_app_id());
    }

    // optional uint32 active_jobs = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_active_jobs());
    }

    // optional uint32 yielding_jobs = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_yielding_jobs());
    }

    // optional uint32 user_sessions = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_sessions());
    }

    // optional uint32 game_server_sessions = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_server_sessions());
    }

    // optional uint32 socaches = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_socaches());
    }

    // optional uint32 socaches_to_unload = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_socaches_to_unload());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 socaches_loading = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_socaches_loading());
    }

    // optional uint32 writeback_queue = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_writeback_queue());
    }

    // optional uint32 steamid_locks = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_steamid_locks());
    }

    // optional uint32 logon_queue = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_logon_queue());
    }

    // optional uint32 logon_jobs = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_logon_jobs());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgGetSystemStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCMsgGetSystemStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgGetSystemStatsResponse::GetClassData() const { return &_class_data_; }


void CGCMsgGetSystemStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCMsgGetSystemStatsResponse*>(&to_msg);
  auto& from = static_cast<const CGCMsgGetSystemStatsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgGetSystemStatsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_stats_kv(from._internal_stats_kv());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gc_app_id_ = from._impl_.gc_app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.active_jobs_ = from._impl_.active_jobs_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.yielding_jobs_ = from._impl_.yielding_jobs_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_sessions_ = from._impl_.user_sessions_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.game_server_sessions_ = from._impl_.game_server_sessions_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.socaches_ = from._impl_.socaches_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.socaches_to_unload_ = from._impl_.socaches_to_unload_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.socaches_loading_ = from._impl_.socaches_loading_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.writeback_queue_ = from._impl_.writeback_queue_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.steamid_locks_ = from._impl_.steamid_locks_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.logon_queue_ = from._impl_.logon_queue_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.logon_jobs_ = from._impl_.logon_jobs_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgGetSystemStatsResponse::CopyFrom(const CGCMsgGetSystemStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgGetSystemStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetSystemStatsResponse::IsInitialized() const {
  return true;
}

void CGCMsgGetSystemStatsResponse::InternalSwap(CGCMsgGetSystemStatsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stats_kv_, lhs_arena,
      &other->_impl_.stats_kv_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, _impl_.logon_jobs_)
      + sizeof(CGCMsgGetSystemStatsResponse::_impl_.logon_jobs_)
      - PROTOBUF_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, _impl_.gc_app_id_)>(
          reinterpret_cast<char*>(&_impl_.gc_app_id_),
          reinterpret_cast<char*>(&other->_impl_.gc_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgGetSystemStatsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[37]);
}

// ===================================================================

class CMsgAMSendEmail_ReplacementToken::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMSendEmail_ReplacementToken>()._impl_._has_bits_);
  static void set_has_token_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_token_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgAMSendEmail_ReplacementToken::CMsgAMSendEmail_ReplacementToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAMSendEmail.ReplacementToken)
}
CMsgAMSendEmail_ReplacementToken::CMsgAMSendEmail_ReplacementToken(const CMsgAMSendEmail_ReplacementToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAMSendEmail_ReplacementToken* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_name_){}
    , decltype(_impl_.token_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token_name()) {
    _this->_impl_.token_name_.Set(from._internal_token_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.token_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token_value()) {
    _this->_impl_.token_value_.Set(from._internal_token_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgAMSendEmail.ReplacementToken)
}

inline void CMsgAMSendEmail_ReplacementToken::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_name_){}
    , decltype(_impl_.token_value_){}
  };
  _impl_.token_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgAMSendEmail_ReplacementToken::~CMsgAMSendEmail_ReplacementToken() {
  // @@protoc_insertion_point(destructor:CMsgAMSendEmail.ReplacementToken)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAMSendEmail_ReplacementToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_name_.Destroy();
  _impl_.token_value_.Destroy();
}

void CMsgAMSendEmail_ReplacementToken::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAMSendEmail_ReplacementToken::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMSendEmail.ReplacementToken)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.token_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.token_value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMSendEmail_ReplacementToken::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string token_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgAMSendEmail.ReplacementToken.token_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string token_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgAMSendEmail.ReplacementToken.token_value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMSendEmail_ReplacementToken::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMSendEmail.ReplacementToken)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string token_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token_name().data(), static_cast<int>(this->_internal_token_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgAMSendEmail.ReplacementToken.token_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token_name(), target);
  }

  // optional string token_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token_value().data(), static_cast<int>(this->_internal_token_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgAMSendEmail.ReplacementToken.token_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMSendEmail.ReplacementToken)
  return target;
}

size_t CMsgAMSendEmail_ReplacementToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMSendEmail.ReplacementToken)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string token_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_token_name());
    }

    // optional string token_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_token_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMSendEmail_ReplacementToken::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAMSendEmail_ReplacementToken::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMSendEmail_ReplacementToken::GetClassData() const { return &_class_data_; }


void CMsgAMSendEmail_ReplacementToken::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAMSendEmail_ReplacementToken*>(&to_msg);
  auto& from = static_cast<const CMsgAMSendEmail_ReplacementToken&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMSendEmail.ReplacementToken)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_token_name(from._internal_token_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_token_value(from._internal_token_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMSendEmail_ReplacementToken::CopyFrom(const CMsgAMSendEmail_ReplacementToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMSendEmail.ReplacementToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMSendEmail_ReplacementToken::IsInitialized() const {
  return true;
}

void CMsgAMSendEmail_ReplacementToken::InternalSwap(CMsgAMSendEmail_ReplacementToken* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_name_, lhs_arena,
      &other->_impl_.token_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_value_, lhs_arena,
      &other->_impl_.token_value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMSendEmail_ReplacementToken::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[38]);
}

// ===================================================================

class CMsgAMSendEmail_PersonaNameReplacementToken::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMSendEmail_PersonaNameReplacementToken>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAMSendEmail_PersonaNameReplacementToken::CMsgAMSendEmail_PersonaNameReplacementToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAMSendEmail.PersonaNameReplacementToken)
}
CMsgAMSendEmail_PersonaNameReplacementToken::CMsgAMSendEmail_PersonaNameReplacementToken(const CMsgAMSendEmail_PersonaNameReplacementToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAMSendEmail_PersonaNameReplacementToken* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_name_){}
    , decltype(_impl_.steamid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token_name()) {
    _this->_impl_.token_name_.Set(from._internal_token_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.steamid_ = from._impl_.steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgAMSendEmail.PersonaNameReplacementToken)
}

inline void CMsgAMSendEmail_PersonaNameReplacementToken::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_name_){}
    , decltype(_impl_.steamid_){uint64_t{0u}}
  };
  _impl_.token_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgAMSendEmail_PersonaNameReplacementToken::~CMsgAMSendEmail_PersonaNameReplacementToken() {
  // @@protoc_insertion_point(destructor:CMsgAMSendEmail.PersonaNameReplacementToken)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAMSendEmail_PersonaNameReplacementToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_name_.Destroy();
}

void CMsgAMSendEmail_PersonaNameReplacementToken::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAMSendEmail_PersonaNameReplacementToken::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMSendEmail.PersonaNameReplacementToken)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.token_name_.ClearNonDefaultToEmpty();
  }
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMSendEmail_PersonaNameReplacementToken::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string token_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgAMSendEmail.PersonaNameReplacementToken.token_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMSendEmail_PersonaNameReplacementToken::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMSendEmail.PersonaNameReplacementToken)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional string token_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token_name().data(), static_cast<int>(this->_internal_token_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgAMSendEmail.PersonaNameReplacementToken.token_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMSendEmail.PersonaNameReplacementToken)
  return target;
}

size_t CMsgAMSendEmail_PersonaNameReplacementToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMSendEmail.PersonaNameReplacementToken)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string token_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_token_name());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMSendEmail_PersonaNameReplacementToken::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAMSendEmail_PersonaNameReplacementToken::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMSendEmail_PersonaNameReplacementToken::GetClassData() const { return &_class_data_; }


void CMsgAMSendEmail_PersonaNameReplacementToken::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAMSendEmail_PersonaNameReplacementToken*>(&to_msg);
  auto& from = static_cast<const CMsgAMSendEmail_PersonaNameReplacementToken&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMSendEmail.PersonaNameReplacementToken)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_token_name(from._internal_token_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMSendEmail_PersonaNameReplacementToken::CopyFrom(const CMsgAMSendEmail_PersonaNameReplacementToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMSendEmail.PersonaNameReplacementToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMSendEmail_PersonaNameReplacementToken::IsInitialized() const {
  return true;
}

void CMsgAMSendEmail_PersonaNameReplacementToken::InternalSwap(CMsgAMSendEmail_PersonaNameReplacementToken* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_name_, lhs_arena,
      &other->_impl_.token_name_, rhs_arena
  );
  swap(_impl_.steamid_, other->_impl_.steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMSendEmail_PersonaNameReplacementToken::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[39]);
}

// ===================================================================

class CMsgAMSendEmail::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMSendEmail>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_email_msg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_email_format(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_source_gc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgAMSendEmail::CMsgAMSendEmail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAMSendEmail)
}
CMsgAMSendEmail::CMsgAMSendEmail(const CMsgAMSendEmail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAMSendEmail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.persona_name_tokens_){from._impl_.persona_name_tokens_}
    , decltype(_impl_.tokens_){from._impl_.tokens_}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.email_msg_type_){}
    , decltype(_impl_.email_format_){}
    , decltype(_impl_.source_gc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.source_gc_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.source_gc_));
  // @@protoc_insertion_point(copy_constructor:CMsgAMSendEmail)
}

inline void CMsgAMSendEmail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.persona_name_tokens_){arena}
    , decltype(_impl_.tokens_){arena}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.email_msg_type_){0u}
    , decltype(_impl_.email_format_){0u}
    , decltype(_impl_.source_gc_){0u}
  };
}

CMsgAMSendEmail::~CMsgAMSendEmail() {
  // @@protoc_insertion_point(destructor:CMsgAMSendEmail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAMSendEmail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.persona_name_tokens_.~RepeatedPtrField();
  _impl_.tokens_.~RepeatedPtrField();
}

void CMsgAMSendEmail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAMSendEmail::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMSendEmail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.persona_name_tokens_.Clear();
  _impl_.tokens_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.source_gc_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.source_gc_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMSendEmail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 email_msg_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_email_msg_type(&has_bits);
          _impl_.email_msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 email_format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_email_format(&has_bits);
          _impl_.email_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_persona_name_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 source_gc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_source_gc(&has_bits);
          _impl_.source_gc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgAMSendEmail.ReplacementToken tokens = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMSendEmail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMSendEmail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 email_msg_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_email_msg_type(), target);
  }

  // optional uint32 email_format = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_email_format(), target);
  }

  // repeated .CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_persona_name_tokens_size()); i < n; i++) {
    const auto& repfield = this->_internal_persona_name_tokens(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 source_gc = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_source_gc(), target);
  }

  // repeated .CMsgAMSendEmail.ReplacementToken tokens = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tokens_size()); i < n; i++) {
    const auto& repfield = this->_internal_tokens(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMSendEmail)
  return target;
}

size_t CMsgAMSendEmail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMSendEmail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
  total_size += 1UL * this->_internal_persona_name_tokens_size();
  for (const auto& msg : this->_impl_.persona_name_tokens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgAMSendEmail.ReplacementToken tokens = 7;
  total_size += 1UL * this->_internal_tokens_size();
  for (const auto& msg : this->_impl_.tokens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 email_msg_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_email_msg_type());
    }

    // optional uint32 email_format = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_email_format());
    }

    // optional uint32 source_gc = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_gc());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMSendEmail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAMSendEmail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMSendEmail::GetClassData() const { return &_class_data_; }


void CMsgAMSendEmail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAMSendEmail*>(&to_msg);
  auto& from = static_cast<const CMsgAMSendEmail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMSendEmail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.persona_name_tokens_.MergeFrom(from._impl_.persona_name_tokens_);
  _this->_impl_.tokens_.MergeFrom(from._impl_.tokens_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.email_msg_type_ = from._impl_.email_msg_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.email_format_ = from._impl_.email_format_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.source_gc_ = from._impl_.source_gc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMSendEmail::CopyFrom(const CMsgAMSendEmail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMSendEmail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMSendEmail::IsInitialized() const {
  return true;
}

void CMsgAMSendEmail::InternalSwap(CMsgAMSendEmail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.persona_name_tokens_.InternalSwap(&other->_impl_.persona_name_tokens_);
  _impl_.tokens_.InternalSwap(&other->_impl_.tokens_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAMSendEmail, _impl_.source_gc_)
      + sizeof(CMsgAMSendEmail::_impl_.source_gc_)
      - PROTOBUF_FIELD_OFFSET(CMsgAMSendEmail, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMSendEmail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[40]);
}

// ===================================================================

class CMsgAMSendEmailResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMSendEmailResponse>()._impl_._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAMSendEmailResponse::CMsgAMSendEmailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAMSendEmailResponse)
}
CMsgAMSendEmailResponse::CMsgAMSendEmailResponse(const CMsgAMSendEmailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAMSendEmailResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eresult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.eresult_ = from._impl_.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgAMSendEmailResponse)
}

inline void CMsgAMSendEmailResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eresult_){2u}
  };
}

CMsgAMSendEmailResponse::~CMsgAMSendEmailResponse() {
  // @@protoc_insertion_point(destructor:CMsgAMSendEmailResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAMSendEmailResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAMSendEmailResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAMSendEmailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMSendEmailResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.eresult_ = 2u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMSendEmailResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          _impl_.eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMSendEmailResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMSendEmailResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMSendEmailResponse)
  return target;
}

size_t CMsgAMSendEmailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMSendEmailResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 eresult = 1 [default = 2];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMSendEmailResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAMSendEmailResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMSendEmailResponse::GetClassData() const { return &_class_data_; }


void CMsgAMSendEmailResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAMSendEmailResponse*>(&to_msg);
  auto& from = static_cast<const CMsgAMSendEmailResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMSendEmailResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eresult()) {
    _this->_internal_set_eresult(from._internal_eresult());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMSendEmailResponse::CopyFrom(const CMsgAMSendEmailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMSendEmailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMSendEmailResponse::IsInitialized() const {
  return true;
}

void CMsgAMSendEmailResponse::InternalSwap(CMsgAMSendEmailResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.eresult_, other->_impl_.eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMSendEmailResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[41]);
}

// ===================================================================

class CMsgGCGetEmailTemplate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCGetEmailTemplate>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_email_msg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_email_lang(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_email_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCGetEmailTemplate::CMsgGCGetEmailTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetEmailTemplate)
}
CMsgGCGetEmailTemplate::CMsgGCGetEmailTemplate(const CMsgGCGetEmailTemplate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCGetEmailTemplate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.email_msg_type_){}
    , decltype(_impl_.email_lang_){}
    , decltype(_impl_.email_format_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.email_format_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.email_format_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetEmailTemplate)
}

inline void CMsgGCGetEmailTemplate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.email_msg_type_){0u}
    , decltype(_impl_.email_lang_){0}
    , decltype(_impl_.email_format_){0}
  };
}

CMsgGCGetEmailTemplate::~CMsgGCGetEmailTemplate() {
  // @@protoc_insertion_point(destructor:CMsgGCGetEmailTemplate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCGetEmailTemplate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCGetEmailTemplate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCGetEmailTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetEmailTemplate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.email_format_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.email_format_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetEmailTemplate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 email_msg_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_email_msg_type(&has_bits);
          _impl_.email_msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 email_lang = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_email_lang(&has_bits);
          _impl_.email_lang_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 email_format = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_email_format(&has_bits);
          _impl_.email_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCGetEmailTemplate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetEmailTemplate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional uint32 email_msg_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_email_msg_type(), target);
  }

  // optional int32 email_lang = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_email_lang(), target);
  }

  // optional int32 email_format = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_email_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetEmailTemplate)
  return target;
}

size_t CMsgGCGetEmailTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetEmailTemplate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint32 email_msg_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_email_msg_type());
    }

    // optional int32 email_lang = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_email_lang());
    }

    // optional int32 email_format = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_email_format());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCGetEmailTemplate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCGetEmailTemplate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCGetEmailTemplate::GetClassData() const { return &_class_data_; }


void CMsgGCGetEmailTemplate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCGetEmailTemplate*>(&to_msg);
  auto& from = static_cast<const CMsgGCGetEmailTemplate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetEmailTemplate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.email_msg_type_ = from._impl_.email_msg_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.email_lang_ = from._impl_.email_lang_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.email_format_ = from._impl_.email_format_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCGetEmailTemplate::CopyFrom(const CMsgGCGetEmailTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetEmailTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetEmailTemplate::IsInitialized() const {
  return true;
}

void CMsgGCGetEmailTemplate::InternalSwap(CMsgGCGetEmailTemplate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCGetEmailTemplate, _impl_.email_format_)
      + sizeof(CMsgGCGetEmailTemplate::_impl_.email_format_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCGetEmailTemplate, _impl_.app_id_)>(
          reinterpret_cast<char*>(&_impl_.app_id_),
          reinterpret_cast<char*>(&other->_impl_.app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetEmailTemplate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[42]);
}

// ===================================================================

class CMsgGCGetEmailTemplateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCGetEmailTemplateResponse>()._impl_._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_template_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_template_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCGetEmailTemplateResponse::CMsgGCGetEmailTemplateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetEmailTemplateResponse)
}
CMsgGCGetEmailTemplateResponse::CMsgGCGetEmailTemplateResponse(const CMsgGCGetEmailTemplateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCGetEmailTemplateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.template__){}
    , decltype(_impl_.template_exists_){}
    , decltype(_impl_.eresult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.template__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.template__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_template_()) {
    _this->_impl_.template__.Set(from._internal_template_(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.template_exists_, &from._impl_.template_exists_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.eresult_) -
    reinterpret_cast<char*>(&_impl_.template_exists_)) + sizeof(_impl_.eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetEmailTemplateResponse)
}

inline void CMsgGCGetEmailTemplateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.template__){}
    , decltype(_impl_.template_exists_){false}
    , decltype(_impl_.eresult_){2u}
  };
  _impl_.template__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.template__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCGetEmailTemplateResponse::~CMsgGCGetEmailTemplateResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCGetEmailTemplateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCGetEmailTemplateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.template__.Destroy();
}

void CMsgGCGetEmailTemplateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCGetEmailTemplateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetEmailTemplateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.template__.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    _impl_.template_exists_ = false;
    _impl_.eresult_ = 2u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetEmailTemplateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          _impl_.eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool template_exists = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_template_exists(&has_bits);
          _impl_.template_exists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string template = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_template_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCGetEmailTemplateResponse.template");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCGetEmailTemplateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetEmailTemplateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional bool template_exists = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_template_exists(), target);
  }

  // optional string template = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_template_().data(), static_cast<int>(this->_internal_template_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCGetEmailTemplateResponse.template");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_template_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetEmailTemplateResponse)
  return target;
}

size_t CMsgGCGetEmailTemplateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetEmailTemplateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string template = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_template_());
    }

    // optional bool template_exists = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCGetEmailTemplateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCGetEmailTemplateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCGetEmailTemplateResponse::GetClassData() const { return &_class_data_; }


void CMsgGCGetEmailTemplateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCGetEmailTemplateResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCGetEmailTemplateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetEmailTemplateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_template_(from._internal_template_());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.template_exists_ = from._impl_.template_exists_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.eresult_ = from._impl_.eresult_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCGetEmailTemplateResponse::CopyFrom(const CMsgGCGetEmailTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetEmailTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetEmailTemplateResponse::IsInitialized() const {
  return true;
}

void CMsgGCGetEmailTemplateResponse::InternalSwap(CMsgGCGetEmailTemplateResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.template__, lhs_arena,
      &other->_impl_.template__, rhs_arena
  );
  swap(_impl_.template_exists_, other->_impl_.template_exists_);
  swap(_impl_.eresult_, other->_impl_.eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetEmailTemplateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[43]);
}

// ===================================================================

class CMsgAMGrantGuestPasses2::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMGrantGuestPasses2>()._impl_._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_package_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_passes_to_grant(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_days_to_expiration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgAMGrantGuestPasses2::CMsgAMGrantGuestPasses2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAMGrantGuestPasses2)
}
CMsgAMGrantGuestPasses2::CMsgAMGrantGuestPasses2(const CMsgAMGrantGuestPasses2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAMGrantGuestPasses2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steam_id_){}
    , decltype(_impl_.package_id_){}
    , decltype(_impl_.passes_to_grant_){}
    , decltype(_impl_.days_to_expiration_){}
    , decltype(_impl_.action_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steam_id_, &from._impl_.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.action_) -
    reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.action_));
  // @@protoc_insertion_point(copy_constructor:CMsgAMGrantGuestPasses2)
}

inline void CMsgAMGrantGuestPasses2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
    , decltype(_impl_.package_id_){0u}
    , decltype(_impl_.passes_to_grant_){0}
    , decltype(_impl_.days_to_expiration_){0}
    , decltype(_impl_.action_){0}
  };
}

CMsgAMGrantGuestPasses2::~CMsgAMGrantGuestPasses2() {
  // @@protoc_insertion_point(destructor:CMsgAMGrantGuestPasses2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAMGrantGuestPasses2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAMGrantGuestPasses2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAMGrantGuestPasses2::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMGrantGuestPasses2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.action_) -
        reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.action_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMGrantGuestPasses2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 package_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_package_id(&has_bits);
          _impl_.package_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 passes_to_grant = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_passes_to_grant(&has_bits);
          _impl_.passes_to_grant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 days_to_expiration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_days_to_expiration(&has_bits);
          _impl_.days_to_expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_action(&has_bits);
          _impl_.action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMGrantGuestPasses2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMGrantGuestPasses2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint32 package_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_package_id(), target);
  }

  // optional int32 passes_to_grant = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_passes_to_grant(), target);
  }

  // optional int32 days_to_expiration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_days_to_expiration(), target);
  }

  // optional int32 action = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMGrantGuestPasses2)
  return target;
}

size_t CMsgAMGrantGuestPasses2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMGrantGuestPasses2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 package_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_package_id());
    }

    // optional int32 passes_to_grant = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_passes_to_grant());
    }

    // optional int32 days_to_expiration = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_days_to_expiration());
    }

    // optional int32 action = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_action());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMGrantGuestPasses2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAMGrantGuestPasses2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMGrantGuestPasses2::GetClassData() const { return &_class_data_; }


void CMsgAMGrantGuestPasses2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAMGrantGuestPasses2*>(&to_msg);
  auto& from = static_cast<const CMsgAMGrantGuestPasses2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMGrantGuestPasses2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.package_id_ = from._impl_.package_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.passes_to_grant_ = from._impl_.passes_to_grant_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.days_to_expiration_ = from._impl_.days_to_expiration_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.action_ = from._impl_.action_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMGrantGuestPasses2::CopyFrom(const CMsgAMGrantGuestPasses2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMGrantGuestPasses2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGrantGuestPasses2::IsInitialized() const {
  return true;
}

void CMsgAMGrantGuestPasses2::InternalSwap(CMsgAMGrantGuestPasses2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAMGrantGuestPasses2, _impl_.action_)
      + sizeof(CMsgAMGrantGuestPasses2::_impl_.action_)
      - PROTOBUF_FIELD_OFFSET(CMsgAMGrantGuestPasses2, _impl_.steam_id_)>(
          reinterpret_cast<char*>(&_impl_.steam_id_),
          reinterpret_cast<char*>(&other->_impl_.steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMGrantGuestPasses2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[44]);
}

// ===================================================================

class CMsgAMGrantGuestPasses2Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMGrantGuestPasses2Response>()._impl_._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_passes_granted(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAMGrantGuestPasses2Response::CMsgAMGrantGuestPasses2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAMGrantGuestPasses2Response)
}
CMsgAMGrantGuestPasses2Response::CMsgAMGrantGuestPasses2Response(const CMsgAMGrantGuestPasses2Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAMGrantGuestPasses2Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.passes_granted_){}
    , decltype(_impl_.eresult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.passes_granted_, &from._impl_.passes_granted_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.eresult_) -
    reinterpret_cast<char*>(&_impl_.passes_granted_)) + sizeof(_impl_.eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgAMGrantGuestPasses2Response)
}

inline void CMsgAMGrantGuestPasses2Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.passes_granted_){0}
    , decltype(_impl_.eresult_){2}
  };
}

CMsgAMGrantGuestPasses2Response::~CMsgAMGrantGuestPasses2Response() {
  // @@protoc_insertion_point(destructor:CMsgAMGrantGuestPasses2Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAMGrantGuestPasses2Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAMGrantGuestPasses2Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAMGrantGuestPasses2Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMGrantGuestPasses2Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.passes_granted_ = 0;
    _impl_.eresult_ = 2;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMGrantGuestPasses2Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          _impl_.eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 passes_granted = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_passes_granted(&has_bits);
          _impl_.passes_granted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMGrantGuestPasses2Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMGrantGuestPasses2Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional int32 passes_granted = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_passes_granted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMGrantGuestPasses2Response)
  return target;
}

size_t CMsgAMGrantGuestPasses2Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMGrantGuestPasses2Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 passes_granted = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_passes_granted());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMGrantGuestPasses2Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAMGrantGuestPasses2Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMGrantGuestPasses2Response::GetClassData() const { return &_class_data_; }


void CMsgAMGrantGuestPasses2Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAMGrantGuestPasses2Response*>(&to_msg);
  auto& from = static_cast<const CMsgAMGrantGuestPasses2Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMGrantGuestPasses2Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.passes_granted_ = from._impl_.passes_granted_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.eresult_ = from._impl_.eresult_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMGrantGuestPasses2Response::CopyFrom(const CMsgAMGrantGuestPasses2Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMGrantGuestPasses2Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGrantGuestPasses2Response::IsInitialized() const {
  return true;
}

void CMsgAMGrantGuestPasses2Response::InternalSwap(CMsgAMGrantGuestPasses2Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.passes_granted_, other->_impl_.passes_granted_);
  swap(_impl_.eresult_, other->_impl_.eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMGrantGuestPasses2Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[45]);
}

// ===================================================================

class CMsgGCGetPersonaNames::_Internal {
 public:
};

CMsgGCGetPersonaNames::CMsgGCGetPersonaNames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetPersonaNames)
}
CMsgGCGetPersonaNames::CMsgGCGetPersonaNames(const CMsgGCGetPersonaNames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCGetPersonaNames* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.steamids_){from._impl_.steamids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetPersonaNames)
}

inline void CMsgGCGetPersonaNames::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.steamids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgGCGetPersonaNames::~CMsgGCGetPersonaNames() {
  // @@protoc_insertion_point(destructor:CMsgGCGetPersonaNames)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCGetPersonaNames::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.steamids_.~RepeatedField();
}

void CMsgGCGetPersonaNames::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCGetPersonaNames::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetPersonaNames)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.steamids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetPersonaNames::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed64 steamids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_steamids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_steamids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCGetPersonaNames::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetPersonaNames)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 steamids = 1;
  for (int i = 0, n = this->_internal_steamids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetPersonaNames)
  return target;
}

size_t CMsgGCGetPersonaNames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetPersonaNames)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steamids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steamids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_steamids_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCGetPersonaNames::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCGetPersonaNames::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCGetPersonaNames::GetClassData() const { return &_class_data_; }


void CMsgGCGetPersonaNames::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCGetPersonaNames*>(&to_msg);
  auto& from = static_cast<const CMsgGCGetPersonaNames&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetPersonaNames)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.steamids_.MergeFrom(from._impl_.steamids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCGetPersonaNames::CopyFrom(const CMsgGCGetPersonaNames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetPersonaNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPersonaNames::IsInitialized() const {
  return true;
}

void CMsgGCGetPersonaNames::InternalSwap(CMsgGCGetPersonaNames* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.steamids_.InternalSwap(&other->_impl_.steamids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetPersonaNames::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[46]);
}

// ===================================================================

class CMsgGCGetPersonaNames_Response_PersonaName::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCGetPersonaNames_Response_PersonaName>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCGetPersonaNames_Response_PersonaName::CMsgGCGetPersonaNames_Response_PersonaName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetPersonaNames_Response.PersonaName)
}
CMsgGCGetPersonaNames_Response_PersonaName::CMsgGCGetPersonaNames_Response_PersonaName(const CMsgGCGetPersonaNames_Response_PersonaName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCGetPersonaNames_Response_PersonaName* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.persona_name_){}
    , decltype(_impl_.steamid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.persona_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_persona_name()) {
    _this->_impl_.persona_name_.Set(from._internal_persona_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.steamid_ = from._impl_.steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetPersonaNames_Response.PersonaName)
}

inline void CMsgGCGetPersonaNames_Response_PersonaName::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.persona_name_){}
    , decltype(_impl_.steamid_){uint64_t{0u}}
  };
  _impl_.persona_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCGetPersonaNames_Response_PersonaName::~CMsgGCGetPersonaNames_Response_PersonaName() {
  // @@protoc_insertion_point(destructor:CMsgGCGetPersonaNames_Response.PersonaName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCGetPersonaNames_Response_PersonaName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.persona_name_.Destroy();
}

void CMsgGCGetPersonaNames_Response_PersonaName::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCGetPersonaNames_Response_PersonaName::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetPersonaNames_Response.PersonaName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.persona_name_.ClearNonDefaultToEmpty();
  }
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetPersonaNames_Response_PersonaName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string persona_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCGetPersonaNames_Response.PersonaName.persona_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCGetPersonaNames_Response_PersonaName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetPersonaNames_Response.PersonaName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCGetPersonaNames_Response.PersonaName.persona_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_persona_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetPersonaNames_Response.PersonaName)
  return target;
}

size_t CMsgGCGetPersonaNames_Response_PersonaName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetPersonaNames_Response.PersonaName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string persona_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCGetPersonaNames_Response_PersonaName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCGetPersonaNames_Response_PersonaName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCGetPersonaNames_Response_PersonaName::GetClassData() const { return &_class_data_; }


void CMsgGCGetPersonaNames_Response_PersonaName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCGetPersonaNames_Response_PersonaName*>(&to_msg);
  auto& from = static_cast<const CMsgGCGetPersonaNames_Response_PersonaName&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetPersonaNames_Response.PersonaName)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCGetPersonaNames_Response_PersonaName::CopyFrom(const CMsgGCGetPersonaNames_Response_PersonaName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetPersonaNames_Response.PersonaName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPersonaNames_Response_PersonaName::IsInitialized() const {
  return true;
}

void CMsgGCGetPersonaNames_Response_PersonaName::InternalSwap(CMsgGCGetPersonaNames_Response_PersonaName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.persona_name_, lhs_arena,
      &other->_impl_.persona_name_, rhs_arena
  );
  swap(_impl_.steamid_, other->_impl_.steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetPersonaNames_Response_PersonaName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[47]);
}

// ===================================================================

class CMsgGCGetPersonaNames_Response::_Internal {
 public:
};

CMsgGCGetPersonaNames_Response::CMsgGCGetPersonaNames_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetPersonaNames_Response)
}
CMsgGCGetPersonaNames_Response::CMsgGCGetPersonaNames_Response(const CMsgGCGetPersonaNames_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCGetPersonaNames_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.succeeded_lookups_){from._impl_.succeeded_lookups_}
    , decltype(_impl_.failed_lookup_steamids_){from._impl_.failed_lookup_steamids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetPersonaNames_Response)
}

inline void CMsgGCGetPersonaNames_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.succeeded_lookups_){arena}
    , decltype(_impl_.failed_lookup_steamids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgGCGetPersonaNames_Response::~CMsgGCGetPersonaNames_Response() {
  // @@protoc_insertion_point(destructor:CMsgGCGetPersonaNames_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCGetPersonaNames_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.succeeded_lookups_.~RepeatedPtrField();
  _impl_.failed_lookup_steamids_.~RepeatedField();
}

void CMsgGCGetPersonaNames_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCGetPersonaNames_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetPersonaNames_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.succeeded_lookups_.Clear();
  _impl_.failed_lookup_steamids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetPersonaNames_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_succeeded_lookups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 failed_lookup_steamids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_failed_lookup_steamids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_failed_lookup_steamids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCGetPersonaNames_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetPersonaNames_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_succeeded_lookups_size()); i < n; i++) {
    const auto& repfield = this->_internal_succeeded_lookups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated fixed64 failed_lookup_steamids = 2;
  for (int i = 0, n = this->_internal_failed_lookup_steamids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_failed_lookup_steamids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetPersonaNames_Response)
  return target;
}

size_t CMsgGCGetPersonaNames_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetPersonaNames_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
  total_size += 1UL * this->_internal_succeeded_lookups_size();
  for (const auto& msg : this->_impl_.succeeded_lookups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated fixed64 failed_lookup_steamids = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_failed_lookup_steamids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_failed_lookup_steamids_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCGetPersonaNames_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCGetPersonaNames_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCGetPersonaNames_Response::GetClassData() const { return &_class_data_; }


void CMsgGCGetPersonaNames_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCGetPersonaNames_Response*>(&to_msg);
  auto& from = static_cast<const CMsgGCGetPersonaNames_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetPersonaNames_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.succeeded_lookups_.MergeFrom(from._impl_.succeeded_lookups_);
  _this->_impl_.failed_lookup_steamids_.MergeFrom(from._impl_.failed_lookup_steamids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCGetPersonaNames_Response::CopyFrom(const CMsgGCGetPersonaNames_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetPersonaNames_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPersonaNames_Response::IsInitialized() const {
  return true;
}

void CMsgGCGetPersonaNames_Response::InternalSwap(CMsgGCGetPersonaNames_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.succeeded_lookups_.InternalSwap(&other->_impl_.succeeded_lookups_);
  _impl_.failed_lookup_steamids_.InternalSwap(&other->_impl_.failed_lookup_steamids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetPersonaNames_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[48]);
}

// ===================================================================

class CMsgGCCheckFriendship::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCheckFriendship>()._impl_._has_bits_);
  static void set_has_steamid_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid_right(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCheckFriendship::CMsgGCCheckFriendship(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCheckFriendship)
}
CMsgGCCheckFriendship::CMsgGCCheckFriendship(const CMsgGCCheckFriendship& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCheckFriendship* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_left_){}
    , decltype(_impl_.steamid_right_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steamid_left_, &from._impl_.steamid_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.steamid_right_) -
    reinterpret_cast<char*>(&_impl_.steamid_left_)) + sizeof(_impl_.steamid_right_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCheckFriendship)
}

inline void CMsgGCCheckFriendship::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_left_){uint64_t{0u}}
    , decltype(_impl_.steamid_right_){uint64_t{0u}}
  };
}

CMsgGCCheckFriendship::~CMsgGCCheckFriendship() {
  // @@protoc_insertion_point(destructor:CMsgGCCheckFriendship)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCheckFriendship::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCheckFriendship::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCheckFriendship::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCheckFriendship)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.steamid_left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.steamid_right_) -
        reinterpret_cast<char*>(&_impl_.steamid_left_)) + sizeof(_impl_.steamid_right_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCheckFriendship::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid_left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid_left(&has_bits);
          _impl_.steamid_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid_right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steamid_right(&has_bits);
          _impl_.steamid_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCheckFriendship::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCheckFriendship)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid_left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid_left(), target);
  }

  // optional fixed64 steamid_right = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCheckFriendship)
  return target;
}

size_t CMsgGCCheckFriendship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCheckFriendship)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid_left = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid_right = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCheckFriendship::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCheckFriendship::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCheckFriendship::GetClassData() const { return &_class_data_; }


void CMsgGCCheckFriendship::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCheckFriendship*>(&to_msg);
  auto& from = static_cast<const CMsgGCCheckFriendship&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCheckFriendship)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steamid_left_ = from._impl_.steamid_left_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.steamid_right_ = from._impl_.steamid_right_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCheckFriendship::CopyFrom(const CMsgGCCheckFriendship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCheckFriendship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCheckFriendship::IsInitialized() const {
  return true;
}

void CMsgGCCheckFriendship::InternalSwap(CMsgGCCheckFriendship* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCheckFriendship, _impl_.steamid_right_)
      + sizeof(CMsgGCCheckFriendship::_impl_.steamid_right_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCheckFriendship, _impl_.steamid_left_)>(
          reinterpret_cast<char*>(&_impl_.steamid_left_),
          reinterpret_cast<char*>(&other->_impl_.steamid_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCheckFriendship::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[49]);
}

// ===================================================================

class CMsgGCCheckFriendship_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCheckFriendship_Response>()._impl_._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_found_friendship(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCheckFriendship_Response::CMsgGCCheckFriendship_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCheckFriendship_Response)
}
CMsgGCCheckFriendship_Response::CMsgGCCheckFriendship_Response(const CMsgGCCheckFriendship_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCheckFriendship_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.success_){}
    , decltype(_impl_.found_friendship_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.found_friendship_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.found_friendship_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCheckFriendship_Response)
}

inline void CMsgGCCheckFriendship_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.found_friendship_){false}
  };
}

CMsgGCCheckFriendship_Response::~CMsgGCCheckFriendship_Response() {
  // @@protoc_insertion_point(destructor:CMsgGCCheckFriendship_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCheckFriendship_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCheckFriendship_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCheckFriendship_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCheckFriendship_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.found_friendship_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.found_friendship_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCheckFriendship_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool found_friendship = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_found_friendship(&has_bits);
          _impl_.found_friendship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCheckFriendship_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCheckFriendship_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // optional bool found_friendship = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_found_friendship(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCheckFriendship_Response)
  return target;
}

size_t CMsgGCCheckFriendship_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCheckFriendship_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool success = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool found_friendship = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCheckFriendship_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCheckFriendship_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCheckFriendship_Response::GetClassData() const { return &_class_data_; }


void CMsgGCCheckFriendship_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCheckFriendship_Response*>(&to_msg);
  auto& from = static_cast<const CMsgGCCheckFriendship_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCheckFriendship_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.success_ = from._impl_.success_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.found_friendship_ = from._impl_.found_friendship_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCheckFriendship_Response::CopyFrom(const CMsgGCCheckFriendship_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCheckFriendship_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCheckFriendship_Response::IsInitialized() const {
  return true;
}

void CMsgGCCheckFriendship_Response::InternalSwap(CMsgGCCheckFriendship_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCheckFriendship_Response, _impl_.found_friendship_)
      + sizeof(CMsgGCCheckFriendship_Response::_impl_.found_friendship_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCheckFriendship_Response, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCheckFriendship_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[50]);
}

// ===================================================================

class CMsgGCGetAppFriendsList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCGetAppFriendsList>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_include_friendship_timestamps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCGetAppFriendsList::CMsgGCGetAppFriendsList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetAppFriendsList)
}
CMsgGCGetAppFriendsList::CMsgGCGetAppFriendsList(const CMsgGCGetAppFriendsList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCGetAppFriendsList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.include_friendship_timestamps_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.include_friendship_timestamps_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.include_friendship_timestamps_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetAppFriendsList)
}

inline void CMsgGCGetAppFriendsList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.include_friendship_timestamps_){false}
  };
}

CMsgGCGetAppFriendsList::~CMsgGCGetAppFriendsList() {
  // @@protoc_insertion_point(destructor:CMsgGCGetAppFriendsList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCGetAppFriendsList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCGetAppFriendsList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCGetAppFriendsList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetAppFriendsList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.include_friendship_timestamps_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.include_friendship_timestamps_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetAppFriendsList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool include_friendship_timestamps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_include_friendship_timestamps(&has_bits);
          _impl_.include_friendship_timestamps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCGetAppFriendsList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetAppFriendsList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional bool include_friendship_timestamps = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_include_friendship_timestamps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetAppFriendsList)
  return target;
}

size_t CMsgGCGetAppFriendsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetAppFriendsList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool include_friendship_timestamps = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCGetAppFriendsList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCGetAppFriendsList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCGetAppFriendsList::GetClassData() const { return &_class_data_; }


void CMsgGCGetAppFriendsList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCGetAppFriendsList*>(&to_msg);
  auto& from = static_cast<const CMsgGCGetAppFriendsList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetAppFriendsList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.include_friendship_timestamps_ = from._impl_.include_friendship_timestamps_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCGetAppFriendsList::CopyFrom(const CMsgGCGetAppFriendsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetAppFriendsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetAppFriendsList::IsInitialized() const {
  return true;
}

void CMsgGCGetAppFriendsList::InternalSwap(CMsgGCGetAppFriendsList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCGetAppFriendsList, _impl_.include_friendship_timestamps_)
      + sizeof(CMsgGCGetAppFriendsList::_impl_.include_friendship_timestamps_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCGetAppFriendsList, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetAppFriendsList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[51]);
}

// ===================================================================

class CMsgGCGetAppFriendsList_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCGetAppFriendsList_Response>()._impl_._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCGetAppFriendsList_Response::CMsgGCGetAppFriendsList_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetAppFriendsList_Response)
}
CMsgGCGetAppFriendsList_Response::CMsgGCGetAppFriendsList_Response(const CMsgGCGetAppFriendsList_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCGetAppFriendsList_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamids_){from._impl_.steamids_}
    , decltype(_impl_.friendship_timestamps_){from._impl_.friendship_timestamps_}
    , decltype(_impl_.last_playtimes_){from._impl_.last_playtimes_}
    , decltype(_impl_.success_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetAppFriendsList_Response)
}

inline void CMsgGCGetAppFriendsList_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamids_){arena}
    , decltype(_impl_.friendship_timestamps_){arena}
    , decltype(_impl_.last_playtimes_){arena}
    , decltype(_impl_.success_){false}
  };
}

CMsgGCGetAppFriendsList_Response::~CMsgGCGetAppFriendsList_Response() {
  // @@protoc_insertion_point(destructor:CMsgGCGetAppFriendsList_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCGetAppFriendsList_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.steamids_.~RepeatedField();
  _impl_.friendship_timestamps_.~RepeatedField();
  _impl_.last_playtimes_.~RepeatedField();
}

void CMsgGCGetAppFriendsList_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCGetAppFriendsList_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetAppFriendsList_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.steamids_.Clear();
  _impl_.friendship_timestamps_.Clear();
  _impl_.last_playtimes_.Clear();
  _impl_.success_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetAppFriendsList_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 steamids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_steamids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_steamids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed32 friendship_timestamps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_friendship_timestamps(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
            ptr += sizeof(uint32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_friendship_timestamps(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed32 last_playtimes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_last_playtimes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
            ptr += sizeof(uint32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_last_playtimes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCGetAppFriendsList_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetAppFriendsList_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // repeated fixed64 steamids = 2;
  for (int i = 0, n = this->_internal_steamids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamids(i), target);
  }

  // repeated fixed32 friendship_timestamps = 3;
  for (int i = 0, n = this->_internal_friendship_timestamps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(3, this->_internal_friendship_timestamps(i), target);
  }

  // repeated fixed32 last_playtimes = 4;
  for (int i = 0, n = this->_internal_last_playtimes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(4, this->_internal_last_playtimes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetAppFriendsList_Response)
  return target;
}

size_t CMsgGCGetAppFriendsList_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetAppFriendsList_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steamids = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steamids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_steamids_size());
    total_size += data_size;
  }

  // repeated fixed32 friendship_timestamps = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_friendship_timestamps_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_friendship_timestamps_size());
    total_size += data_size;
  }

  // repeated fixed32 last_playtimes = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_last_playtimes_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_last_playtimes_size());
    total_size += data_size;
  }

  // optional bool success = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCGetAppFriendsList_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCGetAppFriendsList_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCGetAppFriendsList_Response::GetClassData() const { return &_class_data_; }


void CMsgGCGetAppFriendsList_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCGetAppFriendsList_Response*>(&to_msg);
  auto& from = static_cast<const CMsgGCGetAppFriendsList_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetAppFriendsList_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.steamids_.MergeFrom(from._impl_.steamids_);
  _this->_impl_.friendship_timestamps_.MergeFrom(from._impl_.friendship_timestamps_);
  _this->_impl_.last_playtimes_.MergeFrom(from._impl_.last_playtimes_);
  if (from._internal_has_success()) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCGetAppFriendsList_Response::CopyFrom(const CMsgGCGetAppFriendsList_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetAppFriendsList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetAppFriendsList_Response::IsInitialized() const {
  return true;
}

void CMsgGCGetAppFriendsList_Response::InternalSwap(CMsgGCGetAppFriendsList_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.steamids_.InternalSwap(&other->_impl_.steamids_);
  _impl_.friendship_timestamps_.InternalSwap(&other->_impl_.friendship_timestamps_);
  _impl_.last_playtimes_.InternalSwap(&other->_impl_.last_playtimes_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetAppFriendsList_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[52]);
}

// ===================================================================

class CMsgGCMsgMasterSetDirectory_SubGC::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCMsgMasterSetDirectory_SubGC>()._impl_._has_bits_);
  static void set_has_dir_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_box(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_command_line(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gc_binary(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCMsgMasterSetDirectory_SubGC::CMsgGCMsgMasterSetDirectory_SubGC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgMasterSetDirectory.SubGC)
}
CMsgGCMsgMasterSetDirectory_SubGC::CMsgGCMsgMasterSetDirectory_SubGC(const CMsgGCMsgMasterSetDirectory_SubGC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCMsgMasterSetDirectory_SubGC* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.box_){}
    , decltype(_impl_.command_line_){}
    , decltype(_impl_.gc_binary_){}
    , decltype(_impl_.dir_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.box_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.box_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_box()) {
    _this->_impl_.box_.Set(from._internal_box(), 
      _this->GetArenaForAllocation());
  }
  _impl_.command_line_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_line_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_command_line()) {
    _this->_impl_.command_line_.Set(from._internal_command_line(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gc_binary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gc_binary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gc_binary()) {
    _this->_impl_.gc_binary_.Set(from._internal_gc_binary(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.dir_index_ = from._impl_.dir_index_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgMasterSetDirectory.SubGC)
}

inline void CMsgGCMsgMasterSetDirectory_SubGC::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.box_){}
    , decltype(_impl_.command_line_){}
    , decltype(_impl_.gc_binary_){}
    , decltype(_impl_.dir_index_){-1}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.box_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.box_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.command_line_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_line_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gc_binary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gc_binary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCMsgMasterSetDirectory_SubGC::~CMsgGCMsgMasterSetDirectory_SubGC() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgMasterSetDirectory.SubGC)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCMsgMasterSetDirectory_SubGC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.box_.Destroy();
  _impl_.command_line_.Destroy();
  _impl_.gc_binary_.Destroy();
}

void CMsgGCMsgMasterSetDirectory_SubGC::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCMsgMasterSetDirectory_SubGC::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgMasterSetDirectory.SubGC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.box_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.command_line_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.gc_binary_.ClearNonDefaultToEmpty();
    }
    _impl_.dir_index_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgMasterSetDirectory_SubGC::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 dir_index = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dir_index(&has_bits);
          _impl_.dir_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCMsgMasterSetDirectory.SubGC.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string box = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_box();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCMsgMasterSetDirectory.SubGC.box");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string command_line = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_command_line();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCMsgMasterSetDirectory.SubGC.command_line");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string gc_binary = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_gc_binary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCMsgMasterSetDirectory.SubGC.gc_binary");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgMasterSetDirectory_SubGC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgMasterSetDirectory.SubGC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 dir_index = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_dir_index(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCMsgMasterSetDirectory.SubGC.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string box = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_box().data(), static_cast<int>(this->_internal_box().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCMsgMasterSetDirectory.SubGC.box");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_box(), target);
  }

  // optional string command_line = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_command_line().data(), static_cast<int>(this->_internal_command_line().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCMsgMasterSetDirectory.SubGC.command_line");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_command_line(), target);
  }

  // optional string gc_binary = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gc_binary().data(), static_cast<int>(this->_internal_gc_binary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCMsgMasterSetDirectory.SubGC.gc_binary");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_gc_binary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgMasterSetDirectory.SubGC)
  return target;
}

size_t CMsgGCMsgMasterSetDirectory_SubGC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgMasterSetDirectory.SubGC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string box = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_box());
    }

    // optional string command_line = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_command_line());
    }

    // optional string gc_binary = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gc_binary());
    }

    // optional int32 dir_index = 1 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dir_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgMasterSetDirectory_SubGC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCMsgMasterSetDirectory_SubGC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgMasterSetDirectory_SubGC::GetClassData() const { return &_class_data_; }


void CMsgGCMsgMasterSetDirectory_SubGC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCMsgMasterSetDirectory_SubGC*>(&to_msg);
  auto& from = static_cast<const CMsgGCMsgMasterSetDirectory_SubGC&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgMasterSetDirectory.SubGC)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_box(from._internal_box());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_command_line(from._internal_command_line());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_gc_binary(from._internal_gc_binary());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.dir_index_ = from._impl_.dir_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgMasterSetDirectory_SubGC::CopyFrom(const CMsgGCMsgMasterSetDirectory_SubGC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgMasterSetDirectory.SubGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetDirectory_SubGC::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetDirectory_SubGC::InternalSwap(CMsgGCMsgMasterSetDirectory_SubGC* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.box_, lhs_arena,
      &other->_impl_.box_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.command_line_, lhs_arena,
      &other->_impl_.command_line_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gc_binary_, lhs_arena,
      &other->_impl_.gc_binary_, rhs_arena
  );
  swap(_impl_.dir_index_, other->_impl_.dir_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgMasterSetDirectory_SubGC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[53]);
}

// ===================================================================

class CMsgGCMsgMasterSetDirectory::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCMsgMasterSetDirectory>()._impl_._has_bits_);
  static void set_has_master_dir_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCMsgMasterSetDirectory::CMsgGCMsgMasterSetDirectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgMasterSetDirectory)
}
CMsgGCMsgMasterSetDirectory::CMsgGCMsgMasterSetDirectory(const CMsgGCMsgMasterSetDirectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCMsgMasterSetDirectory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dir_){from._impl_.dir_}
    , decltype(_impl_.master_dir_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.master_dir_index_ = from._impl_.master_dir_index_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgMasterSetDirectory)
}

inline void CMsgGCMsgMasterSetDirectory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dir_){arena}
    , decltype(_impl_.master_dir_index_){-1}
  };
}

CMsgGCMsgMasterSetDirectory::~CMsgGCMsgMasterSetDirectory() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgMasterSetDirectory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCMsgMasterSetDirectory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dir_.~RepeatedPtrField();
}

void CMsgGCMsgMasterSetDirectory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCMsgMasterSetDirectory::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgMasterSetDirectory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dir_.Clear();
  _impl_.master_dir_index_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgMasterSetDirectory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 master_dir_index = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_master_dir_index(&has_bits);
          _impl_.master_dir_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCMsgMasterSetDirectory.SubGC dir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dir(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgMasterSetDirectory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgMasterSetDirectory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 master_dir_index = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_master_dir_index(), target);
  }

  // repeated .CMsgGCMsgMasterSetDirectory.SubGC dir = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dir_size()); i < n; i++) {
    const auto& repfield = this->_internal_dir(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgMasterSetDirectory)
  return target;
}

size_t CMsgGCMsgMasterSetDirectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgMasterSetDirectory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCMsgMasterSetDirectory.SubGC dir = 2;
  total_size += 1UL * this->_internal_dir_size();
  for (const auto& msg : this->_impl_.dir_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 master_dir_index = 1 [default = -1];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_master_dir_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgMasterSetDirectory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCMsgMasterSetDirectory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgMasterSetDirectory::GetClassData() const { return &_class_data_; }


void CMsgGCMsgMasterSetDirectory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCMsgMasterSetDirectory*>(&to_msg);
  auto& from = static_cast<const CMsgGCMsgMasterSetDirectory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgMasterSetDirectory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dir_.MergeFrom(from._impl_.dir_);
  if (from._internal_has_master_dir_index()) {
    _this->_internal_set_master_dir_index(from._internal_master_dir_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgMasterSetDirectory::CopyFrom(const CMsgGCMsgMasterSetDirectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgMasterSetDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetDirectory::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetDirectory::InternalSwap(CMsgGCMsgMasterSetDirectory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.dir_.InternalSwap(&other->_impl_.dir_);
  swap(_impl_.master_dir_index_, other->_impl_.master_dir_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgMasterSetDirectory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[54]);
}

// ===================================================================

class CMsgGCMsgMasterSetDirectory_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCMsgMasterSetDirectory_Response>()._impl_._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCMsgMasterSetDirectory_Response::CMsgGCMsgMasterSetDirectory_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgMasterSetDirectory_Response)
}
CMsgGCMsgMasterSetDirectory_Response::CMsgGCMsgMasterSetDirectory_Response(const CMsgGCMsgMasterSetDirectory_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCMsgMasterSetDirectory_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.eresult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.eresult_ = from._impl_.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgMasterSetDirectory_Response)
}

inline void CMsgGCMsgMasterSetDirectory_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.eresult_){2}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCMsgMasterSetDirectory_Response::~CMsgGCMsgMasterSetDirectory_Response() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgMasterSetDirectory_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCMsgMasterSetDirectory_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void CMsgGCMsgMasterSetDirectory_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCMsgMasterSetDirectory_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgMasterSetDirectory_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    _impl_.eresult_ = 2;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgMasterSetDirectory_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          _impl_.eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCMsgMasterSetDirectory_Response.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgMasterSetDirectory_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgMasterSetDirectory_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCMsgMasterSetDirectory_Response.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgMasterSetDirectory_Response)
  return target;
}

size_t CMsgGCMsgMasterSetDirectory_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgMasterSetDirectory_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgMasterSetDirectory_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCMsgMasterSetDirectory_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgMasterSetDirectory_Response::GetClassData() const { return &_class_data_; }


void CMsgGCMsgMasterSetDirectory_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCMsgMasterSetDirectory_Response*>(&to_msg);
  auto& from = static_cast<const CMsgGCMsgMasterSetDirectory_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgMasterSetDirectory_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.eresult_ = from._impl_.eresult_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgMasterSetDirectory_Response::CopyFrom(const CMsgGCMsgMasterSetDirectory_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgMasterSetDirectory_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetDirectory_Response::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetDirectory_Response::InternalSwap(CMsgGCMsgMasterSetDirectory_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.eresult_, other->_impl_.eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgMasterSetDirectory_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[55]);
}

// ===================================================================

class CMsgGCMsgWebAPIJobRequestForwardResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCMsgWebAPIJobRequestForwardResponse>()._impl_._has_bits_);
  static void set_has_dir_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCMsgWebAPIJobRequestForwardResponse::CMsgGCMsgWebAPIJobRequestForwardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgWebAPIJobRequestForwardResponse)
}
CMsgGCMsgWebAPIJobRequestForwardResponse::CMsgGCMsgWebAPIJobRequestForwardResponse(const CMsgGCMsgWebAPIJobRequestForwardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCMsgWebAPIJobRequestForwardResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dir_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.dir_index_ = from._impl_.dir_index_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgWebAPIJobRequestForwardResponse)
}

inline void CMsgGCMsgWebAPIJobRequestForwardResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dir_index_){-1}
  };
}

CMsgGCMsgWebAPIJobRequestForwardResponse::~CMsgGCMsgWebAPIJobRequestForwardResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgWebAPIJobRequestForwardResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCMsgWebAPIJobRequestForwardResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgWebAPIJobRequestForwardResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dir_index_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgWebAPIJobRequestForwardResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 dir_index = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dir_index(&has_bits);
          _impl_.dir_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgWebAPIJobRequestForwardResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgWebAPIJobRequestForwardResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 dir_index = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_dir_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgWebAPIJobRequestForwardResponse)
  return target;
}

size_t CMsgGCMsgWebAPIJobRequestForwardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgWebAPIJobRequestForwardResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 dir_index = 1 [default = -1];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dir_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgWebAPIJobRequestForwardResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCMsgWebAPIJobRequestForwardResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgWebAPIJobRequestForwardResponse::GetClassData() const { return &_class_data_; }


void CMsgGCMsgWebAPIJobRequestForwardResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCMsgWebAPIJobRequestForwardResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCMsgWebAPIJobRequestForwardResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgWebAPIJobRequestForwardResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dir_index()) {
    _this->_internal_set_dir_index(from._internal_dir_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::CopyFrom(const CMsgGCMsgWebAPIJobRequestForwardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgWebAPIJobRequestForwardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgWebAPIJobRequestForwardResponse::IsInitialized() const {
  return true;
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::InternalSwap(CMsgGCMsgWebAPIJobRequestForwardResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.dir_index_, other->_impl_.dir_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgWebAPIJobRequestForwardResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[56]);
}

// ===================================================================

class CGCSystemMsg_GetPurchaseTrust_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCSystemMsg_GetPurchaseTrust_Request>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGCSystemMsg_GetPurchaseTrust_Request::CGCSystemMsg_GetPurchaseTrust_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CGCSystemMsg_GetPurchaseTrust_Request)
}
CGCSystemMsg_GetPurchaseTrust_Request::CGCSystemMsg_GetPurchaseTrust_Request(const CGCSystemMsg_GetPurchaseTrust_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCSystemMsg_GetPurchaseTrust_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.steamid_ = from._impl_.steamid_;
  // @@protoc_insertion_point(copy_constructor:CGCSystemMsg_GetPurchaseTrust_Request)
}

inline void CGCSystemMsg_GetPurchaseTrust_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
  };
}

CGCSystemMsg_GetPurchaseTrust_Request::~CGCSystemMsg_GetPurchaseTrust_Request() {
  // @@protoc_insertion_point(destructor:CGCSystemMsg_GetPurchaseTrust_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCSystemMsg_GetPurchaseTrust_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCSystemMsg_GetPurchaseTrust_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCSystemMsg_GetPurchaseTrust_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCSystemMsg_GetPurchaseTrust_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCSystemMsg_GetPurchaseTrust_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCSystemMsg_GetPurchaseTrust_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCSystemMsg_GetPurchaseTrust_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCSystemMsg_GetPurchaseTrust_Request)
  return target;
}

size_t CGCSystemMsg_GetPurchaseTrust_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCSystemMsg_GetPurchaseTrust_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCSystemMsg_GetPurchaseTrust_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCSystemMsg_GetPurchaseTrust_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCSystemMsg_GetPurchaseTrust_Request::GetClassData() const { return &_class_data_; }


void CGCSystemMsg_GetPurchaseTrust_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCSystemMsg_GetPurchaseTrust_Request*>(&to_msg);
  auto& from = static_cast<const CGCSystemMsg_GetPurchaseTrust_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCSystemMsg_GetPurchaseTrust_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _this->_internal_set_steamid(from._internal_steamid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCSystemMsg_GetPurchaseTrust_Request::CopyFrom(const CGCSystemMsg_GetPurchaseTrust_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCSystemMsg_GetPurchaseTrust_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCSystemMsg_GetPurchaseTrust_Request::IsInitialized() const {
  return true;
}

void CGCSystemMsg_GetPurchaseTrust_Request::InternalSwap(CGCSystemMsg_GetPurchaseTrust_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.steamid_, other->_impl_.steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCSystemMsg_GetPurchaseTrust_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[57]);
}

// ===================================================================

class CGCSystemMsg_GetPurchaseTrust_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCSystemMsg_GetPurchaseTrust_Response>()._impl_._has_bits_);
  static void set_has_has_prior_purchase_history(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_no_recent_password_resets(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_wallet_cash_trusted(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_all_trusted(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CGCSystemMsg_GetPurchaseTrust_Response::CGCSystemMsg_GetPurchaseTrust_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CGCSystemMsg_GetPurchaseTrust_Response)
}
CGCSystemMsg_GetPurchaseTrust_Response::CGCSystemMsg_GetPurchaseTrust_Response(const CGCSystemMsg_GetPurchaseTrust_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCSystemMsg_GetPurchaseTrust_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.has_prior_purchase_history_){}
    , decltype(_impl_.has_no_recent_password_resets_){}
    , decltype(_impl_.is_wallet_cash_trusted_){}
    , decltype(_impl_.time_all_trusted_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.has_prior_purchase_history_, &from._impl_.has_prior_purchase_history_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_all_trusted_) -
    reinterpret_cast<char*>(&_impl_.has_prior_purchase_history_)) + sizeof(_impl_.time_all_trusted_));
  // @@protoc_insertion_point(copy_constructor:CGCSystemMsg_GetPurchaseTrust_Response)
}

inline void CGCSystemMsg_GetPurchaseTrust_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.has_prior_purchase_history_){false}
    , decltype(_impl_.has_no_recent_password_resets_){false}
    , decltype(_impl_.is_wallet_cash_trusted_){false}
    , decltype(_impl_.time_all_trusted_){0u}
  };
}

CGCSystemMsg_GetPurchaseTrust_Response::~CGCSystemMsg_GetPurchaseTrust_Response() {
  // @@protoc_insertion_point(destructor:CGCSystemMsg_GetPurchaseTrust_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCSystemMsg_GetPurchaseTrust_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCSystemMsg_GetPurchaseTrust_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCSystemMsg_GetPurchaseTrust_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCSystemMsg_GetPurchaseTrust_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.has_prior_purchase_history_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.time_all_trusted_) -
        reinterpret_cast<char*>(&_impl_.has_prior_purchase_history_)) + sizeof(_impl_.time_all_trusted_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCSystemMsg_GetPurchaseTrust_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool has_prior_purchase_history = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_has_prior_purchase_history(&has_bits);
          _impl_.has_prior_purchase_history_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_no_recent_password_resets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_has_no_recent_password_resets(&has_bits);
          _impl_.has_no_recent_password_resets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_wallet_cash_trusted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_wallet_cash_trusted(&has_bits);
          _impl_.is_wallet_cash_trusted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_all_trusted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_time_all_trusted(&has_bits);
          _impl_.time_all_trusted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCSystemMsg_GetPurchaseTrust_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCSystemMsg_GetPurchaseTrust_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool has_prior_purchase_history = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_has_prior_purchase_history(), target);
  }

  // optional bool has_no_recent_password_resets = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_has_no_recent_password_resets(), target);
  }

  // optional bool is_wallet_cash_trusted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_wallet_cash_trusted(), target);
  }

  // optional uint32 time_all_trusted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_time_all_trusted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCSystemMsg_GetPurchaseTrust_Response)
  return target;
}

size_t CGCSystemMsg_GetPurchaseTrust_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCSystemMsg_GetPurchaseTrust_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool has_prior_purchase_history = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool has_no_recent_password_resets = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_wallet_cash_trusted = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 time_all_trusted = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_all_trusted());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCSystemMsg_GetPurchaseTrust_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCSystemMsg_GetPurchaseTrust_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCSystemMsg_GetPurchaseTrust_Response::GetClassData() const { return &_class_data_; }


void CGCSystemMsg_GetPurchaseTrust_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCSystemMsg_GetPurchaseTrust_Response*>(&to_msg);
  auto& from = static_cast<const CGCSystemMsg_GetPurchaseTrust_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCSystemMsg_GetPurchaseTrust_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.has_prior_purchase_history_ = from._impl_.has_prior_purchase_history_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.has_no_recent_password_resets_ = from._impl_.has_no_recent_password_resets_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_wallet_cash_trusted_ = from._impl_.is_wallet_cash_trusted_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.time_all_trusted_ = from._impl_.time_all_trusted_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCSystemMsg_GetPurchaseTrust_Response::CopyFrom(const CGCSystemMsg_GetPurchaseTrust_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCSystemMsg_GetPurchaseTrust_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCSystemMsg_GetPurchaseTrust_Response::IsInitialized() const {
  return true;
}

void CGCSystemMsg_GetPurchaseTrust_Response::InternalSwap(CGCSystemMsg_GetPurchaseTrust_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetPurchaseTrust_Response, _impl_.time_all_trusted_)
      + sizeof(CGCSystemMsg_GetPurchaseTrust_Response::_impl_.time_all_trusted_)
      - PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetPurchaseTrust_Response, _impl_.has_prior_purchase_history_)>(
          reinterpret_cast<char*>(&_impl_.has_prior_purchase_history_),
          reinterpret_cast<char*>(&other->_impl_.has_prior_purchase_history_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCSystemMsg_GetPurchaseTrust_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[58]);
}

// ===================================================================

class CMsgGCHAccountVacStatusChange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHAccountVacStatusChange>()._impl_._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rtime_vacban_starts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_banned_now(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_banned_future(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGCHAccountVacStatusChange::CMsgGCHAccountVacStatusChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCHAccountVacStatusChange)
}
CMsgGCHAccountVacStatusChange::CMsgGCHAccountVacStatusChange(const CMsgGCHAccountVacStatusChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCHAccountVacStatusChange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steam_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.rtime_vacban_starts_){}
    , decltype(_impl_.is_banned_now_){}
    , decltype(_impl_.is_banned_future_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steam_id_, &from._impl_.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_banned_future_) -
    reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.is_banned_future_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCHAccountVacStatusChange)
}

inline void CMsgGCHAccountVacStatusChange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.rtime_vacban_starts_){0u}
    , decltype(_impl_.is_banned_now_){false}
    , decltype(_impl_.is_banned_future_){false}
  };
}

CMsgGCHAccountVacStatusChange::~CMsgGCHAccountVacStatusChange() {
  // @@protoc_insertion_point(destructor:CMsgGCHAccountVacStatusChange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCHAccountVacStatusChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCHAccountVacStatusChange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCHAccountVacStatusChange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHAccountVacStatusChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_banned_future_) -
        reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.is_banned_future_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCHAccountVacStatusChange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rtime_vacban_starts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_rtime_vacban_starts(&has_bits);
          _impl_.rtime_vacban_starts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_banned_now = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_banned_now(&has_bits);
          _impl_.is_banned_now_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_banned_future = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_banned_future(&has_bits);
          _impl_.is_banned_future_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCHAccountVacStatusChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHAccountVacStatusChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_id(), target);
  }

  // optional uint32 rtime_vacban_starts = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rtime_vacban_starts(), target);
  }

  // optional bool is_banned_now = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_banned_now(), target);
  }

  // optional bool is_banned_future = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_banned_future(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHAccountVacStatusChange)
  return target;
}

size_t CMsgGCHAccountVacStatusChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHAccountVacStatusChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint32 rtime_vacban_starts = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rtime_vacban_starts());
    }

    // optional bool is_banned_now = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_banned_future = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCHAccountVacStatusChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCHAccountVacStatusChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCHAccountVacStatusChange::GetClassData() const { return &_class_data_; }


void CMsgGCHAccountVacStatusChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCHAccountVacStatusChange*>(&to_msg);
  auto& from = static_cast<const CMsgGCHAccountVacStatusChange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHAccountVacStatusChange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rtime_vacban_starts_ = from._impl_.rtime_vacban_starts_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_banned_now_ = from._impl_.is_banned_now_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_banned_future_ = from._impl_.is_banned_future_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCHAccountVacStatusChange::CopyFrom(const CMsgGCHAccountVacStatusChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHAccountVacStatusChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHAccountVacStatusChange::IsInitialized() const {
  return true;
}

void CMsgGCHAccountVacStatusChange::InternalSwap(CMsgGCHAccountVacStatusChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCHAccountVacStatusChange, _impl_.is_banned_future_)
      + sizeof(CMsgGCHAccountVacStatusChange::_impl_.is_banned_future_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCHAccountVacStatusChange, _impl_.steam_id_)>(
          reinterpret_cast<char*>(&_impl_.steam_id_),
          reinterpret_cast<char*>(&other->_impl_.steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCHAccountVacStatusChange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[59]);
}

// ===================================================================

class CMsgGCGetPartnerAccountLink::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCGetPartnerAccountLink>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCGetPartnerAccountLink::CMsgGCGetPartnerAccountLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetPartnerAccountLink)
}
CMsgGCGetPartnerAccountLink::CMsgGCGetPartnerAccountLink(const CMsgGCGetPartnerAccountLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCGetPartnerAccountLink* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.steamid_ = from._impl_.steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetPartnerAccountLink)
}

inline void CMsgGCGetPartnerAccountLink::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
  };
}

CMsgGCGetPartnerAccountLink::~CMsgGCGetPartnerAccountLink() {
  // @@protoc_insertion_point(destructor:CMsgGCGetPartnerAccountLink)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCGetPartnerAccountLink::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCGetPartnerAccountLink::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCGetPartnerAccountLink::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetPartnerAccountLink)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetPartnerAccountLink::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCGetPartnerAccountLink::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetPartnerAccountLink)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetPartnerAccountLink)
  return target;
}

size_t CMsgGCGetPartnerAccountLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetPartnerAccountLink)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCGetPartnerAccountLink::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCGetPartnerAccountLink::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCGetPartnerAccountLink::GetClassData() const { return &_class_data_; }


void CMsgGCGetPartnerAccountLink::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCGetPartnerAccountLink*>(&to_msg);
  auto& from = static_cast<const CMsgGCGetPartnerAccountLink&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetPartnerAccountLink)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _this->_internal_set_steamid(from._internal_steamid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCGetPartnerAccountLink::CopyFrom(const CMsgGCGetPartnerAccountLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetPartnerAccountLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPartnerAccountLink::IsInitialized() const {
  return true;
}

void CMsgGCGetPartnerAccountLink::InternalSwap(CMsgGCGetPartnerAccountLink* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.steamid_, other->_impl_.steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetPartnerAccountLink::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[60]);
}

// ===================================================================

class CMsgGCGetPartnerAccountLink_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCGetPartnerAccountLink_Response>()._impl_._has_bits_);
  static void set_has_pwid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nexonid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ageclass(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_id_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_adult(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGCGetPartnerAccountLink_Response::CMsgGCGetPartnerAccountLink_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetPartnerAccountLink_Response)
}
CMsgGCGetPartnerAccountLink_Response::CMsgGCGetPartnerAccountLink_Response(const CMsgGCGetPartnerAccountLink_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCGetPartnerAccountLink_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pwid_){}
    , decltype(_impl_.nexonid_){}
    , decltype(_impl_.ageclass_){}
    , decltype(_impl_.id_verified_){}
    , decltype(_impl_.is_adult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pwid_, &from._impl_.pwid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_adult_) -
    reinterpret_cast<char*>(&_impl_.pwid_)) + sizeof(_impl_.is_adult_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetPartnerAccountLink_Response)
}

inline void CMsgGCGetPartnerAccountLink_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pwid_){0u}
    , decltype(_impl_.nexonid_){0u}
    , decltype(_impl_.ageclass_){0}
    , decltype(_impl_.id_verified_){true}
    , decltype(_impl_.is_adult_){true}
  };
}

CMsgGCGetPartnerAccountLink_Response::~CMsgGCGetPartnerAccountLink_Response() {
  // @@protoc_insertion_point(destructor:CMsgGCGetPartnerAccountLink_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCGetPartnerAccountLink_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCGetPartnerAccountLink_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCGetPartnerAccountLink_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetPartnerAccountLink_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.pwid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ageclass_) -
        reinterpret_cast<char*>(&_impl_.pwid_)) + sizeof(_impl_.ageclass_));
    _impl_.id_verified_ = true;
    _impl_.is_adult_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetPartnerAccountLink_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 pwid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pwid(&has_bits);
          _impl_.pwid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 nexonid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_nexonid(&has_bits);
          _impl_.nexonid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ageclass = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ageclass(&has_bits);
          _impl_.ageclass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool id_verified = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_id_verified(&has_bits);
          _impl_.id_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_adult = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_adult(&has_bits);
          _impl_.is_adult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCGetPartnerAccountLink_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetPartnerAccountLink_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 pwid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pwid(), target);
  }

  // optional uint32 nexonid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nexonid(), target);
  }

  // optional int32 ageclass = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ageclass(), target);
  }

  // optional bool id_verified = 4 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_id_verified(), target);
  }

  // optional bool is_adult = 5 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_adult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetPartnerAccountLink_Response)
  return target;
}

size_t CMsgGCGetPartnerAccountLink_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetPartnerAccountLink_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 pwid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pwid());
    }

    // optional uint32 nexonid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nexonid());
    }

    // optional int32 ageclass = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ageclass());
    }

    // optional bool id_verified = 4 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_adult = 5 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCGetPartnerAccountLink_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCGetPartnerAccountLink_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCGetPartnerAccountLink_Response::GetClassData() const { return &_class_data_; }


void CMsgGCGetPartnerAccountLink_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCGetPartnerAccountLink_Response*>(&to_msg);
  auto& from = static_cast<const CMsgGCGetPartnerAccountLink_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetPartnerAccountLink_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.pwid_ = from._impl_.pwid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.nexonid_ = from._impl_.nexonid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ageclass_ = from._impl_.ageclass_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.id_verified_ = from._impl_.id_verified_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_adult_ = from._impl_.is_adult_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCGetPartnerAccountLink_Response::CopyFrom(const CMsgGCGetPartnerAccountLink_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetPartnerAccountLink_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPartnerAccountLink_Response::IsInitialized() const {
  return true;
}

void CMsgGCGetPartnerAccountLink_Response::InternalSwap(CMsgGCGetPartnerAccountLink_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCGetPartnerAccountLink_Response, _impl_.ageclass_)
      + sizeof(CMsgGCGetPartnerAccountLink_Response::_impl_.ageclass_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCGetPartnerAccountLink_Response, _impl_.pwid_)>(
          reinterpret_cast<char*>(&_impl_.pwid_),
          reinterpret_cast<char*>(&other->_impl_.pwid_));
  swap(_impl_.id_verified_, other->_impl_.id_verified_);
  swap(_impl_.is_adult_, other->_impl_.is_adult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetPartnerAccountLink_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[61]);
}

// ===================================================================

class CMsgGCRoutingInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCRoutingInfo>()._impl_._has_bits_);
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fallback(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_protobuf_field(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_webapi_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCRoutingInfo::CMsgGCRoutingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCRoutingInfo)
}
CMsgGCRoutingInfo::CMsgGCRoutingInfo(const CMsgGCRoutingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCRoutingInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dir_index_){from._impl_.dir_index_}
    , decltype(_impl_.webapi_param_){}
    , decltype(_impl_.method_){}
    , decltype(_impl_.protobuf_field_){}
    , decltype(_impl_.fallback_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.webapi_param_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.webapi_param_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_webapi_param()) {
    _this->_impl_.webapi_param_.Set(from._internal_webapi_param(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.method_, &from._impl_.method_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fallback_) -
    reinterpret_cast<char*>(&_impl_.method_)) + sizeof(_impl_.fallback_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCRoutingInfo)
}

inline void CMsgGCRoutingInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dir_index_){arena}
    , decltype(_impl_.webapi_param_){}
    , decltype(_impl_.method_){0}
    , decltype(_impl_.protobuf_field_){0u}
    , decltype(_impl_.fallback_){1}
  };
  _impl_.webapi_param_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.webapi_param_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCRoutingInfo::~CMsgGCRoutingInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCRoutingInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCRoutingInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dir_index_.~RepeatedField();
  _impl_.webapi_param_.Destroy();
}

void CMsgGCRoutingInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCRoutingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCRoutingInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dir_index_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.webapi_param_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.method_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.protobuf_field_) -
        reinterpret_cast<char*>(&_impl_.method_)) + sizeof(_impl_.protobuf_field_));
    _impl_.fallback_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCRoutingInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 dir_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dir_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_dir_index(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCRoutingInfo.RoutingMethod method = 2 [default = RANDOM];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGCRoutingInfo_RoutingMethod_IsValid(val))) {
            _internal_set_method(static_cast<::CMsgGCRoutingInfo_RoutingMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCRoutingInfo.RoutingMethod fallback = 3 [default = DISCARD];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGCRoutingInfo_RoutingMethod_IsValid(val))) {
            _internal_set_fallback(static_cast<::CMsgGCRoutingInfo_RoutingMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 protobuf_field = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_protobuf_field(&has_bits);
          _impl_.protobuf_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string webapi_param = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_webapi_param();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCRoutingInfo.webapi_param");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCRoutingInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCRoutingInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 dir_index = 1;
  for (int i = 0, n = this->_internal_dir_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_dir_index(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgGCRoutingInfo.RoutingMethod method = 2 [default = RANDOM];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_method(), target);
  }

  // optional .CMsgGCRoutingInfo.RoutingMethod fallback = 3 [default = DISCARD];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_fallback(), target);
  }

  // optional uint32 protobuf_field = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_protobuf_field(), target);
  }

  // optional string webapi_param = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_webapi_param().data(), static_cast<int>(this->_internal_webapi_param().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCRoutingInfo.webapi_param");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_webapi_param(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCRoutingInfo)
  return target;
}

size_t CMsgGCRoutingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCRoutingInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 dir_index = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.dir_index_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_dir_index_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string webapi_param = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_webapi_param());
    }

    // optional .CMsgGCRoutingInfo.RoutingMethod method = 2 [default = RANDOM];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_method());
    }

    // optional uint32 protobuf_field = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_protobuf_field());
    }

    // optional .CMsgGCRoutingInfo.RoutingMethod fallback = 3 [default = DISCARD];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_fallback());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCRoutingInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCRoutingInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCRoutingInfo::GetClassData() const { return &_class_data_; }


void CMsgGCRoutingInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCRoutingInfo*>(&to_msg);
  auto& from = static_cast<const CMsgGCRoutingInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCRoutingInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dir_index_.MergeFrom(from._impl_.dir_index_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_webapi_param(from._internal_webapi_param());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.method_ = from._impl_.method_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.protobuf_field_ = from._impl_.protobuf_field_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.fallback_ = from._impl_.fallback_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCRoutingInfo::CopyFrom(const CMsgGCRoutingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCRoutingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRoutingInfo::IsInitialized() const {
  return true;
}

void CMsgGCRoutingInfo::InternalSwap(CMsgGCRoutingInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.dir_index_.InternalSwap(&other->_impl_.dir_index_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.webapi_param_, lhs_arena,
      &other->_impl_.webapi_param_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCRoutingInfo, _impl_.protobuf_field_)
      + sizeof(CMsgGCRoutingInfo::_impl_.protobuf_field_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCRoutingInfo, _impl_.method_)>(
          reinterpret_cast<char*>(&_impl_.method_),
          reinterpret_cast<char*>(&other->_impl_.method_));
  swap(_impl_.fallback_, other->_impl_.fallback_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCRoutingInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[62]);
}

// ===================================================================

class CMsgGCMsgMasterSetWebAPIRouting_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCMsgMasterSetWebAPIRouting_Entry>()._impl_._has_bits_);
  static void set_has_interface_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_method_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgGCRoutingInfo& routing(const CMsgGCMsgMasterSetWebAPIRouting_Entry* msg);
  static void set_has_routing(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgGCRoutingInfo&
CMsgGCMsgMasterSetWebAPIRouting_Entry::_Internal::routing(const CMsgGCMsgMasterSetWebAPIRouting_Entry* msg) {
  return *msg->_impl_.routing_;
}
CMsgGCMsgMasterSetWebAPIRouting_Entry::CMsgGCMsgMasterSetWebAPIRouting_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgMasterSetWebAPIRouting.Entry)
}
CMsgGCMsgMasterSetWebAPIRouting_Entry::CMsgGCMsgMasterSetWebAPIRouting_Entry(const CMsgGCMsgMasterSetWebAPIRouting_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCMsgMasterSetWebAPIRouting_Entry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interface_name_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.routing_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.interface_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_interface_name()) {
    _this->_impl_.interface_name_.Set(from._internal_interface_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_method_name()) {
    _this->_impl_.method_name_.Set(from._internal_method_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_routing()) {
    _this->_impl_.routing_ = new ::CMsgGCRoutingInfo(*from._impl_.routing_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgMasterSetWebAPIRouting.Entry)
}

inline void CMsgGCMsgMasterSetWebAPIRouting_Entry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interface_name_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.routing_){nullptr}
  };
  _impl_.interface_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCMsgMasterSetWebAPIRouting_Entry::~CMsgGCMsgMasterSetWebAPIRouting_Entry() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgMasterSetWebAPIRouting.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCMsgMasterSetWebAPIRouting_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.interface_name_.Destroy();
  _impl_.method_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.routing_;
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgMasterSetWebAPIRouting.Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.interface_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.method_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.routing_ != nullptr);
      _impl_.routing_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgMasterSetWebAPIRouting_Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string interface_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_interface_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string method_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_method_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCRoutingInfo routing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgMasterSetWebAPIRouting_Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgMasterSetWebAPIRouting.Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string interface_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_interface_name().data(), static_cast<int>(this->_internal_interface_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interface_name(), target);
  }

  // optional string method_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_method_name().data(), static_cast<int>(this->_internal_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_method_name(), target);
  }

  // optional .CMsgGCRoutingInfo routing = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::routing(this),
        _Internal::routing(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgMasterSetWebAPIRouting.Entry)
  return target;
}

size_t CMsgGCMsgMasterSetWebAPIRouting_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgMasterSetWebAPIRouting.Entry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string interface_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_interface_name());
    }

    // optional string method_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_method_name());
    }

    // optional .CMsgGCRoutingInfo routing = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.routing_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgMasterSetWebAPIRouting_Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCMsgMasterSetWebAPIRouting_Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgMasterSetWebAPIRouting_Entry::GetClassData() const { return &_class_data_; }


void CMsgGCMsgMasterSetWebAPIRouting_Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCMsgMasterSetWebAPIRouting_Entry*>(&to_msg);
  auto& from = static_cast<const CMsgGCMsgMasterSetWebAPIRouting_Entry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgMasterSetWebAPIRouting.Entry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_interface_name(from._internal_interface_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_method_name(from._internal_method_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_routing()->::CMsgGCRoutingInfo::MergeFrom(
          from._internal_routing());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::CopyFrom(const CMsgGCMsgMasterSetWebAPIRouting_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgMasterSetWebAPIRouting.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetWebAPIRouting_Entry::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::InternalSwap(CMsgGCMsgMasterSetWebAPIRouting_Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.interface_name_, lhs_arena,
      &other->_impl_.interface_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_name_, lhs_arena,
      &other->_impl_.method_name_, rhs_arena
  );
  swap(_impl_.routing_, other->_impl_.routing_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgMasterSetWebAPIRouting_Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[63]);
}

// ===================================================================

class CMsgGCMsgMasterSetWebAPIRouting::_Internal {
 public:
};

CMsgGCMsgMasterSetWebAPIRouting::CMsgGCMsgMasterSetWebAPIRouting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgMasterSetWebAPIRouting)
}
CMsgGCMsgMasterSetWebAPIRouting::CMsgGCMsgMasterSetWebAPIRouting(const CMsgGCMsgMasterSetWebAPIRouting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCMsgMasterSetWebAPIRouting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgMasterSetWebAPIRouting)
}

inline void CMsgGCMsgMasterSetWebAPIRouting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgGCMsgMasterSetWebAPIRouting::~CMsgGCMsgMasterSetWebAPIRouting() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgMasterSetWebAPIRouting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCMsgMasterSetWebAPIRouting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void CMsgGCMsgMasterSetWebAPIRouting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCMsgMasterSetWebAPIRouting::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgMasterSetWebAPIRouting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgMasterSetWebAPIRouting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGCMsgMasterSetWebAPIRouting.Entry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgMasterSetWebAPIRouting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgMasterSetWebAPIRouting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCMsgMasterSetWebAPIRouting.Entry entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgMasterSetWebAPIRouting)
  return target;
}

size_t CMsgGCMsgMasterSetWebAPIRouting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgMasterSetWebAPIRouting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCMsgMasterSetWebAPIRouting.Entry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgMasterSetWebAPIRouting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCMsgMasterSetWebAPIRouting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgMasterSetWebAPIRouting::GetClassData() const { return &_class_data_; }


void CMsgGCMsgMasterSetWebAPIRouting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCMsgMasterSetWebAPIRouting*>(&to_msg);
  auto& from = static_cast<const CMsgGCMsgMasterSetWebAPIRouting&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgMasterSetWebAPIRouting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgMasterSetWebAPIRouting::CopyFrom(const CMsgGCMsgMasterSetWebAPIRouting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgMasterSetWebAPIRouting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetWebAPIRouting::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetWebAPIRouting::InternalSwap(CMsgGCMsgMasterSetWebAPIRouting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgMasterSetWebAPIRouting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[64]);
}

// ===================================================================

class CMsgGCMsgMasterSetClientMsgRouting_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCMsgMasterSetClientMsgRouting_Entry>()._impl_._has_bits_);
  static void set_has_msg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgGCRoutingInfo& routing(const CMsgGCMsgMasterSetClientMsgRouting_Entry* msg);
  static void set_has_routing(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgGCRoutingInfo&
CMsgGCMsgMasterSetClientMsgRouting_Entry::_Internal::routing(const CMsgGCMsgMasterSetClientMsgRouting_Entry* msg) {
  return *msg->_impl_.routing_;
}
CMsgGCMsgMasterSetClientMsgRouting_Entry::CMsgGCMsgMasterSetClientMsgRouting_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgMasterSetClientMsgRouting.Entry)
}
CMsgGCMsgMasterSetClientMsgRouting_Entry::CMsgGCMsgMasterSetClientMsgRouting_Entry(const CMsgGCMsgMasterSetClientMsgRouting_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCMsgMasterSetClientMsgRouting_Entry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.routing_){nullptr}
    , decltype(_impl_.msg_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_routing()) {
    _this->_impl_.routing_ = new ::CMsgGCRoutingInfo(*from._impl_.routing_);
  }
  _this->_impl_.msg_type_ = from._impl_.msg_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgMasterSetClientMsgRouting.Entry)
}

inline void CMsgGCMsgMasterSetClientMsgRouting_Entry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.routing_){nullptr}
    , decltype(_impl_.msg_type_){0u}
  };
}

CMsgGCMsgMasterSetClientMsgRouting_Entry::~CMsgGCMsgMasterSetClientMsgRouting_Entry() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgMasterSetClientMsgRouting.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCMsgMasterSetClientMsgRouting_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.routing_;
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgMasterSetClientMsgRouting.Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.routing_ != nullptr);
    _impl_.routing_->Clear();
  }
  _impl_.msg_type_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgMasterSetClientMsgRouting_Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_msg_type(&has_bits);
          _impl_.msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCRoutingInfo routing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgMasterSetClientMsgRouting_Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgMasterSetClientMsgRouting.Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 msg_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msg_type(), target);
  }

  // optional .CMsgGCRoutingInfo routing = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::routing(this),
        _Internal::routing(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgMasterSetClientMsgRouting.Entry)
  return target;
}

size_t CMsgGCMsgMasterSetClientMsgRouting_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgMasterSetClientMsgRouting.Entry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgGCRoutingInfo routing = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.routing_);
    }

    // optional uint32 msg_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_msg_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgMasterSetClientMsgRouting_Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCMsgMasterSetClientMsgRouting_Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgMasterSetClientMsgRouting_Entry::GetClassData() const { return &_class_data_; }


void CMsgGCMsgMasterSetClientMsgRouting_Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCMsgMasterSetClientMsgRouting_Entry*>(&to_msg);
  auto& from = static_cast<const CMsgGCMsgMasterSetClientMsgRouting_Entry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgMasterSetClientMsgRouting.Entry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_routing()->::CMsgGCRoutingInfo::MergeFrom(
          from._internal_routing());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.msg_type_ = from._impl_.msg_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::CopyFrom(const CMsgGCMsgMasterSetClientMsgRouting_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgMasterSetClientMsgRouting.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetClientMsgRouting_Entry::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::InternalSwap(CMsgGCMsgMasterSetClientMsgRouting_Entry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCMsgMasterSetClientMsgRouting_Entry, _impl_.msg_type_)
      + sizeof(CMsgGCMsgMasterSetClientMsgRouting_Entry::_impl_.msg_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCMsgMasterSetClientMsgRouting_Entry, _impl_.routing_)>(
          reinterpret_cast<char*>(&_impl_.routing_),
          reinterpret_cast<char*>(&other->_impl_.routing_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgMasterSetClientMsgRouting_Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[65]);
}

// ===================================================================

class CMsgGCMsgMasterSetClientMsgRouting::_Internal {
 public:
};

CMsgGCMsgMasterSetClientMsgRouting::CMsgGCMsgMasterSetClientMsgRouting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgMasterSetClientMsgRouting)
}
CMsgGCMsgMasterSetClientMsgRouting::CMsgGCMsgMasterSetClientMsgRouting(const CMsgGCMsgMasterSetClientMsgRouting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCMsgMasterSetClientMsgRouting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgMasterSetClientMsgRouting)
}

inline void CMsgGCMsgMasterSetClientMsgRouting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgGCMsgMasterSetClientMsgRouting::~CMsgGCMsgMasterSetClientMsgRouting() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgMasterSetClientMsgRouting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCMsgMasterSetClientMsgRouting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void CMsgGCMsgMasterSetClientMsgRouting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCMsgMasterSetClientMsgRouting::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgMasterSetClientMsgRouting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgMasterSetClientMsgRouting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGCMsgMasterSetClientMsgRouting.Entry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgMasterSetClientMsgRouting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgMasterSetClientMsgRouting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCMsgMasterSetClientMsgRouting.Entry entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgMasterSetClientMsgRouting)
  return target;
}

size_t CMsgGCMsgMasterSetClientMsgRouting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgMasterSetClientMsgRouting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCMsgMasterSetClientMsgRouting.Entry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgMasterSetClientMsgRouting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCMsgMasterSetClientMsgRouting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgMasterSetClientMsgRouting::GetClassData() const { return &_class_data_; }


void CMsgGCMsgMasterSetClientMsgRouting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCMsgMasterSetClientMsgRouting*>(&to_msg);
  auto& from = static_cast<const CMsgGCMsgMasterSetClientMsgRouting&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgMasterSetClientMsgRouting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgMasterSetClientMsgRouting::CopyFrom(const CMsgGCMsgMasterSetClientMsgRouting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgMasterSetClientMsgRouting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetClientMsgRouting::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetClientMsgRouting::InternalSwap(CMsgGCMsgMasterSetClientMsgRouting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgMasterSetClientMsgRouting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[66]);
}

// ===================================================================

class CMsgGCMsgMasterSetWebAPIRouting_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCMsgMasterSetWebAPIRouting_Response>()._impl_._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCMsgMasterSetWebAPIRouting_Response::CMsgGCMsgMasterSetWebAPIRouting_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgMasterSetWebAPIRouting_Response)
}
CMsgGCMsgMasterSetWebAPIRouting_Response::CMsgGCMsgMasterSetWebAPIRouting_Response(const CMsgGCMsgMasterSetWebAPIRouting_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCMsgMasterSetWebAPIRouting_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eresult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.eresult_ = from._impl_.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgMasterSetWebAPIRouting_Response)
}

inline void CMsgGCMsgMasterSetWebAPIRouting_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eresult_){2}
  };
}

CMsgGCMsgMasterSetWebAPIRouting_Response::~CMsgGCMsgMasterSetWebAPIRouting_Response() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgMasterSetWebAPIRouting_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCMsgMasterSetWebAPIRouting_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgMasterSetWebAPIRouting_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.eresult_ = 2;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgMasterSetWebAPIRouting_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          _impl_.eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgMasterSetWebAPIRouting_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgMasterSetWebAPIRouting_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgMasterSetWebAPIRouting_Response)
  return target;
}

size_t CMsgGCMsgMasterSetWebAPIRouting_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgMasterSetWebAPIRouting_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgMasterSetWebAPIRouting_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCMsgMasterSetWebAPIRouting_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgMasterSetWebAPIRouting_Response::GetClassData() const { return &_class_data_; }


void CMsgGCMsgMasterSetWebAPIRouting_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCMsgMasterSetWebAPIRouting_Response*>(&to_msg);
  auto& from = static_cast<const CMsgGCMsgMasterSetWebAPIRouting_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgMasterSetWebAPIRouting_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eresult()) {
    _this->_internal_set_eresult(from._internal_eresult());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::CopyFrom(const CMsgGCMsgMasterSetWebAPIRouting_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgMasterSetWebAPIRouting_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetWebAPIRouting_Response::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::InternalSwap(CMsgGCMsgMasterSetWebAPIRouting_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.eresult_, other->_impl_.eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgMasterSetWebAPIRouting_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[67]);
}

// ===================================================================

class CMsgGCMsgMasterSetClientMsgRouting_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCMsgMasterSetClientMsgRouting_Response>()._impl_._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCMsgMasterSetClientMsgRouting_Response::CMsgGCMsgMasterSetClientMsgRouting_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgMasterSetClientMsgRouting_Response)
}
CMsgGCMsgMasterSetClientMsgRouting_Response::CMsgGCMsgMasterSetClientMsgRouting_Response(const CMsgGCMsgMasterSetClientMsgRouting_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCMsgMasterSetClientMsgRouting_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eresult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.eresult_ = from._impl_.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgMasterSetClientMsgRouting_Response)
}

inline void CMsgGCMsgMasterSetClientMsgRouting_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eresult_){2}
  };
}

CMsgGCMsgMasterSetClientMsgRouting_Response::~CMsgGCMsgMasterSetClientMsgRouting_Response() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgMasterSetClientMsgRouting_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCMsgMasterSetClientMsgRouting_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgMasterSetClientMsgRouting_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.eresult_ = 2;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgMasterSetClientMsgRouting_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          _impl_.eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgMasterSetClientMsgRouting_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgMasterSetClientMsgRouting_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgMasterSetClientMsgRouting_Response)
  return target;
}

size_t CMsgGCMsgMasterSetClientMsgRouting_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgMasterSetClientMsgRouting_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgMasterSetClientMsgRouting_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCMsgMasterSetClientMsgRouting_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgMasterSetClientMsgRouting_Response::GetClassData() const { return &_class_data_; }


void CMsgGCMsgMasterSetClientMsgRouting_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCMsgMasterSetClientMsgRouting_Response*>(&to_msg);
  auto& from = static_cast<const CMsgGCMsgMasterSetClientMsgRouting_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgMasterSetClientMsgRouting_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eresult()) {
    _this->_internal_set_eresult(from._internal_eresult());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::CopyFrom(const CMsgGCMsgMasterSetClientMsgRouting_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgMasterSetClientMsgRouting_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetClientMsgRouting_Response::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::InternalSwap(CMsgGCMsgMasterSetClientMsgRouting_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.eresult_, other->_impl_.eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgMasterSetClientMsgRouting_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[68]);
}

// ===================================================================

class CMsgGCMsgSetOptions_MessageRange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCMsgSetOptions_MessageRange>()._impl_._has_bits_);
  static void set_has_low(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_high(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CMsgGCMsgSetOptions_MessageRange::CMsgGCMsgSetOptions_MessageRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgSetOptions.MessageRange)
}
CMsgGCMsgSetOptions_MessageRange::CMsgGCMsgSetOptions_MessageRange(const CMsgGCMsgSetOptions_MessageRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCMsgSetOptions_MessageRange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.low_){}
    , decltype(_impl_.high_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.low_, &from._impl_.low_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.high_) -
    reinterpret_cast<char*>(&_impl_.low_)) + sizeof(_impl_.high_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgSetOptions.MessageRange)
}

inline void CMsgGCMsgSetOptions_MessageRange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.low_){0u}
    , decltype(_impl_.high_){0u}
  };
}

CMsgGCMsgSetOptions_MessageRange::~CMsgGCMsgSetOptions_MessageRange() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgSetOptions.MessageRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCMsgSetOptions_MessageRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCMsgSetOptions_MessageRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCMsgSetOptions_MessageRange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgSetOptions.MessageRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.low_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.high_) -
        reinterpret_cast<char*>(&_impl_.low_)) + sizeof(_impl_.high_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgSetOptions_MessageRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 low = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_low(&has_bits);
          _impl_.low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 high = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_high(&has_bits);
          _impl_.high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgSetOptions_MessageRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgSetOptions.MessageRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 low = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_low(), target);
  }

  // required uint32 high = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_high(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgSetOptions.MessageRange)
  return target;
}

size_t CMsgGCMsgSetOptions_MessageRange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMsgGCMsgSetOptions.MessageRange)
  size_t total_size = 0;

  if (_internal_has_low()) {
    // required uint32 low = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_low());
  }

  if (_internal_has_high()) {
    // required uint32 high = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_high());
  }

  return total_size;
}
size_t CMsgGCMsgSetOptions_MessageRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgSetOptions.MessageRange)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 low = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_low());

    // required uint32 high = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_high());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgSetOptions_MessageRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCMsgSetOptions_MessageRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgSetOptions_MessageRange::GetClassData() const { return &_class_data_; }


void CMsgGCMsgSetOptions_MessageRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCMsgSetOptions_MessageRange*>(&to_msg);
  auto& from = static_cast<const CMsgGCMsgSetOptions_MessageRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgSetOptions.MessageRange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.low_ = from._impl_.low_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.high_ = from._impl_.high_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgSetOptions_MessageRange::CopyFrom(const CMsgGCMsgSetOptions_MessageRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgSetOptions.MessageRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgSetOptions_MessageRange::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CMsgGCMsgSetOptions_MessageRange::InternalSwap(CMsgGCMsgSetOptions_MessageRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCMsgSetOptions_MessageRange, _impl_.high_)
      + sizeof(CMsgGCMsgSetOptions_MessageRange::_impl_.high_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCMsgSetOptions_MessageRange, _impl_.low_)>(
          reinterpret_cast<char*>(&_impl_.low_),
          reinterpret_cast<char*>(&other->_impl_.low_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgSetOptions_MessageRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[69]);
}

// ===================================================================

class CMsgGCMsgSetOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCMsgSetOptions>()._impl_._has_bits_);
  static void set_has_gcsql_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCMsgSetOptions::CMsgGCMsgSetOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgSetOptions)
}
CMsgGCMsgSetOptions::CMsgGCMsgSetOptions(const CMsgGCMsgSetOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCMsgSetOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.options_){from._impl_.options_}
    , decltype(_impl_.client_msg_ranges_){from._impl_.client_msg_ranges_}
    , decltype(_impl_.gcsql_version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gcsql_version_ = from._impl_.gcsql_version_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgSetOptions)
}

inline void CMsgGCMsgSetOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.options_){arena}
    , decltype(_impl_.client_msg_ranges_){arena}
    , decltype(_impl_.gcsql_version_){1}
  };
}

CMsgGCMsgSetOptions::~CMsgGCMsgSetOptions() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgSetOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCMsgSetOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.options_.~RepeatedField();
  _impl_.client_msg_ranges_.~RepeatedPtrField();
}

void CMsgGCMsgSetOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCMsgSetOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgSetOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.options_.Clear();
  _impl_.client_msg_ranges_.Clear();
  _impl_.gcsql_version_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgSetOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGCMsgSetOptions.Option options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::CMsgGCMsgSetOptions_Option_IsValid(val))) {
              _internal_add_options(static_cast<::CMsgGCMsgSetOptions_Option>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_options(), ptr, ctx, ::CMsgGCMsgSetOptions_Option_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCMsgSetOptions.MessageRange client_msg_ranges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_client_msg_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCMsgSetOptions.GCSQLVersion gcsql_version = 3 [default = GCSQL_VERSION_BASELINE];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGCMsgSetOptions_GCSQLVersion_IsValid(val))) {
            _internal_set_gcsql_version(static_cast<::CMsgGCMsgSetOptions_GCSQLVersion>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgSetOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgSetOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCMsgSetOptions.Option options = 1;
  for (int i = 0, n = this->_internal_options_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_options(i), target);
  }

  // repeated .CMsgGCMsgSetOptions.MessageRange client_msg_ranges = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_client_msg_ranges_size()); i < n; i++) {
    const auto& repfield = this->_internal_client_msg_ranges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgGCMsgSetOptions.GCSQLVersion gcsql_version = 3 [default = GCSQL_VERSION_BASELINE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_gcsql_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgSetOptions)
  return target;
}

size_t CMsgGCMsgSetOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgSetOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCMsgSetOptions.Option options = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_options_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_options(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .CMsgGCMsgSetOptions.MessageRange client_msg_ranges = 2;
  total_size += 1UL * this->_internal_client_msg_ranges_size();
  for (const auto& msg : this->_impl_.client_msg_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CMsgGCMsgSetOptions.GCSQLVersion gcsql_version = 3 [default = GCSQL_VERSION_BASELINE];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gcsql_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgSetOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCMsgSetOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgSetOptions::GetClassData() const { return &_class_data_; }


void CMsgGCMsgSetOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCMsgSetOptions*>(&to_msg);
  auto& from = static_cast<const CMsgGCMsgSetOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgSetOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.options_.MergeFrom(from._impl_.options_);
  _this->_impl_.client_msg_ranges_.MergeFrom(from._impl_.client_msg_ranges_);
  if (from._internal_has_gcsql_version()) {
    _this->_internal_set_gcsql_version(from._internal_gcsql_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgSetOptions::CopyFrom(const CMsgGCMsgSetOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgSetOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgSetOptions::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.client_msg_ranges_))
    return false;
  return true;
}

void CMsgGCMsgSetOptions::InternalSwap(CMsgGCMsgSetOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.options_.InternalSwap(&other->_impl_.options_);
  _impl_.client_msg_ranges_.InternalSwap(&other->_impl_.client_msg_ranges_);
  swap(_impl_.gcsql_version_, other->_impl_.gcsql_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgSetOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[70]);
}

// ===================================================================

class CMsgGCHUpdateSession_ExtraField::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHUpdateSession_ExtraField>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCHUpdateSession_ExtraField::CMsgGCHUpdateSession_ExtraField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCHUpdateSession.ExtraField)
}
CMsgGCHUpdateSession_ExtraField::CMsgGCHUpdateSession_ExtraField(const CMsgGCHUpdateSession_ExtraField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCHUpdateSession_ExtraField* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCHUpdateSession.ExtraField)
}

inline void CMsgGCHUpdateSession_ExtraField::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCHUpdateSession_ExtraField::~CMsgGCHUpdateSession_ExtraField() {
  // @@protoc_insertion_point(destructor:CMsgGCHUpdateSession.ExtraField)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCHUpdateSession_ExtraField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
}

void CMsgGCHUpdateSession_ExtraField::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCHUpdateSession_ExtraField::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHUpdateSession.ExtraField)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCHUpdateSession_ExtraField::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCHUpdateSession.ExtraField.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCHUpdateSession.ExtraField.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCHUpdateSession_ExtraField::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHUpdateSession.ExtraField)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCHUpdateSession.ExtraField.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCHUpdateSession.ExtraField.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHUpdateSession.ExtraField)
  return target;
}

size_t CMsgGCHUpdateSession_ExtraField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHUpdateSession.ExtraField)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCHUpdateSession_ExtraField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCHUpdateSession_ExtraField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCHUpdateSession_ExtraField::GetClassData() const { return &_class_data_; }


void CMsgGCHUpdateSession_ExtraField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCHUpdateSession_ExtraField*>(&to_msg);
  auto& from = static_cast<const CMsgGCHUpdateSession_ExtraField&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHUpdateSession.ExtraField)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCHUpdateSession_ExtraField::CopyFrom(const CMsgGCHUpdateSession_ExtraField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHUpdateSession.ExtraField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHUpdateSession_ExtraField::IsInitialized() const {
  return true;
}

void CMsgGCHUpdateSession_ExtraField::InternalSwap(CMsgGCHUpdateSession_ExtraField* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCHUpdateSession_ExtraField::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[71]);
}

// ===================================================================

class CMsgGCHUpdateSession::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHUpdateSession>()._impl_._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_online(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_server_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_server_port(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_os_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_client_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgGCHUpdateSession::CMsgGCHUpdateSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCHUpdateSession)
}
CMsgGCHUpdateSession::CMsgGCHUpdateSession(const CMsgGCHUpdateSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCHUpdateSession* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.extra_fields_){from._impl_.extra_fields_}
    , decltype(_impl_.steam_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.online_){}
    , decltype(_impl_.server_steam_id_){}
    , decltype(_impl_.server_addr_){}
    , decltype(_impl_.server_port_){}
    , decltype(_impl_.os_type_){}
    , decltype(_impl_.client_addr_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steam_id_, &from._impl_.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.client_addr_) -
    reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.client_addr_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCHUpdateSession)
}

inline void CMsgGCHUpdateSession::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.extra_fields_){arena}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.online_){false}
    , decltype(_impl_.server_steam_id_){uint64_t{0u}}
    , decltype(_impl_.server_addr_){0u}
    , decltype(_impl_.server_port_){0u}
    , decltype(_impl_.os_type_){0u}
    , decltype(_impl_.client_addr_){0u}
  };
}

CMsgGCHUpdateSession::~CMsgGCHUpdateSession() {
  // @@protoc_insertion_point(destructor:CMsgGCHUpdateSession)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCHUpdateSession::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extra_fields_.~RepeatedPtrField();
}

void CMsgGCHUpdateSession::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCHUpdateSession::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHUpdateSession)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extra_fields_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.client_addr_) -
        reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.client_addr_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCHUpdateSession::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool online = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_online(&has_bits);
          _impl_.online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 server_steam_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_server_steam_id(&has_bits);
          _impl_.server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_addr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_server_addr(&has_bits);
          _impl_.server_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_server_port(&has_bits);
          _impl_.server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 os_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_os_type(&has_bits);
          _impl_.os_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_addr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_client_addr(&has_bits);
          _impl_.client_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCHUpdateSession.ExtraField extra_fields = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extra_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCHUpdateSession::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHUpdateSession)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_id(), target);
  }

  // optional bool online = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_online(), target);
  }

  // optional fixed64 server_steam_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(4, this->_internal_server_steam_id(), target);
  }

  // optional uint32 server_addr = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_server_addr(), target);
  }

  // optional uint32 server_port = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_server_port(), target);
  }

  // optional uint32 os_type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_os_type(), target);
  }

  // optional uint32 client_addr = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_client_addr(), target);
  }

  // repeated .CMsgGCHUpdateSession.ExtraField extra_fields = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extra_fields_size()); i < n; i++) {
    const auto& repfield = this->_internal_extra_fields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHUpdateSession)
  return target;
}

size_t CMsgGCHUpdateSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHUpdateSession)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCHUpdateSession.ExtraField extra_fields = 9;
  total_size += 1UL * this->_internal_extra_fields_size();
  for (const auto& msg : this->_impl_.extra_fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional bool online = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional fixed64 server_steam_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 server_addr = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_addr());
    }

    // optional uint32 server_port = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_port());
    }

    // optional uint32 os_type = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_os_type());
    }

    // optional uint32 client_addr = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_addr());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCHUpdateSession::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCHUpdateSession::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCHUpdateSession::GetClassData() const { return &_class_data_; }


void CMsgGCHUpdateSession::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCHUpdateSession*>(&to_msg);
  auto& from = static_cast<const CMsgGCHUpdateSession&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHUpdateSession)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.extra_fields_.MergeFrom(from._impl_.extra_fields_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.online_ = from._impl_.online_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.server_steam_id_ = from._impl_.server_steam_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.server_addr_ = from._impl_.server_addr_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.server_port_ = from._impl_.server_port_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.os_type_ = from._impl_.os_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.client_addr_ = from._impl_.client_addr_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCHUpdateSession::CopyFrom(const CMsgGCHUpdateSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHUpdateSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHUpdateSession::IsInitialized() const {
  return true;
}

void CMsgGCHUpdateSession::InternalSwap(CMsgGCHUpdateSession* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.extra_fields_.InternalSwap(&other->_impl_.extra_fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCHUpdateSession, _impl_.client_addr_)
      + sizeof(CMsgGCHUpdateSession::_impl_.client_addr_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCHUpdateSession, _impl_.steam_id_)>(
          reinterpret_cast<char*>(&_impl_.steam_id_),
          reinterpret_cast<char*>(&other->_impl_.steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCHUpdateSession::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[72]);
}

// ===================================================================

class CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgNotificationOfSuspiciousActivity_MultipleGameInstances>()._impl_._has_bits_);
  static void set_has_app_instance_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
}
CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances(const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.other_steamids_){from._impl_.other_steamids_}
    , decltype(_impl_.app_instance_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.app_instance_count_ = from._impl_.app_instance_count_;
  // @@protoc_insertion_point(copy_constructor:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
}

inline void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.other_steamids_){arena}
    , decltype(_impl_.app_instance_count_){0u}
  };
}

CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::~CMsgNotificationOfSuspiciousActivity_MultipleGameInstances() {
  // @@protoc_insertion_point(destructor:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.other_steamids_.~RepeatedField();
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.other_steamids_.Clear();
  _impl_.app_instance_count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_instance_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_instance_count(&has_bits);
          _impl_.app_instance_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 other_steamids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_other_steamids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_other_steamids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 app_instance_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_instance_count(), target);
  }

  // repeated fixed64 other_steamids = 2;
  for (int i = 0, n = this->_internal_other_steamids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_other_steamids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  return target;
}

size_t CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 other_steamids = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_other_steamids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_other_steamids_size());
    total_size += data_size;
  }

  // optional uint32 app_instance_count = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_instance_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::GetClassData() const { return &_class_data_; }


void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgNotificationOfSuspiciousActivity_MultipleGameInstances*>(&to_msg);
  auto& from = static_cast<const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.other_steamids_.MergeFrom(from._impl_.other_steamids_);
  if (from._internal_has_app_instance_count()) {
    _this->_internal_set_app_instance_count(from._internal_app_instance_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::CopyFrom(const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::IsInitialized() const {
  return true;
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::InternalSwap(CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.other_steamids_.InternalSwap(&other->_impl_.other_steamids_);
  swap(_impl_.app_instance_count_, other->_impl_.app_instance_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[73]);
}

// ===================================================================

class CMsgNotificationOfSuspiciousActivity::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgNotificationOfSuspiciousActivity>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& multiple_instances(const CMsgNotificationOfSuspiciousActivity* msg);
  static void set_has_multiple_instances(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances&
CMsgNotificationOfSuspiciousActivity::_Internal::multiple_instances(const CMsgNotificationOfSuspiciousActivity* msg) {
  return *msg->_impl_.multiple_instances_;
}
CMsgNotificationOfSuspiciousActivity::CMsgNotificationOfSuspiciousActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgNotificationOfSuspiciousActivity)
}
CMsgNotificationOfSuspiciousActivity::CMsgNotificationOfSuspiciousActivity(const CMsgNotificationOfSuspiciousActivity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgNotificationOfSuspiciousActivity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.multiple_instances_){nullptr}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.appid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_multiple_instances()) {
    _this->_impl_.multiple_instances_ = new ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances(*from._impl_.multiple_instances_);
  }
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.appid_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.appid_));
  // @@protoc_insertion_point(copy_constructor:CMsgNotificationOfSuspiciousActivity)
}

inline void CMsgNotificationOfSuspiciousActivity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.multiple_instances_){nullptr}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.appid_){0u}
  };
}

CMsgNotificationOfSuspiciousActivity::~CMsgNotificationOfSuspiciousActivity() {
  // @@protoc_insertion_point(destructor:CMsgNotificationOfSuspiciousActivity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgNotificationOfSuspiciousActivity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.multiple_instances_;
}

void CMsgNotificationOfSuspiciousActivity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgNotificationOfSuspiciousActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgNotificationOfSuspiciousActivity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.multiple_instances_ != nullptr);
    _impl_.multiple_instances_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.appid_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.appid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgNotificationOfSuspiciousActivity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgNotificationOfSuspiciousActivity.MultipleGameInstances multiple_instances = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_multiple_instances(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgNotificationOfSuspiciousActivity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgNotificationOfSuspiciousActivity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional .CMsgNotificationOfSuspiciousActivity.MultipleGameInstances multiple_instances = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::multiple_instances(this),
        _Internal::multiple_instances(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgNotificationOfSuspiciousActivity)
  return target;
}

size_t CMsgNotificationOfSuspiciousActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgNotificationOfSuspiciousActivity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgNotificationOfSuspiciousActivity.MultipleGameInstances multiple_instances = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.multiple_instances_);
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgNotificationOfSuspiciousActivity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgNotificationOfSuspiciousActivity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgNotificationOfSuspiciousActivity::GetClassData() const { return &_class_data_; }


void CMsgNotificationOfSuspiciousActivity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgNotificationOfSuspiciousActivity*>(&to_msg);
  auto& from = static_cast<const CMsgNotificationOfSuspiciousActivity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgNotificationOfSuspiciousActivity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_multiple_instances()->::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::MergeFrom(
          from._internal_multiple_instances());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgNotificationOfSuspiciousActivity::CopyFrom(const CMsgNotificationOfSuspiciousActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgNotificationOfSuspiciousActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNotificationOfSuspiciousActivity::IsInitialized() const {
  return true;
}

void CMsgNotificationOfSuspiciousActivity::InternalSwap(CMsgNotificationOfSuspiciousActivity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgNotificationOfSuspiciousActivity, _impl_.appid_)
      + sizeof(CMsgNotificationOfSuspiciousActivity::_impl_.appid_)
      - PROTOBUF_FIELD_OFFSET(CMsgNotificationOfSuspiciousActivity, _impl_.multiple_instances_)>(
          reinterpret_cast<char*>(&_impl_.multiple_instances_),
          reinterpret_cast<char*>(&other->_impl_.multiple_instances_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgNotificationOfSuspiciousActivity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[74]);
}

// ===================================================================

class CMsgDPPartnerMicroTxns_PartnerMicroTxn::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDPPartnerMicroTxns_PartnerMicroTxn>()._impl_._has_bits_);
  static void set_has_init_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_update_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_txn_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_line_item(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tax(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_price_usd(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tax_usd(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_purchase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_steam_txn_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_region_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_ref_trans_id(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

CMsgDPPartnerMicroTxns_PartnerMicroTxn::CMsgDPPartnerMicroTxns_PartnerMicroTxn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDPPartnerMicroTxns.PartnerMicroTxn)
}
CMsgDPPartnerMicroTxns_PartnerMicroTxn::CMsgDPPartnerMicroTxns_PartnerMicroTxn(const CMsgDPPartnerMicroTxns_PartnerMicroTxn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDPPartnerMicroTxns_PartnerMicroTxn* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.country_code_){}
    , decltype(_impl_.region_code_){}
    , decltype(_impl_.init_time_){}
    , decltype(_impl_.last_update_time_){}
    , decltype(_impl_.txn_id_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.line_item_){}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.price_){}
    , decltype(_impl_.tax_){}
    , decltype(_impl_.def_index_){}
    , decltype(_impl_.purchase_type_){}
    , decltype(_impl_.price_usd_){}
    , decltype(_impl_.tax_usd_){}
    , decltype(_impl_.steam_txn_type_){}
    , decltype(_impl_.quantity_){}
    , decltype(_impl_.ref_trans_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country_code()) {
    _this->_impl_.country_code_.Set(from._internal_country_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.region_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_region_code()) {
    _this->_impl_.region_code_.Set(from._internal_region_code(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.init_time_, &from._impl_.init_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ref_trans_id_) -
    reinterpret_cast<char*>(&_impl_.init_time_)) + sizeof(_impl_.ref_trans_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDPPartnerMicroTxns.PartnerMicroTxn)
}

inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.country_code_){}
    , decltype(_impl_.region_code_){}
    , decltype(_impl_.init_time_){0u}
    , decltype(_impl_.last_update_time_){0u}
    , decltype(_impl_.txn_id_){uint64_t{0u}}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.line_item_){0u}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.price_){uint64_t{0u}}
    , decltype(_impl_.tax_){uint64_t{0u}}
    , decltype(_impl_.def_index_){0u}
    , decltype(_impl_.purchase_type_){0u}
    , decltype(_impl_.price_usd_){uint64_t{0u}}
    , decltype(_impl_.tax_usd_){uint64_t{0u}}
    , decltype(_impl_.steam_txn_type_){0u}
    , decltype(_impl_.quantity_){0}
    , decltype(_impl_.ref_trans_id_){uint64_t{0u}}
  };
  _impl_.country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.region_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDPPartnerMicroTxns_PartnerMicroTxn::~CMsgDPPartnerMicroTxns_PartnerMicroTxn() {
  // @@protoc_insertion_point(destructor:CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.country_code_.Destroy();
  _impl_.region_code_.Destroy();
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.region_code_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.init_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.item_id_) -
        reinterpret_cast<char*>(&_impl_.init_time_)) + sizeof(_impl_.item_id_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.quantity_) -
        reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.quantity_));
  }
  _impl_.ref_trans_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDPPartnerMicroTxns_PartnerMicroTxn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 init_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_init_time(&has_bits);
          _impl_.init_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_update_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_last_update_time(&has_bits);
          _impl_.last_update_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 txn_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_txn_id(&has_bits);
          _impl_.txn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 line_item = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_line_item(&has_bits);
          _impl_.line_item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 def_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_def_index(&has_bits);
          _impl_.def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_price(&has_bits);
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 tax = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_tax(&has_bits);
          _impl_.tax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 price_usd = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_price_usd(&has_bits);
          _impl_.price_usd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 tax_usd = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_tax_usd(&has_bits);
          _impl_.tax_usd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 purchase_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_purchase_type(&has_bits);
          _impl_.purchase_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 steam_txn_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_steam_txn_type(&has_bits);
          _impl_.steam_txn_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string country_code = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_country_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string region_code = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_region_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 quantity = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_quantity(&has_bits);
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 ref_trans_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_ref_trans_id(&has_bits);
          _impl_.ref_trans_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDPPartnerMicroTxns_PartnerMicroTxn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 init_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_init_time(), target);
  }

  // optional uint32 last_update_time = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_last_update_time(), target);
  }

  // optional uint64 txn_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_txn_id(), target);
  }

  // optional uint32 account_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_account_id(), target);
  }

  // optional uint32 line_item = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_line_item(), target);
  }

  // optional uint64 item_id = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_item_id(), target);
  }

  // optional uint32 def_index = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_def_index(), target);
  }

  // optional uint64 price = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_price(), target);
  }

  // optional uint64 tax = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_tax(), target);
  }

  // optional uint64 price_usd = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_price_usd(), target);
  }

  // optional uint64 tax_usd = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_tax_usd(), target);
  }

  // optional uint32 purchase_type = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_purchase_type(), target);
  }

  // optional uint32 steam_txn_type = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_steam_txn_type(), target);
  }

  // optional string country_code = 14;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_country_code(), target);
  }

  // optional string region_code = 15;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_region_code().data(), static_cast<int>(this->_internal_region_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_region_code(), target);
  }

  // optional int32 quantity = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_quantity(), target);
  }

  // optional uint64 ref_trans_id = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_ref_trans_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  return target;
}

size_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string country_code = 14;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional string region_code = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_region_code());
    }

    // optional uint32 init_time = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_init_time());
    }

    // optional uint32 last_update_time = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_update_time());
    }

    // optional uint64 txn_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_txn_id());
    }

    // optional uint32 account_id = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 line_item = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_line_item());
    }

    // optional uint64 item_id = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 price = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_price());
    }

    // optional uint64 tax = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tax());
    }

    // optional uint32 def_index = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_def_index());
    }

    // optional uint32 purchase_type = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_purchase_type());
    }

    // optional uint64 price_usd = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_price_usd());
    }

    // optional uint64 tax_usd = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tax_usd());
    }

    // optional uint32 steam_txn_type = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_steam_txn_type());
    }

    // optional int32 quantity = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_quantity());
    }

  }
  // optional uint64 ref_trans_id = 17;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_ref_trans_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDPPartnerMicroTxns_PartnerMicroTxn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDPPartnerMicroTxns_PartnerMicroTxn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDPPartnerMicroTxns_PartnerMicroTxn::GetClassData() const { return &_class_data_; }


void CMsgDPPartnerMicroTxns_PartnerMicroTxn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDPPartnerMicroTxns_PartnerMicroTxn*>(&to_msg);
  auto& from = static_cast<const CMsgDPPartnerMicroTxns_PartnerMicroTxn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_region_code(from._internal_region_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.init_time_ = from._impl_.init_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.last_update_time_ = from._impl_.last_update_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.txn_id_ = from._impl_.txn_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.line_item_ = from._impl_.line_item_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.price_ = from._impl_.price_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tax_ = from._impl_.tax_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.def_index_ = from._impl_.def_index_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.purchase_type_ = from._impl_.purchase_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.price_usd_ = from._impl_.price_usd_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tax_usd_ = from._impl_.tax_usd_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.steam_txn_type_ = from._impl_.steam_txn_type_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.quantity_ = from._impl_.quantity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_internal_set_ref_trans_id(from._internal_ref_trans_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::CopyFrom(const CMsgDPPartnerMicroTxns_PartnerMicroTxn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::IsInitialized() const {
  return true;
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::InternalSwap(CMsgDPPartnerMicroTxns_PartnerMicroTxn* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_code_, lhs_arena,
      &other->_impl_.country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_code_, lhs_arena,
      &other->_impl_.region_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerMicroTxn, _impl_.ref_trans_id_)
      + sizeof(CMsgDPPartnerMicroTxns_PartnerMicroTxn::_impl_.ref_trans_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerMicroTxn, _impl_.init_time_)>(
          reinterpret_cast<char*>(&_impl_.init_time_),
          reinterpret_cast<char*>(&other->_impl_.init_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDPPartnerMicroTxns_PartnerMicroTxn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[75]);
}

// ===================================================================

class CMsgDPPartnerMicroTxns_PartnerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDPPartnerMicroTxns_PartnerInfo>()._impl_._has_bits_);
  static void set_has_partner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_partner_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_currency_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_currency_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDPPartnerMicroTxns_PartnerInfo::CMsgDPPartnerMicroTxns_PartnerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDPPartnerMicroTxns.PartnerInfo)
}
CMsgDPPartnerMicroTxns_PartnerInfo::CMsgDPPartnerMicroTxns_PartnerInfo(const CMsgDPPartnerMicroTxns_PartnerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDPPartnerMicroTxns_PartnerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.partner_name_){}
    , decltype(_impl_.currency_code_){}
    , decltype(_impl_.currency_name_){}
    , decltype(_impl_.partner_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.partner_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partner_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_partner_name()) {
    _this->_impl_.partner_name_.Set(from._internal_partner_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currency_code()) {
    _this->_impl_.currency_code_.Set(from._internal_currency_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currency_name()) {
    _this->_impl_.currency_name_.Set(from._internal_currency_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.partner_id_ = from._impl_.partner_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDPPartnerMicroTxns.PartnerInfo)
}

inline void CMsgDPPartnerMicroTxns_PartnerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.partner_name_){}
    , decltype(_impl_.currency_code_){}
    , decltype(_impl_.currency_name_){}
    , decltype(_impl_.partner_id_){0u}
  };
  _impl_.partner_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partner_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDPPartnerMicroTxns_PartnerInfo::~CMsgDPPartnerMicroTxns_PartnerInfo() {
  // @@protoc_insertion_point(destructor:CMsgDPPartnerMicroTxns.PartnerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDPPartnerMicroTxns_PartnerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partner_name_.Destroy();
  _impl_.currency_code_.Destroy();
  _impl_.currency_name_.Destroy();
}

void CMsgDPPartnerMicroTxns_PartnerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDPPartnerMicroTxns_PartnerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDPPartnerMicroTxns.PartnerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.partner_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.currency_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.currency_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.partner_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDPPartnerMicroTxns_PartnerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 partner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_partner_id(&has_bits);
          _impl_.partner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string partner_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_partner_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDPPartnerMicroTxns.PartnerInfo.partner_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string currency_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_currency_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDPPartnerMicroTxns.PartnerInfo.currency_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string currency_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_currency_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDPPartnerMicroTxns.PartnerInfo.currency_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDPPartnerMicroTxns_PartnerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDPPartnerMicroTxns.PartnerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 partner_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_partner_id(), target);
  }

  // optional string partner_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_partner_name().data(), static_cast<int>(this->_internal_partner_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDPPartnerMicroTxns.PartnerInfo.partner_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_partner_name(), target);
  }

  // optional string currency_code = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency_code().data(), static_cast<int>(this->_internal_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDPPartnerMicroTxns.PartnerInfo.currency_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_currency_code(), target);
  }

  // optional string currency_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency_name().data(), static_cast<int>(this->_internal_currency_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDPPartnerMicroTxns.PartnerInfo.currency_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_currency_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDPPartnerMicroTxns.PartnerInfo)
  return target;
}

size_t CMsgDPPartnerMicroTxns_PartnerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDPPartnerMicroTxns.PartnerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string partner_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_partner_name());
    }

    // optional string currency_code = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency_code());
    }

    // optional string currency_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency_name());
    }

    // optional uint32 partner_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_partner_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDPPartnerMicroTxns_PartnerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDPPartnerMicroTxns_PartnerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDPPartnerMicroTxns_PartnerInfo::GetClassData() const { return &_class_data_; }


void CMsgDPPartnerMicroTxns_PartnerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDPPartnerMicroTxns_PartnerInfo*>(&to_msg);
  auto& from = static_cast<const CMsgDPPartnerMicroTxns_PartnerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDPPartnerMicroTxns.PartnerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_partner_name(from._internal_partner_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_currency_code(from._internal_currency_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_currency_name(from._internal_currency_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.partner_id_ = from._impl_.partner_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDPPartnerMicroTxns_PartnerInfo::CopyFrom(const CMsgDPPartnerMicroTxns_PartnerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDPPartnerMicroTxns.PartnerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDPPartnerMicroTxns_PartnerInfo::IsInitialized() const {
  return true;
}

void CMsgDPPartnerMicroTxns_PartnerInfo::InternalSwap(CMsgDPPartnerMicroTxns_PartnerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partner_name_, lhs_arena,
      &other->_impl_.partner_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_code_, lhs_arena,
      &other->_impl_.currency_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_name_, lhs_arena,
      &other->_impl_.currency_name_, rhs_arena
  );
  swap(_impl_.partner_id_, other->_impl_.partner_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDPPartnerMicroTxns_PartnerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[76]);
}

// ===================================================================

class CMsgDPPartnerMicroTxns::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDPPartnerMicroTxns>()._impl_._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gc_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgDPPartnerMicroTxns_PartnerInfo& partner(const CMsgDPPartnerMicroTxns* msg);
  static void set_has_partner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgDPPartnerMicroTxns_PartnerInfo&
CMsgDPPartnerMicroTxns::_Internal::partner(const CMsgDPPartnerMicroTxns* msg) {
  return *msg->_impl_.partner_;
}
CMsgDPPartnerMicroTxns::CMsgDPPartnerMicroTxns(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDPPartnerMicroTxns)
}
CMsgDPPartnerMicroTxns::CMsgDPPartnerMicroTxns(const CMsgDPPartnerMicroTxns& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDPPartnerMicroTxns* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transactions_){from._impl_.transactions_}
    , decltype(_impl_.gc_name_){}
    , decltype(_impl_.partner_){nullptr}
    , decltype(_impl_.appid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.gc_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gc_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gc_name()) {
    _this->_impl_.gc_name_.Set(from._internal_gc_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_partner()) {
    _this->_impl_.partner_ = new ::CMsgDPPartnerMicroTxns_PartnerInfo(*from._impl_.partner_);
  }
  _this->_impl_.appid_ = from._impl_.appid_;
  // @@protoc_insertion_point(copy_constructor:CMsgDPPartnerMicroTxns)
}

inline void CMsgDPPartnerMicroTxns::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transactions_){arena}
    , decltype(_impl_.gc_name_){}
    , decltype(_impl_.partner_){nullptr}
    , decltype(_impl_.appid_){0u}
  };
  _impl_.gc_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gc_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDPPartnerMicroTxns::~CMsgDPPartnerMicroTxns() {
  // @@protoc_insertion_point(destructor:CMsgDPPartnerMicroTxns)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDPPartnerMicroTxns::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transactions_.~RepeatedPtrField();
  _impl_.gc_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.partner_;
}

void CMsgDPPartnerMicroTxns::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDPPartnerMicroTxns::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDPPartnerMicroTxns)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transactions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.gc_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.partner_ != nullptr);
      _impl_.partner_->Clear();
    }
  }
  _impl_.appid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDPPartnerMicroTxns::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string gc_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_gc_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDPPartnerMicroTxns.gc_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDPPartnerMicroTxns.PartnerInfo partner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_partner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDPPartnerMicroTxns.PartnerMicroTxn transactions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDPPartnerMicroTxns::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDPPartnerMicroTxns)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string gc_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gc_name().data(), static_cast<int>(this->_internal_gc_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDPPartnerMicroTxns.gc_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gc_name(), target);
  }

  // optional .CMsgDPPartnerMicroTxns.PartnerInfo partner = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::partner(this),
        _Internal::partner(this).GetCachedSize(), target, stream);
  }

  // repeated .CMsgDPPartnerMicroTxns.PartnerMicroTxn transactions = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_transactions_size()); i < n; i++) {
    const auto& repfield = this->_internal_transactions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDPPartnerMicroTxns)
  return target;
}

size_t CMsgDPPartnerMicroTxns::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDPPartnerMicroTxns)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDPPartnerMicroTxns.PartnerMicroTxn transactions = 4;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->_impl_.transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string gc_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gc_name());
    }

    // optional .CMsgDPPartnerMicroTxns.PartnerInfo partner = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.partner_);
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDPPartnerMicroTxns::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDPPartnerMicroTxns::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDPPartnerMicroTxns::GetClassData() const { return &_class_data_; }


void CMsgDPPartnerMicroTxns::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDPPartnerMicroTxns*>(&to_msg);
  auto& from = static_cast<const CMsgDPPartnerMicroTxns&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDPPartnerMicroTxns)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.transactions_.MergeFrom(from._impl_.transactions_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_gc_name(from._internal_gc_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_partner()->::CMsgDPPartnerMicroTxns_PartnerInfo::MergeFrom(
          from._internal_partner());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDPPartnerMicroTxns::CopyFrom(const CMsgDPPartnerMicroTxns& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDPPartnerMicroTxns)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDPPartnerMicroTxns::IsInitialized() const {
  return true;
}

void CMsgDPPartnerMicroTxns::InternalSwap(CMsgDPPartnerMicroTxns* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.transactions_.InternalSwap(&other->_impl_.transactions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gc_name_, lhs_arena,
      &other->_impl_.gc_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDPPartnerMicroTxns, _impl_.appid_)
      + sizeof(CMsgDPPartnerMicroTxns::_impl_.appid_)
      - PROTOBUF_FIELD_OFFSET(CMsgDPPartnerMicroTxns, _impl_.partner_)>(
          reinterpret_cast<char*>(&_impl_.partner_),
          reinterpret_cast<char*>(&other->_impl_.partner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDPPartnerMicroTxns::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[77]);
}

// ===================================================================

class CMsgDPPartnerMicroTxnsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDPPartnerMicroTxnsResponse>()._impl_._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eerrorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDPPartnerMicroTxnsResponse::CMsgDPPartnerMicroTxnsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDPPartnerMicroTxnsResponse)
}
CMsgDPPartnerMicroTxnsResponse::CMsgDPPartnerMicroTxnsResponse(const CMsgDPPartnerMicroTxnsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDPPartnerMicroTxnsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eerrorcode_){}
    , decltype(_impl_.eresult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.eerrorcode_, &from._impl_.eerrorcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.eresult_) -
    reinterpret_cast<char*>(&_impl_.eerrorcode_)) + sizeof(_impl_.eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgDPPartnerMicroTxnsResponse)
}

inline void CMsgDPPartnerMicroTxnsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eerrorcode_){0}
    , decltype(_impl_.eresult_){2u}
  };
}

CMsgDPPartnerMicroTxnsResponse::~CMsgDPPartnerMicroTxnsResponse() {
  // @@protoc_insertion_point(destructor:CMsgDPPartnerMicroTxnsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDPPartnerMicroTxnsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDPPartnerMicroTxnsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDPPartnerMicroTxnsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDPPartnerMicroTxnsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.eerrorcode_ = 0;
    _impl_.eresult_ = 2u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDPPartnerMicroTxnsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          _impl_.eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDPPartnerMicroTxnsResponse.EErrorCode eerrorcode = 2 [default = k_MsgValid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDPPartnerMicroTxnsResponse_EErrorCode_IsValid(val))) {
            _internal_set_eerrorcode(static_cast<::CMsgDPPartnerMicroTxnsResponse_EErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDPPartnerMicroTxnsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDPPartnerMicroTxnsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional .CMsgDPPartnerMicroTxnsResponse.EErrorCode eerrorcode = 2 [default = k_MsgValid];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_eerrorcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDPPartnerMicroTxnsResponse)
  return target;
}

size_t CMsgDPPartnerMicroTxnsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDPPartnerMicroTxnsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgDPPartnerMicroTxnsResponse.EErrorCode eerrorcode = 2 [default = k_MsgValid];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_eerrorcode());
    }

    // optional uint32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDPPartnerMicroTxnsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDPPartnerMicroTxnsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDPPartnerMicroTxnsResponse::GetClassData() const { return &_class_data_; }


void CMsgDPPartnerMicroTxnsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDPPartnerMicroTxnsResponse*>(&to_msg);
  auto& from = static_cast<const CMsgDPPartnerMicroTxnsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDPPartnerMicroTxnsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.eerrorcode_ = from._impl_.eerrorcode_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.eresult_ = from._impl_.eresult_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDPPartnerMicroTxnsResponse::CopyFrom(const CMsgDPPartnerMicroTxnsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDPPartnerMicroTxnsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDPPartnerMicroTxnsResponse::IsInitialized() const {
  return true;
}

void CMsgDPPartnerMicroTxnsResponse::InternalSwap(CMsgDPPartnerMicroTxnsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.eerrorcode_, other->_impl_.eerrorcode_);
  swap(_impl_.eresult_, other->_impl_.eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDPPartnerMicroTxnsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[78]);
}

// ===================================================================

class CMsgGCHVacVerificationChange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHVacVerificationChange>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCHVacVerificationChange::CMsgGCHVacVerificationChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCHVacVerificationChange)
}
CMsgGCHVacVerificationChange::CMsgGCHVacVerificationChange(const CMsgGCHVacVerificationChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCHVacVerificationChange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.is_verified_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_verified_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.is_verified_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCHVacVerificationChange)
}

inline void CMsgGCHVacVerificationChange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.appid_){0u}
    , decltype(_impl_.is_verified_){false}
  };
}

CMsgGCHVacVerificationChange::~CMsgGCHVacVerificationChange() {
  // @@protoc_insertion_point(destructor:CMsgGCHVacVerificationChange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCHVacVerificationChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCHVacVerificationChange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCHVacVerificationChange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHVacVerificationChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_verified_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.is_verified_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCHVacVerificationChange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_verified = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_verified(&has_bits);
          _impl_.is_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCHVacVerificationChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHVacVerificationChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional bool is_verified = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_verified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHVacVerificationChange)
  return target;
}

size_t CMsgGCHVacVerificationChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHVacVerificationChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool is_verified = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCHVacVerificationChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCHVacVerificationChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCHVacVerificationChange::GetClassData() const { return &_class_data_; }


void CMsgGCHVacVerificationChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCHVacVerificationChange*>(&to_msg);
  auto& from = static_cast<const CMsgGCHVacVerificationChange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHVacVerificationChange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_verified_ = from._impl_.is_verified_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCHVacVerificationChange::CopyFrom(const CMsgGCHVacVerificationChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHVacVerificationChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHVacVerificationChange::IsInitialized() const {
  return true;
}

void CMsgGCHVacVerificationChange::InternalSwap(CMsgGCHVacVerificationChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCHVacVerificationChange, _impl_.is_verified_)
      + sizeof(CMsgGCHVacVerificationChange::_impl_.is_verified_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCHVacVerificationChange, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCHVacVerificationChange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[79]);
}

// ===================================================================

class CMsgGCHAccountTwoFactorChange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHAccountTwoFactorChange>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_twofactor_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCHAccountTwoFactorChange::CMsgGCHAccountTwoFactorChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCHAccountTwoFactorChange)
}
CMsgGCHAccountTwoFactorChange::CMsgGCHAccountTwoFactorChange(const CMsgGCHAccountTwoFactorChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCHAccountTwoFactorChange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.twofactor_enabled_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.twofactor_enabled_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.twofactor_enabled_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCHAccountTwoFactorChange)
}

inline void CMsgGCHAccountTwoFactorChange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.appid_){0u}
    , decltype(_impl_.twofactor_enabled_){false}
  };
}

CMsgGCHAccountTwoFactorChange::~CMsgGCHAccountTwoFactorChange() {
  // @@protoc_insertion_point(destructor:CMsgGCHAccountTwoFactorChange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCHAccountTwoFactorChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCHAccountTwoFactorChange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCHAccountTwoFactorChange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHAccountTwoFactorChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.twofactor_enabled_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.twofactor_enabled_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCHAccountTwoFactorChange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool twofactor_enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_twofactor_enabled(&has_bits);
          _impl_.twofactor_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCHAccountTwoFactorChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHAccountTwoFactorChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional bool twofactor_enabled = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_twofactor_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHAccountTwoFactorChange)
  return target;
}

size_t CMsgGCHAccountTwoFactorChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHAccountTwoFactorChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool twofactor_enabled = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCHAccountTwoFactorChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCHAccountTwoFactorChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCHAccountTwoFactorChange::GetClassData() const { return &_class_data_; }


void CMsgGCHAccountTwoFactorChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCHAccountTwoFactorChange*>(&to_msg);
  auto& from = static_cast<const CMsgGCHAccountTwoFactorChange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHAccountTwoFactorChange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.twofactor_enabled_ = from._impl_.twofactor_enabled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCHAccountTwoFactorChange::CopyFrom(const CMsgGCHAccountTwoFactorChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHAccountTwoFactorChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHAccountTwoFactorChange::IsInitialized() const {
  return true;
}

void CMsgGCHAccountTwoFactorChange::InternalSwap(CMsgGCHAccountTwoFactorChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCHAccountTwoFactorChange, _impl_.twofactor_enabled_)
      + sizeof(CMsgGCHAccountTwoFactorChange::_impl_.twofactor_enabled_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCHAccountTwoFactorChange, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCHAccountTwoFactorChange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[80]);
}

// ===================================================================

class CMsgGCCheckClanMembership::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCheckClanMembership>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clanid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCheckClanMembership::CMsgGCCheckClanMembership(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCheckClanMembership)
}
CMsgGCCheckClanMembership::CMsgGCCheckClanMembership(const CMsgGCCheckClanMembership& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCheckClanMembership* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.clanid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clanid_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.clanid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCheckClanMembership)
}

inline void CMsgGCCheckClanMembership::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.clanid_){0u}
  };
}

CMsgGCCheckClanMembership::~CMsgGCCheckClanMembership() {
  // @@protoc_insertion_point(destructor:CMsgGCCheckClanMembership)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCheckClanMembership::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCheckClanMembership::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCheckClanMembership::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCheckClanMembership)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.clanid_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.clanid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCheckClanMembership::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 clanid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_clanid(&has_bits);
          _impl_.clanid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCheckClanMembership::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCheckClanMembership)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 clanid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_clanid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCheckClanMembership)
  return target;
}

size_t CMsgGCCheckClanMembership::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCheckClanMembership)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 clanid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_clanid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCheckClanMembership::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCheckClanMembership::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCheckClanMembership::GetClassData() const { return &_class_data_; }


void CMsgGCCheckClanMembership::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCheckClanMembership*>(&to_msg);
  auto& from = static_cast<const CMsgGCCheckClanMembership&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCheckClanMembership)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.clanid_ = from._impl_.clanid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCheckClanMembership::CopyFrom(const CMsgGCCheckClanMembership& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCheckClanMembership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCheckClanMembership::IsInitialized() const {
  return true;
}

void CMsgGCCheckClanMembership::InternalSwap(CMsgGCCheckClanMembership* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCheckClanMembership, _impl_.clanid_)
      + sizeof(CMsgGCCheckClanMembership::_impl_.clanid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCheckClanMembership, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCheckClanMembership::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[81]);
}

// ===================================================================

class CMsgGCCheckClanMembership_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCheckClanMembership_Response>()._impl_._has_bits_);
  static void set_has_ismember(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCheckClanMembership_Response::CMsgGCCheckClanMembership_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCheckClanMembership_Response)
}
CMsgGCCheckClanMembership_Response::CMsgGCCheckClanMembership_Response(const CMsgGCCheckClanMembership_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCheckClanMembership_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ismember_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ismember_ = from._impl_.ismember_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCheckClanMembership_Response)
}

inline void CMsgGCCheckClanMembership_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ismember_){false}
  };
}

CMsgGCCheckClanMembership_Response::~CMsgGCCheckClanMembership_Response() {
  // @@protoc_insertion_point(destructor:CMsgGCCheckClanMembership_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCheckClanMembership_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCheckClanMembership_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCheckClanMembership_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCheckClanMembership_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ismember_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCheckClanMembership_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool ismember = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ismember(&has_bits);
          _impl_.ismember_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCheckClanMembership_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCheckClanMembership_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool ismember = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ismember(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCheckClanMembership_Response)
  return target;
}

size_t CMsgGCCheckClanMembership_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCheckClanMembership_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool ismember = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCheckClanMembership_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCheckClanMembership_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCheckClanMembership_Response::GetClassData() const { return &_class_data_; }


void CMsgGCCheckClanMembership_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCheckClanMembership_Response*>(&to_msg);
  auto& from = static_cast<const CMsgGCCheckClanMembership_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCheckClanMembership_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ismember()) {
    _this->_internal_set_ismember(from._internal_ismember());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCheckClanMembership_Response::CopyFrom(const CMsgGCCheckClanMembership_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCheckClanMembership_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCheckClanMembership_Response::IsInitialized() const {
  return true;
}

void CMsgGCCheckClanMembership_Response::InternalSwap(CMsgGCCheckClanMembership_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.ismember_, other->_impl_.ismember_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCheckClanMembership_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[82]);
}

// ===================================================================

class CMsgGCHAppCheersReceived_CheerTypeAmount::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHAppCheersReceived_CheerTypeAmount>()._impl_._has_bits_);
  static void set_has_cheer_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cheer_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCHAppCheersReceived_CheerTypeAmount::CMsgGCHAppCheersReceived_CheerTypeAmount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCHAppCheersReceived.CheerTypeAmount)
}
CMsgGCHAppCheersReceived_CheerTypeAmount::CMsgGCHAppCheersReceived_CheerTypeAmount(const CMsgGCHAppCheersReceived_CheerTypeAmount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCHAppCheersReceived_CheerTypeAmount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheer_type_){}
    , decltype(_impl_.cheer_amount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cheer_type_, &from._impl_.cheer_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cheer_amount_) -
    reinterpret_cast<char*>(&_impl_.cheer_type_)) + sizeof(_impl_.cheer_amount_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCHAppCheersReceived.CheerTypeAmount)
}

inline void CMsgGCHAppCheersReceived_CheerTypeAmount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheer_type_){0u}
    , decltype(_impl_.cheer_amount_){0u}
  };
}

CMsgGCHAppCheersReceived_CheerTypeAmount::~CMsgGCHAppCheersReceived_CheerTypeAmount() {
  // @@protoc_insertion_point(destructor:CMsgGCHAppCheersReceived.CheerTypeAmount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCHAppCheersReceived_CheerTypeAmount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCHAppCheersReceived_CheerTypeAmount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCHAppCheersReceived_CheerTypeAmount::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHAppCheersReceived.CheerTypeAmount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.cheer_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cheer_amount_) -
        reinterpret_cast<char*>(&_impl_.cheer_type_)) + sizeof(_impl_.cheer_amount_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCHAppCheersReceived_CheerTypeAmount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cheer_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cheer_type(&has_bits);
          _impl_.cheer_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cheer_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cheer_amount(&has_bits);
          _impl_.cheer_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCHAppCheersReceived_CheerTypeAmount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHAppCheersReceived.CheerTypeAmount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 cheer_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cheer_type(), target);
  }

  // optional uint32 cheer_amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cheer_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHAppCheersReceived.CheerTypeAmount)
  return target;
}

size_t CMsgGCHAppCheersReceived_CheerTypeAmount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHAppCheersReceived.CheerTypeAmount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 cheer_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cheer_type());
    }

    // optional uint32 cheer_amount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cheer_amount());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCHAppCheersReceived_CheerTypeAmount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCHAppCheersReceived_CheerTypeAmount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCHAppCheersReceived_CheerTypeAmount::GetClassData() const { return &_class_data_; }


void CMsgGCHAppCheersReceived_CheerTypeAmount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCHAppCheersReceived_CheerTypeAmount*>(&to_msg);
  auto& from = static_cast<const CMsgGCHAppCheersReceived_CheerTypeAmount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHAppCheersReceived.CheerTypeAmount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cheer_type_ = from._impl_.cheer_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cheer_amount_ = from._impl_.cheer_amount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCHAppCheersReceived_CheerTypeAmount::CopyFrom(const CMsgGCHAppCheersReceived_CheerTypeAmount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHAppCheersReceived.CheerTypeAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHAppCheersReceived_CheerTypeAmount::IsInitialized() const {
  return true;
}

void CMsgGCHAppCheersReceived_CheerTypeAmount::InternalSwap(CMsgGCHAppCheersReceived_CheerTypeAmount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCHAppCheersReceived_CheerTypeAmount, _impl_.cheer_amount_)
      + sizeof(CMsgGCHAppCheersReceived_CheerTypeAmount::_impl_.cheer_amount_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCHAppCheersReceived_CheerTypeAmount, _impl_.cheer_type_)>(
          reinterpret_cast<char*>(&_impl_.cheer_type_),
          reinterpret_cast<char*>(&other->_impl_.cheer_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCHAppCheersReceived_CheerTypeAmount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[83]);
}

// ===================================================================

class CMsgGCHAppCheersReceived_CheerTarget::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHAppCheersReceived_CheerTarget>()._impl_._has_bits_);
  static void set_has_cheer_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCHAppCheersReceived_CheerTarget::CMsgGCHAppCheersReceived_CheerTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCHAppCheersReceived.CheerTarget)
}
CMsgGCHAppCheersReceived_CheerTarget::CMsgGCHAppCheersReceived_CheerTarget(const CMsgGCHAppCheersReceived_CheerTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCHAppCheersReceived_CheerTarget* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheer_types_){from._impl_.cheer_types_}
    , decltype(_impl_.cheer_target_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.cheer_target_ = from._impl_.cheer_target_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCHAppCheersReceived.CheerTarget)
}

inline void CMsgGCHAppCheersReceived_CheerTarget::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheer_types_){arena}
    , decltype(_impl_.cheer_target_){uint64_t{0u}}
  };
}

CMsgGCHAppCheersReceived_CheerTarget::~CMsgGCHAppCheersReceived_CheerTarget() {
  // @@protoc_insertion_point(destructor:CMsgGCHAppCheersReceived.CheerTarget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCHAppCheersReceived_CheerTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cheer_types_.~RepeatedPtrField();
}

void CMsgGCHAppCheersReceived_CheerTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCHAppCheersReceived_CheerTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHAppCheersReceived.CheerTarget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cheer_types_.Clear();
  _impl_.cheer_target_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCHAppCheersReceived_CheerTarget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 cheer_target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cheer_target(&has_bits);
          _impl_.cheer_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCHAppCheersReceived.CheerTypeAmount cheer_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cheer_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCHAppCheersReceived_CheerTarget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHAppCheersReceived.CheerTarget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 cheer_target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_cheer_target(), target);
  }

  // repeated .CMsgGCHAppCheersReceived.CheerTypeAmount cheer_types = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cheer_types_size()); i < n; i++) {
    const auto& repfield = this->_internal_cheer_types(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHAppCheersReceived.CheerTarget)
  return target;
}

size_t CMsgGCHAppCheersReceived_CheerTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHAppCheersReceived.CheerTarget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCHAppCheersReceived.CheerTypeAmount cheer_types = 2;
  total_size += 1UL * this->_internal_cheer_types_size();
  for (const auto& msg : this->_impl_.cheer_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 cheer_target = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cheer_target());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCHAppCheersReceived_CheerTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCHAppCheersReceived_CheerTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCHAppCheersReceived_CheerTarget::GetClassData() const { return &_class_data_; }


void CMsgGCHAppCheersReceived_CheerTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCHAppCheersReceived_CheerTarget*>(&to_msg);
  auto& from = static_cast<const CMsgGCHAppCheersReceived_CheerTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHAppCheersReceived.CheerTarget)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cheer_types_.MergeFrom(from._impl_.cheer_types_);
  if (from._internal_has_cheer_target()) {
    _this->_internal_set_cheer_target(from._internal_cheer_target());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCHAppCheersReceived_CheerTarget::CopyFrom(const CMsgGCHAppCheersReceived_CheerTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHAppCheersReceived.CheerTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHAppCheersReceived_CheerTarget::IsInitialized() const {
  return true;
}

void CMsgGCHAppCheersReceived_CheerTarget::InternalSwap(CMsgGCHAppCheersReceived_CheerTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cheer_types_.InternalSwap(&other->_impl_.cheer_types_);
  swap(_impl_.cheer_target_, other->_impl_.cheer_target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCHAppCheersReceived_CheerTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[84]);
}

// ===================================================================

class CMsgGCHAppCheersReceived::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHAppCheersReceived>()._impl_._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCHAppCheersReceived::CMsgGCHAppCheersReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCHAppCheersReceived)
}
CMsgGCHAppCheersReceived::CMsgGCHAppCheersReceived(const CMsgGCHAppCheersReceived& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCHAppCheersReceived* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheer_targets_){from._impl_.cheer_targets_}
    , decltype(_impl_.appid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.appid_ = from._impl_.appid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCHAppCheersReceived)
}

inline void CMsgGCHAppCheersReceived::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheer_targets_){arena}
    , decltype(_impl_.appid_){0u}
  };
}

CMsgGCHAppCheersReceived::~CMsgGCHAppCheersReceived() {
  // @@protoc_insertion_point(destructor:CMsgGCHAppCheersReceived)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCHAppCheersReceived::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cheer_targets_.~RepeatedPtrField();
}

void CMsgGCHAppCheersReceived::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCHAppCheersReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHAppCheersReceived)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cheer_targets_.Clear();
  _impl_.appid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCHAppCheersReceived::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCHAppCheersReceived.CheerTarget cheer_targets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cheer_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCHAppCheersReceived::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHAppCheersReceived)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // repeated .CMsgGCHAppCheersReceived.CheerTarget cheer_targets = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cheer_targets_size()); i < n; i++) {
    const auto& repfield = this->_internal_cheer_targets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHAppCheersReceived)
  return target;
}

size_t CMsgGCHAppCheersReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHAppCheersReceived)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCHAppCheersReceived.CheerTarget cheer_targets = 2;
  total_size += 1UL * this->_internal_cheer_targets_size();
  for (const auto& msg : this->_impl_.cheer_targets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 appid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCHAppCheersReceived::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCHAppCheersReceived::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCHAppCheersReceived::GetClassData() const { return &_class_data_; }


void CMsgGCHAppCheersReceived::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCHAppCheersReceived*>(&to_msg);
  auto& from = static_cast<const CMsgGCHAppCheersReceived&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHAppCheersReceived)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cheer_targets_.MergeFrom(from._impl_.cheer_targets_);
  if (from._internal_has_appid()) {
    _this->_internal_set_appid(from._internal_appid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCHAppCheersReceived::CopyFrom(const CMsgGCHAppCheersReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHAppCheersReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHAppCheersReceived::IsInitialized() const {
  return true;
}

void CMsgGCHAppCheersReceived::InternalSwap(CMsgGCHAppCheersReceived* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cheer_targets_.InternalSwap(&other->_impl_.cheer_targets_);
  swap(_impl_.appid_, other->_impl_.appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCHAppCheersReceived::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[85]);
}

// ===================================================================

class CMsgGCHAppCheersGetAllowedTypes::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHAppCheersGetAllowedTypes>()._impl_._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cheer_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCHAppCheersGetAllowedTypes::CMsgGCHAppCheersGetAllowedTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCHAppCheersGetAllowedTypes)
}
CMsgGCHAppCheersGetAllowedTypes::CMsgGCHAppCheersGetAllowedTypes(const CMsgGCHAppCheersGetAllowedTypes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCHAppCheersGetAllowedTypes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheer_target_){}
    , decltype(_impl_.appid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cheer_target_, &from._impl_.cheer_target_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.appid_) -
    reinterpret_cast<char*>(&_impl_.cheer_target_)) + sizeof(_impl_.appid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCHAppCheersGetAllowedTypes)
}

inline void CMsgGCHAppCheersGetAllowedTypes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheer_target_){uint64_t{0u}}
    , decltype(_impl_.appid_){0u}
  };
}

CMsgGCHAppCheersGetAllowedTypes::~CMsgGCHAppCheersGetAllowedTypes() {
  // @@protoc_insertion_point(destructor:CMsgGCHAppCheersGetAllowedTypes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCHAppCheersGetAllowedTypes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCHAppCheersGetAllowedTypes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCHAppCheersGetAllowedTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHAppCheersGetAllowedTypes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.cheer_target_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.appid_) -
        reinterpret_cast<char*>(&_impl_.cheer_target_)) + sizeof(_impl_.appid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCHAppCheersGetAllowedTypes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 cheer_target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cheer_target(&has_bits);
          _impl_.cheer_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCHAppCheersGetAllowedTypes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHAppCheersGetAllowedTypes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 cheer_target = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_cheer_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHAppCheersGetAllowedTypes)
  return target;
}

size_t CMsgGCHAppCheersGetAllowedTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHAppCheersGetAllowedTypes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 cheer_target = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cheer_target());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCHAppCheersGetAllowedTypes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCHAppCheersGetAllowedTypes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCHAppCheersGetAllowedTypes::GetClassData() const { return &_class_data_; }


void CMsgGCHAppCheersGetAllowedTypes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCHAppCheersGetAllowedTypes*>(&to_msg);
  auto& from = static_cast<const CMsgGCHAppCheersGetAllowedTypes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHAppCheersGetAllowedTypes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cheer_target_ = from._impl_.cheer_target_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCHAppCheersGetAllowedTypes::CopyFrom(const CMsgGCHAppCheersGetAllowedTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHAppCheersGetAllowedTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHAppCheersGetAllowedTypes::IsInitialized() const {
  return true;
}

void CMsgGCHAppCheersGetAllowedTypes::InternalSwap(CMsgGCHAppCheersGetAllowedTypes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCHAppCheersGetAllowedTypes, _impl_.appid_)
      + sizeof(CMsgGCHAppCheersGetAllowedTypes::_impl_.appid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCHAppCheersGetAllowedTypes, _impl_.cheer_target_)>(
          reinterpret_cast<char*>(&_impl_.cheer_target_),
          reinterpret_cast<char*>(&other->_impl_.cheer_target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCHAppCheersGetAllowedTypes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[86]);
}

// ===================================================================

class CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps>()._impl_._has_bits_);
  static void set_has_original_cheer_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_remapped_cheer_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps)
}
CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps(const CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_ids_){from._impl_.account_ids_}
    , decltype(_impl_.original_cheer_type_){}
    , decltype(_impl_.remapped_cheer_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.original_cheer_type_, &from._impl_.original_cheer_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.remapped_cheer_type_) -
    reinterpret_cast<char*>(&_impl_.original_cheer_type_)) + sizeof(_impl_.remapped_cheer_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps)
}

inline void CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_ids_){arena}
    , decltype(_impl_.original_cheer_type_){0u}
    , decltype(_impl_.remapped_cheer_type_){0u}
  };
}

CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::~CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps() {
  // @@protoc_insertion_point(destructor:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_ids_.~RepeatedField();
}

void CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.original_cheer_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.remapped_cheer_type_) -
        reinterpret_cast<char*>(&_impl_.original_cheer_type_)) + sizeof(_impl_.remapped_cheer_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 original_cheer_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_original_cheer_type(&has_bits);
          _impl_.original_cheer_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 remapped_cheer_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_remapped_cheer_type(&has_bits);
          _impl_.remapped_cheer_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 account_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 original_cheer_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_original_cheer_type(), target);
  }

  // optional uint32 remapped_cheer_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_remapped_cheer_type(), target);
  }

  // repeated uint32 account_ids = 3;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_account_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps)
  return target;
}

size_t CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.account_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_account_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 original_cheer_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_original_cheer_type());
    }

    // optional uint32 remapped_cheer_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remapped_cheer_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::GetClassData() const { return &_class_data_; }


void CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps*>(&to_msg);
  auto& from = static_cast<const CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.account_ids_.MergeFrom(from._impl_.account_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.original_cheer_type_ = from._impl_.original_cheer_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.remapped_cheer_type_ = from._impl_.remapped_cheer_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::CopyFrom(const CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::IsInitialized() const {
  return true;
}

void CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::InternalSwap(CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.account_ids_.InternalSwap(&other->_impl_.account_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps, _impl_.remapped_cheer_type_)
      + sizeof(CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::_impl_.remapped_cheer_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps, _impl_.original_cheer_type_)>(
          reinterpret_cast<char*>(&_impl_.original_cheer_type_),
          reinterpret_cast<char*>(&other->_impl_.original_cheer_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[87]);
}

// ===================================================================

class CMsgGCHAppCheersGetAllowedTypesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHAppCheersGetAllowedTypesResponse>()._impl_._has_bits_);
  static void set_has_cache_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCHAppCheersGetAllowedTypesResponse::CMsgGCHAppCheersGetAllowedTypesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCHAppCheersGetAllowedTypesResponse)
}
CMsgGCHAppCheersGetAllowedTypesResponse::CMsgGCHAppCheersGetAllowedTypesResponse(const CMsgGCHAppCheersGetAllowedTypesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCHAppCheersGetAllowedTypesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheer_types_valid_all_users_){from._impl_.cheer_types_valid_all_users_}
    , decltype(_impl_.cheer_remaps_){from._impl_.cheer_remaps_}
    , decltype(_impl_.cache_duration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.cache_duration_ = from._impl_.cache_duration_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCHAppCheersGetAllowedTypesResponse)
}

inline void CMsgGCHAppCheersGetAllowedTypesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheer_types_valid_all_users_){arena}
    , decltype(_impl_.cheer_remaps_){arena}
    , decltype(_impl_.cache_duration_){0u}
  };
}

CMsgGCHAppCheersGetAllowedTypesResponse::~CMsgGCHAppCheersGetAllowedTypesResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCHAppCheersGetAllowedTypesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCHAppCheersGetAllowedTypesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cheer_types_valid_all_users_.~RepeatedField();
  _impl_.cheer_remaps_.~RepeatedPtrField();
}

void CMsgGCHAppCheersGetAllowedTypesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCHAppCheersGetAllowedTypesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHAppCheersGetAllowedTypesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cheer_types_valid_all_users_.Clear();
  _impl_.cheer_remaps_.Clear();
  _impl_.cache_duration_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCHAppCheersGetAllowedTypesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 cheer_types_valid_all_users = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cheer_types_valid_all_users(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cheer_types_valid_all_users(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps cheer_remaps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cheer_remaps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cache_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_cache_duration(&has_bits);
          _impl_.cache_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCHAppCheersGetAllowedTypesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHAppCheersGetAllowedTypesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 cheer_types_valid_all_users = 1;
  for (int i = 0, n = this->_internal_cheer_types_valid_all_users_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cheer_types_valid_all_users(i), target);
  }

  // repeated .CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps cheer_remaps = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cheer_remaps_size()); i < n; i++) {
    const auto& repfield = this->_internal_cheer_remaps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 cache_duration = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cache_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHAppCheersGetAllowedTypesResponse)
  return target;
}

size_t CMsgGCHAppCheersGetAllowedTypesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHAppCheersGetAllowedTypesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 cheer_types_valid_all_users = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.cheer_types_valid_all_users_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_cheer_types_valid_all_users_size());
    total_size += data_size;
  }

  // repeated .CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps cheer_remaps = 2;
  total_size += 1UL * this->_internal_cheer_remaps_size();
  for (const auto& msg : this->_impl_.cheer_remaps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 cache_duration = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cache_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCHAppCheersGetAllowedTypesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCHAppCheersGetAllowedTypesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCHAppCheersGetAllowedTypesResponse::GetClassData() const { return &_class_data_; }


void CMsgGCHAppCheersGetAllowedTypesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCHAppCheersGetAllowedTypesResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCHAppCheersGetAllowedTypesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHAppCheersGetAllowedTypesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cheer_types_valid_all_users_.MergeFrom(from._impl_.cheer_types_valid_all_users_);
  _this->_impl_.cheer_remaps_.MergeFrom(from._impl_.cheer_remaps_);
  if (from._internal_has_cache_duration()) {
    _this->_internal_set_cache_duration(from._internal_cache_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCHAppCheersGetAllowedTypesResponse::CopyFrom(const CMsgGCHAppCheersGetAllowedTypesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHAppCheersGetAllowedTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHAppCheersGetAllowedTypesResponse::IsInitialized() const {
  return true;
}

void CMsgGCHAppCheersGetAllowedTypesResponse::InternalSwap(CMsgGCHAppCheersGetAllowedTypesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cheer_types_valid_all_users_.InternalSwap(&other->_impl_.cheer_types_valid_all_users_);
  _impl_.cheer_remaps_.InternalSwap(&other->_impl_.cheer_remaps_);
  swap(_impl_.cache_duration_, other->_impl_.cache_duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCHAppCheersGetAllowedTypesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[88]);
}

// ===================================================================

class CGCSystemMsg_ReportExternalPurchase_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCSystemMsg_ReportExternalPurchase_Request>()._impl_._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_provider(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_orderid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_provider_orderid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_item_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_time_created(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

CGCSystemMsg_ReportExternalPurchase_Request::CGCSystemMsg_ReportExternalPurchase_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CGCSystemMsg_ReportExternalPurchase_Request)
}
CGCSystemMsg_ReportExternalPurchase_Request::CGCSystemMsg_ReportExternalPurchase_Request(const CGCSystemMsg_ReportExternalPurchase_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCSystemMsg_ReportExternalPurchase_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.provider_orderid_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.item_description_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.category_){}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.provider_){}
    , decltype(_impl_.orderid_){}
    , decltype(_impl_.amount_){}
    , decltype(_impl_.quantity_){}
    , decltype(_impl_.itemid_){}
    , decltype(_impl_.time_created_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.provider_orderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.provider_orderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_provider_orderid()) {
    _this->_impl_.provider_orderid_.Set(from._internal_provider_orderid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currency()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  _impl_.item_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_item_description()) {
    _this->_impl_.item_description_.Set(from._internal_item_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_category()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_created_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.time_created_));
  // @@protoc_insertion_point(copy_constructor:CGCSystemMsg_ReportExternalPurchase_Request)
}

inline void CGCSystemMsg_ReportExternalPurchase_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.provider_orderid_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.item_description_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.category_){}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.appid_){0u}
    , decltype(_impl_.provider_){0}
    , decltype(_impl_.orderid_){uint64_t{0u}}
    , decltype(_impl_.amount_){int64_t{0}}
    , decltype(_impl_.quantity_){0u}
    , decltype(_impl_.itemid_){0u}
    , decltype(_impl_.time_created_){0u}
  };
  _impl_.provider_orderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.provider_orderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.item_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGCSystemMsg_ReportExternalPurchase_Request::~CGCSystemMsg_ReportExternalPurchase_Request() {
  // @@protoc_insertion_point(destructor:CGCSystemMsg_ReportExternalPurchase_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCSystemMsg_ReportExternalPurchase_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.provider_orderid_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.item_description_.Destroy();
  _impl_.language_.Destroy();
  _impl_.category_.Destroy();
}

void CGCSystemMsg_ReportExternalPurchase_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCSystemMsg_ReportExternalPurchase_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCSystemMsg_ReportExternalPurchase_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.provider_orderid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.currency_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.item_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.category_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.provider_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.provider_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.orderid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.time_created_) -
        reinterpret_cast<char*>(&_impl_.orderid_)) + sizeof(_impl_.time_created_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCSystemMsg_ReportExternalPurchase_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .EMobilePaymentProvider provider = 3 [default = k_EMobilePaymentProvider_Invalid];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMobilePaymentProvider_IsValid(val))) {
            _internal_set_provider(static_cast<::EMobilePaymentProvider>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 orderid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_orderid(&has_bits);
          _impl_.orderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string provider_orderid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_provider_orderid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CGCSystemMsg_ReportExternalPurchase_Request.provider_orderid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 amount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_amount(&has_bits);
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string currency = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CGCSystemMsg_ReportExternalPurchase_Request.currency");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quantity = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_quantity(&has_bits);
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 itemid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_itemid(&has_bits);
          _impl_.itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string item_description = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_item_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CGCSystemMsg_ReportExternalPurchase_Request.item_description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string language = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CGCSystemMsg_ReportExternalPurchase_Request.language");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string category = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CGCSystemMsg_ReportExternalPurchase_Request.category");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_created = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_time_created(&has_bits);
          _impl_.time_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCSystemMsg_ReportExternalPurchase_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCSystemMsg_ReportExternalPurchase_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid(), target);
  }

  // optional .EMobilePaymentProvider provider = 3 [default = k_EMobilePaymentProvider_Invalid];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_provider(), target);
  }

  // optional uint64 orderid = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_orderid(), target);
  }

  // optional string provider_orderid = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_provider_orderid().data(), static_cast<int>(this->_internal_provider_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCSystemMsg_ReportExternalPurchase_Request.provider_orderid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_provider_orderid(), target);
  }

  // optional int64 amount = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_amount(), target);
  }

  // optional string currency = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCSystemMsg_ReportExternalPurchase_Request.currency");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_currency(), target);
  }

  // optional uint32 quantity = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_quantity(), target);
  }

  // optional uint32 itemid = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_itemid(), target);
  }

  // optional string item_description = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_item_description().data(), static_cast<int>(this->_internal_item_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCSystemMsg_ReportExternalPurchase_Request.item_description");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_item_description(), target);
  }

  // optional string language = 11;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCSystemMsg_ReportExternalPurchase_Request.language");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_language(), target);
  }

  // optional string category = 12;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCSystemMsg_ReportExternalPurchase_Request.category");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_category(), target);
  }

  // optional uint32 time_created = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_time_created(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCSystemMsg_ReportExternalPurchase_Request)
  return target;
}

size_t CGCSystemMsg_ReportExternalPurchase_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCSystemMsg_ReportExternalPurchase_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string provider_orderid = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_provider_orderid());
    }

    // optional string currency = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency());
    }

    // optional string item_description = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_item_description());
    }

    // optional string language = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional string category = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_category());
    }

    // optional fixed64 steamid = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional .EMobilePaymentProvider provider = 3 [default = k_EMobilePaymentProvider_Invalid];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_provider());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint64 orderid = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_orderid());
    }

    // optional int64 amount = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_amount());
    }

    // optional uint32 quantity = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quantity());
    }

    // optional uint32 itemid = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_itemid());
    }

    // optional uint32 time_created = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_created());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCSystemMsg_ReportExternalPurchase_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCSystemMsg_ReportExternalPurchase_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCSystemMsg_ReportExternalPurchase_Request::GetClassData() const { return &_class_data_; }


void CGCSystemMsg_ReportExternalPurchase_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCSystemMsg_ReportExternalPurchase_Request*>(&to_msg);
  auto& from = static_cast<const CGCSystemMsg_ReportExternalPurchase_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCSystemMsg_ReportExternalPurchase_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_provider_orderid(from._internal_provider_orderid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_currency(from._internal_currency());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_item_description(from._internal_item_description());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_category(from._internal_category());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.provider_ = from._impl_.provider_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.orderid_ = from._impl_.orderid_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.amount_ = from._impl_.amount_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.quantity_ = from._impl_.quantity_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.itemid_ = from._impl_.itemid_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.time_created_ = from._impl_.time_created_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCSystemMsg_ReportExternalPurchase_Request::CopyFrom(const CGCSystemMsg_ReportExternalPurchase_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCSystemMsg_ReportExternalPurchase_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCSystemMsg_ReportExternalPurchase_Request::IsInitialized() const {
  return true;
}

void CGCSystemMsg_ReportExternalPurchase_Request::InternalSwap(CGCSystemMsg_ReportExternalPurchase_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.provider_orderid_, lhs_arena,
      &other->_impl_.provider_orderid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.item_description_, lhs_arena,
      &other->_impl_.item_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCSystemMsg_ReportExternalPurchase_Request, _impl_.time_created_)
      + sizeof(CGCSystemMsg_ReportExternalPurchase_Request::_impl_.time_created_)
      - PROTOBUF_FIELD_OFFSET(CGCSystemMsg_ReportExternalPurchase_Request, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCSystemMsg_ReportExternalPurchase_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[89]);
}

// ===================================================================

class CGCSystemMsg_ReportExternalPurchase_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCSystemMsg_ReportExternalPurchase_Response>()._impl_._has_bits_);
  static void set_has_transid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_orderid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGCSystemMsg_ReportExternalPurchase_Response::CGCSystemMsg_ReportExternalPurchase_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CGCSystemMsg_ReportExternalPurchase_Response)
}
CGCSystemMsg_ReportExternalPurchase_Response::CGCSystemMsg_ReportExternalPurchase_Response(const CGCSystemMsg_ReportExternalPurchase_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCSystemMsg_ReportExternalPurchase_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transid_){}
    , decltype(_impl_.orderid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.transid_, &from._impl_.transid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.orderid_) -
    reinterpret_cast<char*>(&_impl_.transid_)) + sizeof(_impl_.orderid_));
  // @@protoc_insertion_point(copy_constructor:CGCSystemMsg_ReportExternalPurchase_Response)
}

inline void CGCSystemMsg_ReportExternalPurchase_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transid_){uint64_t{0u}}
    , decltype(_impl_.orderid_){uint64_t{0u}}
  };
}

CGCSystemMsg_ReportExternalPurchase_Response::~CGCSystemMsg_ReportExternalPurchase_Response() {
  // @@protoc_insertion_point(destructor:CGCSystemMsg_ReportExternalPurchase_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCSystemMsg_ReportExternalPurchase_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCSystemMsg_ReportExternalPurchase_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCSystemMsg_ReportExternalPurchase_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCSystemMsg_ReportExternalPurchase_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.transid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.orderid_) -
        reinterpret_cast<char*>(&_impl_.transid_)) + sizeof(_impl_.orderid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCSystemMsg_ReportExternalPurchase_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 transid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_transid(&has_bits);
          _impl_.transid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 orderid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_orderid(&has_bits);
          _impl_.orderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCSystemMsg_ReportExternalPurchase_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCSystemMsg_ReportExternalPurchase_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 transid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_transid(), target);
  }

  // optional uint64 orderid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_orderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCSystemMsg_ReportExternalPurchase_Response)
  return target;
}

size_t CGCSystemMsg_ReportExternalPurchase_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCSystemMsg_ReportExternalPurchase_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 transid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint64 orderid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_orderid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCSystemMsg_ReportExternalPurchase_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCSystemMsg_ReportExternalPurchase_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCSystemMsg_ReportExternalPurchase_Response::GetClassData() const { return &_class_data_; }


void CGCSystemMsg_ReportExternalPurchase_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCSystemMsg_ReportExternalPurchase_Response*>(&to_msg);
  auto& from = static_cast<const CGCSystemMsg_ReportExternalPurchase_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCSystemMsg_ReportExternalPurchase_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.transid_ = from._impl_.transid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.orderid_ = from._impl_.orderid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCSystemMsg_ReportExternalPurchase_Response::CopyFrom(const CGCSystemMsg_ReportExternalPurchase_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCSystemMsg_ReportExternalPurchase_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCSystemMsg_ReportExternalPurchase_Response::IsInitialized() const {
  return true;
}

void CGCSystemMsg_ReportExternalPurchase_Response::InternalSwap(CGCSystemMsg_ReportExternalPurchase_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCSystemMsg_ReportExternalPurchase_Response, _impl_.orderid_)
      + sizeof(CGCSystemMsg_ReportExternalPurchase_Response::_impl_.orderid_)
      - PROTOBUF_FIELD_OFFSET(CGCSystemMsg_ReportExternalPurchase_Response, _impl_.transid_)>(
          reinterpret_cast<char*>(&_impl_.transid_),
          reinterpret_cast<char*>(&other->_impl_.transid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCSystemMsg_ReportExternalPurchase_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[90]);
}

// ===================================================================

class CWorkshop_AddSpecialPayment_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CWorkshop_AddSpecialPayment_Request>()._impl_._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gameitemid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_payment_us_usd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_payment_row_usd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CWorkshop_AddSpecialPayment_Request::CWorkshop_AddSpecialPayment_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_AddSpecialPayment_Request)
}
CWorkshop_AddSpecialPayment_Request::CWorkshop_AddSpecialPayment_Request(const CWorkshop_AddSpecialPayment_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CWorkshop_AddSpecialPayment_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.date_){}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.gameitemid_){}
    , decltype(_impl_.payment_us_usd_){}
    , decltype(_impl_.payment_row_usd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_date()) {
    _this->_impl_.date_.Set(from._internal_date(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.appid_, &from._impl_.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.payment_row_usd_) -
    reinterpret_cast<char*>(&_impl_.appid_)) + sizeof(_impl_.payment_row_usd_));
  // @@protoc_insertion_point(copy_constructor:CWorkshop_AddSpecialPayment_Request)
}

inline void CWorkshop_AddSpecialPayment_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.date_){}
    , decltype(_impl_.appid_){0u}
    , decltype(_impl_.gameitemid_){0u}
    , decltype(_impl_.payment_us_usd_){uint64_t{0u}}
    , decltype(_impl_.payment_row_usd_){uint64_t{0u}}
  };
  _impl_.date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CWorkshop_AddSpecialPayment_Request::~CWorkshop_AddSpecialPayment_Request() {
  // @@protoc_insertion_point(destructor:CWorkshop_AddSpecialPayment_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CWorkshop_AddSpecialPayment_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.date_.Destroy();
}

void CWorkshop_AddSpecialPayment_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CWorkshop_AddSpecialPayment_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_AddSpecialPayment_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.date_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.payment_row_usd_) -
        reinterpret_cast<char*>(&_impl_.appid_)) + sizeof(_impl_.payment_row_usd_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_AddSpecialPayment_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gameitemid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gameitemid(&has_bits);
          _impl_.gameitemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_date();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CWorkshop_AddSpecialPayment_Request.date");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 payment_us_usd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_payment_us_usd(&has_bits);
          _impl_.payment_us_usd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 payment_row_usd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_payment_row_usd(&has_bits);
          _impl_.payment_row_usd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CWorkshop_AddSpecialPayment_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_AddSpecialPayment_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 gameitemid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gameitemid(), target);
  }

  // optional string date = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CWorkshop_AddSpecialPayment_Request.date");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_date(), target);
  }

  // optional uint64 payment_us_usd = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_payment_us_usd(), target);
  }

  // optional uint64 payment_row_usd = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_payment_row_usd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_AddSpecialPayment_Request)
  return target;
}

size_t CWorkshop_AddSpecialPayment_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_AddSpecialPayment_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string date = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_date());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 gameitemid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameitemid());
    }

    // optional uint64 payment_us_usd = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_payment_us_usd());
    }

    // optional uint64 payment_row_usd = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_payment_row_usd());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CWorkshop_AddSpecialPayment_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CWorkshop_AddSpecialPayment_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CWorkshop_AddSpecialPayment_Request::GetClassData() const { return &_class_data_; }


void CWorkshop_AddSpecialPayment_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CWorkshop_AddSpecialPayment_Request*>(&to_msg);
  auto& from = static_cast<const CWorkshop_AddSpecialPayment_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_AddSpecialPayment_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_date(from._internal_date());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.gameitemid_ = from._impl_.gameitemid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.payment_us_usd_ = from._impl_.payment_us_usd_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.payment_row_usd_ = from._impl_.payment_row_usd_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CWorkshop_AddSpecialPayment_Request::CopyFrom(const CWorkshop_AddSpecialPayment_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_AddSpecialPayment_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_AddSpecialPayment_Request::IsInitialized() const {
  return true;
}

void CWorkshop_AddSpecialPayment_Request::InternalSwap(CWorkshop_AddSpecialPayment_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.date_, lhs_arena,
      &other->_impl_.date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CWorkshop_AddSpecialPayment_Request, _impl_.payment_row_usd_)
      + sizeof(CWorkshop_AddSpecialPayment_Request::_impl_.payment_row_usd_)
      - PROTOBUF_FIELD_OFFSET(CWorkshop_AddSpecialPayment_Request, _impl_.appid_)>(
          reinterpret_cast<char*>(&_impl_.appid_),
          reinterpret_cast<char*>(&other->_impl_.appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_AddSpecialPayment_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[91]);
}

// ===================================================================

class CWorkshop_AddSpecialPayment_Response::_Internal {
 public:
};

CWorkshop_AddSpecialPayment_Response::CWorkshop_AddSpecialPayment_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CWorkshop_AddSpecialPayment_Response)
}
CWorkshop_AddSpecialPayment_Response::CWorkshop_AddSpecialPayment_Response(const CWorkshop_AddSpecialPayment_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CWorkshop_AddSpecialPayment_Response* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CWorkshop_AddSpecialPayment_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CWorkshop_AddSpecialPayment_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CWorkshop_AddSpecialPayment_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_AddSpecialPayment_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[92]);
}

// ===================================================================

class CWorkshop_GetSpecialPayments_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CWorkshop_GetSpecialPayments_Request>()._impl_._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gameitemid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CWorkshop_GetSpecialPayments_Request::CWorkshop_GetSpecialPayments_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_GetSpecialPayments_Request)
}
CWorkshop_GetSpecialPayments_Request::CWorkshop_GetSpecialPayments_Request(const CWorkshop_GetSpecialPayments_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CWorkshop_GetSpecialPayments_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.date_){}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.gameitemid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_date()) {
    _this->_impl_.date_.Set(from._internal_date(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.appid_, &from._impl_.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gameitemid_) -
    reinterpret_cast<char*>(&_impl_.appid_)) + sizeof(_impl_.gameitemid_));
  // @@protoc_insertion_point(copy_constructor:CWorkshop_GetSpecialPayments_Request)
}

inline void CWorkshop_GetSpecialPayments_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.date_){}
    , decltype(_impl_.appid_){0u}
    , decltype(_impl_.gameitemid_){0u}
  };
  _impl_.date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CWorkshop_GetSpecialPayments_Request::~CWorkshop_GetSpecialPayments_Request() {
  // @@protoc_insertion_point(destructor:CWorkshop_GetSpecialPayments_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CWorkshop_GetSpecialPayments_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.date_.Destroy();
}

void CWorkshop_GetSpecialPayments_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CWorkshop_GetSpecialPayments_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_GetSpecialPayments_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.date_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gameitemid_) -
        reinterpret_cast<char*>(&_impl_.appid_)) + sizeof(_impl_.gameitemid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_GetSpecialPayments_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gameitemid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gameitemid(&has_bits);
          _impl_.gameitemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_date();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CWorkshop_GetSpecialPayments_Request.date");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CWorkshop_GetSpecialPayments_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_GetSpecialPayments_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 gameitemid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gameitemid(), target);
  }

  // optional string date = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CWorkshop_GetSpecialPayments_Request.date");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_GetSpecialPayments_Request)
  return target;
}

size_t CWorkshop_GetSpecialPayments_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_GetSpecialPayments_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string date = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_date());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 gameitemid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameitemid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CWorkshop_GetSpecialPayments_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CWorkshop_GetSpecialPayments_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CWorkshop_GetSpecialPayments_Request::GetClassData() const { return &_class_data_; }


void CWorkshop_GetSpecialPayments_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CWorkshop_GetSpecialPayments_Request*>(&to_msg);
  auto& from = static_cast<const CWorkshop_GetSpecialPayments_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_GetSpecialPayments_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_date(from._internal_date());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.gameitemid_ = from._impl_.gameitemid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CWorkshop_GetSpecialPayments_Request::CopyFrom(const CWorkshop_GetSpecialPayments_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_GetSpecialPayments_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetSpecialPayments_Request::IsInitialized() const {
  return true;
}

void CWorkshop_GetSpecialPayments_Request::InternalSwap(CWorkshop_GetSpecialPayments_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.date_, lhs_arena,
      &other->_impl_.date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CWorkshop_GetSpecialPayments_Request, _impl_.gameitemid_)
      + sizeof(CWorkshop_GetSpecialPayments_Request::_impl_.gameitemid_)
      - PROTOBUF_FIELD_OFFSET(CWorkshop_GetSpecialPayments_Request, _impl_.appid_)>(
          reinterpret_cast<char*>(&_impl_.appid_),
          reinterpret_cast<char*>(&other->_impl_.appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_GetSpecialPayments_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[93]);
}

// ===================================================================

class CWorkshop_GetSpecialPayments_Response_SpecialPayment::_Internal {
 public:
  using HasBits = decltype(std::declval<CWorkshop_GetSpecialPayments_Response_SpecialPayment>()._impl_._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gameitemid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_net_payment_us_usd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_net_payment_row_usd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CWorkshop_GetSpecialPayments_Response_SpecialPayment::CWorkshop_GetSpecialPayments_Response_SpecialPayment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_GetSpecialPayments_Response.SpecialPayment)
}
CWorkshop_GetSpecialPayments_Response_SpecialPayment::CWorkshop_GetSpecialPayments_Response_SpecialPayment(const CWorkshop_GetSpecialPayments_Response_SpecialPayment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CWorkshop_GetSpecialPayments_Response_SpecialPayment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.date_){}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.gameitemid_){}
    , decltype(_impl_.net_payment_us_usd_){}
    , decltype(_impl_.net_payment_row_usd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_date()) {
    _this->_impl_.date_.Set(from._internal_date(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.appid_, &from._impl_.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.net_payment_row_usd_) -
    reinterpret_cast<char*>(&_impl_.appid_)) + sizeof(_impl_.net_payment_row_usd_));
  // @@protoc_insertion_point(copy_constructor:CWorkshop_GetSpecialPayments_Response.SpecialPayment)
}

inline void CWorkshop_GetSpecialPayments_Response_SpecialPayment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.date_){}
    , decltype(_impl_.appid_){0u}
    , decltype(_impl_.gameitemid_){0u}
    , decltype(_impl_.net_payment_us_usd_){uint64_t{0u}}
    , decltype(_impl_.net_payment_row_usd_){uint64_t{0u}}
  };
  _impl_.date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CWorkshop_GetSpecialPayments_Response_SpecialPayment::~CWorkshop_GetSpecialPayments_Response_SpecialPayment() {
  // @@protoc_insertion_point(destructor:CWorkshop_GetSpecialPayments_Response.SpecialPayment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CWorkshop_GetSpecialPayments_Response_SpecialPayment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.date_.Destroy();
}

void CWorkshop_GetSpecialPayments_Response_SpecialPayment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CWorkshop_GetSpecialPayments_Response_SpecialPayment::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_GetSpecialPayments_Response.SpecialPayment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.date_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.net_payment_row_usd_) -
        reinterpret_cast<char*>(&_impl_.appid_)) + sizeof(_impl_.net_payment_row_usd_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_GetSpecialPayments_Response_SpecialPayment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gameitemid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gameitemid(&has_bits);
          _impl_.gameitemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_date();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CWorkshop_GetSpecialPayments_Response.SpecialPayment.date");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 net_payment_us_usd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_net_payment_us_usd(&has_bits);
          _impl_.net_payment_us_usd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 net_payment_row_usd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_net_payment_row_usd(&has_bits);
          _impl_.net_payment_row_usd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CWorkshop_GetSpecialPayments_Response_SpecialPayment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_GetSpecialPayments_Response.SpecialPayment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 gameitemid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gameitemid(), target);
  }

  // optional string date = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CWorkshop_GetSpecialPayments_Response.SpecialPayment.date");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_date(), target);
  }

  // optional uint64 net_payment_us_usd = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_net_payment_us_usd(), target);
  }

  // optional uint64 net_payment_row_usd = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_net_payment_row_usd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_GetSpecialPayments_Response.SpecialPayment)
  return target;
}

size_t CWorkshop_GetSpecialPayments_Response_SpecialPayment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_GetSpecialPayments_Response.SpecialPayment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string date = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_date());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 gameitemid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gameitemid());
    }

    // optional uint64 net_payment_us_usd = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_net_payment_us_usd());
    }

    // optional uint64 net_payment_row_usd = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_net_payment_row_usd());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CWorkshop_GetSpecialPayments_Response_SpecialPayment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CWorkshop_GetSpecialPayments_Response_SpecialPayment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CWorkshop_GetSpecialPayments_Response_SpecialPayment::GetClassData() const { return &_class_data_; }


void CWorkshop_GetSpecialPayments_Response_SpecialPayment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CWorkshop_GetSpecialPayments_Response_SpecialPayment*>(&to_msg);
  auto& from = static_cast<const CWorkshop_GetSpecialPayments_Response_SpecialPayment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_GetSpecialPayments_Response.SpecialPayment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_date(from._internal_date());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.gameitemid_ = from._impl_.gameitemid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.net_payment_us_usd_ = from._impl_.net_payment_us_usd_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.net_payment_row_usd_ = from._impl_.net_payment_row_usd_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CWorkshop_GetSpecialPayments_Response_SpecialPayment::CopyFrom(const CWorkshop_GetSpecialPayments_Response_SpecialPayment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_GetSpecialPayments_Response.SpecialPayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetSpecialPayments_Response_SpecialPayment::IsInitialized() const {
  return true;
}

void CWorkshop_GetSpecialPayments_Response_SpecialPayment::InternalSwap(CWorkshop_GetSpecialPayments_Response_SpecialPayment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.date_, lhs_arena,
      &other->_impl_.date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CWorkshop_GetSpecialPayments_Response_SpecialPayment, _impl_.net_payment_row_usd_)
      + sizeof(CWorkshop_GetSpecialPayments_Response_SpecialPayment::_impl_.net_payment_row_usd_)
      - PROTOBUF_FIELD_OFFSET(CWorkshop_GetSpecialPayments_Response_SpecialPayment, _impl_.appid_)>(
          reinterpret_cast<char*>(&_impl_.appid_),
          reinterpret_cast<char*>(&other->_impl_.appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_GetSpecialPayments_Response_SpecialPayment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[94]);
}

// ===================================================================

class CWorkshop_GetSpecialPayments_Response::_Internal {
 public:
};

CWorkshop_GetSpecialPayments_Response::CWorkshop_GetSpecialPayments_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_GetSpecialPayments_Response)
}
CWorkshop_GetSpecialPayments_Response::CWorkshop_GetSpecialPayments_Response(const CWorkshop_GetSpecialPayments_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CWorkshop_GetSpecialPayments_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.special_payments_){from._impl_.special_payments_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CWorkshop_GetSpecialPayments_Response)
}

inline void CWorkshop_GetSpecialPayments_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.special_payments_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CWorkshop_GetSpecialPayments_Response::~CWorkshop_GetSpecialPayments_Response() {
  // @@protoc_insertion_point(destructor:CWorkshop_GetSpecialPayments_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CWorkshop_GetSpecialPayments_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.special_payments_.~RepeatedPtrField();
}

void CWorkshop_GetSpecialPayments_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CWorkshop_GetSpecialPayments_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_GetSpecialPayments_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.special_payments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_GetSpecialPayments_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CWorkshop_GetSpecialPayments_Response.SpecialPayment special_payments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_special_payments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CWorkshop_GetSpecialPayments_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_GetSpecialPayments_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CWorkshop_GetSpecialPayments_Response.SpecialPayment special_payments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_special_payments_size()); i < n; i++) {
    const auto& repfield = this->_internal_special_payments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_GetSpecialPayments_Response)
  return target;
}

size_t CWorkshop_GetSpecialPayments_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_GetSpecialPayments_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CWorkshop_GetSpecialPayments_Response.SpecialPayment special_payments = 1;
  total_size += 1UL * this->_internal_special_payments_size();
  for (const auto& msg : this->_impl_.special_payments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CWorkshop_GetSpecialPayments_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CWorkshop_GetSpecialPayments_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CWorkshop_GetSpecialPayments_Response::GetClassData() const { return &_class_data_; }


void CWorkshop_GetSpecialPayments_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CWorkshop_GetSpecialPayments_Response*>(&to_msg);
  auto& from = static_cast<const CWorkshop_GetSpecialPayments_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_GetSpecialPayments_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.special_payments_.MergeFrom(from._impl_.special_payments_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CWorkshop_GetSpecialPayments_Response::CopyFrom(const CWorkshop_GetSpecialPayments_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_GetSpecialPayments_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetSpecialPayments_Response::IsInitialized() const {
  return true;
}

void CWorkshop_GetSpecialPayments_Response::InternalSwap(CWorkshop_GetSpecialPayments_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.special_payments_.InternalSwap(&other->_impl_.special_payments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_GetSpecialPayments_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fint_2eproto_getter, &descriptor_table_steammessages_5fint_2eproto_once,
      file_level_metadata_steammessages_5fint_2eproto[95]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgWebAPIKey*
Arena::CreateMaybeMessage< ::CMsgWebAPIKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgWebAPIKey >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHttpRequest_RequestHeader*
Arena::CreateMaybeMessage< ::CMsgHttpRequest_RequestHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHttpRequest_RequestHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHttpRequest_QueryParam*
Arena::CreateMaybeMessage< ::CMsgHttpRequest_QueryParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHttpRequest_QueryParam >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHttpRequest*
Arena::CreateMaybeMessage< ::CMsgHttpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHttpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgWebAPIRequest*
Arena::CreateMaybeMessage< ::CMsgWebAPIRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgWebAPIRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHttpResponse_ResponseHeader*
Arena::CreateMaybeMessage< ::CMsgHttpResponse_ResponseHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHttpResponse_ResponseHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHttpResponse*
Arena::CreateMaybeMessage< ::CMsgHttpResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHttpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMFindAccounts*
Arena::CreateMaybeMessage< ::CMsgAMFindAccounts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMFindAccounts >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMFindAccountsResponse*
Arena::CreateMaybeMessage< ::CMsgAMFindAccountsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMFindAccountsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgNotifyWatchdog*
Arena::CreateMaybeMessage< ::CMsgNotifyWatchdog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgNotifyWatchdog >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMGetLicenses*
Arena::CreateMaybeMessage< ::CMsgAMGetLicenses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMGetLicenses >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPackageLicense*
Arena::CreateMaybeMessage< ::CMsgPackageLicense >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPackageLicense >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMGetLicensesResponse*
Arena::CreateMaybeMessage< ::CMsgAMGetLicensesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMGetLicensesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMGetUserGameStats*
Arena::CreateMaybeMessage< ::CMsgAMGetUserGameStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMGetUserGameStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMGetUserGameStatsResponse_Stats*
Arena::CreateMaybeMessage< ::CMsgAMGetUserGameStatsResponse_Stats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMGetUserGameStatsResponse_Stats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks*
Arena::CreateMaybeMessage< ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMGetUserGameStatsResponse*
Arena::CreateMaybeMessage< ::CMsgAMGetUserGameStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMGetUserGameStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetCommandList*
Arena::CreateMaybeMessage< ::CMsgGCGetCommandList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetCommandList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetCommandListResponse*
Arena::CreateMaybeMessage< ::CMsgGCGetCommandListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetCommandListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgMemCachedGet*
Arena::CreateMaybeMessage< ::CGCMsgMemCachedGet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgMemCachedGet >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgMemCachedGetResponse_ValueTag*
Arena::CreateMaybeMessage< ::CGCMsgMemCachedGetResponse_ValueTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgMemCachedGetResponse_ValueTag >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgMemCachedGetResponse*
Arena::CreateMaybeMessage< ::CGCMsgMemCachedGetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgMemCachedGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgMemCachedSet_KeyPair*
Arena::CreateMaybeMessage< ::CGCMsgMemCachedSet_KeyPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgMemCachedSet_KeyPair >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgMemCachedSet*
Arena::CreateMaybeMessage< ::CGCMsgMemCachedSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgMemCachedSet >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgMemCachedDelete*
Arena::CreateMaybeMessage< ::CGCMsgMemCachedDelete >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgMemCachedDelete >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgMemCachedStats*
Arena::CreateMaybeMessage< ::CGCMsgMemCachedStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgMemCachedStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgMemCachedStatsResponse*
Arena::CreateMaybeMessage< ::CGCMsgMemCachedStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgMemCachedStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgSQLStats*
Arena::CreateMaybeMessage< ::CGCMsgSQLStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgSQLStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgSQLStatsResponse*
Arena::CreateMaybeMessage< ::CGCMsgSQLStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgSQLStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMAddFreeLicense*
Arena::CreateMaybeMessage< ::CMsgAMAddFreeLicense >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMAddFreeLicense >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMAddFreeLicenseResponse*
Arena::CreateMaybeMessage< ::CMsgAMAddFreeLicenseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMAddFreeLicenseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgGetIPLocation*
Arena::CreateMaybeMessage< ::CGCMsgGetIPLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgGetIPLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgGetIPASN*
Arena::CreateMaybeMessage< ::CGCMsgGetIPASN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgGetIPASN >(arena);
}
template<> PROTOBUF_NOINLINE ::CIPASNInfo*
Arena::CreateMaybeMessage< ::CIPASNInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIPASNInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgGetIPASNResponse*
Arena::CreateMaybeMessage< ::CGCMsgGetIPASNResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgGetIPASNResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgSystemStatsSchema*
Arena::CreateMaybeMessage< ::CGCMsgSystemStatsSchema >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgSystemStatsSchema >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgGetSystemStats*
Arena::CreateMaybeMessage< ::CGCMsgGetSystemStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgGetSystemStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgGetSystemStatsResponse*
Arena::CreateMaybeMessage< ::CGCMsgGetSystemStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgGetSystemStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMSendEmail_ReplacementToken*
Arena::CreateMaybeMessage< ::CMsgAMSendEmail_ReplacementToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMSendEmail_ReplacementToken >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMSendEmail_PersonaNameReplacementToken*
Arena::CreateMaybeMessage< ::CMsgAMSendEmail_PersonaNameReplacementToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMSendEmail_PersonaNameReplacementToken >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMSendEmail*
Arena::CreateMaybeMessage< ::CMsgAMSendEmail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMSendEmail >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMSendEmailResponse*
Arena::CreateMaybeMessage< ::CMsgAMSendEmailResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMSendEmailResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetEmailTemplate*
Arena::CreateMaybeMessage< ::CMsgGCGetEmailTemplate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetEmailTemplate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetEmailTemplateResponse*
Arena::CreateMaybeMessage< ::CMsgGCGetEmailTemplateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetEmailTemplateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMGrantGuestPasses2*
Arena::CreateMaybeMessage< ::CMsgAMGrantGuestPasses2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMGrantGuestPasses2 >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMGrantGuestPasses2Response*
Arena::CreateMaybeMessage< ::CMsgAMGrantGuestPasses2Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMGrantGuestPasses2Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetPersonaNames*
Arena::CreateMaybeMessage< ::CMsgGCGetPersonaNames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetPersonaNames >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetPersonaNames_Response_PersonaName*
Arena::CreateMaybeMessage< ::CMsgGCGetPersonaNames_Response_PersonaName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetPersonaNames_Response_PersonaName >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetPersonaNames_Response*
Arena::CreateMaybeMessage< ::CMsgGCGetPersonaNames_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetPersonaNames_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCheckFriendship*
Arena::CreateMaybeMessage< ::CMsgGCCheckFriendship >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCheckFriendship >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCheckFriendship_Response*
Arena::CreateMaybeMessage< ::CMsgGCCheckFriendship_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCheckFriendship_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetAppFriendsList*
Arena::CreateMaybeMessage< ::CMsgGCGetAppFriendsList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetAppFriendsList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetAppFriendsList_Response*
Arena::CreateMaybeMessage< ::CMsgGCGetAppFriendsList_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetAppFriendsList_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgMasterSetDirectory_SubGC*
Arena::CreateMaybeMessage< ::CMsgGCMsgMasterSetDirectory_SubGC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgMasterSetDirectory_SubGC >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgMasterSetDirectory*
Arena::CreateMaybeMessage< ::CMsgGCMsgMasterSetDirectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgMasterSetDirectory >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgMasterSetDirectory_Response*
Arena::CreateMaybeMessage< ::CMsgGCMsgMasterSetDirectory_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgMasterSetDirectory_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgWebAPIJobRequestForwardResponse*
Arena::CreateMaybeMessage< ::CMsgGCMsgWebAPIJobRequestForwardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgWebAPIJobRequestForwardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCSystemMsg_GetPurchaseTrust_Request*
Arena::CreateMaybeMessage< ::CGCSystemMsg_GetPurchaseTrust_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCSystemMsg_GetPurchaseTrust_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCSystemMsg_GetPurchaseTrust_Response*
Arena::CreateMaybeMessage< ::CGCSystemMsg_GetPurchaseTrust_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCSystemMsg_GetPurchaseTrust_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCHAccountVacStatusChange*
Arena::CreateMaybeMessage< ::CMsgGCHAccountVacStatusChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHAccountVacStatusChange >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetPartnerAccountLink*
Arena::CreateMaybeMessage< ::CMsgGCGetPartnerAccountLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetPartnerAccountLink >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetPartnerAccountLink_Response*
Arena::CreateMaybeMessage< ::CMsgGCGetPartnerAccountLink_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetPartnerAccountLink_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCRoutingInfo*
Arena::CreateMaybeMessage< ::CMsgGCRoutingInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCRoutingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgMasterSetWebAPIRouting_Entry*
Arena::CreateMaybeMessage< ::CMsgGCMsgMasterSetWebAPIRouting_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgMasterSetWebAPIRouting_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgMasterSetWebAPIRouting*
Arena::CreateMaybeMessage< ::CMsgGCMsgMasterSetWebAPIRouting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgMasterSetWebAPIRouting >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgMasterSetClientMsgRouting_Entry*
Arena::CreateMaybeMessage< ::CMsgGCMsgMasterSetClientMsgRouting_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgMasterSetClientMsgRouting_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgMasterSetClientMsgRouting*
Arena::CreateMaybeMessage< ::CMsgGCMsgMasterSetClientMsgRouting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgMasterSetClientMsgRouting >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgMasterSetWebAPIRouting_Response*
Arena::CreateMaybeMessage< ::CMsgGCMsgMasterSetWebAPIRouting_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgMasterSetWebAPIRouting_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgMasterSetClientMsgRouting_Response*
Arena::CreateMaybeMessage< ::CMsgGCMsgMasterSetClientMsgRouting_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgMasterSetClientMsgRouting_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgSetOptions_MessageRange*
Arena::CreateMaybeMessage< ::CMsgGCMsgSetOptions_MessageRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgSetOptions_MessageRange >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgSetOptions*
Arena::CreateMaybeMessage< ::CMsgGCMsgSetOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgSetOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCHUpdateSession_ExtraField*
Arena::CreateMaybeMessage< ::CMsgGCHUpdateSession_ExtraField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHUpdateSession_ExtraField >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCHUpdateSession*
Arena::CreateMaybeMessage< ::CMsgGCHUpdateSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHUpdateSession >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances*
Arena::CreateMaybeMessage< ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgNotificationOfSuspiciousActivity*
Arena::CreateMaybeMessage< ::CMsgNotificationOfSuspiciousActivity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgNotificationOfSuspiciousActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDPPartnerMicroTxns_PartnerMicroTxn*
Arena::CreateMaybeMessage< ::CMsgDPPartnerMicroTxns_PartnerMicroTxn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDPPartnerMicroTxns_PartnerMicroTxn >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDPPartnerMicroTxns_PartnerInfo*
Arena::CreateMaybeMessage< ::CMsgDPPartnerMicroTxns_PartnerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDPPartnerMicroTxns_PartnerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDPPartnerMicroTxns*
Arena::CreateMaybeMessage< ::CMsgDPPartnerMicroTxns >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDPPartnerMicroTxns >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDPPartnerMicroTxnsResponse*
Arena::CreateMaybeMessage< ::CMsgDPPartnerMicroTxnsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDPPartnerMicroTxnsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCHVacVerificationChange*
Arena::CreateMaybeMessage< ::CMsgGCHVacVerificationChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHVacVerificationChange >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCHAccountTwoFactorChange*
Arena::CreateMaybeMessage< ::CMsgGCHAccountTwoFactorChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHAccountTwoFactorChange >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCheckClanMembership*
Arena::CreateMaybeMessage< ::CMsgGCCheckClanMembership >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCheckClanMembership >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCheckClanMembership_Response*
Arena::CreateMaybeMessage< ::CMsgGCCheckClanMembership_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCheckClanMembership_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCHAppCheersReceived_CheerTypeAmount*
Arena::CreateMaybeMessage< ::CMsgGCHAppCheersReceived_CheerTypeAmount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHAppCheersReceived_CheerTypeAmount >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCHAppCheersReceived_CheerTarget*
Arena::CreateMaybeMessage< ::CMsgGCHAppCheersReceived_CheerTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHAppCheersReceived_CheerTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCHAppCheersReceived*
Arena::CreateMaybeMessage< ::CMsgGCHAppCheersReceived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHAppCheersReceived >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCHAppCheersGetAllowedTypes*
Arena::CreateMaybeMessage< ::CMsgGCHAppCheersGetAllowedTypes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHAppCheersGetAllowedTypes >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps*
Arena::CreateMaybeMessage< ::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCHAppCheersGetAllowedTypesResponse*
Arena::CreateMaybeMessage< ::CMsgGCHAppCheersGetAllowedTypesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHAppCheersGetAllowedTypesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCSystemMsg_ReportExternalPurchase_Request*
Arena::CreateMaybeMessage< ::CGCSystemMsg_ReportExternalPurchase_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCSystemMsg_ReportExternalPurchase_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCSystemMsg_ReportExternalPurchase_Response*
Arena::CreateMaybeMessage< ::CGCSystemMsg_ReportExternalPurchase_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCSystemMsg_ReportExternalPurchase_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_AddSpecialPayment_Request*
Arena::CreateMaybeMessage< ::CWorkshop_AddSpecialPayment_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_AddSpecialPayment_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_AddSpecialPayment_Response*
Arena::CreateMaybeMessage< ::CWorkshop_AddSpecialPayment_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_AddSpecialPayment_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_GetSpecialPayments_Request*
Arena::CreateMaybeMessage< ::CWorkshop_GetSpecialPayments_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_GetSpecialPayments_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_GetSpecialPayments_Response_SpecialPayment*
Arena::CreateMaybeMessage< ::CWorkshop_GetSpecialPayments_Response_SpecialPayment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_GetSpecialPayments_Response_SpecialPayment >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_GetSpecialPayments_Response*
Arena::CreateMaybeMessage< ::CWorkshop_GetSpecialPayments_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_GetSpecialPayments_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
