// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_match_metadata.proto

#include "dota_match_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CDOTAMatchMetadataFile::CDOTAMatchMetadataFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.private_metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.version_)*/0} {}
struct CDOTAMatchMetadataFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchMetadataFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchMetadataFileDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadataFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchMetadataFileDefaultTypeInternal _CDOTAMatchMetadataFile_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchMetadata_EconItem::CDOTAMatchMetadata_EconItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attribute_)*/{}
  , /*decltype(_impl_.equipped_state_)*/{}
  , /*decltype(_impl_.def_index_)*/0u
  , /*decltype(_impl_.style_)*/0u
  , /*decltype(_impl_.quality_)*/4u} {}
struct CDOTAMatchMetadata_EconItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchMetadata_EconItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_EconItemDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_EconItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchMetadata_EconItemDefaultTypeInternal _CDOTAMatchMetadata_EconItem_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_PlayerKill::CDOTAMatchMetadata_Team_PlayerKill(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.victim_slot_)*/0u
  , /*decltype(_impl_.count_)*/0u} {}
struct CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_PlayerKill _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal _CDOTAMatchMetadata_Team_PlayerKill_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_ItemPurchase::CDOTAMatchMetadata_Team_ItemPurchase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.purchase_time_)*/0
  , /*decltype(_impl_.item_id_)*/-1} {}
struct CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_ItemPurchase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal _CDOTAMatchMetadata_Team_ItemPurchase_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_InventorySnapshot::CDOTAMatchMetadata_Team_InventorySnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/{}
  , /*decltype(_impl_.backpack_item_id_)*/{}
  , /*decltype(_impl_.game_time_)*/0
  , /*decltype(_impl_.kills_)*/0u
  , /*decltype(_impl_.deaths_)*/0u
  , /*decltype(_impl_.assists_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.neutral_item_id_)*/-1} {}
struct CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_InventorySnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal _CDOTAMatchMetadata_Team_InventorySnapshot_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_AutoStyleCriteria::CDOTAMatchMetadata_Team_AutoStyleCriteria(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_token_)*/0u
  , /*decltype(_impl_.value_)*/0} {}
struct CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_AutoStyleCriteria _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal _CDOTAMatchMetadata_Team_AutoStyleCriteria_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_StrangeGemProgress::CDOTAMatchMetadata_Team_StrangeGemProgress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kill_eater_type_)*/0u
  , /*decltype(_impl_.gem_item_def_index_)*/0u
  , /*decltype(_impl_.required_hero_id_)*/0u
  , /*decltype(_impl_.starting_value_)*/0u
  , /*decltype(_impl_.ending_value_)*/0u
  , /*decltype(_impl_.owner_item_def_index_)*/0u
  , /*decltype(_impl_.owner_item_id_)*/uint64_t{0u}} {}
struct CDOTAMatchMetadata_Team_StrangeGemProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_StrangeGemProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_StrangeGemProgressDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_StrangeGemProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchMetadata_Team_StrangeGemProgressDefaultTypeInternal _CDOTAMatchMetadata_Team_StrangeGemProgress_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_VictoryPrediction::CDOTAMatchMetadata_Team_VictoryPrediction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.item_def_index_)*/0u
  , /*decltype(_impl_.starting_value_)*/0u
  , /*decltype(_impl_.is_victory_)*/false} {}
struct CDOTAMatchMetadata_Team_VictoryPredictionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_VictoryPredictionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_VictoryPredictionDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_VictoryPrediction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchMetadata_Team_VictoryPredictionDefaultTypeInternal _CDOTAMatchMetadata_Team_VictoryPrediction_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_SubChallenge::CDOTAMatchMetadata_Team_SubChallenge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slot_id_)*/0u
  , /*decltype(_impl_.start_value_)*/0u
  , /*decltype(_impl_.end_value_)*/0u
  , /*decltype(_impl_.completed_)*/false} {}
struct CDOTAMatchMetadata_Team_SubChallengeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_SubChallengeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_SubChallengeDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_SubChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchMetadata_Team_SubChallengeDefaultTypeInternal _CDOTAMatchMetadata_Team_SubChallenge_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_CavernChallengeResult::CDOTAMatchMetadata_Team_CavernChallengeResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.completed_path_id_)*/255u
  , /*decltype(_impl_.claimed_room_id_)*/255u} {}
struct CDOTAMatchMetadata_Team_CavernChallengeResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_CavernChallengeResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_CavernChallengeResultDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_CavernChallengeResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchMetadata_Team_CavernChallengeResultDefaultTypeInternal _CDOTAMatchMetadata_Team_CavernChallengeResult_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_ActionGrant::CDOTAMatchMetadata_Team_ActionGrant(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.action_id_)*/0u
  , /*decltype(_impl_.quantity_)*/0u
  , /*decltype(_impl_.audit_)*/0u
  , /*decltype(_impl_.requires_win_)*/false
  , /*decltype(_impl_.audit_data_)*/uint64_t{0u}} {}
struct CDOTAMatchMetadata_Team_ActionGrantDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_ActionGrantDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_ActionGrantDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_ActionGrant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchMetadata_Team_ActionGrantDefaultTypeInternal _CDOTAMatchMetadata_Team_ActionGrant_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_CandyGrant::CDOTAMatchMetadata_Team_CandyGrant(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.points_)*/0u
  , /*decltype(_impl_.reason_)*/0u} {}
struct CDOTAMatchMetadata_Team_CandyGrantDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_CandyGrantDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_CandyGrantDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_CandyGrant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchMetadata_Team_CandyGrantDefaultTypeInternal _CDOTAMatchMetadata_Team_CandyGrant_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_PeriodicResourceData::CDOTAMatchMetadata_Team_PeriodicResourceData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.periodic_resource_id_)*/0u
  , /*decltype(_impl_.remaining_)*/0u
  , /*decltype(_impl_.max_)*/0u} {}
struct CDOTAMatchMetadata_Team_PeriodicResourceDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_PeriodicResourceDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_PeriodicResourceDataDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_PeriodicResourceData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchMetadata_Team_PeriodicResourceDataDefaultTypeInternal _CDOTAMatchMetadata_Team_PeriodicResourceData_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_EventData::CDOTAMatchMetadata_Team_EventData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sub_challenges_with_progress_)*/{}
  , /*decltype(_impl_.cavern_challenge_map_results_)*/{}
  , /*decltype(_impl_.actions_granted_)*/{}
  , /*decltype(_impl_.candy_points_granted_)*/{}
  , /*decltype(_impl_.periodic_resources_)*/{}
  , /*decltype(_impl_.event_id_)*/0u
  , /*decltype(_impl_.event_points_)*/0u
  , /*decltype(_impl_.challenge_instance_id_)*/0u
  , /*decltype(_impl_.challenge_quest_id_)*/0u
  , /*decltype(_impl_.challenge_quest_challenge_id_)*/0u
  , /*decltype(_impl_.challenge_rank_completed_)*/0u
  , /*decltype(_impl_.challenge_rank_previously_completed_)*/0u
  , /*decltype(_impl_.wager_winnings_)*/0u
  , /*decltype(_impl_.cavern_challenge_winnings_)*/0u
  , /*decltype(_impl_.challenge_completed_)*/false
  , /*decltype(_impl_.event_owned_)*/false
  , /*decltype(_impl_.cavern_challenge_active_)*/false
  , /*decltype(_impl_.cavern_crawl_half_credit_)*/false
  , /*decltype(_impl_.amount_wagered_)*/0u
  , /*decltype(_impl_.periodic_point_adjustments_)*/0u
  , /*decltype(_impl_.cavern_challenge_plus_shard_winnings_)*/0u
  , /*decltype(_impl_.team_wager_bonus_pct_)*/0u
  , /*decltype(_impl_.wager_streak_pct_)*/0u
  , /*decltype(_impl_.active_season_id_)*/0u
  , /*decltype(_impl_.cavern_crawl_map_variant_)*/255u} {}
struct CDOTAMatchMetadata_Team_EventDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_EventDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_EventDataDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_EventData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchMetadata_Team_EventDataDefaultTypeInternal _CDOTAMatchMetadata_Team_EventData_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_FeaturedGamemodeProgress::CDOTAMatchMetadata_Team_FeaturedGamemodeProgress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_value_)*/0u
  , /*decltype(_impl_.end_value_)*/0u
  , /*decltype(_impl_.max_value_)*/0u} {}
struct CDOTAMatchMetadata_Team_FeaturedGamemodeProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_FeaturedGamemodeProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_FeaturedGamemodeProgressDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_FeaturedGamemodeProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchMetadata_Team_FeaturedGamemodeProgressDefaultTypeInternal _CDOTAMatchMetadata_Team_FeaturedGamemodeProgress_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_Player_ContractProgress::CDOTAMatchMetadata_Team_Player_ContractProgress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.event_id_)*/0u
  , /*decltype(_impl_.challenge_instance_id_)*/0u
  , /*decltype(_impl_.challenge_parameter_)*/0u
  , /*decltype(_impl_.contract_stars_)*/0u
  , /*decltype(_impl_.contract_slot_)*/0u
  , /*decltype(_impl_.completed_)*/false} {}
struct CDOTAMatchMetadata_Team_Player_ContractProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_Player_ContractProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_Player_ContractProgressDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_Player_ContractProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchMetadata_Team_Player_ContractProgressDefaultTypeInternal _CDOTAMatchMetadata_Team_Player_ContractProgress_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_Player::CDOTAMatchMetadata_Team_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ability_upgrades_)*/{}
  , /*decltype(_impl_.kills_)*/{}
  , /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.level_up_times_)*/{}
  , /*decltype(_impl_.graph_net_worth_)*/{}
  , /*decltype(_impl_.inventory_snapshot_)*/{}
  , /*decltype(_impl_.auto_style_criteria_)*/{}
  , /*decltype(_impl_.event_data_)*/{}
  , /*decltype(_impl_.strange_gem_progress_)*/{}
  , /*decltype(_impl_.victory_prediction_)*/{}
  , /*decltype(_impl_.contract_progress_)*/{}
  , /*decltype(_impl_.guild_ids_)*/{}
  , /*decltype(_impl_.graph_hero_damage_)*/{}
  , /*decltype(_impl_.equipped_econ_items_)*/{}
  , /*decltype(_impl_.featured_gamemode_progress_)*/nullptr
  , /*decltype(_impl_.player_slot_)*/0u
  , /*decltype(_impl_.avg_kills_x16_)*/0u
  , /*decltype(_impl_.avg_deaths_x16_)*/0u
  , /*decltype(_impl_.avg_assists_x16_)*/0u
  , /*decltype(_impl_.avg_gpm_x16_)*/0u
  , /*decltype(_impl_.avg_xpm_x16_)*/0u
  , /*decltype(_impl_.best_kills_x16_)*/0u
  , /*decltype(_impl_.best_assists_x16_)*/0u
  , /*decltype(_impl_.best_gpm_x16_)*/0u
  , /*decltype(_impl_.best_xpm_x16_)*/0u
  , /*decltype(_impl_.win_streak_)*/0u
  , /*decltype(_impl_.best_win_streak_)*/0u
  , /*decltype(_impl_.fight_score_)*/0
  , /*decltype(_impl_.farm_score_)*/0
  , /*decltype(_impl_.support_score_)*/0
  , /*decltype(_impl_.push_score_)*/0
  , /*decltype(_impl_.avg_stats_calibrated_)*/false
  , /*decltype(_impl_.hero_xp_)*/0u
  , /*decltype(_impl_.camps_stacked_)*/0u
  , /*decltype(_impl_.lane_selection_flags_)*/0u
  , /*decltype(_impl_.rampages_)*/0u
  , /*decltype(_impl_.triple_kills_)*/0u
  , /*decltype(_impl_.aegis_snatched_)*/0u
  , /*decltype(_impl_.rapiers_purchased_)*/0u
  , /*decltype(_impl_.couriers_killed_)*/0u
  , /*decltype(_impl_.net_worth_rank_)*/0u
  , /*decltype(_impl_.support_gold_spent_)*/0u
  , /*decltype(_impl_.observer_wards_placed_)*/0u
  , /*decltype(_impl_.sentry_wards_placed_)*/0u
  , /*decltype(_impl_.wards_dewarded_)*/0u
  , /*decltype(_impl_.stun_duration_)*/0
  , /*decltype(_impl_.rank_mmr_boost_type_)*/0
  , /*decltype(_impl_.team_number_)*/0
  , /*decltype(_impl_.team_slot_)*/0u
  , /*decltype(_impl_.featured_hero_sticker_index_)*/0u
  , /*decltype(_impl_.featured_hero_sticker_quality_)*/0u} {}
struct CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal _CDOTAMatchMetadata_Team_Player_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Team::CDOTAMatchMetadata_Team(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.graph_experience_)*/{}
  , /*decltype(_impl_.graph_gold_earned_)*/{}
  , /*decltype(_impl_.graph_net_worth_)*/{}
  , /*decltype(_impl_.dota_team_)*/0u
  , /*decltype(_impl_.cm_first_pick_)*/false
  , /*decltype(_impl_.cm_penalty_)*/0u
  , /*decltype(_impl_.cm_captain_player_id_)*/-1} {}
struct CDOTAMatchMetadata_TeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchMetadata_TeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_TeamDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchMetadata_TeamDefaultTypeInternal _CDOTAMatchMetadata_Team_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.progress_)*/0u
  , /*decltype(_impl_.player_slot_)*/0u} {}
struct CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgressDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgressDefaultTypeInternal _CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchMetadata_GuildChallengeProgress::CDOTAMatchMetadata_GuildChallengeProgress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.individual_progress_)*/{}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.event_id_)*/0
  , /*decltype(_impl_.challenge_instance_id_)*/0u
  , /*decltype(_impl_.challenge_parameter_)*/0u
  , /*decltype(_impl_.challenge_timestamp_)*/0u
  , /*decltype(_impl_.challenge_progress_at_start_)*/0u
  , /*decltype(_impl_.challenge_progress_accumulated_)*/0u} {}
struct CDOTAMatchMetadata_GuildChallengeProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchMetadata_GuildChallengeProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_GuildChallengeProgressDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_GuildChallengeProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchMetadata_GuildChallengeProgressDefaultTypeInternal _CDOTAMatchMetadata_GuildChallengeProgress_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchMetadata_Tip::CDOTAMatchMetadata_Tip(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_player_slot_)*/0u
  , /*decltype(_impl_.target_player_slot_)*/0u
  , /*decltype(_impl_.tip_amount_)*/0u
  , /*decltype(_impl_.event_id_)*/0} {}
struct CDOTAMatchMetadata_TipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchMetadata_TipDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_TipDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Tip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchMetadata_TipDefaultTypeInternal _CDOTAMatchMetadata_Tip_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchMetadata::CDOTAMatchMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.teams_)*/{}
  , /*decltype(_impl_.guild_challenge_progress_)*/{}
  , /*decltype(_impl_.match_tips_)*/{}
  , /*decltype(_impl_.event_game_custom_table_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.custom_post_game_table_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.matchmaking_stats_)*/nullptr
  , /*decltype(_impl_.mvp_data_)*/nullptr
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.report_until_time_)*/uint64_t{0u}
  , /*decltype(_impl_.primary_event_id_)*/0u} {}
struct CDOTAMatchMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchMetadataDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchMetadataDefaultTypeInternal _CDOTAMatchMetadata_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_StringName::CDOTAMatchPrivateMetadata_StringName(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u} {}
struct CDOTAMatchPrivateMetadata_StringNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_StringNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_StringNameDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_StringName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchPrivateMetadata_StringNameDefaultTypeInternal _CDOTAMatchPrivateMetadata_StringName_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.damage_)*/0u} {}
struct CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTargetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTargetDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTargetDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.by_hero_targets_)*/{}
  , /*decltype(_impl_.source_unit_index_)*/0u
  , /*decltype(_impl_.ability_id_)*/-1} {}
struct CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbilityDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbilityDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.healing_)*/0u} {}
struct CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTargetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTargetDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTargetDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.by_hero_targets_)*/{}
  , /*decltype(_impl_.source_unit_index_)*/0u
  , /*decltype(_impl_.ability_id_)*/-1} {}
struct CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbilityDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbilityDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.damage_by_ability_)*/{}
  , /*decltype(_impl_.healing_by_ability_)*/{}
  , /*decltype(_impl_.game_time_)*/0} {}
struct CDOTAMatchPrivateMetadata_Team_Player_CombatSegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_Team_Player_CombatSegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_Team_Player_CombatSegmentDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team_Player_CombatSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchPrivateMetadata_Team_Player_CombatSegmentDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.elapsed_duration_)*/0
  , /*decltype(_impl_.is_hidden_)*/false} {}
struct CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTargetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTargetDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTargetDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.by_hero_targets_)*/{}
  , /*decltype(_impl_.buff_modifier_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buff_ability_id_)*/-1} {}
struct CDOTAMatchPrivateMetadata_Team_Player_BuffRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_Team_Player_BuffRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_Team_Player_BuffRecordDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team_Player_BuffRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchPrivateMetadata_Team_Player_BuffRecordDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.creep_)*/0u
  , /*decltype(_impl_.heroes_)*/0u
  , /*decltype(_impl_.bounty_runes_)*/0u
  , /*decltype(_impl_.passive_)*/0u
  , /*decltype(_impl_.buildings_)*/0u
  , /*decltype(_impl_.abilities_)*/0u
  , /*decltype(_impl_.wards_)*/0u
  , /*decltype(_impl_.other_)*/0u} {}
struct CDOTAMatchPrivateMetadata_Team_Player_GoldReceivedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_Team_Player_GoldReceivedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_Team_Player_GoldReceivedDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team_Player_GoldReceived _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchPrivateMetadata_Team_Player_GoldReceivedDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_GoldReceived_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_Team_Player_XPReceived::CDOTAMatchPrivateMetadata_Team_Player_XPReceived(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.creep_)*/0u
  , /*decltype(_impl_.heroes_)*/0u
  , /*decltype(_impl_.roshan_)*/0u
  , /*decltype(_impl_.tome_of_knowledge_)*/0u
  , /*decltype(_impl_.outpost_)*/0u
  , /*decltype(_impl_.other_)*/0u} {}
struct CDOTAMatchPrivateMetadata_Team_Player_XPReceivedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_Team_Player_XPReceivedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_Team_Player_XPReceivedDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team_Player_XPReceived _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchPrivateMetadata_Team_Player_XPReceivedDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_XPReceived_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_Team_Player::CDOTAMatchPrivateMetadata_Team_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.combat_segments_)*/{}
  , /*decltype(_impl_.damage_unit_names_)*/{}
  , /*decltype(_impl_.buff_records_)*/{}
  , /*decltype(_impl_.graph_kills_)*/{}
  , /*decltype(_impl_.graph_deaths_)*/{}
  , /*decltype(_impl_.graph_assists_)*/{}
  , /*decltype(_impl_.graph_lasthits_)*/{}
  , /*decltype(_impl_.graph_denies_)*/{}
  , /*decltype(_impl_.position_stream_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gold_received_)*/nullptr
  , /*decltype(_impl_.xp_received_)*/nullptr
  , /*decltype(_impl_.player_slot_)*/0u
  , /*decltype(_impl_.team_number_)*/0
  , /*decltype(_impl_.team_slot_)*/0u} {}
struct CDOTAMatchPrivateMetadata_Team_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_Team_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_Team_PlayerDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchPrivateMetadata_Team_PlayerDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_Team_Building::CDOTAMatchPrivateMetadata_Team_Building(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unit_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_quant_x_)*/0u
  , /*decltype(_impl_.position_quant_y_)*/0u
  , /*decltype(_impl_.death_time_)*/0} {}
struct CDOTAMatchPrivateMetadata_Team_BuildingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_Team_BuildingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_Team_BuildingDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team_Building _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchPrivateMetadata_Team_BuildingDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Building_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_Team::CDOTAMatchPrivateMetadata_Team(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.buildings_)*/{}
  , /*decltype(_impl_.dota_team_)*/0u} {}
struct CDOTAMatchPrivateMetadata_TeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata_TeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_TeamDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchPrivateMetadata_TeamDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_default_instance_;
PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadata::CDOTAMatchPrivateMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.teams_)*/{}
  , /*decltype(_impl_.graph_win_probability_)*/{}
  , /*decltype(_impl_.string_names_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CDOTAMatchPrivateMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAMatchPrivateMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadataDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAMatchPrivateMetadataDefaultTypeInternal _CDOTAMatchPrivateMetadata_default_instance_;
static ::_pb::Metadata file_level_metadata_dota_5fmatch_5fmetadata_2eproto[36];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_dota_5fmatch_5fmetadata_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dota_5fmatch_5fmetadata_2eproto = nullptr;

const uint32_t TableStruct_dota_5fmatch_5fmetadata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadataFile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadataFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadataFile, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadataFile, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadataFile, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadataFile, _impl_.private_metadata_),
  3,
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_EconItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_EconItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_EconItem, _impl_.def_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_EconItem, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_EconItem, _impl_.attribute_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_EconItem, _impl_.style_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_EconItem, _impl_.equipped_state_),
  0,
  2,
  ~0u,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_PlayerKill, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_PlayerKill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_PlayerKill, _impl_.victim_slot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_PlayerKill, _impl_.count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ItemPurchase, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ItemPurchase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ItemPurchase, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ItemPurchase, _impl_.purchase_time_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, _impl_.game_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, _impl_.deaths_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, _impl_.assists_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, _impl_.backpack_item_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, _impl_.neutral_item_id_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_AutoStyleCriteria, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_AutoStyleCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_AutoStyleCriteria, _impl_.name_token_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_AutoStyleCriteria, _impl_.value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, _impl_.kill_eater_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, _impl_.gem_item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, _impl_.required_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, _impl_.starting_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, _impl_.ending_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, _impl_.owner_item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, _impl_.owner_item_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, _impl_.item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, _impl_.starting_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, _impl_.is_victory_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, _impl_.slot_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, _impl_.start_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, _impl_.end_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, _impl_.completed_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CavernChallengeResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CavernChallengeResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CavernChallengeResult, _impl_.completed_path_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CavernChallengeResult, _impl_.claimed_room_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, _impl_.action_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, _impl_.audit_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, _impl_.requires_win_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, _impl_.audit_data_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CandyGrant, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CandyGrant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CandyGrant, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CandyGrant, _impl_.reason_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_PeriodicResourceData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_PeriodicResourceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_PeriodicResourceData, _impl_.periodic_resource_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_PeriodicResourceData, _impl_.remaining_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_PeriodicResourceData, _impl_.max_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.event_points_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.challenge_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.challenge_quest_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.challenge_quest_challenge_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.challenge_completed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.challenge_rank_completed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.challenge_rank_previously_completed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.event_owned_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.sub_challenges_with_progress_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.wager_winnings_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.cavern_challenge_active_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.cavern_challenge_winnings_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.amount_wagered_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.periodic_point_adjustments_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.cavern_challenge_map_results_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.cavern_challenge_plus_shard_winnings_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.actions_granted_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.cavern_crawl_map_variant_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.team_wager_bonus_pct_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.wager_streak_pct_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.candy_points_granted_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.active_season_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.cavern_crawl_half_credit_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _impl_.periodic_resources_),
  0,
  1,
  2,
  3,
  4,
  9,
  5,
  6,
  10,
  ~0u,
  7,
  11,
  8,
  13,
  14,
  ~0u,
  15,
  ~0u,
  19,
  16,
  17,
  ~0u,
  18,
  12,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_FeaturedGamemodeProgress, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_FeaturedGamemodeProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_FeaturedGamemodeProgress, _impl_.start_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_FeaturedGamemodeProgress, _impl_.end_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_FeaturedGamemodeProgress, _impl_.max_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player_ContractProgress, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player_ContractProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player_ContractProgress, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player_ContractProgress, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player_ContractProgress, _impl_.challenge_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player_ContractProgress, _impl_.challenge_parameter_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player_ContractProgress, _impl_.contract_stars_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player_ContractProgress, _impl_.contract_slot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player_ContractProgress, _impl_.completed_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.ability_upgrades_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.player_slot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.avg_kills_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.avg_deaths_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.avg_assists_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.avg_gpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.avg_xpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.best_kills_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.best_assists_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.best_gpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.best_xpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.win_streak_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.best_win_streak_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.fight_score_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.farm_score_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.support_score_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.push_score_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.level_up_times_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.graph_net_worth_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.inventory_snapshot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.avg_stats_calibrated_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.auto_style_criteria_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.event_data_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.strange_gem_progress_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.hero_xp_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.camps_stacked_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.victory_prediction_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.lane_selection_flags_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.rampages_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.triple_kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.aegis_snatched_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.rapiers_purchased_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.couriers_killed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.net_worth_rank_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.support_gold_spent_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.observer_wards_placed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.sentry_wards_placed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.wards_dewarded_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.stun_duration_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.rank_mmr_boost_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.contract_progress_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.guild_ids_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.graph_hero_damage_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.team_number_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.team_slot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.featured_gamemode_progress_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.featured_hero_sticker_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.featured_hero_sticker_quality_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _impl_.equipped_econ_items_),
  ~0u,
  1,
  ~0u,
  ~0u,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  ~0u,
  ~0u,
  ~0u,
  17,
  ~0u,
  ~0u,
  ~0u,
  18,
  19,
  ~0u,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  ~0u,
  ~0u,
  ~0u,
  33,
  34,
  0,
  35,
  36,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, _impl_.dota_team_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, _impl_.graph_experience_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, _impl_.graph_gold_earned_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, _impl_.graph_net_worth_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, _impl_.cm_first_pick_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, _impl_.cm_captain_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, _impl_.cm_penalty_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress, _impl_.player_slot_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress, _impl_.challenge_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress, _impl_.challenge_parameter_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress, _impl_.challenge_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress, _impl_.challenge_progress_at_start_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress, _impl_.challenge_progress_accumulated_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress, _impl_.individual_progress_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Tip, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Tip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Tip, _impl_.source_player_slot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Tip, _impl_.target_player_slot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Tip, _impl_.tip_amount_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Tip, _impl_.event_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, _impl_.teams_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, _impl_.report_until_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, _impl_.event_game_custom_table_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, _impl_.primary_event_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, _impl_.matchmaking_stats_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, _impl_.mvp_data_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, _impl_.guild_challenge_progress_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, _impl_.custom_post_game_table_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, _impl_.match_tips_),
  ~0u,
  4,
  5,
  0,
  6,
  2,
  3,
  ~0u,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_StringName, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_StringName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_StringName, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_StringName, _impl_.name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget, _impl_.damage_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility, _impl_.source_unit_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility, _impl_.by_hero_targets_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget, _impl_.healing_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility, _impl_.source_unit_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility, _impl_.by_hero_targets_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment, _impl_.game_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment, _impl_.damage_by_ability_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment, _impl_.healing_by_ability_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget, _impl_.elapsed_duration_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget, _impl_.is_hidden_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord, _impl_.buff_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord, _impl_.buff_modifier_name_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord, _impl_.by_hero_targets_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, _impl_.creep_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, _impl_.heroes_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, _impl_.bounty_runes_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, _impl_.passive_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, _impl_.buildings_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, _impl_.abilities_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, _impl_.wards_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, _impl_.other_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_XPReceived, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_XPReceived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_XPReceived, _impl_.creep_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_XPReceived, _impl_.heroes_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_XPReceived, _impl_.roshan_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_XPReceived, _impl_.tome_of_knowledge_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_XPReceived, _impl_.outpost_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_XPReceived, _impl_.other_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, _impl_.player_slot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, _impl_.position_stream_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, _impl_.combat_segments_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, _impl_.damage_unit_names_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, _impl_.buff_records_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, _impl_.graph_kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, _impl_.graph_deaths_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, _impl_.graph_assists_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, _impl_.graph_lasthits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, _impl_.graph_denies_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, _impl_.gold_received_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, _impl_.xp_received_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, _impl_.team_number_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, _impl_.team_slot_),
  3,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Building, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Building, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Building, _impl_.unit_name_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Building, _impl_.position_quant_x_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Building, _impl_.position_quant_y_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Building, _impl_.death_time_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team, _impl_.dota_team_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team, _impl_.buildings_),
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata, _impl_.teams_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata, _impl_.graph_win_probability_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata, _impl_.string_names_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::CDOTAMatchMetadataFile)},
  { 14, 25, -1, sizeof(::CDOTAMatchMetadata_EconItem)},
  { 30, 38, -1, sizeof(::CDOTAMatchMetadata_Team_PlayerKill)},
  { 40, 48, -1, sizeof(::CDOTAMatchMetadata_Team_ItemPurchase)},
  { 50, 64, -1, sizeof(::CDOTAMatchMetadata_Team_InventorySnapshot)},
  { 72, 80, -1, sizeof(::CDOTAMatchMetadata_Team_AutoStyleCriteria)},
  { 82, 95, -1, sizeof(::CDOTAMatchMetadata_Team_StrangeGemProgress)},
  { 102, 112, -1, sizeof(::CDOTAMatchMetadata_Team_VictoryPrediction)},
  { 116, 126, -1, sizeof(::CDOTAMatchMetadata_Team_SubChallenge)},
  { 130, 138, -1, sizeof(::CDOTAMatchMetadata_Team_CavernChallengeResult)},
  { 140, 151, -1, sizeof(::CDOTAMatchMetadata_Team_ActionGrant)},
  { 156, 164, -1, sizeof(::CDOTAMatchMetadata_Team_CandyGrant)},
  { 166, 175, -1, sizeof(::CDOTAMatchMetadata_Team_PeriodicResourceData)},
  { 178, 209, -1, sizeof(::CDOTAMatchMetadata_Team_EventData)},
  { 234, 243, -1, sizeof(::CDOTAMatchMetadata_Team_FeaturedGamemodeProgress)},
  { 246, 259, -1, sizeof(::CDOTAMatchMetadata_Team_Player_ContractProgress)},
  { 266, 323, -1, sizeof(::CDOTAMatchMetadata_Team_Player)},
  { 374, 388, -1, sizeof(::CDOTAMatchMetadata_Team)},
  { 396, 404, -1, sizeof(::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress)},
  { 406, 420, -1, sizeof(::CDOTAMatchMetadata_GuildChallengeProgress)},
  { 428, 438, -1, sizeof(::CDOTAMatchMetadata_Tip)},
  { 442, 458, -1, sizeof(::CDOTAMatchMetadata)},
  { 468, 476, -1, sizeof(::CDOTAMatchPrivateMetadata_StringName)},
  { 478, 486, -1, sizeof(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget)},
  { 488, 497, -1, sizeof(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility)},
  { 500, 508, -1, sizeof(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget)},
  { 510, 519, -1, sizeof(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility)},
  { 522, 531, -1, sizeof(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment)},
  { 534, 543, -1, sizeof(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget)},
  { 546, 555, -1, sizeof(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord)},
  { 558, 572, -1, sizeof(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived)},
  { 580, 592, -1, sizeof(::CDOTAMatchPrivateMetadata_Team_Player_XPReceived)},
  { 598, 618, -1, sizeof(::CDOTAMatchPrivateMetadata_Team_Player)},
  { 632, 642, -1, sizeof(::CDOTAMatchPrivateMetadata_Team_Building)},
  { 646, 655, -1, sizeof(::CDOTAMatchPrivateMetadata_Team)},
  { 658, -1, -1, sizeof(::CDOTAMatchPrivateMetadata)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CDOTAMatchMetadataFile_default_instance_._instance,
  &::_CDOTAMatchMetadata_EconItem_default_instance_._instance,
  &::_CDOTAMatchMetadata_Team_PlayerKill_default_instance_._instance,
  &::_CDOTAMatchMetadata_Team_ItemPurchase_default_instance_._instance,
  &::_CDOTAMatchMetadata_Team_InventorySnapshot_default_instance_._instance,
  &::_CDOTAMatchMetadata_Team_AutoStyleCriteria_default_instance_._instance,
  &::_CDOTAMatchMetadata_Team_StrangeGemProgress_default_instance_._instance,
  &::_CDOTAMatchMetadata_Team_VictoryPrediction_default_instance_._instance,
  &::_CDOTAMatchMetadata_Team_SubChallenge_default_instance_._instance,
  &::_CDOTAMatchMetadata_Team_CavernChallengeResult_default_instance_._instance,
  &::_CDOTAMatchMetadata_Team_ActionGrant_default_instance_._instance,
  &::_CDOTAMatchMetadata_Team_CandyGrant_default_instance_._instance,
  &::_CDOTAMatchMetadata_Team_PeriodicResourceData_default_instance_._instance,
  &::_CDOTAMatchMetadata_Team_EventData_default_instance_._instance,
  &::_CDOTAMatchMetadata_Team_FeaturedGamemodeProgress_default_instance_._instance,
  &::_CDOTAMatchMetadata_Team_Player_ContractProgress_default_instance_._instance,
  &::_CDOTAMatchMetadata_Team_Player_default_instance_._instance,
  &::_CDOTAMatchMetadata_Team_default_instance_._instance,
  &::_CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress_default_instance_._instance,
  &::_CDOTAMatchMetadata_GuildChallengeProgress_default_instance_._instance,
  &::_CDOTAMatchMetadata_Tip_default_instance_._instance,
  &::_CDOTAMatchMetadata_default_instance_._instance,
  &::_CDOTAMatchPrivateMetadata_StringName_default_instance_._instance,
  &::_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget_default_instance_._instance,
  &::_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_default_instance_._instance,
  &::_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget_default_instance_._instance,
  &::_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_default_instance_._instance,
  &::_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_default_instance_._instance,
  &::_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget_default_instance_._instance,
  &::_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_default_instance_._instance,
  &::_CDOTAMatchPrivateMetadata_Team_Player_GoldReceived_default_instance_._instance,
  &::_CDOTAMatchPrivateMetadata_Team_Player_XPReceived_default_instance_._instance,
  &::_CDOTAMatchPrivateMetadata_Team_Player_default_instance_._instance,
  &::_CDOTAMatchPrivateMetadata_Team_Building_default_instance_._instance,
  &::_CDOTAMatchPrivateMetadata_Team_default_instance_._instance,
  &::_CDOTAMatchPrivateMetadata_default_instance_._instance,
};

const char descriptor_table_protodef_dota_5fmatch_5fmetadata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031dota_match_metadata.proto\032\025base_gcmess"
  "ages.proto\032-dota_gcmessages_common_match"
  "_management.proto\032\"dota_gcmessages_commo"
  "n_lobby.proto\032\034dota_gcmessages_common.pr"
  "oto\032\027dota_shared_enums.proto\"|\n\026CDOTAMat"
  "chMetadataFile\022\017\n\007version\030\001 \002(\005\022\020\n\010match"
  "_id\030\002 \002(\004\022%\n\010metadata\030\003 \001(\0132\023.CDOTAMatch"
  "Metadata\022\030\n\020private_metadata\030\005 \001(\014\"\276*\n\022C"
  "DOTAMatchMetadata\022\'\n\005teams\030\001 \003(\0132\030.CDOTA"
  "MatchMetadata.Team\022\020\n\010lobby_id\030\003 \001(\006\022\031\n\021"
  "report_until_time\030\004 \001(\006\022\037\n\027event_game_cu"
  "stom_table\030\005 \001(\014\022\030\n\020primary_event_id\030\006 \001"
  "(\r\0225\n\021matchmaking_stats\030\010 \001(\0132\032.CMsgMatc"
  "hMatchmakingStats\022\033\n\010mvp_data\030\t \001(\0132\t.CM"
  "vpData\022L\n\030guild_challenge_progress\030\n \003(\013"
  "2*.CDOTAMatchMetadata.GuildChallengeProg"
  "ress\022\036\n\026custom_post_game_table\030\013 \001(\014\022+\n\n"
  "match_tips\030\014 \003(\0132\027.CDOTAMatchMetadata.Ti"
  "p\032\233\001\n\010EconItem\022\021\n\tdef_index\030\001 \001(\r\022\022\n\007qua"
  "lity\030\002 \001(\r:\0014\022(\n\tattribute\030\003 \003(\0132\025.CSOEc"
  "onItemAttribute\022\020\n\005style\030\004 \001(\r:\0010\022,\n\016equ"
  "ipped_state\030\005 \003(\0132\024.CSOEconItemEquipped\032"
  "\366!\n\004Team\022\021\n\tdota_team\030\001 \001(\r\0220\n\007players\030\002"
  " \003(\0132\037.CDOTAMatchMetadata.Team.Player\022\030\n"
  "\020graph_experience\030\003 \003(\002\022\031\n\021graph_gold_ea"
  "rned\030\004 \003(\002\022\027\n\017graph_net_worth\030\005 \003(\002\022\025\n\rc"
  "m_first_pick\030\006 \001(\010\022 \n\024cm_captain_player_"
  "id\030\007 \001(\005:\002-1\022\022\n\ncm_penalty\030\n \001(\r\0320\n\nPlay"
  "erKill\022\023\n\013victim_slot\030\001 \001(\r\022\r\n\005count\030\002 \001"
  "(\r\032:\n\014ItemPurchase\022\023\n\007item_id\030\001 \001(\005:\002-1\022"
  "\025\n\rpurchase_time\030\002 \001(\005\032\255\001\n\021InventorySnap"
  "shot\022\017\n\007item_id\030\001 \003(\005\022\021\n\tgame_time\030\002 \001(\005"
  "\022\r\n\005kills\030\003 \001(\r\022\016\n\006deaths\030\004 \001(\r\022\017\n\007assis"
  "ts\030\005 \001(\r\022\r\n\005level\030\006 \001(\r\022\030\n\020backpack_item"
  "_id\030\007 \003(\005\022\033\n\017neutral_item_id\030\010 \001(\005:\002-1\0326"
  "\n\021AutoStyleCriteria\022\022\n\nname_token\030\001 \001(\r\022"
  "\r\n\005value\030\002 \001(\002\032\306\001\n\022StrangeGemProgress\022\027\n"
  "\017kill_eater_type\030\001 \001(\r\022\032\n\022gem_item_def_i"
  "ndex\030\002 \001(\r\022\030\n\020required_hero_id\030\003 \001(\r\022\026\n\016"
  "starting_value\030\004 \001(\r\022\024\n\014ending_value\030\005 \001"
  "(\r\022\034\n\024owner_item_def_index\030\006 \001(\r\022\025\n\rowne"
  "r_item_id\030\007 \001(\004\032h\n\021VictoryPrediction\022\017\n\007"
  "item_id\030\001 \001(\004\022\026\n\016item_def_index\030\002 \001(\r\022\026\n"
  "\016starting_value\030\003 \001(\r\022\022\n\nis_victory\030\004 \001("
  "\010\032Z\n\014SubChallenge\022\017\n\007slot_id\030\001 \001(\r\022\023\n\013st"
  "art_value\030\002 \001(\r\022\021\n\tend_value\030\003 \001(\r\022\021\n\tco"
  "mpleted\030\004 \001(\010\032U\n\025CavernChallengeResult\022\036"
  "\n\021completed_path_id\030\001 \001(\r:\003255\022\034\n\017claime"
  "d_room_id\030\002 \001(\r:\003255\032k\n\013ActionGrant\022\021\n\ta"
  "ction_id\030\001 \001(\r\022\020\n\010quantity\030\002 \001(\r\022\r\n\005audi"
  "t\030\003 \001(\r\022\024\n\014requires_win\030\004 \001(\010\022\022\n\naudit_d"
  "ata\030\005 \001(\004\032,\n\nCandyGrant\022\016\n\006points\030\001 \001(\r\022"
  "\016\n\006reason\030\002 \001(\r\032T\n\024PeriodicResourceData\022"
  "\034\n\024periodic_resource_id\030\001 \001(\r\022\021\n\tremaini"
  "ng\030\002 \001(\r\022\013\n\003max\030\003 \001(\r\032\346\007\n\tEventData\022\020\n\010e"
  "vent_id\030\001 \001(\r\022\024\n\014event_points\030\002 \001(\r\022\035\n\025c"
  "hallenge_instance_id\030\003 \001(\r\022\032\n\022challenge_"
  "quest_id\030\004 \001(\r\022$\n\034challenge_quest_challe"
  "nge_id\030\005 \001(\r\022\033\n\023challenge_completed\030\006 \001("
  "\010\022 \n\030challenge_rank_completed\030\007 \001(\r\022+\n#c"
  "hallenge_rank_previously_completed\030\010 \001(\r"
  "\022\023\n\013event_owned\030\t \001(\010\022K\n\034sub_challenges_"
  "with_progress\030\n \003(\0132%.CDOTAMatchMetadata"
  ".Team.SubChallenge\022\026\n\016wager_winnings\030\013 \001"
  "(\r\022\037\n\027cavern_challenge_active\030\014 \001(\010\022!\n\031c"
  "avern_challenge_winnings\030\r \001(\r\022\026\n\016amount"
  "_wagered\030\016 \001(\r\022\"\n\032periodic_point_adjustm"
  "ents\030\020 \001(\r\022T\n\034cavern_challenge_map_resul"
  "ts\030\021 \003(\0132..CDOTAMatchMetadata.Team.Caver"
  "nChallengeResult\022,\n$cavern_challenge_plu"
  "s_shard_winnings\030\022 \001(\r\022=\n\017actions_grante"
  "d\030\023 \003(\0132$.CDOTAMatchMetadata.Team.Action"
  "Grant\022%\n\030cavern_crawl_map_variant\030\024 \001(\r:"
  "\003255\022\034\n\024team_wager_bonus_pct\030\025 \001(\r\022\030\n\020wa"
  "ger_streak_pct\030\026 \001(\r\022A\n\024candy_points_gra"
  "nted\030\027 \003(\0132#.CDOTAMatchMetadata.Team.Can"
  "dyGrant\022\030\n\020active_season_id\030\030 \001(\r\022 \n\030cav"
  "ern_crawl_half_credit\030\031 \001(\010\022I\n\022periodic_"
  "resources\030\032 \003(\0132-.CDOTAMatchMetadata.Tea"
  "m.PeriodicResourceData\032U\n\030FeaturedGamemo"
  "deProgress\022\023\n\013start_value\030\001 \001(\r\022\021\n\tend_v"
  "alue\030\002 \001(\r\022\021\n\tmax_value\030\003 \001(\r\032\240\017\n\006Player"
  "\022\030\n\020ability_upgrades\030\002 \003(\005\022\023\n\013player_slo"
  "t\030\003 \001(\r\0222\n\005kills\030\005 \003(\0132#.CDOTAMatchMetad"
  "ata.Team.PlayerKill\0224\n\005items\030\006 \003(\0132%.CDO"
  "TAMatchMetadata.Team.ItemPurchase\022\025\n\ravg"
  "_kills_x16\030\007 \001(\r\022\026\n\016avg_deaths_x16\030\010 \001(\r"
  "\022\027\n\017avg_assists_x16\030\t \001(\r\022\023\n\013avg_gpm_x16"
  "\030\n \001(\r\022\023\n\013avg_xpm_x16\030\013 \001(\r\022\026\n\016best_kill"
  "s_x16\030\014 \001(\r\022\030\n\020best_assists_x16\030\r \001(\r\022\024\n"
  "\014best_gpm_x16\030\016 \001(\r\022\024\n\014best_xpm_x16\030\017 \001("
  "\r\022\022\n\nwin_streak\030\020 \001(\r\022\027\n\017best_win_streak"
  "\030\021 \001(\r\022\023\n\013fight_score\030\022 \001(\002\022\022\n\nfarm_scor"
  "e\030\023 \001(\002\022\025\n\rsupport_score\030\024 \001(\002\022\022\n\npush_s"
  "core\030\025 \001(\002\022\026\n\016level_up_times\030\026 \003(\r\022\027\n\017gr"
  "aph_net_worth\030\027 \003(\002\022F\n\022inventory_snapsho"
  "t\030\030 \003(\0132*.CDOTAMatchMetadata.Team.Invent"
  "orySnapshot\022\034\n\024avg_stats_calibrated\030\031 \001("
  "\010\022G\n\023auto_style_criteria\030\032 \003(\0132*.CDOTAMa"
  "tchMetadata.Team.AutoStyleCriteria\0226\n\nev"
  "ent_data\030\035 \003(\0132\".CDOTAMatchMetadata.Team"
  ".EventData\022I\n\024strange_gem_progress\030\036 \003(\013"
  "2+.CDOTAMatchMetadata.Team.StrangeGemPro"
  "gress\022\017\n\007hero_xp\030\037 \001(\r\022\025\n\rcamps_stacked\030"
  "  \001(\r\022F\n\022victory_prediction\030! \003(\0132*.CDOT"
  "AMatchMetadata.Team.VictoryPrediction\022\034\n"
  "\024lane_selection_flags\030\" \001(\r\022\020\n\010rampages\030"
  "# \001(\r\022\024\n\014triple_kills\030$ \001(\r\022\026\n\016aegis_sna"
  "tched\030% \001(\r\022\031\n\021rapiers_purchased\030& \001(\r\022\027"
  "\n\017couriers_killed\030\' \001(\r\022\026\n\016net_worth_ran"
  "k\030( \001(\r\022\032\n\022support_gold_spent\030) \001(\r\022\035\n\025o"
  "bserver_wards_placed\030* \001(\r\022\033\n\023sentry_war"
  "ds_placed\030+ \001(\r\022\026\n\016wards_dewarded\030, \001(\r\022"
  "\025\n\rstun_duration\030- \001(\002\022I\n\023rank_mmr_boost"
  "_type\030. \001(\0162\022.EDOTAMMRBoostType:\030k_EDOTA"
  "MMRBoostType_None\022K\n\021contract_progress\0300"
  " \003(\01320.CDOTAMatchMetadata.Team.Player.Co"
  "ntractProgress\022\021\n\tguild_ids\0301 \003(\r\022\031\n\021gra"
  "ph_hero_damage\0302 \003(\002\022:\n\013team_number\0303 \001("
  "\0162\r.DOTA_GC_TEAM:\026DOTA_GC_TEAM_GOOD_GUYS"
  "\022\021\n\tteam_slot\0304 \001(\r\022U\n\032featured_gamemode"
  "_progress\0305 \001(\01321.CDOTAMatchMetadata.Tea"
  "m.FeaturedGamemodeProgress\022#\n\033featured_h"
  "ero_sticker_index\0306 \001(\r\022%\n\035featured_hero"
  "_sticker_quality\0307 \001(\r\0229\n\023equipped_econ_"
  "items\0308 \003(\0132\034.CDOTAMatchMetadata.EconIte"
  "m\032\264\001\n\020ContractProgress\022\020\n\010guild_id\030\001 \001(\r"
  "\022\020\n\010event_id\030\002 \001(\r\022\035\n\025challenge_instance"
  "_id\030\003 \001(\r\022\033\n\023challenge_parameter\030\004 \001(\r\022\026"
  "\n\016contract_stars\030\005 \001(\r\022\025\n\rcontract_slot\030"
  "\006 \001(\r\022\021\n\tcompleted\030\007 \001(\010\032\223\003\n\026GuildChalle"
  "ngeProgress\022\020\n\010guild_id\030\001 \001(\r\022(\n\010event_i"
  "d\030\002 \001(\0162\007.EEvent:\rEVENT_ID_NONE\022\035\n\025chall"
  "enge_instance_id\030\003 \001(\r\022\033\n\023challenge_para"
  "meter\030\004 \001(\r\022\033\n\023challenge_timestamp\030\005 \001(\r"
  "\022#\n\033challenge_progress_at_start\030\006 \001(\r\022&\n"
  "\036challenge_progress_accumulated\030\007 \001(\r\022Z\n"
  "\023individual_progress\030\010 \003(\0132=.CDOTAMatchM"
  "etadata.GuildChallengeProgress.Individua"
  "lProgress\032;\n\022IndividualProgress\022\020\n\010progr"
  "ess\030\002 \001(\r\022\023\n\013player_slot\030\003 \001(\r\032{\n\003Tip\022\032\n"
  "\022source_player_slot\030\001 \001(\r\022\032\n\022target_play"
  "er_slot\030\002 \001(\r\022\022\n\ntip_amount\030\003 \001(\r\022(\n\010eve"
  "nt_id\030\004 \001(\0162\007.EEvent:\rEVENT_ID_NONE\"\275\021\n\031"
  "CDOTAMatchPrivateMetadata\022.\n\005teams\030\001 \003(\013"
  "2\037.CDOTAMatchPrivateMetadata.Team\022\035\n\025gra"
  "ph_win_probability\030\002 \003(\002\022;\n\014string_names"
  "\030\003 \003(\0132%.CDOTAMatchPrivateMetadata.Strin"
  "gName\032&\n\nStringName\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030"
  "\002 \001(\t\032\353\017\n\004Team\022\021\n\tdota_team\030\001 \001(\r\0227\n\007pla"
  "yers\030\002 \003(\0132&.CDOTAMatchPrivateMetadata.T"
  "eam.Player\022;\n\tbuildings\030\003 \003(\0132(.CDOTAMat"
  "chPrivateMetadata.Team.Building\032\362\r\n\006Play"
  "er\022\023\n\013player_slot\030\002 \001(\r\022\027\n\017position_stre"
  "am\030\003 \001(\014\022M\n\017combat_segments\030\004 \003(\01324.CDOT"
  "AMatchPrivateMetadata.Team.Player.Combat"
  "Segment\022\031\n\021damage_unit_names\030\005 \003(\t\022G\n\014bu"
  "ff_records\030\006 \003(\01321.CDOTAMatchPrivateMeta"
  "data.Team.Player.BuffRecord\022\023\n\013graph_kil"
  "ls\030\007 \003(\002\022\024\n\014graph_deaths\030\010 \003(\002\022\025\n\rgraph_"
  "assists\030\t \003(\002\022\026\n\016graph_lasthits\030\n \003(\002\022\024\n"
  "\014graph_denies\030\013 \003(\002\022J\n\rgold_received\030\014 \001"
  "(\01323.CDOTAMatchPrivateMetadata.Team.Play"
  "er.GoldReceived\022F\n\013xp_received\030\r \001(\01321.C"
  "DOTAMatchPrivateMetadata.Team.Player.XPR"
  "eceived\022:\n\013team_number\030\016 \001(\0162\r.DOTA_GC_T"
  "EAM:\026DOTA_GC_TEAM_GOOD_GUYS\022\021\n\tteam_slot"
  "\030\017 \001(\r\032\261\005\n\rCombatSegment\022\021\n\tgame_time\030\001 "
  "\001(\005\022_\n\021damage_by_ability\030\002 \003(\0132D.CDOTAMa"
  "tchPrivateMetadata.Team.Player.CombatSeg"
  "ment.DamageByAbility\022a\n\022healing_by_abili"
  "ty\030\003 \003(\0132E.CDOTAMatchPrivateMetadata.Tea"
  "m.Player.CombatSegment.HealingByAbility\032"
  "\341\001\n\017DamageByAbility\022\031\n\021source_unit_index"
  "\030\003 \001(\r\022\026\n\nability_id\030\001 \001(\005:\002-1\022j\n\017by_her"
  "o_targets\030\002 \003(\0132Q.CDOTAMatchPrivateMetad"
  "ata.Team.Player.CombatSegment.DamageByAb"
  "ility.ByHeroTarget\032/\n\014ByHeroTarget\022\017\n\007he"
  "ro_id\030\001 \001(\r\022\016\n\006damage\030\002 \001(\r\032\344\001\n\020HealingB"
  "yAbility\022\031\n\021source_unit_index\030\003 \001(\r\022\026\n\na"
  "bility_id\030\001 \001(\005:\002-1\022k\n\017by_hero_targets\030\002"
  " \003(\0132R.CDOTAMatchPrivateMetadata.Team.Pl"
  "ayer.CombatSegment.HealingByAbility.ByHe"
  "roTarget\0320\n\014ByHeroTarget\022\017\n\007hero_id\030\001 \001("
  "\r\022\017\n\007healing\030\002 \001(\r\032\354\001\n\nBuffRecord\022\033\n\017buf"
  "f_ability_id\030\001 \001(\005:\002-1\022\032\n\022buff_modifier_"
  "name\030\003 \001(\t\022W\n\017by_hero_targets\030\002 \003(\0132>.CD"
  "OTAMatchPrivateMetadata.Team.Player.Buff"
  "Record.ByHeroTarget\032L\n\014ByHeroTarget\022\017\n\007h"
  "ero_id\030\001 \001(\r\022\030\n\020elapsed_duration\030\002 \001(\002\022\021"
  "\n\tis_hidden\030\003 \001(\010\032\230\001\n\014GoldReceived\022\r\n\005cr"
  "eep\030\001 \001(\r\022\016\n\006heroes\030\002 \001(\r\022\024\n\014bounty_rune"
  "s\030\003 \001(\r\022\017\n\007passive\030\004 \001(\r\022\021\n\tbuildings\030\005 "
  "\001(\r\022\021\n\tabilities\030\006 \001(\r\022\r\n\005wards\030\007 \001(\r\022\r\n"
  "\005other\030\010 \001(\r\032v\n\nXPReceived\022\r\n\005creep\030\001 \001("
  "\r\022\016\n\006heroes\030\002 \001(\r\022\016\n\006roshan\030\003 \001(\r\022\031\n\021tom"
  "e_of_knowledge\030\004 \001(\r\022\017\n\007outpost\030\005 \001(\r\022\r\n"
  "\005other\030\006 \001(\r\032e\n\010Building\022\021\n\tunit_name\030\001 "
  "\001(\t\022\030\n\020position_quant_x\030\002 \001(\r\022\030\n\020positio"
  "n_quant_y\030\003 \001(\r\022\022\n\ndeath_time\030\004 \001(\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dota_5fmatch_5fmetadata_2eproto_deps[5] = {
  &::descriptor_table_base_5fgcmessages_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fcommon_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto,
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
};
static ::_pbi::once_flag descriptor_table_dota_5fmatch_5fmetadata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dota_5fmatch_5fmetadata_2eproto = {
    false, false, 7995, descriptor_table_protodef_dota_5fmatch_5fmetadata_2eproto,
    "dota_match_metadata.proto",
    &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once, descriptor_table_dota_5fmatch_5fmetadata_2eproto_deps, 5, 36,
    schemas, file_default_instances, TableStruct_dota_5fmatch_5fmetadata_2eproto::offsets,
    file_level_metadata_dota_5fmatch_5fmetadata_2eproto, file_level_enum_descriptors_dota_5fmatch_5fmetadata_2eproto,
    file_level_service_descriptors_dota_5fmatch_5fmetadata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter() {
  return &descriptor_table_dota_5fmatch_5fmetadata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dota_5fmatch_5fmetadata_2eproto(&descriptor_table_dota_5fmatch_5fmetadata_2eproto);

// ===================================================================

class CDOTAMatchMetadataFile::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadataFile>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CDOTAMatchMetadata& metadata(const CDOTAMatchMetadataFile* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_private_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000c) ^ 0x0000000c) != 0;
  }
};

const ::CDOTAMatchMetadata&
CDOTAMatchMetadataFile::_Internal::metadata(const CDOTAMatchMetadataFile* msg) {
  return *msg->_impl_.metadata_;
}
CDOTAMatchMetadataFile::CDOTAMatchMetadataFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadataFile)
}
CDOTAMatchMetadataFile::CDOTAMatchMetadataFile(const CDOTAMatchMetadataFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchMetadataFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.private_metadata_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.private_metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_private_metadata()) {
    _this->_impl_.private_metadata_.Set(from._internal_private_metadata(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::CDOTAMatchMetadata(*from._impl_.metadata_);
  }
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadataFile)
}

inline void CDOTAMatchMetadataFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.private_metadata_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.version_){0}
  };
  _impl_.private_metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAMatchMetadataFile::~CDOTAMatchMetadataFile() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadataFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchMetadataFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.private_metadata_.Destroy();
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void CDOTAMatchMetadataFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchMetadataFile::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadataFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.private_metadata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.metadata_ != nullptr);
      _impl_.metadata_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.version_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadataFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAMatchMetadata metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes private_metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_private_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadataFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadataFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 version = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // required uint64 match_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional .CDOTAMatchMetadata metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // optional bytes private_metadata = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_private_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadataFile)
  return target;
}

size_t CDOTAMatchMetadataFile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CDOTAMatchMetadataFile)
  size_t total_size = 0;

  if (_internal_has_match_id()) {
    // required uint64 match_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
  }

  if (_internal_has_version()) {
    // required int32 version = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return total_size;
}
size_t CDOTAMatchMetadataFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadataFile)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint64 match_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());

    // required int32 version = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes private_metadata = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_private_metadata());
    }

    // optional .CDOTAMatchMetadata metadata = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.metadata_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadataFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchMetadataFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadataFile::GetClassData() const { return &_class_data_; }


void CDOTAMatchMetadataFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchMetadataFile*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchMetadataFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadataFile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_private_metadata(from._internal_private_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_metadata()->::CDOTAMatchMetadata::MergeFrom(
          from._internal_metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadataFile::CopyFrom(const CDOTAMatchMetadataFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadataFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadataFile::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CDOTAMatchMetadataFile::InternalSwap(CDOTAMatchMetadataFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.private_metadata_, lhs_arena,
      &other->_impl_.private_metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadataFile, _impl_.version_)
      + sizeof(CDOTAMatchMetadataFile::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadataFile, _impl_.metadata_)>(
          reinterpret_cast<char*>(&_impl_.metadata_),
          reinterpret_cast<char*>(&other->_impl_.metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadataFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[0]);
}

// ===================================================================

class CDOTAMatchMetadata_EconItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_EconItem>()._impl_._has_bits_);
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void CDOTAMatchMetadata_EconItem::clear_attribute() {
  _impl_.attribute_.Clear();
}
void CDOTAMatchMetadata_EconItem::clear_equipped_state() {
  _impl_.equipped_state_.Clear();
}
CDOTAMatchMetadata_EconItem::CDOTAMatchMetadata_EconItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.EconItem)
}
CDOTAMatchMetadata_EconItem::CDOTAMatchMetadata_EconItem(const CDOTAMatchMetadata_EconItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchMetadata_EconItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attribute_){from._impl_.attribute_}
    , decltype(_impl_.equipped_state_){from._impl_.equipped_state_}
    , decltype(_impl_.def_index_){}
    , decltype(_impl_.style_){}
    , decltype(_impl_.quality_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.def_index_, &from._impl_.def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.quality_) -
    reinterpret_cast<char*>(&_impl_.def_index_)) + sizeof(_impl_.quality_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.EconItem)
}

inline void CDOTAMatchMetadata_EconItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attribute_){arena}
    , decltype(_impl_.equipped_state_){arena}
    , decltype(_impl_.def_index_){0u}
    , decltype(_impl_.style_){0u}
    , decltype(_impl_.quality_){4u}
  };
}

CDOTAMatchMetadata_EconItem::~CDOTAMatchMetadata_EconItem() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.EconItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchMetadata_EconItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attribute_.~RepeatedPtrField();
  _impl_.equipped_state_.~RepeatedPtrField();
}

void CDOTAMatchMetadata_EconItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchMetadata_EconItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.EconItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attribute_.Clear();
  _impl_.equipped_state_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.style_) -
        reinterpret_cast<char*>(&_impl_.def_index_)) + sizeof(_impl_.style_));
    _impl_.quality_ = 4u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_EconItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 def_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_def_index(&has_bits);
          _impl_.def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quality = 2 [default = 4];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_quality(&has_bits);
          _impl_.quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CSOEconItemAttribute attribute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 style = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_style(&has_bits);
          _impl_.style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CSOEconItemEquipped equipped_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equipped_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_EconItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.EconItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_def_index(), target);
  }

  // optional uint32 quality = 2 [default = 4];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quality(), target);
  }

  // repeated .CSOEconItemAttribute attribute = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attribute_size()); i < n; i++) {
    const auto& repfield = this->_internal_attribute(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 style = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_style(), target);
  }

  // repeated .CSOEconItemEquipped equipped_state = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_equipped_state_size()); i < n; i++) {
    const auto& repfield = this->_internal_equipped_state(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.EconItem)
  return target;
}

size_t CDOTAMatchMetadata_EconItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.EconItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSOEconItemAttribute attribute = 3;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->_impl_.attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSOEconItemEquipped equipped_state = 5;
  total_size += 1UL * this->_internal_equipped_state_size();
  for (const auto& msg : this->_impl_.equipped_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 def_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_def_index());
    }

    // optional uint32 style = 4 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_style());
    }

    // optional uint32 quality = 2 [default = 4];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quality());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_EconItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchMetadata_EconItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_EconItem::GetClassData() const { return &_class_data_; }


void CDOTAMatchMetadata_EconItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchMetadata_EconItem*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchMetadata_EconItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.EconItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attribute_.MergeFrom(from._impl_.attribute_);
  _this->_impl_.equipped_state_.MergeFrom(from._impl_.equipped_state_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.def_index_ = from._impl_.def_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.style_ = from._impl_.style_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.quality_ = from._impl_.quality_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_EconItem::CopyFrom(const CDOTAMatchMetadata_EconItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.EconItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_EconItem::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_EconItem::InternalSwap(CDOTAMatchMetadata_EconItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attribute_.InternalSwap(&other->_impl_.attribute_);
  _impl_.equipped_state_.InternalSwap(&other->_impl_.equipped_state_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_EconItem, _impl_.style_)
      + sizeof(CDOTAMatchMetadata_EconItem::_impl_.style_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_EconItem, _impl_.def_index_)>(
          reinterpret_cast<char*>(&_impl_.def_index_),
          reinterpret_cast<char*>(&other->_impl_.def_index_));
  swap(_impl_.quality_, other->_impl_.quality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_EconItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[1]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_PlayerKill::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_PlayerKill>()._impl_._has_bits_);
  static void set_has_victim_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchMetadata_Team_PlayerKill::CDOTAMatchMetadata_Team_PlayerKill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.PlayerKill)
}
CDOTAMatchMetadata_Team_PlayerKill::CDOTAMatchMetadata_Team_PlayerKill(const CDOTAMatchMetadata_Team_PlayerKill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchMetadata_Team_PlayerKill* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.victim_slot_){}
    , decltype(_impl_.count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.victim_slot_, &from._impl_.victim_slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.victim_slot_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.PlayerKill)
}

inline void CDOTAMatchMetadata_Team_PlayerKill::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.victim_slot_){0u}
    , decltype(_impl_.count_){0u}
  };
}

CDOTAMatchMetadata_Team_PlayerKill::~CDOTAMatchMetadata_Team_PlayerKill() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.PlayerKill)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchMetadata_Team_PlayerKill::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team_PlayerKill::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_PlayerKill::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.PlayerKill)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.victim_slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.count_) -
        reinterpret_cast<char*>(&_impl_.victim_slot_)) + sizeof(_impl_.count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_PlayerKill::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 victim_slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_victim_slot(&has_bits);
          _impl_.victim_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_PlayerKill::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.PlayerKill)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 victim_slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_victim_slot(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.PlayerKill)
  return target;
}

size_t CDOTAMatchMetadata_Team_PlayerKill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.PlayerKill)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 victim_slot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_victim_slot());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_PlayerKill::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchMetadata_Team_PlayerKill::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_PlayerKill::GetClassData() const { return &_class_data_; }


void CDOTAMatchMetadata_Team_PlayerKill::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchMetadata_Team_PlayerKill*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchMetadata_Team_PlayerKill&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.PlayerKill)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.victim_slot_ = from._impl_.victim_slot_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_PlayerKill::CopyFrom(const CDOTAMatchMetadata_Team_PlayerKill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.PlayerKill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_PlayerKill::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_PlayerKill::InternalSwap(CDOTAMatchMetadata_Team_PlayerKill* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_PlayerKill, _impl_.count_)
      + sizeof(CDOTAMatchMetadata_Team_PlayerKill::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_PlayerKill, _impl_.victim_slot_)>(
          reinterpret_cast<char*>(&_impl_.victim_slot_),
          reinterpret_cast<char*>(&other->_impl_.victim_slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_PlayerKill::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[2]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_ItemPurchase::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_ItemPurchase>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_purchase_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAMatchMetadata_Team_ItemPurchase::CDOTAMatchMetadata_Team_ItemPurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.ItemPurchase)
}
CDOTAMatchMetadata_Team_ItemPurchase::CDOTAMatchMetadata_Team_ItemPurchase(const CDOTAMatchMetadata_Team_ItemPurchase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchMetadata_Team_ItemPurchase* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.purchase_time_){}
    , decltype(_impl_.item_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.purchase_time_, &from._impl_.purchase_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_id_) -
    reinterpret_cast<char*>(&_impl_.purchase_time_)) + sizeof(_impl_.item_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.ItemPurchase)
}

inline void CDOTAMatchMetadata_Team_ItemPurchase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.purchase_time_){0}
    , decltype(_impl_.item_id_){-1}
  };
}

CDOTAMatchMetadata_Team_ItemPurchase::~CDOTAMatchMetadata_Team_ItemPurchase() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.ItemPurchase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchMetadata_Team_ItemPurchase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team_ItemPurchase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_ItemPurchase::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.ItemPurchase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.purchase_time_ = 0;
    _impl_.item_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_ItemPurchase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 item_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 purchase_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_purchase_time(&has_bits);
          _impl_.purchase_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_ItemPurchase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.ItemPurchase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 item_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_id(), target);
  }

  // optional int32 purchase_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_purchase_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.ItemPurchase)
  return target;
}

size_t CDOTAMatchMetadata_Team_ItemPurchase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.ItemPurchase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 purchase_time = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_purchase_time());
    }

    // optional int32 item_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_ItemPurchase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchMetadata_Team_ItemPurchase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_ItemPurchase::GetClassData() const { return &_class_data_; }


void CDOTAMatchMetadata_Team_ItemPurchase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchMetadata_Team_ItemPurchase*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchMetadata_Team_ItemPurchase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.ItemPurchase)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.purchase_time_ = from._impl_.purchase_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_ItemPurchase::CopyFrom(const CDOTAMatchMetadata_Team_ItemPurchase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.ItemPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_ItemPurchase::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_ItemPurchase::InternalSwap(CDOTAMatchMetadata_Team_ItemPurchase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.purchase_time_, other->_impl_.purchase_time_);
  swap(_impl_.item_id_, other->_impl_.item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_ItemPurchase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[3]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_InventorySnapshot::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_InventorySnapshot>()._impl_._has_bits_);
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_neutral_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CDOTAMatchMetadata_Team_InventorySnapshot::CDOTAMatchMetadata_Team_InventorySnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.InventorySnapshot)
}
CDOTAMatchMetadata_Team_InventorySnapshot::CDOTAMatchMetadata_Team_InventorySnapshot(const CDOTAMatchMetadata_Team_InventorySnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchMetadata_Team_InventorySnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){from._impl_.item_id_}
    , decltype(_impl_.backpack_item_id_){from._impl_.backpack_item_id_}
    , decltype(_impl_.game_time_){}
    , decltype(_impl_.kills_){}
    , decltype(_impl_.deaths_){}
    , decltype(_impl_.assists_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.neutral_item_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.game_time_, &from._impl_.game_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.neutral_item_id_) -
    reinterpret_cast<char*>(&_impl_.game_time_)) + sizeof(_impl_.neutral_item_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.InventorySnapshot)
}

inline void CDOTAMatchMetadata_Team_InventorySnapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){arena}
    , decltype(_impl_.backpack_item_id_){arena}
    , decltype(_impl_.game_time_){0}
    , decltype(_impl_.kills_){0u}
    , decltype(_impl_.deaths_){0u}
    , decltype(_impl_.assists_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.neutral_item_id_){-1}
  };
}

CDOTAMatchMetadata_Team_InventorySnapshot::~CDOTAMatchMetadata_Team_InventorySnapshot() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.InventorySnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchMetadata_Team_InventorySnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_id_.~RepeatedField();
  _impl_.backpack_item_id_.~RepeatedField();
}

void CDOTAMatchMetadata_Team_InventorySnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_InventorySnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_id_.Clear();
  _impl_.backpack_item_id_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.game_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.level_) -
        reinterpret_cast<char*>(&_impl_.game_time_)) + sizeof(_impl_.level_));
    _impl_.neutral_item_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_InventorySnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_item_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 game_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_game_time(&has_bits);
          _impl_.game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kills = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_kills(&has_bits);
          _impl_.kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deaths = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_deaths(&has_bits);
          _impl_.deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 assists = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_assists(&has_bits);
          _impl_.assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 backpack_item_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_backpack_item_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_backpack_item_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 neutral_item_id = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_neutral_item_id(&has_bits);
          _impl_.neutral_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_InventorySnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 item_id = 1;
  for (int i = 0, n = this->_internal_item_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_id(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 game_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_game_time(), target);
  }

  // optional uint32 kills = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_assists(), target);
  }

  // optional uint32 level = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_level(), target);
  }

  // repeated int32 backpack_item_id = 7;
  for (int i = 0, n = this->_internal_backpack_item_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_backpack_item_id(i), target);
  }

  // optional int32 neutral_item_id = 8 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_neutral_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.InventorySnapshot)
  return target;
}

size_t CDOTAMatchMetadata_Team_InventorySnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 item_id = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.item_id_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_item_id_size());
    total_size += data_size;
  }

  // repeated int32 backpack_item_id = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.backpack_item_id_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_backpack_item_id_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 game_time = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_game_time());
    }

    // optional uint32 kills = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kills());
    }

    // optional uint32 deaths = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deaths());
    }

    // optional uint32 assists = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_assists());
    }

    // optional uint32 level = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
    }

    // optional int32 neutral_item_id = 8 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_neutral_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_InventorySnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchMetadata_Team_InventorySnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_InventorySnapshot::GetClassData() const { return &_class_data_; }


void CDOTAMatchMetadata_Team_InventorySnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchMetadata_Team_InventorySnapshot*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchMetadata_Team_InventorySnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_id_.MergeFrom(from._impl_.item_id_);
  _this->_impl_.backpack_item_id_.MergeFrom(from._impl_.backpack_item_id_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.game_time_ = from._impl_.game_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kills_ = from._impl_.kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.deaths_ = from._impl_.deaths_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.assists_ = from._impl_.assists_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.neutral_item_id_ = from._impl_.neutral_item_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_InventorySnapshot::CopyFrom(const CDOTAMatchMetadata_Team_InventorySnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_InventorySnapshot::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_InventorySnapshot::InternalSwap(CDOTAMatchMetadata_Team_InventorySnapshot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.item_id_.InternalSwap(&other->_impl_.item_id_);
  _impl_.backpack_item_id_.InternalSwap(&other->_impl_.backpack_item_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, _impl_.level_)
      + sizeof(CDOTAMatchMetadata_Team_InventorySnapshot::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, _impl_.game_time_)>(
          reinterpret_cast<char*>(&_impl_.game_time_),
          reinterpret_cast<char*>(&other->_impl_.game_time_));
  swap(_impl_.neutral_item_id_, other->_impl_.neutral_item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_InventorySnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[4]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_AutoStyleCriteria::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_AutoStyleCriteria>()._impl_._has_bits_);
  static void set_has_name_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchMetadata_Team_AutoStyleCriteria::CDOTAMatchMetadata_Team_AutoStyleCriteria(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.AutoStyleCriteria)
}
CDOTAMatchMetadata_Team_AutoStyleCriteria::CDOTAMatchMetadata_Team_AutoStyleCriteria(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchMetadata_Team_AutoStyleCriteria* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_token_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.name_token_, &from._impl_.name_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.name_token_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.AutoStyleCriteria)
}

inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_token_){0u}
    , decltype(_impl_.value_){0}
  };
}

CDOTAMatchMetadata_Team_AutoStyleCriteria::~CDOTAMatchMetadata_Team_AutoStyleCriteria() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.name_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.value_) -
        reinterpret_cast<char*>(&_impl_.name_token_)) + sizeof(_impl_.value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_AutoStyleCriteria::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 name_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_name_token(&has_bits);
          _impl_.name_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_AutoStyleCriteria::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 name_token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_name_token(), target);
  }

  // optional float value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  return target;
}

size_t CDOTAMatchMetadata_Team_AutoStyleCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 name_token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_name_token());
    }

    // optional float value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_AutoStyleCriteria::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchMetadata_Team_AutoStyleCriteria::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_AutoStyleCriteria::GetClassData() const { return &_class_data_; }


void CDOTAMatchMetadata_Team_AutoStyleCriteria::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchMetadata_Team_AutoStyleCriteria*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchMetadata_Team_AutoStyleCriteria&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.name_token_ = from._impl_.name_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::CopyFrom(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_AutoStyleCriteria::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::InternalSwap(CDOTAMatchMetadata_Team_AutoStyleCriteria* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_AutoStyleCriteria, _impl_.value_)
      + sizeof(CDOTAMatchMetadata_Team_AutoStyleCriteria::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_AutoStyleCriteria, _impl_.name_token_)>(
          reinterpret_cast<char*>(&_impl_.name_token_),
          reinterpret_cast<char*>(&other->_impl_.name_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_AutoStyleCriteria::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[5]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_StrangeGemProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_StrangeGemProgress>()._impl_._has_bits_);
  static void set_has_kill_eater_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gem_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_required_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_starting_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ending_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_owner_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_owner_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CDOTAMatchMetadata_Team_StrangeGemProgress::CDOTAMatchMetadata_Team_StrangeGemProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.StrangeGemProgress)
}
CDOTAMatchMetadata_Team_StrangeGemProgress::CDOTAMatchMetadata_Team_StrangeGemProgress(const CDOTAMatchMetadata_Team_StrangeGemProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchMetadata_Team_StrangeGemProgress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kill_eater_type_){}
    , decltype(_impl_.gem_item_def_index_){}
    , decltype(_impl_.required_hero_id_){}
    , decltype(_impl_.starting_value_){}
    , decltype(_impl_.ending_value_){}
    , decltype(_impl_.owner_item_def_index_){}
    , decltype(_impl_.owner_item_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.kill_eater_type_, &from._impl_.kill_eater_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.owner_item_id_) -
    reinterpret_cast<char*>(&_impl_.kill_eater_type_)) + sizeof(_impl_.owner_item_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.StrangeGemProgress)
}

inline void CDOTAMatchMetadata_Team_StrangeGemProgress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kill_eater_type_){0u}
    , decltype(_impl_.gem_item_def_index_){0u}
    , decltype(_impl_.required_hero_id_){0u}
    , decltype(_impl_.starting_value_){0u}
    , decltype(_impl_.ending_value_){0u}
    , decltype(_impl_.owner_item_def_index_){0u}
    , decltype(_impl_.owner_item_id_){uint64_t{0u}}
  };
}

CDOTAMatchMetadata_Team_StrangeGemProgress::~CDOTAMatchMetadata_Team_StrangeGemProgress() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.StrangeGemProgress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchMetadata_Team_StrangeGemProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.kill_eater_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.owner_item_id_) -
        reinterpret_cast<char*>(&_impl_.kill_eater_type_)) + sizeof(_impl_.owner_item_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_StrangeGemProgress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 kill_eater_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kill_eater_type(&has_bits);
          _impl_.kill_eater_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gem_item_def_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gem_item_def_index(&has_bits);
          _impl_.gem_item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 required_hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_required_hero_id(&has_bits);
          _impl_.required_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 starting_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_starting_value(&has_bits);
          _impl_.starting_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ending_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ending_value(&has_bits);
          _impl_.ending_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 owner_item_def_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_owner_item_def_index(&has_bits);
          _impl_.owner_item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 owner_item_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_owner_item_id(&has_bits);
          _impl_.owner_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_StrangeGemProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 kill_eater_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_kill_eater_type(), target);
  }

  // optional uint32 gem_item_def_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gem_item_def_index(), target);
  }

  // optional uint32 required_hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_required_hero_id(), target);
  }

  // optional uint32 starting_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_starting_value(), target);
  }

  // optional uint32 ending_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ending_value(), target);
  }

  // optional uint32 owner_item_def_index = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_owner_item_def_index(), target);
  }

  // optional uint64 owner_item_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_owner_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.StrangeGemProgress)
  return target;
}

size_t CDOTAMatchMetadata_Team_StrangeGemProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 kill_eater_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kill_eater_type());
    }

    // optional uint32 gem_item_def_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gem_item_def_index());
    }

    // optional uint32 required_hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_required_hero_id());
    }

    // optional uint32 starting_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_starting_value());
    }

    // optional uint32 ending_value = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ending_value());
    }

    // optional uint32 owner_item_def_index = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_item_def_index());
    }

    // optional uint64 owner_item_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_owner_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_StrangeGemProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchMetadata_Team_StrangeGemProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_StrangeGemProgress::GetClassData() const { return &_class_data_; }


void CDOTAMatchMetadata_Team_StrangeGemProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchMetadata_Team_StrangeGemProgress*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchMetadata_Team_StrangeGemProgress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kill_eater_type_ = from._impl_.kill_eater_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gem_item_def_index_ = from._impl_.gem_item_def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.required_hero_id_ = from._impl_.required_hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.starting_value_ = from._impl_.starting_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.ending_value_ = from._impl_.ending_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.owner_item_def_index_ = from._impl_.owner_item_def_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.owner_item_id_ = from._impl_.owner_item_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::CopyFrom(const CDOTAMatchMetadata_Team_StrangeGemProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_StrangeGemProgress::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::InternalSwap(CDOTAMatchMetadata_Team_StrangeGemProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_StrangeGemProgress, _impl_.owner_item_id_)
      + sizeof(CDOTAMatchMetadata_Team_StrangeGemProgress::_impl_.owner_item_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_StrangeGemProgress, _impl_.kill_eater_type_)>(
          reinterpret_cast<char*>(&_impl_.kill_eater_type_),
          reinterpret_cast<char*>(&other->_impl_.kill_eater_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_StrangeGemProgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[6]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_VictoryPrediction::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_VictoryPrediction>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_starting_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_victory(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAMatchMetadata_Team_VictoryPrediction::CDOTAMatchMetadata_Team_VictoryPrediction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.VictoryPrediction)
}
CDOTAMatchMetadata_Team_VictoryPrediction::CDOTAMatchMetadata_Team_VictoryPrediction(const CDOTAMatchMetadata_Team_VictoryPrediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchMetadata_Team_VictoryPrediction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.item_def_index_){}
    , decltype(_impl_.starting_value_){}
    , decltype(_impl_.is_victory_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_victory_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.is_victory_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.VictoryPrediction)
}

inline void CDOTAMatchMetadata_Team_VictoryPrediction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.item_def_index_){0u}
    , decltype(_impl_.starting_value_){0u}
    , decltype(_impl_.is_victory_){false}
  };
}

CDOTAMatchMetadata_Team_VictoryPrediction::~CDOTAMatchMetadata_Team_VictoryPrediction() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.VictoryPrediction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchMetadata_Team_VictoryPrediction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team_VictoryPrediction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_VictoryPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_victory_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.is_victory_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_VictoryPrediction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_def_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_def_index(&has_bits);
          _impl_.item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 starting_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_starting_value(&has_bits);
          _impl_.starting_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_victory = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_victory(&has_bits);
          _impl_.is_victory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_VictoryPrediction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 item_def_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_def_index(), target);
  }

  // optional uint32 starting_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_starting_value(), target);
  }

  // optional bool is_victory = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_victory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.VictoryPrediction)
  return target;
}

size_t CDOTAMatchMetadata_Team_VictoryPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 item_def_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_def_index());
    }

    // optional uint32 starting_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_starting_value());
    }

    // optional bool is_victory = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_VictoryPrediction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchMetadata_Team_VictoryPrediction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_VictoryPrediction::GetClassData() const { return &_class_data_; }


void CDOTAMatchMetadata_Team_VictoryPrediction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchMetadata_Team_VictoryPrediction*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchMetadata_Team_VictoryPrediction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.item_def_index_ = from._impl_.item_def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.starting_value_ = from._impl_.starting_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_victory_ = from._impl_.is_victory_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_VictoryPrediction::CopyFrom(const CDOTAMatchMetadata_Team_VictoryPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_VictoryPrediction::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_VictoryPrediction::InternalSwap(CDOTAMatchMetadata_Team_VictoryPrediction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_VictoryPrediction, _impl_.is_victory_)
      + sizeof(CDOTAMatchMetadata_Team_VictoryPrediction::_impl_.is_victory_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_VictoryPrediction, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_VictoryPrediction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[7]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_SubChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_SubChallenge>()._impl_._has_bits_);
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAMatchMetadata_Team_SubChallenge::CDOTAMatchMetadata_Team_SubChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.SubChallenge)
}
CDOTAMatchMetadata_Team_SubChallenge::CDOTAMatchMetadata_Team_SubChallenge(const CDOTAMatchMetadata_Team_SubChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchMetadata_Team_SubChallenge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slot_id_){}
    , decltype(_impl_.start_value_){}
    , decltype(_impl_.end_value_){}
    , decltype(_impl_.completed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.slot_id_, &from._impl_.slot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.completed_) -
    reinterpret_cast<char*>(&_impl_.slot_id_)) + sizeof(_impl_.completed_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.SubChallenge)
}

inline void CDOTAMatchMetadata_Team_SubChallenge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slot_id_){0u}
    , decltype(_impl_.start_value_){0u}
    , decltype(_impl_.end_value_){0u}
    , decltype(_impl_.completed_){false}
  };
}

CDOTAMatchMetadata_Team_SubChallenge::~CDOTAMatchMetadata_Team_SubChallenge() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.SubChallenge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchMetadata_Team_SubChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team_SubChallenge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_SubChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.SubChallenge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.slot_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.completed_) -
        reinterpret_cast<char*>(&_impl_.slot_id_)) + sizeof(_impl_.completed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_SubChallenge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 slot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_slot_id(&has_bits);
          _impl_.slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 start_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_start_value(&has_bits);
          _impl_.start_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 end_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_end_value(&has_bits);
          _impl_.end_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool completed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_completed(&has_bits);
          _impl_.completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_SubChallenge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.SubChallenge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 slot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slot_id(), target);
  }

  // optional uint32 start_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_start_value(), target);
  }

  // optional uint32 end_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_end_value(), target);
  }

  // optional bool completed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_completed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.SubChallenge)
  return target;
}

size_t CDOTAMatchMetadata_Team_SubChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.SubChallenge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 slot_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slot_id());
    }

    // optional uint32 start_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_start_value());
    }

    // optional uint32 end_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_end_value());
    }

    // optional bool completed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_SubChallenge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchMetadata_Team_SubChallenge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_SubChallenge::GetClassData() const { return &_class_data_; }


void CDOTAMatchMetadata_Team_SubChallenge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchMetadata_Team_SubChallenge*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchMetadata_Team_SubChallenge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.SubChallenge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.slot_id_ = from._impl_.slot_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.start_value_ = from._impl_.start_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.end_value_ = from._impl_.end_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.completed_ = from._impl_.completed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_SubChallenge::CopyFrom(const CDOTAMatchMetadata_Team_SubChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.SubChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_SubChallenge::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_SubChallenge::InternalSwap(CDOTAMatchMetadata_Team_SubChallenge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_SubChallenge, _impl_.completed_)
      + sizeof(CDOTAMatchMetadata_Team_SubChallenge::_impl_.completed_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_SubChallenge, _impl_.slot_id_)>(
          reinterpret_cast<char*>(&_impl_.slot_id_),
          reinterpret_cast<char*>(&other->_impl_.slot_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_SubChallenge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[8]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_CavernChallengeResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_CavernChallengeResult>()._impl_._has_bits_);
  static void set_has_completed_path_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_claimed_room_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchMetadata_Team_CavernChallengeResult::CDOTAMatchMetadata_Team_CavernChallengeResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.CavernChallengeResult)
}
CDOTAMatchMetadata_Team_CavernChallengeResult::CDOTAMatchMetadata_Team_CavernChallengeResult(const CDOTAMatchMetadata_Team_CavernChallengeResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchMetadata_Team_CavernChallengeResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.completed_path_id_){}
    , decltype(_impl_.claimed_room_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.completed_path_id_, &from._impl_.completed_path_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.claimed_room_id_) -
    reinterpret_cast<char*>(&_impl_.completed_path_id_)) + sizeof(_impl_.claimed_room_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.CavernChallengeResult)
}

inline void CDOTAMatchMetadata_Team_CavernChallengeResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.completed_path_id_){255u}
    , decltype(_impl_.claimed_room_id_){255u}
  };
}

CDOTAMatchMetadata_Team_CavernChallengeResult::~CDOTAMatchMetadata_Team_CavernChallengeResult() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.CavernChallengeResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchMetadata_Team_CavernChallengeResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.completed_path_id_ = 255u;
    _impl_.claimed_room_id_ = 255u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_CavernChallengeResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 completed_path_id = 1 [default = 255];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_completed_path_id(&has_bits);
          _impl_.completed_path_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 claimed_room_id = 2 [default = 255];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_claimed_room_id(&has_bits);
          _impl_.claimed_room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_CavernChallengeResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 completed_path_id = 1 [default = 255];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_completed_path_id(), target);
  }

  // optional uint32 claimed_room_id = 2 [default = 255];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_claimed_room_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.CavernChallengeResult)
  return target;
}

size_t CDOTAMatchMetadata_Team_CavernChallengeResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 completed_path_id = 1 [default = 255];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_completed_path_id());
    }

    // optional uint32 claimed_room_id = 2 [default = 255];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_claimed_room_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_CavernChallengeResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchMetadata_Team_CavernChallengeResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_CavernChallengeResult::GetClassData() const { return &_class_data_; }


void CDOTAMatchMetadata_Team_CavernChallengeResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchMetadata_Team_CavernChallengeResult*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchMetadata_Team_CavernChallengeResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.completed_path_id_ = from._impl_.completed_path_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.claimed_room_id_ = from._impl_.claimed_room_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::CopyFrom(const CDOTAMatchMetadata_Team_CavernChallengeResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_CavernChallengeResult::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::InternalSwap(CDOTAMatchMetadata_Team_CavernChallengeResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.completed_path_id_, other->_impl_.completed_path_id_);
  swap(_impl_.claimed_room_id_, other->_impl_.claimed_room_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_CavernChallengeResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[9]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_ActionGrant::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_ActionGrant>()._impl_._has_bits_);
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_audit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_requires_win(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_audit_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CDOTAMatchMetadata_Team_ActionGrant::CDOTAMatchMetadata_Team_ActionGrant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.ActionGrant)
}
CDOTAMatchMetadata_Team_ActionGrant::CDOTAMatchMetadata_Team_ActionGrant(const CDOTAMatchMetadata_Team_ActionGrant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchMetadata_Team_ActionGrant* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.action_id_){}
    , decltype(_impl_.quantity_){}
    , decltype(_impl_.audit_){}
    , decltype(_impl_.requires_win_){}
    , decltype(_impl_.audit_data_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.action_id_, &from._impl_.action_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.audit_data_) -
    reinterpret_cast<char*>(&_impl_.action_id_)) + sizeof(_impl_.audit_data_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.ActionGrant)
}

inline void CDOTAMatchMetadata_Team_ActionGrant::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.action_id_){0u}
    , decltype(_impl_.quantity_){0u}
    , decltype(_impl_.audit_){0u}
    , decltype(_impl_.requires_win_){false}
    , decltype(_impl_.audit_data_){uint64_t{0u}}
  };
}

CDOTAMatchMetadata_Team_ActionGrant::~CDOTAMatchMetadata_Team_ActionGrant() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.ActionGrant)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchMetadata_Team_ActionGrant::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team_ActionGrant::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_ActionGrant::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.ActionGrant)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.action_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.audit_data_) -
        reinterpret_cast<char*>(&_impl_.action_id_)) + sizeof(_impl_.audit_data_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_ActionGrant::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_action_id(&has_bits);
          _impl_.action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_quantity(&has_bits);
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 audit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_audit(&has_bits);
          _impl_.audit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool requires_win = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_requires_win(&has_bits);
          _impl_.requires_win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 audit_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_audit_data(&has_bits);
          _impl_.audit_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_ActionGrant::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.ActionGrant)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 action_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_action_id(), target);
  }

  // optional uint32 quantity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quantity(), target);
  }

  // optional uint32 audit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_audit(), target);
  }

  // optional bool requires_win = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_requires_win(), target);
  }

  // optional uint64 audit_data = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_audit_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.ActionGrant)
  return target;
}

size_t CDOTAMatchMetadata_Team_ActionGrant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.ActionGrant)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 action_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_action_id());
    }

    // optional uint32 quantity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quantity());
    }

    // optional uint32 audit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_audit());
    }

    // optional bool requires_win = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint64 audit_data = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_audit_data());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_ActionGrant::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchMetadata_Team_ActionGrant::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_ActionGrant::GetClassData() const { return &_class_data_; }


void CDOTAMatchMetadata_Team_ActionGrant::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchMetadata_Team_ActionGrant*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchMetadata_Team_ActionGrant&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.ActionGrant)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.action_id_ = from._impl_.action_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.quantity_ = from._impl_.quantity_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.audit_ = from._impl_.audit_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.requires_win_ = from._impl_.requires_win_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.audit_data_ = from._impl_.audit_data_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_ActionGrant::CopyFrom(const CDOTAMatchMetadata_Team_ActionGrant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.ActionGrant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_ActionGrant::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_ActionGrant::InternalSwap(CDOTAMatchMetadata_Team_ActionGrant* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_ActionGrant, _impl_.audit_data_)
      + sizeof(CDOTAMatchMetadata_Team_ActionGrant::_impl_.audit_data_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_ActionGrant, _impl_.action_id_)>(
          reinterpret_cast<char*>(&_impl_.action_id_),
          reinterpret_cast<char*>(&other->_impl_.action_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_ActionGrant::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[10]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_CandyGrant::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_CandyGrant>()._impl_._has_bits_);
  static void set_has_points(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchMetadata_Team_CandyGrant::CDOTAMatchMetadata_Team_CandyGrant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.CandyGrant)
}
CDOTAMatchMetadata_Team_CandyGrant::CDOTAMatchMetadata_Team_CandyGrant(const CDOTAMatchMetadata_Team_CandyGrant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchMetadata_Team_CandyGrant* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.points_){}
    , decltype(_impl_.reason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.points_, &from._impl_.points_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reason_) -
    reinterpret_cast<char*>(&_impl_.points_)) + sizeof(_impl_.reason_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.CandyGrant)
}

inline void CDOTAMatchMetadata_Team_CandyGrant::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.points_){0u}
    , decltype(_impl_.reason_){0u}
  };
}

CDOTAMatchMetadata_Team_CandyGrant::~CDOTAMatchMetadata_Team_CandyGrant() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.CandyGrant)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchMetadata_Team_CandyGrant::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team_CandyGrant::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_CandyGrant::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.CandyGrant)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.points_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.reason_) -
        reinterpret_cast<char*>(&_impl_.points_)) + sizeof(_impl_.reason_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_CandyGrant::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_points(&has_bits);
          _impl_.points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_reason(&has_bits);
          _impl_.reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_CandyGrant::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.CandyGrant)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 points = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_points(), target);
  }

  // optional uint32 reason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.CandyGrant)
  return target;
}

size_t CDOTAMatchMetadata_Team_CandyGrant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.CandyGrant)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 points = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_points());
    }

    // optional uint32 reason = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reason());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_CandyGrant::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchMetadata_Team_CandyGrant::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_CandyGrant::GetClassData() const { return &_class_data_; }


void CDOTAMatchMetadata_Team_CandyGrant::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchMetadata_Team_CandyGrant*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchMetadata_Team_CandyGrant&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.CandyGrant)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.points_ = from._impl_.points_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.reason_ = from._impl_.reason_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_CandyGrant::CopyFrom(const CDOTAMatchMetadata_Team_CandyGrant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.CandyGrant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_CandyGrant::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_CandyGrant::InternalSwap(CDOTAMatchMetadata_Team_CandyGrant* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_CandyGrant, _impl_.reason_)
      + sizeof(CDOTAMatchMetadata_Team_CandyGrant::_impl_.reason_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_CandyGrant, _impl_.points_)>(
          reinterpret_cast<char*>(&_impl_.points_),
          reinterpret_cast<char*>(&other->_impl_.points_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_CandyGrant::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[11]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_PeriodicResourceData::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_PeriodicResourceData>()._impl_._has_bits_);
  static void set_has_periodic_resource_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAMatchMetadata_Team_PeriodicResourceData::CDOTAMatchMetadata_Team_PeriodicResourceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.PeriodicResourceData)
}
CDOTAMatchMetadata_Team_PeriodicResourceData::CDOTAMatchMetadata_Team_PeriodicResourceData(const CDOTAMatchMetadata_Team_PeriodicResourceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchMetadata_Team_PeriodicResourceData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.periodic_resource_id_){}
    , decltype(_impl_.remaining_){}
    , decltype(_impl_.max_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.periodic_resource_id_, &from._impl_.periodic_resource_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_) -
    reinterpret_cast<char*>(&_impl_.periodic_resource_id_)) + sizeof(_impl_.max_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.PeriodicResourceData)
}

inline void CDOTAMatchMetadata_Team_PeriodicResourceData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.periodic_resource_id_){0u}
    , decltype(_impl_.remaining_){0u}
    , decltype(_impl_.max_){0u}
  };
}

CDOTAMatchMetadata_Team_PeriodicResourceData::~CDOTAMatchMetadata_Team_PeriodicResourceData() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.PeriodicResourceData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchMetadata_Team_PeriodicResourceData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team_PeriodicResourceData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_PeriodicResourceData::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.PeriodicResourceData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.periodic_resource_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_) -
        reinterpret_cast<char*>(&_impl_.periodic_resource_id_)) + sizeof(_impl_.max_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_PeriodicResourceData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 periodic_resource_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_periodic_resource_id(&has_bits);
          _impl_.periodic_resource_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 remaining = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_remaining(&has_bits);
          _impl_.remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_max(&has_bits);
          _impl_.max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_PeriodicResourceData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.PeriodicResourceData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 periodic_resource_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_periodic_resource_id(), target);
  }

  // optional uint32 remaining = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_remaining(), target);
  }

  // optional uint32 max = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.PeriodicResourceData)
  return target;
}

size_t CDOTAMatchMetadata_Team_PeriodicResourceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.PeriodicResourceData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 periodic_resource_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_periodic_resource_id());
    }

    // optional uint32 remaining = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remaining());
    }

    // optional uint32 max = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_PeriodicResourceData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchMetadata_Team_PeriodicResourceData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_PeriodicResourceData::GetClassData() const { return &_class_data_; }


void CDOTAMatchMetadata_Team_PeriodicResourceData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchMetadata_Team_PeriodicResourceData*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchMetadata_Team_PeriodicResourceData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.PeriodicResourceData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.periodic_resource_id_ = from._impl_.periodic_resource_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.remaining_ = from._impl_.remaining_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.max_ = from._impl_.max_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_PeriodicResourceData::CopyFrom(const CDOTAMatchMetadata_Team_PeriodicResourceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.PeriodicResourceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_PeriodicResourceData::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_PeriodicResourceData::InternalSwap(CDOTAMatchMetadata_Team_PeriodicResourceData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_PeriodicResourceData, _impl_.max_)
      + sizeof(CDOTAMatchMetadata_Team_PeriodicResourceData::_impl_.max_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_PeriodicResourceData, _impl_.periodic_resource_id_)>(
          reinterpret_cast<char*>(&_impl_.periodic_resource_id_),
          reinterpret_cast<char*>(&other->_impl_.periodic_resource_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_PeriodicResourceData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[12]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_EventData::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_EventData>()._impl_._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_points(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_challenge_quest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_challenge_quest_challenge_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_challenge_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_challenge_rank_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_challenge_rank_previously_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_event_owned(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_wager_winnings(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cavern_challenge_active(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_cavern_challenge_winnings(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_amount_wagered(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_periodic_point_adjustments(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_cavern_challenge_plus_shard_winnings(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_cavern_crawl_map_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_team_wager_bonus_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_wager_streak_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_active_season_id(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_cavern_crawl_half_credit(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

CDOTAMatchMetadata_Team_EventData::CDOTAMatchMetadata_Team_EventData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.EventData)
}
CDOTAMatchMetadata_Team_EventData::CDOTAMatchMetadata_Team_EventData(const CDOTAMatchMetadata_Team_EventData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchMetadata_Team_EventData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sub_challenges_with_progress_){from._impl_.sub_challenges_with_progress_}
    , decltype(_impl_.cavern_challenge_map_results_){from._impl_.cavern_challenge_map_results_}
    , decltype(_impl_.actions_granted_){from._impl_.actions_granted_}
    , decltype(_impl_.candy_points_granted_){from._impl_.candy_points_granted_}
    , decltype(_impl_.periodic_resources_){from._impl_.periodic_resources_}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.event_points_){}
    , decltype(_impl_.challenge_instance_id_){}
    , decltype(_impl_.challenge_quest_id_){}
    , decltype(_impl_.challenge_quest_challenge_id_){}
    , decltype(_impl_.challenge_rank_completed_){}
    , decltype(_impl_.challenge_rank_previously_completed_){}
    , decltype(_impl_.wager_winnings_){}
    , decltype(_impl_.cavern_challenge_winnings_){}
    , decltype(_impl_.challenge_completed_){}
    , decltype(_impl_.event_owned_){}
    , decltype(_impl_.cavern_challenge_active_){}
    , decltype(_impl_.cavern_crawl_half_credit_){}
    , decltype(_impl_.amount_wagered_){}
    , decltype(_impl_.periodic_point_adjustments_){}
    , decltype(_impl_.cavern_challenge_plus_shard_winnings_){}
    , decltype(_impl_.team_wager_bonus_pct_){}
    , decltype(_impl_.wager_streak_pct_){}
    , decltype(_impl_.active_season_id_){}
    , decltype(_impl_.cavern_crawl_map_variant_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.event_id_, &from._impl_.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cavern_crawl_map_variant_) -
    reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.cavern_crawl_map_variant_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.EventData)
}

inline void CDOTAMatchMetadata_Team_EventData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sub_challenges_with_progress_){arena}
    , decltype(_impl_.cavern_challenge_map_results_){arena}
    , decltype(_impl_.actions_granted_){arena}
    , decltype(_impl_.candy_points_granted_){arena}
    , decltype(_impl_.periodic_resources_){arena}
    , decltype(_impl_.event_id_){0u}
    , decltype(_impl_.event_points_){0u}
    , decltype(_impl_.challenge_instance_id_){0u}
    , decltype(_impl_.challenge_quest_id_){0u}
    , decltype(_impl_.challenge_quest_challenge_id_){0u}
    , decltype(_impl_.challenge_rank_completed_){0u}
    , decltype(_impl_.challenge_rank_previously_completed_){0u}
    , decltype(_impl_.wager_winnings_){0u}
    , decltype(_impl_.cavern_challenge_winnings_){0u}
    , decltype(_impl_.challenge_completed_){false}
    , decltype(_impl_.event_owned_){false}
    , decltype(_impl_.cavern_challenge_active_){false}
    , decltype(_impl_.cavern_crawl_half_credit_){false}
    , decltype(_impl_.amount_wagered_){0u}
    , decltype(_impl_.periodic_point_adjustments_){0u}
    , decltype(_impl_.cavern_challenge_plus_shard_winnings_){0u}
    , decltype(_impl_.team_wager_bonus_pct_){0u}
    , decltype(_impl_.wager_streak_pct_){0u}
    , decltype(_impl_.active_season_id_){0u}
    , decltype(_impl_.cavern_crawl_map_variant_){255u}
  };
}

CDOTAMatchMetadata_Team_EventData::~CDOTAMatchMetadata_Team_EventData() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.EventData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchMetadata_Team_EventData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sub_challenges_with_progress_.~RepeatedPtrField();
  _impl_.cavern_challenge_map_results_.~RepeatedPtrField();
  _impl_.actions_granted_.~RepeatedPtrField();
  _impl_.candy_points_granted_.~RepeatedPtrField();
  _impl_.periodic_resources_.~RepeatedPtrField();
}

void CDOTAMatchMetadata_Team_EventData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_EventData::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.EventData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sub_challenges_with_progress_.Clear();
  _impl_.cavern_challenge_map_results_.Clear();
  _impl_.actions_granted_.Clear();
  _impl_.candy_points_granted_.Clear();
  _impl_.periodic_resources_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.wager_winnings_) -
        reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.wager_winnings_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.cavern_challenge_winnings_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cavern_challenge_plus_shard_winnings_) -
        reinterpret_cast<char*>(&_impl_.cavern_challenge_winnings_)) + sizeof(_impl_.cavern_challenge_plus_shard_winnings_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&_impl_.team_wager_bonus_pct_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.active_season_id_) -
        reinterpret_cast<char*>(&_impl_.team_wager_bonus_pct_)) + sizeof(_impl_.active_season_id_));
    _impl_.cavern_crawl_map_variant_ = 255u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_EventData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_event_points(&has_bits);
          _impl_.event_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_instance_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_challenge_instance_id(&has_bits);
          _impl_.challenge_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_quest_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_challenge_quest_id(&has_bits);
          _impl_.challenge_quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_quest_challenge_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_challenge_quest_challenge_id(&has_bits);
          _impl_.challenge_quest_challenge_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool challenge_completed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_challenge_completed(&has_bits);
          _impl_.challenge_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_rank_completed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_challenge_rank_completed(&has_bits);
          _impl_.challenge_rank_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_rank_previously_completed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_challenge_rank_previously_completed(&has_bits);
          _impl_.challenge_rank_previously_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool event_owned = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_event_owned(&has_bits);
          _impl_.event_owned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.SubChallenge sub_challenges_with_progress = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sub_challenges_with_progress(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 wager_winnings = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_wager_winnings(&has_bits);
          _impl_.wager_winnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cavern_challenge_active = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_cavern_challenge_active(&has_bits);
          _impl_.cavern_challenge_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cavern_challenge_winnings = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_cavern_challenge_winnings(&has_bits);
          _impl_.cavern_challenge_winnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 amount_wagered = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_amount_wagered(&has_bits);
          _impl_.amount_wagered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 periodic_point_adjustments = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_periodic_point_adjustments(&has_bits);
          _impl_.periodic_point_adjustments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.CavernChallengeResult cavern_challenge_map_results = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_cavern_challenge_map_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cavern_challenge_plus_shard_winnings = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_cavern_challenge_plus_shard_winnings(&has_bits);
          _impl_.cavern_challenge_plus_shard_winnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.ActionGrant actions_granted = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_actions_granted(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cavern_crawl_map_variant = 20 [default = 255];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_cavern_crawl_map_variant(&has_bits);
          _impl_.cavern_crawl_map_variant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_wager_bonus_pct = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_team_wager_bonus_pct(&has_bits);
          _impl_.team_wager_bonus_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 wager_streak_pct = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_wager_streak_pct(&has_bits);
          _impl_.wager_streak_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.CandyGrant candy_points_granted = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_candy_points_granted(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 active_season_id = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_active_season_id(&has_bits);
          _impl_.active_season_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cavern_crawl_half_credit = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_cavern_crawl_half_credit(&has_bits);
          _impl_.cavern_crawl_half_credit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.PeriodicResourceData periodic_resources = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_periodic_resources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_EventData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.EventData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_id(), target);
  }

  // optional uint32 event_points = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_points(), target);
  }

  // optional uint32 challenge_instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_instance_id(), target);
  }

  // optional uint32 challenge_quest_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_challenge_quest_id(), target);
  }

  // optional uint32 challenge_quest_challenge_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_challenge_quest_challenge_id(), target);
  }

  // optional bool challenge_completed = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_challenge_completed(), target);
  }

  // optional uint32 challenge_rank_completed = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_challenge_rank_completed(), target);
  }

  // optional uint32 challenge_rank_previously_completed = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_challenge_rank_previously_completed(), target);
  }

  // optional bool event_owned = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_event_owned(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.SubChallenge sub_challenges_with_progress = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sub_challenges_with_progress_size()); i < n; i++) {
    const auto& repfield = this->_internal_sub_challenges_with_progress(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 wager_winnings = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_wager_winnings(), target);
  }

  // optional bool cavern_challenge_active = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_cavern_challenge_active(), target);
  }

  // optional uint32 cavern_challenge_winnings = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_cavern_challenge_winnings(), target);
  }

  // optional uint32 amount_wagered = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_amount_wagered(), target);
  }

  // optional uint32 periodic_point_adjustments = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_periodic_point_adjustments(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.CavernChallengeResult cavern_challenge_map_results = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cavern_challenge_map_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_cavern_challenge_map_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 cavern_challenge_plus_shard_winnings = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_cavern_challenge_plus_shard_winnings(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.ActionGrant actions_granted = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_actions_granted_size()); i < n; i++) {
    const auto& repfield = this->_internal_actions_granted(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 cavern_crawl_map_variant = 20 [default = 255];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_cavern_crawl_map_variant(), target);
  }

  // optional uint32 team_wager_bonus_pct = 21;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_team_wager_bonus_pct(), target);
  }

  // optional uint32 wager_streak_pct = 22;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_wager_streak_pct(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.CandyGrant candy_points_granted = 23;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_candy_points_granted_size()); i < n; i++) {
    const auto& repfield = this->_internal_candy_points_granted(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 active_season_id = 24;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_active_season_id(), target);
  }

  // optional bool cavern_crawl_half_credit = 25;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_cavern_crawl_half_credit(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.PeriodicResourceData periodic_resources = 26;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_periodic_resources_size()); i < n; i++) {
    const auto& repfield = this->_internal_periodic_resources(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(26, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.EventData)
  return target;
}

size_t CDOTAMatchMetadata_Team_EventData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.EventData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchMetadata.Team.SubChallenge sub_challenges_with_progress = 10;
  total_size += 1UL * this->_internal_sub_challenges_with_progress_size();
  for (const auto& msg : this->_impl_.sub_challenges_with_progress_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.CavernChallengeResult cavern_challenge_map_results = 17;
  total_size += 2UL * this->_internal_cavern_challenge_map_results_size();
  for (const auto& msg : this->_impl_.cavern_challenge_map_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.ActionGrant actions_granted = 19;
  total_size += 2UL * this->_internal_actions_granted_size();
  for (const auto& msg : this->_impl_.actions_granted_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.CandyGrant candy_points_granted = 23;
  total_size += 2UL * this->_internal_candy_points_granted_size();
  for (const auto& msg : this->_impl_.candy_points_granted_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.PeriodicResourceData periodic_resources = 26;
  total_size += 2UL * this->_internal_periodic_resources_size();
  for (const auto& msg : this->_impl_.periodic_resources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 event_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_id());
    }

    // optional uint32 event_points = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_points());
    }

    // optional uint32 challenge_instance_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_instance_id());
    }

    // optional uint32 challenge_quest_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_quest_id());
    }

    // optional uint32 challenge_quest_challenge_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_quest_challenge_id());
    }

    // optional uint32 challenge_rank_completed = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_rank_completed());
    }

    // optional uint32 challenge_rank_previously_completed = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_rank_previously_completed());
    }

    // optional uint32 wager_winnings = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_wager_winnings());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 cavern_challenge_winnings = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cavern_challenge_winnings());
    }

    // optional bool challenge_completed = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool event_owned = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool cavern_challenge_active = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool cavern_crawl_half_credit = 25;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional uint32 amount_wagered = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_amount_wagered());
    }

    // optional uint32 periodic_point_adjustments = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_periodic_point_adjustments());
    }

    // optional uint32 cavern_challenge_plus_shard_winnings = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_cavern_challenge_plus_shard_winnings());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional uint32 team_wager_bonus_pct = 21;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_team_wager_bonus_pct());
    }

    // optional uint32 wager_streak_pct = 22;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_wager_streak_pct());
    }

    // optional uint32 active_season_id = 24;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_active_season_id());
    }

    // optional uint32 cavern_crawl_map_variant = 20 [default = 255];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_cavern_crawl_map_variant());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_EventData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchMetadata_Team_EventData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_EventData::GetClassData() const { return &_class_data_; }


void CDOTAMatchMetadata_Team_EventData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchMetadata_Team_EventData*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchMetadata_Team_EventData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.EventData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sub_challenges_with_progress_.MergeFrom(from._impl_.sub_challenges_with_progress_);
  _this->_impl_.cavern_challenge_map_results_.MergeFrom(from._impl_.cavern_challenge_map_results_);
  _this->_impl_.actions_granted_.MergeFrom(from._impl_.actions_granted_);
  _this->_impl_.candy_points_granted_.MergeFrom(from._impl_.candy_points_granted_);
  _this->_impl_.periodic_resources_.MergeFrom(from._impl_.periodic_resources_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_points_ = from._impl_.event_points_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.challenge_instance_id_ = from._impl_.challenge_instance_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.challenge_quest_id_ = from._impl_.challenge_quest_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.challenge_quest_challenge_id_ = from._impl_.challenge_quest_challenge_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.challenge_rank_completed_ = from._impl_.challenge_rank_completed_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.challenge_rank_previously_completed_ = from._impl_.challenge_rank_previously_completed_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.wager_winnings_ = from._impl_.wager_winnings_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.cavern_challenge_winnings_ = from._impl_.cavern_challenge_winnings_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.challenge_completed_ = from._impl_.challenge_completed_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.event_owned_ = from._impl_.event_owned_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.cavern_challenge_active_ = from._impl_.cavern_challenge_active_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.cavern_crawl_half_credit_ = from._impl_.cavern_crawl_half_credit_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.amount_wagered_ = from._impl_.amount_wagered_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.periodic_point_adjustments_ = from._impl_.periodic_point_adjustments_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.cavern_challenge_plus_shard_winnings_ = from._impl_.cavern_challenge_plus_shard_winnings_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.team_wager_bonus_pct_ = from._impl_.team_wager_bonus_pct_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.wager_streak_pct_ = from._impl_.wager_streak_pct_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.active_season_id_ = from._impl_.active_season_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.cavern_crawl_map_variant_ = from._impl_.cavern_crawl_map_variant_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_EventData::CopyFrom(const CDOTAMatchMetadata_Team_EventData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.EventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_EventData::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_EventData::InternalSwap(CDOTAMatchMetadata_Team_EventData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sub_challenges_with_progress_.InternalSwap(&other->_impl_.sub_challenges_with_progress_);
  _impl_.cavern_challenge_map_results_.InternalSwap(&other->_impl_.cavern_challenge_map_results_);
  _impl_.actions_granted_.InternalSwap(&other->_impl_.actions_granted_);
  _impl_.candy_points_granted_.InternalSwap(&other->_impl_.candy_points_granted_);
  _impl_.periodic_resources_.InternalSwap(&other->_impl_.periodic_resources_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_EventData, _impl_.active_season_id_)
      + sizeof(CDOTAMatchMetadata_Team_EventData::_impl_.active_season_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_EventData, _impl_.event_id_)>(
          reinterpret_cast<char*>(&_impl_.event_id_),
          reinterpret_cast<char*>(&other->_impl_.event_id_));
  swap(_impl_.cavern_crawl_map_variant_, other->_impl_.cavern_crawl_map_variant_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_EventData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[13]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_FeaturedGamemodeProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_FeaturedGamemodeProgress>()._impl_._has_bits_);
  static void set_has_start_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAMatchMetadata_Team_FeaturedGamemodeProgress::CDOTAMatchMetadata_Team_FeaturedGamemodeProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.FeaturedGamemodeProgress)
}
CDOTAMatchMetadata_Team_FeaturedGamemodeProgress::CDOTAMatchMetadata_Team_FeaturedGamemodeProgress(const CDOTAMatchMetadata_Team_FeaturedGamemodeProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchMetadata_Team_FeaturedGamemodeProgress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_value_){}
    , decltype(_impl_.end_value_){}
    , decltype(_impl_.max_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_value_, &from._impl_.start_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_value_) -
    reinterpret_cast<char*>(&_impl_.start_value_)) + sizeof(_impl_.max_value_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.FeaturedGamemodeProgress)
}

inline void CDOTAMatchMetadata_Team_FeaturedGamemodeProgress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_value_){0u}
    , decltype(_impl_.end_value_){0u}
    , decltype(_impl_.max_value_){0u}
  };
}

CDOTAMatchMetadata_Team_FeaturedGamemodeProgress::~CDOTAMatchMetadata_Team_FeaturedGamemodeProgress() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.FeaturedGamemodeProgress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchMetadata_Team_FeaturedGamemodeProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team_FeaturedGamemodeProgress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_FeaturedGamemodeProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.FeaturedGamemodeProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.start_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_value_) -
        reinterpret_cast<char*>(&_impl_.start_value_)) + sizeof(_impl_.max_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_FeaturedGamemodeProgress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 start_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_start_value(&has_bits);
          _impl_.start_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 end_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_end_value(&has_bits);
          _impl_.end_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_max_value(&has_bits);
          _impl_.max_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_FeaturedGamemodeProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.FeaturedGamemodeProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 start_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_value(), target);
  }

  // optional uint32 end_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_end_value(), target);
  }

  // optional uint32 max_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.FeaturedGamemodeProgress)
  return target;
}

size_t CDOTAMatchMetadata_Team_FeaturedGamemodeProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.FeaturedGamemodeProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 start_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_start_value());
    }

    // optional uint32 end_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_end_value());
    }

    // optional uint32 max_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_FeaturedGamemodeProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchMetadata_Team_FeaturedGamemodeProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_FeaturedGamemodeProgress::GetClassData() const { return &_class_data_; }


void CDOTAMatchMetadata_Team_FeaturedGamemodeProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchMetadata_Team_FeaturedGamemodeProgress*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchMetadata_Team_FeaturedGamemodeProgress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.FeaturedGamemodeProgress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.start_value_ = from._impl_.start_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.end_value_ = from._impl_.end_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.max_value_ = from._impl_.max_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_FeaturedGamemodeProgress::CopyFrom(const CDOTAMatchMetadata_Team_FeaturedGamemodeProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.FeaturedGamemodeProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_FeaturedGamemodeProgress::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_FeaturedGamemodeProgress::InternalSwap(CDOTAMatchMetadata_Team_FeaturedGamemodeProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_FeaturedGamemodeProgress, _impl_.max_value_)
      + sizeof(CDOTAMatchMetadata_Team_FeaturedGamemodeProgress::_impl_.max_value_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_FeaturedGamemodeProgress, _impl_.start_value_)>(
          reinterpret_cast<char*>(&_impl_.start_value_),
          reinterpret_cast<char*>(&other->_impl_.start_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_FeaturedGamemodeProgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[14]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_Player_ContractProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_Player_ContractProgress>()._impl_._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_challenge_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_contract_stars(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_contract_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CDOTAMatchMetadata_Team_Player_ContractProgress::CDOTAMatchMetadata_Team_Player_ContractProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.Player.ContractProgress)
}
CDOTAMatchMetadata_Team_Player_ContractProgress::CDOTAMatchMetadata_Team_Player_ContractProgress(const CDOTAMatchMetadata_Team_Player_ContractProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchMetadata_Team_Player_ContractProgress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.challenge_instance_id_){}
    , decltype(_impl_.challenge_parameter_){}
    , decltype(_impl_.contract_stars_){}
    , decltype(_impl_.contract_slot_){}
    , decltype(_impl_.completed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.completed_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.completed_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.Player.ContractProgress)
}

inline void CDOTAMatchMetadata_Team_Player_ContractProgress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.event_id_){0u}
    , decltype(_impl_.challenge_instance_id_){0u}
    , decltype(_impl_.challenge_parameter_){0u}
    , decltype(_impl_.contract_stars_){0u}
    , decltype(_impl_.contract_slot_){0u}
    , decltype(_impl_.completed_){false}
  };
}

CDOTAMatchMetadata_Team_Player_ContractProgress::~CDOTAMatchMetadata_Team_Player_ContractProgress() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.Player.ContractProgress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchMetadata_Team_Player_ContractProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team_Player_ContractProgress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_Player_ContractProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.Player.ContractProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.completed_) -
        reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.completed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_Player_ContractProgress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_event_id(&has_bits);
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_instance_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_challenge_instance_id(&has_bits);
          _impl_.challenge_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_parameter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_challenge_parameter(&has_bits);
          _impl_.challenge_parameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 contract_stars = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_contract_stars(&has_bits);
          _impl_.contract_stars_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 contract_slot = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_contract_slot(&has_bits);
          _impl_.contract_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool completed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_completed(&has_bits);
          _impl_.completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_Player_ContractProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.Player.ContractProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_id(), target);
  }

  // optional uint32 challenge_instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_instance_id(), target);
  }

  // optional uint32 challenge_parameter = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_challenge_parameter(), target);
  }

  // optional uint32 contract_stars = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_contract_stars(), target);
  }

  // optional uint32 contract_slot = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_contract_slot(), target);
  }

  // optional bool completed = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_completed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.Player.ContractProgress)
  return target;
}

size_t CDOTAMatchMetadata_Team_Player_ContractProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.Player.ContractProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
    }

    // optional uint32 event_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_id());
    }

    // optional uint32 challenge_instance_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_instance_id());
    }

    // optional uint32 challenge_parameter = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_parameter());
    }

    // optional uint32 contract_stars = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_contract_stars());
    }

    // optional uint32 contract_slot = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_contract_slot());
    }

    // optional bool completed = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_Player_ContractProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchMetadata_Team_Player_ContractProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_Player_ContractProgress::GetClassData() const { return &_class_data_; }


void CDOTAMatchMetadata_Team_Player_ContractProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchMetadata_Team_Player_ContractProgress*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchMetadata_Team_Player_ContractProgress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.Player.ContractProgress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.guild_id_ = from._impl_.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.challenge_instance_id_ = from._impl_.challenge_instance_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.challenge_parameter_ = from._impl_.challenge_parameter_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.contract_stars_ = from._impl_.contract_stars_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.contract_slot_ = from._impl_.contract_slot_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.completed_ = from._impl_.completed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_Player_ContractProgress::CopyFrom(const CDOTAMatchMetadata_Team_Player_ContractProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.Player.ContractProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_Player_ContractProgress::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_Player_ContractProgress::InternalSwap(CDOTAMatchMetadata_Team_Player_ContractProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player_ContractProgress, _impl_.completed_)
      + sizeof(CDOTAMatchMetadata_Team_Player_ContractProgress::_impl_.completed_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player_ContractProgress, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_Player_ContractProgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[15]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_Player>()._impl_._has_bits_);
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_avg_kills_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_avg_deaths_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_avg_assists_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_avg_gpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_avg_xpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_best_kills_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_best_assists_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_best_gpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_best_xpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_win_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_best_win_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_fight_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_farm_score(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_support_score(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_push_score(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_avg_stats_calibrated(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_hero_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_camps_stacked(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_lane_selection_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_rampages(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_triple_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_aegis_snatched(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_rapiers_purchased(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_couriers_killed(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_net_worth_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_support_gold_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_observer_wards_placed(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_sentry_wards_placed(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_wards_dewarded(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_stun_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_rank_mmr_boost_type(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_team_number(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_team_slot(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::CDOTAMatchMetadata_Team_FeaturedGamemodeProgress& featured_gamemode_progress(const CDOTAMatchMetadata_Team_Player* msg);
  static void set_has_featured_gamemode_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_featured_hero_sticker_index(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_featured_hero_sticker_quality(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
};

const ::CDOTAMatchMetadata_Team_FeaturedGamemodeProgress&
CDOTAMatchMetadata_Team_Player::_Internal::featured_gamemode_progress(const CDOTAMatchMetadata_Team_Player* msg) {
  return *msg->_impl_.featured_gamemode_progress_;
}
CDOTAMatchMetadata_Team_Player::CDOTAMatchMetadata_Team_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.Player)
}
CDOTAMatchMetadata_Team_Player::CDOTAMatchMetadata_Team_Player(const CDOTAMatchMetadata_Team_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchMetadata_Team_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_upgrades_){from._impl_.ability_upgrades_}
    , decltype(_impl_.kills_){from._impl_.kills_}
    , decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.level_up_times_){from._impl_.level_up_times_}
    , decltype(_impl_.graph_net_worth_){from._impl_.graph_net_worth_}
    , decltype(_impl_.inventory_snapshot_){from._impl_.inventory_snapshot_}
    , decltype(_impl_.auto_style_criteria_){from._impl_.auto_style_criteria_}
    , decltype(_impl_.event_data_){from._impl_.event_data_}
    , decltype(_impl_.strange_gem_progress_){from._impl_.strange_gem_progress_}
    , decltype(_impl_.victory_prediction_){from._impl_.victory_prediction_}
    , decltype(_impl_.contract_progress_){from._impl_.contract_progress_}
    , decltype(_impl_.guild_ids_){from._impl_.guild_ids_}
    , decltype(_impl_.graph_hero_damage_){from._impl_.graph_hero_damage_}
    , decltype(_impl_.equipped_econ_items_){from._impl_.equipped_econ_items_}
    , decltype(_impl_.featured_gamemode_progress_){nullptr}
    , decltype(_impl_.player_slot_){}
    , decltype(_impl_.avg_kills_x16_){}
    , decltype(_impl_.avg_deaths_x16_){}
    , decltype(_impl_.avg_assists_x16_){}
    , decltype(_impl_.avg_gpm_x16_){}
    , decltype(_impl_.avg_xpm_x16_){}
    , decltype(_impl_.best_kills_x16_){}
    , decltype(_impl_.best_assists_x16_){}
    , decltype(_impl_.best_gpm_x16_){}
    , decltype(_impl_.best_xpm_x16_){}
    , decltype(_impl_.win_streak_){}
    , decltype(_impl_.best_win_streak_){}
    , decltype(_impl_.fight_score_){}
    , decltype(_impl_.farm_score_){}
    , decltype(_impl_.support_score_){}
    , decltype(_impl_.push_score_){}
    , decltype(_impl_.avg_stats_calibrated_){}
    , decltype(_impl_.hero_xp_){}
    , decltype(_impl_.camps_stacked_){}
    , decltype(_impl_.lane_selection_flags_){}
    , decltype(_impl_.rampages_){}
    , decltype(_impl_.triple_kills_){}
    , decltype(_impl_.aegis_snatched_){}
    , decltype(_impl_.rapiers_purchased_){}
    , decltype(_impl_.couriers_killed_){}
    , decltype(_impl_.net_worth_rank_){}
    , decltype(_impl_.support_gold_spent_){}
    , decltype(_impl_.observer_wards_placed_){}
    , decltype(_impl_.sentry_wards_placed_){}
    , decltype(_impl_.wards_dewarded_){}
    , decltype(_impl_.stun_duration_){}
    , decltype(_impl_.rank_mmr_boost_type_){}
    , decltype(_impl_.team_number_){}
    , decltype(_impl_.team_slot_){}
    , decltype(_impl_.featured_hero_sticker_index_){}
    , decltype(_impl_.featured_hero_sticker_quality_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_featured_gamemode_progress()) {
    _this->_impl_.featured_gamemode_progress_ = new ::CDOTAMatchMetadata_Team_FeaturedGamemodeProgress(*from._impl_.featured_gamemode_progress_);
  }
  ::memcpy(&_impl_.player_slot_, &from._impl_.player_slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.featured_hero_sticker_quality_) -
    reinterpret_cast<char*>(&_impl_.player_slot_)) + sizeof(_impl_.featured_hero_sticker_quality_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.Player)
}

inline void CDOTAMatchMetadata_Team_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_upgrades_){arena}
    , decltype(_impl_.kills_){arena}
    , decltype(_impl_.items_){arena}
    , decltype(_impl_.level_up_times_){arena}
    , decltype(_impl_.graph_net_worth_){arena}
    , decltype(_impl_.inventory_snapshot_){arena}
    , decltype(_impl_.auto_style_criteria_){arena}
    , decltype(_impl_.event_data_){arena}
    , decltype(_impl_.strange_gem_progress_){arena}
    , decltype(_impl_.victory_prediction_){arena}
    , decltype(_impl_.contract_progress_){arena}
    , decltype(_impl_.guild_ids_){arena}
    , decltype(_impl_.graph_hero_damage_){arena}
    , decltype(_impl_.equipped_econ_items_){arena}
    , decltype(_impl_.featured_gamemode_progress_){nullptr}
    , decltype(_impl_.player_slot_){0u}
    , decltype(_impl_.avg_kills_x16_){0u}
    , decltype(_impl_.avg_deaths_x16_){0u}
    , decltype(_impl_.avg_assists_x16_){0u}
    , decltype(_impl_.avg_gpm_x16_){0u}
    , decltype(_impl_.avg_xpm_x16_){0u}
    , decltype(_impl_.best_kills_x16_){0u}
    , decltype(_impl_.best_assists_x16_){0u}
    , decltype(_impl_.best_gpm_x16_){0u}
    , decltype(_impl_.best_xpm_x16_){0u}
    , decltype(_impl_.win_streak_){0u}
    , decltype(_impl_.best_win_streak_){0u}
    , decltype(_impl_.fight_score_){0}
    , decltype(_impl_.farm_score_){0}
    , decltype(_impl_.support_score_){0}
    , decltype(_impl_.push_score_){0}
    , decltype(_impl_.avg_stats_calibrated_){false}
    , decltype(_impl_.hero_xp_){0u}
    , decltype(_impl_.camps_stacked_){0u}
    , decltype(_impl_.lane_selection_flags_){0u}
    , decltype(_impl_.rampages_){0u}
    , decltype(_impl_.triple_kills_){0u}
    , decltype(_impl_.aegis_snatched_){0u}
    , decltype(_impl_.rapiers_purchased_){0u}
    , decltype(_impl_.couriers_killed_){0u}
    , decltype(_impl_.net_worth_rank_){0u}
    , decltype(_impl_.support_gold_spent_){0u}
    , decltype(_impl_.observer_wards_placed_){0u}
    , decltype(_impl_.sentry_wards_placed_){0u}
    , decltype(_impl_.wards_dewarded_){0u}
    , decltype(_impl_.stun_duration_){0}
    , decltype(_impl_.rank_mmr_boost_type_){0}
    , decltype(_impl_.team_number_){0}
    , decltype(_impl_.team_slot_){0u}
    , decltype(_impl_.featured_hero_sticker_index_){0u}
    , decltype(_impl_.featured_hero_sticker_quality_){0u}
  };
}

CDOTAMatchMetadata_Team_Player::~CDOTAMatchMetadata_Team_Player() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchMetadata_Team_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ability_upgrades_.~RepeatedField();
  _impl_.kills_.~RepeatedPtrField();
  _impl_.items_.~RepeatedPtrField();
  _impl_.level_up_times_.~RepeatedField();
  _impl_.graph_net_worth_.~RepeatedField();
  _impl_.inventory_snapshot_.~RepeatedPtrField();
  _impl_.auto_style_criteria_.~RepeatedPtrField();
  _impl_.event_data_.~RepeatedPtrField();
  _impl_.strange_gem_progress_.~RepeatedPtrField();
  _impl_.victory_prediction_.~RepeatedPtrField();
  _impl_.contract_progress_.~RepeatedPtrField();
  _impl_.guild_ids_.~RepeatedField();
  _impl_.graph_hero_damage_.~RepeatedField();
  _impl_.equipped_econ_items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.featured_gamemode_progress_;
}

void CDOTAMatchMetadata_Team_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ability_upgrades_.Clear();
  _impl_.kills_.Clear();
  _impl_.items_.Clear();
  _impl_.level_up_times_.Clear();
  _impl_.graph_net_worth_.Clear();
  _impl_.inventory_snapshot_.Clear();
  _impl_.auto_style_criteria_.Clear();
  _impl_.event_data_.Clear();
  _impl_.strange_gem_progress_.Clear();
  _impl_.victory_prediction_.Clear();
  _impl_.contract_progress_.Clear();
  _impl_.guild_ids_.Clear();
  _impl_.graph_hero_damage_.Clear();
  _impl_.equipped_econ_items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.featured_gamemode_progress_ != nullptr);
    _impl_.featured_gamemode_progress_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.player_slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.best_kills_x16_) -
        reinterpret_cast<char*>(&_impl_.player_slot_)) + sizeof(_impl_.best_kills_x16_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.best_assists_x16_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.support_score_) -
        reinterpret_cast<char*>(&_impl_.best_assists_x16_)) + sizeof(_impl_.support_score_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.push_score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.aegis_snatched_) -
        reinterpret_cast<char*>(&_impl_.push_score_)) + sizeof(_impl_.aegis_snatched_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.rapiers_purchased_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.stun_duration_) -
        reinterpret_cast<char*>(&_impl_.rapiers_purchased_)) + sizeof(_impl_.stun_duration_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.rank_mmr_boost_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.featured_hero_sticker_quality_) -
        reinterpret_cast<char*>(&_impl_.rank_mmr_boost_type_)) + sizeof(_impl_.featured_hero_sticker_quality_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 ability_upgrades = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ability_upgrades(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ability_upgrades(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_player_slot(&_impl_._has_bits_);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.PlayerKill kills = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.ItemPurchase items = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 avg_kills_x16 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_avg_kills_x16(&_impl_._has_bits_);
          _impl_.avg_kills_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 avg_deaths_x16 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_avg_deaths_x16(&_impl_._has_bits_);
          _impl_.avg_deaths_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 avg_assists_x16 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_avg_assists_x16(&_impl_._has_bits_);
          _impl_.avg_assists_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 avg_gpm_x16 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_avg_gpm_x16(&_impl_._has_bits_);
          _impl_.avg_gpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 avg_xpm_x16 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_avg_xpm_x16(&_impl_._has_bits_);
          _impl_.avg_xpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 best_kills_x16 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_best_kills_x16(&_impl_._has_bits_);
          _impl_.best_kills_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 best_assists_x16 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_best_assists_x16(&_impl_._has_bits_);
          _impl_.best_assists_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 best_gpm_x16 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_best_gpm_x16(&_impl_._has_bits_);
          _impl_.best_gpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 best_xpm_x16 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_best_xpm_x16(&_impl_._has_bits_);
          _impl_.best_xpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 win_streak = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_win_streak(&_impl_._has_bits_);
          _impl_.win_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 best_win_streak = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_best_win_streak(&_impl_._has_bits_);
          _impl_.best_win_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float fight_score = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_fight_score(&_impl_._has_bits_);
          _impl_.fight_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float farm_score = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_farm_score(&_impl_._has_bits_);
          _impl_.farm_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float support_score = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _Internal::set_has_support_score(&_impl_._has_bits_);
          _impl_.support_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float push_score = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          _Internal::set_has_push_score(&_impl_._has_bits_);
          _impl_.push_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 level_up_times = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_level_up_times(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<176>(ptr));
        } else if (static_cast<uint8_t>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_level_up_times(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float graph_net_worth = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_graph_net_worth(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<189>(ptr));
        } else if (static_cast<uint8_t>(tag) == 186) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_net_worth(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_inventory_snapshot(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool avg_stats_calibrated = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_avg_stats_calibrated(&_impl_._has_bits_);
          _impl_.avg_stats_calibrated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_auto_style_criteria(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.EventData event_data = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_event_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.StrangeGemProgress strange_gem_progress = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_strange_gem_progress(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_xp = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_hero_xp(&_impl_._has_bits_);
          _impl_.hero_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 camps_stacked = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_camps_stacked(&_impl_._has_bits_);
          _impl_.camps_stacked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.VictoryPrediction victory_prediction = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_victory_prediction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lane_selection_flags = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_lane_selection_flags(&_impl_._has_bits_);
          _impl_.lane_selection_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rampages = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_rampages(&_impl_._has_bits_);
          _impl_.rampages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 triple_kills = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_triple_kills(&_impl_._has_bits_);
          _impl_.triple_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 aegis_snatched = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_aegis_snatched(&_impl_._has_bits_);
          _impl_.aegis_snatched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rapiers_purchased = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_rapiers_purchased(&_impl_._has_bits_);
          _impl_.rapiers_purchased_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 couriers_killed = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_couriers_killed(&_impl_._has_bits_);
          _impl_.couriers_killed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 net_worth_rank = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_net_worth_rank(&_impl_._has_bits_);
          _impl_.net_worth_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 support_gold_spent = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_support_gold_spent(&_impl_._has_bits_);
          _impl_.support_gold_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 observer_wards_placed = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_observer_wards_placed(&_impl_._has_bits_);
          _impl_.observer_wards_placed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sentry_wards_placed = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_sentry_wards_placed(&_impl_._has_bits_);
          _impl_.sentry_wards_placed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 wards_dewarded = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_wards_dewarded(&_impl_._has_bits_);
          _impl_.wards_dewarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float stun_duration = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_stun_duration(&_impl_._has_bits_);
          _impl_.stun_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EDOTAMMRBoostType_IsValid(val))) {
            _internal_set_rank_mmr_boost_type(static_cast<::EDOTAMMRBoostType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(46, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.Player.ContractProgress contract_progress = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_contract_progress(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<386>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 guild_ids = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_guild_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<392>(ptr));
        } else if (static_cast<uint8_t>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_guild_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float graph_hero_damage = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_graph_hero_damage(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<405>(ptr));
        } else if (static_cast<uint8_t>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_hero_damage(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_GC_TEAM team_number = 51 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GC_TEAM_IsValid(val))) {
            _internal_set_team_number(static_cast<::DOTA_GC_TEAM>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(51, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_slot = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_team_slot(&_impl_._has_bits_);
          _impl_.team_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAMatchMetadata.Team.FeaturedGamemodeProgress featured_gamemode_progress = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_featured_gamemode_progress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 featured_hero_sticker_index = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_featured_hero_sticker_index(&_impl_._has_bits_);
          _impl_.featured_hero_sticker_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 featured_hero_sticker_quality = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_featured_hero_sticker_quality(&_impl_._has_bits_);
          _impl_.featured_hero_sticker_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.EconItem equipped_econ_items = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_equipped_econ_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<450>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 ability_upgrades = 2;
  for (int i = 0, n = this->_internal_ability_upgrades_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ability_upgrades(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 player_slot = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_player_slot(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.PlayerKill kills = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_kills_size()); i < n; i++) {
    const auto& repfield = this->_internal_kills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CDOTAMatchMetadata.Team.ItemPurchase items = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 avg_kills_x16 = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_avg_kills_x16(), target);
  }

  // optional uint32 avg_deaths_x16 = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_avg_deaths_x16(), target);
  }

  // optional uint32 avg_assists_x16 = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_avg_assists_x16(), target);
  }

  // optional uint32 avg_gpm_x16 = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_avg_gpm_x16(), target);
  }

  // optional uint32 avg_xpm_x16 = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_avg_xpm_x16(), target);
  }

  // optional uint32 best_kills_x16 = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_best_kills_x16(), target);
  }

  // optional uint32 best_assists_x16 = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_best_assists_x16(), target);
  }

  // optional uint32 best_gpm_x16 = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_best_gpm_x16(), target);
  }

  // optional uint32 best_xpm_x16 = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_best_xpm_x16(), target);
  }

  // optional uint32 win_streak = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_win_streak(), target);
  }

  // optional uint32 best_win_streak = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_best_win_streak(), target);
  }

  // optional float fight_score = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_fight_score(), target);
  }

  // optional float farm_score = 19;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_farm_score(), target);
  }

  // optional float support_score = 20;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(20, this->_internal_support_score(), target);
  }

  // optional float push_score = 21;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(21, this->_internal_push_score(), target);
  }

  // repeated uint32 level_up_times = 22;
  for (int i = 0, n = this->_internal_level_up_times_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_level_up_times(i), target);
  }

  // repeated float graph_net_worth = 23;
  for (int i = 0, n = this->_internal_graph_net_worth_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(23, this->_internal_graph_net_worth(i), target);
  }

  // repeated .CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inventory_snapshot_size()); i < n; i++) {
    const auto& repfield = this->_internal_inventory_snapshot(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(24, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool avg_stats_calibrated = 25;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_avg_stats_calibrated(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_auto_style_criteria_size()); i < n; i++) {
    const auto& repfield = this->_internal_auto_style_criteria(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(26, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CDOTAMatchMetadata.Team.EventData event_data = 29;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_event_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_event_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(29, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CDOTAMatchMetadata.Team.StrangeGemProgress strange_gem_progress = 30;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_strange_gem_progress_size()); i < n; i++) {
    const auto& repfield = this->_internal_strange_gem_progress(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(30, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 hero_xp = 31;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(31, this->_internal_hero_xp(), target);
  }

  // optional uint32 camps_stacked = 32;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(32, this->_internal_camps_stacked(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.VictoryPrediction victory_prediction = 33;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_victory_prediction_size()); i < n; i++) {
    const auto& repfield = this->_internal_victory_prediction(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(33, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 lane_selection_flags = 34;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(34, this->_internal_lane_selection_flags(), target);
  }

  // optional uint32 rampages = 35;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(35, this->_internal_rampages(), target);
  }

  // optional uint32 triple_kills = 36;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(36, this->_internal_triple_kills(), target);
  }

  // optional uint32 aegis_snatched = 37;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(37, this->_internal_aegis_snatched(), target);
  }

  // optional uint32 rapiers_purchased = 38;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(38, this->_internal_rapiers_purchased(), target);
  }

  // optional uint32 couriers_killed = 39;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(39, this->_internal_couriers_killed(), target);
  }

  // optional uint32 net_worth_rank = 40;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(40, this->_internal_net_worth_rank(), target);
  }

  // optional uint32 support_gold_spent = 41;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(41, this->_internal_support_gold_spent(), target);
  }

  // optional uint32 observer_wards_placed = 42;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(42, this->_internal_observer_wards_placed(), target);
  }

  // optional uint32 sentry_wards_placed = 43;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(43, this->_internal_sentry_wards_placed(), target);
  }

  // optional uint32 wards_dewarded = 44;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(44, this->_internal_wards_dewarded(), target);
  }

  // optional float stun_duration = 45;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(45, this->_internal_stun_duration(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      46, this->_internal_rank_mmr_boost_type(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.Player.ContractProgress contract_progress = 48;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contract_progress_size()); i < n; i++) {
    const auto& repfield = this->_internal_contract_progress(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(48, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 guild_ids = 49;
  for (int i = 0, n = this->_internal_guild_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(49, this->_internal_guild_ids(i), target);
  }

  // repeated float graph_hero_damage = 50;
  for (int i = 0, n = this->_internal_graph_hero_damage_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(50, this->_internal_graph_hero_damage(i), target);
  }

  // optional .DOTA_GC_TEAM team_number = 51 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      51, this->_internal_team_number(), target);
  }

  // optional uint32 team_slot = 52;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(52, this->_internal_team_slot(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CDOTAMatchMetadata.Team.FeaturedGamemodeProgress featured_gamemode_progress = 53;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(53, _Internal::featured_gamemode_progress(this),
        _Internal::featured_gamemode_progress(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 featured_hero_sticker_index = 54;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(54, this->_internal_featured_hero_sticker_index(), target);
  }

  // optional uint32 featured_hero_sticker_quality = 55;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(55, this->_internal_featured_hero_sticker_quality(), target);
  }

  // repeated .CDOTAMatchMetadata.EconItem equipped_econ_items = 56;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_equipped_econ_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_equipped_econ_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(56, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.Player)
  return target;
}

size_t CDOTAMatchMetadata_Team_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ability_upgrades = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.ability_upgrades_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_ability_upgrades_size());
    total_size += data_size;
  }

  // repeated .CDOTAMatchMetadata.Team.PlayerKill kills = 5;
  total_size += 1UL * this->_internal_kills_size();
  for (const auto& msg : this->_impl_.kills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.ItemPurchase items = 6;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 level_up_times = 22;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.level_up_times_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_level_up_times_size());
    total_size += data_size;
  }

  // repeated float graph_net_worth = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_net_worth_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_graph_net_worth_size());
    total_size += data_size;
  }

  // repeated .CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
  total_size += 2UL * this->_internal_inventory_snapshot_size();
  for (const auto& msg : this->_impl_.inventory_snapshot_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
  total_size += 2UL * this->_internal_auto_style_criteria_size();
  for (const auto& msg : this->_impl_.auto_style_criteria_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.EventData event_data = 29;
  total_size += 2UL * this->_internal_event_data_size();
  for (const auto& msg : this->_impl_.event_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.StrangeGemProgress strange_gem_progress = 30;
  total_size += 2UL * this->_internal_strange_gem_progress_size();
  for (const auto& msg : this->_impl_.strange_gem_progress_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.VictoryPrediction victory_prediction = 33;
  total_size += 2UL * this->_internal_victory_prediction_size();
  for (const auto& msg : this->_impl_.victory_prediction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.Player.ContractProgress contract_progress = 48;
  total_size += 2UL * this->_internal_contract_progress_size();
  for (const auto& msg : this->_impl_.contract_progress_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 guild_ids = 49;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.guild_ids_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_guild_ids_size());
    total_size += data_size;
  }

  // repeated float graph_hero_damage = 50;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_hero_damage_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_graph_hero_damage_size());
    total_size += data_size;
  }

  // repeated .CDOTAMatchMetadata.EconItem equipped_econ_items = 56;
  total_size += 2UL * this->_internal_equipped_econ_items_size();
  for (const auto& msg : this->_impl_.equipped_econ_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CDOTAMatchMetadata.Team.FeaturedGamemodeProgress featured_gamemode_progress = 53;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.featured_gamemode_progress_);
    }

    // optional uint32 player_slot = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_slot());
    }

    // optional uint32 avg_kills_x16 = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_avg_kills_x16());
    }

    // optional uint32 avg_deaths_x16 = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_avg_deaths_x16());
    }

    // optional uint32 avg_assists_x16 = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_avg_assists_x16());
    }

    // optional uint32 avg_gpm_x16 = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_avg_gpm_x16());
    }

    // optional uint32 avg_xpm_x16 = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_avg_xpm_x16());
    }

    // optional uint32 best_kills_x16 = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_best_kills_x16());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 best_assists_x16 = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_best_assists_x16());
    }

    // optional uint32 best_gpm_x16 = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_best_gpm_x16());
    }

    // optional uint32 best_xpm_x16 = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_best_xpm_x16());
    }

    // optional uint32 win_streak = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_win_streak());
    }

    // optional uint32 best_win_streak = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_best_win_streak());
    }

    // optional float fight_score = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float farm_score = 19;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float support_score = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float push_score = 21;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional bool avg_stats_calibrated = 25;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional uint32 hero_xp = 31;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_hero_xp());
    }

    // optional uint32 camps_stacked = 32;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_camps_stacked());
    }

    // optional uint32 lane_selection_flags = 34;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_lane_selection_flags());
    }

    // optional uint32 rampages = 35;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_rampages());
    }

    // optional uint32 triple_kills = 36;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_triple_kills());
    }

    // optional uint32 aegis_snatched = 37;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_aegis_snatched());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 rapiers_purchased = 38;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_rapiers_purchased());
    }

    // optional uint32 couriers_killed = 39;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_couriers_killed());
    }

    // optional uint32 net_worth_rank = 40;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_net_worth_rank());
    }

    // optional uint32 support_gold_spent = 41;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_support_gold_spent());
    }

    // optional uint32 observer_wards_placed = 42;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_observer_wards_placed());
    }

    // optional uint32 sentry_wards_placed = 43;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_sentry_wards_placed());
    }

    // optional uint32 wards_dewarded = 44;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_wards_dewarded());
    }

    // optional float stun_duration = 45;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    // optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_rank_mmr_boost_type());
    }

    // optional .DOTA_GC_TEAM team_number = 51 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_team_number());
    }

    // optional uint32 team_slot = 52;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_team_slot());
    }

    // optional uint32 featured_hero_sticker_index = 54;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_featured_hero_sticker_index());
    }

    // optional uint32 featured_hero_sticker_quality = 55;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_featured_hero_sticker_quality());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchMetadata_Team_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_Player::GetClassData() const { return &_class_data_; }


void CDOTAMatchMetadata_Team_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchMetadata_Team_Player*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchMetadata_Team_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ability_upgrades_.MergeFrom(from._impl_.ability_upgrades_);
  _this->_impl_.kills_.MergeFrom(from._impl_.kills_);
  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_impl_.level_up_times_.MergeFrom(from._impl_.level_up_times_);
  _this->_impl_.graph_net_worth_.MergeFrom(from._impl_.graph_net_worth_);
  _this->_impl_.inventory_snapshot_.MergeFrom(from._impl_.inventory_snapshot_);
  _this->_impl_.auto_style_criteria_.MergeFrom(from._impl_.auto_style_criteria_);
  _this->_impl_.event_data_.MergeFrom(from._impl_.event_data_);
  _this->_impl_.strange_gem_progress_.MergeFrom(from._impl_.strange_gem_progress_);
  _this->_impl_.victory_prediction_.MergeFrom(from._impl_.victory_prediction_);
  _this->_impl_.contract_progress_.MergeFrom(from._impl_.contract_progress_);
  _this->_impl_.guild_ids_.MergeFrom(from._impl_.guild_ids_);
  _this->_impl_.graph_hero_damage_.MergeFrom(from._impl_.graph_hero_damage_);
  _this->_impl_.equipped_econ_items_.MergeFrom(from._impl_.equipped_econ_items_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_featured_gamemode_progress()->::CDOTAMatchMetadata_Team_FeaturedGamemodeProgress::MergeFrom(
          from._internal_featured_gamemode_progress());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.avg_kills_x16_ = from._impl_.avg_kills_x16_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.avg_deaths_x16_ = from._impl_.avg_deaths_x16_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.avg_assists_x16_ = from._impl_.avg_assists_x16_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.avg_gpm_x16_ = from._impl_.avg_gpm_x16_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.avg_xpm_x16_ = from._impl_.avg_xpm_x16_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.best_kills_x16_ = from._impl_.best_kills_x16_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.best_assists_x16_ = from._impl_.best_assists_x16_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.best_gpm_x16_ = from._impl_.best_gpm_x16_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.best_xpm_x16_ = from._impl_.best_xpm_x16_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.win_streak_ = from._impl_.win_streak_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.best_win_streak_ = from._impl_.best_win_streak_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.fight_score_ = from._impl_.fight_score_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.farm_score_ = from._impl_.farm_score_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.support_score_ = from._impl_.support_score_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.push_score_ = from._impl_.push_score_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.avg_stats_calibrated_ = from._impl_.avg_stats_calibrated_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.hero_xp_ = from._impl_.hero_xp_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.camps_stacked_ = from._impl_.camps_stacked_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.lane_selection_flags_ = from._impl_.lane_selection_flags_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.rampages_ = from._impl_.rampages_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.triple_kills_ = from._impl_.triple_kills_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.aegis_snatched_ = from._impl_.aegis_snatched_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.rapiers_purchased_ = from._impl_.rapiers_purchased_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.couriers_killed_ = from._impl_.couriers_killed_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.net_worth_rank_ = from._impl_.net_worth_rank_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.support_gold_spent_ = from._impl_.support_gold_spent_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.observer_wards_placed_ = from._impl_.observer_wards_placed_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.sentry_wards_placed_ = from._impl_.sentry_wards_placed_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.wards_dewarded_ = from._impl_.wards_dewarded_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.stun_duration_ = from._impl_.stun_duration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.rank_mmr_boost_type_ = from._impl_.rank_mmr_boost_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.team_number_ = from._impl_.team_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.team_slot_ = from._impl_.team_slot_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.featured_hero_sticker_index_ = from._impl_.featured_hero_sticker_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.featured_hero_sticker_quality_ = from._impl_.featured_hero_sticker_quality_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_Player::CopyFrom(const CDOTAMatchMetadata_Team_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_Player::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_Player::InternalSwap(CDOTAMatchMetadata_Team_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.ability_upgrades_.InternalSwap(&other->_impl_.ability_upgrades_);
  _impl_.kills_.InternalSwap(&other->_impl_.kills_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  _impl_.level_up_times_.InternalSwap(&other->_impl_.level_up_times_);
  _impl_.graph_net_worth_.InternalSwap(&other->_impl_.graph_net_worth_);
  _impl_.inventory_snapshot_.InternalSwap(&other->_impl_.inventory_snapshot_);
  _impl_.auto_style_criteria_.InternalSwap(&other->_impl_.auto_style_criteria_);
  _impl_.event_data_.InternalSwap(&other->_impl_.event_data_);
  _impl_.strange_gem_progress_.InternalSwap(&other->_impl_.strange_gem_progress_);
  _impl_.victory_prediction_.InternalSwap(&other->_impl_.victory_prediction_);
  _impl_.contract_progress_.InternalSwap(&other->_impl_.contract_progress_);
  _impl_.guild_ids_.InternalSwap(&other->_impl_.guild_ids_);
  _impl_.graph_hero_damage_.InternalSwap(&other->_impl_.graph_hero_damage_);
  _impl_.equipped_econ_items_.InternalSwap(&other->_impl_.equipped_econ_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, _impl_.featured_hero_sticker_quality_)
      + sizeof(CDOTAMatchMetadata_Team_Player::_impl_.featured_hero_sticker_quality_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, _impl_.featured_gamemode_progress_)>(
          reinterpret_cast<char*>(&_impl_.featured_gamemode_progress_),
          reinterpret_cast<char*>(&other->_impl_.featured_gamemode_progress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[16]);
}

// ===================================================================

class CDOTAMatchMetadata_Team::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team>()._impl_._has_bits_);
  static void set_has_dota_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cm_first_pick(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cm_captain_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cm_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAMatchMetadata_Team::CDOTAMatchMetadata_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team)
}
CDOTAMatchMetadata_Team::CDOTAMatchMetadata_Team(const CDOTAMatchMetadata_Team& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchMetadata_Team* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.graph_experience_){from._impl_.graph_experience_}
    , decltype(_impl_.graph_gold_earned_){from._impl_.graph_gold_earned_}
    , decltype(_impl_.graph_net_worth_){from._impl_.graph_net_worth_}
    , decltype(_impl_.dota_team_){}
    , decltype(_impl_.cm_first_pick_){}
    , decltype(_impl_.cm_penalty_){}
    , decltype(_impl_.cm_captain_player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.dota_team_, &from._impl_.dota_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cm_captain_player_id_) -
    reinterpret_cast<char*>(&_impl_.dota_team_)) + sizeof(_impl_.cm_captain_player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team)
}

inline void CDOTAMatchMetadata_Team::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){arena}
    , decltype(_impl_.graph_experience_){arena}
    , decltype(_impl_.graph_gold_earned_){arena}
    , decltype(_impl_.graph_net_worth_){arena}
    , decltype(_impl_.dota_team_){0u}
    , decltype(_impl_.cm_first_pick_){false}
    , decltype(_impl_.cm_penalty_){0u}
    , decltype(_impl_.cm_captain_player_id_){-1}
  };
}

CDOTAMatchMetadata_Team::~CDOTAMatchMetadata_Team() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchMetadata_Team::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  _impl_.graph_experience_.~RepeatedField();
  _impl_.graph_gold_earned_.~RepeatedField();
  _impl_.graph_net_worth_.~RepeatedField();
}

void CDOTAMatchMetadata_Team::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.graph_experience_.Clear();
  _impl_.graph_gold_earned_.Clear();
  _impl_.graph_net_worth_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.dota_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cm_penalty_) -
        reinterpret_cast<char*>(&_impl_.dota_team_)) + sizeof(_impl_.cm_penalty_));
    _impl_.cm_captain_player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 dota_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dota_team(&has_bits);
          _impl_.dota_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.Player players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated float graph_experience = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_experience(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_experience(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float graph_gold_earned = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_gold_earned(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_gold_earned(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float graph_net_worth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_net_worth(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_net_worth(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cm_first_pick = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_cm_first_pick(&has_bits);
          _impl_.cm_first_pick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cm_captain_player_id = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_cm_captain_player_id(&has_bits);
          _impl_.cm_captain_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cm_penalty = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_cm_penalty(&has_bits);
          _impl_.cm_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dota_team(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.Player players = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated float graph_experience = 3;
  for (int i = 0, n = this->_internal_graph_experience_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_graph_experience(i), target);
  }

  // repeated float graph_gold_earned = 4;
  for (int i = 0, n = this->_internal_graph_gold_earned_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_graph_gold_earned(i), target);
  }

  // repeated float graph_net_worth = 5;
  for (int i = 0, n = this->_internal_graph_net_worth_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_graph_net_worth(i), target);
  }

  // optional bool cm_first_pick = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_cm_first_pick(), target);
  }

  // optional int32 cm_captain_player_id = 7 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_cm_captain_player_id(), target);
  }

  // optional uint32 cm_penalty = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_cm_penalty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team)
  return target;
}

size_t CDOTAMatchMetadata_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchMetadata.Team.Player players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float graph_experience = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_experience_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_graph_experience_size());
    total_size += data_size;
  }

  // repeated float graph_gold_earned = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_gold_earned_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_graph_gold_earned_size());
    total_size += data_size;
  }

  // repeated float graph_net_worth = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_net_worth_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_graph_net_worth_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 dota_team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dota_team());
    }

    // optional bool cm_first_pick = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 cm_penalty = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cm_penalty());
    }

    // optional int32 cm_captain_player_id = 7 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cm_captain_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchMetadata_Team::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team::GetClassData() const { return &_class_data_; }


void CDOTAMatchMetadata_Team::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchMetadata_Team*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchMetadata_Team&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_impl_.graph_experience_.MergeFrom(from._impl_.graph_experience_);
  _this->_impl_.graph_gold_earned_.MergeFrom(from._impl_.graph_gold_earned_);
  _this->_impl_.graph_net_worth_.MergeFrom(from._impl_.graph_net_worth_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.dota_team_ = from._impl_.dota_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cm_first_pick_ = from._impl_.cm_first_pick_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.cm_penalty_ = from._impl_.cm_penalty_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cm_captain_player_id_ = from._impl_.cm_captain_player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team::CopyFrom(const CDOTAMatchMetadata_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team::InternalSwap(CDOTAMatchMetadata_Team* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  _impl_.graph_experience_.InternalSwap(&other->_impl_.graph_experience_);
  _impl_.graph_gold_earned_.InternalSwap(&other->_impl_.graph_gold_earned_);
  _impl_.graph_net_worth_.InternalSwap(&other->_impl_.graph_net_worth_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team, _impl_.cm_penalty_)
      + sizeof(CDOTAMatchMetadata_Team::_impl_.cm_penalty_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team, _impl_.dota_team_)>(
          reinterpret_cast<char*>(&_impl_.dota_team_),
          reinterpret_cast<char*>(&other->_impl_.dota_team_));
  swap(_impl_.cm_captain_player_id_, other->_impl_.cm_captain_player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[17]);
}

// ===================================================================

class CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress>()._impl_._has_bits_);
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress)
}
CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress(const CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.progress_){}
    , decltype(_impl_.player_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.progress_, &from._impl_.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_slot_) -
    reinterpret_cast<char*>(&_impl_.progress_)) + sizeof(_impl_.player_slot_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress)
}

inline void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.progress_){0u}
    , decltype(_impl_.player_slot_){0u}
  };
}

CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::~CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.progress_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.player_slot_) -
        reinterpret_cast<char*>(&_impl_.progress_)) + sizeof(_impl_.player_slot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_progress(&has_bits);
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 progress = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_progress(), target);
  }

  // optional uint32 player_slot = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_player_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress)
  return target;
}

size_t CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 progress = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_progress());
    }

    // optional uint32 player_slot = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::GetClassData() const { return &_class_data_; }


void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.progress_ = from._impl_.progress_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::CopyFrom(const CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::InternalSwap(CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress, _impl_.player_slot_)
      + sizeof(CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::_impl_.player_slot_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress, _impl_.progress_)>(
          reinterpret_cast<char*>(&_impl_.progress_),
          reinterpret_cast<char*>(&other->_impl_.progress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[18]);
}

// ===================================================================

class CDOTAMatchMetadata_GuildChallengeProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_GuildChallengeProgress>()._impl_._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_challenge_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_challenge_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_challenge_progress_at_start(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_challenge_progress_accumulated(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CDOTAMatchMetadata_GuildChallengeProgress::CDOTAMatchMetadata_GuildChallengeProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.GuildChallengeProgress)
}
CDOTAMatchMetadata_GuildChallengeProgress::CDOTAMatchMetadata_GuildChallengeProgress(const CDOTAMatchMetadata_GuildChallengeProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchMetadata_GuildChallengeProgress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.individual_progress_){from._impl_.individual_progress_}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.challenge_instance_id_){}
    , decltype(_impl_.challenge_parameter_){}
    , decltype(_impl_.challenge_timestamp_){}
    , decltype(_impl_.challenge_progress_at_start_){}
    , decltype(_impl_.challenge_progress_accumulated_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.challenge_progress_accumulated_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.challenge_progress_accumulated_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.GuildChallengeProgress)
}

inline void CDOTAMatchMetadata_GuildChallengeProgress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.individual_progress_){arena}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.event_id_){0}
    , decltype(_impl_.challenge_instance_id_){0u}
    , decltype(_impl_.challenge_parameter_){0u}
    , decltype(_impl_.challenge_timestamp_){0u}
    , decltype(_impl_.challenge_progress_at_start_){0u}
    , decltype(_impl_.challenge_progress_accumulated_){0u}
  };
}

CDOTAMatchMetadata_GuildChallengeProgress::~CDOTAMatchMetadata_GuildChallengeProgress() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.GuildChallengeProgress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchMetadata_GuildChallengeProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.individual_progress_.~RepeatedPtrField();
}

void CDOTAMatchMetadata_GuildChallengeProgress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchMetadata_GuildChallengeProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.GuildChallengeProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.individual_progress_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.challenge_progress_accumulated_) -
        reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.challenge_progress_accumulated_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_GuildChallengeProgress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_instance_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_challenge_instance_id(&has_bits);
          _impl_.challenge_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_parameter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_challenge_parameter(&has_bits);
          _impl_.challenge_parameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_challenge_timestamp(&has_bits);
          _impl_.challenge_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_progress_at_start = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_challenge_progress_at_start(&has_bits);
          _impl_.challenge_progress_at_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_progress_accumulated = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_challenge_progress_accumulated(&has_bits);
          _impl_.challenge_progress_accumulated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress individual_progress = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_individual_progress(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_GuildChallengeProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.GuildChallengeProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  // optional uint32 challenge_instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_instance_id(), target);
  }

  // optional uint32 challenge_parameter = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_challenge_parameter(), target);
  }

  // optional uint32 challenge_timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_challenge_timestamp(), target);
  }

  // optional uint32 challenge_progress_at_start = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_challenge_progress_at_start(), target);
  }

  // optional uint32 challenge_progress_accumulated = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_challenge_progress_accumulated(), target);
  }

  // repeated .CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress individual_progress = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_individual_progress_size()); i < n; i++) {
    const auto& repfield = this->_internal_individual_progress(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.GuildChallengeProgress)
  return target;
}

size_t CDOTAMatchMetadata_GuildChallengeProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.GuildChallengeProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress individual_progress = 8;
  total_size += 1UL * this->_internal_individual_progress_size();
  for (const auto& msg : this->_impl_.individual_progress_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 challenge_instance_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_instance_id());
    }

    // optional uint32 challenge_parameter = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_parameter());
    }

    // optional uint32 challenge_timestamp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_timestamp());
    }

    // optional uint32 challenge_progress_at_start = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_progress_at_start());
    }

    // optional uint32 challenge_progress_accumulated = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_progress_accumulated());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_GuildChallengeProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchMetadata_GuildChallengeProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_GuildChallengeProgress::GetClassData() const { return &_class_data_; }


void CDOTAMatchMetadata_GuildChallengeProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchMetadata_GuildChallengeProgress*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchMetadata_GuildChallengeProgress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.GuildChallengeProgress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.individual_progress_.MergeFrom(from._impl_.individual_progress_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.guild_id_ = from._impl_.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.challenge_instance_id_ = from._impl_.challenge_instance_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.challenge_parameter_ = from._impl_.challenge_parameter_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.challenge_timestamp_ = from._impl_.challenge_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.challenge_progress_at_start_ = from._impl_.challenge_progress_at_start_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.challenge_progress_accumulated_ = from._impl_.challenge_progress_accumulated_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_GuildChallengeProgress::CopyFrom(const CDOTAMatchMetadata_GuildChallengeProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.GuildChallengeProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_GuildChallengeProgress::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_GuildChallengeProgress::InternalSwap(CDOTAMatchMetadata_GuildChallengeProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.individual_progress_.InternalSwap(&other->_impl_.individual_progress_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_GuildChallengeProgress, _impl_.challenge_progress_accumulated_)
      + sizeof(CDOTAMatchMetadata_GuildChallengeProgress::_impl_.challenge_progress_accumulated_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_GuildChallengeProgress, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_GuildChallengeProgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[19]);
}

// ===================================================================

class CDOTAMatchMetadata_Tip::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Tip>()._impl_._has_bits_);
  static void set_has_source_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tip_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAMatchMetadata_Tip::CDOTAMatchMetadata_Tip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Tip)
}
CDOTAMatchMetadata_Tip::CDOTAMatchMetadata_Tip(const CDOTAMatchMetadata_Tip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchMetadata_Tip* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_player_slot_){}
    , decltype(_impl_.target_player_slot_){}
    , decltype(_impl_.tip_amount_){}
    , decltype(_impl_.event_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.source_player_slot_, &from._impl_.source_player_slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.event_id_) -
    reinterpret_cast<char*>(&_impl_.source_player_slot_)) + sizeof(_impl_.event_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Tip)
}

inline void CDOTAMatchMetadata_Tip::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_player_slot_){0u}
    , decltype(_impl_.target_player_slot_){0u}
    , decltype(_impl_.tip_amount_){0u}
    , decltype(_impl_.event_id_){0}
  };
}

CDOTAMatchMetadata_Tip::~CDOTAMatchMetadata_Tip() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Tip)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchMetadata_Tip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Tip::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchMetadata_Tip::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Tip)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.source_player_slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_id_) -
        reinterpret_cast<char*>(&_impl_.source_player_slot_)) + sizeof(_impl_.event_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Tip::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 source_player_slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_source_player_slot(&has_bits);
          _impl_.source_player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 target_player_slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target_player_slot(&has_bits);
          _impl_.target_player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tip_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tip_amount(&has_bits);
          _impl_.tip_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Tip::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Tip)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 source_player_slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_source_player_slot(), target);
  }

  // optional uint32 target_player_slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_player_slot(), target);
  }

  // optional uint32 tip_amount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tip_amount(), target);
  }

  // optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Tip)
  return target;
}

size_t CDOTAMatchMetadata_Tip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Tip)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 source_player_slot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_player_slot());
    }

    // optional uint32 target_player_slot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_player_slot());
    }

    // optional uint32 tip_amount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tip_amount());
    }

    // optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Tip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchMetadata_Tip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Tip::GetClassData() const { return &_class_data_; }


void CDOTAMatchMetadata_Tip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchMetadata_Tip*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchMetadata_Tip&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Tip)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.source_player_slot_ = from._impl_.source_player_slot_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.target_player_slot_ = from._impl_.target_player_slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tip_amount_ = from._impl_.tip_amount_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Tip::CopyFrom(const CDOTAMatchMetadata_Tip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Tip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Tip::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Tip::InternalSwap(CDOTAMatchMetadata_Tip* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Tip, _impl_.event_id_)
      + sizeof(CDOTAMatchMetadata_Tip::_impl_.event_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Tip, _impl_.source_player_slot_)>(
          reinterpret_cast<char*>(&_impl_.source_player_slot_),
          reinterpret_cast<char*>(&other->_impl_.source_player_slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Tip::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[20]);
}

// ===================================================================

class CDOTAMatchMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata>()._impl_._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_report_until_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_event_game_custom_table(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_primary_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CMsgMatchMatchmakingStats& matchmaking_stats(const CDOTAMatchMetadata* msg);
  static void set_has_matchmaking_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMvpData& mvp_data(const CDOTAMatchMetadata* msg);
  static void set_has_mvp_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_custom_post_game_table(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgMatchMatchmakingStats&
CDOTAMatchMetadata::_Internal::matchmaking_stats(const CDOTAMatchMetadata* msg) {
  return *msg->_impl_.matchmaking_stats_;
}
const ::CMvpData&
CDOTAMatchMetadata::_Internal::mvp_data(const CDOTAMatchMetadata* msg) {
  return *msg->_impl_.mvp_data_;
}
void CDOTAMatchMetadata::clear_matchmaking_stats() {
  if (_impl_.matchmaking_stats_ != nullptr) _impl_.matchmaking_stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CDOTAMatchMetadata::clear_mvp_data() {
  if (_impl_.mvp_data_ != nullptr) _impl_.mvp_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CDOTAMatchMetadata::CDOTAMatchMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata)
}
CDOTAMatchMetadata::CDOTAMatchMetadata(const CDOTAMatchMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.teams_){from._impl_.teams_}
    , decltype(_impl_.guild_challenge_progress_){from._impl_.guild_challenge_progress_}
    , decltype(_impl_.match_tips_){from._impl_.match_tips_}
    , decltype(_impl_.event_game_custom_table_){}
    , decltype(_impl_.custom_post_game_table_){}
    , decltype(_impl_.matchmaking_stats_){nullptr}
    , decltype(_impl_.mvp_data_){nullptr}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.report_until_time_){}
    , decltype(_impl_.primary_event_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_game_custom_table_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_game_custom_table_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_event_game_custom_table()) {
    _this->_impl_.event_game_custom_table_.Set(from._internal_event_game_custom_table(), 
      _this->GetArenaForAllocation());
  }
  _impl_.custom_post_game_table_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_post_game_table_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_post_game_table()) {
    _this->_impl_.custom_post_game_table_.Set(from._internal_custom_post_game_table(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_matchmaking_stats()) {
    _this->_impl_.matchmaking_stats_ = new ::CMsgMatchMatchmakingStats(*from._impl_.matchmaking_stats_);
  }
  if (from._internal_has_mvp_data()) {
    _this->_impl_.mvp_data_ = new ::CMvpData(*from._impl_.mvp_data_);
  }
  ::memcpy(&_impl_.lobby_id_, &from._impl_.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.primary_event_id_) -
    reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.primary_event_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata)
}

inline void CDOTAMatchMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.teams_){arena}
    , decltype(_impl_.guild_challenge_progress_){arena}
    , decltype(_impl_.match_tips_){arena}
    , decltype(_impl_.event_game_custom_table_){}
    , decltype(_impl_.custom_post_game_table_){}
    , decltype(_impl_.matchmaking_stats_){nullptr}
    , decltype(_impl_.mvp_data_){nullptr}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.report_until_time_){uint64_t{0u}}
    , decltype(_impl_.primary_event_id_){0u}
  };
  _impl_.event_game_custom_table_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_game_custom_table_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.custom_post_game_table_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_post_game_table_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAMatchMetadata::~CDOTAMatchMetadata() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.teams_.~RepeatedPtrField();
  _impl_.guild_challenge_progress_.~RepeatedPtrField();
  _impl_.match_tips_.~RepeatedPtrField();
  _impl_.event_game_custom_table_.Destroy();
  _impl_.custom_post_game_table_.Destroy();
  if (this != internal_default_instance()) delete _impl_.matchmaking_stats_;
  if (this != internal_default_instance()) delete _impl_.mvp_data_;
}

void CDOTAMatchMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.teams_.Clear();
  _impl_.guild_challenge_progress_.Clear();
  _impl_.match_tips_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.event_game_custom_table_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.custom_post_game_table_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.matchmaking_stats_ != nullptr);
      _impl_.matchmaking_stats_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.mvp_data_ != nullptr);
      _impl_.mvp_data_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&_impl_.lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.primary_event_id_) -
        reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.primary_event_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CDOTAMatchMetadata.Team teams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 lobby_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 report_until_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_report_until_time(&has_bits);
          _impl_.report_until_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bytes event_game_custom_table = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_event_game_custom_table();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 primary_event_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_primary_event_id(&has_bits);
          _impl_.primary_event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgMatchMatchmakingStats matchmaking_stats = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_matchmaking_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMvpData mvp_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_mvp_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.GuildChallengeProgress guild_challenge_progress = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_guild_challenge_progress(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes custom_post_game_table = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_custom_post_game_table();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Tip match_tips = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_match_tips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAMatchMetadata.Team teams = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_teams_size()); i < n; i++) {
    const auto& repfield = this->_internal_teams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 lobby_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_lobby_id(), target);
  }

  // optional fixed64 report_until_time = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(4, this->_internal_report_until_time(), target);
  }

  // optional bytes event_game_custom_table = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_event_game_custom_table(), target);
  }

  // optional uint32 primary_event_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_primary_event_id(), target);
  }

  // optional .CMsgMatchMatchmakingStats matchmaking_stats = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::matchmaking_stats(this),
        _Internal::matchmaking_stats(this).GetCachedSize(), target, stream);
  }

  // optional .CMvpData mvp_data = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::mvp_data(this),
        _Internal::mvp_data(this).GetCachedSize(), target, stream);
  }

  // repeated .CDOTAMatchMetadata.GuildChallengeProgress guild_challenge_progress = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_guild_challenge_progress_size()); i < n; i++) {
    const auto& repfield = this->_internal_guild_challenge_progress(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes custom_post_game_table = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_custom_post_game_table(), target);
  }

  // repeated .CDOTAMatchMetadata.Tip match_tips = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_match_tips_size()); i < n; i++) {
    const auto& repfield = this->_internal_match_tips(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata)
  return target;
}

size_t CDOTAMatchMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchMetadata.Team teams = 1;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->_impl_.teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.GuildChallengeProgress guild_challenge_progress = 10;
  total_size += 1UL * this->_internal_guild_challenge_progress_size();
  for (const auto& msg : this->_impl_.guild_challenge_progress_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Tip match_tips = 12;
  total_size += 1UL * this->_internal_match_tips_size();
  for (const auto& msg : this->_impl_.match_tips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes event_game_custom_table = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_event_game_custom_table());
    }

    // optional bytes custom_post_game_table = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_custom_post_game_table());
    }

    // optional .CMsgMatchMatchmakingStats matchmaking_stats = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.matchmaking_stats_);
    }

    // optional .CMvpData mvp_data = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mvp_data_);
    }

    // optional fixed64 lobby_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional fixed64 report_until_time = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 primary_event_id = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_primary_event_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata::GetClassData() const { return &_class_data_; }


void CDOTAMatchMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchMetadata*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.teams_.MergeFrom(from._impl_.teams_);
  _this->_impl_.guild_challenge_progress_.MergeFrom(from._impl_.guild_challenge_progress_);
  _this->_impl_.match_tips_.MergeFrom(from._impl_.match_tips_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_event_game_custom_table(from._internal_event_game_custom_table());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_custom_post_game_table(from._internal_custom_post_game_table());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_matchmaking_stats()->::CMsgMatchMatchmakingStats::MergeFrom(
          from._internal_matchmaking_stats());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_mvp_data()->::CMvpData::MergeFrom(
          from._internal_mvp_data());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.report_until_time_ = from._impl_.report_until_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.primary_event_id_ = from._impl_.primary_event_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata::CopyFrom(const CDOTAMatchMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata::InternalSwap(CDOTAMatchMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.teams_.InternalSwap(&other->_impl_.teams_);
  _impl_.guild_challenge_progress_.InternalSwap(&other->_impl_.guild_challenge_progress_);
  _impl_.match_tips_.InternalSwap(&other->_impl_.match_tips_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_game_custom_table_, lhs_arena,
      &other->_impl_.event_game_custom_table_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.custom_post_game_table_, lhs_arena,
      &other->_impl_.custom_post_game_table_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata, _impl_.primary_event_id_)
      + sizeof(CDOTAMatchMetadata::_impl_.primary_event_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata, _impl_.matchmaking_stats_)>(
          reinterpret_cast<char*>(&_impl_.matchmaking_stats_),
          reinterpret_cast<char*>(&other->_impl_.matchmaking_stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[21]);
}

// ===================================================================

class CDOTAMatchPrivateMetadata_StringName::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_StringName>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAMatchPrivateMetadata_StringName::CDOTAMatchPrivateMetadata_StringName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.StringName)
}
CDOTAMatchPrivateMetadata_StringName::CDOTAMatchPrivateMetadata_StringName(const CDOTAMatchPrivateMetadata_StringName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchPrivateMetadata_StringName* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.StringName)
}

inline void CDOTAMatchPrivateMetadata_StringName::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAMatchPrivateMetadata_StringName::~CDOTAMatchPrivateMetadata_StringName() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.StringName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchPrivateMetadata_StringName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CDOTAMatchPrivateMetadata_StringName::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_StringName::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.StringName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_StringName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAMatchPrivateMetadata.StringName.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchPrivateMetadata_StringName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.StringName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAMatchPrivateMetadata.StringName.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.StringName)
  return target;
}

size_t CDOTAMatchPrivateMetadata_StringName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.StringName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchPrivateMetadata_StringName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchPrivateMetadata_StringName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchPrivateMetadata_StringName::GetClassData() const { return &_class_data_; }


void CDOTAMatchPrivateMetadata_StringName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchPrivateMetadata_StringName*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchPrivateMetadata_StringName&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.StringName)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchPrivateMetadata_StringName::CopyFrom(const CDOTAMatchPrivateMetadata_StringName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.StringName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_StringName::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_StringName::InternalSwap(CDOTAMatchPrivateMetadata_StringName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_StringName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[22]);
}

// ===================================================================

class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget>()._impl_._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
}
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.damage_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hero_id_, &from._impl_.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.damage_) -
    reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.damage_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
}

inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.damage_){0u}
  };
}

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.damage_) -
        reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.damage_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 damage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_damage(&has_bits);
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 damage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_damage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 damage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_damage());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::GetClassData() const { return &_class_data_; }


void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.damage_ = from._impl_.damage_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget, _impl_.damage_)
      + sizeof(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::_impl_.damage_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget, _impl_.hero_id_)>(
          reinterpret_cast<char*>(&_impl_.hero_id_),
          reinterpret_cast<char*>(&other->_impl_.hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[23]);
}

// ===================================================================

class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility>()._impl_._has_bits_);
  static void set_has_source_unit_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
}
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.by_hero_targets_){from._impl_.by_hero_targets_}
    , decltype(_impl_.source_unit_index_){}
    , decltype(_impl_.ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.source_unit_index_, &from._impl_.source_unit_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ability_id_) -
    reinterpret_cast<char*>(&_impl_.source_unit_index_)) + sizeof(_impl_.ability_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
}

inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.by_hero_targets_){arena}
    , decltype(_impl_.source_unit_index_){0u}
    , decltype(_impl_.ability_id_){-1}
  };
}

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.by_hero_targets_.~RepeatedPtrField();
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.by_hero_targets_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.source_unit_index_ = 0u;
    _impl_.ability_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ability_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget by_hero_targets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_by_hero_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 source_unit_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_source_unit_index(&has_bits);
          _impl_.source_unit_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ability_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ability_id(), target);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget by_hero_targets = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_by_hero_targets_size()); i < n; i++) {
    const auto& repfield = this->_internal_by_hero_targets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 source_unit_index = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_source_unit_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget by_hero_targets = 2;
  total_size += 1UL * this->_internal_by_hero_targets_size();
  for (const auto& msg : this->_impl_.by_hero_targets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 source_unit_index = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_unit_index());
    }

    // optional int32 ability_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::GetClassData() const { return &_class_data_; }


void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.by_hero_targets_.MergeFrom(from._impl_.by_hero_targets_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.source_unit_index_ = from._impl_.source_unit_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.by_hero_targets_.InternalSwap(&other->_impl_.by_hero_targets_);
  swap(_impl_.source_unit_index_, other->_impl_.source_unit_index_);
  swap(_impl_.ability_id_, other->_impl_.ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[24]);
}

// ===================================================================

class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget>()._impl_._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget)
}
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.healing_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hero_id_, &from._impl_.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.healing_) -
    reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.healing_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget)
}

inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.healing_){0u}
  };
}

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.healing_) -
        reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.healing_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 healing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_healing(&has_bits);
          _impl_.healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 healing = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_healing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 healing = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_healing());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::GetClassData() const { return &_class_data_; }


void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.healing_ = from._impl_.healing_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget, _impl_.healing_)
      + sizeof(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::_impl_.healing_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget, _impl_.hero_id_)>(
          reinterpret_cast<char*>(&_impl_.hero_id_),
          reinterpret_cast<char*>(&other->_impl_.hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[25]);
}

// ===================================================================

class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility>()._impl_._has_bits_);
  static void set_has_source_unit_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility)
}
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.by_hero_targets_){from._impl_.by_hero_targets_}
    , decltype(_impl_.source_unit_index_){}
    , decltype(_impl_.ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.source_unit_index_, &from._impl_.source_unit_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ability_id_) -
    reinterpret_cast<char*>(&_impl_.source_unit_index_)) + sizeof(_impl_.ability_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility)
}

inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.by_hero_targets_){arena}
    , decltype(_impl_.source_unit_index_){0u}
    , decltype(_impl_.ability_id_){-1}
  };
}

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.by_hero_targets_.~RepeatedPtrField();
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.by_hero_targets_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.source_unit_index_ = 0u;
    _impl_.ability_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ability_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget by_hero_targets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_by_hero_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 source_unit_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_source_unit_index(&has_bits);
          _impl_.source_unit_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ability_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ability_id(), target);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget by_hero_targets = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_by_hero_targets_size()); i < n; i++) {
    const auto& repfield = this->_internal_by_hero_targets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 source_unit_index = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_source_unit_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget by_hero_targets = 2;
  total_size += 1UL * this->_internal_by_hero_targets_size();
  for (const auto& msg : this->_impl_.by_hero_targets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 source_unit_index = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_unit_index());
    }

    // optional int32 ability_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::GetClassData() const { return &_class_data_; }


void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.by_hero_targets_.MergeFrom(from._impl_.by_hero_targets_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.source_unit_index_ = from._impl_.source_unit_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.by_hero_targets_.InternalSwap(&other->_impl_.by_hero_targets_);
  swap(_impl_.source_unit_index_, other->_impl_.source_unit_index_);
  swap(_impl_.ability_id_, other->_impl_.ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[26]);
}

// ===================================================================

class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment>()._impl_._has_bits_);
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
}
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.damage_by_ability_){from._impl_.damage_by_ability_}
    , decltype(_impl_.healing_by_ability_){from._impl_.healing_by_ability_}
    , decltype(_impl_.game_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.game_time_ = from._impl_.game_time_;
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
}

inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.damage_by_ability_){arena}
    , decltype(_impl_.healing_by_ability_){arena}
    , decltype(_impl_.game_time_){0}
  };
}

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.damage_by_ability_.~RepeatedPtrField();
  _impl_.healing_by_ability_.~RepeatedPtrField();
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.damage_by_ability_.Clear();
  _impl_.healing_by_ability_.Clear();
  _impl_.game_time_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 game_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_game_time(&has_bits);
          _impl_.game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility damage_by_ability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_damage_by_ability(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility healing_by_ability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_healing_by_ability(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 game_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_time(), target);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility damage_by_ability = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_damage_by_ability_size()); i < n; i++) {
    const auto& repfield = this->_internal_damage_by_ability(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility healing_by_ability = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_healing_by_ability_size()); i < n; i++) {
    const auto& repfield = this->_internal_healing_by_ability(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility damage_by_ability = 2;
  total_size += 1UL * this->_internal_damage_by_ability_size();
  for (const auto& msg : this->_impl_.damage_by_ability_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility healing_by_ability = 3;
  total_size += 1UL * this->_internal_healing_by_ability_size();
  for (const auto& msg : this->_impl_.healing_by_ability_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 game_time = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_game_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::GetClassData() const { return &_class_data_; }


void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.damage_by_ability_.MergeFrom(from._impl_.damage_by_ability_);
  _this->_impl_.healing_by_ability_.MergeFrom(from._impl_.healing_by_ability_);
  if (from._internal_has_game_time()) {
    _this->_internal_set_game_time(from._internal_game_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.damage_by_ability_.InternalSwap(&other->_impl_.damage_by_ability_);
  _impl_.healing_by_ability_.InternalSwap(&other->_impl_.healing_by_ability_);
  swap(_impl_.game_time_, other->_impl_.game_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[27]);
}

// ===================================================================

class CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget>()._impl_._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_elapsed_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
}
CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.elapsed_duration_){}
    , decltype(_impl_.is_hidden_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hero_id_, &from._impl_.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_hidden_) -
    reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.is_hidden_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
}

inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.elapsed_duration_){0}
    , decltype(_impl_.is_hidden_){false}
  };
}

CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::~CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_hidden_) -
        reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.is_hidden_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float elapsed_duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_elapsed_duration(&has_bits);
          _impl_.elapsed_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_hidden = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_hidden(&has_bits);
          _impl_.is_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional float elapsed_duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_elapsed_duration(), target);
  }

  // optional bool is_hidden = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_hidden(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional float elapsed_duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool is_hidden = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::GetClassData() const { return &_class_data_; }


void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.elapsed_duration_ = from._impl_.elapsed_duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_hidden_ = from._impl_.is_hidden_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget, _impl_.is_hidden_)
      + sizeof(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::_impl_.is_hidden_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget, _impl_.hero_id_)>(
          reinterpret_cast<char*>(&_impl_.hero_id_),
          reinterpret_cast<char*>(&other->_impl_.hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[28]);
}

// ===================================================================

class CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team_Player_BuffRecord>()._impl_._has_bits_);
  static void set_has_buff_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_buff_modifier_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
}
CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.by_hero_targets_){from._impl_.by_hero_targets_}
    , decltype(_impl_.buff_modifier_name_){}
    , decltype(_impl_.buff_ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.buff_modifier_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buff_modifier_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_buff_modifier_name()) {
    _this->_impl_.buff_modifier_name_.Set(from._internal_buff_modifier_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.buff_ability_id_ = from._impl_.buff_ability_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
}

inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.by_hero_targets_){arena}
    , decltype(_impl_.buff_modifier_name_){}
    , decltype(_impl_.buff_ability_id_){-1}
  };
  _impl_.buff_modifier_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buff_modifier_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::~CDOTAMatchPrivateMetadata_Team_Player_BuffRecord() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.by_hero_targets_.~RepeatedPtrField();
  _impl_.buff_modifier_name_.Destroy();
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.by_hero_targets_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.buff_modifier_name_.ClearNonDefaultToEmpty();
    }
    _impl_.buff_ability_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 buff_ability_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_buff_ability_id(&has_bits);
          _impl_.buff_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget by_hero_targets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_by_hero_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string buff_modifier_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_buff_modifier_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 buff_ability_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_buff_ability_id(), target);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget by_hero_targets = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_by_hero_targets_size()); i < n; i++) {
    const auto& repfield = this->_internal_by_hero_targets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string buff_modifier_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_buff_modifier_name().data(), static_cast<int>(this->_internal_buff_modifier_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_buff_modifier_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget by_hero_targets = 2;
  total_size += 1UL * this->_internal_by_hero_targets_size();
  for (const auto& msg : this->_impl_.by_hero_targets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string buff_modifier_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_buff_modifier_name());
    }

    // optional int32 buff_ability_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_buff_ability_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::GetClassData() const { return &_class_data_; }


void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchPrivateMetadata_Team_Player_BuffRecord*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.by_hero_targets_.MergeFrom(from._impl_.by_hero_targets_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_buff_modifier_name(from._internal_buff_modifier_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.buff_ability_id_ = from._impl_.buff_ability_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.by_hero_targets_.InternalSwap(&other->_impl_.by_hero_targets_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buff_modifier_name_, lhs_arena,
      &other->_impl_.buff_modifier_name_, rhs_arena
  );
  swap(_impl_.buff_ability_id_, other->_impl_.buff_ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[29]);
}

// ===================================================================

class CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team_Player_GoldReceived>()._impl_._has_bits_);
  static void set_has_creep(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_heroes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bounty_runes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_passive(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_buildings(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_abilities(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_wards(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_other(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived)
}
CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived(const CDOTAMatchPrivateMetadata_Team_Player_GoldReceived& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.creep_){}
    , decltype(_impl_.heroes_){}
    , decltype(_impl_.bounty_runes_){}
    , decltype(_impl_.passive_){}
    , decltype(_impl_.buildings_){}
    , decltype(_impl_.abilities_){}
    , decltype(_impl_.wards_){}
    , decltype(_impl_.other_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.creep_, &from._impl_.creep_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.other_) -
    reinterpret_cast<char*>(&_impl_.creep_)) + sizeof(_impl_.other_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived)
}

inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.creep_){0u}
    , decltype(_impl_.heroes_){0u}
    , decltype(_impl_.bounty_runes_){0u}
    , decltype(_impl_.passive_){0u}
    , decltype(_impl_.buildings_){0u}
    , decltype(_impl_.abilities_){0u}
    , decltype(_impl_.wards_){0u}
    , decltype(_impl_.other_){0u}
  };
}

CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::~CDOTAMatchPrivateMetadata_Team_Player_GoldReceived() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.creep_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.other_) -
        reinterpret_cast<char*>(&_impl_.creep_)) + sizeof(_impl_.other_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 creep = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_creep(&has_bits);
          _impl_.creep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 heroes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_heroes(&has_bits);
          _impl_.heroes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bounty_runes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bounty_runes(&has_bits);
          _impl_.bounty_runes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 passive = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_passive(&has_bits);
          _impl_.passive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 buildings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_buildings(&has_bits);
          _impl_.buildings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 abilities = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_abilities(&has_bits);
          _impl_.abilities_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 wards = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_wards(&has_bits);
          _impl_.wards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 other = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_other(&has_bits);
          _impl_.other_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 creep = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_creep(), target);
  }

  // optional uint32 heroes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_heroes(), target);
  }

  // optional uint32 bounty_runes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bounty_runes(), target);
  }

  // optional uint32 passive = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_passive(), target);
  }

  // optional uint32 buildings = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_buildings(), target);
  }

  // optional uint32 abilities = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_abilities(), target);
  }

  // optional uint32 wards = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_wards(), target);
  }

  // optional uint32 other = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_other(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 creep = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_creep());
    }

    // optional uint32 heroes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_heroes());
    }

    // optional uint32 bounty_runes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bounty_runes());
    }

    // optional uint32 passive = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_passive());
    }

    // optional uint32 buildings = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_buildings());
    }

    // optional uint32 abilities = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_abilities());
    }

    // optional uint32 wards = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_wards());
    }

    // optional uint32 other = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_other());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::GetClassData() const { return &_class_data_; }


void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchPrivateMetadata_Team_Player_GoldReceived*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchPrivateMetadata_Team_Player_GoldReceived&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.creep_ = from._impl_.creep_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.heroes_ = from._impl_.heroes_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bounty_runes_ = from._impl_.bounty_runes_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.passive_ = from._impl_.passive_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.buildings_ = from._impl_.buildings_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.abilities_ = from._impl_.abilities_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.wards_ = from._impl_.wards_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.other_ = from._impl_.other_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_GoldReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, _impl_.other_)
      + sizeof(CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_impl_.other_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, _impl_.creep_)>(
          reinterpret_cast<char*>(&_impl_.creep_),
          reinterpret_cast<char*>(&other->_impl_.creep_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[30]);
}

// ===================================================================

class CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team_Player_XPReceived>()._impl_._has_bits_);
  static void set_has_creep(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_heroes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_roshan(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tome_of_knowledge(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_outpost(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_other(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CDOTAMatchPrivateMetadata_Team_Player_XPReceived::CDOTAMatchPrivateMetadata_Team_Player_XPReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team.Player.XPReceived)
}
CDOTAMatchPrivateMetadata_Team_Player_XPReceived::CDOTAMatchPrivateMetadata_Team_Player_XPReceived(const CDOTAMatchPrivateMetadata_Team_Player_XPReceived& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchPrivateMetadata_Team_Player_XPReceived* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.creep_){}
    , decltype(_impl_.heroes_){}
    , decltype(_impl_.roshan_){}
    , decltype(_impl_.tome_of_knowledge_){}
    , decltype(_impl_.outpost_){}
    , decltype(_impl_.other_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.creep_, &from._impl_.creep_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.other_) -
    reinterpret_cast<char*>(&_impl_.creep_)) + sizeof(_impl_.other_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Player.XPReceived)
}

inline void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.creep_){0u}
    , decltype(_impl_.heroes_){0u}
    , decltype(_impl_.roshan_){0u}
    , decltype(_impl_.tome_of_knowledge_){0u}
    , decltype(_impl_.outpost_){0u}
    , decltype(_impl_.other_){0u}
  };
}

CDOTAMatchPrivateMetadata_Team_Player_XPReceived::~CDOTAMatchPrivateMetadata_Team_Player_XPReceived() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Player.XPReceived)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team.Player.XPReceived)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.creep_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.other_) -
        reinterpret_cast<char*>(&_impl_.creep_)) + sizeof(_impl_.other_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 creep = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_creep(&has_bits);
          _impl_.creep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 heroes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_heroes(&has_bits);
          _impl_.heroes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 roshan = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_roshan(&has_bits);
          _impl_.roshan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tome_of_knowledge = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tome_of_knowledge(&has_bits);
          _impl_.tome_of_knowledge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 outpost = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_outpost(&has_bits);
          _impl_.outpost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 other = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_other(&has_bits);
          _impl_.other_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Player.XPReceived)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 creep = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_creep(), target);
  }

  // optional uint32 heroes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_heroes(), target);
  }

  // optional uint32 roshan = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_roshan(), target);
  }

  // optional uint32 tome_of_knowledge = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tome_of_knowledge(), target);
  }

  // optional uint32 outpost = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_outpost(), target);
  }

  // optional uint32 other = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_other(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Player.XPReceived)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player_XPReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team.Player.XPReceived)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 creep = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_creep());
    }

    // optional uint32 heroes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_heroes());
    }

    // optional uint32 roshan = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_roshan());
    }

    // optional uint32 tome_of_knowledge = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tome_of_knowledge());
    }

    // optional uint32 outpost = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_outpost());
    }

    // optional uint32 other = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_other());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchPrivateMetadata_Team_Player_XPReceived::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchPrivateMetadata_Team_Player_XPReceived::GetClassData() const { return &_class_data_; }


void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchPrivateMetadata_Team_Player_XPReceived*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchPrivateMetadata_Team_Player_XPReceived&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.XPReceived)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.creep_ = from._impl_.creep_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.heroes_ = from._impl_.heroes_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.roshan_ = from._impl_.roshan_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tome_of_knowledge_ = from._impl_.tome_of_knowledge_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.outpost_ = from._impl_.outpost_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.other_ = from._impl_.other_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_XPReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.XPReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player_XPReceived::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_XPReceived* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_XPReceived, _impl_.other_)
      + sizeof(CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_impl_.other_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_XPReceived, _impl_.creep_)>(
          reinterpret_cast<char*>(&_impl_.creep_),
          reinterpret_cast<char*>(&other->_impl_.creep_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team_Player_XPReceived::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[31]);
}

// ===================================================================

class CDOTAMatchPrivateMetadata_Team_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team_Player>()._impl_._has_bits_);
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_position_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived& gold_received(const CDOTAMatchPrivateMetadata_Team_Player* msg);
  static void set_has_gold_received(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived& xp_received(const CDOTAMatchPrivateMetadata_Team_Player* msg);
  static void set_has_xp_received(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team_number(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_team_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived&
CDOTAMatchPrivateMetadata_Team_Player::_Internal::gold_received(const CDOTAMatchPrivateMetadata_Team_Player* msg) {
  return *msg->_impl_.gold_received_;
}
const ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived&
CDOTAMatchPrivateMetadata_Team_Player::_Internal::xp_received(const CDOTAMatchPrivateMetadata_Team_Player* msg) {
  return *msg->_impl_.xp_received_;
}
CDOTAMatchPrivateMetadata_Team_Player::CDOTAMatchPrivateMetadata_Team_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team.Player)
}
CDOTAMatchPrivateMetadata_Team_Player::CDOTAMatchPrivateMetadata_Team_Player(const CDOTAMatchPrivateMetadata_Team_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchPrivateMetadata_Team_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.combat_segments_){from._impl_.combat_segments_}
    , decltype(_impl_.damage_unit_names_){from._impl_.damage_unit_names_}
    , decltype(_impl_.buff_records_){from._impl_.buff_records_}
    , decltype(_impl_.graph_kills_){from._impl_.graph_kills_}
    , decltype(_impl_.graph_deaths_){from._impl_.graph_deaths_}
    , decltype(_impl_.graph_assists_){from._impl_.graph_assists_}
    , decltype(_impl_.graph_lasthits_){from._impl_.graph_lasthits_}
    , decltype(_impl_.graph_denies_){from._impl_.graph_denies_}
    , decltype(_impl_.position_stream_){}
    , decltype(_impl_.gold_received_){nullptr}
    , decltype(_impl_.xp_received_){nullptr}
    , decltype(_impl_.player_slot_){}
    , decltype(_impl_.team_number_){}
    , decltype(_impl_.team_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.position_stream_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_stream_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_position_stream()) {
    _this->_impl_.position_stream_.Set(from._internal_position_stream(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_gold_received()) {
    _this->_impl_.gold_received_ = new ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived(*from._impl_.gold_received_);
  }
  if (from._internal_has_xp_received()) {
    _this->_impl_.xp_received_ = new ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived(*from._impl_.xp_received_);
  }
  ::memcpy(&_impl_.player_slot_, &from._impl_.player_slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_slot_) -
    reinterpret_cast<char*>(&_impl_.player_slot_)) + sizeof(_impl_.team_slot_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Player)
}

inline void CDOTAMatchPrivateMetadata_Team_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.combat_segments_){arena}
    , decltype(_impl_.damage_unit_names_){arena}
    , decltype(_impl_.buff_records_){arena}
    , decltype(_impl_.graph_kills_){arena}
    , decltype(_impl_.graph_deaths_){arena}
    , decltype(_impl_.graph_assists_){arena}
    , decltype(_impl_.graph_lasthits_){arena}
    , decltype(_impl_.graph_denies_){arena}
    , decltype(_impl_.position_stream_){}
    , decltype(_impl_.gold_received_){nullptr}
    , decltype(_impl_.xp_received_){nullptr}
    , decltype(_impl_.player_slot_){0u}
    , decltype(_impl_.team_number_){0}
    , decltype(_impl_.team_slot_){0u}
  };
  _impl_.position_stream_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_stream_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAMatchPrivateMetadata_Team_Player::~CDOTAMatchPrivateMetadata_Team_Player() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchPrivateMetadata_Team_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.combat_segments_.~RepeatedPtrField();
  _impl_.damage_unit_names_.~RepeatedPtrField();
  _impl_.buff_records_.~RepeatedPtrField();
  _impl_.graph_kills_.~RepeatedField();
  _impl_.graph_deaths_.~RepeatedField();
  _impl_.graph_assists_.~RepeatedField();
  _impl_.graph_lasthits_.~RepeatedField();
  _impl_.graph_denies_.~RepeatedField();
  _impl_.position_stream_.Destroy();
  if (this != internal_default_instance()) delete _impl_.gold_received_;
  if (this != internal_default_instance()) delete _impl_.xp_received_;
}

void CDOTAMatchPrivateMetadata_Team_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.combat_segments_.Clear();
  _impl_.damage_unit_names_.Clear();
  _impl_.buff_records_.Clear();
  _impl_.graph_kills_.Clear();
  _impl_.graph_deaths_.Clear();
  _impl_.graph_assists_.Clear();
  _impl_.graph_lasthits_.Clear();
  _impl_.graph_denies_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.position_stream_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.gold_received_ != nullptr);
      _impl_.gold_received_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.xp_received_ != nullptr);
      _impl_.xp_received_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.player_slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.team_slot_) -
        reinterpret_cast<char*>(&_impl_.player_slot_)) + sizeof(_impl_.team_slot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 player_slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes position_stream = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_position_stream();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment combat_segments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_combat_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string damage_unit_names = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_damage_unit_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchPrivateMetadata.Team.Player.BuffRecord buff_records = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buff_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated float graph_kills = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_kills(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<61>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_kills(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float graph_deaths = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_deaths(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<69>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_deaths(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float graph_assists = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_assists(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<77>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_assists(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float graph_lasthits = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_lasthits(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<85>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_lasthits(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float graph_denies = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_denies(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<93>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_denies(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAMatchPrivateMetadata.Team.Player.GoldReceived gold_received = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_gold_received(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAMatchPrivateMetadata.Team.Player.XPReceived xp_received = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_xp_received(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_GC_TEAM team_number = 14 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GC_TEAM_IsValid(val))) {
            _internal_set_team_number(static_cast<::DOTA_GC_TEAM>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_slot = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_team_slot(&has_bits);
          _impl_.team_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchPrivateMetadata_Team_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 player_slot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_slot(), target);
  }

  // optional bytes position_stream = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_position_stream(), target);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment combat_segments = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_combat_segments_size()); i < n; i++) {
    const auto& repfield = this->_internal_combat_segments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string damage_unit_names = 5;
  for (int i = 0, n = this->_internal_damage_unit_names_size(); i < n; i++) {
    const auto& s = this->_internal_damage_unit_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names");
    target = stream->WriteString(5, s, target);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.BuffRecord buff_records = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buff_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_buff_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated float graph_kills = 7;
  for (int i = 0, n = this->_internal_graph_kills_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_graph_kills(i), target);
  }

  // repeated float graph_deaths = 8;
  for (int i = 0, n = this->_internal_graph_deaths_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_graph_deaths(i), target);
  }

  // repeated float graph_assists = 9;
  for (int i = 0, n = this->_internal_graph_assists_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_graph_assists(i), target);
  }

  // repeated float graph_lasthits = 10;
  for (int i = 0, n = this->_internal_graph_lasthits_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_graph_lasthits(i), target);
  }

  // repeated float graph_denies = 11;
  for (int i = 0, n = this->_internal_graph_denies_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_graph_denies(i), target);
  }

  // optional .CDOTAMatchPrivateMetadata.Team.Player.GoldReceived gold_received = 12;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::gold_received(this),
        _Internal::gold_received(this).GetCachedSize(), target, stream);
  }

  // optional .CDOTAMatchPrivateMetadata.Team.Player.XPReceived xp_received = 13;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::xp_received(this),
        _Internal::xp_received(this).GetCachedSize(), target, stream);
  }

  // optional .DOTA_GC_TEAM team_number = 14 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_team_number(), target);
  }

  // optional uint32 team_slot = 15;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_team_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Player)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment combat_segments = 4;
  total_size += 1UL * this->_internal_combat_segments_size();
  for (const auto& msg : this->_impl_.combat_segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string damage_unit_names = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.damage_unit_names_.size());
  for (int i = 0, n = _impl_.damage_unit_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.damage_unit_names_.Get(i));
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.BuffRecord buff_records = 6;
  total_size += 1UL * this->_internal_buff_records_size();
  for (const auto& msg : this->_impl_.buff_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float graph_kills = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_kills_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_graph_kills_size());
    total_size += data_size;
  }

  // repeated float graph_deaths = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_deaths_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_graph_deaths_size());
    total_size += data_size;
  }

  // repeated float graph_assists = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_assists_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_graph_assists_size());
    total_size += data_size;
  }

  // repeated float graph_lasthits = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_lasthits_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_graph_lasthits_size());
    total_size += data_size;
  }

  // repeated float graph_denies = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_denies_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_graph_denies_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes position_stream = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_position_stream());
    }

    // optional .CDOTAMatchPrivateMetadata.Team.Player.GoldReceived gold_received = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gold_received_);
    }

    // optional .CDOTAMatchPrivateMetadata.Team.Player.XPReceived xp_received = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.xp_received_);
    }

    // optional uint32 player_slot = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_slot());
    }

    // optional .DOTA_GC_TEAM team_number = 14 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_team_number());
    }

    // optional uint32 team_slot = 15;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchPrivateMetadata_Team_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchPrivateMetadata_Team_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchPrivateMetadata_Team_Player::GetClassData() const { return &_class_data_; }


void CDOTAMatchPrivateMetadata_Team_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchPrivateMetadata_Team_Player*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchPrivateMetadata_Team_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.combat_segments_.MergeFrom(from._impl_.combat_segments_);
  _this->_impl_.damage_unit_names_.MergeFrom(from._impl_.damage_unit_names_);
  _this->_impl_.buff_records_.MergeFrom(from._impl_.buff_records_);
  _this->_impl_.graph_kills_.MergeFrom(from._impl_.graph_kills_);
  _this->_impl_.graph_deaths_.MergeFrom(from._impl_.graph_deaths_);
  _this->_impl_.graph_assists_.MergeFrom(from._impl_.graph_assists_);
  _this->_impl_.graph_lasthits_.MergeFrom(from._impl_.graph_lasthits_);
  _this->_impl_.graph_denies_.MergeFrom(from._impl_.graph_denies_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_position_stream(from._internal_position_stream());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_gold_received()->::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::MergeFrom(
          from._internal_gold_received());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_xp_received()->::CDOTAMatchPrivateMetadata_Team_Player_XPReceived::MergeFrom(
          from._internal_xp_received());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.team_number_ = from._impl_.team_number_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.team_slot_ = from._impl_.team_slot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchPrivateMetadata_Team_Player::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.combat_segments_.InternalSwap(&other->_impl_.combat_segments_);
  _impl_.damage_unit_names_.InternalSwap(&other->_impl_.damage_unit_names_);
  _impl_.buff_records_.InternalSwap(&other->_impl_.buff_records_);
  _impl_.graph_kills_.InternalSwap(&other->_impl_.graph_kills_);
  _impl_.graph_deaths_.InternalSwap(&other->_impl_.graph_deaths_);
  _impl_.graph_assists_.InternalSwap(&other->_impl_.graph_assists_);
  _impl_.graph_lasthits_.InternalSwap(&other->_impl_.graph_lasthits_);
  _impl_.graph_denies_.InternalSwap(&other->_impl_.graph_denies_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.position_stream_, lhs_arena,
      &other->_impl_.position_stream_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player, _impl_.team_slot_)
      + sizeof(CDOTAMatchPrivateMetadata_Team_Player::_impl_.team_slot_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player, _impl_.gold_received_)>(
          reinterpret_cast<char*>(&_impl_.gold_received_),
          reinterpret_cast<char*>(&other->_impl_.gold_received_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[32]);
}

// ===================================================================

class CDOTAMatchPrivateMetadata_Team_Building::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team_Building>()._impl_._has_bits_);
  static void set_has_unit_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_position_quant_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_position_quant_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_death_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAMatchPrivateMetadata_Team_Building::CDOTAMatchPrivateMetadata_Team_Building(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team.Building)
}
CDOTAMatchPrivateMetadata_Team_Building::CDOTAMatchPrivateMetadata_Team_Building(const CDOTAMatchPrivateMetadata_Team_Building& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchPrivateMetadata_Team_Building* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unit_name_){}
    , decltype(_impl_.position_quant_x_){}
    , decltype(_impl_.position_quant_y_){}
    , decltype(_impl_.death_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.unit_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unit_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unit_name()) {
    _this->_impl_.unit_name_.Set(from._internal_unit_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.position_quant_x_, &from._impl_.position_quant_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.death_time_) -
    reinterpret_cast<char*>(&_impl_.position_quant_x_)) + sizeof(_impl_.death_time_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Building)
}

inline void CDOTAMatchPrivateMetadata_Team_Building::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unit_name_){}
    , decltype(_impl_.position_quant_x_){0u}
    , decltype(_impl_.position_quant_y_){0u}
    , decltype(_impl_.death_time_){0}
  };
  _impl_.unit_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unit_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAMatchPrivateMetadata_Team_Building::~CDOTAMatchPrivateMetadata_Team_Building() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Building)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchPrivateMetadata_Team_Building::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unit_name_.Destroy();
}

void CDOTAMatchPrivateMetadata_Team_Building::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team_Building::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team.Building)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.unit_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.position_quant_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.death_time_) -
        reinterpret_cast<char*>(&_impl_.position_quant_x_)) + sizeof(_impl_.death_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team_Building::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string unit_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unit_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAMatchPrivateMetadata.Team.Building.unit_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 position_quant_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_position_quant_x(&has_bits);
          _impl_.position_quant_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 position_quant_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_position_quant_y(&has_bits);
          _impl_.position_quant_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float death_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_death_time(&has_bits);
          _impl_.death_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchPrivateMetadata_Team_Building::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Building)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string unit_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unit_name().data(), static_cast<int>(this->_internal_unit_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAMatchPrivateMetadata.Team.Building.unit_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unit_name(), target);
  }

  // optional uint32 position_quant_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_position_quant_x(), target);
  }

  // optional uint32 position_quant_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_position_quant_y(), target);
  }

  // optional float death_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_death_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Building)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Building::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team.Building)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string unit_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unit_name());
    }

    // optional uint32 position_quant_x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_position_quant_x());
    }

    // optional uint32 position_quant_y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_position_quant_y());
    }

    // optional float death_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchPrivateMetadata_Team_Building::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchPrivateMetadata_Team_Building::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchPrivateMetadata_Team_Building::GetClassData() const { return &_class_data_; }


void CDOTAMatchPrivateMetadata_Team_Building::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchPrivateMetadata_Team_Building*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchPrivateMetadata_Team_Building&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team.Building)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_unit_name(from._internal_unit_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.position_quant_x_ = from._impl_.position_quant_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.position_quant_y_ = from._impl_.position_quant_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.death_time_ = from._impl_.death_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchPrivateMetadata_Team_Building::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Building& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team.Building)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Building::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Building::InternalSwap(CDOTAMatchPrivateMetadata_Team_Building* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unit_name_, lhs_arena,
      &other->_impl_.unit_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Building, _impl_.death_time_)
      + sizeof(CDOTAMatchPrivateMetadata_Team_Building::_impl_.death_time_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Building, _impl_.position_quant_x_)>(
          reinterpret_cast<char*>(&_impl_.position_quant_x_),
          reinterpret_cast<char*>(&other->_impl_.position_quant_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team_Building::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[33]);
}

// ===================================================================

class CDOTAMatchPrivateMetadata_Team::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team>()._impl_._has_bits_);
  static void set_has_dota_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAMatchPrivateMetadata_Team::CDOTAMatchPrivateMetadata_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team)
}
CDOTAMatchPrivateMetadata_Team::CDOTAMatchPrivateMetadata_Team(const CDOTAMatchPrivateMetadata_Team& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchPrivateMetadata_Team* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.buildings_){from._impl_.buildings_}
    , decltype(_impl_.dota_team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.dota_team_ = from._impl_.dota_team_;
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team)
}

inline void CDOTAMatchPrivateMetadata_Team::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){arena}
    , decltype(_impl_.buildings_){arena}
    , decltype(_impl_.dota_team_){0u}
  };
}

CDOTAMatchPrivateMetadata_Team::~CDOTAMatchPrivateMetadata_Team() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchPrivateMetadata_Team::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  _impl_.buildings_.~RepeatedPtrField();
}

void CDOTAMatchPrivateMetadata_Team::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.buildings_.Clear();
  _impl_.dota_team_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 dota_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dota_team(&has_bits);
          _impl_.dota_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchPrivateMetadata.Team.Player players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buildings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchPrivateMetadata_Team::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dota_team(), target);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Player players = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buildings_size()); i < n; i++) {
    const auto& repfield = this->_internal_buildings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchPrivateMetadata.Team.Player players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
  total_size += 1UL * this->_internal_buildings_size();
  for (const auto& msg : this->_impl_.buildings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 dota_team = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dota_team());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchPrivateMetadata_Team::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchPrivateMetadata_Team::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchPrivateMetadata_Team::GetClassData() const { return &_class_data_; }


void CDOTAMatchPrivateMetadata_Team::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchPrivateMetadata_Team*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchPrivateMetadata_Team&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_impl_.buildings_.MergeFrom(from._impl_.buildings_);
  if (from._internal_has_dota_team()) {
    _this->_internal_set_dota_team(from._internal_dota_team());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchPrivateMetadata_Team::CopyFrom(const CDOTAMatchPrivateMetadata_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team::InternalSwap(CDOTAMatchPrivateMetadata_Team* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  _impl_.buildings_.InternalSwap(&other->_impl_.buildings_);
  swap(_impl_.dota_team_, other->_impl_.dota_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[34]);
}

// ===================================================================

class CDOTAMatchPrivateMetadata::_Internal {
 public:
};

CDOTAMatchPrivateMetadata::CDOTAMatchPrivateMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata)
}
CDOTAMatchPrivateMetadata::CDOTAMatchPrivateMetadata(const CDOTAMatchPrivateMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAMatchPrivateMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.teams_){from._impl_.teams_}
    , decltype(_impl_.graph_win_probability_){from._impl_.graph_win_probability_}
    , decltype(_impl_.string_names_){from._impl_.string_names_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata)
}

inline void CDOTAMatchPrivateMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.teams_){arena}
    , decltype(_impl_.graph_win_probability_){arena}
    , decltype(_impl_.string_names_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CDOTAMatchPrivateMetadata::~CDOTAMatchPrivateMetadata() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAMatchPrivateMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.teams_.~RepeatedPtrField();
  _impl_.graph_win_probability_.~RepeatedField();
  _impl_.string_names_.~RepeatedPtrField();
}

void CDOTAMatchPrivateMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.teams_.Clear();
  _impl_.graph_win_probability_.Clear();
  _impl_.string_names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CDOTAMatchPrivateMetadata.Team teams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated float graph_win_probability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_win_probability(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_win_probability(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchPrivateMetadata.StringName string_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_string_names(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchPrivateMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAMatchPrivateMetadata.Team teams = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_teams_size()); i < n; i++) {
    const auto& repfield = this->_internal_teams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated float graph_win_probability = 2;
  for (int i = 0, n = this->_internal_graph_win_probability_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_graph_win_probability(i), target);
  }

  // repeated .CDOTAMatchPrivateMetadata.StringName string_names = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_string_names_size()); i < n; i++) {
    const auto& repfield = this->_internal_string_names(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata)
  return target;
}

size_t CDOTAMatchPrivateMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchPrivateMetadata.Team teams = 1;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->_impl_.teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float graph_win_probability = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_win_probability_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_graph_win_probability_size());
    total_size += data_size;
  }

  // repeated .CDOTAMatchPrivateMetadata.StringName string_names = 3;
  total_size += 1UL * this->_internal_string_names_size();
  for (const auto& msg : this->_impl_.string_names_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchPrivateMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAMatchPrivateMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchPrivateMetadata::GetClassData() const { return &_class_data_; }


void CDOTAMatchPrivateMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAMatchPrivateMetadata*>(&to_msg);
  auto& from = static_cast<const CDOTAMatchPrivateMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.teams_.MergeFrom(from._impl_.teams_);
  _this->_impl_.graph_win_probability_.MergeFrom(from._impl_.graph_win_probability_);
  _this->_impl_.string_names_.MergeFrom(from._impl_.string_names_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchPrivateMetadata::CopyFrom(const CDOTAMatchPrivateMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata::InternalSwap(CDOTAMatchPrivateMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.teams_.InternalSwap(&other->_impl_.teams_);
  _impl_.graph_win_probability_.InternalSwap(&other->_impl_.graph_win_probability_);
  _impl_.string_names_.InternalSwap(&other->_impl_.string_names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmatch_5fmetadata_2eproto_getter, &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once,
      file_level_metadata_dota_5fmatch_5fmetadata_2eproto[35]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadataFile*
Arena::CreateMaybeMessage< ::CDOTAMatchMetadataFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadataFile >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_EconItem*
Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_EconItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_EconItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_PlayerKill*
Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_PlayerKill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_PlayerKill >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_ItemPurchase*
Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_ItemPurchase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_ItemPurchase >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_InventorySnapshot*
Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_InventorySnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_InventorySnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_AutoStyleCriteria*
Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_AutoStyleCriteria >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_AutoStyleCriteria >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_StrangeGemProgress*
Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_StrangeGemProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_StrangeGemProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_VictoryPrediction*
Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_VictoryPrediction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_VictoryPrediction >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_SubChallenge*
Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_SubChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_SubChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_CavernChallengeResult*
Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_CavernChallengeResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_CavernChallengeResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_ActionGrant*
Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_ActionGrant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_ActionGrant >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_CandyGrant*
Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_CandyGrant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_CandyGrant >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_PeriodicResourceData*
Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_PeriodicResourceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_PeriodicResourceData >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_EventData*
Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_EventData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_EventData >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_FeaturedGamemodeProgress*
Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_FeaturedGamemodeProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_FeaturedGamemodeProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_Player_ContractProgress*
Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_Player_ContractProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_Player_ContractProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_Player*
Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team*
Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress*
Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_GuildChallengeProgress*
Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_GuildChallengeProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_GuildChallengeProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Tip*
Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Tip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Tip >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata*
Arena::CreateMaybeMessage< ::CDOTAMatchMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_StringName*
Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_StringName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_StringName >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget*
Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility*
Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget*
Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility*
Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment*
Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget*
Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord*
Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived*
Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived*
Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team_Player*
Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team_Building*
Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team_Building >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team_Building >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team*
Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata*
Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
