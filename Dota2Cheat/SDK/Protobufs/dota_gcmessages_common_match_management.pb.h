// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common_match_management.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages.pb.h"
#include "gcsdk_gcmessages.pb.h"
#include "dota_shared_enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
class CMsgLeaverState;
struct CMsgLeaverStateDefaultTypeInternal;
extern CMsgLeaverStateDefaultTypeInternal _CMsgLeaverState_default_instance_;
class CMsgLobbyEventGameDetails;
struct CMsgLobbyEventGameDetailsDefaultTypeInternal;
extern CMsgLobbyEventGameDetailsDefaultTypeInternal _CMsgLobbyEventGameDetails_default_instance_;
class CMsgMatchMatchmakingStats;
struct CMsgMatchMatchmakingStatsDefaultTypeInternal;
extern CMsgMatchMatchmakingStatsDefaultTypeInternal _CMsgMatchMatchmakingStats_default_instance_;
class CMsgPartyReadyCheckAcknowledge;
struct CMsgPartyReadyCheckAcknowledgeDefaultTypeInternal;
extern CMsgPartyReadyCheckAcknowledgeDefaultTypeInternal _CMsgPartyReadyCheckAcknowledge_default_instance_;
class CMsgPartyReadyCheckRequest;
struct CMsgPartyReadyCheckRequestDefaultTypeInternal;
extern CMsgPartyReadyCheckRequestDefaultTypeInternal _CMsgPartyReadyCheckRequest_default_instance_;
class CMsgPartyReadyCheckResponse;
struct CMsgPartyReadyCheckResponseDefaultTypeInternal;
extern CMsgPartyReadyCheckResponseDefaultTypeInternal _CMsgPartyReadyCheckResponse_default_instance_;
class CMsgReadyCheckStatus;
struct CMsgReadyCheckStatusDefaultTypeInternal;
extern CMsgReadyCheckStatusDefaultTypeInternal _CMsgReadyCheckStatus_default_instance_;
class CMsgReadyCheckStatus_ReadyMember;
struct CMsgReadyCheckStatus_ReadyMemberDefaultTypeInternal;
extern CMsgReadyCheckStatus_ReadyMemberDefaultTypeInternal _CMsgReadyCheckStatus_ReadyMember_default_instance_;
class CMvpData;
struct CMvpDataDefaultTypeInternal;
extern CMvpDataDefaultTypeInternal _CMvpData_default_instance_;
class CMvpData_MvpDatum;
struct CMvpData_MvpDatumDefaultTypeInternal;
extern CMvpData_MvpDatumDefaultTypeInternal _CMvpData_MvpDatum_default_instance_;
class CMvpData_MvpDatum_MvpAccolade;
struct CMvpData_MvpDatum_MvpAccoladeDefaultTypeInternal;
extern CMvpData_MvpDatum_MvpAccoladeDefaultTypeInternal _CMvpData_MvpDatum_MvpAccolade_default_instance_;
class CSODOTAParty;
struct CSODOTAPartyDefaultTypeInternal;
extern CSODOTAPartyDefaultTypeInternal _CSODOTAParty_default_instance_;
class CSODOTAPartyInvite;
struct CSODOTAPartyInviteDefaultTypeInternal;
extern CSODOTAPartyInviteDefaultTypeInternal _CSODOTAPartyInvite_default_instance_;
class CSODOTAPartyInvite_PartyMember;
struct CSODOTAPartyInvite_PartyMemberDefaultTypeInternal;
extern CSODOTAPartyInvite_PartyMemberDefaultTypeInternal _CSODOTAPartyInvite_PartyMember_default_instance_;
class CSODOTAPartyMember;
struct CSODOTAPartyMemberDefaultTypeInternal;
extern CSODOTAPartyMemberDefaultTypeInternal _CSODOTAPartyMember_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgLeaverState* Arena::CreateMaybeMessage<::CMsgLeaverState>(Arena*);
template<> ::CMsgLobbyEventGameDetails* Arena::CreateMaybeMessage<::CMsgLobbyEventGameDetails>(Arena*);
template<> ::CMsgMatchMatchmakingStats* Arena::CreateMaybeMessage<::CMsgMatchMatchmakingStats>(Arena*);
template<> ::CMsgPartyReadyCheckAcknowledge* Arena::CreateMaybeMessage<::CMsgPartyReadyCheckAcknowledge>(Arena*);
template<> ::CMsgPartyReadyCheckRequest* Arena::CreateMaybeMessage<::CMsgPartyReadyCheckRequest>(Arena*);
template<> ::CMsgPartyReadyCheckResponse* Arena::CreateMaybeMessage<::CMsgPartyReadyCheckResponse>(Arena*);
template<> ::CMsgReadyCheckStatus* Arena::CreateMaybeMessage<::CMsgReadyCheckStatus>(Arena*);
template<> ::CMsgReadyCheckStatus_ReadyMember* Arena::CreateMaybeMessage<::CMsgReadyCheckStatus_ReadyMember>(Arena*);
template<> ::CMvpData* Arena::CreateMaybeMessage<::CMvpData>(Arena*);
template<> ::CMvpData_MvpDatum* Arena::CreateMaybeMessage<::CMvpData_MvpDatum>(Arena*);
template<> ::CMvpData_MvpDatum_MvpAccolade* Arena::CreateMaybeMessage<::CMvpData_MvpDatum_MvpAccolade>(Arena*);
template<> ::CSODOTAParty* Arena::CreateMaybeMessage<::CSODOTAParty>(Arena*);
template<> ::CSODOTAPartyInvite* Arena::CreateMaybeMessage<::CSODOTAPartyInvite>(Arena*);
template<> ::CSODOTAPartyInvite_PartyMember* Arena::CreateMaybeMessage<::CSODOTAPartyInvite_PartyMember>(Arena*);
template<> ::CSODOTAPartyMember* Arena::CreateMaybeMessage<::CSODOTAPartyMember>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CSODOTAParty_State : int {
  CSODOTAParty_State_UI = 0,
  CSODOTAParty_State_FINDING_MATCH = 1,
  CSODOTAParty_State_IN_MATCH = 2
};
bool CSODOTAParty_State_IsValid(int value);
constexpr CSODOTAParty_State CSODOTAParty_State_State_MIN = CSODOTAParty_State_UI;
constexpr CSODOTAParty_State CSODOTAParty_State_State_MAX = CSODOTAParty_State_IN_MATCH;
constexpr int CSODOTAParty_State_State_ARRAYSIZE = CSODOTAParty_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSODOTAParty_State_descriptor();
template<typename T>
inline const std::string& CSODOTAParty_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CSODOTAParty_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CSODOTAParty_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CSODOTAParty_State_descriptor(), enum_t_value);
}
inline bool CSODOTAParty_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CSODOTAParty_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CSODOTAParty_State>(
    CSODOTAParty_State_descriptor(), name, value);
}
enum CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType : int {
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kills = 1,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_deaths = 2,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_assists = 3,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_net_worth = 5,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_item_value = 6,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_support_gold_spent = 7,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_wards_placed = 8,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_dewards = 9,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_camps_stacked = 10,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_last_hits = 11,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_denies = 12,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Killing_Sprees = 13,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Godlike = 14,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Towers_Destroyed = 15,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_SunstrikeKills = 16,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Axe_Culls = 17,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Axe_BattleHungerKills = 18,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_LowHealthKills = 19,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_TornadoKills = 20,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sven_DoubleStuns = 21,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sven_WarcryAssists = 22,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sven_CleaveDoubleKills = 23,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sven_TeleportInterrupts = 24,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Faceless_MultiChrono = 25,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Faceless_ChronoKills = 26,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Ursa_MultiShocks = 27,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_RoshanKills = 28,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lion_FingerKills = 29,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Riki_SmokedHeroKills = 32,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_HeroesRevealedWithDust = 33,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SkeletonKing_ReincarnationKills = 34,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Skywrath_FlareKills = 35,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Leshrac_SplitEarthStuns = 36,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mirana_MaxStunArrows = 37,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits = 38,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_PhantomAssassin_DaggerCrits = 39,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Meepo_Earthbinds = 40,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Bloodseeker_RuptureKills = 41,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Slark_LeashedEnemies = 42,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Disruptor_FountainGlimpses = 43,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Rubick_SpellsStolen = 44,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Rubick_UltimatesStolen = 45,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Doom_EnemiesDoomed = 46,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Omniknight_Purifications = 47,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Omniknight_AlliesRepelled = 48,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Omniknight_EnemiesRepelled = 49,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Warlock_FiveHeroFatalBonds = 50,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_CrystalMaiden_FrostbittenEnemies = 51,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_CrystalMaiden_CrystalNovas = 52,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Kunkka_DoubleHeroTorrents = 53,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Kunkka_TripleHeroGhostShips = 54,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NagaSiren_EnemiesEnsnared = 55,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NagaSiren_TripleHeroRipTides = 56,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lycan_KillsDuringShapeshift = 57,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pudge_DismemberKills = 58,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pudge_EnemyHeroesHooked = 59,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pudge_HookKills = 60,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked = 61,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DrowRanger_EnemiesSilenced = 62,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DrowRanger_MultiHeroSilences = 63,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DrowRanger_SilencedKills = 64,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DrowRanger_FrostArrowKills = 65,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DragonKnight_KillsInDragonForm = 66,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DragonKnight_BreatheFireKills = 67,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DragonKnight_SplashKills = 68,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WitchDoctor_CaskStuns = 69,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WitchDoctor_MaledictKills = 70,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WitchDoctor_MultiHeroMaledicts = 71,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WitchDoctor_DeathWardKills = 72,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Disruptor_ThunderStrikeKills = 73,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Disruptor_HeroesGlimpsed = 74,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_CrystalMaiden_FreezingFieldKills = 75,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Medusa_EnemiesPetrified = 77,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Warlock_FatalBondsKills = 78,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Warlock_GolemKills = 79,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Tusk_WalrusPunches = 80,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Tusk_SnowballStuns = 81,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_FissureStuns = 82,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_3HeroEchoslams = 83,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SandKing_BurrowstrikeStuns = 84,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SandKing_EpicenterKills = 85,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SkywrathMage_AncientSealKills = 86,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SkywrathMage_ConcussiveShotKills = 87,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Luna_LucentBeamKills = 88,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Luna_EclipseKills = 89,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_KeeperOfTheLight_IlluminateKills = 90,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns = 91,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled = 92,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_LegionCommander_DuelsWon = 93,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Beastmaster_RoarKills = 94,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Beastmaster_RoarMultiKills = 95,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Windrunner_FocusFireBuildings = 96,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Windrunner_PowershotKills = 97,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_PhantomAssassin_DaggerLastHits = 98,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_PhantomAssassin_PhantomStrikeKills = 99,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_CryptSwarmKills = 100,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_ExorcismBuildingKills = 101,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned = 102,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_MultiHeroSilences = 103,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Abaddon_MistCoilKills = 104,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Abaddon_MistCoilHealed = 105,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Abaddon_AphoticShieldKills = 106,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lich_ChainFrostTripleKills = 107,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lich_ChainFrostMultiKills = 108,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lich_ChainFrostBounces = 109,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Ursa_EnragedKills = 110,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Ursa_EarthshockKills = 111,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lina_LagunaBladeKills = 112,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lina_DragonSlaveKills = 113,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lina_LightStrikeArrayStuns = 114,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Barracks_Destroyed = 115,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_TemplarAssassin_MeldKills = 116,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_TemplarAssassin_HeroesSlowed = 117,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Sniper_AssassinationKills = 118,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Sniper_HeadshotStuns = 119,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_EarthSpirit_SmashStuns = 120,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_EarthSpirit_GripSilences = 121,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowShaman_ShackleKills = 122,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowShaman_HexKills = 123,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Centaur_EnemiesStomped = 124,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Centaur_DoubleEdgeKills = 125,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Centaur_ReturnKills = 126,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_EmberSpirit_EnemiesChained = 127,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills = 128,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Puck_OrbKills = 129,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_VengefulSpirit_EnemiesStunned = 130,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Lifestealer_RageKills = 131,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Lifestealer_OpenWoundsKills = 132,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Lifestealer_InfestKills = 133,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ElderTitan_SpiritKills = 134,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ElderTitan_GoodStomps = 135,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Clockwerk_RocketKills = 136,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Clockwerk_BlindRocketKills = 137,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_StormSpirit_BallKills = 138,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_StormSpirit_DoubleRemnantKills = 139,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_StormSpirit_VortexKills = 140,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Tinker_DoubleMissileKills = 141,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Tinker_LaserKills = 142,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Techies_SuicideKills = 143,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Techies_LandMineKills = 144,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Techies_StatisTrapStuns = 145,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Techies_RemoteMineKills = 146,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowFiend_TripleRazeKills = 147,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowFiend_RequiemMultiKills = 148,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowFiend_QRazeKills = 149,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowFiend_WRazeKills = 150,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowFiend_ERazeKills = 151,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Oracle_FatesEdictKills = 152,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Oracle_FalsePromiseSaves = 153,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Juggernaut_OmnislashKills = 154,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SkeletonKing_SkeletonHeroKills = 157,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DarkWillow_CursedCrownTripleStuns = 158,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Dazzle_ShallowGraveSaves = 159,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Dazzle_PoisonTouchKills = 160,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ThreeManMeks = 161,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Viper_PoisonAttackKills = 162,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Viper_CorrosiveSkinKills = 163,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ThreeHeroVeils = 164,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Viper_KillsDuringViperStrike = 165,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SolarCrestKills = 166,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Tiny_TreeThrowKills = 167,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Riki_BackstabKills = 168,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns = 169,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Terrorblade_MetamorphosisKills = 170,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lion_GreatFingerKills = 171,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Antimage_SpellsBlockedWithAghanims = 172,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Antimage_ThreeManManaVoids = 173,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ArcWarden_TempestDoubleKills = 174,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ArcWarden_SparkWraithKills = 175,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Bane_BrainSapKills = 176,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Bane_FiendsGripKills = 177,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Batrider_TripleHeroFlamebreaks = 178,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Batrider_DoubleHeroLassoes = 179,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit = 180,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks = 181,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Bristleback_TripleHeroNasalGoo = 182,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Broodmother_SpiderlingHeroKills = 183,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Broodmother_KillsInsideWeb = 184,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Centaur_ThreeHeroStampede = 185,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ChaosKnight_RealityRiftKills = 186,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Chen_KillsWithPenitence = 187,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas = 188,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields = 189,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Dazzle_ShadowWaveKills = 190,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_SiphonKills = 191,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls = 192,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm = 193,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Doom_InfernalBladeBurnKills = 194,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills = 195,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_EmberSpirit_RemnantKills = 196,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_EmberSpirit_SleightOfFistKills = 197,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos = 198,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Enigma_ThreeManBlackHoles = 199,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation = 200,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon = 201,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Gyrocopter_HomingMissileKills = 202,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Gyrocopter_RocketBarrageKills = 203,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Huskar_KillsDuringLifeBreak = 204,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Huskar_BurningSpearKills = 205,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_MultiHeroIceWall = 206,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_ThreeHeroEMP = 207,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast = 208,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_MultiHeroChaosMeteor = 209,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Jakiro_MultiHeroDualBreath = 210,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Jakiro_IcePathMacropyreCombos = 211,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Leshrac_PulseNovaKills = 212,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Leshrac_ThreeHeroLightningStorm = 213,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lion_ThreeHeroFingerOfDeath = 214,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Meepo_PoofKills = 215,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Meepo_MultiHeroEarthbinds = 216,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NightStalker_NighttimeKills = 217,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Morphling_KillsDuringReplicate = 218,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_OgreMagi_FireblastKills = 219,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_OgreMagi_IgniteKills = 220,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DominatingKillStreaks = 221,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_MegaKillStreaks = 222,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Alchemist_AghanimsGiven = 223,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_VeilsLeadingToKills = 224,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DustLeadingToKills = 225,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns = 226,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Weaver_ShukuchiKills = 227,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Windrunner_ShackleFocusFireKills = 228,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills = 229,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Tusk_WalrusPunchKills = 230,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Tinker_MultiHeroLasers = 231,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades = 232,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sven_KillsDuringGodsStrength = 233,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sniper_ThreeHeroShrapnels = 234,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Slark_KillsDuringShadowDance = 235,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks = 236,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ShadowShaman_SerpentWardShackleKills = 237,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade = 238,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Razor_EyeOfTheStormKills = 239,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pugna_LifeDrainKills = 240,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills = 241,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Oracle_MultiHeroFortunesEnd = 242,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Omniknight_PurificationKills = 243,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear = 244,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Warlock_ThreeHeroFatalBonds = 245,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Riki_TricksOfTheTradeKills = 246,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_AftershockHits10 = 247,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_5HeroEchoslams = 248,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lina_LagunaBladeHeroKills = 249,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lina_LightStrikeHeroStuns = 250,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_FissureMultiStuns = 251,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_TotemKills = 252,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pangolier_SwashbuckleKills = 253,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Furion_EnemyHeroesTrapped = 254,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pangolier_HeartpiercerKills = 255,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Medusa_MultiHeroStoneGaze = 256,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Medusa_SplitShotKills = 257,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mirana_MultiHeroStarstorm = 258,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mirana_KillsFromMoonlightShadow = 259,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Magnus_MultiHeroSkewers = 260,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Magnus_MultiHeroReversePolarity = 261,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Magnus_HeroesSlowedWithShockwave = 262,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NagaSiren_MultiHeroSong = 263,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NagaSiren_AlliesHealedBySong = 264,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_LoneDruid_MultiHeroRoar = 265,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_LoneDruid_BattleCryKills = 266,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WinterWyvern_ThreeHeroCurses = 267,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell = 268,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mars_EnemiesKilledInArena = 269,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mars_MultiHeroGodsRebuke = 270,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mars_GodsRebukeKills = 271,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Snapfire_LizardBlobsKills = 272,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Snapfire_TwoHeroCookieStuns = 273,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_Custom_KillStreak = 274,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Muerta_DeadShotKills = 275,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Muerta_PierceTheVeilKills = 276,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Muerta_MultiHeroDeadShot = 277,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Muerta_DeadShotsIntoTheCalling = 278
};
bool CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_IsValid(int value);
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_MvpAccoladeType_MIN = CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_MvpAccoladeType_MAX = CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Muerta_DeadShotsIntoTheCalling;
constexpr int CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_MvpAccoladeType_ARRAYSIZE = CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_MvpAccoladeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_descriptor();
template<typename T>
inline const std::string& CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_descriptor(), enum_t_value);
}
inline bool CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType>(
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_descriptor(), name, value);
}
enum ELaneSelection : int {
  k_ELaneSelection_SAFELANE = 0,
  k_ELaneSelection_OFFLANE = 1,
  k_ELaneSelection_MIDLANE = 2,
  k_ELaneSelection_SUPPORT = 3,
  k_ELaneSelection_HARDSUPPORT = 4
};
bool ELaneSelection_IsValid(int value);
constexpr ELaneSelection ELaneSelection_MIN = k_ELaneSelection_SAFELANE;
constexpr ELaneSelection ELaneSelection_MAX = k_ELaneSelection_HARDSUPPORT;
constexpr int ELaneSelection_ARRAYSIZE = ELaneSelection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELaneSelection_descriptor();
template<typename T>
inline const std::string& ELaneSelection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ELaneSelection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ELaneSelection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ELaneSelection_descriptor(), enum_t_value);
}
inline bool ELaneSelection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ELaneSelection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ELaneSelection>(
    ELaneSelection_descriptor(), name, value);
}
enum ELaneSelectionFlags : int {
  k_ELaneSelectionFlags_SAFELANE = 1,
  k_ELaneSelectionFlags_OFFLANE = 2,
  k_ELaneSelectionFlags_MIDLANE = 4,
  k_ELaneSelectionFlags_SUPPORT = 8,
  k_ELaneSelectionFlags_HARDSUPPORT = 16,
  k_ELaneSelectionFlagGroup_None = 0,
  k_ELaneSelectionFlagGroup_CORE = 7,
  k_ELaneSelectionFlagGroup_SUPPORT = 24,
  k_ELaneSelectionFlagGroup_ALL = 31
};
bool ELaneSelectionFlags_IsValid(int value);
constexpr ELaneSelectionFlags ELaneSelectionFlags_MIN = k_ELaneSelectionFlagGroup_None;
constexpr ELaneSelectionFlags ELaneSelectionFlags_MAX = k_ELaneSelectionFlagGroup_ALL;
constexpr int ELaneSelectionFlags_ARRAYSIZE = ELaneSelectionFlags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELaneSelectionFlags_descriptor();
template<typename T>
inline const std::string& ELaneSelectionFlags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ELaneSelectionFlags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ELaneSelectionFlags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ELaneSelectionFlags_descriptor(), enum_t_value);
}
inline bool ELaneSelectionFlags_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ELaneSelectionFlags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ELaneSelectionFlags>(
    ELaneSelectionFlags_descriptor(), name, value);
}
enum EPartyMatchmakingFlags : int {
  k_EPartyMatchmakingFlags_None = 0,
  k_EPartyMatchmakingFlags_LargeRankSpread = 1
};
bool EPartyMatchmakingFlags_IsValid(int value);
constexpr EPartyMatchmakingFlags EPartyMatchmakingFlags_MIN = k_EPartyMatchmakingFlags_None;
constexpr EPartyMatchmakingFlags EPartyMatchmakingFlags_MAX = k_EPartyMatchmakingFlags_LargeRankSpread;
constexpr int EPartyMatchmakingFlags_ARRAYSIZE = EPartyMatchmakingFlags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPartyMatchmakingFlags_descriptor();
template<typename T>
inline const std::string& EPartyMatchmakingFlags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EPartyMatchmakingFlags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EPartyMatchmakingFlags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EPartyMatchmakingFlags_descriptor(), enum_t_value);
}
inline bool EPartyMatchmakingFlags_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EPartyMatchmakingFlags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EPartyMatchmakingFlags>(
    EPartyMatchmakingFlags_descriptor(), name, value);
}
enum EHighPriorityMMState : int {
  k_EHighPriorityMM_Unknown = 0,
  k_EHighPriorityMM_MissingMMData = 1,
  k_EHighPriorityMM_ResourceMissing = 2,
  k_EHighPriorityMM_ManuallyDisabled = 3,
  k_EHighPriorityMM_Min_Enabled = 64,
  k_EHighPriorityMM_AllRolesSelected = 65,
  k_EHighPriorityMM_UsingResource = 66,
  k_EHighPriorityMM_FiveStack = 67,
  k_EHighPriorityMM_HighDemand = 68
};
bool EHighPriorityMMState_IsValid(int value);
constexpr EHighPriorityMMState EHighPriorityMMState_MIN = k_EHighPriorityMM_Unknown;
constexpr EHighPriorityMMState EHighPriorityMMState_MAX = k_EHighPriorityMM_HighDemand;
constexpr int EHighPriorityMMState_ARRAYSIZE = EHighPriorityMMState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHighPriorityMMState_descriptor();
template<typename T>
inline const std::string& EHighPriorityMMState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EHighPriorityMMState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EHighPriorityMMState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EHighPriorityMMState_descriptor(), enum_t_value);
}
inline bool EHighPriorityMMState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EHighPriorityMMState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EHighPriorityMMState>(
    EHighPriorityMMState_descriptor(), name, value);
}
enum EReadyCheckStatus : int {
  k_EReadyCheckStatus_Unknown = 0,
  k_EReadyCheckStatus_NotReady = 1,
  k_EReadyCheckStatus_Ready = 2
};
bool EReadyCheckStatus_IsValid(int value);
constexpr EReadyCheckStatus EReadyCheckStatus_MIN = k_EReadyCheckStatus_Unknown;
constexpr EReadyCheckStatus EReadyCheckStatus_MAX = k_EReadyCheckStatus_Ready;
constexpr int EReadyCheckStatus_ARRAYSIZE = EReadyCheckStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EReadyCheckStatus_descriptor();
template<typename T>
inline const std::string& EReadyCheckStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EReadyCheckStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EReadyCheckStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EReadyCheckStatus_descriptor(), enum_t_value);
}
inline bool EReadyCheckStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EReadyCheckStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EReadyCheckStatus>(
    EReadyCheckStatus_descriptor(), name, value);
}
enum EReadyCheckRequestResult : int {
  k_EReadyCheckRequestResult_Success = 0,
  k_EReadyCheckRequestResult_AlreadyInProgress = 1,
  k_EReadyCheckRequestResult_NotInParty = 2,
  k_EReadyCheckRequestResult_SendError = 3,
  k_EReadyCheckRequestResult_UnknownError = 4
};
bool EReadyCheckRequestResult_IsValid(int value);
constexpr EReadyCheckRequestResult EReadyCheckRequestResult_MIN = k_EReadyCheckRequestResult_Success;
constexpr EReadyCheckRequestResult EReadyCheckRequestResult_MAX = k_EReadyCheckRequestResult_UnknownError;
constexpr int EReadyCheckRequestResult_ARRAYSIZE = EReadyCheckRequestResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EReadyCheckRequestResult_descriptor();
template<typename T>
inline const std::string& EReadyCheckRequestResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EReadyCheckRequestResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EReadyCheckRequestResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EReadyCheckRequestResult_descriptor(), enum_t_value);
}
inline bool EReadyCheckRequestResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EReadyCheckRequestResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EReadyCheckRequestResult>(
    EReadyCheckRequestResult_descriptor(), name, value);
}
enum EMatchBehaviorScoreVariance : int {
  k_EMatchBehaviorScoreVariance_Invalid = 0,
  k_EMatchBehaviorScoreVariance_Low = 1,
  k_EMatchBehaviorScoreVariance_Medium = 2,
  k_EMatchBehaviorScoreVariance_High = 3
};
bool EMatchBehaviorScoreVariance_IsValid(int value);
constexpr EMatchBehaviorScoreVariance EMatchBehaviorScoreVariance_MIN = k_EMatchBehaviorScoreVariance_Invalid;
constexpr EMatchBehaviorScoreVariance EMatchBehaviorScoreVariance_MAX = k_EMatchBehaviorScoreVariance_High;
constexpr int EMatchBehaviorScoreVariance_ARRAYSIZE = EMatchBehaviorScoreVariance_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMatchBehaviorScoreVariance_descriptor();
template<typename T>
inline const std::string& EMatchBehaviorScoreVariance_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMatchBehaviorScoreVariance>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMatchBehaviorScoreVariance_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMatchBehaviorScoreVariance_descriptor(), enum_t_value);
}
inline bool EMatchBehaviorScoreVariance_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMatchBehaviorScoreVariance* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMatchBehaviorScoreVariance>(
    EMatchBehaviorScoreVariance_descriptor(), name, value);
}
// ===================================================================

class CSODOTAPartyMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTAPartyMember) */ {
 public:
  inline CSODOTAPartyMember() : CSODOTAPartyMember(nullptr) {}
  ~CSODOTAPartyMember() override;
  explicit PROTOBUF_CONSTEXPR CSODOTAPartyMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTAPartyMember(const CSODOTAPartyMember& from);
  CSODOTAPartyMember(CSODOTAPartyMember&& from) noexcept
    : CSODOTAPartyMember() {
    *this = ::std::move(from);
  }

  inline CSODOTAPartyMember& operator=(const CSODOTAPartyMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTAPartyMember& operator=(CSODOTAPartyMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSODOTAPartyMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTAPartyMember* internal_default_instance() {
    return reinterpret_cast<const CSODOTAPartyMember*>(
               &_CSODOTAPartyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSODOTAPartyMember& a, CSODOTAPartyMember& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTAPartyMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTAPartyMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSODOTAPartyMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSODOTAPartyMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSODOTAPartyMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSODOTAPartyMember& from) {
    CSODOTAPartyMember::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAPartyMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTAPartyMember";
  }
  protected:
  explicit CSODOTAPartyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionPingCodesFieldNumber = 4,
    kRegionPingTimesFieldNumber = 5,
    kRegionPingFailedBitmaskFieldNumber = 6,
    kTourneySkillLevelFieldNumber = 7,
    kTourneyBuyinFieldNumber = 8,
    kTourneyPreventUntilFieldNumber = 9,
    kIsCoachFieldNumber = 2,
    kIsPlusSubscriberFieldNumber = 10,
    kMmDataValidFieldNumber = 13,
    kHighPriorityDisabledFieldNumber = 14,
    kLaneSelectionFlagsFieldNumber = 11,
    kHasHpResourceFieldNumber = 15,
    kJoinedFromPartyfinderFieldNumber = 12,
    kIsSteamChinaFieldNumber = 16,
  };
  // repeated uint32 region_ping_codes = 4 [packed = true];
  int region_ping_codes_size() const;
  private:
  int _internal_region_ping_codes_size() const;
  public:
  void clear_region_ping_codes();
  private:
  uint32_t _internal_region_ping_codes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_region_ping_codes() const;
  void _internal_add_region_ping_codes(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_region_ping_codes();
  public:
  uint32_t region_ping_codes(int index) const;
  void set_region_ping_codes(int index, uint32_t value);
  void add_region_ping_codes(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      region_ping_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_region_ping_codes();

  // repeated uint32 region_ping_times = 5 [packed = true];
  int region_ping_times_size() const;
  private:
  int _internal_region_ping_times_size() const;
  public:
  void clear_region_ping_times();
  private:
  uint32_t _internal_region_ping_times(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_region_ping_times() const;
  void _internal_add_region_ping_times(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_region_ping_times();
  public:
  uint32_t region_ping_times(int index) const;
  void set_region_ping_times(int index, uint32_t value);
  void add_region_ping_times(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      region_ping_times() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_region_ping_times();

  // optional uint32 region_ping_failed_bitmask = 6;
  bool has_region_ping_failed_bitmask() const;
  private:
  bool _internal_has_region_ping_failed_bitmask() const;
  public:
  void clear_region_ping_failed_bitmask();
  uint32_t region_ping_failed_bitmask() const;
  void set_region_ping_failed_bitmask(uint32_t value);
  private:
  uint32_t _internal_region_ping_failed_bitmask() const;
  void _internal_set_region_ping_failed_bitmask(uint32_t value);
  public:

  // optional uint32 tourney_skill_level = 7;
  bool has_tourney_skill_level() const;
  private:
  bool _internal_has_tourney_skill_level() const;
  public:
  void clear_tourney_skill_level();
  uint32_t tourney_skill_level() const;
  void set_tourney_skill_level(uint32_t value);
  private:
  uint32_t _internal_tourney_skill_level() const;
  void _internal_set_tourney_skill_level(uint32_t value);
  public:

  // optional uint32 tourney_buyin = 8;
  bool has_tourney_buyin() const;
  private:
  bool _internal_has_tourney_buyin() const;
  public:
  void clear_tourney_buyin();
  uint32_t tourney_buyin() const;
  void set_tourney_buyin(uint32_t value);
  private:
  uint32_t _internal_tourney_buyin() const;
  void _internal_set_tourney_buyin(uint32_t value);
  public:

  // optional uint32 tourney_prevent_until = 9;
  bool has_tourney_prevent_until() const;
  private:
  bool _internal_has_tourney_prevent_until() const;
  public:
  void clear_tourney_prevent_until();
  uint32_t tourney_prevent_until() const;
  void set_tourney_prevent_until(uint32_t value);
  private:
  uint32_t _internal_tourney_prevent_until() const;
  void _internal_set_tourney_prevent_until(uint32_t value);
  public:

  // optional bool is_coach = 2;
  bool has_is_coach() const;
  private:
  bool _internal_has_is_coach() const;
  public:
  void clear_is_coach();
  bool is_coach() const;
  void set_is_coach(bool value);
  private:
  bool _internal_is_coach() const;
  void _internal_set_is_coach(bool value);
  public:

  // optional bool is_plus_subscriber = 10;
  bool has_is_plus_subscriber() const;
  private:
  bool _internal_has_is_plus_subscriber() const;
  public:
  void clear_is_plus_subscriber();
  bool is_plus_subscriber() const;
  void set_is_plus_subscriber(bool value);
  private:
  bool _internal_is_plus_subscriber() const;
  void _internal_set_is_plus_subscriber(bool value);
  public:

  // optional bool mm_data_valid = 13;
  bool has_mm_data_valid() const;
  private:
  bool _internal_has_mm_data_valid() const;
  public:
  void clear_mm_data_valid();
  bool mm_data_valid() const;
  void set_mm_data_valid(bool value);
  private:
  bool _internal_mm_data_valid() const;
  void _internal_set_mm_data_valid(bool value);
  public:

  // optional bool high_priority_disabled = 14;
  bool has_high_priority_disabled() const;
  private:
  bool _internal_has_high_priority_disabled() const;
  public:
  void clear_high_priority_disabled();
  bool high_priority_disabled() const;
  void set_high_priority_disabled(bool value);
  private:
  bool _internal_high_priority_disabled() const;
  void _internal_set_high_priority_disabled(bool value);
  public:

  // optional uint32 lane_selection_flags = 11;
  bool has_lane_selection_flags() const;
  private:
  bool _internal_has_lane_selection_flags() const;
  public:
  void clear_lane_selection_flags();
  uint32_t lane_selection_flags() const;
  void set_lane_selection_flags(uint32_t value);
  private:
  uint32_t _internal_lane_selection_flags() const;
  void _internal_set_lane_selection_flags(uint32_t value);
  public:

  // optional bool has_hp_resource = 15;
  bool has_has_hp_resource() const;
  private:
  bool _internal_has_has_hp_resource() const;
  public:
  void clear_has_hp_resource();
  bool has_hp_resource() const;
  void set_has_hp_resource(bool value);
  private:
  bool _internal_has_hp_resource() const;
  void _internal_set_has_hp_resource(bool value);
  public:

  // optional bool joined_from_partyfinder = 12;
  bool has_joined_from_partyfinder() const;
  private:
  bool _internal_has_joined_from_partyfinder() const;
  public:
  void clear_joined_from_partyfinder();
  bool joined_from_partyfinder() const;
  void set_joined_from_partyfinder(bool value);
  private:
  bool _internal_joined_from_partyfinder() const;
  void _internal_set_joined_from_partyfinder(bool value);
  public:

  // optional bool is_steam_china = 16;
  bool has_is_steam_china() const;
  private:
  bool _internal_has_is_steam_china() const;
  public:
  void clear_is_steam_china();
  bool is_steam_china() const;
  void set_is_steam_china(bool value);
  private:
  bool _internal_is_steam_china() const;
  void _internal_set_is_steam_china(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSODOTAPartyMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > region_ping_codes_;
    mutable std::atomic<int> _region_ping_codes_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > region_ping_times_;
    mutable std::atomic<int> _region_ping_times_cached_byte_size_;
    uint32_t region_ping_failed_bitmask_;
    uint32_t tourney_skill_level_;
    uint32_t tourney_buyin_;
    uint32_t tourney_prevent_until_;
    bool is_coach_;
    bool is_plus_subscriber_;
    bool mm_data_valid_;
    bool high_priority_disabled_;
    uint32_t lane_selection_flags_;
    bool has_hp_resource_;
    bool joined_from_partyfinder_;
    bool is_steam_china_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CSODOTAParty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTAParty) */ {
 public:
  inline CSODOTAParty() : CSODOTAParty(nullptr) {}
  ~CSODOTAParty() override;
  explicit PROTOBUF_CONSTEXPR CSODOTAParty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTAParty(const CSODOTAParty& from);
  CSODOTAParty(CSODOTAParty&& from) noexcept
    : CSODOTAParty() {
    *this = ::std::move(from);
  }

  inline CSODOTAParty& operator=(const CSODOTAParty& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTAParty& operator=(CSODOTAParty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSODOTAParty& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTAParty* internal_default_instance() {
    return reinterpret_cast<const CSODOTAParty*>(
               &_CSODOTAParty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CSODOTAParty& a, CSODOTAParty& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTAParty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTAParty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSODOTAParty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSODOTAParty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSODOTAParty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSODOTAParty& from) {
    CSODOTAParty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAParty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTAParty";
  }
  protected:
  explicit CSODOTAParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSODOTAParty_State State;
  static constexpr State UI =
    CSODOTAParty_State_UI;
  static constexpr State FINDING_MATCH =
    CSODOTAParty_State_FINDING_MATCH;
  static constexpr State IN_MATCH =
    CSODOTAParty_State_IN_MATCH;
  static inline bool State_IsValid(int value) {
    return CSODOTAParty_State_IsValid(value);
  }
  static constexpr State State_MIN =
    CSODOTAParty_State_State_MIN;
  static constexpr State State_MAX =
    CSODOTAParty_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    CSODOTAParty_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return CSODOTAParty_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return CSODOTAParty_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return CSODOTAParty_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdsFieldNumber = 3,
    kMembersFieldNumber = 29,
    kSentInvitesFieldNumber = 41,
    kRecvInvitesFieldNumber = 42,
    kTeamNameFieldNumber = 51,
    kReadyCheckFieldNumber = 62,
    kPartyIdFieldNumber = 1,
    kLeaderIdFieldNumber = 2,
    kGameModesFieldNumber = 4,
    kStateFieldNumber = 6,
    kEffectiveStartedMatchmakingTimeFieldNumber = 7,
    kMatchgroupsFieldNumber = 11,
    kLowPriorityAccountIdFieldNumber = 19,
    kMatchTypeFieldNumber = 21,
    kTeamIdFieldNumber = 23,
    kMatchDisabledUntilDateFieldNumber = 24,
    kMatchDisabledAccountIdFieldNumber = 25,
    kMatchmakingMaxRangeMinutesFieldNumber = 26,
    kMatchlanguagesFieldNumber = 27,
    kRawStartedMatchmakingTimeFieldNumber = 32,
    kAttemptStartTimeFieldNumber = 33,
    kAttemptNumFieldNumber = 34,
    kLowPriorityGamesRemainingFieldNumber = 35,
    kAccountFlagsFieldNumber = 43,
    kRegionSelectFlagsFieldNumber = 44,
    kExclusiveTournamentIdFieldNumber = 45,
    kTourneyDivisionIdFieldNumber = 47,
    kTourneyScheduleTimeFieldNumber = 48,
    kTourneySkillLevelFieldNumber = 49,
    kTourneyBracketRoundFieldNumber = 50,
    kTeamUiLogoFieldNumber = 52,
    kTeamBaseLogoFieldNumber = 53,
    kTourneyQueueDeadlineTimeFieldNumber = 54,
    kTourneyQueueDeadlineStateFieldNumber = 55,
    kPartyBuilderSlotsToFillFieldNumber = 56,
    kPartyBuilderMatchGroupsFieldNumber = 57,
    kOpenForJoinRequestsFieldNumber = 40,
    kSoloQueueFieldNumber = 59,
    kIsChallengeMatchFieldNumber = 65,
    kPartySearchBeaconActiveFieldNumber = 66,
    kPartyBuilderStartTimeFieldNumber = 58,
    kSteamClanAccountIdFieldNumber = 61,
    kCustomGameDisabledUntilDateFieldNumber = 63,
    kCustomGameDisabledAccountIdFieldNumber = 64,
    kMatchmakingFlagsFieldNumber = 67,
    kHighPriorityStateFieldNumber = 68,
    kCustomGameDifficultyMaskFieldNumber = 70,
    kLaneSelectionsEnabledFieldNumber = 69,
    kIsSteamChinaFieldNumber = 71,
    kRestrictedFromRankedFieldNumber = 74,
    kBotDifficultyMaskFieldNumber = 72,
    kBotScriptIndexMaskFieldNumber = 73,
    kRestrictedFromRankedAccountIdFieldNumber = 75,
  };
  // repeated fixed64 member_ids = 3;
  int member_ids_size() const;
  private:
  int _internal_member_ids_size() const;
  public:
  void clear_member_ids();
  private:
  uint64_t _internal_member_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_member_ids() const;
  void _internal_add_member_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_member_ids();
  public:
  uint64_t member_ids(int index) const;
  void set_member_ids(int index, uint64_t value);
  void add_member_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      member_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_member_ids();

  // repeated .CSODOTAPartyMember members = 29;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::CSODOTAPartyMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyMember >*
      mutable_members();
  private:
  const ::CSODOTAPartyMember& _internal_members(int index) const;
  ::CSODOTAPartyMember* _internal_add_members();
  public:
  const ::CSODOTAPartyMember& members(int index) const;
  ::CSODOTAPartyMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyMember >&
      members() const;

  // repeated .CSODOTAPartyInvite sent_invites = 41;
  int sent_invites_size() const;
  private:
  int _internal_sent_invites_size() const;
  public:
  void clear_sent_invites();
  ::CSODOTAPartyInvite* mutable_sent_invites(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite >*
      mutable_sent_invites();
  private:
  const ::CSODOTAPartyInvite& _internal_sent_invites(int index) const;
  ::CSODOTAPartyInvite* _internal_add_sent_invites();
  public:
  const ::CSODOTAPartyInvite& sent_invites(int index) const;
  ::CSODOTAPartyInvite* add_sent_invites();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite >&
      sent_invites() const;

  // repeated .CSODOTAPartyInvite recv_invites = 42;
  int recv_invites_size() const;
  private:
  int _internal_recv_invites_size() const;
  public:
  void clear_recv_invites();
  ::CSODOTAPartyInvite* mutable_recv_invites(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite >*
      mutable_recv_invites();
  private:
  const ::CSODOTAPartyInvite& _internal_recv_invites(int index) const;
  ::CSODOTAPartyInvite* _internal_add_recv_invites();
  public:
  const ::CSODOTAPartyInvite& recv_invites(int index) const;
  ::CSODOTAPartyInvite* add_recv_invites();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite >&
      recv_invites() const;

  // optional string team_name = 51;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_name();
  PROTOBUF_NODISCARD std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional .CMsgReadyCheckStatus ready_check = 62;
  bool has_ready_check() const;
  private:
  bool _internal_has_ready_check() const;
  public:
  void clear_ready_check();
  const ::CMsgReadyCheckStatus& ready_check() const;
  PROTOBUF_NODISCARD ::CMsgReadyCheckStatus* release_ready_check();
  ::CMsgReadyCheckStatus* mutable_ready_check();
  void set_allocated_ready_check(::CMsgReadyCheckStatus* ready_check);
  private:
  const ::CMsgReadyCheckStatus& _internal_ready_check() const;
  ::CMsgReadyCheckStatus* _internal_mutable_ready_check();
  public:
  void unsafe_arena_set_allocated_ready_check(
      ::CMsgReadyCheckStatus* ready_check);
  ::CMsgReadyCheckStatus* unsafe_arena_release_ready_check();

  // optional uint64 party_id = 1 [(.key_field) = true];
  bool has_party_id() const;
  private:
  bool _internal_has_party_id() const;
  public:
  void clear_party_id();
  uint64_t party_id() const;
  void set_party_id(uint64_t value);
  private:
  uint64_t _internal_party_id() const;
  void _internal_set_party_id(uint64_t value);
  public:

  // optional fixed64 leader_id = 2;
  bool has_leader_id() const;
  private:
  bool _internal_has_leader_id() const;
  public:
  void clear_leader_id();
  uint64_t leader_id() const;
  void set_leader_id(uint64_t value);
  private:
  uint64_t _internal_leader_id() const;
  void _internal_set_leader_id(uint64_t value);
  public:

  // optional uint32 game_modes = 4;
  bool has_game_modes() const;
  private:
  bool _internal_has_game_modes() const;
  public:
  void clear_game_modes();
  uint32_t game_modes() const;
  void set_game_modes(uint32_t value);
  private:
  uint32_t _internal_game_modes() const;
  void _internal_set_game_modes(uint32_t value);
  public:

  // optional .CSODOTAParty.State state = 6 [default = UI];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::CSODOTAParty_State state() const;
  void set_state(::CSODOTAParty_State value);
  private:
  ::CSODOTAParty_State _internal_state() const;
  void _internal_set_state(::CSODOTAParty_State value);
  public:

  // optional uint32 effective_started_matchmaking_time = 7;
  bool has_effective_started_matchmaking_time() const;
  private:
  bool _internal_has_effective_started_matchmaking_time() const;
  public:
  void clear_effective_started_matchmaking_time();
  uint32_t effective_started_matchmaking_time() const;
  void set_effective_started_matchmaking_time(uint32_t value);
  private:
  uint32_t _internal_effective_started_matchmaking_time() const;
  void _internal_set_effective_started_matchmaking_time(uint32_t value);
  public:

  // optional uint32 matchgroups = 11;
  bool has_matchgroups() const;
  private:
  bool _internal_has_matchgroups() const;
  public:
  void clear_matchgroups();
  uint32_t matchgroups() const;
  void set_matchgroups(uint32_t value);
  private:
  uint32_t _internal_matchgroups() const;
  void _internal_set_matchgroups(uint32_t value);
  public:

  // optional uint32 low_priority_account_id = 19;
  bool has_low_priority_account_id() const;
  private:
  bool _internal_has_low_priority_account_id() const;
  public:
  void clear_low_priority_account_id();
  uint32_t low_priority_account_id() const;
  void set_low_priority_account_id(uint32_t value);
  private:
  uint32_t _internal_low_priority_account_id() const;
  void _internal_set_low_priority_account_id(uint32_t value);
  public:

  // optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
  bool has_match_type() const;
  private:
  bool _internal_has_match_type() const;
  public:
  void clear_match_type();
  ::MatchType match_type() const;
  void set_match_type(::MatchType value);
  private:
  ::MatchType _internal_match_type() const;
  void _internal_set_match_type(::MatchType value);
  public:

  // optional uint32 team_id = 23;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional uint32 match_disabled_until_date = 24;
  bool has_match_disabled_until_date() const;
  private:
  bool _internal_has_match_disabled_until_date() const;
  public:
  void clear_match_disabled_until_date();
  uint32_t match_disabled_until_date() const;
  void set_match_disabled_until_date(uint32_t value);
  private:
  uint32_t _internal_match_disabled_until_date() const;
  void _internal_set_match_disabled_until_date(uint32_t value);
  public:

  // optional uint32 match_disabled_account_id = 25;
  bool has_match_disabled_account_id() const;
  private:
  bool _internal_has_match_disabled_account_id() const;
  public:
  void clear_match_disabled_account_id();
  uint32_t match_disabled_account_id() const;
  void set_match_disabled_account_id(uint32_t value);
  private:
  uint32_t _internal_match_disabled_account_id() const;
  void _internal_set_match_disabled_account_id(uint32_t value);
  public:

  // optional uint32 matchmaking_max_range_minutes = 26;
  bool has_matchmaking_max_range_minutes() const;
  private:
  bool _internal_has_matchmaking_max_range_minutes() const;
  public:
  void clear_matchmaking_max_range_minutes();
  uint32_t matchmaking_max_range_minutes() const;
  void set_matchmaking_max_range_minutes(uint32_t value);
  private:
  uint32_t _internal_matchmaking_max_range_minutes() const;
  void _internal_set_matchmaking_max_range_minutes(uint32_t value);
  public:

  // optional uint32 matchlanguages = 27;
  bool has_matchlanguages() const;
  private:
  bool _internal_has_matchlanguages() const;
  public:
  void clear_matchlanguages();
  uint32_t matchlanguages() const;
  void set_matchlanguages(uint32_t value);
  private:
  uint32_t _internal_matchlanguages() const;
  void _internal_set_matchlanguages(uint32_t value);
  public:

  // optional uint32 raw_started_matchmaking_time = 32;
  bool has_raw_started_matchmaking_time() const;
  private:
  bool _internal_has_raw_started_matchmaking_time() const;
  public:
  void clear_raw_started_matchmaking_time();
  uint32_t raw_started_matchmaking_time() const;
  void set_raw_started_matchmaking_time(uint32_t value);
  private:
  uint32_t _internal_raw_started_matchmaking_time() const;
  void _internal_set_raw_started_matchmaking_time(uint32_t value);
  public:

  // optional uint32 attempt_start_time = 33;
  bool has_attempt_start_time() const;
  private:
  bool _internal_has_attempt_start_time() const;
  public:
  void clear_attempt_start_time();
  uint32_t attempt_start_time() const;
  void set_attempt_start_time(uint32_t value);
  private:
  uint32_t _internal_attempt_start_time() const;
  void _internal_set_attempt_start_time(uint32_t value);
  public:

  // optional uint32 attempt_num = 34;
  bool has_attempt_num() const;
  private:
  bool _internal_has_attempt_num() const;
  public:
  void clear_attempt_num();
  uint32_t attempt_num() const;
  void set_attempt_num(uint32_t value);
  private:
  uint32_t _internal_attempt_num() const;
  void _internal_set_attempt_num(uint32_t value);
  public:

  // optional uint32 low_priority_games_remaining = 35;
  bool has_low_priority_games_remaining() const;
  private:
  bool _internal_has_low_priority_games_remaining() const;
  public:
  void clear_low_priority_games_remaining();
  uint32_t low_priority_games_remaining() const;
  void set_low_priority_games_remaining(uint32_t value);
  private:
  uint32_t _internal_low_priority_games_remaining() const;
  void _internal_set_low_priority_games_remaining(uint32_t value);
  public:

  // optional uint32 account_flags = 43;
  bool has_account_flags() const;
  private:
  bool _internal_has_account_flags() const;
  public:
  void clear_account_flags();
  uint32_t account_flags() const;
  void set_account_flags(uint32_t value);
  private:
  uint32_t _internal_account_flags() const;
  void _internal_set_account_flags(uint32_t value);
  public:

  // optional uint32 region_select_flags = 44;
  bool has_region_select_flags() const;
  private:
  bool _internal_has_region_select_flags() const;
  public:
  void clear_region_select_flags();
  uint32_t region_select_flags() const;
  void set_region_select_flags(uint32_t value);
  private:
  uint32_t _internal_region_select_flags() const;
  void _internal_set_region_select_flags(uint32_t value);
  public:

  // optional uint32 exclusive_tournament_id = 45;
  bool has_exclusive_tournament_id() const;
  private:
  bool _internal_has_exclusive_tournament_id() const;
  public:
  void clear_exclusive_tournament_id();
  uint32_t exclusive_tournament_id() const;
  void set_exclusive_tournament_id(uint32_t value);
  private:
  uint32_t _internal_exclusive_tournament_id() const;
  void _internal_set_exclusive_tournament_id(uint32_t value);
  public:

  // optional uint32 tourney_division_id = 47;
  bool has_tourney_division_id() const;
  private:
  bool _internal_has_tourney_division_id() const;
  public:
  void clear_tourney_division_id();
  uint32_t tourney_division_id() const;
  void set_tourney_division_id(uint32_t value);
  private:
  uint32_t _internal_tourney_division_id() const;
  void _internal_set_tourney_division_id(uint32_t value);
  public:

  // optional uint32 tourney_schedule_time = 48;
  bool has_tourney_schedule_time() const;
  private:
  bool _internal_has_tourney_schedule_time() const;
  public:
  void clear_tourney_schedule_time();
  uint32_t tourney_schedule_time() const;
  void set_tourney_schedule_time(uint32_t value);
  private:
  uint32_t _internal_tourney_schedule_time() const;
  void _internal_set_tourney_schedule_time(uint32_t value);
  public:

  // optional uint32 tourney_skill_level = 49;
  bool has_tourney_skill_level() const;
  private:
  bool _internal_has_tourney_skill_level() const;
  public:
  void clear_tourney_skill_level();
  uint32_t tourney_skill_level() const;
  void set_tourney_skill_level(uint32_t value);
  private:
  uint32_t _internal_tourney_skill_level() const;
  void _internal_set_tourney_skill_level(uint32_t value);
  public:

  // optional uint32 tourney_bracket_round = 50;
  bool has_tourney_bracket_round() const;
  private:
  bool _internal_has_tourney_bracket_round() const;
  public:
  void clear_tourney_bracket_round();
  uint32_t tourney_bracket_round() const;
  void set_tourney_bracket_round(uint32_t value);
  private:
  uint32_t _internal_tourney_bracket_round() const;
  void _internal_set_tourney_bracket_round(uint32_t value);
  public:

  // optional uint64 team_ui_logo = 52;
  bool has_team_ui_logo() const;
  private:
  bool _internal_has_team_ui_logo() const;
  public:
  void clear_team_ui_logo();
  uint64_t team_ui_logo() const;
  void set_team_ui_logo(uint64_t value);
  private:
  uint64_t _internal_team_ui_logo() const;
  void _internal_set_team_ui_logo(uint64_t value);
  public:

  // optional uint64 team_base_logo = 53;
  bool has_team_base_logo() const;
  private:
  bool _internal_has_team_base_logo() const;
  public:
  void clear_team_base_logo();
  uint64_t team_base_logo() const;
  void set_team_base_logo(uint64_t value);
  private:
  uint64_t _internal_team_base_logo() const;
  void _internal_set_team_base_logo(uint64_t value);
  public:

  // optional uint32 tourney_queue_deadline_time = 54;
  bool has_tourney_queue_deadline_time() const;
  private:
  bool _internal_has_tourney_queue_deadline_time() const;
  public:
  void clear_tourney_queue_deadline_time();
  uint32_t tourney_queue_deadline_time() const;
  void set_tourney_queue_deadline_time(uint32_t value);
  private:
  uint32_t _internal_tourney_queue_deadline_time() const;
  void _internal_set_tourney_queue_deadline_time(uint32_t value);
  public:

  // optional .ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
  bool has_tourney_queue_deadline_state() const;
  private:
  bool _internal_has_tourney_queue_deadline_state() const;
  public:
  void clear_tourney_queue_deadline_state();
  ::ETourneyQueueDeadlineState tourney_queue_deadline_state() const;
  void set_tourney_queue_deadline_state(::ETourneyQueueDeadlineState value);
  private:
  ::ETourneyQueueDeadlineState _internal_tourney_queue_deadline_state() const;
  void _internal_set_tourney_queue_deadline_state(::ETourneyQueueDeadlineState value);
  public:

  // optional uint32 party_builder_slots_to_fill = 56;
  bool has_party_builder_slots_to_fill() const;
  private:
  bool _internal_has_party_builder_slots_to_fill() const;
  public:
  void clear_party_builder_slots_to_fill();
  uint32_t party_builder_slots_to_fill() const;
  void set_party_builder_slots_to_fill(uint32_t value);
  private:
  uint32_t _internal_party_builder_slots_to_fill() const;
  void _internal_set_party_builder_slots_to_fill(uint32_t value);
  public:

  // optional uint32 party_builder_match_groups = 57;
  bool has_party_builder_match_groups() const;
  private:
  bool _internal_has_party_builder_match_groups() const;
  public:
  void clear_party_builder_match_groups();
  uint32_t party_builder_match_groups() const;
  void set_party_builder_match_groups(uint32_t value);
  private:
  uint32_t _internal_party_builder_match_groups() const;
  void _internal_set_party_builder_match_groups(uint32_t value);
  public:

  // optional bool open_for_join_requests = 40;
  bool has_open_for_join_requests() const;
  private:
  bool _internal_has_open_for_join_requests() const;
  public:
  void clear_open_for_join_requests();
  bool open_for_join_requests() const;
  void set_open_for_join_requests(bool value);
  private:
  bool _internal_open_for_join_requests() const;
  void _internal_set_open_for_join_requests(bool value);
  public:

  // optional bool solo_queue = 59;
  bool has_solo_queue() const;
  private:
  bool _internal_has_solo_queue() const;
  public:
  void clear_solo_queue();
  bool solo_queue() const;
  void set_solo_queue(bool value);
  private:
  bool _internal_solo_queue() const;
  void _internal_set_solo_queue(bool value);
  public:

  // optional bool is_challenge_match = 65;
  bool has_is_challenge_match() const;
  private:
  bool _internal_has_is_challenge_match() const;
  public:
  void clear_is_challenge_match();
  bool is_challenge_match() const;
  void set_is_challenge_match(bool value);
  private:
  bool _internal_is_challenge_match() const;
  void _internal_set_is_challenge_match(bool value);
  public:

  // optional bool party_search_beacon_active = 66;
  bool has_party_search_beacon_active() const;
  private:
  bool _internal_has_party_search_beacon_active() const;
  public:
  void clear_party_search_beacon_active();
  bool party_search_beacon_active() const;
  void set_party_search_beacon_active(bool value);
  private:
  bool _internal_party_search_beacon_active() const;
  void _internal_set_party_search_beacon_active(bool value);
  public:

  // optional uint32 party_builder_start_time = 58;
  bool has_party_builder_start_time() const;
  private:
  bool _internal_has_party_builder_start_time() const;
  public:
  void clear_party_builder_start_time();
  uint32_t party_builder_start_time() const;
  void set_party_builder_start_time(uint32_t value);
  private:
  uint32_t _internal_party_builder_start_time() const;
  void _internal_set_party_builder_start_time(uint32_t value);
  public:

  // optional uint32 steam_clan_account_id = 61;
  bool has_steam_clan_account_id() const;
  private:
  bool _internal_has_steam_clan_account_id() const;
  public:
  void clear_steam_clan_account_id();
  uint32_t steam_clan_account_id() const;
  void set_steam_clan_account_id(uint32_t value);
  private:
  uint32_t _internal_steam_clan_account_id() const;
  void _internal_set_steam_clan_account_id(uint32_t value);
  public:

  // optional uint32 custom_game_disabled_until_date = 63;
  bool has_custom_game_disabled_until_date() const;
  private:
  bool _internal_has_custom_game_disabled_until_date() const;
  public:
  void clear_custom_game_disabled_until_date();
  uint32_t custom_game_disabled_until_date() const;
  void set_custom_game_disabled_until_date(uint32_t value);
  private:
  uint32_t _internal_custom_game_disabled_until_date() const;
  void _internal_set_custom_game_disabled_until_date(uint32_t value);
  public:

  // optional uint32 custom_game_disabled_account_id = 64;
  bool has_custom_game_disabled_account_id() const;
  private:
  bool _internal_has_custom_game_disabled_account_id() const;
  public:
  void clear_custom_game_disabled_account_id();
  uint32_t custom_game_disabled_account_id() const;
  void set_custom_game_disabled_account_id(uint32_t value);
  private:
  uint32_t _internal_custom_game_disabled_account_id() const;
  void _internal_set_custom_game_disabled_account_id(uint32_t value);
  public:

  // optional uint32 matchmaking_flags = 67;
  bool has_matchmaking_flags() const;
  private:
  bool _internal_has_matchmaking_flags() const;
  public:
  void clear_matchmaking_flags();
  uint32_t matchmaking_flags() const;
  void set_matchmaking_flags(uint32_t value);
  private:
  uint32_t _internal_matchmaking_flags() const;
  void _internal_set_matchmaking_flags(uint32_t value);
  public:

  // optional .EHighPriorityMMState high_priority_state = 68 [default = k_EHighPriorityMM_Unknown];
  bool has_high_priority_state() const;
  private:
  bool _internal_has_high_priority_state() const;
  public:
  void clear_high_priority_state();
  ::EHighPriorityMMState high_priority_state() const;
  void set_high_priority_state(::EHighPriorityMMState value);
  private:
  ::EHighPriorityMMState _internal_high_priority_state() const;
  void _internal_set_high_priority_state(::EHighPriorityMMState value);
  public:

  // optional uint32 custom_game_difficulty_mask = 70;
  bool has_custom_game_difficulty_mask() const;
  private:
  bool _internal_has_custom_game_difficulty_mask() const;
  public:
  void clear_custom_game_difficulty_mask();
  uint32_t custom_game_difficulty_mask() const;
  void set_custom_game_difficulty_mask(uint32_t value);
  private:
  uint32_t _internal_custom_game_difficulty_mask() const;
  void _internal_set_custom_game_difficulty_mask(uint32_t value);
  public:

  // optional bool lane_selections_enabled = 69;
  bool has_lane_selections_enabled() const;
  private:
  bool _internal_has_lane_selections_enabled() const;
  public:
  void clear_lane_selections_enabled();
  bool lane_selections_enabled() const;
  void set_lane_selections_enabled(bool value);
  private:
  bool _internal_lane_selections_enabled() const;
  void _internal_set_lane_selections_enabled(bool value);
  public:

  // optional bool is_steam_china = 71;
  bool has_is_steam_china() const;
  private:
  bool _internal_has_is_steam_china() const;
  public:
  void clear_is_steam_china();
  bool is_steam_china() const;
  void set_is_steam_china(bool value);
  private:
  bool _internal_is_steam_china() const;
  void _internal_set_is_steam_china(bool value);
  public:

  // optional bool restricted_from_ranked = 74;
  bool has_restricted_from_ranked() const;
  private:
  bool _internal_has_restricted_from_ranked() const;
  public:
  void clear_restricted_from_ranked();
  bool restricted_from_ranked() const;
  void set_restricted_from_ranked(bool value);
  private:
  bool _internal_restricted_from_ranked() const;
  void _internal_set_restricted_from_ranked(bool value);
  public:

  // optional uint32 bot_difficulty_mask = 72;
  bool has_bot_difficulty_mask() const;
  private:
  bool _internal_has_bot_difficulty_mask() const;
  public:
  void clear_bot_difficulty_mask();
  uint32_t bot_difficulty_mask() const;
  void set_bot_difficulty_mask(uint32_t value);
  private:
  uint32_t _internal_bot_difficulty_mask() const;
  void _internal_set_bot_difficulty_mask(uint32_t value);
  public:

  // optional uint32 bot_script_index_mask = 73;
  bool has_bot_script_index_mask() const;
  private:
  bool _internal_has_bot_script_index_mask() const;
  public:
  void clear_bot_script_index_mask();
  uint32_t bot_script_index_mask() const;
  void set_bot_script_index_mask(uint32_t value);
  private:
  uint32_t _internal_bot_script_index_mask() const;
  void _internal_set_bot_script_index_mask(uint32_t value);
  public:

  // optional uint32 restricted_from_ranked_account_id = 75;
  bool has_restricted_from_ranked_account_id() const;
  private:
  bool _internal_has_restricted_from_ranked_account_id() const;
  public:
  void clear_restricted_from_ranked_account_id();
  uint32_t restricted_from_ranked_account_id() const;
  void set_restricted_from_ranked_account_id(uint32_t value);
  private:
  uint32_t _internal_restricted_from_ranked_account_id() const;
  void _internal_set_restricted_from_ranked_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSODOTAParty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > member_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyMember > members_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite > sent_invites_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite > recv_invites_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
    ::CMsgReadyCheckStatus* ready_check_;
    uint64_t party_id_;
    uint64_t leader_id_;
    uint32_t game_modes_;
    int state_;
    uint32_t effective_started_matchmaking_time_;
    uint32_t matchgroups_;
    uint32_t low_priority_account_id_;
    int match_type_;
    uint32_t team_id_;
    uint32_t match_disabled_until_date_;
    uint32_t match_disabled_account_id_;
    uint32_t matchmaking_max_range_minutes_;
    uint32_t matchlanguages_;
    uint32_t raw_started_matchmaking_time_;
    uint32_t attempt_start_time_;
    uint32_t attempt_num_;
    uint32_t low_priority_games_remaining_;
    uint32_t account_flags_;
    uint32_t region_select_flags_;
    uint32_t exclusive_tournament_id_;
    uint32_t tourney_division_id_;
    uint32_t tourney_schedule_time_;
    uint32_t tourney_skill_level_;
    uint32_t tourney_bracket_round_;
    uint64_t team_ui_logo_;
    uint64_t team_base_logo_;
    uint32_t tourney_queue_deadline_time_;
    int tourney_queue_deadline_state_;
    uint32_t party_builder_slots_to_fill_;
    uint32_t party_builder_match_groups_;
    bool open_for_join_requests_;
    bool solo_queue_;
    bool is_challenge_match_;
    bool party_search_beacon_active_;
    uint32_t party_builder_start_time_;
    uint32_t steam_clan_account_id_;
    uint32_t custom_game_disabled_until_date_;
    uint32_t custom_game_disabled_account_id_;
    uint32_t matchmaking_flags_;
    int high_priority_state_;
    uint32_t custom_game_difficulty_mask_;
    bool lane_selections_enabled_;
    bool is_steam_china_;
    bool restricted_from_ranked_;
    uint32_t bot_difficulty_mask_;
    uint32_t bot_script_index_mask_;
    uint32_t restricted_from_ranked_account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CSODOTAPartyInvite_PartyMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTAPartyInvite.PartyMember) */ {
 public:
  inline CSODOTAPartyInvite_PartyMember() : CSODOTAPartyInvite_PartyMember(nullptr) {}
  ~CSODOTAPartyInvite_PartyMember() override;
  explicit PROTOBUF_CONSTEXPR CSODOTAPartyInvite_PartyMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTAPartyInvite_PartyMember(const CSODOTAPartyInvite_PartyMember& from);
  CSODOTAPartyInvite_PartyMember(CSODOTAPartyInvite_PartyMember&& from) noexcept
    : CSODOTAPartyInvite_PartyMember() {
    *this = ::std::move(from);
  }

  inline CSODOTAPartyInvite_PartyMember& operator=(const CSODOTAPartyInvite_PartyMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTAPartyInvite_PartyMember& operator=(CSODOTAPartyInvite_PartyMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSODOTAPartyInvite_PartyMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTAPartyInvite_PartyMember* internal_default_instance() {
    return reinterpret_cast<const CSODOTAPartyInvite_PartyMember*>(
               &_CSODOTAPartyInvite_PartyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CSODOTAPartyInvite_PartyMember& a, CSODOTAPartyInvite_PartyMember& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTAPartyInvite_PartyMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTAPartyInvite_PartyMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSODOTAPartyInvite_PartyMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSODOTAPartyInvite_PartyMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSODOTAPartyInvite_PartyMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSODOTAPartyInvite_PartyMember& from) {
    CSODOTAPartyInvite_PartyMember::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAPartyInvite_PartyMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTAPartyInvite.PartyMember";
  }
  protected:
  explicit CSODOTAPartyInvite_PartyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSteamIdFieldNumber = 2,
    kIsCoachFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional fixed64 steam_id = 2;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // optional bool is_coach = 4;
  bool has_is_coach() const;
  private:
  bool _internal_has_is_coach() const;
  public:
  void clear_is_coach();
  bool is_coach() const;
  void set_is_coach(bool value);
  private:
  bool _internal_is_coach() const;
  void _internal_set_is_coach(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSODOTAPartyInvite.PartyMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t steam_id_;
    bool is_coach_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CSODOTAPartyInvite final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTAPartyInvite) */ {
 public:
  inline CSODOTAPartyInvite() : CSODOTAPartyInvite(nullptr) {}
  ~CSODOTAPartyInvite() override;
  explicit PROTOBUF_CONSTEXPR CSODOTAPartyInvite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTAPartyInvite(const CSODOTAPartyInvite& from);
  CSODOTAPartyInvite(CSODOTAPartyInvite&& from) noexcept
    : CSODOTAPartyInvite() {
    *this = ::std::move(from);
  }

  inline CSODOTAPartyInvite& operator=(const CSODOTAPartyInvite& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTAPartyInvite& operator=(CSODOTAPartyInvite&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSODOTAPartyInvite& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTAPartyInvite* internal_default_instance() {
    return reinterpret_cast<const CSODOTAPartyInvite*>(
               &_CSODOTAPartyInvite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CSODOTAPartyInvite& a, CSODOTAPartyInvite& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTAPartyInvite* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTAPartyInvite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSODOTAPartyInvite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSODOTAPartyInvite>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSODOTAPartyInvite& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSODOTAPartyInvite& from) {
    CSODOTAPartyInvite::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAPartyInvite* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTAPartyInvite";
  }
  protected:
  explicit CSODOTAPartyInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSODOTAPartyInvite_PartyMember PartyMember;

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 4,
    kSenderNameFieldNumber = 3,
    kGroupIdFieldNumber = 1,
    kSenderIdFieldNumber = 2,
    kTeamIdFieldNumber = 5,
    kLowPriorityStatusFieldNumber = 6,
    kAsCoachFieldNumber = 7,
    kInviteGidFieldNumber = 8,
  };
  // repeated .CSODOTAPartyInvite.PartyMember members = 4;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::CSODOTAPartyInvite_PartyMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >*
      mutable_members();
  private:
  const ::CSODOTAPartyInvite_PartyMember& _internal_members(int index) const;
  ::CSODOTAPartyInvite_PartyMember* _internal_add_members();
  public:
  const ::CSODOTAPartyInvite_PartyMember& members(int index) const;
  ::CSODOTAPartyInvite_PartyMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >&
      members() const;

  // optional string sender_name = 3;
  bool has_sender_name() const;
  private:
  bool _internal_has_sender_name() const;
  public:
  void clear_sender_name();
  const std::string& sender_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_name();
  PROTOBUF_NODISCARD std::string* release_sender_name();
  void set_allocated_sender_name(std::string* sender_name);
  private:
  const std::string& _internal_sender_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_name(const std::string& value);
  std::string* _internal_mutable_sender_name();
  public:

  // optional uint64 group_id = 1 [(.key_field) = true];
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint64_t group_id() const;
  void set_group_id(uint64_t value);
  private:
  uint64_t _internal_group_id() const;
  void _internal_set_group_id(uint64_t value);
  public:

  // optional fixed64 sender_id = 2;
  bool has_sender_id() const;
  private:
  bool _internal_has_sender_id() const;
  public:
  void clear_sender_id();
  uint64_t sender_id() const;
  void set_sender_id(uint64_t value);
  private:
  uint64_t _internal_sender_id() const;
  void _internal_set_sender_id(uint64_t value);
  public:

  // optional uint32 team_id = 5;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional bool low_priority_status = 6;
  bool has_low_priority_status() const;
  private:
  bool _internal_has_low_priority_status() const;
  public:
  void clear_low_priority_status();
  bool low_priority_status() const;
  void set_low_priority_status(bool value);
  private:
  bool _internal_low_priority_status() const;
  void _internal_set_low_priority_status(bool value);
  public:

  // optional bool as_coach = 7;
  bool has_as_coach() const;
  private:
  bool _internal_has_as_coach() const;
  public:
  void clear_as_coach();
  bool as_coach() const;
  void set_as_coach(bool value);
  private:
  bool _internal_as_coach() const;
  void _internal_set_as_coach(bool value);
  public:

  // optional fixed64 invite_gid = 8;
  bool has_invite_gid() const;
  private:
  bool _internal_has_invite_gid() const;
  public:
  void clear_invite_gid();
  uint64_t invite_gid() const;
  void set_invite_gid(uint64_t value);
  private:
  uint64_t _internal_invite_gid() const;
  void _internal_set_invite_gid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSODOTAPartyInvite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember > members_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_name_;
    uint64_t group_id_;
    uint64_t sender_id_;
    uint32_t team_id_;
    bool low_priority_status_;
    bool as_coach_;
    uint64_t invite_gid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgLeaverState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLeaverState) */ {
 public:
  inline CMsgLeaverState() : CMsgLeaverState(nullptr) {}
  ~CMsgLeaverState() override;
  explicit PROTOBUF_CONSTEXPR CMsgLeaverState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLeaverState(const CMsgLeaverState& from);
  CMsgLeaverState(CMsgLeaverState&& from) noexcept
    : CMsgLeaverState() {
    *this = ::std::move(from);
  }

  inline CMsgLeaverState& operator=(const CMsgLeaverState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLeaverState& operator=(CMsgLeaverState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLeaverState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLeaverState* internal_default_instance() {
    return reinterpret_cast<const CMsgLeaverState*>(
               &_CMsgLeaverState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgLeaverState& a, CMsgLeaverState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLeaverState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLeaverState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLeaverState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLeaverState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLeaverState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLeaverState& from) {
    CMsgLeaverState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLeaverState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLeaverState";
  }
  protected:
  explicit CMsgLeaverState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLobbyStateFieldNumber = 1,
    kGameStateFieldNumber = 2,
    kLeaverDetectedFieldNumber = 3,
    kFirstBloodHappenedFieldNumber = 4,
    kDiscardMatchResultsFieldNumber = 5,
    kMassDisconnectFieldNumber = 6,
  };
  // optional uint32 lobby_state = 1;
  bool has_lobby_state() const;
  private:
  bool _internal_has_lobby_state() const;
  public:
  void clear_lobby_state();
  uint32_t lobby_state() const;
  void set_lobby_state(uint32_t value);
  private:
  uint32_t _internal_lobby_state() const;
  void _internal_set_lobby_state(uint32_t value);
  public:

  // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  bool has_game_state() const;
  private:
  bool _internal_has_game_state() const;
  public:
  void clear_game_state();
  ::DOTA_GameState game_state() const;
  void set_game_state(::DOTA_GameState value);
  private:
  ::DOTA_GameState _internal_game_state() const;
  void _internal_set_game_state(::DOTA_GameState value);
  public:

  // optional bool leaver_detected = 3;
  bool has_leaver_detected() const;
  private:
  bool _internal_has_leaver_detected() const;
  public:
  void clear_leaver_detected();
  bool leaver_detected() const;
  void set_leaver_detected(bool value);
  private:
  bool _internal_leaver_detected() const;
  void _internal_set_leaver_detected(bool value);
  public:

  // optional bool first_blood_happened = 4;
  bool has_first_blood_happened() const;
  private:
  bool _internal_has_first_blood_happened() const;
  public:
  void clear_first_blood_happened();
  bool first_blood_happened() const;
  void set_first_blood_happened(bool value);
  private:
  bool _internal_first_blood_happened() const;
  void _internal_set_first_blood_happened(bool value);
  public:

  // optional bool discard_match_results = 5;
  bool has_discard_match_results() const;
  private:
  bool _internal_has_discard_match_results() const;
  public:
  void clear_discard_match_results();
  bool discard_match_results() const;
  void set_discard_match_results(bool value);
  private:
  bool _internal_discard_match_results() const;
  void _internal_set_discard_match_results(bool value);
  public:

  // optional bool mass_disconnect = 6;
  bool has_mass_disconnect() const;
  private:
  bool _internal_has_mass_disconnect() const;
  public:
  void clear_mass_disconnect();
  bool mass_disconnect() const;
  void set_mass_disconnect(bool value);
  private:
  bool _internal_mass_disconnect() const;
  void _internal_set_mass_disconnect(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLeaverState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t lobby_state_;
    int game_state_;
    bool leaver_detected_;
    bool first_blood_happened_;
    bool discard_match_results_;
    bool mass_disconnect_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgReadyCheckStatus_ReadyMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgReadyCheckStatus.ReadyMember) */ {
 public:
  inline CMsgReadyCheckStatus_ReadyMember() : CMsgReadyCheckStatus_ReadyMember(nullptr) {}
  ~CMsgReadyCheckStatus_ReadyMember() override;
  explicit PROTOBUF_CONSTEXPR CMsgReadyCheckStatus_ReadyMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgReadyCheckStatus_ReadyMember(const CMsgReadyCheckStatus_ReadyMember& from);
  CMsgReadyCheckStatus_ReadyMember(CMsgReadyCheckStatus_ReadyMember&& from) noexcept
    : CMsgReadyCheckStatus_ReadyMember() {
    *this = ::std::move(from);
  }

  inline CMsgReadyCheckStatus_ReadyMember& operator=(const CMsgReadyCheckStatus_ReadyMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgReadyCheckStatus_ReadyMember& operator=(CMsgReadyCheckStatus_ReadyMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgReadyCheckStatus_ReadyMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgReadyCheckStatus_ReadyMember* internal_default_instance() {
    return reinterpret_cast<const CMsgReadyCheckStatus_ReadyMember*>(
               &_CMsgReadyCheckStatus_ReadyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgReadyCheckStatus_ReadyMember& a, CMsgReadyCheckStatus_ReadyMember& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgReadyCheckStatus_ReadyMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgReadyCheckStatus_ReadyMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgReadyCheckStatus_ReadyMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgReadyCheckStatus_ReadyMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgReadyCheckStatus_ReadyMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgReadyCheckStatus_ReadyMember& from) {
    CMsgReadyCheckStatus_ReadyMember::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgReadyCheckStatus_ReadyMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgReadyCheckStatus.ReadyMember";
  }
  protected:
  explicit CMsgReadyCheckStatus_ReadyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kReadyStatusFieldNumber = 2,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional .EReadyCheckStatus ready_status = 2 [default = k_EReadyCheckStatus_Unknown];
  bool has_ready_status() const;
  private:
  bool _internal_has_ready_status() const;
  public:
  void clear_ready_status();
  ::EReadyCheckStatus ready_status() const;
  void set_ready_status(::EReadyCheckStatus value);
  private:
  ::EReadyCheckStatus _internal_ready_status() const;
  void _internal_set_ready_status(::EReadyCheckStatus value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgReadyCheckStatus.ReadyMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    int ready_status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgReadyCheckStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgReadyCheckStatus) */ {
 public:
  inline CMsgReadyCheckStatus() : CMsgReadyCheckStatus(nullptr) {}
  ~CMsgReadyCheckStatus() override;
  explicit PROTOBUF_CONSTEXPR CMsgReadyCheckStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgReadyCheckStatus(const CMsgReadyCheckStatus& from);
  CMsgReadyCheckStatus(CMsgReadyCheckStatus&& from) noexcept
    : CMsgReadyCheckStatus() {
    *this = ::std::move(from);
  }

  inline CMsgReadyCheckStatus& operator=(const CMsgReadyCheckStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgReadyCheckStatus& operator=(CMsgReadyCheckStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgReadyCheckStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgReadyCheckStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgReadyCheckStatus*>(
               &_CMsgReadyCheckStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgReadyCheckStatus& a, CMsgReadyCheckStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgReadyCheckStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgReadyCheckStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgReadyCheckStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgReadyCheckStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgReadyCheckStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgReadyCheckStatus& from) {
    CMsgReadyCheckStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgReadyCheckStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgReadyCheckStatus";
  }
  protected:
  explicit CMsgReadyCheckStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgReadyCheckStatus_ReadyMember ReadyMember;

  // accessors -------------------------------------------------------

  enum : int {
    kReadyMembersFieldNumber = 4,
    kStartTimestampFieldNumber = 1,
    kFinishTimestampFieldNumber = 2,
    kInitiatorAccountIdFieldNumber = 3,
  };
  // repeated .CMsgReadyCheckStatus.ReadyMember ready_members = 4;
  int ready_members_size() const;
  private:
  int _internal_ready_members_size() const;
  public:
  void clear_ready_members();
  ::CMsgReadyCheckStatus_ReadyMember* mutable_ready_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgReadyCheckStatus_ReadyMember >*
      mutable_ready_members();
  private:
  const ::CMsgReadyCheckStatus_ReadyMember& _internal_ready_members(int index) const;
  ::CMsgReadyCheckStatus_ReadyMember* _internal_add_ready_members();
  public:
  const ::CMsgReadyCheckStatus_ReadyMember& ready_members(int index) const;
  ::CMsgReadyCheckStatus_ReadyMember* add_ready_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgReadyCheckStatus_ReadyMember >&
      ready_members() const;

  // optional uint32 start_timestamp = 1;
  bool has_start_timestamp() const;
  private:
  bool _internal_has_start_timestamp() const;
  public:
  void clear_start_timestamp();
  uint32_t start_timestamp() const;
  void set_start_timestamp(uint32_t value);
  private:
  uint32_t _internal_start_timestamp() const;
  void _internal_set_start_timestamp(uint32_t value);
  public:

  // optional uint32 finish_timestamp = 2;
  bool has_finish_timestamp() const;
  private:
  bool _internal_has_finish_timestamp() const;
  public:
  void clear_finish_timestamp();
  uint32_t finish_timestamp() const;
  void set_finish_timestamp(uint32_t value);
  private:
  uint32_t _internal_finish_timestamp() const;
  void _internal_set_finish_timestamp(uint32_t value);
  public:

  // optional uint32 initiator_account_id = 3;
  bool has_initiator_account_id() const;
  private:
  bool _internal_has_initiator_account_id() const;
  public:
  void clear_initiator_account_id();
  uint32_t initiator_account_id() const;
  void set_initiator_account_id(uint32_t value);
  private:
  uint32_t _internal_initiator_account_id() const;
  void _internal_set_initiator_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgReadyCheckStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgReadyCheckStatus_ReadyMember > ready_members_;
    uint32_t start_timestamp_;
    uint32_t finish_timestamp_;
    uint32_t initiator_account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyReadyCheckRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgPartyReadyCheckRequest) */ {
 public:
  inline CMsgPartyReadyCheckRequest() : CMsgPartyReadyCheckRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CMsgPartyReadyCheckRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyReadyCheckRequest(const CMsgPartyReadyCheckRequest& from);
  CMsgPartyReadyCheckRequest(CMsgPartyReadyCheckRequest&& from) noexcept
    : CMsgPartyReadyCheckRequest() {
    *this = ::std::move(from);
  }

  inline CMsgPartyReadyCheckRequest& operator=(const CMsgPartyReadyCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyReadyCheckRequest& operator=(CMsgPartyReadyCheckRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartyReadyCheckRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyReadyCheckRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyReadyCheckRequest*>(
               &_CMsgPartyReadyCheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgPartyReadyCheckRequest& a, CMsgPartyReadyCheckRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyReadyCheckRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyReadyCheckRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPartyReadyCheckRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPartyReadyCheckRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgPartyReadyCheckRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgPartyReadyCheckRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyReadyCheckRequest";
  }
  protected:
  explicit CMsgPartyReadyCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgPartyReadyCheckRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyReadyCheckResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyReadyCheckResponse) */ {
 public:
  inline CMsgPartyReadyCheckResponse() : CMsgPartyReadyCheckResponse(nullptr) {}
  ~CMsgPartyReadyCheckResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgPartyReadyCheckResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyReadyCheckResponse(const CMsgPartyReadyCheckResponse& from);
  CMsgPartyReadyCheckResponse(CMsgPartyReadyCheckResponse&& from) noexcept
    : CMsgPartyReadyCheckResponse() {
    *this = ::std::move(from);
  }

  inline CMsgPartyReadyCheckResponse& operator=(const CMsgPartyReadyCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyReadyCheckResponse& operator=(CMsgPartyReadyCheckResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartyReadyCheckResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyReadyCheckResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyReadyCheckResponse*>(
               &_CMsgPartyReadyCheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgPartyReadyCheckResponse& a, CMsgPartyReadyCheckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyReadyCheckResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyReadyCheckResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPartyReadyCheckResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPartyReadyCheckResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPartyReadyCheckResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgPartyReadyCheckResponse& from) {
    CMsgPartyReadyCheckResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyReadyCheckResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyReadyCheckResponse";
  }
  protected:
  explicit CMsgPartyReadyCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .EReadyCheckRequestResult result = 1 [default = k_EReadyCheckRequestResult_Success];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::EReadyCheckRequestResult result() const;
  void set_result(::EReadyCheckRequestResult value);
  private:
  ::EReadyCheckRequestResult _internal_result() const;
  void _internal_set_result(::EReadyCheckRequestResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPartyReadyCheckResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyReadyCheckAcknowledge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyReadyCheckAcknowledge) */ {
 public:
  inline CMsgPartyReadyCheckAcknowledge() : CMsgPartyReadyCheckAcknowledge(nullptr) {}
  ~CMsgPartyReadyCheckAcknowledge() override;
  explicit PROTOBUF_CONSTEXPR CMsgPartyReadyCheckAcknowledge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyReadyCheckAcknowledge(const CMsgPartyReadyCheckAcknowledge& from);
  CMsgPartyReadyCheckAcknowledge(CMsgPartyReadyCheckAcknowledge&& from) noexcept
    : CMsgPartyReadyCheckAcknowledge() {
    *this = ::std::move(from);
  }

  inline CMsgPartyReadyCheckAcknowledge& operator=(const CMsgPartyReadyCheckAcknowledge& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyReadyCheckAcknowledge& operator=(CMsgPartyReadyCheckAcknowledge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartyReadyCheckAcknowledge& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyReadyCheckAcknowledge* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyReadyCheckAcknowledge*>(
               &_CMsgPartyReadyCheckAcknowledge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgPartyReadyCheckAcknowledge& a, CMsgPartyReadyCheckAcknowledge& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyReadyCheckAcknowledge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyReadyCheckAcknowledge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPartyReadyCheckAcknowledge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPartyReadyCheckAcknowledge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPartyReadyCheckAcknowledge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgPartyReadyCheckAcknowledge& from) {
    CMsgPartyReadyCheckAcknowledge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyReadyCheckAcknowledge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyReadyCheckAcknowledge";
  }
  protected:
  explicit CMsgPartyReadyCheckAcknowledge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadyStatusFieldNumber = 1,
  };
  // optional .EReadyCheckStatus ready_status = 1 [default = k_EReadyCheckStatus_Unknown];
  bool has_ready_status() const;
  private:
  bool _internal_has_ready_status() const;
  public:
  void clear_ready_status();
  ::EReadyCheckStatus ready_status() const;
  void set_ready_status(::EReadyCheckStatus value);
  private:
  ::EReadyCheckStatus _internal_ready_status() const;
  void _internal_set_ready_status(::EReadyCheckStatus value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPartyReadyCheckAcknowledge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int ready_status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyEventGameDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLobbyEventGameDetails) */ {
 public:
  inline CMsgLobbyEventGameDetails() : CMsgLobbyEventGameDetails(nullptr) {}
  ~CMsgLobbyEventGameDetails() override;
  explicit PROTOBUF_CONSTEXPR CMsgLobbyEventGameDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLobbyEventGameDetails(const CMsgLobbyEventGameDetails& from);
  CMsgLobbyEventGameDetails(CMsgLobbyEventGameDetails&& from) noexcept
    : CMsgLobbyEventGameDetails() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyEventGameDetails& operator=(const CMsgLobbyEventGameDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLobbyEventGameDetails& operator=(CMsgLobbyEventGameDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLobbyEventGameDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLobbyEventGameDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyEventGameDetails*>(
               &_CMsgLobbyEventGameDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgLobbyEventGameDetails& a, CMsgLobbyEventGameDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLobbyEventGameDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLobbyEventGameDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLobbyEventGameDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLobbyEventGameDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLobbyEventGameDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLobbyEventGameDetails& from) {
    CMsgLobbyEventGameDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyEventGameDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLobbyEventGameDetails";
  }
  protected:
  explicit CMsgLobbyEventGameDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKvDataFieldNumber = 1,
  };
  // optional bytes kv_data = 1;
  bool has_kv_data() const;
  private:
  bool _internal_has_kv_data() const;
  public:
  void clear_kv_data();
  const std::string& kv_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kv_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kv_data();
  PROTOBUF_NODISCARD std::string* release_kv_data();
  void set_allocated_kv_data(std::string* kv_data);
  private:
  const std::string& _internal_kv_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kv_data(const std::string& value);
  std::string* _internal_mutable_kv_data();
  public:

  // @@protoc_insertion_point(class_scope:CMsgLobbyEventGameDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kv_data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgMatchMatchmakingStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMatchMatchmakingStats) */ {
 public:
  inline CMsgMatchMatchmakingStats() : CMsgMatchMatchmakingStats(nullptr) {}
  ~CMsgMatchMatchmakingStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgMatchMatchmakingStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMatchMatchmakingStats(const CMsgMatchMatchmakingStats& from);
  CMsgMatchMatchmakingStats(CMsgMatchMatchmakingStats&& from) noexcept
    : CMsgMatchMatchmakingStats() {
    *this = ::std::move(from);
  }

  inline CMsgMatchMatchmakingStats& operator=(const CMsgMatchMatchmakingStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMatchMatchmakingStats& operator=(CMsgMatchMatchmakingStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMatchMatchmakingStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMatchMatchmakingStats* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchMatchmakingStats*>(
               &_CMsgMatchMatchmakingStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgMatchMatchmakingStats& a, CMsgMatchMatchmakingStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMatchMatchmakingStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMatchMatchmakingStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMatchMatchmakingStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMatchMatchmakingStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMatchMatchmakingStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgMatchMatchmakingStats& from) {
    CMsgMatchMatchmakingStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMatchMatchmakingStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMatchMatchmakingStats";
  }
  protected:
  explicit CMsgMatchMatchmakingStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAverageQueueTimeFieldNumber = 1,
    kMaximumQueueTimeFieldNumber = 2,
    kBehaviorScoreVarianceFieldNumber = 3,
  };
  // optional uint32 average_queue_time = 1;
  bool has_average_queue_time() const;
  private:
  bool _internal_has_average_queue_time() const;
  public:
  void clear_average_queue_time();
  uint32_t average_queue_time() const;
  void set_average_queue_time(uint32_t value);
  private:
  uint32_t _internal_average_queue_time() const;
  void _internal_set_average_queue_time(uint32_t value);
  public:

  // optional uint32 maximum_queue_time = 2;
  bool has_maximum_queue_time() const;
  private:
  bool _internal_has_maximum_queue_time() const;
  public:
  void clear_maximum_queue_time();
  uint32_t maximum_queue_time() const;
  void set_maximum_queue_time(uint32_t value);
  private:
  uint32_t _internal_maximum_queue_time() const;
  void _internal_set_maximum_queue_time(uint32_t value);
  public:

  // optional .EMatchBehaviorScoreVariance behavior_score_variance = 3 [default = k_EMatchBehaviorScoreVariance_Invalid];
  bool has_behavior_score_variance() const;
  private:
  bool _internal_has_behavior_score_variance() const;
  public:
  void clear_behavior_score_variance();
  ::EMatchBehaviorScoreVariance behavior_score_variance() const;
  void set_behavior_score_variance(::EMatchBehaviorScoreVariance value);
  private:
  ::EMatchBehaviorScoreVariance _internal_behavior_score_variance() const;
  void _internal_set_behavior_score_variance(::EMatchBehaviorScoreVariance value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMatchMatchmakingStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t average_queue_time_;
    uint32_t maximum_queue_time_;
    int behavior_score_variance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMvpData_MvpDatum_MvpAccolade final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMvpData.MvpDatum.MvpAccolade) */ {
 public:
  inline CMvpData_MvpDatum_MvpAccolade() : CMvpData_MvpDatum_MvpAccolade(nullptr) {}
  ~CMvpData_MvpDatum_MvpAccolade() override;
  explicit PROTOBUF_CONSTEXPR CMvpData_MvpDatum_MvpAccolade(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMvpData_MvpDatum_MvpAccolade(const CMvpData_MvpDatum_MvpAccolade& from);
  CMvpData_MvpDatum_MvpAccolade(CMvpData_MvpDatum_MvpAccolade&& from) noexcept
    : CMvpData_MvpDatum_MvpAccolade() {
    *this = ::std::move(from);
  }

  inline CMvpData_MvpDatum_MvpAccolade& operator=(const CMvpData_MvpDatum_MvpAccolade& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMvpData_MvpDatum_MvpAccolade& operator=(CMvpData_MvpDatum_MvpAccolade&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMvpData_MvpDatum_MvpAccolade& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMvpData_MvpDatum_MvpAccolade* internal_default_instance() {
    return reinterpret_cast<const CMvpData_MvpDatum_MvpAccolade*>(
               &_CMvpData_MvpDatum_MvpAccolade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMvpData_MvpDatum_MvpAccolade& a, CMvpData_MvpDatum_MvpAccolade& b) {
    a.Swap(&b);
  }
  inline void Swap(CMvpData_MvpDatum_MvpAccolade* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMvpData_MvpDatum_MvpAccolade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMvpData_MvpDatum_MvpAccolade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMvpData_MvpDatum_MvpAccolade>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMvpData_MvpDatum_MvpAccolade& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMvpData_MvpDatum_MvpAccolade& from) {
    CMvpData_MvpDatum_MvpAccolade::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMvpData_MvpDatum_MvpAccolade* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMvpData.MvpDatum.MvpAccolade";
  }
  protected:
  explicit CMvpData_MvpDatum_MvpAccolade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType MvpAccoladeType;
  static constexpr MvpAccoladeType kills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kills;
  static constexpr MvpAccoladeType deaths =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_deaths;
  static constexpr MvpAccoladeType assists =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_assists;
  static constexpr MvpAccoladeType net_worth =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_net_worth;
  static constexpr MvpAccoladeType item_value =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_item_value;
  static constexpr MvpAccoladeType support_gold_spent =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_support_gold_spent;
  static constexpr MvpAccoladeType wards_placed =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_wards_placed;
  static constexpr MvpAccoladeType dewards =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_dewards;
  static constexpr MvpAccoladeType camps_stacked =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_camps_stacked;
  static constexpr MvpAccoladeType last_hits =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_last_hits;
  static constexpr MvpAccoladeType denies =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_denies;
  static constexpr MvpAccoladeType kKillEaterEvent_Killing_Sprees =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Killing_Sprees;
  static constexpr MvpAccoladeType kKillEaterEvent_Godlike =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Godlike;
  static constexpr MvpAccoladeType kKillEaterEvent_Towers_Destroyed =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Towers_Destroyed;
  static constexpr MvpAccoladeType kKillEaterEventType_Invoker_SunstrikeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_SunstrikeKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Axe_Culls =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Axe_Culls;
  static constexpr MvpAccoladeType kKillEaterEventType_Axe_BattleHungerKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Axe_BattleHungerKills;
  static constexpr MvpAccoladeType kKillEaterEventType_LowHealthKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_LowHealthKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Invoker_TornadoKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_TornadoKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Sven_DoubleStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sven_DoubleStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_Sven_WarcryAssists =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sven_WarcryAssists;
  static constexpr MvpAccoladeType kKillEaterEventType_Sven_CleaveDoubleKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sven_CleaveDoubleKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Sven_TeleportInterrupts =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sven_TeleportInterrupts;
  static constexpr MvpAccoladeType kKillEaterEventType_Faceless_MultiChrono =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Faceless_MultiChrono;
  static constexpr MvpAccoladeType kKillEaterEventType_Faceless_ChronoKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Faceless_ChronoKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Ursa_MultiShocks =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Ursa_MultiShocks;
  static constexpr MvpAccoladeType kKillEaterEventType_RoshanKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_RoshanKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Lion_FingerKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lion_FingerKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Riki_SmokedHeroKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Riki_SmokedHeroKills;
  static constexpr MvpAccoladeType kKillEaterEventType_HeroesRevealedWithDust =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_HeroesRevealedWithDust;
  static constexpr MvpAccoladeType kKillEaterEventType_SkeletonKing_ReincarnationKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SkeletonKing_ReincarnationKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Skywrath_FlareKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Skywrath_FlareKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Leshrac_SplitEarthStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Leshrac_SplitEarthStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_Mirana_MaxStunArrows =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mirana_MaxStunArrows;
  static constexpr MvpAccoladeType kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits;
  static constexpr MvpAccoladeType kKillEaterEventType_PhantomAssassin_DaggerCrits =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_PhantomAssassin_DaggerCrits;
  static constexpr MvpAccoladeType kKillEaterEventType_Meepo_Earthbinds =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Meepo_Earthbinds;
  static constexpr MvpAccoladeType kKillEaterEventType_Bloodseeker_RuptureKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Bloodseeker_RuptureKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Slark_LeashedEnemies =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Slark_LeashedEnemies;
  static constexpr MvpAccoladeType kKillEaterEventType_Disruptor_FountainGlimpses =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Disruptor_FountainGlimpses;
  static constexpr MvpAccoladeType kKillEaterEventType_Rubick_SpellsStolen =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Rubick_SpellsStolen;
  static constexpr MvpAccoladeType kKillEaterEventType_Rubick_UltimatesStolen =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Rubick_UltimatesStolen;
  static constexpr MvpAccoladeType kKillEaterEventType_Doom_EnemiesDoomed =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Doom_EnemiesDoomed;
  static constexpr MvpAccoladeType kKillEaterEventType_Omniknight_Purifications =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Omniknight_Purifications;
  static constexpr MvpAccoladeType kKillEaterEventType_Omniknight_AlliesRepelled =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Omniknight_AlliesRepelled;
  static constexpr MvpAccoladeType kKillEaterEventType_Omniknight_EnemiesRepelled =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Omniknight_EnemiesRepelled;
  static constexpr MvpAccoladeType kKillEaterEventType_Warlock_FiveHeroFatalBonds =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Warlock_FiveHeroFatalBonds;
  static constexpr MvpAccoladeType kKillEaterEventType_CrystalMaiden_FrostbittenEnemies =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_CrystalMaiden_FrostbittenEnemies;
  static constexpr MvpAccoladeType kKillEaterEventType_CrystalMaiden_CrystalNovas =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_CrystalMaiden_CrystalNovas;
  static constexpr MvpAccoladeType kKillEaterEventType_Kunkka_DoubleHeroTorrents =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Kunkka_DoubleHeroTorrents;
  static constexpr MvpAccoladeType kKillEaterEventType_Kunkka_TripleHeroGhostShips =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Kunkka_TripleHeroGhostShips;
  static constexpr MvpAccoladeType kKillEaterEventType_NagaSiren_EnemiesEnsnared =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NagaSiren_EnemiesEnsnared;
  static constexpr MvpAccoladeType kKillEaterEventType_NagaSiren_TripleHeroRipTides =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NagaSiren_TripleHeroRipTides;
  static constexpr MvpAccoladeType kKillEaterEventType_Lycan_KillsDuringShapeshift =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lycan_KillsDuringShapeshift;
  static constexpr MvpAccoladeType kKillEaterEventType_Pudge_DismemberKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pudge_DismemberKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Pudge_EnemyHeroesHooked =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pudge_EnemyHeroesHooked;
  static constexpr MvpAccoladeType kKillEaterEventType_Pudge_HookKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pudge_HookKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked;
  static constexpr MvpAccoladeType kKillEaterEventType_DrowRanger_EnemiesSilenced =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DrowRanger_EnemiesSilenced;
  static constexpr MvpAccoladeType kKillEaterEventType_DrowRanger_MultiHeroSilences =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DrowRanger_MultiHeroSilences;
  static constexpr MvpAccoladeType kKillEaterEventType_DrowRanger_SilencedKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DrowRanger_SilencedKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DrowRanger_FrostArrowKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DrowRanger_FrostArrowKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DragonKnight_KillsInDragonForm =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DragonKnight_KillsInDragonForm;
  static constexpr MvpAccoladeType kKillEaterEventType_DragonKnight_BreatheFireKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DragonKnight_BreatheFireKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DragonKnight_SplashKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DragonKnight_SplashKills;
  static constexpr MvpAccoladeType kKillEaterEventType_WitchDoctor_CaskStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WitchDoctor_CaskStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_WitchDoctor_MaledictKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WitchDoctor_MaledictKills;
  static constexpr MvpAccoladeType kKillEaterEventType_WitchDoctor_MultiHeroMaledicts =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WitchDoctor_MultiHeroMaledicts;
  static constexpr MvpAccoladeType kKillEaterEventType_WitchDoctor_DeathWardKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WitchDoctor_DeathWardKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Disruptor_ThunderStrikeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Disruptor_ThunderStrikeKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Disruptor_HeroesGlimpsed =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Disruptor_HeroesGlimpsed;
  static constexpr MvpAccoladeType kKillEaterEventType_CrystalMaiden_FreezingFieldKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_CrystalMaiden_FreezingFieldKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Medusa_EnemiesPetrified =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Medusa_EnemiesPetrified;
  static constexpr MvpAccoladeType kKillEaterEventType_Warlock_FatalBondsKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Warlock_FatalBondsKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Warlock_GolemKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Warlock_GolemKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Tusk_WalrusPunches =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Tusk_WalrusPunches;
  static constexpr MvpAccoladeType kKillEaterEventType_Tusk_SnowballStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Tusk_SnowballStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_Earthshaker_FissureStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_FissureStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_Earthshaker_3HeroEchoslams =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_3HeroEchoslams;
  static constexpr MvpAccoladeType kKillEaterEventType_SandKing_BurrowstrikeStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SandKing_BurrowstrikeStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_SandKing_EpicenterKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SandKing_EpicenterKills;
  static constexpr MvpAccoladeType kKillEaterEventType_SkywrathMage_AncientSealKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SkywrathMage_AncientSealKills;
  static constexpr MvpAccoladeType kKillEaterEventType_SkywrathMage_ConcussiveShotKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SkywrathMage_ConcussiveShotKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Luna_LucentBeamKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Luna_LucentBeamKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Luna_EclipseKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Luna_EclipseKills;
  static constexpr MvpAccoladeType kKillEaterEventType_KeeperOfTheLight_IlluminateKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_KeeperOfTheLight_IlluminateKills;
  static constexpr MvpAccoladeType kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled;
  static constexpr MvpAccoladeType kKillEaterEventType_LegionCommander_DuelsWon =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_LegionCommander_DuelsWon;
  static constexpr MvpAccoladeType kKillEaterEventType_Beastmaster_RoarKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Beastmaster_RoarKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Beastmaster_RoarMultiKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Beastmaster_RoarMultiKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Windrunner_FocusFireBuildings =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Windrunner_FocusFireBuildings;
  static constexpr MvpAccoladeType kKillEaterEventType_Windrunner_PowershotKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Windrunner_PowershotKills;
  static constexpr MvpAccoladeType kKillEaterEventType_PhantomAssassin_DaggerLastHits =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_PhantomAssassin_DaggerLastHits;
  static constexpr MvpAccoladeType kKillEaterEventType_PhantomAssassin_PhantomStrikeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_PhantomAssassin_PhantomStrikeKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DeathProphet_CryptSwarmKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_CryptSwarmKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DeathProphet_ExorcismBuildingKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_ExorcismBuildingKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned;
  static constexpr MvpAccoladeType kKillEaterEventType_DeathProphet_MultiHeroSilences =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_MultiHeroSilences;
  static constexpr MvpAccoladeType kKillEaterEventType_Abaddon_MistCoilKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Abaddon_MistCoilKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Abaddon_MistCoilHealed =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Abaddon_MistCoilHealed;
  static constexpr MvpAccoladeType kKillEaterEventType_Abaddon_AphoticShieldKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Abaddon_AphoticShieldKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Lich_ChainFrostTripleKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lich_ChainFrostTripleKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Lich_ChainFrostMultiKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lich_ChainFrostMultiKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Lich_ChainFrostBounces =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lich_ChainFrostBounces;
  static constexpr MvpAccoladeType kKillEaterEventType_Ursa_EnragedKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Ursa_EnragedKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Ursa_EarthshockKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Ursa_EarthshockKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Lina_LagunaBladeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lina_LagunaBladeKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Lina_DragonSlaveKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lina_DragonSlaveKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Lina_LightStrikeArrayStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lina_LightStrikeArrayStuns;
  static constexpr MvpAccoladeType kKillEaterEvent_Barracks_Destroyed =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Barracks_Destroyed;
  static constexpr MvpAccoladeType kKillEaterEvent_TemplarAssassin_MeldKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_TemplarAssassin_MeldKills;
  static constexpr MvpAccoladeType kKillEaterEvent_TemplarAssassin_HeroesSlowed =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_TemplarAssassin_HeroesSlowed;
  static constexpr MvpAccoladeType kKillEaterEvent_Sniper_AssassinationKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Sniper_AssassinationKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Sniper_HeadshotStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Sniper_HeadshotStuns;
  static constexpr MvpAccoladeType kKillEaterEvent_EarthSpirit_SmashStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_EarthSpirit_SmashStuns;
  static constexpr MvpAccoladeType kKillEaterEvent_EarthSpirit_GripSilences =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_EarthSpirit_GripSilences;
  static constexpr MvpAccoladeType kKillEaterEvent_ShadowShaman_ShackleKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowShaman_ShackleKills;
  static constexpr MvpAccoladeType kKillEaterEvent_ShadowShaman_HexKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowShaman_HexKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Centaur_EnemiesStomped =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Centaur_EnemiesStomped;
  static constexpr MvpAccoladeType kKillEaterEvent_Centaur_DoubleEdgeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Centaur_DoubleEdgeKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Centaur_ReturnKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Centaur_ReturnKills;
  static constexpr MvpAccoladeType kKillEaterEvent_EmberSpirit_EnemiesChained =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_EmberSpirit_EnemiesChained;
  static constexpr MvpAccoladeType kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Puck_OrbKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Puck_OrbKills;
  static constexpr MvpAccoladeType kKillEaterEvent_VengefulSpirit_EnemiesStunned =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_VengefulSpirit_EnemiesStunned;
  static constexpr MvpAccoladeType kKillEaterEvent_Lifestealer_RageKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Lifestealer_RageKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Lifestealer_OpenWoundsKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Lifestealer_OpenWoundsKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Lifestealer_InfestKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Lifestealer_InfestKills;
  static constexpr MvpAccoladeType kKillEaterEvent_ElderTitan_SpiritKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ElderTitan_SpiritKills;
  static constexpr MvpAccoladeType kKillEaterEvent_ElderTitan_GoodStomps =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ElderTitan_GoodStomps;
  static constexpr MvpAccoladeType kKillEaterEvent_Clockwerk_RocketKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Clockwerk_RocketKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Clockwerk_BlindRocketKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Clockwerk_BlindRocketKills;
  static constexpr MvpAccoladeType kKillEaterEvent_StormSpirit_BallKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_StormSpirit_BallKills;
  static constexpr MvpAccoladeType kKillEaterEvent_StormSpirit_DoubleRemnantKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_StormSpirit_DoubleRemnantKills;
  static constexpr MvpAccoladeType kKillEaterEvent_StormSpirit_VortexKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_StormSpirit_VortexKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Tinker_DoubleMissileKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Tinker_DoubleMissileKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Tinker_LaserKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Tinker_LaserKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Techies_SuicideKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Techies_SuicideKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Techies_LandMineKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Techies_LandMineKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Techies_StatisTrapStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Techies_StatisTrapStuns;
  static constexpr MvpAccoladeType kKillEaterEvent_Techies_RemoteMineKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Techies_RemoteMineKills;
  static constexpr MvpAccoladeType kKillEaterEvent_ShadowFiend_TripleRazeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowFiend_TripleRazeKills;
  static constexpr MvpAccoladeType kKillEaterEvent_ShadowFiend_RequiemMultiKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowFiend_RequiemMultiKills;
  static constexpr MvpAccoladeType kKillEaterEvent_ShadowFiend_QRazeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowFiend_QRazeKills;
  static constexpr MvpAccoladeType kKillEaterEvent_ShadowFiend_WRazeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowFiend_WRazeKills;
  static constexpr MvpAccoladeType kKillEaterEvent_ShadowFiend_ERazeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowFiend_ERazeKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Oracle_FatesEdictKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Oracle_FatesEdictKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Oracle_FalsePromiseSaves =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Oracle_FalsePromiseSaves;
  static constexpr MvpAccoladeType kKillEaterEvent_Juggernaut_OmnislashKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Juggernaut_OmnislashKills;
  static constexpr MvpAccoladeType kKillEaterEventType_SkeletonKing_SkeletonHeroKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SkeletonKing_SkeletonHeroKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DarkWillow_CursedCrownTripleStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DarkWillow_CursedCrownTripleStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_Dazzle_ShallowGraveSaves =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Dazzle_ShallowGraveSaves;
  static constexpr MvpAccoladeType kKillEaterEventType_Dazzle_PoisonTouchKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Dazzle_PoisonTouchKills;
  static constexpr MvpAccoladeType kKillEaterEventType_ThreeManMeks =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ThreeManMeks;
  static constexpr MvpAccoladeType kKillEaterEventType_Viper_PoisonAttackKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Viper_PoisonAttackKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Viper_CorrosiveSkinKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Viper_CorrosiveSkinKills;
  static constexpr MvpAccoladeType kKillEaterEventType_ThreeHeroVeils =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ThreeHeroVeils;
  static constexpr MvpAccoladeType kKillEaterEventType_Viper_KillsDuringViperStrike =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Viper_KillsDuringViperStrike;
  static constexpr MvpAccoladeType kKillEaterEventType_SolarCrestKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SolarCrestKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Tiny_TreeThrowKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Tiny_TreeThrowKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Riki_BackstabKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Riki_BackstabKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_Terrorblade_MetamorphosisKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Terrorblade_MetamorphosisKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Lion_GreatFingerKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lion_GreatFingerKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Antimage_SpellsBlockedWithAghanims =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Antimage_SpellsBlockedWithAghanims;
  static constexpr MvpAccoladeType kKillEaterEventType_Antimage_ThreeManManaVoids =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Antimage_ThreeManManaVoids;
  static constexpr MvpAccoladeType kKillEaterEventType_ArcWarden_TempestDoubleKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ArcWarden_TempestDoubleKills;
  static constexpr MvpAccoladeType kKillEaterEventType_ArcWarden_SparkWraithKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ArcWarden_SparkWraithKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Bane_BrainSapKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Bane_BrainSapKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Bane_FiendsGripKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Bane_FiendsGripKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Batrider_TripleHeroFlamebreaks =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Batrider_TripleHeroFlamebreaks;
  static constexpr MvpAccoladeType kKillEaterEventType_Batrider_DoubleHeroLassoes =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Batrider_DoubleHeroLassoes;
  static constexpr MvpAccoladeType kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit;
  static constexpr MvpAccoladeType kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks;
  static constexpr MvpAccoladeType kKillEaterEventType_Bristleback_TripleHeroNasalGoo =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Bristleback_TripleHeroNasalGoo;
  static constexpr MvpAccoladeType kKillEaterEventType_Broodmother_SpiderlingHeroKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Broodmother_SpiderlingHeroKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Broodmother_KillsInsideWeb =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Broodmother_KillsInsideWeb;
  static constexpr MvpAccoladeType kKillEaterEventType_Centaur_ThreeHeroStampede =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Centaur_ThreeHeroStampede;
  static constexpr MvpAccoladeType kKillEaterEventType_ChaosKnight_RealityRiftKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ChaosKnight_RealityRiftKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Chen_KillsWithPenitence =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Chen_KillsWithPenitence;
  static constexpr MvpAccoladeType kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas;
  static constexpr MvpAccoladeType kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields;
  static constexpr MvpAccoladeType kKillEaterEventType_Dazzle_ShadowWaveKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Dazzle_ShadowWaveKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DeathProphet_SiphonKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_SiphonKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls;
  static constexpr MvpAccoladeType kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm;
  static constexpr MvpAccoladeType kKillEaterEventType_Doom_InfernalBladeBurnKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Doom_InfernalBladeBurnKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills;
  static constexpr MvpAccoladeType kKillEaterEventType_EmberSpirit_RemnantKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_EmberSpirit_RemnantKills;
  static constexpr MvpAccoladeType kKillEaterEventType_EmberSpirit_SleightOfFistKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_EmberSpirit_SleightOfFistKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos;
  static constexpr MvpAccoladeType kKillEaterEventType_Enigma_ThreeManBlackHoles =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Enigma_ThreeManBlackHoles;
  static constexpr MvpAccoladeType kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation;
  static constexpr MvpAccoladeType kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon;
  static constexpr MvpAccoladeType kKillEaterEventType_Gyrocopter_HomingMissileKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Gyrocopter_HomingMissileKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Gyrocopter_RocketBarrageKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Gyrocopter_RocketBarrageKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Huskar_KillsDuringLifeBreak =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Huskar_KillsDuringLifeBreak;
  static constexpr MvpAccoladeType kKillEaterEventType_Huskar_BurningSpearKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Huskar_BurningSpearKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Invoker_MultiHeroIceWall =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_MultiHeroIceWall;
  static constexpr MvpAccoladeType kKillEaterEventType_Invoker_ThreeHeroEMP =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_ThreeHeroEMP;
  static constexpr MvpAccoladeType kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast;
  static constexpr MvpAccoladeType kKillEaterEventType_Invoker_MultiHeroChaosMeteor =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_MultiHeroChaosMeteor;
  static constexpr MvpAccoladeType kKillEaterEventType_Jakiro_MultiHeroDualBreath =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Jakiro_MultiHeroDualBreath;
  static constexpr MvpAccoladeType kKillEaterEventType_Jakiro_IcePathMacropyreCombos =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Jakiro_IcePathMacropyreCombos;
  static constexpr MvpAccoladeType kKillEaterEventType_Leshrac_PulseNovaKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Leshrac_PulseNovaKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Leshrac_ThreeHeroLightningStorm =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Leshrac_ThreeHeroLightningStorm;
  static constexpr MvpAccoladeType kKillEaterEventType_Lion_ThreeHeroFingerOfDeath =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lion_ThreeHeroFingerOfDeath;
  static constexpr MvpAccoladeType kKillEaterEventType_Meepo_PoofKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Meepo_PoofKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Meepo_MultiHeroEarthbinds =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Meepo_MultiHeroEarthbinds;
  static constexpr MvpAccoladeType kKillEaterEventType_NightStalker_NighttimeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NightStalker_NighttimeKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Morphling_KillsDuringReplicate =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Morphling_KillsDuringReplicate;
  static constexpr MvpAccoladeType kKillEaterEventType_OgreMagi_FireblastKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_OgreMagi_FireblastKills;
  static constexpr MvpAccoladeType kKillEaterEventType_OgreMagi_IgniteKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_OgreMagi_IgniteKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DominatingKillStreaks =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DominatingKillStreaks;
  static constexpr MvpAccoladeType kKillEaterEventType_MegaKillStreaks =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_MegaKillStreaks;
  static constexpr MvpAccoladeType kKillEaterEventType_Alchemist_AghanimsGiven =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Alchemist_AghanimsGiven;
  static constexpr MvpAccoladeType kKillEaterEventType_VeilsLeadingToKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_VeilsLeadingToKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DustLeadingToKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DustLeadingToKills;
  static constexpr MvpAccoladeType kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_Weaver_ShukuchiKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Weaver_ShukuchiKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Windrunner_ShackleFocusFireKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Windrunner_ShackleFocusFireKills;
  static constexpr MvpAccoladeType kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Tusk_WalrusPunchKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Tusk_WalrusPunchKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Tinker_MultiHeroLasers =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Tinker_MultiHeroLasers;
  static constexpr MvpAccoladeType kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades;
  static constexpr MvpAccoladeType kKillEaterEventType_Sven_KillsDuringGodsStrength =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sven_KillsDuringGodsStrength;
  static constexpr MvpAccoladeType kKillEaterEventType_Sniper_ThreeHeroShrapnels =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sniper_ThreeHeroShrapnels;
  static constexpr MvpAccoladeType kKillEaterEventType_Slark_KillsDuringShadowDance =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Slark_KillsDuringShadowDance;
  static constexpr MvpAccoladeType kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks;
  static constexpr MvpAccoladeType kKillEaterEventType_ShadowShaman_SerpentWardShackleKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ShadowShaman_SerpentWardShackleKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade;
  static constexpr MvpAccoladeType kKillEaterEventType_Razor_EyeOfTheStormKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Razor_EyeOfTheStormKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Pugna_LifeDrainKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pugna_LifeDrainKills;
  static constexpr MvpAccoladeType kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Oracle_MultiHeroFortunesEnd =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Oracle_MultiHeroFortunesEnd;
  static constexpr MvpAccoladeType kKillEaterEventType_Omniknight_PurificationKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Omniknight_PurificationKills;
  static constexpr MvpAccoladeType kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear;
  static constexpr MvpAccoladeType kKillEaterEventType_Warlock_ThreeHeroFatalBonds =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Warlock_ThreeHeroFatalBonds;
  static constexpr MvpAccoladeType kKillEaterEventType_Riki_TricksOfTheTradeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Riki_TricksOfTheTradeKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Earthshaker_AftershockHits10 =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_AftershockHits10;
  static constexpr MvpAccoladeType kKillEaterEventType_Earthshaker_5HeroEchoslams =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_5HeroEchoslams;
  static constexpr MvpAccoladeType kKillEaterEventType_Lina_LagunaBladeHeroKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lina_LagunaBladeHeroKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Lina_LightStrikeHeroStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lina_LightStrikeHeroStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_Earthshaker_FissureMultiStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_FissureMultiStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_Earthshaker_TotemKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_TotemKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Pangolier_SwashbuckleKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pangolier_SwashbuckleKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Furion_EnemyHeroesTrapped =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Furion_EnemyHeroesTrapped;
  static constexpr MvpAccoladeType kKillEaterEventType_Pangolier_HeartpiercerKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pangolier_HeartpiercerKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Medusa_MultiHeroStoneGaze =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Medusa_MultiHeroStoneGaze;
  static constexpr MvpAccoladeType kKillEaterEventType_Medusa_SplitShotKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Medusa_SplitShotKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Mirana_MultiHeroStarstorm =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mirana_MultiHeroStarstorm;
  static constexpr MvpAccoladeType kKillEaterEventType_Mirana_KillsFromMoonlightShadow =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mirana_KillsFromMoonlightShadow;
  static constexpr MvpAccoladeType kKillEaterEventType_Magnus_MultiHeroSkewers =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Magnus_MultiHeroSkewers;
  static constexpr MvpAccoladeType kKillEaterEventType_Magnus_MultiHeroReversePolarity =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Magnus_MultiHeroReversePolarity;
  static constexpr MvpAccoladeType kKillEaterEventType_Magnus_HeroesSlowedWithShockwave =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Magnus_HeroesSlowedWithShockwave;
  static constexpr MvpAccoladeType kKillEaterEventType_NagaSiren_MultiHeroSong =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NagaSiren_MultiHeroSong;
  static constexpr MvpAccoladeType kKillEaterEventType_NagaSiren_AlliesHealedBySong =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NagaSiren_AlliesHealedBySong;
  static constexpr MvpAccoladeType kKillEaterEventType_LoneDruid_MultiHeroRoar =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_LoneDruid_MultiHeroRoar;
  static constexpr MvpAccoladeType kKillEaterEventType_LoneDruid_BattleCryKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_LoneDruid_BattleCryKills;
  static constexpr MvpAccoladeType kKillEaterEventType_WinterWyvern_ThreeHeroCurses =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WinterWyvern_ThreeHeroCurses;
  static constexpr MvpAccoladeType kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell;
  static constexpr MvpAccoladeType kKillEaterEventType_Mars_EnemiesKilledInArena =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mars_EnemiesKilledInArena;
  static constexpr MvpAccoladeType kKillEaterEventType_Mars_MultiHeroGodsRebuke =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mars_MultiHeroGodsRebuke;
  static constexpr MvpAccoladeType kKillEaterEventType_Mars_GodsRebukeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mars_GodsRebukeKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Snapfire_LizardBlobsKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Snapfire_LizardBlobsKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Snapfire_TwoHeroCookieStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Snapfire_TwoHeroCookieStuns;
  static constexpr MvpAccoladeType Custom_KillStreak =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_Custom_KillStreak;
  static constexpr MvpAccoladeType kKillEaterEventType_Muerta_DeadShotKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Muerta_DeadShotKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Muerta_PierceTheVeilKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Muerta_PierceTheVeilKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Muerta_MultiHeroDeadShot =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Muerta_MultiHeroDeadShot;
  static constexpr MvpAccoladeType kKillEaterEventType_Muerta_DeadShotsIntoTheCalling =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Muerta_DeadShotsIntoTheCalling;
  static inline bool MvpAccoladeType_IsValid(int value) {
    return CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_IsValid(value);
  }
  static constexpr MvpAccoladeType MvpAccoladeType_MIN =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_MvpAccoladeType_MIN;
  static constexpr MvpAccoladeType MvpAccoladeType_MAX =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_MvpAccoladeType_MAX;
  static constexpr int MvpAccoladeType_ARRAYSIZE =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_MvpAccoladeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MvpAccoladeType_descriptor() {
    return CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_descriptor();
  }
  template<typename T>
  static inline const std::string& MvpAccoladeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MvpAccoladeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MvpAccoladeType_Name.");
    return CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_Name(enum_t_value);
  }
  static inline bool MvpAccoladeType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MvpAccoladeType* value) {
    return CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDetailValueFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional float detail_value = 2;
  bool has_detail_value() const;
  private:
  bool _internal_has_detail_value() const;
  public:
  void clear_detail_value();
  float detail_value() const;
  void set_detail_value(float value);
  private:
  float _internal_detail_value() const;
  void _internal_set_detail_value(float value);
  public:

  // optional .CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType type = 1 [default = kills];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType type() const;
  void set_type(::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType value);
  private:
  ::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType _internal_type() const;
  void _internal_set_type(::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType value);
  public:

  // @@protoc_insertion_point(class_scope:CMvpData.MvpDatum.MvpAccolade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float detail_value_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMvpData_MvpDatum final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMvpData.MvpDatum) */ {
 public:
  inline CMvpData_MvpDatum() : CMvpData_MvpDatum(nullptr) {}
  ~CMvpData_MvpDatum() override;
  explicit PROTOBUF_CONSTEXPR CMvpData_MvpDatum(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMvpData_MvpDatum(const CMvpData_MvpDatum& from);
  CMvpData_MvpDatum(CMvpData_MvpDatum&& from) noexcept
    : CMvpData_MvpDatum() {
    *this = ::std::move(from);
  }

  inline CMvpData_MvpDatum& operator=(const CMvpData_MvpDatum& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMvpData_MvpDatum& operator=(CMvpData_MvpDatum&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMvpData_MvpDatum& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMvpData_MvpDatum* internal_default_instance() {
    return reinterpret_cast<const CMvpData_MvpDatum*>(
               &_CMvpData_MvpDatum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMvpData_MvpDatum& a, CMvpData_MvpDatum& b) {
    a.Swap(&b);
  }
  inline void Swap(CMvpData_MvpDatum* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMvpData_MvpDatum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMvpData_MvpDatum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMvpData_MvpDatum>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMvpData_MvpDatum& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMvpData_MvpDatum& from) {
    CMvpData_MvpDatum::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMvpData_MvpDatum* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMvpData.MvpDatum";
  }
  protected:
  explicit CMvpData_MvpDatum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMvpData_MvpDatum_MvpAccolade MvpAccolade;

  // accessors -------------------------------------------------------

  enum : int {
    kAccoladesFieldNumber = 2,
    kPlayerSlotFieldNumber = 1,
  };
  // repeated .CMvpData.MvpDatum.MvpAccolade accolades = 2;
  int accolades_size() const;
  private:
  int _internal_accolades_size() const;
  public:
  void clear_accolades();
  ::CMvpData_MvpDatum_MvpAccolade* mutable_accolades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMvpData_MvpDatum_MvpAccolade >*
      mutable_accolades();
  private:
  const ::CMvpData_MvpDatum_MvpAccolade& _internal_accolades(int index) const;
  ::CMvpData_MvpDatum_MvpAccolade* _internal_add_accolades();
  public:
  const ::CMvpData_MvpDatum_MvpAccolade& accolades(int index) const;
  ::CMvpData_MvpDatum_MvpAccolade* add_accolades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMvpData_MvpDatum_MvpAccolade >&
      accolades() const;

  // optional uint32 player_slot = 1;
  bool has_player_slot() const;
  private:
  bool _internal_has_player_slot() const;
  public:
  void clear_player_slot();
  uint32_t player_slot() const;
  void set_player_slot(uint32_t value);
  private:
  uint32_t _internal_player_slot() const;
  void _internal_set_player_slot(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMvpData.MvpDatum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMvpData_MvpDatum_MvpAccolade > accolades_;
    uint32_t player_slot_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMvpData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMvpData) */ {
 public:
  inline CMvpData() : CMvpData(nullptr) {}
  ~CMvpData() override;
  explicit PROTOBUF_CONSTEXPR CMvpData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMvpData(const CMvpData& from);
  CMvpData(CMvpData&& from) noexcept
    : CMvpData() {
    *this = ::std::move(from);
  }

  inline CMvpData& operator=(const CMvpData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMvpData& operator=(CMvpData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMvpData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMvpData* internal_default_instance() {
    return reinterpret_cast<const CMvpData*>(
               &_CMvpData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMvpData& a, CMvpData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMvpData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMvpData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMvpData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMvpData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMvpData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMvpData& from) {
    CMvpData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMvpData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMvpData";
  }
  protected:
  explicit CMvpData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMvpData_MvpDatum MvpDatum;

  // accessors -------------------------------------------------------

  enum : int {
    kMvpsFieldNumber = 1,
  };
  // repeated .CMvpData.MvpDatum mvps = 1;
  int mvps_size() const;
  private:
  int _internal_mvps_size() const;
  public:
  void clear_mvps();
  ::CMvpData_MvpDatum* mutable_mvps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMvpData_MvpDatum >*
      mutable_mvps();
  private:
  const ::CMvpData_MvpDatum& _internal_mvps(int index) const;
  ::CMvpData_MvpDatum* _internal_add_mvps();
  public:
  const ::CMvpData_MvpDatum& mvps(int index) const;
  ::CMvpData_MvpDatum* add_mvps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMvpData_MvpDatum >&
      mvps() const;

  // @@protoc_insertion_point(class_scope:CMvpData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMvpData_MvpDatum > mvps_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSODOTAPartyMember

// optional bool is_coach = 2;
inline bool CSODOTAPartyMember::_internal_has_is_coach() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_is_coach() const {
  return _internal_has_is_coach();
}
inline void CSODOTAPartyMember::clear_is_coach() {
  _impl_.is_coach_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CSODOTAPartyMember::_internal_is_coach() const {
  return _impl_.is_coach_;
}
inline bool CSODOTAPartyMember::is_coach() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.is_coach)
  return _internal_is_coach();
}
inline void CSODOTAPartyMember::_internal_set_is_coach(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.is_coach_ = value;
}
inline void CSODOTAPartyMember::set_is_coach(bool value) {
  _internal_set_is_coach(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.is_coach)
}

// repeated uint32 region_ping_codes = 4 [packed = true];
inline int CSODOTAPartyMember::_internal_region_ping_codes_size() const {
  return _impl_.region_ping_codes_.size();
}
inline int CSODOTAPartyMember::region_ping_codes_size() const {
  return _internal_region_ping_codes_size();
}
inline void CSODOTAPartyMember::clear_region_ping_codes() {
  _impl_.region_ping_codes_.Clear();
}
inline uint32_t CSODOTAPartyMember::_internal_region_ping_codes(int index) const {
  return _impl_.region_ping_codes_.Get(index);
}
inline uint32_t CSODOTAPartyMember::region_ping_codes(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.region_ping_codes)
  return _internal_region_ping_codes(index);
}
inline void CSODOTAPartyMember::set_region_ping_codes(int index, uint32_t value) {
  _impl_.region_ping_codes_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.region_ping_codes)
}
inline void CSODOTAPartyMember::_internal_add_region_ping_codes(uint32_t value) {
  _impl_.region_ping_codes_.Add(value);
}
inline void CSODOTAPartyMember::add_region_ping_codes(uint32_t value) {
  _internal_add_region_ping_codes(value);
  // @@protoc_insertion_point(field_add:CSODOTAPartyMember.region_ping_codes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTAPartyMember::_internal_region_ping_codes() const {
  return _impl_.region_ping_codes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTAPartyMember::region_ping_codes() const {
  // @@protoc_insertion_point(field_list:CSODOTAPartyMember.region_ping_codes)
  return _internal_region_ping_codes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTAPartyMember::_internal_mutable_region_ping_codes() {
  return &_impl_.region_ping_codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTAPartyMember::mutable_region_ping_codes() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAPartyMember.region_ping_codes)
  return _internal_mutable_region_ping_codes();
}

// repeated uint32 region_ping_times = 5 [packed = true];
inline int CSODOTAPartyMember::_internal_region_ping_times_size() const {
  return _impl_.region_ping_times_.size();
}
inline int CSODOTAPartyMember::region_ping_times_size() const {
  return _internal_region_ping_times_size();
}
inline void CSODOTAPartyMember::clear_region_ping_times() {
  _impl_.region_ping_times_.Clear();
}
inline uint32_t CSODOTAPartyMember::_internal_region_ping_times(int index) const {
  return _impl_.region_ping_times_.Get(index);
}
inline uint32_t CSODOTAPartyMember::region_ping_times(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.region_ping_times)
  return _internal_region_ping_times(index);
}
inline void CSODOTAPartyMember::set_region_ping_times(int index, uint32_t value) {
  _impl_.region_ping_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.region_ping_times)
}
inline void CSODOTAPartyMember::_internal_add_region_ping_times(uint32_t value) {
  _impl_.region_ping_times_.Add(value);
}
inline void CSODOTAPartyMember::add_region_ping_times(uint32_t value) {
  _internal_add_region_ping_times(value);
  // @@protoc_insertion_point(field_add:CSODOTAPartyMember.region_ping_times)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTAPartyMember::_internal_region_ping_times() const {
  return _impl_.region_ping_times_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTAPartyMember::region_ping_times() const {
  // @@protoc_insertion_point(field_list:CSODOTAPartyMember.region_ping_times)
  return _internal_region_ping_times();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTAPartyMember::_internal_mutable_region_ping_times() {
  return &_impl_.region_ping_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTAPartyMember::mutable_region_ping_times() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAPartyMember.region_ping_times)
  return _internal_mutable_region_ping_times();
}

// optional uint32 region_ping_failed_bitmask = 6;
inline bool CSODOTAPartyMember::_internal_has_region_ping_failed_bitmask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_region_ping_failed_bitmask() const {
  return _internal_has_region_ping_failed_bitmask();
}
inline void CSODOTAPartyMember::clear_region_ping_failed_bitmask() {
  _impl_.region_ping_failed_bitmask_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CSODOTAPartyMember::_internal_region_ping_failed_bitmask() const {
  return _impl_.region_ping_failed_bitmask_;
}
inline uint32_t CSODOTAPartyMember::region_ping_failed_bitmask() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.region_ping_failed_bitmask)
  return _internal_region_ping_failed_bitmask();
}
inline void CSODOTAPartyMember::_internal_set_region_ping_failed_bitmask(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.region_ping_failed_bitmask_ = value;
}
inline void CSODOTAPartyMember::set_region_ping_failed_bitmask(uint32_t value) {
  _internal_set_region_ping_failed_bitmask(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.region_ping_failed_bitmask)
}

// optional bool is_plus_subscriber = 10;
inline bool CSODOTAPartyMember::_internal_has_is_plus_subscriber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_is_plus_subscriber() const {
  return _internal_has_is_plus_subscriber();
}
inline void CSODOTAPartyMember::clear_is_plus_subscriber() {
  _impl_.is_plus_subscriber_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CSODOTAPartyMember::_internal_is_plus_subscriber() const {
  return _impl_.is_plus_subscriber_;
}
inline bool CSODOTAPartyMember::is_plus_subscriber() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.is_plus_subscriber)
  return _internal_is_plus_subscriber();
}
inline void CSODOTAPartyMember::_internal_set_is_plus_subscriber(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.is_plus_subscriber_ = value;
}
inline void CSODOTAPartyMember::set_is_plus_subscriber(bool value) {
  _internal_set_is_plus_subscriber(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.is_plus_subscriber)
}

// optional uint32 tourney_skill_level = 7;
inline bool CSODOTAPartyMember::_internal_has_tourney_skill_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_tourney_skill_level() const {
  return _internal_has_tourney_skill_level();
}
inline void CSODOTAPartyMember::clear_tourney_skill_level() {
  _impl_.tourney_skill_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CSODOTAPartyMember::_internal_tourney_skill_level() const {
  return _impl_.tourney_skill_level_;
}
inline uint32_t CSODOTAPartyMember::tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.tourney_skill_level)
  return _internal_tourney_skill_level();
}
inline void CSODOTAPartyMember::_internal_set_tourney_skill_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tourney_skill_level_ = value;
}
inline void CSODOTAPartyMember::set_tourney_skill_level(uint32_t value) {
  _internal_set_tourney_skill_level(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.tourney_skill_level)
}

// optional uint32 tourney_buyin = 8;
inline bool CSODOTAPartyMember::_internal_has_tourney_buyin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_tourney_buyin() const {
  return _internal_has_tourney_buyin();
}
inline void CSODOTAPartyMember::clear_tourney_buyin() {
  _impl_.tourney_buyin_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CSODOTAPartyMember::_internal_tourney_buyin() const {
  return _impl_.tourney_buyin_;
}
inline uint32_t CSODOTAPartyMember::tourney_buyin() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.tourney_buyin)
  return _internal_tourney_buyin();
}
inline void CSODOTAPartyMember::_internal_set_tourney_buyin(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.tourney_buyin_ = value;
}
inline void CSODOTAPartyMember::set_tourney_buyin(uint32_t value) {
  _internal_set_tourney_buyin(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.tourney_buyin)
}

// optional uint32 tourney_prevent_until = 9;
inline bool CSODOTAPartyMember::_internal_has_tourney_prevent_until() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_tourney_prevent_until() const {
  return _internal_has_tourney_prevent_until();
}
inline void CSODOTAPartyMember::clear_tourney_prevent_until() {
  _impl_.tourney_prevent_until_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CSODOTAPartyMember::_internal_tourney_prevent_until() const {
  return _impl_.tourney_prevent_until_;
}
inline uint32_t CSODOTAPartyMember::tourney_prevent_until() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.tourney_prevent_until)
  return _internal_tourney_prevent_until();
}
inline void CSODOTAPartyMember::_internal_set_tourney_prevent_until(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.tourney_prevent_until_ = value;
}
inline void CSODOTAPartyMember::set_tourney_prevent_until(uint32_t value) {
  _internal_set_tourney_prevent_until(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.tourney_prevent_until)
}

// optional bool mm_data_valid = 13;
inline bool CSODOTAPartyMember::_internal_has_mm_data_valid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_mm_data_valid() const {
  return _internal_has_mm_data_valid();
}
inline void CSODOTAPartyMember::clear_mm_data_valid() {
  _impl_.mm_data_valid_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool CSODOTAPartyMember::_internal_mm_data_valid() const {
  return _impl_.mm_data_valid_;
}
inline bool CSODOTAPartyMember::mm_data_valid() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.mm_data_valid)
  return _internal_mm_data_valid();
}
inline void CSODOTAPartyMember::_internal_set_mm_data_valid(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.mm_data_valid_ = value;
}
inline void CSODOTAPartyMember::set_mm_data_valid(bool value) {
  _internal_set_mm_data_valid(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.mm_data_valid)
}

// optional uint32 lane_selection_flags = 11;
inline bool CSODOTAPartyMember::_internal_has_lane_selection_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_lane_selection_flags() const {
  return _internal_has_lane_selection_flags();
}
inline void CSODOTAPartyMember::clear_lane_selection_flags() {
  _impl_.lane_selection_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CSODOTAPartyMember::_internal_lane_selection_flags() const {
  return _impl_.lane_selection_flags_;
}
inline uint32_t CSODOTAPartyMember::lane_selection_flags() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.lane_selection_flags)
  return _internal_lane_selection_flags();
}
inline void CSODOTAPartyMember::_internal_set_lane_selection_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.lane_selection_flags_ = value;
}
inline void CSODOTAPartyMember::set_lane_selection_flags(uint32_t value) {
  _internal_set_lane_selection_flags(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.lane_selection_flags)
}

// optional bool high_priority_disabled = 14;
inline bool CSODOTAPartyMember::_internal_has_high_priority_disabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_high_priority_disabled() const {
  return _internal_has_high_priority_disabled();
}
inline void CSODOTAPartyMember::clear_high_priority_disabled() {
  _impl_.high_priority_disabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CSODOTAPartyMember::_internal_high_priority_disabled() const {
  return _impl_.high_priority_disabled_;
}
inline bool CSODOTAPartyMember::high_priority_disabled() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.high_priority_disabled)
  return _internal_high_priority_disabled();
}
inline void CSODOTAPartyMember::_internal_set_high_priority_disabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.high_priority_disabled_ = value;
}
inline void CSODOTAPartyMember::set_high_priority_disabled(bool value) {
  _internal_set_high_priority_disabled(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.high_priority_disabled)
}

// optional bool has_hp_resource = 15;
inline bool CSODOTAPartyMember::_internal_has_has_hp_resource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_has_hp_resource() const {
  return _internal_has_has_hp_resource();
}
inline void CSODOTAPartyMember::clear_has_hp_resource() {
  _impl_.has_hp_resource_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool CSODOTAPartyMember::_internal_has_hp_resource() const {
  return _impl_.has_hp_resource_;
}
inline bool CSODOTAPartyMember::has_hp_resource() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.has_hp_resource)
  return _internal_has_hp_resource();
}
inline void CSODOTAPartyMember::_internal_set_has_hp_resource(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.has_hp_resource_ = value;
}
inline void CSODOTAPartyMember::set_has_hp_resource(bool value) {
  _internal_set_has_hp_resource(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.has_hp_resource)
}

// optional bool joined_from_partyfinder = 12;
inline bool CSODOTAPartyMember::_internal_has_joined_from_partyfinder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_joined_from_partyfinder() const {
  return _internal_has_joined_from_partyfinder();
}
inline void CSODOTAPartyMember::clear_joined_from_partyfinder() {
  _impl_.joined_from_partyfinder_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool CSODOTAPartyMember::_internal_joined_from_partyfinder() const {
  return _impl_.joined_from_partyfinder_;
}
inline bool CSODOTAPartyMember::joined_from_partyfinder() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.joined_from_partyfinder)
  return _internal_joined_from_partyfinder();
}
inline void CSODOTAPartyMember::_internal_set_joined_from_partyfinder(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.joined_from_partyfinder_ = value;
}
inline void CSODOTAPartyMember::set_joined_from_partyfinder(bool value) {
  _internal_set_joined_from_partyfinder(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.joined_from_partyfinder)
}

// optional bool is_steam_china = 16;
inline bool CSODOTAPartyMember::_internal_has_is_steam_china() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_is_steam_china() const {
  return _internal_has_is_steam_china();
}
inline void CSODOTAPartyMember::clear_is_steam_china() {
  _impl_.is_steam_china_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool CSODOTAPartyMember::_internal_is_steam_china() const {
  return _impl_.is_steam_china_;
}
inline bool CSODOTAPartyMember::is_steam_china() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.is_steam_china)
  return _internal_is_steam_china();
}
inline void CSODOTAPartyMember::_internal_set_is_steam_china(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.is_steam_china_ = value;
}
inline void CSODOTAPartyMember::set_is_steam_china(bool value) {
  _internal_set_is_steam_china(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.is_steam_china)
}

// -------------------------------------------------------------------

// CSODOTAParty

// optional uint64 party_id = 1 [(.key_field) = true];
inline bool CSODOTAParty::_internal_has_party_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTAParty::has_party_id() const {
  return _internal_has_party_id();
}
inline void CSODOTAParty::clear_party_id() {
  _impl_.party_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CSODOTAParty::_internal_party_id() const {
  return _impl_.party_id_;
}
inline uint64_t CSODOTAParty::party_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.party_id)
  return _internal_party_id();
}
inline void CSODOTAParty::_internal_set_party_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.party_id_ = value;
}
inline void CSODOTAParty::set_party_id(uint64_t value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.party_id)
}

// optional fixed64 leader_id = 2;
inline bool CSODOTAParty::_internal_has_leader_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSODOTAParty::has_leader_id() const {
  return _internal_has_leader_id();
}
inline void CSODOTAParty::clear_leader_id() {
  _impl_.leader_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CSODOTAParty::_internal_leader_id() const {
  return _impl_.leader_id_;
}
inline uint64_t CSODOTAParty::leader_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.leader_id)
  return _internal_leader_id();
}
inline void CSODOTAParty::_internal_set_leader_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.leader_id_ = value;
}
inline void CSODOTAParty::set_leader_id(uint64_t value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.leader_id)
}

// repeated fixed64 member_ids = 3;
inline int CSODOTAParty::_internal_member_ids_size() const {
  return _impl_.member_ids_.size();
}
inline int CSODOTAParty::member_ids_size() const {
  return _internal_member_ids_size();
}
inline void CSODOTAParty::clear_member_ids() {
  _impl_.member_ids_.Clear();
}
inline uint64_t CSODOTAParty::_internal_member_ids(int index) const {
  return _impl_.member_ids_.Get(index);
}
inline uint64_t CSODOTAParty::member_ids(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.member_ids)
  return _internal_member_ids(index);
}
inline void CSODOTAParty::set_member_ids(int index, uint64_t value) {
  _impl_.member_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.member_ids)
}
inline void CSODOTAParty::_internal_add_member_ids(uint64_t value) {
  _impl_.member_ids_.Add(value);
}
inline void CSODOTAParty::add_member_ids(uint64_t value) {
  _internal_add_member_ids(value);
  // @@protoc_insertion_point(field_add:CSODOTAParty.member_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CSODOTAParty::_internal_member_ids() const {
  return _impl_.member_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CSODOTAParty::member_ids() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.member_ids)
  return _internal_member_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CSODOTAParty::_internal_mutable_member_ids() {
  return &_impl_.member_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CSODOTAParty::mutable_member_ids() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.member_ids)
  return _internal_mutable_member_ids();
}

// optional uint32 game_modes = 4;
inline bool CSODOTAParty::_internal_has_game_modes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSODOTAParty::has_game_modes() const {
  return _internal_has_game_modes();
}
inline void CSODOTAParty::clear_game_modes() {
  _impl_.game_modes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CSODOTAParty::_internal_game_modes() const {
  return _impl_.game_modes_;
}
inline uint32_t CSODOTAParty::game_modes() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.game_modes)
  return _internal_game_modes();
}
inline void CSODOTAParty::_internal_set_game_modes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.game_modes_ = value;
}
inline void CSODOTAParty::set_game_modes(uint32_t value) {
  _internal_set_game_modes(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.game_modes)
}

// optional .CSODOTAParty.State state = 6 [default = UI];
inline bool CSODOTAParty::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSODOTAParty::has_state() const {
  return _internal_has_state();
}
inline void CSODOTAParty::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::CSODOTAParty_State CSODOTAParty::_internal_state() const {
  return static_cast< ::CSODOTAParty_State >(_impl_.state_);
}
inline ::CSODOTAParty_State CSODOTAParty::state() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.state)
  return _internal_state();
}
inline void CSODOTAParty::_internal_set_state(::CSODOTAParty_State value) {
  assert(::CSODOTAParty_State_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.state_ = value;
}
inline void CSODOTAParty::set_state(::CSODOTAParty_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.state)
}

// optional uint32 effective_started_matchmaking_time = 7;
inline bool CSODOTAParty::_internal_has_effective_started_matchmaking_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSODOTAParty::has_effective_started_matchmaking_time() const {
  return _internal_has_effective_started_matchmaking_time();
}
inline void CSODOTAParty::clear_effective_started_matchmaking_time() {
  _impl_.effective_started_matchmaking_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CSODOTAParty::_internal_effective_started_matchmaking_time() const {
  return _impl_.effective_started_matchmaking_time_;
}
inline uint32_t CSODOTAParty::effective_started_matchmaking_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.effective_started_matchmaking_time)
  return _internal_effective_started_matchmaking_time();
}
inline void CSODOTAParty::_internal_set_effective_started_matchmaking_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.effective_started_matchmaking_time_ = value;
}
inline void CSODOTAParty::set_effective_started_matchmaking_time(uint32_t value) {
  _internal_set_effective_started_matchmaking_time(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.effective_started_matchmaking_time)
}

// optional uint32 raw_started_matchmaking_time = 32;
inline bool CSODOTAParty::_internal_has_raw_started_matchmaking_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_raw_started_matchmaking_time() const {
  return _internal_has_raw_started_matchmaking_time();
}
inline void CSODOTAParty::clear_raw_started_matchmaking_time() {
  _impl_.raw_started_matchmaking_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CSODOTAParty::_internal_raw_started_matchmaking_time() const {
  return _impl_.raw_started_matchmaking_time_;
}
inline uint32_t CSODOTAParty::raw_started_matchmaking_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.raw_started_matchmaking_time)
  return _internal_raw_started_matchmaking_time();
}
inline void CSODOTAParty::_internal_set_raw_started_matchmaking_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.raw_started_matchmaking_time_ = value;
}
inline void CSODOTAParty::set_raw_started_matchmaking_time(uint32_t value) {
  _internal_set_raw_started_matchmaking_time(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.raw_started_matchmaking_time)
}

// optional uint32 attempt_start_time = 33;
inline bool CSODOTAParty::_internal_has_attempt_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_attempt_start_time() const {
  return _internal_has_attempt_start_time();
}
inline void CSODOTAParty::clear_attempt_start_time() {
  _impl_.attempt_start_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CSODOTAParty::_internal_attempt_start_time() const {
  return _impl_.attempt_start_time_;
}
inline uint32_t CSODOTAParty::attempt_start_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.attempt_start_time)
  return _internal_attempt_start_time();
}
inline void CSODOTAParty::_internal_set_attempt_start_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.attempt_start_time_ = value;
}
inline void CSODOTAParty::set_attempt_start_time(uint32_t value) {
  _internal_set_attempt_start_time(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.attempt_start_time)
}

// optional uint32 attempt_num = 34;
inline bool CSODOTAParty::_internal_has_attempt_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_attempt_num() const {
  return _internal_has_attempt_num();
}
inline void CSODOTAParty::clear_attempt_num() {
  _impl_.attempt_num_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CSODOTAParty::_internal_attempt_num() const {
  return _impl_.attempt_num_;
}
inline uint32_t CSODOTAParty::attempt_num() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.attempt_num)
  return _internal_attempt_num();
}
inline void CSODOTAParty::_internal_set_attempt_num(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.attempt_num_ = value;
}
inline void CSODOTAParty::set_attempt_num(uint32_t value) {
  _internal_set_attempt_num(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.attempt_num)
}

// optional uint32 matchgroups = 11;
inline bool CSODOTAParty::_internal_has_matchgroups() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSODOTAParty::has_matchgroups() const {
  return _internal_has_matchgroups();
}
inline void CSODOTAParty::clear_matchgroups() {
  _impl_.matchgroups_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CSODOTAParty::_internal_matchgroups() const {
  return _impl_.matchgroups_;
}
inline uint32_t CSODOTAParty::matchgroups() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.matchgroups)
  return _internal_matchgroups();
}
inline void CSODOTAParty::_internal_set_matchgroups(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.matchgroups_ = value;
}
inline void CSODOTAParty::set_matchgroups(uint32_t value) {
  _internal_set_matchgroups(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.matchgroups)
}

// optional uint32 low_priority_account_id = 19;
inline bool CSODOTAParty::_internal_has_low_priority_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSODOTAParty::has_low_priority_account_id() const {
  return _internal_has_low_priority_account_id();
}
inline void CSODOTAParty::clear_low_priority_account_id() {
  _impl_.low_priority_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CSODOTAParty::_internal_low_priority_account_id() const {
  return _impl_.low_priority_account_id_;
}
inline uint32_t CSODOTAParty::low_priority_account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.low_priority_account_id)
  return _internal_low_priority_account_id();
}
inline void CSODOTAParty::_internal_set_low_priority_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.low_priority_account_id_ = value;
}
inline void CSODOTAParty::set_low_priority_account_id(uint32_t value) {
  _internal_set_low_priority_account_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.low_priority_account_id)
}

// optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
inline bool CSODOTAParty::_internal_has_match_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSODOTAParty::has_match_type() const {
  return _internal_has_match_type();
}
inline void CSODOTAParty::clear_match_type() {
  _impl_.match_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::MatchType CSODOTAParty::_internal_match_type() const {
  return static_cast< ::MatchType >(_impl_.match_type_);
}
inline ::MatchType CSODOTAParty::match_type() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.match_type)
  return _internal_match_type();
}
inline void CSODOTAParty::_internal_set_match_type(::MatchType value) {
  assert(::MatchType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.match_type_ = value;
}
inline void CSODOTAParty::set_match_type(::MatchType value) {
  _internal_set_match_type(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.match_type)
}

// optional uint32 team_id = 23;
inline bool CSODOTAParty::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSODOTAParty::has_team_id() const {
  return _internal_has_team_id();
}
inline void CSODOTAParty::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CSODOTAParty::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CSODOTAParty::team_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.team_id)
  return _internal_team_id();
}
inline void CSODOTAParty::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.team_id_ = value;
}
inline void CSODOTAParty::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.team_id)
}

// optional string team_name = 51;
inline bool CSODOTAParty::_internal_has_team_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTAParty::has_team_name() const {
  return _internal_has_team_name();
}
inline void CSODOTAParty::clear_team_name() {
  _impl_.team_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSODOTAParty::team_name() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.team_name)
  return _internal_team_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSODOTAParty::set_team_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.team_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSODOTAParty.team_name)
}
inline std::string* CSODOTAParty::mutable_team_name() {
  std::string* _s = _internal_mutable_team_name();
  // @@protoc_insertion_point(field_mutable:CSODOTAParty.team_name)
  return _s;
}
inline const std::string& CSODOTAParty::_internal_team_name() const {
  return _impl_.team_name_.Get();
}
inline void CSODOTAParty::_internal_set_team_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CSODOTAParty::_internal_mutable_team_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.team_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CSODOTAParty::release_team_name() {
  // @@protoc_insertion_point(field_release:CSODOTAParty.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.team_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSODOTAParty::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.team_name_.SetAllocated(team_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSODOTAParty.team_name)
}

// optional uint64 team_ui_logo = 52;
inline bool CSODOTAParty::_internal_has_team_ui_logo() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_team_ui_logo() const {
  return _internal_has_team_ui_logo();
}
inline void CSODOTAParty::clear_team_ui_logo() {
  _impl_.team_ui_logo_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint64_t CSODOTAParty::_internal_team_ui_logo() const {
  return _impl_.team_ui_logo_;
}
inline uint64_t CSODOTAParty::team_ui_logo() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.team_ui_logo)
  return _internal_team_ui_logo();
}
inline void CSODOTAParty::_internal_set_team_ui_logo(uint64_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.team_ui_logo_ = value;
}
inline void CSODOTAParty::set_team_ui_logo(uint64_t value) {
  _internal_set_team_ui_logo(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.team_ui_logo)
}

// optional uint64 team_base_logo = 53;
inline bool CSODOTAParty::_internal_has_team_base_logo() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_team_base_logo() const {
  return _internal_has_team_base_logo();
}
inline void CSODOTAParty::clear_team_base_logo() {
  _impl_.team_base_logo_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline uint64_t CSODOTAParty::_internal_team_base_logo() const {
  return _impl_.team_base_logo_;
}
inline uint64_t CSODOTAParty::team_base_logo() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.team_base_logo)
  return _internal_team_base_logo();
}
inline void CSODOTAParty::_internal_set_team_base_logo(uint64_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.team_base_logo_ = value;
}
inline void CSODOTAParty::set_team_base_logo(uint64_t value) {
  _internal_set_team_base_logo(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.team_base_logo)
}

// optional uint32 match_disabled_until_date = 24;
inline bool CSODOTAParty::_internal_has_match_disabled_until_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSODOTAParty::has_match_disabled_until_date() const {
  return _internal_has_match_disabled_until_date();
}
inline void CSODOTAParty::clear_match_disabled_until_date() {
  _impl_.match_disabled_until_date_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CSODOTAParty::_internal_match_disabled_until_date() const {
  return _impl_.match_disabled_until_date_;
}
inline uint32_t CSODOTAParty::match_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.match_disabled_until_date)
  return _internal_match_disabled_until_date();
}
inline void CSODOTAParty::_internal_set_match_disabled_until_date(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.match_disabled_until_date_ = value;
}
inline void CSODOTAParty::set_match_disabled_until_date(uint32_t value) {
  _internal_set_match_disabled_until_date(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.match_disabled_until_date)
}

// optional uint32 match_disabled_account_id = 25;
inline bool CSODOTAParty::_internal_has_match_disabled_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_match_disabled_account_id() const {
  return _internal_has_match_disabled_account_id();
}
inline void CSODOTAParty::clear_match_disabled_account_id() {
  _impl_.match_disabled_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CSODOTAParty::_internal_match_disabled_account_id() const {
  return _impl_.match_disabled_account_id_;
}
inline uint32_t CSODOTAParty::match_disabled_account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.match_disabled_account_id)
  return _internal_match_disabled_account_id();
}
inline void CSODOTAParty::_internal_set_match_disabled_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.match_disabled_account_id_ = value;
}
inline void CSODOTAParty::set_match_disabled_account_id(uint32_t value) {
  _internal_set_match_disabled_account_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.match_disabled_account_id)
}

// optional uint32 matchmaking_max_range_minutes = 26;
inline bool CSODOTAParty::_internal_has_matchmaking_max_range_minutes() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_matchmaking_max_range_minutes() const {
  return _internal_has_matchmaking_max_range_minutes();
}
inline void CSODOTAParty::clear_matchmaking_max_range_minutes() {
  _impl_.matchmaking_max_range_minutes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CSODOTAParty::_internal_matchmaking_max_range_minutes() const {
  return _impl_.matchmaking_max_range_minutes_;
}
inline uint32_t CSODOTAParty::matchmaking_max_range_minutes() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.matchmaking_max_range_minutes)
  return _internal_matchmaking_max_range_minutes();
}
inline void CSODOTAParty::_internal_set_matchmaking_max_range_minutes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.matchmaking_max_range_minutes_ = value;
}
inline void CSODOTAParty::set_matchmaking_max_range_minutes(uint32_t value) {
  _internal_set_matchmaking_max_range_minutes(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.matchmaking_max_range_minutes)
}

// optional uint32 matchlanguages = 27;
inline bool CSODOTAParty::_internal_has_matchlanguages() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_matchlanguages() const {
  return _internal_has_matchlanguages();
}
inline void CSODOTAParty::clear_matchlanguages() {
  _impl_.matchlanguages_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CSODOTAParty::_internal_matchlanguages() const {
  return _impl_.matchlanguages_;
}
inline uint32_t CSODOTAParty::matchlanguages() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.matchlanguages)
  return _internal_matchlanguages();
}
inline void CSODOTAParty::_internal_set_matchlanguages(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.matchlanguages_ = value;
}
inline void CSODOTAParty::set_matchlanguages(uint32_t value) {
  _internal_set_matchlanguages(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.matchlanguages)
}

// repeated .CSODOTAPartyMember members = 29;
inline int CSODOTAParty::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int CSODOTAParty::members_size() const {
  return _internal_members_size();
}
inline void CSODOTAParty::clear_members() {
  _impl_.members_.Clear();
}
inline ::CSODOTAPartyMember* CSODOTAParty::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAParty.members)
  return _impl_.members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyMember >*
CSODOTAParty::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.members)
  return &_impl_.members_;
}
inline const ::CSODOTAPartyMember& CSODOTAParty::_internal_members(int index) const {
  return _impl_.members_.Get(index);
}
inline const ::CSODOTAPartyMember& CSODOTAParty::members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.members)
  return _internal_members(index);
}
inline ::CSODOTAPartyMember* CSODOTAParty::_internal_add_members() {
  return _impl_.members_.Add();
}
inline ::CSODOTAPartyMember* CSODOTAParty::add_members() {
  ::CSODOTAPartyMember* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:CSODOTAParty.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyMember >&
CSODOTAParty::members() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.members)
  return _impl_.members_;
}

// optional uint32 low_priority_games_remaining = 35;
inline bool CSODOTAParty::_internal_has_low_priority_games_remaining() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_low_priority_games_remaining() const {
  return _internal_has_low_priority_games_remaining();
}
inline void CSODOTAParty::clear_low_priority_games_remaining() {
  _impl_.low_priority_games_remaining_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint32_t CSODOTAParty::_internal_low_priority_games_remaining() const {
  return _impl_.low_priority_games_remaining_;
}
inline uint32_t CSODOTAParty::low_priority_games_remaining() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.low_priority_games_remaining)
  return _internal_low_priority_games_remaining();
}
inline void CSODOTAParty::_internal_set_low_priority_games_remaining(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.low_priority_games_remaining_ = value;
}
inline void CSODOTAParty::set_low_priority_games_remaining(uint32_t value) {
  _internal_set_low_priority_games_remaining(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.low_priority_games_remaining)
}

// optional bool open_for_join_requests = 40;
inline bool CSODOTAParty::_internal_has_open_for_join_requests() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTAParty::has_open_for_join_requests() const {
  return _internal_has_open_for_join_requests();
}
inline void CSODOTAParty::clear_open_for_join_requests() {
  _impl_.open_for_join_requests_ = false;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline bool CSODOTAParty::_internal_open_for_join_requests() const {
  return _impl_.open_for_join_requests_;
}
inline bool CSODOTAParty::open_for_join_requests() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.open_for_join_requests)
  return _internal_open_for_join_requests();
}
inline void CSODOTAParty::_internal_set_open_for_join_requests(bool value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.open_for_join_requests_ = value;
}
inline void CSODOTAParty::set_open_for_join_requests(bool value) {
  _internal_set_open_for_join_requests(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.open_for_join_requests)
}

// repeated .CSODOTAPartyInvite sent_invites = 41;
inline int CSODOTAParty::_internal_sent_invites_size() const {
  return _impl_.sent_invites_.size();
}
inline int CSODOTAParty::sent_invites_size() const {
  return _internal_sent_invites_size();
}
inline void CSODOTAParty::clear_sent_invites() {
  _impl_.sent_invites_.Clear();
}
inline ::CSODOTAPartyInvite* CSODOTAParty::mutable_sent_invites(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAParty.sent_invites)
  return _impl_.sent_invites_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite >*
CSODOTAParty::mutable_sent_invites() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.sent_invites)
  return &_impl_.sent_invites_;
}
inline const ::CSODOTAPartyInvite& CSODOTAParty::_internal_sent_invites(int index) const {
  return _impl_.sent_invites_.Get(index);
}
inline const ::CSODOTAPartyInvite& CSODOTAParty::sent_invites(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.sent_invites)
  return _internal_sent_invites(index);
}
inline ::CSODOTAPartyInvite* CSODOTAParty::_internal_add_sent_invites() {
  return _impl_.sent_invites_.Add();
}
inline ::CSODOTAPartyInvite* CSODOTAParty::add_sent_invites() {
  ::CSODOTAPartyInvite* _add = _internal_add_sent_invites();
  // @@protoc_insertion_point(field_add:CSODOTAParty.sent_invites)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite >&
CSODOTAParty::sent_invites() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.sent_invites)
  return _impl_.sent_invites_;
}

// repeated .CSODOTAPartyInvite recv_invites = 42;
inline int CSODOTAParty::_internal_recv_invites_size() const {
  return _impl_.recv_invites_.size();
}
inline int CSODOTAParty::recv_invites_size() const {
  return _internal_recv_invites_size();
}
inline void CSODOTAParty::clear_recv_invites() {
  _impl_.recv_invites_.Clear();
}
inline ::CSODOTAPartyInvite* CSODOTAParty::mutable_recv_invites(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAParty.recv_invites)
  return _impl_.recv_invites_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite >*
CSODOTAParty::mutable_recv_invites() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.recv_invites)
  return &_impl_.recv_invites_;
}
inline const ::CSODOTAPartyInvite& CSODOTAParty::_internal_recv_invites(int index) const {
  return _impl_.recv_invites_.Get(index);
}
inline const ::CSODOTAPartyInvite& CSODOTAParty::recv_invites(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.recv_invites)
  return _internal_recv_invites(index);
}
inline ::CSODOTAPartyInvite* CSODOTAParty::_internal_add_recv_invites() {
  return _impl_.recv_invites_.Add();
}
inline ::CSODOTAPartyInvite* CSODOTAParty::add_recv_invites() {
  ::CSODOTAPartyInvite* _add = _internal_add_recv_invites();
  // @@protoc_insertion_point(field_add:CSODOTAParty.recv_invites)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite >&
CSODOTAParty::recv_invites() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.recv_invites)
  return _impl_.recv_invites_;
}

// optional uint32 account_flags = 43;
inline bool CSODOTAParty::_internal_has_account_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_account_flags() const {
  return _internal_has_account_flags();
}
inline void CSODOTAParty::clear_account_flags() {
  _impl_.account_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CSODOTAParty::_internal_account_flags() const {
  return _impl_.account_flags_;
}
inline uint32_t CSODOTAParty::account_flags() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.account_flags)
  return _internal_account_flags();
}
inline void CSODOTAParty::_internal_set_account_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.account_flags_ = value;
}
inline void CSODOTAParty::set_account_flags(uint32_t value) {
  _internal_set_account_flags(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.account_flags)
}

// optional uint32 region_select_flags = 44;
inline bool CSODOTAParty::_internal_has_region_select_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_region_select_flags() const {
  return _internal_has_region_select_flags();
}
inline void CSODOTAParty::clear_region_select_flags() {
  _impl_.region_select_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CSODOTAParty::_internal_region_select_flags() const {
  return _impl_.region_select_flags_;
}
inline uint32_t CSODOTAParty::region_select_flags() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.region_select_flags)
  return _internal_region_select_flags();
}
inline void CSODOTAParty::_internal_set_region_select_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.region_select_flags_ = value;
}
inline void CSODOTAParty::set_region_select_flags(uint32_t value) {
  _internal_set_region_select_flags(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.region_select_flags)
}

// optional uint32 exclusive_tournament_id = 45;
inline bool CSODOTAParty::_internal_has_exclusive_tournament_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_exclusive_tournament_id() const {
  return _internal_has_exclusive_tournament_id();
}
inline void CSODOTAParty::clear_exclusive_tournament_id() {
  _impl_.exclusive_tournament_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline uint32_t CSODOTAParty::_internal_exclusive_tournament_id() const {
  return _impl_.exclusive_tournament_id_;
}
inline uint32_t CSODOTAParty::exclusive_tournament_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.exclusive_tournament_id)
  return _internal_exclusive_tournament_id();
}
inline void CSODOTAParty::_internal_set_exclusive_tournament_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.exclusive_tournament_id_ = value;
}
inline void CSODOTAParty::set_exclusive_tournament_id(uint32_t value) {
  _internal_set_exclusive_tournament_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.exclusive_tournament_id)
}

// optional uint32 tourney_division_id = 47;
inline bool CSODOTAParty::_internal_has_tourney_division_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_tourney_division_id() const {
  return _internal_has_tourney_division_id();
}
inline void CSODOTAParty::clear_tourney_division_id() {
  _impl_.tourney_division_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline uint32_t CSODOTAParty::_internal_tourney_division_id() const {
  return _impl_.tourney_division_id_;
}
inline uint32_t CSODOTAParty::tourney_division_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.tourney_division_id)
  return _internal_tourney_division_id();
}
inline void CSODOTAParty::_internal_set_tourney_division_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.tourney_division_id_ = value;
}
inline void CSODOTAParty::set_tourney_division_id(uint32_t value) {
  _internal_set_tourney_division_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.tourney_division_id)
}

// optional uint32 tourney_schedule_time = 48;
inline bool CSODOTAParty::_internal_has_tourney_schedule_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_tourney_schedule_time() const {
  return _internal_has_tourney_schedule_time();
}
inline void CSODOTAParty::clear_tourney_schedule_time() {
  _impl_.tourney_schedule_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline uint32_t CSODOTAParty::_internal_tourney_schedule_time() const {
  return _impl_.tourney_schedule_time_;
}
inline uint32_t CSODOTAParty::tourney_schedule_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.tourney_schedule_time)
  return _internal_tourney_schedule_time();
}
inline void CSODOTAParty::_internal_set_tourney_schedule_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.tourney_schedule_time_ = value;
}
inline void CSODOTAParty::set_tourney_schedule_time(uint32_t value) {
  _internal_set_tourney_schedule_time(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.tourney_schedule_time)
}

// optional uint32 tourney_skill_level = 49;
inline bool CSODOTAParty::_internal_has_tourney_skill_level() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_tourney_skill_level() const {
  return _internal_has_tourney_skill_level();
}
inline void CSODOTAParty::clear_tourney_skill_level() {
  _impl_.tourney_skill_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline uint32_t CSODOTAParty::_internal_tourney_skill_level() const {
  return _impl_.tourney_skill_level_;
}
inline uint32_t CSODOTAParty::tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.tourney_skill_level)
  return _internal_tourney_skill_level();
}
inline void CSODOTAParty::_internal_set_tourney_skill_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.tourney_skill_level_ = value;
}
inline void CSODOTAParty::set_tourney_skill_level(uint32_t value) {
  _internal_set_tourney_skill_level(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.tourney_skill_level)
}

// optional uint32 tourney_bracket_round = 50;
inline bool CSODOTAParty::_internal_has_tourney_bracket_round() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_tourney_bracket_round() const {
  return _internal_has_tourney_bracket_round();
}
inline void CSODOTAParty::clear_tourney_bracket_round() {
  _impl_.tourney_bracket_round_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint32_t CSODOTAParty::_internal_tourney_bracket_round() const {
  return _impl_.tourney_bracket_round_;
}
inline uint32_t CSODOTAParty::tourney_bracket_round() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.tourney_bracket_round)
  return _internal_tourney_bracket_round();
}
inline void CSODOTAParty::_internal_set_tourney_bracket_round(uint32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.tourney_bracket_round_ = value;
}
inline void CSODOTAParty::set_tourney_bracket_round(uint32_t value) {
  _internal_set_tourney_bracket_round(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.tourney_bracket_round)
}

// optional uint32 tourney_queue_deadline_time = 54;
inline bool CSODOTAParty::_internal_has_tourney_queue_deadline_time() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_tourney_queue_deadline_time() const {
  return _internal_has_tourney_queue_deadline_time();
}
inline void CSODOTAParty::clear_tourney_queue_deadline_time() {
  _impl_.tourney_queue_deadline_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline uint32_t CSODOTAParty::_internal_tourney_queue_deadline_time() const {
  return _impl_.tourney_queue_deadline_time_;
}
inline uint32_t CSODOTAParty::tourney_queue_deadline_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.tourney_queue_deadline_time)
  return _internal_tourney_queue_deadline_time();
}
inline void CSODOTAParty::_internal_set_tourney_queue_deadline_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.tourney_queue_deadline_time_ = value;
}
inline void CSODOTAParty::set_tourney_queue_deadline_time(uint32_t value) {
  _internal_set_tourney_queue_deadline_time(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.tourney_queue_deadline_time)
}

// optional .ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
inline bool CSODOTAParty::_internal_has_tourney_queue_deadline_state() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_tourney_queue_deadline_state() const {
  return _internal_has_tourney_queue_deadline_state();
}
inline void CSODOTAParty::clear_tourney_queue_deadline_state() {
  _impl_.tourney_queue_deadline_state_ = 0;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline ::ETourneyQueueDeadlineState CSODOTAParty::_internal_tourney_queue_deadline_state() const {
  return static_cast< ::ETourneyQueueDeadlineState >(_impl_.tourney_queue_deadline_state_);
}
inline ::ETourneyQueueDeadlineState CSODOTAParty::tourney_queue_deadline_state() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.tourney_queue_deadline_state)
  return _internal_tourney_queue_deadline_state();
}
inline void CSODOTAParty::_internal_set_tourney_queue_deadline_state(::ETourneyQueueDeadlineState value) {
  assert(::ETourneyQueueDeadlineState_IsValid(value));
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.tourney_queue_deadline_state_ = value;
}
inline void CSODOTAParty::set_tourney_queue_deadline_state(::ETourneyQueueDeadlineState value) {
  _internal_set_tourney_queue_deadline_state(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.tourney_queue_deadline_state)
}

// optional uint32 party_builder_slots_to_fill = 56;
inline bool CSODOTAParty::_internal_has_party_builder_slots_to_fill() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_party_builder_slots_to_fill() const {
  return _internal_has_party_builder_slots_to_fill();
}
inline void CSODOTAParty::clear_party_builder_slots_to_fill() {
  _impl_.party_builder_slots_to_fill_ = 0u;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline uint32_t CSODOTAParty::_internal_party_builder_slots_to_fill() const {
  return _impl_.party_builder_slots_to_fill_;
}
inline uint32_t CSODOTAParty::party_builder_slots_to_fill() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.party_builder_slots_to_fill)
  return _internal_party_builder_slots_to_fill();
}
inline void CSODOTAParty::_internal_set_party_builder_slots_to_fill(uint32_t value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.party_builder_slots_to_fill_ = value;
}
inline void CSODOTAParty::set_party_builder_slots_to_fill(uint32_t value) {
  _internal_set_party_builder_slots_to_fill(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.party_builder_slots_to_fill)
}

// optional uint32 party_builder_match_groups = 57;
inline bool CSODOTAParty::_internal_has_party_builder_match_groups() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_party_builder_match_groups() const {
  return _internal_has_party_builder_match_groups();
}
inline void CSODOTAParty::clear_party_builder_match_groups() {
  _impl_.party_builder_match_groups_ = 0u;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline uint32_t CSODOTAParty::_internal_party_builder_match_groups() const {
  return _impl_.party_builder_match_groups_;
}
inline uint32_t CSODOTAParty::party_builder_match_groups() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.party_builder_match_groups)
  return _internal_party_builder_match_groups();
}
inline void CSODOTAParty::_internal_set_party_builder_match_groups(uint32_t value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.party_builder_match_groups_ = value;
}
inline void CSODOTAParty::set_party_builder_match_groups(uint32_t value) {
  _internal_set_party_builder_match_groups(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.party_builder_match_groups)
}

// optional uint32 party_builder_start_time = 58;
inline bool CSODOTAParty::_internal_has_party_builder_start_time() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool CSODOTAParty::has_party_builder_start_time() const {
  return _internal_has_party_builder_start_time();
}
inline void CSODOTAParty::clear_party_builder_start_time() {
  _impl_.party_builder_start_time_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline uint32_t CSODOTAParty::_internal_party_builder_start_time() const {
  return _impl_.party_builder_start_time_;
}
inline uint32_t CSODOTAParty::party_builder_start_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.party_builder_start_time)
  return _internal_party_builder_start_time();
}
inline void CSODOTAParty::_internal_set_party_builder_start_time(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.party_builder_start_time_ = value;
}
inline void CSODOTAParty::set_party_builder_start_time(uint32_t value) {
  _internal_set_party_builder_start_time(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.party_builder_start_time)
}

// optional bool solo_queue = 59;
inline bool CSODOTAParty::_internal_has_solo_queue() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTAParty::has_solo_queue() const {
  return _internal_has_solo_queue();
}
inline void CSODOTAParty::clear_solo_queue() {
  _impl_.solo_queue_ = false;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline bool CSODOTAParty::_internal_solo_queue() const {
  return _impl_.solo_queue_;
}
inline bool CSODOTAParty::solo_queue() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.solo_queue)
  return _internal_solo_queue();
}
inline void CSODOTAParty::_internal_set_solo_queue(bool value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.solo_queue_ = value;
}
inline void CSODOTAParty::set_solo_queue(bool value) {
  _internal_set_solo_queue(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.solo_queue)
}

// optional uint32 steam_clan_account_id = 61;
inline bool CSODOTAParty::_internal_has_steam_clan_account_id() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool CSODOTAParty::has_steam_clan_account_id() const {
  return _internal_has_steam_clan_account_id();
}
inline void CSODOTAParty::clear_steam_clan_account_id() {
  _impl_.steam_clan_account_id_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline uint32_t CSODOTAParty::_internal_steam_clan_account_id() const {
  return _impl_.steam_clan_account_id_;
}
inline uint32_t CSODOTAParty::steam_clan_account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.steam_clan_account_id)
  return _internal_steam_clan_account_id();
}
inline void CSODOTAParty::_internal_set_steam_clan_account_id(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.steam_clan_account_id_ = value;
}
inline void CSODOTAParty::set_steam_clan_account_id(uint32_t value) {
  _internal_set_steam_clan_account_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.steam_clan_account_id)
}

// optional .CMsgReadyCheckStatus ready_check = 62;
inline bool CSODOTAParty::_internal_has_ready_check() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ready_check_ != nullptr);
  return value;
}
inline bool CSODOTAParty::has_ready_check() const {
  return _internal_has_ready_check();
}
inline void CSODOTAParty::clear_ready_check() {
  if (_impl_.ready_check_ != nullptr) _impl_.ready_check_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgReadyCheckStatus& CSODOTAParty::_internal_ready_check() const {
  const ::CMsgReadyCheckStatus* p = _impl_.ready_check_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgReadyCheckStatus&>(
      ::_CMsgReadyCheckStatus_default_instance_);
}
inline const ::CMsgReadyCheckStatus& CSODOTAParty::ready_check() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.ready_check)
  return _internal_ready_check();
}
inline void CSODOTAParty::unsafe_arena_set_allocated_ready_check(
    ::CMsgReadyCheckStatus* ready_check) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ready_check_);
  }
  _impl_.ready_check_ = ready_check;
  if (ready_check) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSODOTAParty.ready_check)
}
inline ::CMsgReadyCheckStatus* CSODOTAParty::release_ready_check() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgReadyCheckStatus* temp = _impl_.ready_check_;
  _impl_.ready_check_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgReadyCheckStatus* CSODOTAParty::unsafe_arena_release_ready_check() {
  // @@protoc_insertion_point(field_release:CSODOTAParty.ready_check)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgReadyCheckStatus* temp = _impl_.ready_check_;
  _impl_.ready_check_ = nullptr;
  return temp;
}
inline ::CMsgReadyCheckStatus* CSODOTAParty::_internal_mutable_ready_check() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.ready_check_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgReadyCheckStatus>(GetArenaForAllocation());
    _impl_.ready_check_ = p;
  }
  return _impl_.ready_check_;
}
inline ::CMsgReadyCheckStatus* CSODOTAParty::mutable_ready_check() {
  ::CMsgReadyCheckStatus* _msg = _internal_mutable_ready_check();
  // @@protoc_insertion_point(field_mutable:CSODOTAParty.ready_check)
  return _msg;
}
inline void CSODOTAParty::set_allocated_ready_check(::CMsgReadyCheckStatus* ready_check) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ready_check_;
  }
  if (ready_check) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ready_check);
    if (message_arena != submessage_arena) {
      ready_check = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ready_check, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.ready_check_ = ready_check;
  // @@protoc_insertion_point(field_set_allocated:CSODOTAParty.ready_check)
}

// optional uint32 custom_game_disabled_until_date = 63;
inline bool CSODOTAParty::_internal_has_custom_game_disabled_until_date() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool CSODOTAParty::has_custom_game_disabled_until_date() const {
  return _internal_has_custom_game_disabled_until_date();
}
inline void CSODOTAParty::clear_custom_game_disabled_until_date() {
  _impl_.custom_game_disabled_until_date_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline uint32_t CSODOTAParty::_internal_custom_game_disabled_until_date() const {
  return _impl_.custom_game_disabled_until_date_;
}
inline uint32_t CSODOTAParty::custom_game_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.custom_game_disabled_until_date)
  return _internal_custom_game_disabled_until_date();
}
inline void CSODOTAParty::_internal_set_custom_game_disabled_until_date(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.custom_game_disabled_until_date_ = value;
}
inline void CSODOTAParty::set_custom_game_disabled_until_date(uint32_t value) {
  _internal_set_custom_game_disabled_until_date(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.custom_game_disabled_until_date)
}

// optional uint32 custom_game_disabled_account_id = 64;
inline bool CSODOTAParty::_internal_has_custom_game_disabled_account_id() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool CSODOTAParty::has_custom_game_disabled_account_id() const {
  return _internal_has_custom_game_disabled_account_id();
}
inline void CSODOTAParty::clear_custom_game_disabled_account_id() {
  _impl_.custom_game_disabled_account_id_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline uint32_t CSODOTAParty::_internal_custom_game_disabled_account_id() const {
  return _impl_.custom_game_disabled_account_id_;
}
inline uint32_t CSODOTAParty::custom_game_disabled_account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.custom_game_disabled_account_id)
  return _internal_custom_game_disabled_account_id();
}
inline void CSODOTAParty::_internal_set_custom_game_disabled_account_id(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.custom_game_disabled_account_id_ = value;
}
inline void CSODOTAParty::set_custom_game_disabled_account_id(uint32_t value) {
  _internal_set_custom_game_disabled_account_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.custom_game_disabled_account_id)
}

// optional bool is_challenge_match = 65;
inline bool CSODOTAParty::_internal_has_is_challenge_match() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTAParty::has_is_challenge_match() const {
  return _internal_has_is_challenge_match();
}
inline void CSODOTAParty::clear_is_challenge_match() {
  _impl_.is_challenge_match_ = false;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline bool CSODOTAParty::_internal_is_challenge_match() const {
  return _impl_.is_challenge_match_;
}
inline bool CSODOTAParty::is_challenge_match() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.is_challenge_match)
  return _internal_is_challenge_match();
}
inline void CSODOTAParty::_internal_set_is_challenge_match(bool value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.is_challenge_match_ = value;
}
inline void CSODOTAParty::set_is_challenge_match(bool value) {
  _internal_set_is_challenge_match(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.is_challenge_match)
}

// optional bool party_search_beacon_active = 66;
inline bool CSODOTAParty::_internal_has_party_search_beacon_active() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool CSODOTAParty::has_party_search_beacon_active() const {
  return _internal_has_party_search_beacon_active();
}
inline void CSODOTAParty::clear_party_search_beacon_active() {
  _impl_.party_search_beacon_active_ = false;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline bool CSODOTAParty::_internal_party_search_beacon_active() const {
  return _impl_.party_search_beacon_active_;
}
inline bool CSODOTAParty::party_search_beacon_active() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.party_search_beacon_active)
  return _internal_party_search_beacon_active();
}
inline void CSODOTAParty::_internal_set_party_search_beacon_active(bool value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.party_search_beacon_active_ = value;
}
inline void CSODOTAParty::set_party_search_beacon_active(bool value) {
  _internal_set_party_search_beacon_active(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.party_search_beacon_active)
}

// optional uint32 matchmaking_flags = 67;
inline bool CSODOTAParty::_internal_has_matchmaking_flags() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool CSODOTAParty::has_matchmaking_flags() const {
  return _internal_has_matchmaking_flags();
}
inline void CSODOTAParty::clear_matchmaking_flags() {
  _impl_.matchmaking_flags_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline uint32_t CSODOTAParty::_internal_matchmaking_flags() const {
  return _impl_.matchmaking_flags_;
}
inline uint32_t CSODOTAParty::matchmaking_flags() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.matchmaking_flags)
  return _internal_matchmaking_flags();
}
inline void CSODOTAParty::_internal_set_matchmaking_flags(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.matchmaking_flags_ = value;
}
inline void CSODOTAParty::set_matchmaking_flags(uint32_t value) {
  _internal_set_matchmaking_flags(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.matchmaking_flags)
}

// optional .EHighPriorityMMState high_priority_state = 68 [default = k_EHighPriorityMM_Unknown];
inline bool CSODOTAParty::_internal_has_high_priority_state() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool CSODOTAParty::has_high_priority_state() const {
  return _internal_has_high_priority_state();
}
inline void CSODOTAParty::clear_high_priority_state() {
  _impl_.high_priority_state_ = 0;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline ::EHighPriorityMMState CSODOTAParty::_internal_high_priority_state() const {
  return static_cast< ::EHighPriorityMMState >(_impl_.high_priority_state_);
}
inline ::EHighPriorityMMState CSODOTAParty::high_priority_state() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.high_priority_state)
  return _internal_high_priority_state();
}
inline void CSODOTAParty::_internal_set_high_priority_state(::EHighPriorityMMState value) {
  assert(::EHighPriorityMMState_IsValid(value));
  _impl_._has_bits_[1] |= 0x00000200u;
  _impl_.high_priority_state_ = value;
}
inline void CSODOTAParty::set_high_priority_state(::EHighPriorityMMState value) {
  _internal_set_high_priority_state(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.high_priority_state)
}

// optional bool lane_selections_enabled = 69;
inline bool CSODOTAParty::_internal_has_lane_selections_enabled() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool CSODOTAParty::has_lane_selections_enabled() const {
  return _internal_has_lane_selections_enabled();
}
inline void CSODOTAParty::clear_lane_selections_enabled() {
  _impl_.lane_selections_enabled_ = false;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline bool CSODOTAParty::_internal_lane_selections_enabled() const {
  return _impl_.lane_selections_enabled_;
}
inline bool CSODOTAParty::lane_selections_enabled() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.lane_selections_enabled)
  return _internal_lane_selections_enabled();
}
inline void CSODOTAParty::_internal_set_lane_selections_enabled(bool value) {
  _impl_._has_bits_[1] |= 0x00000800u;
  _impl_.lane_selections_enabled_ = value;
}
inline void CSODOTAParty::set_lane_selections_enabled(bool value) {
  _internal_set_lane_selections_enabled(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.lane_selections_enabled)
}

// optional uint32 custom_game_difficulty_mask = 70;
inline bool CSODOTAParty::_internal_has_custom_game_difficulty_mask() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool CSODOTAParty::has_custom_game_difficulty_mask() const {
  return _internal_has_custom_game_difficulty_mask();
}
inline void CSODOTAParty::clear_custom_game_difficulty_mask() {
  _impl_.custom_game_difficulty_mask_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline uint32_t CSODOTAParty::_internal_custom_game_difficulty_mask() const {
  return _impl_.custom_game_difficulty_mask_;
}
inline uint32_t CSODOTAParty::custom_game_difficulty_mask() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.custom_game_difficulty_mask)
  return _internal_custom_game_difficulty_mask();
}
inline void CSODOTAParty::_internal_set_custom_game_difficulty_mask(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000400u;
  _impl_.custom_game_difficulty_mask_ = value;
}
inline void CSODOTAParty::set_custom_game_difficulty_mask(uint32_t value) {
  _internal_set_custom_game_difficulty_mask(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.custom_game_difficulty_mask)
}

// optional bool is_steam_china = 71;
inline bool CSODOTAParty::_internal_has_is_steam_china() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_is_steam_china() const {
  return _internal_has_is_steam_china();
}
inline void CSODOTAParty::clear_is_steam_china() {
  _impl_.is_steam_china_ = false;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline bool CSODOTAParty::_internal_is_steam_china() const {
  return _impl_.is_steam_china_;
}
inline bool CSODOTAParty::is_steam_china() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.is_steam_china)
  return _internal_is_steam_china();
}
inline void CSODOTAParty::_internal_set_is_steam_china(bool value) {
  _impl_._has_bits_[1] |= 0x00001000u;
  _impl_.is_steam_china_ = value;
}
inline void CSODOTAParty::set_is_steam_china(bool value) {
  _internal_set_is_steam_china(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.is_steam_china)
}

// optional uint32 bot_difficulty_mask = 72;
inline bool CSODOTAParty::_internal_has_bot_difficulty_mask() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_bot_difficulty_mask() const {
  return _internal_has_bot_difficulty_mask();
}
inline void CSODOTAParty::clear_bot_difficulty_mask() {
  _impl_.bot_difficulty_mask_ = 0u;
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline uint32_t CSODOTAParty::_internal_bot_difficulty_mask() const {
  return _impl_.bot_difficulty_mask_;
}
inline uint32_t CSODOTAParty::bot_difficulty_mask() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.bot_difficulty_mask)
  return _internal_bot_difficulty_mask();
}
inline void CSODOTAParty::_internal_set_bot_difficulty_mask(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00004000u;
  _impl_.bot_difficulty_mask_ = value;
}
inline void CSODOTAParty::set_bot_difficulty_mask(uint32_t value) {
  _internal_set_bot_difficulty_mask(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.bot_difficulty_mask)
}

// optional uint32 bot_script_index_mask = 73;
inline bool CSODOTAParty::_internal_has_bot_script_index_mask() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_bot_script_index_mask() const {
  return _internal_has_bot_script_index_mask();
}
inline void CSODOTAParty::clear_bot_script_index_mask() {
  _impl_.bot_script_index_mask_ = 0u;
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline uint32_t CSODOTAParty::_internal_bot_script_index_mask() const {
  return _impl_.bot_script_index_mask_;
}
inline uint32_t CSODOTAParty::bot_script_index_mask() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.bot_script_index_mask)
  return _internal_bot_script_index_mask();
}
inline void CSODOTAParty::_internal_set_bot_script_index_mask(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00008000u;
  _impl_.bot_script_index_mask_ = value;
}
inline void CSODOTAParty::set_bot_script_index_mask(uint32_t value) {
  _internal_set_bot_script_index_mask(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.bot_script_index_mask)
}

// optional bool restricted_from_ranked = 74;
inline bool CSODOTAParty::_internal_has_restricted_from_ranked() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_restricted_from_ranked() const {
  return _internal_has_restricted_from_ranked();
}
inline void CSODOTAParty::clear_restricted_from_ranked() {
  _impl_.restricted_from_ranked_ = false;
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline bool CSODOTAParty::_internal_restricted_from_ranked() const {
  return _impl_.restricted_from_ranked_;
}
inline bool CSODOTAParty::restricted_from_ranked() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.restricted_from_ranked)
  return _internal_restricted_from_ranked();
}
inline void CSODOTAParty::_internal_set_restricted_from_ranked(bool value) {
  _impl_._has_bits_[1] |= 0x00002000u;
  _impl_.restricted_from_ranked_ = value;
}
inline void CSODOTAParty::set_restricted_from_ranked(bool value) {
  _internal_set_restricted_from_ranked(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.restricted_from_ranked)
}

// optional uint32 restricted_from_ranked_account_id = 75;
inline bool CSODOTAParty::_internal_has_restricted_from_ranked_account_id() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_restricted_from_ranked_account_id() const {
  return _internal_has_restricted_from_ranked_account_id();
}
inline void CSODOTAParty::clear_restricted_from_ranked_account_id() {
  _impl_.restricted_from_ranked_account_id_ = 0u;
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline uint32_t CSODOTAParty::_internal_restricted_from_ranked_account_id() const {
  return _impl_.restricted_from_ranked_account_id_;
}
inline uint32_t CSODOTAParty::restricted_from_ranked_account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.restricted_from_ranked_account_id)
  return _internal_restricted_from_ranked_account_id();
}
inline void CSODOTAParty::_internal_set_restricted_from_ranked_account_id(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00010000u;
  _impl_.restricted_from_ranked_account_id_ = value;
}
inline void CSODOTAParty::set_restricted_from_ranked_account_id(uint32_t value) {
  _internal_set_restricted_from_ranked_account_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.restricted_from_ranked_account_id)
}

// -------------------------------------------------------------------

// CSODOTAPartyInvite_PartyMember

// optional string name = 1;
inline bool CSODOTAPartyInvite_PartyMember::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTAPartyInvite_PartyMember::has_name() const {
  return _internal_has_name();
}
inline void CSODOTAPartyInvite_PartyMember::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSODOTAPartyInvite_PartyMember::name() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.PartyMember.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSODOTAPartyInvite_PartyMember::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.PartyMember.name)
}
inline std::string* CSODOTAPartyInvite_PartyMember::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CSODOTAPartyInvite.PartyMember.name)
  return _s;
}
inline const std::string& CSODOTAPartyInvite_PartyMember::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CSODOTAPartyInvite_PartyMember::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CSODOTAPartyInvite_PartyMember::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CSODOTAPartyInvite_PartyMember::release_name() {
  // @@protoc_insertion_point(field_release:CSODOTAPartyInvite.PartyMember.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSODOTAPartyInvite_PartyMember::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSODOTAPartyInvite.PartyMember.name)
}

// optional fixed64 steam_id = 2;
inline bool CSODOTAPartyInvite_PartyMember::_internal_has_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTAPartyInvite_PartyMember::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CSODOTAPartyInvite_PartyMember::clear_steam_id() {
  _impl_.steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CSODOTAPartyInvite_PartyMember::_internal_steam_id() const {
  return _impl_.steam_id_;
}
inline uint64_t CSODOTAPartyInvite_PartyMember::steam_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.PartyMember.steam_id)
  return _internal_steam_id();
}
inline void CSODOTAPartyInvite_PartyMember::_internal_set_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.steam_id_ = value;
}
inline void CSODOTAPartyInvite_PartyMember::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.PartyMember.steam_id)
}

// optional bool is_coach = 4;
inline bool CSODOTAPartyInvite_PartyMember::_internal_has_is_coach() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTAPartyInvite_PartyMember::has_is_coach() const {
  return _internal_has_is_coach();
}
inline void CSODOTAPartyInvite_PartyMember::clear_is_coach() {
  _impl_.is_coach_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CSODOTAPartyInvite_PartyMember::_internal_is_coach() const {
  return _impl_.is_coach_;
}
inline bool CSODOTAPartyInvite_PartyMember::is_coach() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.PartyMember.is_coach)
  return _internal_is_coach();
}
inline void CSODOTAPartyInvite_PartyMember::_internal_set_is_coach(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.is_coach_ = value;
}
inline void CSODOTAPartyInvite_PartyMember::set_is_coach(bool value) {
  _internal_set_is_coach(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.PartyMember.is_coach)
}

// -------------------------------------------------------------------

// CSODOTAPartyInvite

// optional uint64 group_id = 1 [(.key_field) = true];
inline bool CSODOTAPartyInvite::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTAPartyInvite::has_group_id() const {
  return _internal_has_group_id();
}
inline void CSODOTAPartyInvite::clear_group_id() {
  _impl_.group_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CSODOTAPartyInvite::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint64_t CSODOTAPartyInvite::group_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.group_id)
  return _internal_group_id();
}
inline void CSODOTAPartyInvite::_internal_set_group_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.group_id_ = value;
}
inline void CSODOTAPartyInvite::set_group_id(uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.group_id)
}

// optional fixed64 sender_id = 2;
inline bool CSODOTAPartyInvite::_internal_has_sender_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTAPartyInvite::has_sender_id() const {
  return _internal_has_sender_id();
}
inline void CSODOTAPartyInvite::clear_sender_id() {
  _impl_.sender_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CSODOTAPartyInvite::_internal_sender_id() const {
  return _impl_.sender_id_;
}
inline uint64_t CSODOTAPartyInvite::sender_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.sender_id)
  return _internal_sender_id();
}
inline void CSODOTAPartyInvite::_internal_set_sender_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sender_id_ = value;
}
inline void CSODOTAPartyInvite::set_sender_id(uint64_t value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.sender_id)
}

// optional string sender_name = 3;
inline bool CSODOTAPartyInvite::_internal_has_sender_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTAPartyInvite::has_sender_name() const {
  return _internal_has_sender_name();
}
inline void CSODOTAPartyInvite::clear_sender_name() {
  _impl_.sender_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSODOTAPartyInvite::sender_name() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.sender_name)
  return _internal_sender_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSODOTAPartyInvite::set_sender_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.sender_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.sender_name)
}
inline std::string* CSODOTAPartyInvite::mutable_sender_name() {
  std::string* _s = _internal_mutable_sender_name();
  // @@protoc_insertion_point(field_mutable:CSODOTAPartyInvite.sender_name)
  return _s;
}
inline const std::string& CSODOTAPartyInvite::_internal_sender_name() const {
  return _impl_.sender_name_.Get();
}
inline void CSODOTAPartyInvite::_internal_set_sender_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sender_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CSODOTAPartyInvite::_internal_mutable_sender_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sender_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CSODOTAPartyInvite::release_sender_name() {
  // @@protoc_insertion_point(field_release:CSODOTAPartyInvite.sender_name)
  if (!_internal_has_sender_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.sender_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_name_.IsDefault()) {
    _impl_.sender_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSODOTAPartyInvite::set_allocated_sender_name(std::string* sender_name) {
  if (sender_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sender_name_.SetAllocated(sender_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_name_.IsDefault()) {
    _impl_.sender_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSODOTAPartyInvite.sender_name)
}

// repeated .CSODOTAPartyInvite.PartyMember members = 4;
inline int CSODOTAPartyInvite::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int CSODOTAPartyInvite::members_size() const {
  return _internal_members_size();
}
inline void CSODOTAPartyInvite::clear_members() {
  _impl_.members_.Clear();
}
inline ::CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAPartyInvite.members)
  return _impl_.members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >*
CSODOTAPartyInvite::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAPartyInvite.members)
  return &_impl_.members_;
}
inline const ::CSODOTAPartyInvite_PartyMember& CSODOTAPartyInvite::_internal_members(int index) const {
  return _impl_.members_.Get(index);
}
inline const ::CSODOTAPartyInvite_PartyMember& CSODOTAPartyInvite::members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.members)
  return _internal_members(index);
}
inline ::CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite::_internal_add_members() {
  return _impl_.members_.Add();
}
inline ::CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite::add_members() {
  ::CSODOTAPartyInvite_PartyMember* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:CSODOTAPartyInvite.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >&
CSODOTAPartyInvite::members() const {
  // @@protoc_insertion_point(field_list:CSODOTAPartyInvite.members)
  return _impl_.members_;
}

// optional uint32 team_id = 5;
inline bool CSODOTAPartyInvite::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSODOTAPartyInvite::has_team_id() const {
  return _internal_has_team_id();
}
inline void CSODOTAPartyInvite::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CSODOTAPartyInvite::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CSODOTAPartyInvite::team_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.team_id)
  return _internal_team_id();
}
inline void CSODOTAPartyInvite::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.team_id_ = value;
}
inline void CSODOTAPartyInvite::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.team_id)
}

// optional bool low_priority_status = 6;
inline bool CSODOTAPartyInvite::_internal_has_low_priority_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSODOTAPartyInvite::has_low_priority_status() const {
  return _internal_has_low_priority_status();
}
inline void CSODOTAPartyInvite::clear_low_priority_status() {
  _impl_.low_priority_status_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CSODOTAPartyInvite::_internal_low_priority_status() const {
  return _impl_.low_priority_status_;
}
inline bool CSODOTAPartyInvite::low_priority_status() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.low_priority_status)
  return _internal_low_priority_status();
}
inline void CSODOTAPartyInvite::_internal_set_low_priority_status(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.low_priority_status_ = value;
}
inline void CSODOTAPartyInvite::set_low_priority_status(bool value) {
  _internal_set_low_priority_status(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.low_priority_status)
}

// optional bool as_coach = 7;
inline bool CSODOTAPartyInvite::_internal_has_as_coach() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSODOTAPartyInvite::has_as_coach() const {
  return _internal_has_as_coach();
}
inline void CSODOTAPartyInvite::clear_as_coach() {
  _impl_.as_coach_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CSODOTAPartyInvite::_internal_as_coach() const {
  return _impl_.as_coach_;
}
inline bool CSODOTAPartyInvite::as_coach() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.as_coach)
  return _internal_as_coach();
}
inline void CSODOTAPartyInvite::_internal_set_as_coach(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.as_coach_ = value;
}
inline void CSODOTAPartyInvite::set_as_coach(bool value) {
  _internal_set_as_coach(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.as_coach)
}

// optional fixed64 invite_gid = 8;
inline bool CSODOTAPartyInvite::_internal_has_invite_gid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSODOTAPartyInvite::has_invite_gid() const {
  return _internal_has_invite_gid();
}
inline void CSODOTAPartyInvite::clear_invite_gid() {
  _impl_.invite_gid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CSODOTAPartyInvite::_internal_invite_gid() const {
  return _impl_.invite_gid_;
}
inline uint64_t CSODOTAPartyInvite::invite_gid() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.invite_gid)
  return _internal_invite_gid();
}
inline void CSODOTAPartyInvite::_internal_set_invite_gid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.invite_gid_ = value;
}
inline void CSODOTAPartyInvite::set_invite_gid(uint64_t value) {
  _internal_set_invite_gid(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.invite_gid)
}

// -------------------------------------------------------------------

// CMsgLeaverState

// optional uint32 lobby_state = 1;
inline bool CMsgLeaverState::_internal_has_lobby_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLeaverState::has_lobby_state() const {
  return _internal_has_lobby_state();
}
inline void CMsgLeaverState::clear_lobby_state() {
  _impl_.lobby_state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgLeaverState::_internal_lobby_state() const {
  return _impl_.lobby_state_;
}
inline uint32_t CMsgLeaverState::lobby_state() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.lobby_state)
  return _internal_lobby_state();
}
inline void CMsgLeaverState::_internal_set_lobby_state(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.lobby_state_ = value;
}
inline void CMsgLeaverState::set_lobby_state(uint32_t value) {
  _internal_set_lobby_state(value);
  // @@protoc_insertion_point(field_set:CMsgLeaverState.lobby_state)
}

// optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
inline bool CMsgLeaverState::_internal_has_game_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgLeaverState::has_game_state() const {
  return _internal_has_game_state();
}
inline void CMsgLeaverState::clear_game_state() {
  _impl_.game_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::DOTA_GameState CMsgLeaverState::_internal_game_state() const {
  return static_cast< ::DOTA_GameState >(_impl_.game_state_);
}
inline ::DOTA_GameState CMsgLeaverState::game_state() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.game_state)
  return _internal_game_state();
}
inline void CMsgLeaverState::_internal_set_game_state(::DOTA_GameState value) {
  assert(::DOTA_GameState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.game_state_ = value;
}
inline void CMsgLeaverState::set_game_state(::DOTA_GameState value) {
  _internal_set_game_state(value);
  // @@protoc_insertion_point(field_set:CMsgLeaverState.game_state)
}

// optional bool leaver_detected = 3;
inline bool CMsgLeaverState::_internal_has_leaver_detected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgLeaverState::has_leaver_detected() const {
  return _internal_has_leaver_detected();
}
inline void CMsgLeaverState::clear_leaver_detected() {
  _impl_.leaver_detected_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgLeaverState::_internal_leaver_detected() const {
  return _impl_.leaver_detected_;
}
inline bool CMsgLeaverState::leaver_detected() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.leaver_detected)
  return _internal_leaver_detected();
}
inline void CMsgLeaverState::_internal_set_leaver_detected(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.leaver_detected_ = value;
}
inline void CMsgLeaverState::set_leaver_detected(bool value) {
  _internal_set_leaver_detected(value);
  // @@protoc_insertion_point(field_set:CMsgLeaverState.leaver_detected)
}

// optional bool first_blood_happened = 4;
inline bool CMsgLeaverState::_internal_has_first_blood_happened() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgLeaverState::has_first_blood_happened() const {
  return _internal_has_first_blood_happened();
}
inline void CMsgLeaverState::clear_first_blood_happened() {
  _impl_.first_blood_happened_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgLeaverState::_internal_first_blood_happened() const {
  return _impl_.first_blood_happened_;
}
inline bool CMsgLeaverState::first_blood_happened() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.first_blood_happened)
  return _internal_first_blood_happened();
}
inline void CMsgLeaverState::_internal_set_first_blood_happened(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.first_blood_happened_ = value;
}
inline void CMsgLeaverState::set_first_blood_happened(bool value) {
  _internal_set_first_blood_happened(value);
  // @@protoc_insertion_point(field_set:CMsgLeaverState.first_blood_happened)
}

// optional bool discard_match_results = 5;
inline bool CMsgLeaverState::_internal_has_discard_match_results() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgLeaverState::has_discard_match_results() const {
  return _internal_has_discard_match_results();
}
inline void CMsgLeaverState::clear_discard_match_results() {
  _impl_.discard_match_results_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgLeaverState::_internal_discard_match_results() const {
  return _impl_.discard_match_results_;
}
inline bool CMsgLeaverState::discard_match_results() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.discard_match_results)
  return _internal_discard_match_results();
}
inline void CMsgLeaverState::_internal_set_discard_match_results(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.discard_match_results_ = value;
}
inline void CMsgLeaverState::set_discard_match_results(bool value) {
  _internal_set_discard_match_results(value);
  // @@protoc_insertion_point(field_set:CMsgLeaverState.discard_match_results)
}

// optional bool mass_disconnect = 6;
inline bool CMsgLeaverState::_internal_has_mass_disconnect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgLeaverState::has_mass_disconnect() const {
  return _internal_has_mass_disconnect();
}
inline void CMsgLeaverState::clear_mass_disconnect() {
  _impl_.mass_disconnect_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgLeaverState::_internal_mass_disconnect() const {
  return _impl_.mass_disconnect_;
}
inline bool CMsgLeaverState::mass_disconnect() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.mass_disconnect)
  return _internal_mass_disconnect();
}
inline void CMsgLeaverState::_internal_set_mass_disconnect(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.mass_disconnect_ = value;
}
inline void CMsgLeaverState::set_mass_disconnect(bool value) {
  _internal_set_mass_disconnect(value);
  // @@protoc_insertion_point(field_set:CMsgLeaverState.mass_disconnect)
}

// -------------------------------------------------------------------

// CMsgReadyCheckStatus_ReadyMember

// optional uint32 account_id = 1;
inline bool CMsgReadyCheckStatus_ReadyMember::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgReadyCheckStatus_ReadyMember::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgReadyCheckStatus_ReadyMember::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgReadyCheckStatus_ReadyMember::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgReadyCheckStatus_ReadyMember::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgReadyCheckStatus.ReadyMember.account_id)
  return _internal_account_id();
}
inline void CMsgReadyCheckStatus_ReadyMember::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgReadyCheckStatus_ReadyMember::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgReadyCheckStatus.ReadyMember.account_id)
}

// optional .EReadyCheckStatus ready_status = 2 [default = k_EReadyCheckStatus_Unknown];
inline bool CMsgReadyCheckStatus_ReadyMember::_internal_has_ready_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgReadyCheckStatus_ReadyMember::has_ready_status() const {
  return _internal_has_ready_status();
}
inline void CMsgReadyCheckStatus_ReadyMember::clear_ready_status() {
  _impl_.ready_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::EReadyCheckStatus CMsgReadyCheckStatus_ReadyMember::_internal_ready_status() const {
  return static_cast< ::EReadyCheckStatus >(_impl_.ready_status_);
}
inline ::EReadyCheckStatus CMsgReadyCheckStatus_ReadyMember::ready_status() const {
  // @@protoc_insertion_point(field_get:CMsgReadyCheckStatus.ReadyMember.ready_status)
  return _internal_ready_status();
}
inline void CMsgReadyCheckStatus_ReadyMember::_internal_set_ready_status(::EReadyCheckStatus value) {
  assert(::EReadyCheckStatus_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ready_status_ = value;
}
inline void CMsgReadyCheckStatus_ReadyMember::set_ready_status(::EReadyCheckStatus value) {
  _internal_set_ready_status(value);
  // @@protoc_insertion_point(field_set:CMsgReadyCheckStatus.ReadyMember.ready_status)
}

// -------------------------------------------------------------------

// CMsgReadyCheckStatus

// optional uint32 start_timestamp = 1;
inline bool CMsgReadyCheckStatus::_internal_has_start_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgReadyCheckStatus::has_start_timestamp() const {
  return _internal_has_start_timestamp();
}
inline void CMsgReadyCheckStatus::clear_start_timestamp() {
  _impl_.start_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgReadyCheckStatus::_internal_start_timestamp() const {
  return _impl_.start_timestamp_;
}
inline uint32_t CMsgReadyCheckStatus::start_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgReadyCheckStatus.start_timestamp)
  return _internal_start_timestamp();
}
inline void CMsgReadyCheckStatus::_internal_set_start_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.start_timestamp_ = value;
}
inline void CMsgReadyCheckStatus::set_start_timestamp(uint32_t value) {
  _internal_set_start_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgReadyCheckStatus.start_timestamp)
}

// optional uint32 finish_timestamp = 2;
inline bool CMsgReadyCheckStatus::_internal_has_finish_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgReadyCheckStatus::has_finish_timestamp() const {
  return _internal_has_finish_timestamp();
}
inline void CMsgReadyCheckStatus::clear_finish_timestamp() {
  _impl_.finish_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgReadyCheckStatus::_internal_finish_timestamp() const {
  return _impl_.finish_timestamp_;
}
inline uint32_t CMsgReadyCheckStatus::finish_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgReadyCheckStatus.finish_timestamp)
  return _internal_finish_timestamp();
}
inline void CMsgReadyCheckStatus::_internal_set_finish_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.finish_timestamp_ = value;
}
inline void CMsgReadyCheckStatus::set_finish_timestamp(uint32_t value) {
  _internal_set_finish_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgReadyCheckStatus.finish_timestamp)
}

// optional uint32 initiator_account_id = 3;
inline bool CMsgReadyCheckStatus::_internal_has_initiator_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgReadyCheckStatus::has_initiator_account_id() const {
  return _internal_has_initiator_account_id();
}
inline void CMsgReadyCheckStatus::clear_initiator_account_id() {
  _impl_.initiator_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgReadyCheckStatus::_internal_initiator_account_id() const {
  return _impl_.initiator_account_id_;
}
inline uint32_t CMsgReadyCheckStatus::initiator_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgReadyCheckStatus.initiator_account_id)
  return _internal_initiator_account_id();
}
inline void CMsgReadyCheckStatus::_internal_set_initiator_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.initiator_account_id_ = value;
}
inline void CMsgReadyCheckStatus::set_initiator_account_id(uint32_t value) {
  _internal_set_initiator_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgReadyCheckStatus.initiator_account_id)
}

// repeated .CMsgReadyCheckStatus.ReadyMember ready_members = 4;
inline int CMsgReadyCheckStatus::_internal_ready_members_size() const {
  return _impl_.ready_members_.size();
}
inline int CMsgReadyCheckStatus::ready_members_size() const {
  return _internal_ready_members_size();
}
inline void CMsgReadyCheckStatus::clear_ready_members() {
  _impl_.ready_members_.Clear();
}
inline ::CMsgReadyCheckStatus_ReadyMember* CMsgReadyCheckStatus::mutable_ready_members(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgReadyCheckStatus.ready_members)
  return _impl_.ready_members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgReadyCheckStatus_ReadyMember >*
CMsgReadyCheckStatus::mutable_ready_members() {
  // @@protoc_insertion_point(field_mutable_list:CMsgReadyCheckStatus.ready_members)
  return &_impl_.ready_members_;
}
inline const ::CMsgReadyCheckStatus_ReadyMember& CMsgReadyCheckStatus::_internal_ready_members(int index) const {
  return _impl_.ready_members_.Get(index);
}
inline const ::CMsgReadyCheckStatus_ReadyMember& CMsgReadyCheckStatus::ready_members(int index) const {
  // @@protoc_insertion_point(field_get:CMsgReadyCheckStatus.ready_members)
  return _internal_ready_members(index);
}
inline ::CMsgReadyCheckStatus_ReadyMember* CMsgReadyCheckStatus::_internal_add_ready_members() {
  return _impl_.ready_members_.Add();
}
inline ::CMsgReadyCheckStatus_ReadyMember* CMsgReadyCheckStatus::add_ready_members() {
  ::CMsgReadyCheckStatus_ReadyMember* _add = _internal_add_ready_members();
  // @@protoc_insertion_point(field_add:CMsgReadyCheckStatus.ready_members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgReadyCheckStatus_ReadyMember >&
CMsgReadyCheckStatus::ready_members() const {
  // @@protoc_insertion_point(field_list:CMsgReadyCheckStatus.ready_members)
  return _impl_.ready_members_;
}

// -------------------------------------------------------------------

// CMsgPartyReadyCheckRequest

// -------------------------------------------------------------------

// CMsgPartyReadyCheckResponse

// optional .EReadyCheckRequestResult result = 1 [default = k_EReadyCheckRequestResult_Success];
inline bool CMsgPartyReadyCheckResponse::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPartyReadyCheckResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgPartyReadyCheckResponse::clear_result() {
  _impl_.result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::EReadyCheckRequestResult CMsgPartyReadyCheckResponse::_internal_result() const {
  return static_cast< ::EReadyCheckRequestResult >(_impl_.result_);
}
inline ::EReadyCheckRequestResult CMsgPartyReadyCheckResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgPartyReadyCheckResponse.result)
  return _internal_result();
}
inline void CMsgPartyReadyCheckResponse::_internal_set_result(::EReadyCheckRequestResult value) {
  assert(::EReadyCheckRequestResult_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.result_ = value;
}
inline void CMsgPartyReadyCheckResponse::set_result(::EReadyCheckRequestResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgPartyReadyCheckResponse.result)
}

// -------------------------------------------------------------------

// CMsgPartyReadyCheckAcknowledge

// optional .EReadyCheckStatus ready_status = 1 [default = k_EReadyCheckStatus_Unknown];
inline bool CMsgPartyReadyCheckAcknowledge::_internal_has_ready_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPartyReadyCheckAcknowledge::has_ready_status() const {
  return _internal_has_ready_status();
}
inline void CMsgPartyReadyCheckAcknowledge::clear_ready_status() {
  _impl_.ready_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::EReadyCheckStatus CMsgPartyReadyCheckAcknowledge::_internal_ready_status() const {
  return static_cast< ::EReadyCheckStatus >(_impl_.ready_status_);
}
inline ::EReadyCheckStatus CMsgPartyReadyCheckAcknowledge::ready_status() const {
  // @@protoc_insertion_point(field_get:CMsgPartyReadyCheckAcknowledge.ready_status)
  return _internal_ready_status();
}
inline void CMsgPartyReadyCheckAcknowledge::_internal_set_ready_status(::EReadyCheckStatus value) {
  assert(::EReadyCheckStatus_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ready_status_ = value;
}
inline void CMsgPartyReadyCheckAcknowledge::set_ready_status(::EReadyCheckStatus value) {
  _internal_set_ready_status(value);
  // @@protoc_insertion_point(field_set:CMsgPartyReadyCheckAcknowledge.ready_status)
}

// -------------------------------------------------------------------

// CMsgLobbyEventGameDetails

// optional bytes kv_data = 1;
inline bool CMsgLobbyEventGameDetails::_internal_has_kv_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLobbyEventGameDetails::has_kv_data() const {
  return _internal_has_kv_data();
}
inline void CMsgLobbyEventGameDetails::clear_kv_data() {
  _impl_.kv_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgLobbyEventGameDetails::kv_data() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventGameDetails.kv_data)
  return _internal_kv_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgLobbyEventGameDetails::set_kv_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.kv_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgLobbyEventGameDetails.kv_data)
}
inline std::string* CMsgLobbyEventGameDetails::mutable_kv_data() {
  std::string* _s = _internal_mutable_kv_data();
  // @@protoc_insertion_point(field_mutable:CMsgLobbyEventGameDetails.kv_data)
  return _s;
}
inline const std::string& CMsgLobbyEventGameDetails::_internal_kv_data() const {
  return _impl_.kv_data_.Get();
}
inline void CMsgLobbyEventGameDetails::_internal_set_kv_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.kv_data_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgLobbyEventGameDetails::_internal_mutable_kv_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.kv_data_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgLobbyEventGameDetails::release_kv_data() {
  // @@protoc_insertion_point(field_release:CMsgLobbyEventGameDetails.kv_data)
  if (!_internal_has_kv_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.kv_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kv_data_.IsDefault()) {
    _impl_.kv_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgLobbyEventGameDetails::set_allocated_kv_data(std::string* kv_data) {
  if (kv_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.kv_data_.SetAllocated(kv_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kv_data_.IsDefault()) {
    _impl_.kv_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgLobbyEventGameDetails.kv_data)
}

// -------------------------------------------------------------------

// CMsgMatchMatchmakingStats

// optional uint32 average_queue_time = 1;
inline bool CMsgMatchMatchmakingStats::_internal_has_average_queue_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMatchMatchmakingStats::has_average_queue_time() const {
  return _internal_has_average_queue_time();
}
inline void CMsgMatchMatchmakingStats::clear_average_queue_time() {
  _impl_.average_queue_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgMatchMatchmakingStats::_internal_average_queue_time() const {
  return _impl_.average_queue_time_;
}
inline uint32_t CMsgMatchMatchmakingStats::average_queue_time() const {
  // @@protoc_insertion_point(field_get:CMsgMatchMatchmakingStats.average_queue_time)
  return _internal_average_queue_time();
}
inline void CMsgMatchMatchmakingStats::_internal_set_average_queue_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.average_queue_time_ = value;
}
inline void CMsgMatchMatchmakingStats::set_average_queue_time(uint32_t value) {
  _internal_set_average_queue_time(value);
  // @@protoc_insertion_point(field_set:CMsgMatchMatchmakingStats.average_queue_time)
}

// optional uint32 maximum_queue_time = 2;
inline bool CMsgMatchMatchmakingStats::_internal_has_maximum_queue_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgMatchMatchmakingStats::has_maximum_queue_time() const {
  return _internal_has_maximum_queue_time();
}
inline void CMsgMatchMatchmakingStats::clear_maximum_queue_time() {
  _impl_.maximum_queue_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgMatchMatchmakingStats::_internal_maximum_queue_time() const {
  return _impl_.maximum_queue_time_;
}
inline uint32_t CMsgMatchMatchmakingStats::maximum_queue_time() const {
  // @@protoc_insertion_point(field_get:CMsgMatchMatchmakingStats.maximum_queue_time)
  return _internal_maximum_queue_time();
}
inline void CMsgMatchMatchmakingStats::_internal_set_maximum_queue_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.maximum_queue_time_ = value;
}
inline void CMsgMatchMatchmakingStats::set_maximum_queue_time(uint32_t value) {
  _internal_set_maximum_queue_time(value);
  // @@protoc_insertion_point(field_set:CMsgMatchMatchmakingStats.maximum_queue_time)
}

// optional .EMatchBehaviorScoreVariance behavior_score_variance = 3 [default = k_EMatchBehaviorScoreVariance_Invalid];
inline bool CMsgMatchMatchmakingStats::_internal_has_behavior_score_variance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgMatchMatchmakingStats::has_behavior_score_variance() const {
  return _internal_has_behavior_score_variance();
}
inline void CMsgMatchMatchmakingStats::clear_behavior_score_variance() {
  _impl_.behavior_score_variance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::EMatchBehaviorScoreVariance CMsgMatchMatchmakingStats::_internal_behavior_score_variance() const {
  return static_cast< ::EMatchBehaviorScoreVariance >(_impl_.behavior_score_variance_);
}
inline ::EMatchBehaviorScoreVariance CMsgMatchMatchmakingStats::behavior_score_variance() const {
  // @@protoc_insertion_point(field_get:CMsgMatchMatchmakingStats.behavior_score_variance)
  return _internal_behavior_score_variance();
}
inline void CMsgMatchMatchmakingStats::_internal_set_behavior_score_variance(::EMatchBehaviorScoreVariance value) {
  assert(::EMatchBehaviorScoreVariance_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.behavior_score_variance_ = value;
}
inline void CMsgMatchMatchmakingStats::set_behavior_score_variance(::EMatchBehaviorScoreVariance value) {
  _internal_set_behavior_score_variance(value);
  // @@protoc_insertion_point(field_set:CMsgMatchMatchmakingStats.behavior_score_variance)
}

// -------------------------------------------------------------------

// CMvpData_MvpDatum_MvpAccolade

// optional .CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType type = 1 [default = kills];
inline bool CMvpData_MvpDatum_MvpAccolade::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMvpData_MvpDatum_MvpAccolade::has_type() const {
  return _internal_has_type();
}
inline void CMvpData_MvpDatum_MvpAccolade::clear_type() {
  _impl_.type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::_internal_type() const {
  return static_cast< ::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType >(_impl_.type_);
}
inline ::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::type() const {
  // @@protoc_insertion_point(field_get:CMvpData.MvpDatum.MvpAccolade.type)
  return _internal_type();
}
inline void CMvpData_MvpDatum_MvpAccolade::_internal_set_type(::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType value) {
  assert(::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}
inline void CMvpData_MvpDatum_MvpAccolade::set_type(::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMvpData.MvpDatum.MvpAccolade.type)
}

// optional float detail_value = 2;
inline bool CMvpData_MvpDatum_MvpAccolade::_internal_has_detail_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMvpData_MvpDatum_MvpAccolade::has_detail_value() const {
  return _internal_has_detail_value();
}
inline void CMvpData_MvpDatum_MvpAccolade::clear_detail_value() {
  _impl_.detail_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CMvpData_MvpDatum_MvpAccolade::_internal_detail_value() const {
  return _impl_.detail_value_;
}
inline float CMvpData_MvpDatum_MvpAccolade::detail_value() const {
  // @@protoc_insertion_point(field_get:CMvpData.MvpDatum.MvpAccolade.detail_value)
  return _internal_detail_value();
}
inline void CMvpData_MvpDatum_MvpAccolade::_internal_set_detail_value(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.detail_value_ = value;
}
inline void CMvpData_MvpDatum_MvpAccolade::set_detail_value(float value) {
  _internal_set_detail_value(value);
  // @@protoc_insertion_point(field_set:CMvpData.MvpDatum.MvpAccolade.detail_value)
}

// -------------------------------------------------------------------

// CMvpData_MvpDatum

// optional uint32 player_slot = 1;
inline bool CMvpData_MvpDatum::_internal_has_player_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMvpData_MvpDatum::has_player_slot() const {
  return _internal_has_player_slot();
}
inline void CMvpData_MvpDatum::clear_player_slot() {
  _impl_.player_slot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMvpData_MvpDatum::_internal_player_slot() const {
  return _impl_.player_slot_;
}
inline uint32_t CMvpData_MvpDatum::player_slot() const {
  // @@protoc_insertion_point(field_get:CMvpData.MvpDatum.player_slot)
  return _internal_player_slot();
}
inline void CMvpData_MvpDatum::_internal_set_player_slot(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.player_slot_ = value;
}
inline void CMvpData_MvpDatum::set_player_slot(uint32_t value) {
  _internal_set_player_slot(value);
  // @@protoc_insertion_point(field_set:CMvpData.MvpDatum.player_slot)
}

// repeated .CMvpData.MvpDatum.MvpAccolade accolades = 2;
inline int CMvpData_MvpDatum::_internal_accolades_size() const {
  return _impl_.accolades_.size();
}
inline int CMvpData_MvpDatum::accolades_size() const {
  return _internal_accolades_size();
}
inline void CMvpData_MvpDatum::clear_accolades() {
  _impl_.accolades_.Clear();
}
inline ::CMvpData_MvpDatum_MvpAccolade* CMvpData_MvpDatum::mutable_accolades(int index) {
  // @@protoc_insertion_point(field_mutable:CMvpData.MvpDatum.accolades)
  return _impl_.accolades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMvpData_MvpDatum_MvpAccolade >*
CMvpData_MvpDatum::mutable_accolades() {
  // @@protoc_insertion_point(field_mutable_list:CMvpData.MvpDatum.accolades)
  return &_impl_.accolades_;
}
inline const ::CMvpData_MvpDatum_MvpAccolade& CMvpData_MvpDatum::_internal_accolades(int index) const {
  return _impl_.accolades_.Get(index);
}
inline const ::CMvpData_MvpDatum_MvpAccolade& CMvpData_MvpDatum::accolades(int index) const {
  // @@protoc_insertion_point(field_get:CMvpData.MvpDatum.accolades)
  return _internal_accolades(index);
}
inline ::CMvpData_MvpDatum_MvpAccolade* CMvpData_MvpDatum::_internal_add_accolades() {
  return _impl_.accolades_.Add();
}
inline ::CMvpData_MvpDatum_MvpAccolade* CMvpData_MvpDatum::add_accolades() {
  ::CMvpData_MvpDatum_MvpAccolade* _add = _internal_add_accolades();
  // @@protoc_insertion_point(field_add:CMvpData.MvpDatum.accolades)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMvpData_MvpDatum_MvpAccolade >&
CMvpData_MvpDatum::accolades() const {
  // @@protoc_insertion_point(field_list:CMvpData.MvpDatum.accolades)
  return _impl_.accolades_;
}

// -------------------------------------------------------------------

// CMvpData

// repeated .CMvpData.MvpDatum mvps = 1;
inline int CMvpData::_internal_mvps_size() const {
  return _impl_.mvps_.size();
}
inline int CMvpData::mvps_size() const {
  return _internal_mvps_size();
}
inline void CMvpData::clear_mvps() {
  _impl_.mvps_.Clear();
}
inline ::CMvpData_MvpDatum* CMvpData::mutable_mvps(int index) {
  // @@protoc_insertion_point(field_mutable:CMvpData.mvps)
  return _impl_.mvps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMvpData_MvpDatum >*
CMvpData::mutable_mvps() {
  // @@protoc_insertion_point(field_mutable_list:CMvpData.mvps)
  return &_impl_.mvps_;
}
inline const ::CMvpData_MvpDatum& CMvpData::_internal_mvps(int index) const {
  return _impl_.mvps_.Get(index);
}
inline const ::CMvpData_MvpDatum& CMvpData::mvps(int index) const {
  // @@protoc_insertion_point(field_get:CMvpData.mvps)
  return _internal_mvps(index);
}
inline ::CMvpData_MvpDatum* CMvpData::_internal_add_mvps() {
  return _impl_.mvps_.Add();
}
inline ::CMvpData_MvpDatum* CMvpData::add_mvps() {
  ::CMvpData_MvpDatum* _add = _internal_add_mvps();
  // @@protoc_insertion_point(field_add:CMvpData.mvps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMvpData_MvpDatum >&
CMvpData::mvps() const {
  // @@protoc_insertion_point(field_list:CMvpData.mvps)
  return _impl_.mvps_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CSODOTAParty_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSODOTAParty_State>() {
  return ::CSODOTAParty_State_descriptor();
}
template <> struct is_proto_enum< ::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType>() {
  return ::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_descriptor();
}
template <> struct is_proto_enum< ::ELaneSelection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ELaneSelection>() {
  return ::ELaneSelection_descriptor();
}
template <> struct is_proto_enum< ::ELaneSelectionFlags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ELaneSelectionFlags>() {
  return ::ELaneSelectionFlags_descriptor();
}
template <> struct is_proto_enum< ::EPartyMatchmakingFlags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EPartyMatchmakingFlags>() {
  return ::EPartyMatchmakingFlags_descriptor();
}
template <> struct is_proto_enum< ::EHighPriorityMMState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EHighPriorityMMState>() {
  return ::EHighPriorityMMState_descriptor();
}
template <> struct is_proto_enum< ::EReadyCheckStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EReadyCheckStatus>() {
  return ::EReadyCheckStatus_descriptor();
}
template <> struct is_proto_enum< ::EReadyCheckRequestResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EReadyCheckRequestResult>() {
  return ::EReadyCheckRequestResult_descriptor();
}
template <> struct is_proto_enum< ::EMatchBehaviorScoreVariance> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EMatchBehaviorScoreVariance>() {
  return ::EMatchBehaviorScoreVariance_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto
