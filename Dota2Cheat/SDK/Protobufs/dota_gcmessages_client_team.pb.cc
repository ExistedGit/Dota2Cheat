// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_team.proto

#include "dota_gcmessages_client_team.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgDOTATeamInfo_HeroStats::CMsgDOTATeamInfo_HeroStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.picks_)*/0u
  , /*decltype(_impl_.wins_)*/0u
  , /*decltype(_impl_.bans_)*/0u
  , /*decltype(_impl_.avg_kills_)*/0
  , /*decltype(_impl_.avg_deaths_)*/0
  , /*decltype(_impl_.avg_assists_)*/0
  , /*decltype(_impl_.avg_gpm_)*/0
  , /*decltype(_impl_.avg_xpm_)*/0} {}
struct CMsgDOTATeamInfo_HeroStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTATeamInfo_HeroStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTATeamInfo_HeroStatsDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInfo_HeroStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTATeamInfo_HeroStatsDefaultTypeInternal _CMsgDOTATeamInfo_HeroStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTATeamInfo_MemberStats::CMsgDOTATeamInfo_MemberStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.top_heroes_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.wins_with_team_)*/0u
  , /*decltype(_impl_.losses_with_team_)*/0u
  , /*decltype(_impl_.avg_kills_)*/0
  , /*decltype(_impl_.avg_deaths_)*/0
  , /*decltype(_impl_.avg_assists_)*/0} {}
struct CMsgDOTATeamInfo_MemberStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTATeamInfo_MemberStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTATeamInfo_MemberStatsDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInfo_MemberStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTATeamInfo_MemberStatsDefaultTypeInternal _CMsgDOTATeamInfo_MemberStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTATeamInfo_TeamStats::CMsgDOTATeamInfo_TeamStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.played_heroes_)*/{}
  , /*decltype(_impl_.farming_)*/0
  , /*decltype(_impl_.fighting_)*/0
  , /*decltype(_impl_.versatility_)*/0
  , /*decltype(_impl_.avg_kills_)*/0
  , /*decltype(_impl_.avg_deaths_)*/0
  , /*decltype(_impl_.avg_duration_)*/0} {}
struct CMsgDOTATeamInfo_TeamStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTATeamInfo_TeamStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTATeamInfo_TeamStatsDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInfo_TeamStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTATeamInfo_TeamStatsDefaultTypeInternal _CMsgDOTATeamInfo_TeamStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTATeamInfo_DPCResult::CMsgDOTATeamInfo_DPCResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.league_id_)*/0u
  , /*decltype(_impl_.standing_)*/0u
  , /*decltype(_impl_.points_)*/0u
  , /*decltype(_impl_.earnings_)*/0u
  , /*decltype(_impl_.timestamp_)*/0u} {}
struct CMsgDOTATeamInfo_DPCResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTATeamInfo_DPCResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTATeamInfo_DPCResultDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInfo_DPCResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTATeamInfo_DPCResultDefaultTypeInternal _CMsgDOTATeamInfo_DPCResult_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTATeamInfo_Member::CMsgDOTATeamInfo_Member(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pro_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.real_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.time_joined_)*/0u
  , /*decltype(_impl_.admin_)*/false
  , /*decltype(_impl_.role_)*/0} {}
struct CMsgDOTATeamInfo_MemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTATeamInfo_MemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTATeamInfo_MemberDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInfo_Member _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTATeamInfo_MemberDefaultTypeInternal _CMsgDOTATeamInfo_Member_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTATeamInfo_AuditEntry::CMsgDOTATeamInfo_AuditEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.audit_action_)*/0u
  , /*decltype(_impl_.timestamp_)*/0u
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgDOTATeamInfo_AuditEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTATeamInfo_AuditEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTATeamInfo_AuditEntryDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInfo_AuditEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTATeamInfo_AuditEntryDefaultTypeInternal _CMsgDOTATeamInfo_AuditEntry_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTATeamInfo::CMsgDOTATeamInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.members_)*/{}
  , /*decltype(_impl_.registered_member_account_ids_)*/{}
  , /*decltype(_impl_.audit_entries_)*/{}
  , /*decltype(_impl_.member_stats_)*/{}
  , /*decltype(_impl_.dpc_results_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_logo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.abbreviation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.color_primary_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.color_secondary_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_stats_)*/nullptr
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_.time_created_)*/0u
  , /*decltype(_impl_.ugc_logo_)*/uint64_t{0u}
  , /*decltype(_impl_.pro_)*/false
  , /*decltype(_impl_.pickup_team_)*/false
  , /*decltype(_impl_.wins_)*/0u
  , /*decltype(_impl_.ugc_base_logo_)*/uint64_t{0u}
  , /*decltype(_impl_.ugc_banner_logo_)*/uint64_t{0u}
  , /*decltype(_impl_.ugc_sponsor_logo_)*/uint64_t{0u}
  , /*decltype(_impl_.losses_)*/0u
  , /*decltype(_impl_.games_played_total_)*/0u
  , /*decltype(_impl_.games_played_matchmaking_)*/0u
  , /*decltype(_impl_.region_)*/0
  , /*decltype(_impl_.coach_account_id_)*/0u
  , /*decltype(_impl_.team_captain_)*/0u} {}
struct CMsgDOTATeamInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTATeamInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTATeamInfoDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTATeamInfoDefaultTypeInternal _CMsgDOTATeamInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTATeamsInfo::CMsgDOTATeamsInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.teams_)*/{}
  , /*decltype(_impl_.league_id_)*/0u} {}
struct CMsgDOTATeamsInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTATeamsInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTATeamsInfoDefaultTypeInternal() {}
  union {
    CMsgDOTATeamsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTATeamsInfoDefaultTypeInternal _CMsgDOTATeamsInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTATeamInfoList::CMsgDOTATeamInfoList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.teams_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgDOTATeamInfoListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTATeamInfoListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTATeamInfoListDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInfoList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTATeamInfoListDefaultTypeInternal _CMsgDOTATeamInfoList_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAMyTeamInfoRequest::CMsgDOTAMyTeamInfoRequest(
    ::_pbi::ConstantInitialized) {}
struct CMsgDOTAMyTeamInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAMyTeamInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAMyTeamInfoRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAMyTeamInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAMyTeamInfoRequestDefaultTypeInternal _CMsgDOTAMyTeamInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTACreateTeam::CMsgDOTACreateTeam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.abbreviation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.logo_)*/uint64_t{0u}
  , /*decltype(_impl_.base_logo_)*/uint64_t{0u}
  , /*decltype(_impl_.banner_logo_)*/uint64_t{0u}
  , /*decltype(_impl_.sponsor_logo_)*/uint64_t{0u}
  , /*decltype(_impl_.pickup_team_)*/false} {}
struct CMsgDOTACreateTeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTACreateTeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTACreateTeamDefaultTypeInternal() {}
  union {
    CMsgDOTACreateTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTACreateTeamDefaultTypeInternal _CMsgDOTACreateTeam_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTACreateTeamResponse::CMsgDOTACreateTeamResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_.result_)*/-1} {}
struct CMsgDOTACreateTeamResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTACreateTeamResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTACreateTeamResponseDefaultTypeInternal() {}
  union {
    CMsgDOTACreateTeamResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTACreateTeamResponseDefaultTypeInternal _CMsgDOTACreateTeamResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAEditTeamDetails::CMsgDOTAEditTeamDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.abbreviation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.logo_)*/uint64_t{0u}
  , /*decltype(_impl_.base_logo_)*/uint64_t{0u}
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_.in_use_by_party_)*/false
  , /*decltype(_impl_.banner_logo_)*/uint64_t{0u}
  , /*decltype(_impl_.sponsor_logo_)*/uint64_t{0u}} {}
struct CMsgDOTAEditTeamDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAEditTeamDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAEditTeamDetailsDefaultTypeInternal() {}
  union {
    CMsgDOTAEditTeamDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAEditTeamDetailsDefaultTypeInternal _CMsgDOTAEditTeamDetails_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAEditTeamDetailsResponse::CMsgDOTAEditTeamDetailsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/0} {}
struct CMsgDOTAEditTeamDetailsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAEditTeamDetailsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAEditTeamDetailsResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAEditTeamDetailsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAEditTeamDetailsResponseDefaultTypeInternal _CMsgDOTAEditTeamDetailsResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTATeamInvite_InviterToGC::CMsgDOTATeamInvite_InviterToGC(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.team_id_)*/0u} {}
struct CMsgDOTATeamInvite_InviterToGCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTATeamInvite_InviterToGCDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTATeamInvite_InviterToGCDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInvite_InviterToGC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTATeamInvite_InviterToGCDefaultTypeInternal _CMsgDOTATeamInvite_InviterToGC_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTATeamInvite_GCImmediateResponseToInviter::CMsgDOTATeamInvite_GCImmediateResponseToInviter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.invitee_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.required_play_time_)*/0u} {}
struct CMsgDOTATeamInvite_GCImmediateResponseToInviterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTATeamInvite_GCImmediateResponseToInviterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTATeamInvite_GCImmediateResponseToInviterDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInvite_GCImmediateResponseToInviter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTATeamInvite_GCImmediateResponseToInviterDefaultTypeInternal _CMsgDOTATeamInvite_GCImmediateResponseToInviter_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTATeamInvite_GCRequestToInvitee::CMsgDOTATeamInvite_GCRequestToInvitee(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.logo_)*/uint64_t{0u}
  , /*decltype(_impl_.inviter_account_id_)*/0u} {}
struct CMsgDOTATeamInvite_GCRequestToInviteeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTATeamInvite_GCRequestToInviteeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTATeamInvite_GCRequestToInviteeDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInvite_GCRequestToInvitee _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTATeamInvite_GCRequestToInviteeDefaultTypeInternal _CMsgDOTATeamInvite_GCRequestToInvitee_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTATeamInvite_InviteeResponseToGC::CMsgDOTATeamInvite_InviteeResponseToGC(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/0} {}
struct CMsgDOTATeamInvite_InviteeResponseToGCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTATeamInvite_InviteeResponseToGCDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTATeamInvite_InviteeResponseToGCDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInvite_InviteeResponseToGC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTATeamInvite_InviteeResponseToGCDefaultTypeInternal _CMsgDOTATeamInvite_InviteeResponseToGC_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTATeamInvite_GCResponseToInviter::CMsgDOTATeamInvite_GCResponseToInviter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.invitee_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/0} {}
struct CMsgDOTATeamInvite_GCResponseToInviterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTATeamInvite_GCResponseToInviterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTATeamInvite_GCResponseToInviterDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInvite_GCResponseToInviter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTATeamInvite_GCResponseToInviterDefaultTypeInternal _CMsgDOTATeamInvite_GCResponseToInviter_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTATeamInvite_GCResponseToInvitee::CMsgDOTATeamInvite_GCResponseToInvitee(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/0} {}
struct CMsgDOTATeamInvite_GCResponseToInviteeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTATeamInvite_GCResponseToInviteeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTATeamInvite_GCResponseToInviteeDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInvite_GCResponseToInvitee _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTATeamInvite_GCResponseToInviteeDefaultTypeInternal _CMsgDOTATeamInvite_GCResponseToInvitee_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAKickTeamMember::CMsgDOTAKickTeamMember(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.team_id_)*/0u} {}
struct CMsgDOTAKickTeamMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAKickTeamMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAKickTeamMemberDefaultTypeInternal() {}
  union {
    CMsgDOTAKickTeamMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAKickTeamMemberDefaultTypeInternal _CMsgDOTAKickTeamMember_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAKickTeamMemberResponse::CMsgDOTAKickTeamMemberResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/0} {}
struct CMsgDOTAKickTeamMemberResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAKickTeamMemberResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAKickTeamMemberResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAKickTeamMemberResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAKickTeamMemberResponseDefaultTypeInternal _CMsgDOTAKickTeamMemberResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTATransferTeamAdmin::CMsgDOTATransferTeamAdmin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.new_admin_account_id_)*/0u
  , /*decltype(_impl_.team_id_)*/0u} {}
struct CMsgDOTATransferTeamAdminDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTATransferTeamAdminDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTATransferTeamAdminDefaultTypeInternal() {}
  union {
    CMsgDOTATransferTeamAdmin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTATransferTeamAdminDefaultTypeInternal _CMsgDOTATransferTeamAdmin_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTATransferTeamAdminResponse::CMsgDOTATransferTeamAdminResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/0} {}
struct CMsgDOTATransferTeamAdminResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTATransferTeamAdminResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTATransferTeamAdminResponseDefaultTypeInternal() {}
  union {
    CMsgDOTATransferTeamAdminResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTATransferTeamAdminResponseDefaultTypeInternal _CMsgDOTATransferTeamAdminResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTALeaveTeam::CMsgDOTALeaveTeam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_id_)*/0u} {}
struct CMsgDOTALeaveTeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTALeaveTeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTALeaveTeamDefaultTypeInternal() {}
  union {
    CMsgDOTALeaveTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTALeaveTeamDefaultTypeInternal _CMsgDOTALeaveTeam_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTALeaveTeamResponse::CMsgDOTALeaveTeamResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/0} {}
struct CMsgDOTALeaveTeamResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTALeaveTeamResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTALeaveTeamResponseDefaultTypeInternal() {}
  union {
    CMsgDOTALeaveTeamResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTALeaveTeamResponseDefaultTypeInternal _CMsgDOTALeaveTeamResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTABetaParticipation::CMsgDOTABetaParticipation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.access_rights_)*/0u} {}
struct CMsgDOTABetaParticipationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTABetaParticipationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTABetaParticipationDefaultTypeInternal() {}
  union {
    CMsgDOTABetaParticipation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTABetaParticipationDefaultTypeInternal _CMsgDOTABetaParticipation_default_instance_;
static ::_pb::Metadata file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[27];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto[6];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto = nullptr;

const uint32_t TableStruct_dota_5fgcmessages_5fclient_5fteam_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_HeroStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_HeroStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_HeroStats, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_HeroStats, _impl_.picks_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_HeroStats, _impl_.wins_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_HeroStats, _impl_.bans_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_HeroStats, _impl_.avg_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_HeroStats, _impl_.avg_deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_HeroStats, _impl_.avg_assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_HeroStats, _impl_.avg_gpm_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_HeroStats, _impl_.avg_xpm_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_MemberStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_MemberStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_MemberStats, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_MemberStats, _impl_.wins_with_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_MemberStats, _impl_.losses_with_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_MemberStats, _impl_.top_heroes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_MemberStats, _impl_.avg_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_MemberStats, _impl_.avg_deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_MemberStats, _impl_.avg_assists_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_TeamStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_TeamStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_TeamStats, _impl_.played_heroes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_TeamStats, _impl_.farming_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_TeamStats, _impl_.fighting_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_TeamStats, _impl_.versatility_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_TeamStats, _impl_.avg_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_TeamStats, _impl_.avg_deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_TeamStats, _impl_.avg_duration_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_DPCResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_DPCResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_DPCResult, _impl_.league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_DPCResult, _impl_.standing_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_DPCResult, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_DPCResult, _impl_.earnings_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_DPCResult, _impl_.timestamp_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_Member, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_Member, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_Member, _impl_.time_joined_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_Member, _impl_.admin_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_Member, _impl_.pro_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_Member, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_Member, _impl_.real_name_),
  2,
  3,
  4,
  0,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_AuditEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_AuditEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_AuditEntry, _impl_.audit_action_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_AuditEntry, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_AuditEntry, _impl_.account_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.members_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.time_created_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.pro_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.pickup_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.ugc_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.ugc_base_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.ugc_banner_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.ugc_sponsor_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.country_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.wins_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.losses_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.games_played_total_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.games_played_matchmaking_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.url_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.registered_member_account_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.coach_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.audit_entries_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.abbreviation_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.member_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.team_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.dpc_results_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.color_primary_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.color_secondary_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _impl_.team_captain_),
  ~0u,
  9,
  0,
  1,
  10,
  12,
  13,
  11,
  15,
  16,
  17,
  2,
  3,
  14,
  18,
  19,
  20,
  4,
  ~0u,
  22,
  ~0u,
  21,
  5,
  ~0u,
  8,
  ~0u,
  6,
  7,
  23,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamsInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamsInfo, _impl_.league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamsInfo, _impl_.teams_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfoList, _impl_.teams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMyTeamInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, _impl_.logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, _impl_.base_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, _impl_.banner_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, _impl_.sponsor_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, _impl_.country_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, _impl_.pickup_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, _impl_.abbreviation_),
  0,
  1,
  5,
  6,
  7,
  8,
  2,
  3,
  9,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeamResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeamResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeamResponse, _impl_.team_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, _impl_.logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, _impl_.base_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, _impl_.banner_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, _impl_.sponsor_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, _impl_.country_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, _impl_.in_use_by_party_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, _impl_.abbreviation_),
  7,
  0,
  1,
  5,
  6,
  9,
  10,
  2,
  3,
  8,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetailsResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetailsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetailsResponse, _impl_.result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_InviterToGC, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_InviterToGC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_InviterToGC, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_InviterToGC, _impl_.team_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCImmediateResponseToInviter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCImmediateResponseToInviter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCImmediateResponseToInviter, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCImmediateResponseToInviter, _impl_.invitee_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCImmediateResponseToInviter, _impl_.required_play_time_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCRequestToInvitee, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCRequestToInvitee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCRequestToInvitee, _impl_.inviter_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCRequestToInvitee, _impl_.team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCRequestToInvitee, _impl_.team_tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCRequestToInvitee, _impl_.logo_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_InviteeResponseToGC, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_InviteeResponseToGC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_InviteeResponseToGC, _impl_.result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCResponseToInviter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCResponseToInviter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCResponseToInviter, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCResponseToInviter, _impl_.invitee_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCResponseToInvitee, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCResponseToInvitee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCResponseToInvitee, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCResponseToInvitee, _impl_.team_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAKickTeamMember, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAKickTeamMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAKickTeamMember, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAKickTeamMember, _impl_.team_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAKickTeamMemberResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAKickTeamMemberResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAKickTeamMemberResponse, _impl_.result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATransferTeamAdmin, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATransferTeamAdmin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATransferTeamAdmin, _impl_.new_admin_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATransferTeamAdmin, _impl_.team_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATransferTeamAdminResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATransferTeamAdminResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATransferTeamAdminResponse, _impl_.result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaveTeam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaveTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaveTeam, _impl_.team_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaveTeamResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaveTeamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaveTeamResponse, _impl_.result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABetaParticipation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABetaParticipation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABetaParticipation, _impl_.access_rights_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, -1, sizeof(::CMsgDOTATeamInfo_HeroStats)},
  { 24, 37, -1, sizeof(::CMsgDOTATeamInfo_MemberStats)},
  { 44, 57, -1, sizeof(::CMsgDOTATeamInfo_TeamStats)},
  { 64, 75, -1, sizeof(::CMsgDOTATeamInfo_DPCResult)},
  { 80, 92, -1, sizeof(::CMsgDOTATeamInfo_Member)},
  { 98, 107, -1, sizeof(::CMsgDOTATeamInfo_AuditEntry)},
  { 110, 145, -1, sizeof(::CMsgDOTATeamInfo)},
  { 174, 182, -1, sizeof(::CMsgDOTATeamsInfo)},
  { 184, -1, -1, sizeof(::CMsgDOTATeamInfoList)},
  { 191, -1, -1, sizeof(::CMsgDOTAMyTeamInfoRequest)},
  { 197, 213, -1, sizeof(::CMsgDOTACreateTeam)},
  { 223, 231, -1, sizeof(::CMsgDOTACreateTeamResponse)},
  { 233, 250, -1, sizeof(::CMsgDOTAEditTeamDetails)},
  { 261, 268, -1, sizeof(::CMsgDOTAEditTeamDetailsResponse)},
  { 269, 277, -1, sizeof(::CMsgDOTATeamInvite_InviterToGC)},
  { 279, 288, -1, sizeof(::CMsgDOTATeamInvite_GCImmediateResponseToInviter)},
  { 291, 301, -1, sizeof(::CMsgDOTATeamInvite_GCRequestToInvitee)},
  { 305, 312, -1, sizeof(::CMsgDOTATeamInvite_InviteeResponseToGC)},
  { 313, 321, -1, sizeof(::CMsgDOTATeamInvite_GCResponseToInviter)},
  { 323, 331, -1, sizeof(::CMsgDOTATeamInvite_GCResponseToInvitee)},
  { 333, 341, -1, sizeof(::CMsgDOTAKickTeamMember)},
  { 343, 350, -1, sizeof(::CMsgDOTAKickTeamMemberResponse)},
  { 351, 359, -1, sizeof(::CMsgDOTATransferTeamAdmin)},
  { 361, 368, -1, sizeof(::CMsgDOTATransferTeamAdminResponse)},
  { 369, 376, -1, sizeof(::CMsgDOTALeaveTeam)},
  { 377, 384, -1, sizeof(::CMsgDOTALeaveTeamResponse)},
  { 385, 392, -1, sizeof(::CMsgDOTABetaParticipation)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgDOTATeamInfo_HeroStats_default_instance_._instance,
  &::_CMsgDOTATeamInfo_MemberStats_default_instance_._instance,
  &::_CMsgDOTATeamInfo_TeamStats_default_instance_._instance,
  &::_CMsgDOTATeamInfo_DPCResult_default_instance_._instance,
  &::_CMsgDOTATeamInfo_Member_default_instance_._instance,
  &::_CMsgDOTATeamInfo_AuditEntry_default_instance_._instance,
  &::_CMsgDOTATeamInfo_default_instance_._instance,
  &::_CMsgDOTATeamsInfo_default_instance_._instance,
  &::_CMsgDOTATeamInfoList_default_instance_._instance,
  &::_CMsgDOTAMyTeamInfoRequest_default_instance_._instance,
  &::_CMsgDOTACreateTeam_default_instance_._instance,
  &::_CMsgDOTACreateTeamResponse_default_instance_._instance,
  &::_CMsgDOTAEditTeamDetails_default_instance_._instance,
  &::_CMsgDOTAEditTeamDetailsResponse_default_instance_._instance,
  &::_CMsgDOTATeamInvite_InviterToGC_default_instance_._instance,
  &::_CMsgDOTATeamInvite_GCImmediateResponseToInviter_default_instance_._instance,
  &::_CMsgDOTATeamInvite_GCRequestToInvitee_default_instance_._instance,
  &::_CMsgDOTATeamInvite_InviteeResponseToGC_default_instance_._instance,
  &::_CMsgDOTATeamInvite_GCResponseToInviter_default_instance_._instance,
  &::_CMsgDOTATeamInvite_GCResponseToInvitee_default_instance_._instance,
  &::_CMsgDOTAKickTeamMember_default_instance_._instance,
  &::_CMsgDOTAKickTeamMemberResponse_default_instance_._instance,
  &::_CMsgDOTATransferTeamAdmin_default_instance_._instance,
  &::_CMsgDOTATransferTeamAdminResponse_default_instance_._instance,
  &::_CMsgDOTALeaveTeam_default_instance_._instance,
  &::_CMsgDOTALeaveTeamResponse_default_instance_._instance,
  &::_CMsgDOTABetaParticipation_default_instance_._instance,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fclient_5fteam_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!dota_gcmessages_client_team.proto\032\027dot"
  "a_shared_enums.proto\"\237\r\n\020CMsgDOTATeamInf"
  "o\022)\n\007members\030\001 \003(\0132\030.CMsgDOTATeamInfo.Me"
  "mber\022\017\n\007team_id\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\013\n\003t"
  "ag\030\004 \001(\t\022\024\n\014time_created\030\005 \001(\r\022\013\n\003pro\030\006 "
  "\001(\010\022\023\n\013pickup_team\030\010 \001(\010\022\020\n\010ugc_logo\030\t \001"
  "(\004\022\025\n\rugc_base_logo\030\n \001(\004\022\027\n\017ugc_banner_"
  "logo\030\013 \001(\004\022\030\n\020ugc_sponsor_logo\030\014 \001(\004\022\024\n\014"
  "country_code\030\r \001(\t\022\013\n\003url\030\016 \001(\t\022\014\n\004wins\030"
  "\017 \001(\r\022\016\n\006losses\030\020 \001(\r\022\032\n\022games_played_to"
  "tal\030\023 \001(\r\022 \n\030games_played_matchmaking\030\024 "
  "\001(\r\022\020\n\010url_logo\030\030 \001(\t\022%\n\035registered_memb"
  "er_account_ids\030\036 \003(\r\022\030\n\020coach_account_id"
  "\030$ \001(\r\0223\n\raudit_entries\030\037 \003(\0132\034.CMsgDOTA"
  "TeamInfo.AuditEntry\0223\n\006region\030\035 \001(\0162\016.EL"
  "eagueRegion:\023LEAGUE_REGION_UNSET\022\024\n\014abbr"
  "eviation\030  \001(\t\0223\n\014member_stats\030! \003(\0132\035.C"
  "MsgDOTATeamInfo.MemberStats\022/\n\nteam_stat"
  "s\030\" \001(\0132\033.CMsgDOTATeamInfo.TeamStats\0220\n\013"
  "dpc_results\030# \003(\0132\033.CMsgDOTATeamInfo.DPC"
  "Result\022\025\n\rcolor_primary\030% \001(\t\022\027\n\017color_s"
  "econdary\030& \001(\t\022\024\n\014team_captain\030\' \001(\r\032\245\001\n"
  "\tHeroStats\022\017\n\007hero_id\030\001 \001(\r\022\r\n\005picks\030\002 \001"
  "(\r\022\014\n\004wins\030\003 \001(\r\022\014\n\004bans\030\004 \001(\r\022\021\n\tavg_ki"
  "lls\030\005 \001(\002\022\022\n\navg_deaths\030\006 \001(\002\022\023\n\013avg_ass"
  "ists\030\007 \001(\002\022\017\n\007avg_gpm\030\010 \001(\002\022\017\n\007avg_xpm\030\t"
  " \001(\002\032\300\001\n\013MemberStats\022\022\n\naccount_id\030\001 \001(\r"
  "\022\026\n\016wins_with_team\030\002 \001(\r\022\030\n\020losses_with_"
  "team\030\003 \001(\r\022/\n\ntop_heroes\030\004 \003(\0132\033.CMsgDOT"
  "ATeamInfo.HeroStats\022\021\n\tavg_kills\030\005 \001(\002\022\022"
  "\n\navg_deaths\030\006 \001(\002\022\023\n\013avg_assists\030\007 \001(\002\032"
  "\264\001\n\tTeamStats\0222\n\rplayed_heroes\030\001 \003(\0132\033.C"
  "MsgDOTATeamInfo.HeroStats\022\017\n\007farming\030\002 \001"
  "(\002\022\020\n\010fighting\030\003 \001(\002\022\023\n\013versatility\030\004 \001("
  "\002\022\021\n\tavg_kills\030\005 \001(\002\022\022\n\navg_deaths\030\006 \001(\002"
  "\022\024\n\014avg_duration\030\007 \001(\002\032e\n\tDPCResult\022\021\n\tl"
  "eague_id\030\001 \001(\r\022\020\n\010standing\030\002 \001(\r\022\016\n\006poin"
  "ts\030\003 \001(\r\022\020\n\010earnings\030\004 \001(\r\022\021\n\ttimestamp\030"
  "\005 \001(\r\032\233\001\n\006Member\022\022\n\naccount_id\030\001 \001(\r\022\023\n\013"
  "time_joined\030\002 \001(\r\022\r\n\005admin\030\003 \001(\010\022\020\n\010pro_"
  "name\030\006 \001(\t\0224\n\004role\030\010 \001(\0162\016.Fantasy_Roles"
  ":\026FANTASY_ROLE_UNDEFINED\022\021\n\treal_name\030\t "
  "\001(\t\032I\n\nAuditEntry\022\024\n\014audit_action\030\001 \001(\r\022"
  "\021\n\ttimestamp\030\002 \001(\r\022\022\n\naccount_id\030\003 \001(\r\"H"
  "\n\021CMsgDOTATeamsInfo\022\021\n\tleague_id\030\001 \001(\r\022 "
  "\n\005teams\030\002 \003(\0132\021.CMsgDOTATeamInfo\"8\n\024CMsg"
  "DOTATeamInfoList\022 \n\005teams\030\001 \003(\0132\021.CMsgDO"
  "TATeamInfo\"\033\n\031CMsgDOTAMyTeamInfoRequest\""
  "\311\001\n\022CMsgDOTACreateTeam\022\014\n\004name\030\001 \001(\t\022\013\n\003"
  "tag\030\002 \001(\t\022\014\n\004logo\030\003 \001(\004\022\021\n\tbase_logo\030\004 \001"
  "(\004\022\023\n\013banner_logo\030\005 \001(\004\022\024\n\014sponsor_logo\030"
  "\006 \001(\004\022\024\n\014country_code\030\007 \001(\t\022\013\n\003url\030\010 \001(\t"
  "\022\023\n\013pickup_team\030\t \001(\010\022\024\n\014abbreviation\030\n "
  "\001(\t\"\227\004\n\032CMsgDOTACreateTeamResponse\022;\n\006re"
  "sult\030\001 \001(\0162\".CMsgDOTACreateTeamResponse."
  "Result:\007INVALID\022\017\n\007team_id\030\002 \001(\r\"\252\003\n\006Res"
  "ult\022\024\n\007INVALID\020\377\377\377\377\377\377\377\377\377\001\022\013\n\007SUCCESS\020\000\022\016"
  "\n\nNAME_EMPTY\020\001\022\027\n\023NAME_BAD_CHARACTERS\020\002\022"
  "\016\n\nNAME_TAKEN\020\003\022\021\n\rNAME_TOO_LONG\020\004\022\r\n\tTA"
  "G_EMPTY\020\005\022\026\n\022TAG_BAD_CHARACTERS\020\006\022\r\n\tTAG"
  "_TAKEN\020\007\022\020\n\014TAG_TOO_LONG\020\010\022\020\n\014CREATOR_BU"
  "SY\020\t\022\025\n\021UNSPECIFIED_ERROR\020\n\022\036\n\032CREATOR_T"
  "EAM_LIMIT_REACHED\020\013\022\013\n\007NO_LOGO\020\014\022\"\n\036CREA"
  "TOR_TEAM_CREATION_COOLDOWN\020\r\022\026\n\022LOGO_UPL"
  "OAD_FAILED\020\016\022\035\n\031NAME_CHANGED_TOO_RECENTL"
  "Y\020\017\022\036\n\032CREATOR_INSUFFICIENT_LEVEL\020\020\022\030\n\024I"
  "NVALID_ACCOUNT_TYPE\020\021\"\343\001\n\027CMsgDOTAEditTe"
  "amDetails\022\017\n\007team_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t"
  "\022\013\n\003tag\030\003 \001(\t\022\014\n\004logo\030\004 \001(\004\022\021\n\tbase_logo"
  "\030\005 \001(\004\022\023\n\013banner_logo\030\006 \001(\004\022\024\n\014sponsor_l"
  "ogo\030\007 \001(\004\022\024\n\014country_code\030\010 \001(\t\022\013\n\003url\030\t"
  " \001(\t\022\027\n\017in_use_by_party\030\n \001(\010\022\024\n\014abbrevi"
  "ation\030\013 \001(\t\"\355\001\n\037CMsgDOTAEditTeamDetailsR"
  "esponse\022@\n\006result\030\001 \001(\0162\'.CMsgDOTAEditTe"
  "amDetailsResponse.Result:\007SUCCESS\"\207\001\n\006Re"
  "sult\022\013\n\007SUCCESS\020\000\022 \n\034FAILURE_INVALID_ACC"
  "OUNT_TYPE\020\001\022\026\n\022FAILURE_NOT_MEMBER\020\002\022\027\n\023F"
  "AILURE_TEAM_LOCKED\020\003\022\035\n\031FAILURE_UNSPECIF"
  "IED_ERROR\020\004\"E\n\036CMsgDOTATeamInvite_Invite"
  "rToGC\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007team_id\030\002 \001"
  "(\r\"\234\001\n/CMsgDOTATeamInvite_GCImmediateRes"
  "ponseToInviter\0227\n\006result\030\001 \001(\0162\022.ETeamIn"
  "viteResult:\023TEAM_INVITE_SUCCESS\022\024\n\014invit"
  "ee_name\030\002 \001(\t\022\032\n\022required_play_time\030\003 \001("
  "\r\"v\n%CMsgDOTATeamInvite_GCRequestToInvit"
  "ee\022\032\n\022inviter_account_id\030\001 \001(\r\022\021\n\tteam_n"
  "ame\030\002 \001(\t\022\020\n\010team_tag\030\003 \001(\t\022\014\n\004logo\030\004 \001("
  "\004\"a\n&CMsgDOTATeamInvite_InviteeResponseT"
  "oGC\0227\n\006result\030\001 \001(\0162\022.ETeamInviteResult:"
  "\023TEAM_INVITE_SUCCESS\"w\n&CMsgDOTATeamInvi"
  "te_GCResponseToInviter\0227\n\006result\030\001 \001(\0162\022"
  ".ETeamInviteResult:\023TEAM_INVITE_SUCCESS\022"
  "\024\n\014invitee_name\030\002 \001(\t\"t\n&CMsgDOTATeamInv"
  "ite_GCResponseToInvitee\0227\n\006result\030\001 \001(\0162"
  "\022.ETeamInviteResult:\023TEAM_INVITE_SUCCESS"
  "\022\021\n\tteam_name\030\002 \001(\t\"=\n\026CMsgDOTAKickTeamM"
  "ember\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007team_id\030\002 \001"
  "(\r\"\220\002\n\036CMsgDOTAKickTeamMemberResponse\022\?\n"
  "\006result\030\001 \001(\0162&.CMsgDOTAKickTeamMemberRe"
  "sponse.Result:\007SUCCESS\"\254\001\n\006Result\022\013\n\007SUC"
  "CESS\020\000\022 \n\034FAILURE_INVALID_ACCOUNT_TYPE\020\001"
  "\022\034\n\030FAILURE_KICKER_NOT_ADMIN\020\002\022\035\n\031FAILUR"
  "E_KICKEE_NOT_MEMBER\020\003\022\027\n\023FAILURE_TEAM_LO"
  "CKED\020\004\022\035\n\031FAILURE_UNSPECIFIED_ERROR\020\005\"J\n"
  "\031CMsgDOTATransferTeamAdmin\022\034\n\024new_admin_"
  "account_id\030\001 \001(\r\022\017\n\007team_id\030\002 \001(\r\"\211\002\n!CM"
  "sgDOTATransferTeamAdminResponse\022B\n\006resul"
  "t\030\001 \001(\0162).CMsgDOTATransferTeamAdminRespo"
  "nse.Result:\007SUCCESS\"\237\001\n\006Result\022\013\n\007SUCCES"
  "S\020\000\022 \n\034FAILURE_INVALID_ACCOUNT_TYPE\020\001\022\025\n"
  "\021FAILURE_NOT_ADMIN\020\002\022\030\n\024FAILURE_SAME_ACC"
  "OUNT\020\003\022\026\n\022FAILURE_NOT_MEMBER\020\004\022\035\n\031FAILUR"
  "E_UNSPECIFIED_ERROR\020\005\"$\n\021CMsgDOTALeaveTe"
  "am\022\017\n\007team_id\030\001 \001(\r\"\276\001\n\031CMsgDOTALeaveTea"
  "mResponse\022:\n\006result\030\001 \001(\0162!.CMsgDOTALeav"
  "eTeamResponse.Result:\007SUCCESS\"e\n\006Result\022"
  "\013\n\007SUCCESS\020\000\022\026\n\022FAILURE_NOT_MEMBER\020\001\022\027\n\023"
  "FAILURE_TEAM_LOCKED\020\002\022\035\n\031FAILURE_UNSPECI"
  "FIED_ERROR\020\003\"2\n\031CMsgDOTABetaParticipatio"
  "n\022\025\n\raccess_rights\030\001 \001(\r*\336\004\n\021ETeamInvite"
  "Result\022\027\n\023TEAM_INVITE_SUCCESS\020\000\022\'\n#TEAM_"
  "INVITE_FAILURE_INVITE_REJECTED\020\001\022&\n\"TEAM"
  "_INVITE_FAILURE_INVITE_TIMEOUT\020\002\022*\n&TEAM"
  "_INVITE_ERROR_TEAM_AT_MEMBER_LIMIT\020\003\022!\n\035"
  "TEAM_INVITE_ERROR_TEAM_LOCKED\020\004\022+\n\'TEAM_"
  "INVITE_ERROR_INVITEE_NOT_AVAILABLE\020\005\022\"\n\036"
  "TEAM_INVITE_ERROR_INVITEE_BUSY\020\006\022,\n(TEAM"
  "_INVITE_ERROR_INVITEE_ALREADY_MEMBER\020\007\022+"
  "\n\'TEAM_INVITE_ERROR_INVITEE_AT_TEAM_LIMI"
  "T\020\010\0224\n0TEAM_INVITE_ERROR_INVITEE_INSUFFI"
  "CIENT_PLAY_TIME\020\t\0222\n.TEAM_INVITE_ERROR_I"
  "NVITER_INVALID_ACCOUNT_TYPE\020\n\022\'\n#TEAM_IN"
  "VITE_ERROR_INVITER_NOT_ADMIN\020\013\022.\n*TEAM_I"
  "NVITE_ERROR_INCORRECT_USER_RESPONDED\020\014\022!"
  "\n\035TEAM_INVITE_ERROR_UNSPECIFIED\020\r"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_deps[1] = {
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
};
static ::_pbi::once_flag descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto = {
    false, false, 5393, descriptor_table_protodef_dota_5fgcmessages_5fclient_5fteam_2eproto,
    "dota_gcmessages_client_team.proto",
    &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once, descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_deps, 1, 27,
    schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fclient_5fteam_2eproto::offsets,
    file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto,
    file_level_service_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter() {
  return &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fclient_5fteam_2eproto(&descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTACreateTeamResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto[0];
}
bool CMsgDOTACreateTeamResponse_Result_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::INVALID;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::SUCCESS;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_EMPTY;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_BAD_CHARACTERS;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_TAKEN;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_TOO_LONG;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::TAG_EMPTY;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::TAG_BAD_CHARACTERS;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::TAG_TAKEN;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::TAG_TOO_LONG;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::CREATOR_BUSY;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::UNSPECIFIED_ERROR;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::CREATOR_TEAM_LIMIT_REACHED;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NO_LOGO;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::CREATOR_TEAM_CREATION_COOLDOWN;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::LOGO_UPLOAD_FAILED;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_CHANGED_TOO_RECENTLY;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::CREATOR_INSUFFICIENT_LEVEL;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::INVALID_ACCOUNT_TYPE;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::Result_MIN;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::Result_MAX;
constexpr int CMsgDOTACreateTeamResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAEditTeamDetailsResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto[1];
}
bool CMsgDOTAEditTeamDetailsResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::SUCCESS;
constexpr CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::FAILURE_INVALID_ACCOUNT_TYPE;
constexpr CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::FAILURE_NOT_MEMBER;
constexpr CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::FAILURE_TEAM_LOCKED;
constexpr CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::FAILURE_UNSPECIFIED_ERROR;
constexpr CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::Result_MIN;
constexpr CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::Result_MAX;
constexpr int CMsgDOTAEditTeamDetailsResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAKickTeamMemberResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto[2];
}
bool CMsgDOTAKickTeamMemberResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::SUCCESS;
constexpr CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_INVALID_ACCOUNT_TYPE;
constexpr CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_KICKER_NOT_ADMIN;
constexpr CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_KICKEE_NOT_MEMBER;
constexpr CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_TEAM_LOCKED;
constexpr CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_UNSPECIFIED_ERROR;
constexpr CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::Result_MIN;
constexpr CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::Result_MAX;
constexpr int CMsgDOTAKickTeamMemberResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTATransferTeamAdminResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto[3];
}
bool CMsgDOTATransferTeamAdminResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::SUCCESS;
constexpr CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_INVALID_ACCOUNT_TYPE;
constexpr CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_NOT_ADMIN;
constexpr CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_SAME_ACCOUNT;
constexpr CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_NOT_MEMBER;
constexpr CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_UNSPECIFIED_ERROR;
constexpr CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::Result_MIN;
constexpr CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::Result_MAX;
constexpr int CMsgDOTATransferTeamAdminResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTALeaveTeamResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto[4];
}
bool CMsgDOTALeaveTeamResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::SUCCESS;
constexpr CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::FAILURE_NOT_MEMBER;
constexpr CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::FAILURE_TEAM_LOCKED;
constexpr CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::FAILURE_UNSPECIFIED_ERROR;
constexpr CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::Result_MIN;
constexpr CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::Result_MAX;
constexpr int CMsgDOTALeaveTeamResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETeamInviteResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto[5];
}
bool ETeamInviteResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgDOTATeamInfo_HeroStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInfo_HeroStats>()._impl_._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_picks(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bans(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_avg_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_avg_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_avg_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_avg_gpm(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_avg_xpm(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgDOTATeamInfo_HeroStats::CMsgDOTATeamInfo_HeroStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInfo.HeroStats)
}
CMsgDOTATeamInfo_HeroStats::CMsgDOTATeamInfo_HeroStats(const CMsgDOTATeamInfo_HeroStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTATeamInfo_HeroStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.picks_){}
    , decltype(_impl_.wins_){}
    , decltype(_impl_.bans_){}
    , decltype(_impl_.avg_kills_){}
    , decltype(_impl_.avg_deaths_){}
    , decltype(_impl_.avg_assists_){}
    , decltype(_impl_.avg_gpm_){}
    , decltype(_impl_.avg_xpm_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hero_id_, &from._impl_.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.avg_xpm_) -
    reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.avg_xpm_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInfo.HeroStats)
}

inline void CMsgDOTATeamInfo_HeroStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.picks_){0u}
    , decltype(_impl_.wins_){0u}
    , decltype(_impl_.bans_){0u}
    , decltype(_impl_.avg_kills_){0}
    , decltype(_impl_.avg_deaths_){0}
    , decltype(_impl_.avg_assists_){0}
    , decltype(_impl_.avg_gpm_){0}
    , decltype(_impl_.avg_xpm_){0}
  };
}

CMsgDOTATeamInfo_HeroStats::~CMsgDOTATeamInfo_HeroStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInfo.HeroStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTATeamInfo_HeroStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTATeamInfo_HeroStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTATeamInfo_HeroStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInfo.HeroStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.avg_gpm_) -
        reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.avg_gpm_));
  }
  _impl_.avg_xpm_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInfo_HeroStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 picks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_picks(&has_bits);
          _impl_.picks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 wins = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_wins(&has_bits);
          _impl_.wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bans = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_bans(&has_bits);
          _impl_.bans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float avg_kills = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_avg_kills(&has_bits);
          _impl_.avg_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float avg_deaths = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_avg_deaths(&has_bits);
          _impl_.avg_deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float avg_assists = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_avg_assists(&has_bits);
          _impl_.avg_assists_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float avg_gpm = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_avg_gpm(&has_bits);
          _impl_.avg_gpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float avg_xpm = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_avg_xpm(&has_bits);
          _impl_.avg_xpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTATeamInfo_HeroStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInfo.HeroStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 picks = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_picks(), target);
  }

  // optional uint32 wins = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_wins(), target);
  }

  // optional uint32 bans = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bans(), target);
  }

  // optional float avg_kills = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_avg_kills(), target);
  }

  // optional float avg_deaths = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_avg_deaths(), target);
  }

  // optional float avg_assists = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_avg_assists(), target);
  }

  // optional float avg_gpm = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_avg_gpm(), target);
  }

  // optional float avg_xpm = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_avg_xpm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInfo.HeroStats)
  return target;
}

size_t CMsgDOTATeamInfo_HeroStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInfo.HeroStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 picks = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_picks());
    }

    // optional uint32 wins = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_wins());
    }

    // optional uint32 bans = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bans());
    }

    // optional float avg_kills = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float avg_deaths = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float avg_assists = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float avg_gpm = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  // optional float avg_xpm = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTATeamInfo_HeroStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTATeamInfo_HeroStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTATeamInfo_HeroStats::GetClassData() const { return &_class_data_; }


void CMsgDOTATeamInfo_HeroStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTATeamInfo_HeroStats*>(&to_msg);
  auto& from = static_cast<const CMsgDOTATeamInfo_HeroStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInfo.HeroStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.picks_ = from._impl_.picks_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.wins_ = from._impl_.wins_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.bans_ = from._impl_.bans_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.avg_kills_ = from._impl_.avg_kills_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.avg_deaths_ = from._impl_.avg_deaths_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.avg_assists_ = from._impl_.avg_assists_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.avg_gpm_ = from._impl_.avg_gpm_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_avg_xpm(from._internal_avg_xpm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTATeamInfo_HeroStats::CopyFrom(const CMsgDOTATeamInfo_HeroStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInfo.HeroStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfo_HeroStats::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInfo_HeroStats::InternalSwap(CMsgDOTATeamInfo_HeroStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_HeroStats, _impl_.avg_xpm_)
      + sizeof(CMsgDOTATeamInfo_HeroStats::_impl_.avg_xpm_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_HeroStats, _impl_.hero_id_)>(
          reinterpret_cast<char*>(&_impl_.hero_id_),
          reinterpret_cast<char*>(&other->_impl_.hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInfo_HeroStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[0]);
}

// ===================================================================

class CMsgDOTATeamInfo_MemberStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInfo_MemberStats>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wins_with_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_losses_with_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_avg_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_avg_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_avg_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgDOTATeamInfo_MemberStats::CMsgDOTATeamInfo_MemberStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInfo.MemberStats)
}
CMsgDOTATeamInfo_MemberStats::CMsgDOTATeamInfo_MemberStats(const CMsgDOTATeamInfo_MemberStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTATeamInfo_MemberStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.top_heroes_){from._impl_.top_heroes_}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.wins_with_team_){}
    , decltype(_impl_.losses_with_team_){}
    , decltype(_impl_.avg_kills_){}
    , decltype(_impl_.avg_deaths_){}
    , decltype(_impl_.avg_assists_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.avg_assists_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.avg_assists_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInfo.MemberStats)
}

inline void CMsgDOTATeamInfo_MemberStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.top_heroes_){arena}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.wins_with_team_){0u}
    , decltype(_impl_.losses_with_team_){0u}
    , decltype(_impl_.avg_kills_){0}
    , decltype(_impl_.avg_deaths_){0}
    , decltype(_impl_.avg_assists_){0}
  };
}

CMsgDOTATeamInfo_MemberStats::~CMsgDOTATeamInfo_MemberStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInfo.MemberStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTATeamInfo_MemberStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.top_heroes_.~RepeatedPtrField();
}

void CMsgDOTATeamInfo_MemberStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTATeamInfo_MemberStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInfo.MemberStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.top_heroes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.avg_assists_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.avg_assists_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInfo_MemberStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 wins_with_team = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_wins_with_team(&has_bits);
          _impl_.wins_with_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 losses_with_team = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_losses_with_team(&has_bits);
          _impl_.losses_with_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDOTATeamInfo.HeroStats top_heroes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_top_heroes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional float avg_kills = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_avg_kills(&has_bits);
          _impl_.avg_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float avg_deaths = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_avg_deaths(&has_bits);
          _impl_.avg_deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float avg_assists = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_avg_assists(&has_bits);
          _impl_.avg_assists_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTATeamInfo_MemberStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInfo.MemberStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 wins_with_team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_wins_with_team(), target);
  }

  // optional uint32 losses_with_team = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_losses_with_team(), target);
  }

  // repeated .CMsgDOTATeamInfo.HeroStats top_heroes = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_top_heroes_size()); i < n; i++) {
    const auto& repfield = this->_internal_top_heroes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional float avg_kills = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_avg_kills(), target);
  }

  // optional float avg_deaths = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_avg_deaths(), target);
  }

  // optional float avg_assists = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_avg_assists(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInfo.MemberStats)
  return target;
}

size_t CMsgDOTATeamInfo_MemberStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInfo.MemberStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTATeamInfo.HeroStats top_heroes = 4;
  total_size += 1UL * this->_internal_top_heroes_size();
  for (const auto& msg : this->_impl_.top_heroes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 wins_with_team = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_wins_with_team());
    }

    // optional uint32 losses_with_team = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_losses_with_team());
    }

    // optional float avg_kills = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float avg_deaths = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float avg_assists = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTATeamInfo_MemberStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTATeamInfo_MemberStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTATeamInfo_MemberStats::GetClassData() const { return &_class_data_; }


void CMsgDOTATeamInfo_MemberStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTATeamInfo_MemberStats*>(&to_msg);
  auto& from = static_cast<const CMsgDOTATeamInfo_MemberStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInfo.MemberStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.top_heroes_.MergeFrom(from._impl_.top_heroes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.wins_with_team_ = from._impl_.wins_with_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.losses_with_team_ = from._impl_.losses_with_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.avg_kills_ = from._impl_.avg_kills_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.avg_deaths_ = from._impl_.avg_deaths_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.avg_assists_ = from._impl_.avg_assists_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTATeamInfo_MemberStats::CopyFrom(const CMsgDOTATeamInfo_MemberStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInfo.MemberStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfo_MemberStats::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInfo_MemberStats::InternalSwap(CMsgDOTATeamInfo_MemberStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.top_heroes_.InternalSwap(&other->_impl_.top_heroes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_MemberStats, _impl_.avg_assists_)
      + sizeof(CMsgDOTATeamInfo_MemberStats::_impl_.avg_assists_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_MemberStats, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInfo_MemberStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[1]);
}

// ===================================================================

class CMsgDOTATeamInfo_TeamStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInfo_TeamStats>()._impl_._has_bits_);
  static void set_has_farming(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fighting(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_versatility(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_avg_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_avg_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_avg_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgDOTATeamInfo_TeamStats::CMsgDOTATeamInfo_TeamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInfo.TeamStats)
}
CMsgDOTATeamInfo_TeamStats::CMsgDOTATeamInfo_TeamStats(const CMsgDOTATeamInfo_TeamStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTATeamInfo_TeamStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.played_heroes_){from._impl_.played_heroes_}
    , decltype(_impl_.farming_){}
    , decltype(_impl_.fighting_){}
    , decltype(_impl_.versatility_){}
    , decltype(_impl_.avg_kills_){}
    , decltype(_impl_.avg_deaths_){}
    , decltype(_impl_.avg_duration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.farming_, &from._impl_.farming_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.avg_duration_) -
    reinterpret_cast<char*>(&_impl_.farming_)) + sizeof(_impl_.avg_duration_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInfo.TeamStats)
}

inline void CMsgDOTATeamInfo_TeamStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.played_heroes_){arena}
    , decltype(_impl_.farming_){0}
    , decltype(_impl_.fighting_){0}
    , decltype(_impl_.versatility_){0}
    , decltype(_impl_.avg_kills_){0}
    , decltype(_impl_.avg_deaths_){0}
    , decltype(_impl_.avg_duration_){0}
  };
}

CMsgDOTATeamInfo_TeamStats::~CMsgDOTATeamInfo_TeamStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInfo.TeamStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTATeamInfo_TeamStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.played_heroes_.~RepeatedPtrField();
}

void CMsgDOTATeamInfo_TeamStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTATeamInfo_TeamStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInfo.TeamStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.played_heroes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.farming_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.avg_duration_) -
        reinterpret_cast<char*>(&_impl_.farming_)) + sizeof(_impl_.avg_duration_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInfo_TeamStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgDOTATeamInfo.HeroStats played_heroes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_played_heroes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional float farming = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_farming(&has_bits);
          _impl_.farming_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fighting = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_fighting(&has_bits);
          _impl_.fighting_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float versatility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_versatility(&has_bits);
          _impl_.versatility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float avg_kills = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_avg_kills(&has_bits);
          _impl_.avg_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float avg_deaths = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_avg_deaths(&has_bits);
          _impl_.avg_deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float avg_duration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_avg_duration(&has_bits);
          _impl_.avg_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTATeamInfo_TeamStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInfo.TeamStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTATeamInfo.HeroStats played_heroes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_played_heroes_size()); i < n; i++) {
    const auto& repfield = this->_internal_played_heroes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional float farming = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_farming(), target);
  }

  // optional float fighting = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_fighting(), target);
  }

  // optional float versatility = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_versatility(), target);
  }

  // optional float avg_kills = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_avg_kills(), target);
  }

  // optional float avg_deaths = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_avg_deaths(), target);
  }

  // optional float avg_duration = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_avg_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInfo.TeamStats)
  return target;
}

size_t CMsgDOTATeamInfo_TeamStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInfo.TeamStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTATeamInfo.HeroStats played_heroes = 1;
  total_size += 1UL * this->_internal_played_heroes_size();
  for (const auto& msg : this->_impl_.played_heroes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float farming = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float fighting = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float versatility = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float avg_kills = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float avg_deaths = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float avg_duration = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTATeamInfo_TeamStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTATeamInfo_TeamStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTATeamInfo_TeamStats::GetClassData() const { return &_class_data_; }


void CMsgDOTATeamInfo_TeamStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTATeamInfo_TeamStats*>(&to_msg);
  auto& from = static_cast<const CMsgDOTATeamInfo_TeamStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInfo.TeamStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.played_heroes_.MergeFrom(from._impl_.played_heroes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.farming_ = from._impl_.farming_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.fighting_ = from._impl_.fighting_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.versatility_ = from._impl_.versatility_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.avg_kills_ = from._impl_.avg_kills_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.avg_deaths_ = from._impl_.avg_deaths_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.avg_duration_ = from._impl_.avg_duration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTATeamInfo_TeamStats::CopyFrom(const CMsgDOTATeamInfo_TeamStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInfo.TeamStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfo_TeamStats::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInfo_TeamStats::InternalSwap(CMsgDOTATeamInfo_TeamStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.played_heroes_.InternalSwap(&other->_impl_.played_heroes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_TeamStats, _impl_.avg_duration_)
      + sizeof(CMsgDOTATeamInfo_TeamStats::_impl_.avg_duration_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_TeamStats, _impl_.farming_)>(
          reinterpret_cast<char*>(&_impl_.farming_),
          reinterpret_cast<char*>(&other->_impl_.farming_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInfo_TeamStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[2]);
}

// ===================================================================

class CMsgDOTATeamInfo_DPCResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInfo_DPCResult>()._impl_._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_standing(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_points(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_earnings(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDOTATeamInfo_DPCResult::CMsgDOTATeamInfo_DPCResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInfo.DPCResult)
}
CMsgDOTATeamInfo_DPCResult::CMsgDOTATeamInfo_DPCResult(const CMsgDOTATeamInfo_DPCResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTATeamInfo_DPCResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.league_id_){}
    , decltype(_impl_.standing_){}
    , decltype(_impl_.points_){}
    , decltype(_impl_.earnings_){}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.league_id_, &from._impl_.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInfo.DPCResult)
}

inline void CMsgDOTATeamInfo_DPCResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.league_id_){0u}
    , decltype(_impl_.standing_){0u}
    , decltype(_impl_.points_){0u}
    , decltype(_impl_.earnings_){0u}
    , decltype(_impl_.timestamp_){0u}
  };
}

CMsgDOTATeamInfo_DPCResult::~CMsgDOTATeamInfo_DPCResult() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInfo.DPCResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTATeamInfo_DPCResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTATeamInfo_DPCResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTATeamInfo_DPCResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInfo.DPCResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.league_id_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInfo_DPCResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 standing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_standing(&has_bits);
          _impl_.standing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_points(&has_bits);
          _impl_.points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 earnings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_earnings(&has_bits);
          _impl_.earnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTATeamInfo_DPCResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInfo.DPCResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional uint32 standing = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_standing(), target);
  }

  // optional uint32 points = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_points(), target);
  }

  // optional uint32 earnings = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_earnings(), target);
  }

  // optional uint32 timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInfo.DPCResult)
  return target;
}

size_t CMsgDOTATeamInfo_DPCResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInfo.DPCResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

    // optional uint32 standing = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_standing());
    }

    // optional uint32 points = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_points());
    }

    // optional uint32 earnings = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_earnings());
    }

    // optional uint32 timestamp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTATeamInfo_DPCResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTATeamInfo_DPCResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTATeamInfo_DPCResult::GetClassData() const { return &_class_data_; }


void CMsgDOTATeamInfo_DPCResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTATeamInfo_DPCResult*>(&to_msg);
  auto& from = static_cast<const CMsgDOTATeamInfo_DPCResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInfo.DPCResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.standing_ = from._impl_.standing_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.points_ = from._impl_.points_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.earnings_ = from._impl_.earnings_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTATeamInfo_DPCResult::CopyFrom(const CMsgDOTATeamInfo_DPCResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInfo.DPCResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfo_DPCResult::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInfo_DPCResult::InternalSwap(CMsgDOTATeamInfo_DPCResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_DPCResult, _impl_.timestamp_)
      + sizeof(CMsgDOTATeamInfo_DPCResult::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_DPCResult, _impl_.league_id_)>(
          reinterpret_cast<char*>(&_impl_.league_id_),
          reinterpret_cast<char*>(&other->_impl_.league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInfo_DPCResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[3]);
}

// ===================================================================

class CMsgDOTATeamInfo_Member::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInfo_Member>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_joined(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_admin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pro_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_real_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTATeamInfo_Member::CMsgDOTATeamInfo_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInfo.Member)
}
CMsgDOTATeamInfo_Member::CMsgDOTATeamInfo_Member(const CMsgDOTATeamInfo_Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTATeamInfo_Member* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pro_name_){}
    , decltype(_impl_.real_name_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.time_joined_){}
    , decltype(_impl_.admin_){}
    , decltype(_impl_.role_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pro_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pro_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pro_name()) {
    _this->_impl_.pro_name_.Set(from._internal_pro_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_real_name()) {
    _this->_impl_.real_name_.Set(from._internal_real_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.role_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.role_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInfo.Member)
}

inline void CMsgDOTATeamInfo_Member::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pro_name_){}
    , decltype(_impl_.real_name_){}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.time_joined_){0u}
    , decltype(_impl_.admin_){false}
    , decltype(_impl_.role_){0}
  };
  _impl_.pro_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pro_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTATeamInfo_Member::~CMsgDOTATeamInfo_Member() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInfo.Member)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTATeamInfo_Member::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pro_name_.Destroy();
  _impl_.real_name_.Destroy();
}

void CMsgDOTATeamInfo_Member::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTATeamInfo_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInfo.Member)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.pro_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.real_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.role_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.role_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInfo_Member::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_joined = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_joined(&has_bits);
          _impl_.time_joined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool admin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_admin(&has_bits);
          _impl_.admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string pro_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_pro_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTATeamInfo.Member.pro_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .Fantasy_Roles role = 8 [default = FANTASY_ROLE_UNDEFINED];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Fantasy_Roles_IsValid(val))) {
            _internal_set_role(static_cast<::Fantasy_Roles>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string real_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_real_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTATeamInfo.Member.real_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTATeamInfo_Member::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInfo.Member)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 time_joined = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_joined(), target);
  }

  // optional bool admin = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_admin(), target);
  }

  // optional string pro_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pro_name().data(), static_cast<int>(this->_internal_pro_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInfo.Member.pro_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_pro_name(), target);
  }

  // optional .Fantasy_Roles role = 8 [default = FANTASY_ROLE_UNDEFINED];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_role(), target);
  }

  // optional string real_name = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInfo.Member.real_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_real_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInfo.Member)
  return target;
}

size_t CMsgDOTATeamInfo_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInfo.Member)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string pro_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pro_name());
    }

    // optional string real_name = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_real_name());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 time_joined = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_joined());
    }

    // optional bool admin = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .Fantasy_Roles role = 8 [default = FANTASY_ROLE_UNDEFINED];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_role());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTATeamInfo_Member::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTATeamInfo_Member::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTATeamInfo_Member::GetClassData() const { return &_class_data_; }


void CMsgDOTATeamInfo_Member::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTATeamInfo_Member*>(&to_msg);
  auto& from = static_cast<const CMsgDOTATeamInfo_Member&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInfo.Member)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_pro_name(from._internal_pro_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_real_name(from._internal_real_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.time_joined_ = from._impl_.time_joined_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.admin_ = from._impl_.admin_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.role_ = from._impl_.role_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTATeamInfo_Member::CopyFrom(const CMsgDOTATeamInfo_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInfo.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfo_Member::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInfo_Member::InternalSwap(CMsgDOTATeamInfo_Member* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pro_name_, lhs_arena,
      &other->_impl_.pro_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.real_name_, lhs_arena,
      &other->_impl_.real_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_Member, _impl_.role_)
      + sizeof(CMsgDOTATeamInfo_Member::_impl_.role_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_Member, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInfo_Member::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[4]);
}

// ===================================================================

class CMsgDOTATeamInfo_AuditEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInfo_AuditEntry>()._impl_._has_bits_);
  static void set_has_audit_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTATeamInfo_AuditEntry::CMsgDOTATeamInfo_AuditEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInfo.AuditEntry)
}
CMsgDOTATeamInfo_AuditEntry::CMsgDOTATeamInfo_AuditEntry(const CMsgDOTATeamInfo_AuditEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTATeamInfo_AuditEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.audit_action_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.audit_action_, &from._impl_.audit_action_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.account_id_) -
    reinterpret_cast<char*>(&_impl_.audit_action_)) + sizeof(_impl_.account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInfo.AuditEntry)
}

inline void CMsgDOTATeamInfo_AuditEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.audit_action_){0u}
    , decltype(_impl_.timestamp_){0u}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgDOTATeamInfo_AuditEntry::~CMsgDOTATeamInfo_AuditEntry() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInfo.AuditEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTATeamInfo_AuditEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTATeamInfo_AuditEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTATeamInfo_AuditEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInfo.AuditEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.audit_action_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.account_id_) -
        reinterpret_cast<char*>(&_impl_.audit_action_)) + sizeof(_impl_.account_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInfo_AuditEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 audit_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_audit_action(&has_bits);
          _impl_.audit_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTATeamInfo_AuditEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInfo.AuditEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 audit_action = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_audit_action(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  // optional uint32 account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInfo.AuditEntry)
  return target;
}

size_t CMsgDOTATeamInfo_AuditEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInfo.AuditEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 audit_action = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_audit_action());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

    // optional uint32 account_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTATeamInfo_AuditEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTATeamInfo_AuditEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTATeamInfo_AuditEntry::GetClassData() const { return &_class_data_; }


void CMsgDOTATeamInfo_AuditEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTATeamInfo_AuditEntry*>(&to_msg);
  auto& from = static_cast<const CMsgDOTATeamInfo_AuditEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInfo.AuditEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.audit_action_ = from._impl_.audit_action_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTATeamInfo_AuditEntry::CopyFrom(const CMsgDOTATeamInfo_AuditEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInfo.AuditEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfo_AuditEntry::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInfo_AuditEntry::InternalSwap(CMsgDOTATeamInfo_AuditEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_AuditEntry, _impl_.account_id_)
      + sizeof(CMsgDOTATeamInfo_AuditEntry::_impl_.account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_AuditEntry, _impl_.audit_action_)>(
          reinterpret_cast<char*>(&_impl_.audit_action_),
          reinterpret_cast<char*>(&other->_impl_.audit_action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInfo_AuditEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[5]);
}

// ===================================================================

class CMsgDOTATeamInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInfo>()._impl_._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_created(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_pro(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_pickup_team(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_ugc_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ugc_base_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_ugc_banner_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_ugc_sponsor_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_losses(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_games_played_total(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_games_played_matchmaking(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_url_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_coach_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_abbreviation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgDOTATeamInfo_TeamStats& team_stats(const CMsgDOTATeamInfo* msg);
  static void set_has_team_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_color_primary(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_color_secondary(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_team_captain(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
};

const ::CMsgDOTATeamInfo_TeamStats&
CMsgDOTATeamInfo::_Internal::team_stats(const CMsgDOTATeamInfo* msg) {
  return *msg->_impl_.team_stats_;
}
CMsgDOTATeamInfo::CMsgDOTATeamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInfo)
}
CMsgDOTATeamInfo::CMsgDOTATeamInfo(const CMsgDOTATeamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTATeamInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.members_){from._impl_.members_}
    , decltype(_impl_.registered_member_account_ids_){from._impl_.registered_member_account_ids_}
    , decltype(_impl_.audit_entries_){from._impl_.audit_entries_}
    , decltype(_impl_.member_stats_){from._impl_.member_stats_}
    , decltype(_impl_.dpc_results_){from._impl_.dpc_results_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.country_code_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.url_logo_){}
    , decltype(_impl_.abbreviation_){}
    , decltype(_impl_.color_primary_){}
    , decltype(_impl_.color_secondary_){}
    , decltype(_impl_.team_stats_){nullptr}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.time_created_){}
    , decltype(_impl_.ugc_logo_){}
    , decltype(_impl_.pro_){}
    , decltype(_impl_.pickup_team_){}
    , decltype(_impl_.wins_){}
    , decltype(_impl_.ugc_base_logo_){}
    , decltype(_impl_.ugc_banner_logo_){}
    , decltype(_impl_.ugc_sponsor_logo_){}
    , decltype(_impl_.losses_){}
    , decltype(_impl_.games_played_total_){}
    , decltype(_impl_.games_played_matchmaking_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.coach_account_id_){}
    , decltype(_impl_.team_captain_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country_code()) {
    _this->_impl_.country_code_.Set(from._internal_country_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_logo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_logo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url_logo()) {
    _this->_impl_.url_logo_.Set(from._internal_url_logo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.abbreviation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.abbreviation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_abbreviation()) {
    _this->_impl_.abbreviation_.Set(from._internal_abbreviation(), 
      _this->GetArenaForAllocation());
  }
  _impl_.color_primary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.color_primary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_color_primary()) {
    _this->_impl_.color_primary_.Set(from._internal_color_primary(), 
      _this->GetArenaForAllocation());
  }
  _impl_.color_secondary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.color_secondary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_color_secondary()) {
    _this->_impl_.color_secondary_.Set(from._internal_color_secondary(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_team_stats()) {
    _this->_impl_.team_stats_ = new ::CMsgDOTATeamInfo_TeamStats(*from._impl_.team_stats_);
  }
  ::memcpy(&_impl_.team_id_, &from._impl_.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_captain_) -
    reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.team_captain_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInfo)
}

inline void CMsgDOTATeamInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.members_){arena}
    , decltype(_impl_.registered_member_account_ids_){arena}
    , decltype(_impl_.audit_entries_){arena}
    , decltype(_impl_.member_stats_){arena}
    , decltype(_impl_.dpc_results_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.country_code_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.url_logo_){}
    , decltype(_impl_.abbreviation_){}
    , decltype(_impl_.color_primary_){}
    , decltype(_impl_.color_secondary_){}
    , decltype(_impl_.team_stats_){nullptr}
    , decltype(_impl_.team_id_){0u}
    , decltype(_impl_.time_created_){0u}
    , decltype(_impl_.ugc_logo_){uint64_t{0u}}
    , decltype(_impl_.pro_){false}
    , decltype(_impl_.pickup_team_){false}
    , decltype(_impl_.wins_){0u}
    , decltype(_impl_.ugc_base_logo_){uint64_t{0u}}
    , decltype(_impl_.ugc_banner_logo_){uint64_t{0u}}
    , decltype(_impl_.ugc_sponsor_logo_){uint64_t{0u}}
    , decltype(_impl_.losses_){0u}
    , decltype(_impl_.games_played_total_){0u}
    , decltype(_impl_.games_played_matchmaking_){0u}
    , decltype(_impl_.region_){0}
    , decltype(_impl_.coach_account_id_){0u}
    , decltype(_impl_.team_captain_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_logo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_logo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.abbreviation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.abbreviation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.color_primary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.color_primary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.color_secondary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.color_secondary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTATeamInfo::~CMsgDOTATeamInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTATeamInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.members_.~RepeatedPtrField();
  _impl_.registered_member_account_ids_.~RepeatedField();
  _impl_.audit_entries_.~RepeatedPtrField();
  _impl_.member_stats_.~RepeatedPtrField();
  _impl_.dpc_results_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.tag_.Destroy();
  _impl_.country_code_.Destroy();
  _impl_.url_.Destroy();
  _impl_.url_logo_.Destroy();
  _impl_.abbreviation_.Destroy();
  _impl_.color_primary_.Destroy();
  _impl_.color_secondary_.Destroy();
  if (this != internal_default_instance()) delete _impl_.team_stats_;
}

void CMsgDOTATeamInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTATeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.members_.Clear();
  _impl_.registered_member_account_ids_.Clear();
  _impl_.audit_entries_.Clear();
  _impl_.member_stats_.Clear();
  _impl_.dpc_results_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.url_logo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.abbreviation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.color_primary_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.color_secondary_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(_impl_.team_stats_ != nullptr);
    _impl_.team_stats_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&_impl_.team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ugc_base_logo_) -
        reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.ugc_base_logo_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.ugc_banner_logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.team_captain_) -
        reinterpret_cast<char*>(&_impl_.ugc_banner_logo_)) + sizeof(_impl_.team_captain_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgDOTATeamInfo.Member members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTATeamInfo.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string tag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTATeamInfo.tag");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_created = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_time_created(&has_bits);
          _impl_.time_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pro = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_pro(&has_bits);
          _impl_.pro_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pickup_team = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_pickup_team(&has_bits);
          _impl_.pickup_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 ugc_logo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_ugc_logo(&has_bits);
          _impl_.ugc_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 ugc_base_logo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_ugc_base_logo(&has_bits);
          _impl_.ugc_base_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 ugc_banner_logo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_ugc_banner_logo(&has_bits);
          _impl_.ugc_banner_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 ugc_sponsor_logo = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_ugc_sponsor_logo(&has_bits);
          _impl_.ugc_sponsor_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string country_code = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_country_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTATeamInfo.country_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string url = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTATeamInfo.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 wins = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_wins(&has_bits);
          _impl_.wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 losses = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_losses(&has_bits);
          _impl_.losses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 games_played_total = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_games_played_total(&has_bits);
          _impl_.games_played_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 games_played_matchmaking = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_games_played_matchmaking(&has_bits);
          _impl_.games_played_matchmaking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url_logo = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_url_logo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTATeamInfo.url_logo");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .ELeagueRegion region = 29 [default = LEAGUE_REGION_UNSET];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ELeagueRegion_IsValid(val))) {
            _internal_set_region(static_cast<::ELeagueRegion>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(29, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 registered_member_account_ids = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_registered_member_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<240>(ptr));
        } else if (static_cast<uint8_t>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_registered_member_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDOTATeamInfo.AuditEntry audit_entries = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_audit_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string abbreviation = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_abbreviation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTATeamInfo.abbreviation");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDOTATeamInfo.MemberStats member_stats = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_member_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTATeamInfo.TeamStats team_stats = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDOTATeamInfo.DPCResult dpc_results = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_dpc_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<282>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 coach_account_id = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_coach_account_id(&has_bits);
          _impl_.coach_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string color_primary = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_color_primary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTATeamInfo.color_primary");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string color_secondary = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_color_secondary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTATeamInfo.color_secondary");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_captain = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_team_captain(&has_bits);
          _impl_.team_captain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTATeamInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTATeamInfo.Member members = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_id(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInfo.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string tag = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInfo.tag");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tag(), target);
  }

  // optional uint32 time_created = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time_created(), target);
  }

  // optional bool pro = 6;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_pro(), target);
  }

  // optional bool pickup_team = 8;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_pickup_team(), target);
  }

  // optional uint64 ugc_logo = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_ugc_logo(), target);
  }

  // optional uint64 ugc_base_logo = 10;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_ugc_base_logo(), target);
  }

  // optional uint64 ugc_banner_logo = 11;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_ugc_banner_logo(), target);
  }

  // optional uint64 ugc_sponsor_logo = 12;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_ugc_sponsor_logo(), target);
  }

  // optional string country_code = 13;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInfo.country_code");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_country_code(), target);
  }

  // optional string url = 14;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInfo.url");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_url(), target);
  }

  // optional uint32 wins = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_wins(), target);
  }

  // optional uint32 losses = 16;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_losses(), target);
  }

  // optional uint32 games_played_total = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_games_played_total(), target);
  }

  // optional uint32 games_played_matchmaking = 20;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_games_played_matchmaking(), target);
  }

  // optional string url_logo = 24;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url_logo().data(), static_cast<int>(this->_internal_url_logo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInfo.url_logo");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_url_logo(), target);
  }

  // optional .ELeagueRegion region = 29 [default = LEAGUE_REGION_UNSET];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      29, this->_internal_region(), target);
  }

  // repeated uint32 registered_member_account_ids = 30;
  for (int i = 0, n = this->_internal_registered_member_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(30, this->_internal_registered_member_account_ids(i), target);
  }

  // repeated .CMsgDOTATeamInfo.AuditEntry audit_entries = 31;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_audit_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_audit_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(31, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string abbreviation = 32;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_abbreviation().data(), static_cast<int>(this->_internal_abbreviation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInfo.abbreviation");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_abbreviation(), target);
  }

  // repeated .CMsgDOTATeamInfo.MemberStats member_stats = 33;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_member_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_member_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(33, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .CMsgDOTATeamInfo.TeamStats team_stats = 34;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::team_stats(this),
        _Internal::team_stats(this).GetCachedSize(), target, stream);
  }

  // repeated .CMsgDOTATeamInfo.DPCResult dpc_results = 35;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dpc_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_dpc_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(35, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 coach_account_id = 36;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(36, this->_internal_coach_account_id(), target);
  }

  // optional string color_primary = 37;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_color_primary().data(), static_cast<int>(this->_internal_color_primary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInfo.color_primary");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_color_primary(), target);
  }

  // optional string color_secondary = 38;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_color_secondary().data(), static_cast<int>(this->_internal_color_secondary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInfo.color_secondary");
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_color_secondary(), target);
  }

  // optional uint32 team_captain = 39;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(39, this->_internal_team_captain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInfo)
  return target;
}

size_t CMsgDOTATeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTATeamInfo.Member members = 1;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->_impl_.members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 registered_member_account_ids = 30;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.registered_member_account_ids_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_registered_member_account_ids_size());
    total_size += data_size;
  }

  // repeated .CMsgDOTATeamInfo.AuditEntry audit_entries = 31;
  total_size += 2UL * this->_internal_audit_entries_size();
  for (const auto& msg : this->_impl_.audit_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTATeamInfo.MemberStats member_stats = 33;
  total_size += 2UL * this->_internal_member_stats_size();
  for (const auto& msg : this->_impl_.member_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTATeamInfo.DPCResult dpc_results = 35;
  total_size += 2UL * this->_internal_dpc_results_size();
  for (const auto& msg : this->_impl_.dpc_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string tag = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional string country_code = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional string url = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string url_logo = 24;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url_logo());
    }

    // optional string abbreviation = 32;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_abbreviation());
    }

    // optional string color_primary = 37;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_color_primary());
    }

    // optional string color_secondary = 38;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_color_secondary());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .CMsgDOTATeamInfo.TeamStats team_stats = 34;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.team_stats_);
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

    // optional uint32 time_created = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_created());
    }

    // optional uint64 ugc_logo = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ugc_logo());
    }

    // optional bool pro = 6;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool pickup_team = 8;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional uint32 wins = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_wins());
    }

    // optional uint64 ugc_base_logo = 10;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ugc_base_logo());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint64 ugc_banner_logo = 11;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ugc_banner_logo());
    }

    // optional uint64 ugc_sponsor_logo = 12;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ugc_sponsor_logo());
    }

    // optional uint32 losses = 16;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_losses());
    }

    // optional uint32 games_played_total = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_games_played_total());
    }

    // optional uint32 games_played_matchmaking = 20;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_games_played_matchmaking());
    }

    // optional .ELeagueRegion region = 29 [default = LEAGUE_REGION_UNSET];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_region());
    }

    // optional uint32 coach_account_id = 36;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_coach_account_id());
    }

    // optional uint32 team_captain = 39;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_team_captain());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTATeamInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTATeamInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTATeamInfo::GetClassData() const { return &_class_data_; }


void CMsgDOTATeamInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTATeamInfo*>(&to_msg);
  auto& from = static_cast<const CMsgDOTATeamInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.members_.MergeFrom(from._impl_.members_);
  _this->_impl_.registered_member_account_ids_.MergeFrom(from._impl_.registered_member_account_ids_);
  _this->_impl_.audit_entries_.MergeFrom(from._impl_.audit_entries_);
  _this->_impl_.member_stats_.MergeFrom(from._impl_.member_stats_);
  _this->_impl_.dpc_results_.MergeFrom(from._impl_.dpc_results_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_url_logo(from._internal_url_logo());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_abbreviation(from._internal_abbreviation());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_color_primary(from._internal_color_primary());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_color_secondary(from._internal_color_secondary());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_team_stats()->::CMsgDOTATeamInfo_TeamStats::MergeFrom(
          from._internal_team_stats());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.time_created_ = from._impl_.time_created_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.ugc_logo_ = from._impl_.ugc_logo_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.pro_ = from._impl_.pro_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.pickup_team_ = from._impl_.pickup_team_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.wins_ = from._impl_.wins_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.ugc_base_logo_ = from._impl_.ugc_base_logo_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.ugc_banner_logo_ = from._impl_.ugc_banner_logo_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.ugc_sponsor_logo_ = from._impl_.ugc_sponsor_logo_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.losses_ = from._impl_.losses_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.games_played_total_ = from._impl_.games_played_total_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.games_played_matchmaking_ = from._impl_.games_played_matchmaking_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.region_ = from._impl_.region_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.coach_account_id_ = from._impl_.coach_account_id_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.team_captain_ = from._impl_.team_captain_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTATeamInfo::CopyFrom(const CMsgDOTATeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfo::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInfo::InternalSwap(CMsgDOTATeamInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.members_.InternalSwap(&other->_impl_.members_);
  _impl_.registered_member_account_ids_.InternalSwap(&other->_impl_.registered_member_account_ids_);
  _impl_.audit_entries_.InternalSwap(&other->_impl_.audit_entries_);
  _impl_.member_stats_.InternalSwap(&other->_impl_.member_stats_);
  _impl_.dpc_results_.InternalSwap(&other->_impl_.dpc_results_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_code_, lhs_arena,
      &other->_impl_.country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_logo_, lhs_arena,
      &other->_impl_.url_logo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.abbreviation_, lhs_arena,
      &other->_impl_.abbreviation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.color_primary_, lhs_arena,
      &other->_impl_.color_primary_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.color_secondary_, lhs_arena,
      &other->_impl_.color_secondary_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo, _impl_.team_captain_)
      + sizeof(CMsgDOTATeamInfo::_impl_.team_captain_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo, _impl_.team_stats_)>(
          reinterpret_cast<char*>(&_impl_.team_stats_),
          reinterpret_cast<char*>(&other->_impl_.team_stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[6]);
}

// ===================================================================

class CMsgDOTATeamsInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamsInfo>()._impl_._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTATeamsInfo::CMsgDOTATeamsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamsInfo)
}
CMsgDOTATeamsInfo::CMsgDOTATeamsInfo(const CMsgDOTATeamsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTATeamsInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.teams_){from._impl_.teams_}
    , decltype(_impl_.league_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.league_id_ = from._impl_.league_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamsInfo)
}

inline void CMsgDOTATeamsInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.teams_){arena}
    , decltype(_impl_.league_id_){0u}
  };
}

CMsgDOTATeamsInfo::~CMsgDOTATeamsInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamsInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTATeamsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.teams_.~RepeatedPtrField();
}

void CMsgDOTATeamsInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTATeamsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamsInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.teams_.Clear();
  _impl_.league_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamsInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDOTATeamInfo teams = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTATeamsInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamsInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // repeated .CMsgDOTATeamInfo teams = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_teams_size()); i < n; i++) {
    const auto& repfield = this->_internal_teams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamsInfo)
  return target;
}

size_t CMsgDOTATeamsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamsInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTATeamInfo teams = 2;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->_impl_.teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 league_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTATeamsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTATeamsInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTATeamsInfo::GetClassData() const { return &_class_data_; }


void CMsgDOTATeamsInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTATeamsInfo*>(&to_msg);
  auto& from = static_cast<const CMsgDOTATeamsInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamsInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.teams_.MergeFrom(from._impl_.teams_);
  if (from._internal_has_league_id()) {
    _this->_internal_set_league_id(from._internal_league_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTATeamsInfo::CopyFrom(const CMsgDOTATeamsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamsInfo::IsInitialized() const {
  return true;
}

void CMsgDOTATeamsInfo::InternalSwap(CMsgDOTATeamsInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.teams_.InternalSwap(&other->_impl_.teams_);
  swap(_impl_.league_id_, other->_impl_.league_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamsInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[7]);
}

// ===================================================================

class CMsgDOTATeamInfoList::_Internal {
 public:
};

CMsgDOTATeamInfoList::CMsgDOTATeamInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInfoList)
}
CMsgDOTATeamInfoList::CMsgDOTATeamInfoList(const CMsgDOTATeamInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTATeamInfoList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.teams_){from._impl_.teams_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInfoList)
}

inline void CMsgDOTATeamInfoList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.teams_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgDOTATeamInfoList::~CMsgDOTATeamInfoList() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInfoList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTATeamInfoList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.teams_.~RepeatedPtrField();
}

void CMsgDOTATeamInfoList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTATeamInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInfoList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.teams_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInfoList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgDOTATeamInfo teams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTATeamInfoList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInfoList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTATeamInfo teams = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_teams_size()); i < n; i++) {
    const auto& repfield = this->_internal_teams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInfoList)
  return target;
}

size_t CMsgDOTATeamInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInfoList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTATeamInfo teams = 1;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->_impl_.teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTATeamInfoList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTATeamInfoList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTATeamInfoList::GetClassData() const { return &_class_data_; }


void CMsgDOTATeamInfoList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTATeamInfoList*>(&to_msg);
  auto& from = static_cast<const CMsgDOTATeamInfoList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInfoList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.teams_.MergeFrom(from._impl_.teams_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTATeamInfoList::CopyFrom(const CMsgDOTATeamInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfoList::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInfoList::InternalSwap(CMsgDOTATeamInfoList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.teams_.InternalSwap(&other->_impl_.teams_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInfoList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[8]);
}

// ===================================================================

class CMsgDOTAMyTeamInfoRequest::_Internal {
 public:
};

CMsgDOTAMyTeamInfoRequest::CMsgDOTAMyTeamInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAMyTeamInfoRequest)
}
CMsgDOTAMyTeamInfoRequest::CMsgDOTAMyTeamInfoRequest(const CMsgDOTAMyTeamInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgDOTAMyTeamInfoRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAMyTeamInfoRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAMyTeamInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAMyTeamInfoRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAMyTeamInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[9]);
}

// ===================================================================

class CMsgDOTACreateTeam::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTACreateTeam>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_base_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_banner_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sponsor_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pickup_team(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_abbreviation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDOTACreateTeam::CMsgDOTACreateTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTACreateTeam)
}
CMsgDOTACreateTeam::CMsgDOTACreateTeam(const CMsgDOTACreateTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTACreateTeam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.country_code_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.abbreviation_){}
    , decltype(_impl_.logo_){}
    , decltype(_impl_.base_logo_){}
    , decltype(_impl_.banner_logo_){}
    , decltype(_impl_.sponsor_logo_){}
    , decltype(_impl_.pickup_team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country_code()) {
    _this->_impl_.country_code_.Set(from._internal_country_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.abbreviation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.abbreviation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_abbreviation()) {
    _this->_impl_.abbreviation_.Set(from._internal_abbreviation(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.logo_, &from._impl_.logo_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pickup_team_) -
    reinterpret_cast<char*>(&_impl_.logo_)) + sizeof(_impl_.pickup_team_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTACreateTeam)
}

inline void CMsgDOTACreateTeam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.country_code_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.abbreviation_){}
    , decltype(_impl_.logo_){uint64_t{0u}}
    , decltype(_impl_.base_logo_){uint64_t{0u}}
    , decltype(_impl_.banner_logo_){uint64_t{0u}}
    , decltype(_impl_.sponsor_logo_){uint64_t{0u}}
    , decltype(_impl_.pickup_team_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.abbreviation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.abbreviation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTACreateTeam::~CMsgDOTACreateTeam() {
  // @@protoc_insertion_point(destructor:CMsgDOTACreateTeam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTACreateTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.tag_.Destroy();
  _impl_.country_code_.Destroy();
  _impl_.url_.Destroy();
  _impl_.abbreviation_.Destroy();
}

void CMsgDOTACreateTeam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTACreateTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTACreateTeam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.abbreviation_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.banner_logo_) -
        reinterpret_cast<char*>(&_impl_.logo_)) + sizeof(_impl_.banner_logo_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.sponsor_logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.pickup_team_) -
        reinterpret_cast<char*>(&_impl_.sponsor_logo_)) + sizeof(_impl_.pickup_team_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTACreateTeam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTACreateTeam.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTACreateTeam.tag");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 logo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_logo(&has_bits);
          _impl_.logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 base_logo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_base_logo(&has_bits);
          _impl_.base_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 banner_logo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_banner_logo(&has_bits);
          _impl_.banner_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sponsor_logo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_sponsor_logo(&has_bits);
          _impl_.sponsor_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string country_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_country_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTACreateTeam.country_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTACreateTeam.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool pickup_team = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_pickup_team(&has_bits);
          _impl_.pickup_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string abbreviation = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_abbreviation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTACreateTeam.abbreviation");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTACreateTeam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTACreateTeam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTACreateTeam.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string tag = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTACreateTeam.tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tag(), target);
  }

  // optional uint64 logo = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_logo(), target);
  }

  // optional uint64 base_logo = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_base_logo(), target);
  }

  // optional uint64 banner_logo = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_banner_logo(), target);
  }

  // optional uint64 sponsor_logo = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_sponsor_logo(), target);
  }

  // optional string country_code = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTACreateTeam.country_code");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_country_code(), target);
  }

  // optional string url = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTACreateTeam.url");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_url(), target);
  }

  // optional bool pickup_team = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_pickup_team(), target);
  }

  // optional string abbreviation = 10;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_abbreviation().data(), static_cast<int>(this->_internal_abbreviation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTACreateTeam.abbreviation");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_abbreviation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTACreateTeam)
  return target;
}

size_t CMsgDOTACreateTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTACreateTeam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string tag = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional string country_code = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional string url = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string abbreviation = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_abbreviation());
    }

    // optional uint64 logo = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_logo());
    }

    // optional uint64 base_logo = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_base_logo());
    }

    // optional uint64 banner_logo = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_banner_logo());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint64 sponsor_logo = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sponsor_logo());
    }

    // optional bool pickup_team = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTACreateTeam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTACreateTeam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTACreateTeam::GetClassData() const { return &_class_data_; }


void CMsgDOTACreateTeam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTACreateTeam*>(&to_msg);
  auto& from = static_cast<const CMsgDOTACreateTeam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTACreateTeam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_abbreviation(from._internal_abbreviation());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.logo_ = from._impl_.logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.base_logo_ = from._impl_.base_logo_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.banner_logo_ = from._impl_.banner_logo_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.sponsor_logo_ = from._impl_.sponsor_logo_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.pickup_team_ = from._impl_.pickup_team_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTACreateTeam::CopyFrom(const CMsgDOTACreateTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTACreateTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACreateTeam::IsInitialized() const {
  return true;
}

void CMsgDOTACreateTeam::InternalSwap(CMsgDOTACreateTeam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_code_, lhs_arena,
      &other->_impl_.country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.abbreviation_, lhs_arena,
      &other->_impl_.abbreviation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTACreateTeam, _impl_.pickup_team_)
      + sizeof(CMsgDOTACreateTeam::_impl_.pickup_team_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTACreateTeam, _impl_.logo_)>(
          reinterpret_cast<char*>(&_impl_.logo_),
          reinterpret_cast<char*>(&other->_impl_.logo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTACreateTeam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[10]);
}

// ===================================================================

class CMsgDOTACreateTeamResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTACreateTeamResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTACreateTeamResponse::CMsgDOTACreateTeamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTACreateTeamResponse)
}
CMsgDOTACreateTeamResponse::CMsgDOTACreateTeamResponse(const CMsgDOTACreateTeamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTACreateTeamResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_id_, &from._impl_.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTACreateTeamResponse)
}

inline void CMsgDOTACreateTeamResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_id_){0u}
    , decltype(_impl_.result_){-1}
  };
}

CMsgDOTACreateTeamResponse::~CMsgDOTACreateTeamResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTACreateTeamResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTACreateTeamResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTACreateTeamResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTACreateTeamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTACreateTeamResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.team_id_ = 0u;
    _impl_.result_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTACreateTeamResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgDOTACreateTeamResponse.Result result = 1 [default = INVALID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTACreateTeamResponse_Result_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTACreateTeamResponse_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTACreateTeamResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTACreateTeamResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgDOTACreateTeamResponse.Result result = 1 [default = INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTACreateTeamResponse)
  return target;
}

size_t CMsgDOTACreateTeamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTACreateTeamResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

    // optional .CMsgDOTACreateTeamResponse.Result result = 1 [default = INVALID];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTACreateTeamResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTACreateTeamResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTACreateTeamResponse::GetClassData() const { return &_class_data_; }


void CMsgDOTACreateTeamResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTACreateTeamResponse*>(&to_msg);
  auto& from = static_cast<const CMsgDOTACreateTeamResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTACreateTeamResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTACreateTeamResponse::CopyFrom(const CMsgDOTACreateTeamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTACreateTeamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACreateTeamResponse::IsInitialized() const {
  return true;
}

void CMsgDOTACreateTeamResponse::InternalSwap(CMsgDOTACreateTeamResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.team_id_, other->_impl_.team_id_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTACreateTeamResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[11]);
}

// ===================================================================

class CMsgDOTAEditTeamDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAEditTeamDetails>()._impl_._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_base_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_banner_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_sponsor_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_in_use_by_party(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_abbreviation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDOTAEditTeamDetails::CMsgDOTAEditTeamDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAEditTeamDetails)
}
CMsgDOTAEditTeamDetails::CMsgDOTAEditTeamDetails(const CMsgDOTAEditTeamDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAEditTeamDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.country_code_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.abbreviation_){}
    , decltype(_impl_.logo_){}
    , decltype(_impl_.base_logo_){}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.in_use_by_party_){}
    , decltype(_impl_.banner_logo_){}
    , decltype(_impl_.sponsor_logo_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country_code()) {
    _this->_impl_.country_code_.Set(from._internal_country_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.abbreviation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.abbreviation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_abbreviation()) {
    _this->_impl_.abbreviation_.Set(from._internal_abbreviation(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.logo_, &from._impl_.logo_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sponsor_logo_) -
    reinterpret_cast<char*>(&_impl_.logo_)) + sizeof(_impl_.sponsor_logo_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAEditTeamDetails)
}

inline void CMsgDOTAEditTeamDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.country_code_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.abbreviation_){}
    , decltype(_impl_.logo_){uint64_t{0u}}
    , decltype(_impl_.base_logo_){uint64_t{0u}}
    , decltype(_impl_.team_id_){0u}
    , decltype(_impl_.in_use_by_party_){false}
    , decltype(_impl_.banner_logo_){uint64_t{0u}}
    , decltype(_impl_.sponsor_logo_){uint64_t{0u}}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.abbreviation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.abbreviation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTAEditTeamDetails::~CMsgDOTAEditTeamDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTAEditTeamDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAEditTeamDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.tag_.Destroy();
  _impl_.country_code_.Destroy();
  _impl_.url_.Destroy();
  _impl_.abbreviation_.Destroy();
}

void CMsgDOTAEditTeamDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAEditTeamDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAEditTeamDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.abbreviation_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.team_id_) -
        reinterpret_cast<char*>(&_impl_.logo_)) + sizeof(_impl_.team_id_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.in_use_by_party_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sponsor_logo_) -
        reinterpret_cast<char*>(&_impl_.in_use_by_party_)) + sizeof(_impl_.sponsor_logo_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAEditTeamDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAEditTeamDetails.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAEditTeamDetails.tag");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 logo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_logo(&has_bits);
          _impl_.logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 base_logo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_base_logo(&has_bits);
          _impl_.base_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 banner_logo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_banner_logo(&has_bits);
          _impl_.banner_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sponsor_logo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_sponsor_logo(&has_bits);
          _impl_.sponsor_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string country_code = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_country_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAEditTeamDetails.country_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string url = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAEditTeamDetails.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool in_use_by_party = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_in_use_by_party(&has_bits);
          _impl_.in_use_by_party_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string abbreviation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_abbreviation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTAEditTeamDetails.abbreviation");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAEditTeamDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAEditTeamDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAEditTeamDetails.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAEditTeamDetails.tag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tag(), target);
  }

  // optional uint64 logo = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_logo(), target);
  }

  // optional uint64 base_logo = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_base_logo(), target);
  }

  // optional uint64 banner_logo = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_banner_logo(), target);
  }

  // optional uint64 sponsor_logo = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_sponsor_logo(), target);
  }

  // optional string country_code = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAEditTeamDetails.country_code");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_country_code(), target);
  }

  // optional string url = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAEditTeamDetails.url");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_url(), target);
  }

  // optional bool in_use_by_party = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_in_use_by_party(), target);
  }

  // optional string abbreviation = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_abbreviation().data(), static_cast<int>(this->_internal_abbreviation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAEditTeamDetails.abbreviation");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_abbreviation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAEditTeamDetails)
  return target;
}

size_t CMsgDOTAEditTeamDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAEditTeamDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string tag = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional string country_code = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional string url = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string abbreviation = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_abbreviation());
    }

    // optional uint64 logo = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_logo());
    }

    // optional uint64 base_logo = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_base_logo());
    }

    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool in_use_by_party = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint64 banner_logo = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_banner_logo());
    }

    // optional uint64 sponsor_logo = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sponsor_logo());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAEditTeamDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAEditTeamDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAEditTeamDetails::GetClassData() const { return &_class_data_; }


void CMsgDOTAEditTeamDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAEditTeamDetails*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAEditTeamDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAEditTeamDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_abbreviation(from._internal_abbreviation());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.logo_ = from._impl_.logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.base_logo_ = from._impl_.base_logo_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.in_use_by_party_ = from._impl_.in_use_by_party_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.banner_logo_ = from._impl_.banner_logo_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.sponsor_logo_ = from._impl_.sponsor_logo_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAEditTeamDetails::CopyFrom(const CMsgDOTAEditTeamDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAEditTeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAEditTeamDetails::IsInitialized() const {
  return true;
}

void CMsgDOTAEditTeamDetails::InternalSwap(CMsgDOTAEditTeamDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_code_, lhs_arena,
      &other->_impl_.country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.abbreviation_, lhs_arena,
      &other->_impl_.abbreviation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAEditTeamDetails, _impl_.sponsor_logo_)
      + sizeof(CMsgDOTAEditTeamDetails::_impl_.sponsor_logo_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAEditTeamDetails, _impl_.logo_)>(
          reinterpret_cast<char*>(&_impl_.logo_),
          reinterpret_cast<char*>(&other->_impl_.logo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAEditTeamDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[12]);
}

// ===================================================================

class CMsgDOTAEditTeamDetailsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAEditTeamDetailsResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAEditTeamDetailsResponse::CMsgDOTAEditTeamDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAEditTeamDetailsResponse)
}
CMsgDOTAEditTeamDetailsResponse::CMsgDOTAEditTeamDetailsResponse(const CMsgDOTAEditTeamDetailsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAEditTeamDetailsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAEditTeamDetailsResponse)
}

inline void CMsgDOTAEditTeamDetailsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){0}
  };
}

CMsgDOTAEditTeamDetailsResponse::~CMsgDOTAEditTeamDetailsResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAEditTeamDetailsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAEditTeamDetailsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAEditTeamDetailsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAEditTeamDetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAEditTeamDetailsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAEditTeamDetailsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgDOTAEditTeamDetailsResponse.Result result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAEditTeamDetailsResponse_Result_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAEditTeamDetailsResponse_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAEditTeamDetailsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAEditTeamDetailsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgDOTAEditTeamDetailsResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAEditTeamDetailsResponse)
  return target;
}

size_t CMsgDOTAEditTeamDetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAEditTeamDetailsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgDOTAEditTeamDetailsResponse.Result result = 1 [default = SUCCESS];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAEditTeamDetailsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAEditTeamDetailsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAEditTeamDetailsResponse::GetClassData() const { return &_class_data_; }


void CMsgDOTAEditTeamDetailsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAEditTeamDetailsResponse*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAEditTeamDetailsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAEditTeamDetailsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAEditTeamDetailsResponse::CopyFrom(const CMsgDOTAEditTeamDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAEditTeamDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAEditTeamDetailsResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAEditTeamDetailsResponse::InternalSwap(CMsgDOTAEditTeamDetailsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAEditTeamDetailsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[13]);
}

// ===================================================================

class CMsgDOTATeamInvite_InviterToGC::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInvite_InviterToGC>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTATeamInvite_InviterToGC::CMsgDOTATeamInvite_InviterToGC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInvite_InviterToGC)
}
CMsgDOTATeamInvite_InviterToGC::CMsgDOTATeamInvite_InviterToGC(const CMsgDOTATeamInvite_InviterToGC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTATeamInvite_InviterToGC* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.team_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_id_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.team_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInvite_InviterToGC)
}

inline void CMsgDOTATeamInvite_InviterToGC::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.team_id_){0u}
  };
}

CMsgDOTATeamInvite_InviterToGC::~CMsgDOTATeamInvite_InviterToGC() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInvite_InviterToGC)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTATeamInvite_InviterToGC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTATeamInvite_InviterToGC::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTATeamInvite_InviterToGC::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInvite_InviterToGC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.team_id_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.team_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInvite_InviterToGC::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTATeamInvite_InviterToGC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInvite_InviterToGC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInvite_InviterToGC)
  return target;
}

size_t CMsgDOTATeamInvite_InviterToGC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInvite_InviterToGC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTATeamInvite_InviterToGC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTATeamInvite_InviterToGC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTATeamInvite_InviterToGC::GetClassData() const { return &_class_data_; }


void CMsgDOTATeamInvite_InviterToGC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTATeamInvite_InviterToGC*>(&to_msg);
  auto& from = static_cast<const CMsgDOTATeamInvite_InviterToGC&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInvite_InviterToGC)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTATeamInvite_InviterToGC::CopyFrom(const CMsgDOTATeamInvite_InviterToGC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInvite_InviterToGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_InviterToGC::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_InviterToGC::InternalSwap(CMsgDOTATeamInvite_InviterToGC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInvite_InviterToGC, _impl_.team_id_)
      + sizeof(CMsgDOTATeamInvite_InviterToGC::_impl_.team_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInvite_InviterToGC, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInvite_InviterToGC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[14]);
}

// ===================================================================

class CMsgDOTATeamInvite_GCImmediateResponseToInviter::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInvite_GCImmediateResponseToInviter>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_invitee_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_required_play_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTATeamInvite_GCImmediateResponseToInviter::CMsgDOTATeamInvite_GCImmediateResponseToInviter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
}
CMsgDOTATeamInvite_GCImmediateResponseToInviter::CMsgDOTATeamInvite_GCImmediateResponseToInviter(const CMsgDOTATeamInvite_GCImmediateResponseToInviter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTATeamInvite_GCImmediateResponseToInviter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.invitee_name_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.required_play_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.invitee_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.invitee_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_invitee_name()) {
    _this->_impl_.invitee_name_.Set(from._internal_invitee_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.required_play_time_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.required_play_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
}

inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.invitee_name_){}
    , decltype(_impl_.result_){0}
    , decltype(_impl_.required_play_time_){0u}
  };
  _impl_.invitee_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.invitee_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTATeamInvite_GCImmediateResponseToInviter::~CMsgDOTATeamInvite_GCImmediateResponseToInviter() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTATeamInvite_GCImmediateResponseToInviter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.invitee_name_.Destroy();
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.invitee_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.required_play_time_) -
        reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.required_play_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInvite_GCImmediateResponseToInviter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETeamInviteResult_IsValid(val))) {
            _internal_set_result(static_cast<::ETeamInviteResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string invitee_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_invitee_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 required_play_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_required_play_time(&has_bits);
          _impl_.required_play_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTATeamInvite_GCImmediateResponseToInviter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional string invitee_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invitee_name().data(), static_cast<int>(this->_internal_invitee_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_invitee_name(), target);
  }

  // optional uint32 required_play_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_required_play_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  return target;
}

size_t CMsgDOTATeamInvite_GCImmediateResponseToInviter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string invitee_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_invitee_name());
    }

    // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional uint32 required_play_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_required_play_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTATeamInvite_GCImmediateResponseToInviter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTATeamInvite_GCImmediateResponseToInviter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTATeamInvite_GCImmediateResponseToInviter::GetClassData() const { return &_class_data_; }


void CMsgDOTATeamInvite_GCImmediateResponseToInviter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTATeamInvite_GCImmediateResponseToInviter*>(&to_msg);
  auto& from = static_cast<const CMsgDOTATeamInvite_GCImmediateResponseToInviter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_invitee_name(from._internal_invitee_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.required_play_time_ = from._impl_.required_play_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::CopyFrom(const CMsgDOTATeamInvite_GCImmediateResponseToInviter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_GCImmediateResponseToInviter::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::InternalSwap(CMsgDOTATeamInvite_GCImmediateResponseToInviter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.invitee_name_, lhs_arena,
      &other->_impl_.invitee_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInvite_GCImmediateResponseToInviter, _impl_.required_play_time_)
      + sizeof(CMsgDOTATeamInvite_GCImmediateResponseToInviter::_impl_.required_play_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInvite_GCImmediateResponseToInviter, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInvite_GCImmediateResponseToInviter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[15]);
}

// ===================================================================

class CMsgDOTATeamInvite_GCRequestToInvitee::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInvite_GCRequestToInvitee>()._impl_._has_bits_);
  static void set_has_inviter_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTATeamInvite_GCRequestToInvitee::CMsgDOTATeamInvite_GCRequestToInvitee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInvite_GCRequestToInvitee)
}
CMsgDOTATeamInvite_GCRequestToInvitee::CMsgDOTATeamInvite_GCRequestToInvitee(const CMsgDOTATeamInvite_GCRequestToInvitee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTATeamInvite_GCRequestToInvitee* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_name_){}
    , decltype(_impl_.team_tag_){}
    , decltype(_impl_.logo_){}
    , decltype(_impl_.inviter_account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.team_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_name()) {
    _this->_impl_.team_name_.Set(from._internal_team_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.team_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_tag()) {
    _this->_impl_.team_tag_.Set(from._internal_team_tag(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.logo_, &from._impl_.logo_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.inviter_account_id_) -
    reinterpret_cast<char*>(&_impl_.logo_)) + sizeof(_impl_.inviter_account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInvite_GCRequestToInvitee)
}

inline void CMsgDOTATeamInvite_GCRequestToInvitee::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_name_){}
    , decltype(_impl_.team_tag_){}
    , decltype(_impl_.logo_){uint64_t{0u}}
    , decltype(_impl_.inviter_account_id_){0u}
  };
  _impl_.team_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.team_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTATeamInvite_GCRequestToInvitee::~CMsgDOTATeamInvite_GCRequestToInvitee() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInvite_GCRequestToInvitee)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTATeamInvite_GCRequestToInvitee::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.team_name_.Destroy();
  _impl_.team_tag_.Destroy();
}

void CMsgDOTATeamInvite_GCRequestToInvitee::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTATeamInvite_GCRequestToInvitee::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInvite_GCRequestToInvitee)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.team_tag_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.inviter_account_id_) -
        reinterpret_cast<char*>(&_impl_.logo_)) + sizeof(_impl_.inviter_account_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInvite_GCRequestToInvitee::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 inviter_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_inviter_account_id(&has_bits);
          _impl_.inviter_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string team_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_team_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTATeamInvite_GCRequestToInvitee.team_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string team_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_team_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTATeamInvite_GCRequestToInvitee.team_tag");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 logo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_logo(&has_bits);
          _impl_.logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTATeamInvite_GCRequestToInvitee::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInvite_GCRequestToInvitee)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 inviter_account_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_inviter_account_id(), target);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInvite_GCRequestToInvitee.team_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_team_name(), target);
  }

  // optional string team_tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_tag().data(), static_cast<int>(this->_internal_team_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInvite_GCRequestToInvitee.team_tag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_team_tag(), target);
  }

  // optional uint64 logo = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_logo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInvite_GCRequestToInvitee)
  return target;
}

size_t CMsgDOTATeamInvite_GCRequestToInvitee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInvite_GCRequestToInvitee)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string team_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional string team_tag = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_tag());
    }

    // optional uint64 logo = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_logo());
    }

    // optional uint32 inviter_account_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_inviter_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTATeamInvite_GCRequestToInvitee::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTATeamInvite_GCRequestToInvitee::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTATeamInvite_GCRequestToInvitee::GetClassData() const { return &_class_data_; }


void CMsgDOTATeamInvite_GCRequestToInvitee::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTATeamInvite_GCRequestToInvitee*>(&to_msg);
  auto& from = static_cast<const CMsgDOTATeamInvite_GCRequestToInvitee&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInvite_GCRequestToInvitee)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_team_tag(from._internal_team_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.logo_ = from._impl_.logo_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.inviter_account_id_ = from._impl_.inviter_account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTATeamInvite_GCRequestToInvitee::CopyFrom(const CMsgDOTATeamInvite_GCRequestToInvitee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInvite_GCRequestToInvitee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_GCRequestToInvitee::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_GCRequestToInvitee::InternalSwap(CMsgDOTATeamInvite_GCRequestToInvitee* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_name_, lhs_arena,
      &other->_impl_.team_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_tag_, lhs_arena,
      &other->_impl_.team_tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInvite_GCRequestToInvitee, _impl_.inviter_account_id_)
      + sizeof(CMsgDOTATeamInvite_GCRequestToInvitee::_impl_.inviter_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInvite_GCRequestToInvitee, _impl_.logo_)>(
          reinterpret_cast<char*>(&_impl_.logo_),
          reinterpret_cast<char*>(&other->_impl_.logo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInvite_GCRequestToInvitee::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[16]);
}

// ===================================================================

class CMsgDOTATeamInvite_InviteeResponseToGC::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInvite_InviteeResponseToGC>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTATeamInvite_InviteeResponseToGC::CMsgDOTATeamInvite_InviteeResponseToGC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInvite_InviteeResponseToGC)
}
CMsgDOTATeamInvite_InviteeResponseToGC::CMsgDOTATeamInvite_InviteeResponseToGC(const CMsgDOTATeamInvite_InviteeResponseToGC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTATeamInvite_InviteeResponseToGC* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInvite_InviteeResponseToGC)
}

inline void CMsgDOTATeamInvite_InviteeResponseToGC::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){0}
  };
}

CMsgDOTATeamInvite_InviteeResponseToGC::~CMsgDOTATeamInvite_InviteeResponseToGC() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInvite_InviteeResponseToGC)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTATeamInvite_InviteeResponseToGC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTATeamInvite_InviteeResponseToGC::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTATeamInvite_InviteeResponseToGC::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInvite_InviteeResponseToGC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInvite_InviteeResponseToGC::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETeamInviteResult_IsValid(val))) {
            _internal_set_result(static_cast<::ETeamInviteResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTATeamInvite_InviteeResponseToGC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInvite_InviteeResponseToGC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInvite_InviteeResponseToGC)
  return target;
}

size_t CMsgDOTATeamInvite_InviteeResponseToGC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInvite_InviteeResponseToGC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTATeamInvite_InviteeResponseToGC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTATeamInvite_InviteeResponseToGC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTATeamInvite_InviteeResponseToGC::GetClassData() const { return &_class_data_; }


void CMsgDOTATeamInvite_InviteeResponseToGC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTATeamInvite_InviteeResponseToGC*>(&to_msg);
  auto& from = static_cast<const CMsgDOTATeamInvite_InviteeResponseToGC&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInvite_InviteeResponseToGC)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTATeamInvite_InviteeResponseToGC::CopyFrom(const CMsgDOTATeamInvite_InviteeResponseToGC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInvite_InviteeResponseToGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_InviteeResponseToGC::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_InviteeResponseToGC::InternalSwap(CMsgDOTATeamInvite_InviteeResponseToGC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInvite_InviteeResponseToGC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[17]);
}

// ===================================================================

class CMsgDOTATeamInvite_GCResponseToInviter::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInvite_GCResponseToInviter>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_invitee_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTATeamInvite_GCResponseToInviter::CMsgDOTATeamInvite_GCResponseToInviter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInvite_GCResponseToInviter)
}
CMsgDOTATeamInvite_GCResponseToInviter::CMsgDOTATeamInvite_GCResponseToInviter(const CMsgDOTATeamInvite_GCResponseToInviter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTATeamInvite_GCResponseToInviter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.invitee_name_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.invitee_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.invitee_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_invitee_name()) {
    _this->_impl_.invitee_name_.Set(from._internal_invitee_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInvite_GCResponseToInviter)
}

inline void CMsgDOTATeamInvite_GCResponseToInviter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.invitee_name_){}
    , decltype(_impl_.result_){0}
  };
  _impl_.invitee_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.invitee_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTATeamInvite_GCResponseToInviter::~CMsgDOTATeamInvite_GCResponseToInviter() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInvite_GCResponseToInviter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTATeamInvite_GCResponseToInviter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.invitee_name_.Destroy();
}

void CMsgDOTATeamInvite_GCResponseToInviter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTATeamInvite_GCResponseToInviter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInvite_GCResponseToInviter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.invitee_name_.ClearNonDefaultToEmpty();
  }
  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInvite_GCResponseToInviter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETeamInviteResult_IsValid(val))) {
            _internal_set_result(static_cast<::ETeamInviteResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string invitee_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_invitee_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTATeamInvite_GCResponseToInviter.invitee_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTATeamInvite_GCResponseToInviter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInvite_GCResponseToInviter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional string invitee_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invitee_name().data(), static_cast<int>(this->_internal_invitee_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInvite_GCResponseToInviter.invitee_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_invitee_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInvite_GCResponseToInviter)
  return target;
}

size_t CMsgDOTATeamInvite_GCResponseToInviter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInvite_GCResponseToInviter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string invitee_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_invitee_name());
    }

    // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTATeamInvite_GCResponseToInviter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTATeamInvite_GCResponseToInviter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTATeamInvite_GCResponseToInviter::GetClassData() const { return &_class_data_; }


void CMsgDOTATeamInvite_GCResponseToInviter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTATeamInvite_GCResponseToInviter*>(&to_msg);
  auto& from = static_cast<const CMsgDOTATeamInvite_GCResponseToInviter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInvite_GCResponseToInviter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_invitee_name(from._internal_invitee_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTATeamInvite_GCResponseToInviter::CopyFrom(const CMsgDOTATeamInvite_GCResponseToInviter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInvite_GCResponseToInviter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_GCResponseToInviter::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_GCResponseToInviter::InternalSwap(CMsgDOTATeamInvite_GCResponseToInviter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.invitee_name_, lhs_arena,
      &other->_impl_.invitee_name_, rhs_arena
  );
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInvite_GCResponseToInviter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[18]);
}

// ===================================================================

class CMsgDOTATeamInvite_GCResponseToInvitee::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInvite_GCResponseToInvitee>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTATeamInvite_GCResponseToInvitee::CMsgDOTATeamInvite_GCResponseToInvitee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInvite_GCResponseToInvitee)
}
CMsgDOTATeamInvite_GCResponseToInvitee::CMsgDOTATeamInvite_GCResponseToInvitee(const CMsgDOTATeamInvite_GCResponseToInvitee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTATeamInvite_GCResponseToInvitee* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_name_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.team_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_name()) {
    _this->_impl_.team_name_.Set(from._internal_team_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInvite_GCResponseToInvitee)
}

inline void CMsgDOTATeamInvite_GCResponseToInvitee::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_name_){}
    , decltype(_impl_.result_){0}
  };
  _impl_.team_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTATeamInvite_GCResponseToInvitee::~CMsgDOTATeamInvite_GCResponseToInvitee() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInvite_GCResponseToInvitee)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTATeamInvite_GCResponseToInvitee::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.team_name_.Destroy();
}

void CMsgDOTATeamInvite_GCResponseToInvitee::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTATeamInvite_GCResponseToInvitee::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInvite_GCResponseToInvitee)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.team_name_.ClearNonDefaultToEmpty();
  }
  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInvite_GCResponseToInvitee::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETeamInviteResult_IsValid(val))) {
            _internal_set_result(static_cast<::ETeamInviteResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string team_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_team_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTATeamInvite_GCResponseToInvitee.team_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTATeamInvite_GCResponseToInvitee::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInvite_GCResponseToInvitee)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInvite_GCResponseToInvitee.team_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_team_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInvite_GCResponseToInvitee)
  return target;
}

size_t CMsgDOTATeamInvite_GCResponseToInvitee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInvite_GCResponseToInvitee)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string team_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTATeamInvite_GCResponseToInvitee::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTATeamInvite_GCResponseToInvitee::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTATeamInvite_GCResponseToInvitee::GetClassData() const { return &_class_data_; }


void CMsgDOTATeamInvite_GCResponseToInvitee::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTATeamInvite_GCResponseToInvitee*>(&to_msg);
  auto& from = static_cast<const CMsgDOTATeamInvite_GCResponseToInvitee&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInvite_GCResponseToInvitee)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTATeamInvite_GCResponseToInvitee::CopyFrom(const CMsgDOTATeamInvite_GCResponseToInvitee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInvite_GCResponseToInvitee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_GCResponseToInvitee::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_GCResponseToInvitee::InternalSwap(CMsgDOTATeamInvite_GCResponseToInvitee* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_name_, lhs_arena,
      &other->_impl_.team_name_, rhs_arena
  );
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInvite_GCResponseToInvitee::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[19]);
}

// ===================================================================

class CMsgDOTAKickTeamMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAKickTeamMember>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAKickTeamMember::CMsgDOTAKickTeamMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAKickTeamMember)
}
CMsgDOTAKickTeamMember::CMsgDOTAKickTeamMember(const CMsgDOTAKickTeamMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAKickTeamMember* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.team_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_id_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.team_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAKickTeamMember)
}

inline void CMsgDOTAKickTeamMember::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.team_id_){0u}
  };
}

CMsgDOTAKickTeamMember::~CMsgDOTAKickTeamMember() {
  // @@protoc_insertion_point(destructor:CMsgDOTAKickTeamMember)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAKickTeamMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAKickTeamMember::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAKickTeamMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAKickTeamMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.team_id_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.team_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAKickTeamMember::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAKickTeamMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAKickTeamMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAKickTeamMember)
  return target;
}

size_t CMsgDOTAKickTeamMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAKickTeamMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAKickTeamMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAKickTeamMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAKickTeamMember::GetClassData() const { return &_class_data_; }


void CMsgDOTAKickTeamMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAKickTeamMember*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAKickTeamMember&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAKickTeamMember)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAKickTeamMember::CopyFrom(const CMsgDOTAKickTeamMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAKickTeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAKickTeamMember::IsInitialized() const {
  return true;
}

void CMsgDOTAKickTeamMember::InternalSwap(CMsgDOTAKickTeamMember* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAKickTeamMember, _impl_.team_id_)
      + sizeof(CMsgDOTAKickTeamMember::_impl_.team_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAKickTeamMember, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAKickTeamMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[20]);
}

// ===================================================================

class CMsgDOTAKickTeamMemberResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAKickTeamMemberResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAKickTeamMemberResponse::CMsgDOTAKickTeamMemberResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAKickTeamMemberResponse)
}
CMsgDOTAKickTeamMemberResponse::CMsgDOTAKickTeamMemberResponse(const CMsgDOTAKickTeamMemberResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAKickTeamMemberResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAKickTeamMemberResponse)
}

inline void CMsgDOTAKickTeamMemberResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){0}
  };
}

CMsgDOTAKickTeamMemberResponse::~CMsgDOTAKickTeamMemberResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAKickTeamMemberResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAKickTeamMemberResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAKickTeamMemberResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAKickTeamMemberResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAKickTeamMemberResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAKickTeamMemberResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAKickTeamMemberResponse_Result_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAKickTeamMemberResponse_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAKickTeamMemberResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAKickTeamMemberResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAKickTeamMemberResponse)
  return target;
}

size_t CMsgDOTAKickTeamMemberResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAKickTeamMemberResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAKickTeamMemberResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAKickTeamMemberResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAKickTeamMemberResponse::GetClassData() const { return &_class_data_; }


void CMsgDOTAKickTeamMemberResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAKickTeamMemberResponse*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAKickTeamMemberResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAKickTeamMemberResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAKickTeamMemberResponse::CopyFrom(const CMsgDOTAKickTeamMemberResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAKickTeamMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAKickTeamMemberResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAKickTeamMemberResponse::InternalSwap(CMsgDOTAKickTeamMemberResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAKickTeamMemberResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[21]);
}

// ===================================================================

class CMsgDOTATransferTeamAdmin::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATransferTeamAdmin>()._impl_._has_bits_);
  static void set_has_new_admin_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTATransferTeamAdmin::CMsgDOTATransferTeamAdmin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATransferTeamAdmin)
}
CMsgDOTATransferTeamAdmin::CMsgDOTATransferTeamAdmin(const CMsgDOTATransferTeamAdmin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTATransferTeamAdmin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_admin_account_id_){}
    , decltype(_impl_.team_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.new_admin_account_id_, &from._impl_.new_admin_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_id_) -
    reinterpret_cast<char*>(&_impl_.new_admin_account_id_)) + sizeof(_impl_.team_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATransferTeamAdmin)
}

inline void CMsgDOTATransferTeamAdmin::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_admin_account_id_){0u}
    , decltype(_impl_.team_id_){0u}
  };
}

CMsgDOTATransferTeamAdmin::~CMsgDOTATransferTeamAdmin() {
  // @@protoc_insertion_point(destructor:CMsgDOTATransferTeamAdmin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTATransferTeamAdmin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTATransferTeamAdmin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTATransferTeamAdmin::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATransferTeamAdmin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.new_admin_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.team_id_) -
        reinterpret_cast<char*>(&_impl_.new_admin_account_id_)) + sizeof(_impl_.team_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATransferTeamAdmin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 new_admin_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_new_admin_account_id(&has_bits);
          _impl_.new_admin_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTATransferTeamAdmin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATransferTeamAdmin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 new_admin_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_new_admin_account_id(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATransferTeamAdmin)
  return target;
}

size_t CMsgDOTATransferTeamAdmin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATransferTeamAdmin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 new_admin_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_new_admin_account_id());
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTATransferTeamAdmin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTATransferTeamAdmin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTATransferTeamAdmin::GetClassData() const { return &_class_data_; }


void CMsgDOTATransferTeamAdmin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTATransferTeamAdmin*>(&to_msg);
  auto& from = static_cast<const CMsgDOTATransferTeamAdmin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATransferTeamAdmin)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.new_admin_account_id_ = from._impl_.new_admin_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTATransferTeamAdmin::CopyFrom(const CMsgDOTATransferTeamAdmin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATransferTeamAdmin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATransferTeamAdmin::IsInitialized() const {
  return true;
}

void CMsgDOTATransferTeamAdmin::InternalSwap(CMsgDOTATransferTeamAdmin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATransferTeamAdmin, _impl_.team_id_)
      + sizeof(CMsgDOTATransferTeamAdmin::_impl_.team_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATransferTeamAdmin, _impl_.new_admin_account_id_)>(
          reinterpret_cast<char*>(&_impl_.new_admin_account_id_),
          reinterpret_cast<char*>(&other->_impl_.new_admin_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATransferTeamAdmin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[22]);
}

// ===================================================================

class CMsgDOTATransferTeamAdminResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATransferTeamAdminResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTATransferTeamAdminResponse::CMsgDOTATransferTeamAdminResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATransferTeamAdminResponse)
}
CMsgDOTATransferTeamAdminResponse::CMsgDOTATransferTeamAdminResponse(const CMsgDOTATransferTeamAdminResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTATransferTeamAdminResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATransferTeamAdminResponse)
}

inline void CMsgDOTATransferTeamAdminResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){0}
  };
}

CMsgDOTATransferTeamAdminResponse::~CMsgDOTATransferTeamAdminResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTATransferTeamAdminResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTATransferTeamAdminResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTATransferTeamAdminResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTATransferTeamAdminResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATransferTeamAdminResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATransferTeamAdminResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTATransferTeamAdminResponse_Result_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTATransferTeamAdminResponse_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTATransferTeamAdminResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATransferTeamAdminResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATransferTeamAdminResponse)
  return target;
}

size_t CMsgDOTATransferTeamAdminResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATransferTeamAdminResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTATransferTeamAdminResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTATransferTeamAdminResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTATransferTeamAdminResponse::GetClassData() const { return &_class_data_; }


void CMsgDOTATransferTeamAdminResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTATransferTeamAdminResponse*>(&to_msg);
  auto& from = static_cast<const CMsgDOTATransferTeamAdminResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATransferTeamAdminResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTATransferTeamAdminResponse::CopyFrom(const CMsgDOTATransferTeamAdminResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATransferTeamAdminResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATransferTeamAdminResponse::IsInitialized() const {
  return true;
}

void CMsgDOTATransferTeamAdminResponse::InternalSwap(CMsgDOTATransferTeamAdminResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATransferTeamAdminResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[23]);
}

// ===================================================================

class CMsgDOTALeaveTeam::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeaveTeam>()._impl_._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTALeaveTeam::CMsgDOTALeaveTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeaveTeam)
}
CMsgDOTALeaveTeam::CMsgDOTALeaveTeam(const CMsgDOTALeaveTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTALeaveTeam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.team_id_ = from._impl_.team_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeaveTeam)
}

inline void CMsgDOTALeaveTeam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_id_){0u}
  };
}

CMsgDOTALeaveTeam::~CMsgDOTALeaveTeam() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeaveTeam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTALeaveTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTALeaveTeam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTALeaveTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeaveTeam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.team_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeaveTeam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTALeaveTeam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeaveTeam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeaveTeam)
  return target;
}

size_t CMsgDOTALeaveTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeaveTeam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 team_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTALeaveTeam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTALeaveTeam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTALeaveTeam::GetClassData() const { return &_class_data_; }


void CMsgDOTALeaveTeam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTALeaveTeam*>(&to_msg);
  auto& from = static_cast<const CMsgDOTALeaveTeam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeaveTeam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_team_id()) {
    _this->_internal_set_team_id(from._internal_team_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTALeaveTeam::CopyFrom(const CMsgDOTALeaveTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeaveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeaveTeam::IsInitialized() const {
  return true;
}

void CMsgDOTALeaveTeam::InternalSwap(CMsgDOTALeaveTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.team_id_, other->_impl_.team_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeaveTeam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[24]);
}

// ===================================================================

class CMsgDOTALeaveTeamResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeaveTeamResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTALeaveTeamResponse::CMsgDOTALeaveTeamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeaveTeamResponse)
}
CMsgDOTALeaveTeamResponse::CMsgDOTALeaveTeamResponse(const CMsgDOTALeaveTeamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTALeaveTeamResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeaveTeamResponse)
}

inline void CMsgDOTALeaveTeamResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){0}
  };
}

CMsgDOTALeaveTeamResponse::~CMsgDOTALeaveTeamResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeaveTeamResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTALeaveTeamResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTALeaveTeamResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTALeaveTeamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeaveTeamResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeaveTeamResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTALeaveTeamResponse_Result_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTALeaveTeamResponse_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTALeaveTeamResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeaveTeamResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeaveTeamResponse)
  return target;
}

size_t CMsgDOTALeaveTeamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeaveTeamResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTALeaveTeamResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTALeaveTeamResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTALeaveTeamResponse::GetClassData() const { return &_class_data_; }


void CMsgDOTALeaveTeamResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTALeaveTeamResponse*>(&to_msg);
  auto& from = static_cast<const CMsgDOTALeaveTeamResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeaveTeamResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTALeaveTeamResponse::CopyFrom(const CMsgDOTALeaveTeamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeaveTeamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeaveTeamResponse::IsInitialized() const {
  return true;
}

void CMsgDOTALeaveTeamResponse::InternalSwap(CMsgDOTALeaveTeamResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeaveTeamResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[25]);
}

// ===================================================================

class CMsgDOTABetaParticipation::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTABetaParticipation>()._impl_._has_bits_);
  static void set_has_access_rights(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTABetaParticipation::CMsgDOTABetaParticipation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTABetaParticipation)
}
CMsgDOTABetaParticipation::CMsgDOTABetaParticipation(const CMsgDOTABetaParticipation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTABetaParticipation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.access_rights_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.access_rights_ = from._impl_.access_rights_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTABetaParticipation)
}

inline void CMsgDOTABetaParticipation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.access_rights_){0u}
  };
}

CMsgDOTABetaParticipation::~CMsgDOTABetaParticipation() {
  // @@protoc_insertion_point(destructor:CMsgDOTABetaParticipation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTABetaParticipation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTABetaParticipation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTABetaParticipation::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTABetaParticipation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.access_rights_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTABetaParticipation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 access_rights = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_access_rights(&has_bits);
          _impl_.access_rights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTABetaParticipation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTABetaParticipation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 access_rights = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_access_rights(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTABetaParticipation)
  return target;
}

size_t CMsgDOTABetaParticipation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTABetaParticipation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 access_rights = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_access_rights());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTABetaParticipation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTABetaParticipation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTABetaParticipation::GetClassData() const { return &_class_data_; }


void CMsgDOTABetaParticipation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTABetaParticipation*>(&to_msg);
  auto& from = static_cast<const CMsgDOTABetaParticipation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTABetaParticipation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_access_rights()) {
    _this->_internal_set_access_rights(from._internal_access_rights());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTABetaParticipation::CopyFrom(const CMsgDOTABetaParticipation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTABetaParticipation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABetaParticipation::IsInitialized() const {
  return true;
}

void CMsgDOTABetaParticipation::InternalSwap(CMsgDOTABetaParticipation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.access_rights_, other->_impl_.access_rights_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTABetaParticipation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[26]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInfo_HeroStats*
Arena::CreateMaybeMessage< ::CMsgDOTATeamInfo_HeroStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInfo_HeroStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInfo_MemberStats*
Arena::CreateMaybeMessage< ::CMsgDOTATeamInfo_MemberStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInfo_MemberStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInfo_TeamStats*
Arena::CreateMaybeMessage< ::CMsgDOTATeamInfo_TeamStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInfo_TeamStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInfo_DPCResult*
Arena::CreateMaybeMessage< ::CMsgDOTATeamInfo_DPCResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInfo_DPCResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInfo_Member*
Arena::CreateMaybeMessage< ::CMsgDOTATeamInfo_Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInfo_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInfo_AuditEntry*
Arena::CreateMaybeMessage< ::CMsgDOTATeamInfo_AuditEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInfo_AuditEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInfo*
Arena::CreateMaybeMessage< ::CMsgDOTATeamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamsInfo*
Arena::CreateMaybeMessage< ::CMsgDOTATeamsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInfoList*
Arena::CreateMaybeMessage< ::CMsgDOTATeamInfoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAMyTeamInfoRequest*
Arena::CreateMaybeMessage< ::CMsgDOTAMyTeamInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAMyTeamInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTACreateTeam*
Arena::CreateMaybeMessage< ::CMsgDOTACreateTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTACreateTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTACreateTeamResponse*
Arena::CreateMaybeMessage< ::CMsgDOTACreateTeamResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTACreateTeamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAEditTeamDetails*
Arena::CreateMaybeMessage< ::CMsgDOTAEditTeamDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAEditTeamDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAEditTeamDetailsResponse*
Arena::CreateMaybeMessage< ::CMsgDOTAEditTeamDetailsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAEditTeamDetailsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInvite_InviterToGC*
Arena::CreateMaybeMessage< ::CMsgDOTATeamInvite_InviterToGC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInvite_InviterToGC >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInvite_GCImmediateResponseToInviter*
Arena::CreateMaybeMessage< ::CMsgDOTATeamInvite_GCImmediateResponseToInviter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInvite_GCImmediateResponseToInviter >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInvite_GCRequestToInvitee*
Arena::CreateMaybeMessage< ::CMsgDOTATeamInvite_GCRequestToInvitee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInvite_GCRequestToInvitee >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInvite_InviteeResponseToGC*
Arena::CreateMaybeMessage< ::CMsgDOTATeamInvite_InviteeResponseToGC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInvite_InviteeResponseToGC >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInvite_GCResponseToInviter*
Arena::CreateMaybeMessage< ::CMsgDOTATeamInvite_GCResponseToInviter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInvite_GCResponseToInviter >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInvite_GCResponseToInvitee*
Arena::CreateMaybeMessage< ::CMsgDOTATeamInvite_GCResponseToInvitee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInvite_GCResponseToInvitee >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAKickTeamMember*
Arena::CreateMaybeMessage< ::CMsgDOTAKickTeamMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAKickTeamMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAKickTeamMemberResponse*
Arena::CreateMaybeMessage< ::CMsgDOTAKickTeamMemberResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAKickTeamMemberResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATransferTeamAdmin*
Arena::CreateMaybeMessage< ::CMsgDOTATransferTeamAdmin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATransferTeamAdmin >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATransferTeamAdminResponse*
Arena::CreateMaybeMessage< ::CMsgDOTATransferTeamAdminResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATransferTeamAdminResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeaveTeam*
Arena::CreateMaybeMessage< ::CMsgDOTALeaveTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeaveTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeaveTeamResponse*
Arena::CreateMaybeMessage< ::CMsgDOTALeaveTeamResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeaveTeamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTABetaParticipation*
Arena::CreateMaybeMessage< ::CMsgDOTABetaParticipation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTABetaParticipation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
