// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_modifiers.proto

#include "dota_modifiers.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CDOTAModifierBuffTableEntry::CDOTAModifierBuffTableEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.portal_loop_appear_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.portal_loop_disappear_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hero_loop_appear_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hero_loop_disappear_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.illusion_label_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_ids_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lua_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.v_start_)*/nullptr
  , /*decltype(_impl_.v_end_)*/nullptr
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.serial_num_)*/0
  , /*decltype(_impl_.modifier_class_)*/0
  , /*decltype(_impl_.ability_level_)*/0
  , /*decltype(_impl_.stack_count_)*/0
  , /*decltype(_impl_.creation_time_)*/0
  , /*decltype(_impl_.armor_)*/0
  , /*decltype(_impl_.fade_time_)*/0
  , /*decltype(_impl_.channel_time_)*/0
  , /*decltype(_impl_.movement_speed_)*/0
  , /*decltype(_impl_.subtle_)*/false
  , /*decltype(_impl_.aura_)*/false
  , /*decltype(_impl_.active_)*/false
  , /*decltype(_impl_.activity_)*/0
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_.range_)*/0
  , /*decltype(_impl_.dd_modifier_index_)*/0
  , /*decltype(_impl_.attack_speed_)*/0
  , /*decltype(_impl_.bonus_all_stats_)*/0
  , /*decltype(_impl_.bonus_health_)*/0
  , /*decltype(_impl_.bonus_mana_)*/0
  , /*decltype(_impl_.entry_type_)*/1
  , /*decltype(_impl_.parent_)*/16777215u
  , /*decltype(_impl_.duration_)*/-1
  , /*decltype(_impl_.caster_)*/16777215u
  , /*decltype(_impl_.ability_)*/16777215u
  , /*decltype(_impl_.dd_ability_id_)*/-1
  , /*decltype(_impl_.aura_owner_)*/16777215u
  , /*decltype(_impl_.custom_entity_)*/16777215u} {}
struct CDOTAModifierBuffTableEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAModifierBuffTableEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAModifierBuffTableEntryDefaultTypeInternal() {}
  union {
    CDOTAModifierBuffTableEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAModifierBuffTableEntryDefaultTypeInternal _CDOTAModifierBuffTableEntry_default_instance_;
PROTOBUF_CONSTEXPR CDOTALuaModifierEntry::CDOTALuaModifierEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.modifier_filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.modifier_type_)*/0} {}
struct CDOTALuaModifierEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTALuaModifierEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTALuaModifierEntryDefaultTypeInternal() {}
  union {
    CDOTALuaModifierEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTALuaModifierEntryDefaultTypeInternal _CDOTALuaModifierEntry_default_instance_;
static ::_pb::Metadata file_level_metadata_dota_5fmodifiers_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dota_5fmodifiers_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dota_5fmodifiers_2eproto = nullptr;

const uint32_t TableStruct_dota_5fmodifiers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.entry_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.serial_num_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.modifier_class_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.ability_level_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.stack_count_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.creation_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.caster_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.ability_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.armor_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.fade_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.subtle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.channel_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.v_start_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.v_end_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.portal_loop_appear_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.portal_loop_disappear_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.hero_loop_appear_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.hero_loop_disappear_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.movement_speed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.aura_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.activity_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.range_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.dd_modifier_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.dd_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.illusion_label_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.active_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.player_ids_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.lua_name_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.attack_speed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.aura_owner_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.bonus_all_stats_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.bonus_health_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.bonus_mana_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _impl_.custom_entity_),
  30,
  31,
  9,
  10,
  11,
  12,
  13,
  14,
  32,
  33,
  34,
  15,
  16,
  19,
  17,
  7,
  8,
  0,
  1,
  2,
  3,
  18,
  20,
  22,
  23,
  24,
  25,
  35,
  4,
  21,
  5,
  6,
  26,
  36,
  27,
  28,
  29,
  37,
  PROTOBUF_FIELD_OFFSET(::CDOTALuaModifierEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTALuaModifierEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTALuaModifierEntry, _impl_.modifier_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTALuaModifierEntry, _impl_.modifier_filename_),
  1,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 44, -1, sizeof(::CDOTAModifierBuffTableEntry)},
  { 82, 90, -1, sizeof(::CDOTALuaModifierEntry)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CDOTAModifierBuffTableEntry_default_instance_._instance,
  &::_CDOTALuaModifierEntry_default_instance_._instance,
};

const char descriptor_table_protodef_dota_5fmodifiers_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024dota_modifiers.proto\032\026networkbasetypes"
  ".proto\"\273\007\n\033CDOTAModifierBuffTableEntry\022N"
  "\n\nentry_type\030\001 \002(\0162\031.DOTA_MODIFIER_ENTRY"
  "_TYPE:\037DOTA_MODIFIER_ENTRY_TYPE_ACTIVE\022\030"
  "\n\006parent\030\002 \002(\r:\01016777215\022\r\n\005index\030\003 \002(\005\022"
  "\022\n\nserial_num\030\004 \002(\005\022\026\n\016modifier_class\030\005 "
  "\001(\005\022\025\n\rability_level\030\006 \001(\005\022\023\n\013stack_coun"
  "t\030\007 \001(\005\022\025\n\rcreation_time\030\010 \001(\002\022\024\n\010durati"
  "on\030\t \001(\002:\002-1\022\030\n\006caster\030\n \001(\r:\01016777215\022\031"
  "\n\007ability\030\013 \001(\r:\01016777215\022\r\n\005armor\030\014 \001(\005"
  "\022\021\n\tfade_time\030\r \001(\002\022\016\n\006subtle\030\016 \001(\010\022\024\n\014c"
  "hannel_time\030\017 \001(\002\022\034\n\007v_start\030\020 \001(\0132\013.CMs"
  "gVector\022\032\n\005v_end\030\021 \001(\0132\013.CMsgVector\022\032\n\022p"
  "ortal_loop_appear\030\022 \001(\t\022\035\n\025portal_loop_d"
  "isappear\030\023 \001(\t\022\030\n\020hero_loop_appear\030\024 \001(\t"
  "\022\033\n\023hero_loop_disappear\030\025 \001(\t\022\026\n\016movemen"
  "t_speed\030\026 \001(\005\022\014\n\004aura\030\027 \001(\010\022\020\n\010activity\030"
  "\030 \001(\005\022\016\n\006damage\030\031 \001(\005\022\r\n\005range\030\032 \001(\005\022\031\n\021"
  "dd_modifier_index\030\033 \001(\005\022\031\n\rdd_ability_id"
  "\030\034 \001(\005:\002-1\022\026\n\016illusion_label\030\035 \001(\t\022\016\n\006ac"
  "tive\030\036 \001(\010\022\026\n\nplayer_ids\030\037 \001(\t:\002-1\022\020\n\010lu"
  "a_name\030  \001(\t\022\024\n\014attack_speed\030! \001(\005\022\034\n\nau"
  "ra_owner\030\" \001(\r:\01016777215\022\027\n\017bonus_all_st"
  "ats\030# \001(\005\022\024\n\014bonus_health\030$ \001(\005\022\022\n\nbonus"
  "_mana\030% \001(\005\022\037\n\rcustom_entity\030& \001(\r:\0101677"
  "7215\"I\n\025CDOTALuaModifierEntry\022\025\n\rmodifie"
  "r_type\030\001 \002(\005\022\031\n\021modifier_filename\030\002 \002(\t*"
  "e\n\030DOTA_MODIFIER_ENTRY_TYPE\022#\n\037DOTA_MODI"
  "FIER_ENTRY_TYPE_ACTIVE\020\001\022$\n DOTA_MODIFIE"
  "R_ENTRY_TYPE_REMOVED\020\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dota_5fmodifiers_2eproto_deps[1] = {
  &::descriptor_table_networkbasetypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_dota_5fmodifiers_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dota_5fmodifiers_2eproto = {
    false, false, 1182, descriptor_table_protodef_dota_5fmodifiers_2eproto,
    "dota_modifiers.proto",
    &descriptor_table_dota_5fmodifiers_2eproto_once, descriptor_table_dota_5fmodifiers_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_dota_5fmodifiers_2eproto::offsets,
    file_level_metadata_dota_5fmodifiers_2eproto, file_level_enum_descriptors_dota_5fmodifiers_2eproto,
    file_level_service_descriptors_dota_5fmodifiers_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dota_5fmodifiers_2eproto_getter() {
  return &descriptor_table_dota_5fmodifiers_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dota_5fmodifiers_2eproto(&descriptor_table_dota_5fmodifiers_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_MODIFIER_ENTRY_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fmodifiers_2eproto);
  return file_level_enum_descriptors_dota_5fmodifiers_2eproto[0];
}
bool DOTA_MODIFIER_ENTRY_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CDOTAModifierBuffTableEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAModifierBuffTableEntry>()._impl_._has_bits_);
  static void set_has_entry_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_serial_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_modifier_class(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ability_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_stack_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_caster(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_ability(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_armor(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_fade_time(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_subtle(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_channel_time(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::CMsgVector& v_start(const CDOTAModifierBuffTableEntry* msg);
  static void set_has_v_start(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgVector& v_end(const CDOTAModifierBuffTableEntry* msg);
  static void set_has_v_end(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_portal_loop_appear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_portal_loop_disappear(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_loop_appear(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_loop_disappear(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_movement_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_aura(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_dd_modifier_index(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_dd_ability_id(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_illusion_label(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_player_ids(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lua_name(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_attack_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_aura_owner(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_bonus_all_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_bonus_health(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_bonus_mana(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_custom_entity(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0xc0000600) ^ 0xc0000600) != 0;
  }
};

const ::CMsgVector&
CDOTAModifierBuffTableEntry::_Internal::v_start(const CDOTAModifierBuffTableEntry* msg) {
  return *msg->_impl_.v_start_;
}
const ::CMsgVector&
CDOTAModifierBuffTableEntry::_Internal::v_end(const CDOTAModifierBuffTableEntry* msg) {
  return *msg->_impl_.v_end_;
}
void CDOTAModifierBuffTableEntry::clear_v_start() {
  if (_impl_.v_start_ != nullptr) _impl_.v_start_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void CDOTAModifierBuffTableEntry::clear_v_end() {
  if (_impl_.v_end_ != nullptr) _impl_.v_end_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString CDOTAModifierBuffTableEntry::Impl_::_i_give_permission_to_break_this_code_default_player_ids_{{{"-1", 2}}, {nullptr}};
CDOTAModifierBuffTableEntry::CDOTAModifierBuffTableEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAModifierBuffTableEntry)
}
CDOTAModifierBuffTableEntry::CDOTAModifierBuffTableEntry(const CDOTAModifierBuffTableEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAModifierBuffTableEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.portal_loop_appear_){}
    , decltype(_impl_.portal_loop_disappear_){}
    , decltype(_impl_.hero_loop_appear_){}
    , decltype(_impl_.hero_loop_disappear_){}
    , decltype(_impl_.illusion_label_){}
    , decltype(_impl_.player_ids_){}
    , decltype(_impl_.lua_name_){}
    , decltype(_impl_.v_start_){nullptr}
    , decltype(_impl_.v_end_){nullptr}
    , decltype(_impl_.index_){}
    , decltype(_impl_.serial_num_){}
    , decltype(_impl_.modifier_class_){}
    , decltype(_impl_.ability_level_){}
    , decltype(_impl_.stack_count_){}
    , decltype(_impl_.creation_time_){}
    , decltype(_impl_.armor_){}
    , decltype(_impl_.fade_time_){}
    , decltype(_impl_.channel_time_){}
    , decltype(_impl_.movement_speed_){}
    , decltype(_impl_.subtle_){}
    , decltype(_impl_.aura_){}
    , decltype(_impl_.active_){}
    , decltype(_impl_.activity_){}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.range_){}
    , decltype(_impl_.dd_modifier_index_){}
    , decltype(_impl_.attack_speed_){}
    , decltype(_impl_.bonus_all_stats_){}
    , decltype(_impl_.bonus_health_){}
    , decltype(_impl_.bonus_mana_){}
    , decltype(_impl_.entry_type_){}
    , decltype(_impl_.parent_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.caster_){}
    , decltype(_impl_.ability_){}
    , decltype(_impl_.dd_ability_id_){}
    , decltype(_impl_.aura_owner_){}
    , decltype(_impl_.custom_entity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.portal_loop_appear_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.portal_loop_appear_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_portal_loop_appear()) {
    _this->_impl_.portal_loop_appear_.Set(from._internal_portal_loop_appear(), 
      _this->GetArenaForAllocation());
  }
  _impl_.portal_loop_disappear_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.portal_loop_disappear_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_portal_loop_disappear()) {
    _this->_impl_.portal_loop_disappear_.Set(from._internal_portal_loop_disappear(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hero_loop_appear_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hero_loop_appear_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hero_loop_appear()) {
    _this->_impl_.hero_loop_appear_.Set(from._internal_hero_loop_appear(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hero_loop_disappear_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hero_loop_disappear_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hero_loop_disappear()) {
    _this->_impl_.hero_loop_disappear_.Set(from._internal_hero_loop_disappear(), 
      _this->GetArenaForAllocation());
  }
  _impl_.illusion_label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.illusion_label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_illusion_label()) {
    _this->_impl_.illusion_label_.Set(from._internal_illusion_label(), 
      _this->GetArenaForAllocation());
  }
  _impl_.player_ids_.InitDefault();
  if (from._internal_has_player_ids()) {
    _this->_impl_.player_ids_.Set(from._internal_player_ids(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lua_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lua_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lua_name()) {
    _this->_impl_.lua_name_.Set(from._internal_lua_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_v_start()) {
    _this->_impl_.v_start_ = new ::CMsgVector(*from._impl_.v_start_);
  }
  if (from._internal_has_v_end()) {
    _this->_impl_.v_end_ = new ::CMsgVector(*from._impl_.v_end_);
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.custom_entity_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.custom_entity_));
  // @@protoc_insertion_point(copy_constructor:CDOTAModifierBuffTableEntry)
}

inline void CDOTAModifierBuffTableEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.portal_loop_appear_){}
    , decltype(_impl_.portal_loop_disappear_){}
    , decltype(_impl_.hero_loop_appear_){}
    , decltype(_impl_.hero_loop_disappear_){}
    , decltype(_impl_.illusion_label_){}
    , decltype(_impl_.player_ids_){}
    , decltype(_impl_.lua_name_){}
    , decltype(_impl_.v_start_){nullptr}
    , decltype(_impl_.v_end_){nullptr}
    , decltype(_impl_.index_){0}
    , decltype(_impl_.serial_num_){0}
    , decltype(_impl_.modifier_class_){0}
    , decltype(_impl_.ability_level_){0}
    , decltype(_impl_.stack_count_){0}
    , decltype(_impl_.creation_time_){0}
    , decltype(_impl_.armor_){0}
    , decltype(_impl_.fade_time_){0}
    , decltype(_impl_.channel_time_){0}
    , decltype(_impl_.movement_speed_){0}
    , decltype(_impl_.subtle_){false}
    , decltype(_impl_.aura_){false}
    , decltype(_impl_.active_){false}
    , decltype(_impl_.activity_){0}
    , decltype(_impl_.damage_){0}
    , decltype(_impl_.range_){0}
    , decltype(_impl_.dd_modifier_index_){0}
    , decltype(_impl_.attack_speed_){0}
    , decltype(_impl_.bonus_all_stats_){0}
    , decltype(_impl_.bonus_health_){0}
    , decltype(_impl_.bonus_mana_){0}
    , decltype(_impl_.entry_type_){1}
    , decltype(_impl_.parent_){16777215u}
    , decltype(_impl_.duration_){-1}
    , decltype(_impl_.caster_){16777215u}
    , decltype(_impl_.ability_){16777215u}
    , decltype(_impl_.dd_ability_id_){-1}
    , decltype(_impl_.aura_owner_){16777215u}
    , decltype(_impl_.custom_entity_){16777215u}
  };
  _impl_.portal_loop_appear_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.portal_loop_appear_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.portal_loop_disappear_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.portal_loop_disappear_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hero_loop_appear_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hero_loop_appear_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hero_loop_disappear_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hero_loop_disappear_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.illusion_label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.illusion_label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.player_ids_.InitDefault();
  _impl_.lua_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lua_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAModifierBuffTableEntry::~CDOTAModifierBuffTableEntry() {
  // @@protoc_insertion_point(destructor:CDOTAModifierBuffTableEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAModifierBuffTableEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.portal_loop_appear_.Destroy();
  _impl_.portal_loop_disappear_.Destroy();
  _impl_.hero_loop_appear_.Destroy();
  _impl_.hero_loop_disappear_.Destroy();
  _impl_.illusion_label_.Destroy();
  _impl_.player_ids_.Destroy();
  _impl_.lua_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.v_start_;
  if (this != internal_default_instance()) delete _impl_.v_end_;
}

void CDOTAModifierBuffTableEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAModifierBuffTableEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAModifierBuffTableEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.portal_loop_appear_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.portal_loop_disappear_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.hero_loop_appear_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.hero_loop_disappear_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.illusion_label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.player_ids_.ClearToDefault(::CDOTAModifierBuffTableEntry::Impl_::_i_give_permission_to_break_this_code_default_player_ids_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000040u) {
      _impl_.lua_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.v_start_ != nullptr);
      _impl_.v_start_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(_impl_.v_end_ != nullptr);
    _impl_.v_end_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&_impl_.index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.armor_) -
        reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.armor_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.fade_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.damage_) -
        reinterpret_cast<char*>(&_impl_.fade_time_)) + sizeof(_impl_.damage_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.range_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bonus_mana_) -
        reinterpret_cast<char*>(&_impl_.range_)) + sizeof(_impl_.bonus_mana_));
    _impl_.entry_type_ = 1;
    _impl_.parent_ = 16777215u;
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    _impl_.duration_ = -1;
    _impl_.caster_ = 16777215u;
    _impl_.ability_ = 16777215u;
    _impl_.dd_ability_id_ = -1;
    _impl_.aura_owner_ = 16777215u;
    _impl_.custom_entity_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAModifierBuffTableEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .DOTA_MODIFIER_ENTRY_TYPE entry_type = 1 [default = DOTA_MODIFIER_ENTRY_TYPE_ACTIVE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_MODIFIER_ENTRY_TYPE_IsValid(val))) {
            _internal_set_entry_type(static_cast<::DOTA_MODIFIER_ENTRY_TYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 parent = 2 [default = 16777215];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_parent(&_impl_._has_bits_);
          _impl_.parent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_index(&_impl_._has_bits_);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 serial_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_serial_num(&_impl_._has_bits_);
          _impl_.serial_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 modifier_class = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_modifier_class(&_impl_._has_bits_);
          _impl_.modifier_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ability_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_ability_level(&_impl_._has_bits_);
          _impl_.ability_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 stack_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_stack_count(&_impl_._has_bits_);
          _impl_.stack_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float creation_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_creation_time(&_impl_._has_bits_);
          _impl_.creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float duration = 9 [default = -1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_duration(&_impl_._has_bits_);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 caster = 10 [default = 16777215];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_caster(&_impl_._has_bits_);
          _impl_.caster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability = 11 [default = 16777215];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_ability(&_impl_._has_bits_);
          _impl_.ability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 armor = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_armor(&_impl_._has_bits_);
          _impl_.armor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float fade_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_fade_time(&_impl_._has_bits_);
          _impl_.fade_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool subtle = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_subtle(&_impl_._has_bits_);
          _impl_.subtle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float channel_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_channel_time(&_impl_._has_bits_);
          _impl_.channel_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector v_start = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_v_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector v_end = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_v_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string portal_loop_appear = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_portal_loop_appear();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAModifierBuffTableEntry.portal_loop_appear");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string portal_loop_disappear = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_portal_loop_disappear();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAModifierBuffTableEntry.portal_loop_disappear");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string hero_loop_appear = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_hero_loop_appear();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAModifierBuffTableEntry.hero_loop_appear");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string hero_loop_disappear = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_hero_loop_disappear();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAModifierBuffTableEntry.hero_loop_disappear");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 movement_speed = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_movement_speed(&_impl_._has_bits_);
          _impl_.movement_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool aura = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_aura(&_impl_._has_bits_);
          _impl_.aura_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 activity = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_activity(&_impl_._has_bits_);
          _impl_.activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 damage = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_damage(&_impl_._has_bits_);
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 range = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_range(&_impl_._has_bits_);
          _impl_.range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dd_modifier_index = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_dd_modifier_index(&_impl_._has_bits_);
          _impl_.dd_modifier_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dd_ability_id = 28 [default = -1];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_dd_ability_id(&_impl_._has_bits_);
          _impl_.dd_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string illusion_label = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_illusion_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAModifierBuffTableEntry.illusion_label");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool active = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_active(&_impl_._has_bits_);
          _impl_.active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string player_ids = 31 [default = "-1"];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_player_ids();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAModifierBuffTableEntry.player_ids");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string lua_name = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_lua_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTAModifierBuffTableEntry.lua_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 attack_speed = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_attack_speed(&_impl_._has_bits_);
          _impl_.attack_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 aura_owner = 34 [default = 16777215];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_aura_owner(&_impl_._has_bits_);
          _impl_.aura_owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bonus_all_stats = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bonus_all_stats(&_impl_._has_bits_);
          _impl_.bonus_all_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bonus_health = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_bonus_health(&_impl_._has_bits_);
          _impl_.bonus_health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bonus_mana = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_bonus_mana(&_impl_._has_bits_);
          _impl_.bonus_mana_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 custom_entity = 38 [default = 16777215];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_custom_entity(&_impl_._has_bits_);
          _impl_.custom_entity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAModifierBuffTableEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAModifierBuffTableEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .DOTA_MODIFIER_ENTRY_TYPE entry_type = 1 [default = DOTA_MODIFIER_ENTRY_TYPE_ACTIVE];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_entry_type(), target);
  }

  // required uint32 parent = 2 [default = 16777215];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_parent(), target);
  }

  // required int32 index = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_index(), target);
  }

  // required int32 serial_num = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_serial_num(), target);
  }

  // optional int32 modifier_class = 5;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_modifier_class(), target);
  }

  // optional int32 ability_level = 6;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_ability_level(), target);
  }

  // optional int32 stack_count = 7;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_stack_count(), target);
  }

  // optional float creation_time = 8;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_creation_time(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional float duration = 9 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_duration(), target);
  }

  // optional uint32 caster = 10 [default = 16777215];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_caster(), target);
  }

  // optional uint32 ability = 11 [default = 16777215];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_ability(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 armor = 12;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_armor(), target);
  }

  // optional float fade_time = 13;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_fade_time(), target);
  }

  // optional bool subtle = 14;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_subtle(), target);
  }

  // optional float channel_time = 15;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_channel_time(), target);
  }

  // optional .CMsgVector v_start = 16;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::v_start(this),
        _Internal::v_start(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgVector v_end = 17;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::v_end(this),
        _Internal::v_end(this).GetCachedSize(), target, stream);
  }

  // optional string portal_loop_appear = 18;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_portal_loop_appear().data(), static_cast<int>(this->_internal_portal_loop_appear().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAModifierBuffTableEntry.portal_loop_appear");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_portal_loop_appear(), target);
  }

  // optional string portal_loop_disappear = 19;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_portal_loop_disappear().data(), static_cast<int>(this->_internal_portal_loop_disappear().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAModifierBuffTableEntry.portal_loop_disappear");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_portal_loop_disappear(), target);
  }

  // optional string hero_loop_appear = 20;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hero_loop_appear().data(), static_cast<int>(this->_internal_hero_loop_appear().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAModifierBuffTableEntry.hero_loop_appear");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_hero_loop_appear(), target);
  }

  // optional string hero_loop_disappear = 21;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hero_loop_disappear().data(), static_cast<int>(this->_internal_hero_loop_disappear().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAModifierBuffTableEntry.hero_loop_disappear");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_hero_loop_disappear(), target);
  }

  // optional int32 movement_speed = 22;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_movement_speed(), target);
  }

  // optional bool aura = 23;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_aura(), target);
  }

  // optional int32 activity = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_activity(), target);
  }

  // optional int32 damage = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_damage(), target);
  }

  // optional int32 range = 26;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_range(), target);
  }

  // optional int32 dd_modifier_index = 27;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_dd_modifier_index(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 dd_ability_id = 28 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(28, this->_internal_dd_ability_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string illusion_label = 29;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_illusion_label().data(), static_cast<int>(this->_internal_illusion_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAModifierBuffTableEntry.illusion_label");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_illusion_label(), target);
  }

  // optional bool active = 30;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_active(), target);
  }

  // optional string player_ids = 31 [default = "-1"];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_ids().data(), static_cast<int>(this->_internal_player_ids().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAModifierBuffTableEntry.player_ids");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_player_ids(), target);
  }

  // optional string lua_name = 32;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lua_name().data(), static_cast<int>(this->_internal_lua_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAModifierBuffTableEntry.lua_name");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_lua_name(), target);
  }

  // optional int32 attack_speed = 33;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(33, this->_internal_attack_speed(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 aura_owner = 34 [default = 16777215];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(34, this->_internal_aura_owner(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 bonus_all_stats = 35;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(35, this->_internal_bonus_all_stats(), target);
  }

  // optional int32 bonus_health = 36;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(36, this->_internal_bonus_health(), target);
  }

  // optional int32 bonus_mana = 37;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(37, this->_internal_bonus_mana(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 custom_entity = 38 [default = 16777215];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(38, this->_internal_custom_entity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAModifierBuffTableEntry)
  return target;
}

size_t CDOTAModifierBuffTableEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CDOTAModifierBuffTableEntry)
  size_t total_size = 0;

  if (_internal_has_index()) {
    // required int32 index = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  if (_internal_has_serial_num()) {
    // required int32 serial_num = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_serial_num());
  }

  if (_internal_has_entry_type()) {
    // required .DOTA_MODIFIER_ENTRY_TYPE entry_type = 1 [default = DOTA_MODIFIER_ENTRY_TYPE_ACTIVE];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_entry_type());
  }

  if (_internal_has_parent()) {
    // required uint32 parent = 2 [default = 16777215];
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_parent());
  }

  return total_size;
}
size_t CDOTAModifierBuffTableEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAModifierBuffTableEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0xc0000600) ^ 0xc0000600) == 0) {  // All required fields are present.
    // required int32 index = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());

    // required int32 serial_num = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_serial_num());

    // required .DOTA_MODIFIER_ENTRY_TYPE entry_type = 1 [default = DOTA_MODIFIER_ENTRY_TYPE_ACTIVE];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_entry_type());

    // required uint32 parent = 2 [default = 16777215];
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_parent());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string portal_loop_appear = 18;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_portal_loop_appear());
    }

    // optional string portal_loop_disappear = 19;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_portal_loop_disappear());
    }

    // optional string hero_loop_appear = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hero_loop_appear());
    }

    // optional string hero_loop_disappear = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hero_loop_disappear());
    }

    // optional string illusion_label = 29;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_illusion_label());
    }

    // optional string player_ids = 31 [default = "-1"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_ids());
    }

    // optional string lua_name = 32;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lua_name());
    }

    // optional .CMsgVector v_start = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.v_start_);
    }

  }
  // optional .CMsgVector v_end = 17;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.v_end_);
  }

  if (cached_has_bits & 0x0000f800u) {
    // optional int32 modifier_class = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_modifier_class());
    }

    // optional int32 ability_level = 6;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_level());
    }

    // optional int32 stack_count = 7;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stack_count());
    }

    // optional float creation_time = 8;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional int32 armor = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_armor());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float fade_time = 13;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional float channel_time = 15;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional int32 movement_speed = 22;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_movement_speed());
    }

    // optional bool subtle = 14;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool aura = 23;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool active = 30;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional int32 activity = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_activity());
    }

    // optional int32 damage = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_damage());
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional int32 range = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_range());
    }

    // optional int32 dd_modifier_index = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_dd_modifier_index());
    }

    // optional int32 attack_speed = 33;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_attack_speed());
    }

    // optional int32 bonus_all_stats = 35;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_bonus_all_stats());
    }

    // optional int32 bonus_health = 36;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_bonus_health());
    }

    // optional int32 bonus_mana = 37;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_bonus_mana());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    // optional float duration = 9 [default = -1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 caster = 10 [default = 16777215];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_caster());
    }

    // optional uint32 ability = 11 [default = 16777215];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability());
    }

    // optional int32 dd_ability_id = 28 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_dd_ability_id());
    }

    // optional uint32 aura_owner = 34 [default = 16777215];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_aura_owner());
    }

    // optional uint32 custom_entity = 38 [default = 16777215];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_custom_entity());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAModifierBuffTableEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAModifierBuffTableEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAModifierBuffTableEntry::GetClassData() const { return &_class_data_; }


void CDOTAModifierBuffTableEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAModifierBuffTableEntry*>(&to_msg);
  auto& from = static_cast<const CDOTAModifierBuffTableEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAModifierBuffTableEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_portal_loop_appear(from._internal_portal_loop_appear());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_portal_loop_disappear(from._internal_portal_loop_disappear());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_hero_loop_appear(from._internal_hero_loop_appear());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_hero_loop_disappear(from._internal_hero_loop_disappear());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_illusion_label(from._internal_illusion_label());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_player_ids(from._internal_player_ids());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_lua_name(from._internal_lua_name());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_v_start()->::CMsgVector::MergeFrom(
          from._internal_v_start());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_v_end()->::CMsgVector::MergeFrom(
          from._internal_v_end());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.serial_num_ = from._impl_.serial_num_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.modifier_class_ = from._impl_.modifier_class_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.ability_level_ = from._impl_.ability_level_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.stack_count_ = from._impl_.stack_count_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.creation_time_ = from._impl_.creation_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.armor_ = from._impl_.armor_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.fade_time_ = from._impl_.fade_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.channel_time_ = from._impl_.channel_time_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.movement_speed_ = from._impl_.movement_speed_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.subtle_ = from._impl_.subtle_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.aura_ = from._impl_.aura_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.active_ = from._impl_.active_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.activity_ = from._impl_.activity_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.damage_ = from._impl_.damage_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.range_ = from._impl_.range_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.dd_modifier_index_ = from._impl_.dd_modifier_index_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.attack_speed_ = from._impl_.attack_speed_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.bonus_all_stats_ = from._impl_.bonus_all_stats_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.bonus_health_ = from._impl_.bonus_health_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.bonus_mana_ = from._impl_.bonus_mana_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.entry_type_ = from._impl_.entry_type_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.parent_ = from._impl_.parent_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.caster_ = from._impl_.caster_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ability_ = from._impl_.ability_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.dd_ability_id_ = from._impl_.dd_ability_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.aura_owner_ = from._impl_.aura_owner_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.custom_entity_ = from._impl_.custom_entity_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAModifierBuffTableEntry::CopyFrom(const CDOTAModifierBuffTableEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAModifierBuffTableEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAModifierBuffTableEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CDOTAModifierBuffTableEntry::InternalSwap(CDOTAModifierBuffTableEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.portal_loop_appear_, lhs_arena,
      &other->_impl_.portal_loop_appear_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.portal_loop_disappear_, lhs_arena,
      &other->_impl_.portal_loop_disappear_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hero_loop_appear_, lhs_arena,
      &other->_impl_.hero_loop_appear_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hero_loop_disappear_, lhs_arena,
      &other->_impl_.hero_loop_disappear_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.illusion_label_, lhs_arena,
      &other->_impl_.illusion_label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_ids_, lhs_arena,
      &other->_impl_.player_ids_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lua_name_, lhs_arena,
      &other->_impl_.lua_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAModifierBuffTableEntry, _impl_.bonus_mana_)
      + sizeof(CDOTAModifierBuffTableEntry::_impl_.bonus_mana_)
      - PROTOBUF_FIELD_OFFSET(CDOTAModifierBuffTableEntry, _impl_.v_start_)>(
          reinterpret_cast<char*>(&_impl_.v_start_),
          reinterpret_cast<char*>(&other->_impl_.v_start_));
  swap(_impl_.entry_type_, other->_impl_.entry_type_);
  swap(_impl_.parent_, other->_impl_.parent_);
  swap(_impl_.duration_, other->_impl_.duration_);
  swap(_impl_.caster_, other->_impl_.caster_);
  swap(_impl_.ability_, other->_impl_.ability_);
  swap(_impl_.dd_ability_id_, other->_impl_.dd_ability_id_);
  swap(_impl_.aura_owner_, other->_impl_.aura_owner_);
  swap(_impl_.custom_entity_, other->_impl_.custom_entity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAModifierBuffTableEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmodifiers_2eproto_getter, &descriptor_table_dota_5fmodifiers_2eproto_once,
      file_level_metadata_dota_5fmodifiers_2eproto[0]);
}

// ===================================================================

class CDOTALuaModifierEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTALuaModifierEntry>()._impl_._has_bits_);
  static void set_has_modifier_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_modifier_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CDOTALuaModifierEntry::CDOTALuaModifierEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTALuaModifierEntry)
}
CDOTALuaModifierEntry::CDOTALuaModifierEntry(const CDOTALuaModifierEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTALuaModifierEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.modifier_filename_){}
    , decltype(_impl_.modifier_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.modifier_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.modifier_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_modifier_filename()) {
    _this->_impl_.modifier_filename_.Set(from._internal_modifier_filename(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.modifier_type_ = from._impl_.modifier_type_;
  // @@protoc_insertion_point(copy_constructor:CDOTALuaModifierEntry)
}

inline void CDOTALuaModifierEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.modifier_filename_){}
    , decltype(_impl_.modifier_type_){0}
  };
  _impl_.modifier_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.modifier_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTALuaModifierEntry::~CDOTALuaModifierEntry() {
  // @@protoc_insertion_point(destructor:CDOTALuaModifierEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTALuaModifierEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.modifier_filename_.Destroy();
}

void CDOTALuaModifierEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTALuaModifierEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTALuaModifierEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.modifier_filename_.ClearNonDefaultToEmpty();
  }
  _impl_.modifier_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTALuaModifierEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 modifier_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_modifier_type(&has_bits);
          _impl_.modifier_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string modifier_filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_modifier_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDOTALuaModifierEntry.modifier_filename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTALuaModifierEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTALuaModifierEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 modifier_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_modifier_type(), target);
  }

  // required string modifier_filename = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_modifier_filename().data(), static_cast<int>(this->_internal_modifier_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTALuaModifierEntry.modifier_filename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_modifier_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTALuaModifierEntry)
  return target;
}

size_t CDOTALuaModifierEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CDOTALuaModifierEntry)
  size_t total_size = 0;

  if (_internal_has_modifier_filename()) {
    // required string modifier_filename = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modifier_filename());
  }

  if (_internal_has_modifier_type()) {
    // required int32 modifier_type = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_modifier_type());
  }

  return total_size;
}
size_t CDOTALuaModifierEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTALuaModifierEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string modifier_filename = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modifier_filename());

    // required int32 modifier_type = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_modifier_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTALuaModifierEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTALuaModifierEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTALuaModifierEntry::GetClassData() const { return &_class_data_; }


void CDOTALuaModifierEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTALuaModifierEntry*>(&to_msg);
  auto& from = static_cast<const CDOTALuaModifierEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTALuaModifierEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_modifier_filename(from._internal_modifier_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.modifier_type_ = from._impl_.modifier_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTALuaModifierEntry::CopyFrom(const CDOTALuaModifierEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTALuaModifierEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTALuaModifierEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CDOTALuaModifierEntry::InternalSwap(CDOTALuaModifierEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.modifier_filename_, lhs_arena,
      &other->_impl_.modifier_filename_, rhs_arena
  );
  swap(_impl_.modifier_type_, other->_impl_.modifier_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTALuaModifierEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fmodifiers_2eproto_getter, &descriptor_table_dota_5fmodifiers_2eproto_once,
      file_level_metadata_dota_5fmodifiers_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CDOTAModifierBuffTableEntry*
Arena::CreateMaybeMessage< ::CDOTAModifierBuffTableEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAModifierBuffTableEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTALuaModifierEntry*
Arena::CreateMaybeMessage< ::CDOTALuaModifierEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTALuaModifierEntry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
