// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_showcase.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fshowcase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fshowcase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages.pb.h"
#include "dota_shared_enums.pb.h"
#include "dota_gcmessages_common.pb.h"
#include "dota_gcmessages_webapi.pb.h"
#include "gcsdk_gcmessages.pb.h"
#include "base_gcmessages.pb.h"
#include "econ_gcmessages.pb.h"
#include "dota_gcmessages_client.pb.h"
#include "valveextensions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fshowcase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
class CMsgClientToGCShowcaseGetUserData;
struct CMsgClientToGCShowcaseGetUserDataDefaultTypeInternal;
extern CMsgClientToGCShowcaseGetUserDataDefaultTypeInternal _CMsgClientToGCShowcaseGetUserData_default_instance_;
class CMsgClientToGCShowcaseGetUserDataResponse;
struct CMsgClientToGCShowcaseGetUserDataResponseDefaultTypeInternal;
extern CMsgClientToGCShowcaseGetUserDataResponseDefaultTypeInternal _CMsgClientToGCShowcaseGetUserDataResponse_default_instance_;
class CMsgClientToGCShowcaseSetUserData;
struct CMsgClientToGCShowcaseSetUserDataDefaultTypeInternal;
extern CMsgClientToGCShowcaseSetUserDataDefaultTypeInternal _CMsgClientToGCShowcaseSetUserData_default_instance_;
class CMsgClientToGCShowcaseSetUserDataResponse;
struct CMsgClientToGCShowcaseSetUserDataResponseDefaultTypeInternal;
extern CMsgClientToGCShowcaseSetUserDataResponseDefaultTypeInternal _CMsgClientToGCShowcaseSetUserDataResponse_default_instance_;
class CMsgShowcase;
struct CMsgShowcaseDefaultTypeInternal;
extern CMsgShowcaseDefaultTypeInternal _CMsgShowcase_default_instance_;
class CMsgShowcaseBackground;
struct CMsgShowcaseBackgroundDefaultTypeInternal;
extern CMsgShowcaseBackgroundDefaultTypeInternal _CMsgShowcaseBackground_default_instance_;
class CMsgShowcaseBackground_Data;
struct CMsgShowcaseBackground_DataDefaultTypeInternal;
extern CMsgShowcaseBackground_DataDefaultTypeInternal _CMsgShowcaseBackground_Data_default_instance_;
class CMsgShowcaseEconItemReference;
struct CMsgShowcaseEconItemReferenceDefaultTypeInternal;
extern CMsgShowcaseEconItemReferenceDefaultTypeInternal _CMsgShowcaseEconItemReference_default_instance_;
class CMsgShowcaseItem;
struct CMsgShowcaseItemDefaultTypeInternal;
extern CMsgShowcaseItemDefaultTypeInternal _CMsgShowcaseItem_default_instance_;
class CMsgShowcaseItemData;
struct CMsgShowcaseItemDataDefaultTypeInternal;
extern CMsgShowcaseItemDataDefaultTypeInternal _CMsgShowcaseItemData_default_instance_;
class CMsgShowcaseItemPosition;
struct CMsgShowcaseItemPositionDefaultTypeInternal;
extern CMsgShowcaseItemPositionDefaultTypeInternal _CMsgShowcaseItemPosition_default_instance_;
class CMsgShowcaseItem_ChatWheel;
struct CMsgShowcaseItem_ChatWheelDefaultTypeInternal;
extern CMsgShowcaseItem_ChatWheelDefaultTypeInternal _CMsgShowcaseItem_ChatWheel_default_instance_;
class CMsgShowcaseItem_ChatWheel_Data;
struct CMsgShowcaseItem_ChatWheel_DataDefaultTypeInternal;
extern CMsgShowcaseItem_ChatWheel_DataDefaultTypeInternal _CMsgShowcaseItem_ChatWheel_Data_default_instance_;
class CMsgShowcaseItem_EconItem;
struct CMsgShowcaseItem_EconItemDefaultTypeInternal;
extern CMsgShowcaseItem_EconItemDefaultTypeInternal _CMsgShowcaseItem_EconItem_default_instance_;
class CMsgShowcaseItem_EconItem_Data;
struct CMsgShowcaseItem_EconItem_DataDefaultTypeInternal;
extern CMsgShowcaseItem_EconItem_DataDefaultTypeInternal _CMsgShowcaseItem_EconItem_Data_default_instance_;
class CMsgShowcaseItem_Emoticon;
struct CMsgShowcaseItem_EmoticonDefaultTypeInternal;
extern CMsgShowcaseItem_EmoticonDefaultTypeInternal _CMsgShowcaseItem_Emoticon_default_instance_;
class CMsgShowcaseItem_Emoticon_Data;
struct CMsgShowcaseItem_Emoticon_DataDefaultTypeInternal;
extern CMsgShowcaseItem_Emoticon_DataDefaultTypeInternal _CMsgShowcaseItem_Emoticon_Data_default_instance_;
class CMsgShowcaseItem_Hero;
struct CMsgShowcaseItem_HeroDefaultTypeInternal;
extern CMsgShowcaseItem_HeroDefaultTypeInternal _CMsgShowcaseItem_Hero_default_instance_;
class CMsgShowcaseItem_Hero_Data;
struct CMsgShowcaseItem_Hero_DataDefaultTypeInternal;
extern CMsgShowcaseItem_Hero_DataDefaultTypeInternal _CMsgShowcaseItem_Hero_Data_default_instance_;
class CMsgShowcaseItem_PlayerMatch;
struct CMsgShowcaseItem_PlayerMatchDefaultTypeInternal;
extern CMsgShowcaseItem_PlayerMatchDefaultTypeInternal _CMsgShowcaseItem_PlayerMatch_default_instance_;
class CMsgShowcaseItem_PlayerMatch_Data;
struct CMsgShowcaseItem_PlayerMatch_DataDefaultTypeInternal;
extern CMsgShowcaseItem_PlayerMatch_DataDefaultTypeInternal _CMsgShowcaseItem_PlayerMatch_Data_default_instance_;
class CMsgShowcaseItem_Trophy;
struct CMsgShowcaseItem_TrophyDefaultTypeInternal;
extern CMsgShowcaseItem_TrophyDefaultTypeInternal _CMsgShowcaseItem_Trophy_default_instance_;
class CMsgShowcaseItem_Trophy_Data;
struct CMsgShowcaseItem_Trophy_DataDefaultTypeInternal;
extern CMsgShowcaseItem_Trophy_DataDefaultTypeInternal _CMsgShowcaseItem_Trophy_Data_default_instance_;
class CMsgShowcaseItem_Widget;
struct CMsgShowcaseItem_WidgetDefaultTypeInternal;
extern CMsgShowcaseItem_WidgetDefaultTypeInternal _CMsgShowcaseItem_Widget_default_instance_;
class CMsgShowcaseItem_Widget_Data;
struct CMsgShowcaseItem_Widget_DataDefaultTypeInternal;
extern CMsgShowcaseItem_Widget_DataDefaultTypeInternal _CMsgShowcaseItem_Widget_Data_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgClientToGCShowcaseGetUserData* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseGetUserData>(Arena*);
template<> ::CMsgClientToGCShowcaseGetUserDataResponse* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseGetUserDataResponse>(Arena*);
template<> ::CMsgClientToGCShowcaseSetUserData* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseSetUserData>(Arena*);
template<> ::CMsgClientToGCShowcaseSetUserDataResponse* Arena::CreateMaybeMessage<::CMsgClientToGCShowcaseSetUserDataResponse>(Arena*);
template<> ::CMsgShowcase* Arena::CreateMaybeMessage<::CMsgShowcase>(Arena*);
template<> ::CMsgShowcaseBackground* Arena::CreateMaybeMessage<::CMsgShowcaseBackground>(Arena*);
template<> ::CMsgShowcaseBackground_Data* Arena::CreateMaybeMessage<::CMsgShowcaseBackground_Data>(Arena*);
template<> ::CMsgShowcaseEconItemReference* Arena::CreateMaybeMessage<::CMsgShowcaseEconItemReference>(Arena*);
template<> ::CMsgShowcaseItem* Arena::CreateMaybeMessage<::CMsgShowcaseItem>(Arena*);
template<> ::CMsgShowcaseItemData* Arena::CreateMaybeMessage<::CMsgShowcaseItemData>(Arena*);
template<> ::CMsgShowcaseItemPosition* Arena::CreateMaybeMessage<::CMsgShowcaseItemPosition>(Arena*);
template<> ::CMsgShowcaseItem_ChatWheel* Arena::CreateMaybeMessage<::CMsgShowcaseItem_ChatWheel>(Arena*);
template<> ::CMsgShowcaseItem_ChatWheel_Data* Arena::CreateMaybeMessage<::CMsgShowcaseItem_ChatWheel_Data>(Arena*);
template<> ::CMsgShowcaseItem_EconItem* Arena::CreateMaybeMessage<::CMsgShowcaseItem_EconItem>(Arena*);
template<> ::CMsgShowcaseItem_EconItem_Data* Arena::CreateMaybeMessage<::CMsgShowcaseItem_EconItem_Data>(Arena*);
template<> ::CMsgShowcaseItem_Emoticon* Arena::CreateMaybeMessage<::CMsgShowcaseItem_Emoticon>(Arena*);
template<> ::CMsgShowcaseItem_Emoticon_Data* Arena::CreateMaybeMessage<::CMsgShowcaseItem_Emoticon_Data>(Arena*);
template<> ::CMsgShowcaseItem_Hero* Arena::CreateMaybeMessage<::CMsgShowcaseItem_Hero>(Arena*);
template<> ::CMsgShowcaseItem_Hero_Data* Arena::CreateMaybeMessage<::CMsgShowcaseItem_Hero_Data>(Arena*);
template<> ::CMsgShowcaseItem_PlayerMatch* Arena::CreateMaybeMessage<::CMsgShowcaseItem_PlayerMatch>(Arena*);
template<> ::CMsgShowcaseItem_PlayerMatch_Data* Arena::CreateMaybeMessage<::CMsgShowcaseItem_PlayerMatch_Data>(Arena*);
template<> ::CMsgShowcaseItem_Trophy* Arena::CreateMaybeMessage<::CMsgShowcaseItem_Trophy>(Arena*);
template<> ::CMsgShowcaseItem_Trophy_Data* Arena::CreateMaybeMessage<::CMsgShowcaseItem_Trophy_Data>(Arena*);
template<> ::CMsgShowcaseItem_Widget* Arena::CreateMaybeMessage<::CMsgShowcaseItem_Widget>(Arena*);
template<> ::CMsgShowcaseItem_Widget_Data* Arena::CreateMaybeMessage<::CMsgShowcaseItem_Widget_Data>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CMsgShowcaseItem_PlayerMatch_EPlayerOutcome : int {
  CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_k_eInvalid = 0,
  CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_k_eWin = 1,
  CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_k_eLoss = 2,
  CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_k_eNotScored = 3
};
bool CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_IsValid(int value);
constexpr CMsgShowcaseItem_PlayerMatch_EPlayerOutcome CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_EPlayerOutcome_MIN = CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_k_eInvalid;
constexpr CMsgShowcaseItem_PlayerMatch_EPlayerOutcome CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_EPlayerOutcome_MAX = CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_k_eNotScored;
constexpr int CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_EPlayerOutcome_ARRAYSIZE = CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_EPlayerOutcome_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_descriptor();
template<typename T>
inline const std::string& CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgShowcaseItem_PlayerMatch_EPlayerOutcome>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_descriptor(), enum_t_value);
}
inline bool CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgShowcaseItem_PlayerMatch_EPlayerOutcome* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgShowcaseItem_PlayerMatch_EPlayerOutcome>(
    CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_descriptor(), name, value);
}
enum CMsgShowcaseItem_Widget_EWidget : int {
  CMsgShowcaseItem_Widget_EWidget_kSpiderGraph = 1,
  CMsgShowcaseItem_Widget_EWidget_kUserFeed = 2,
  CMsgShowcaseItem_Widget_EWidget_kAllHeroChallenge = 3
};
bool CMsgShowcaseItem_Widget_EWidget_IsValid(int value);
constexpr CMsgShowcaseItem_Widget_EWidget CMsgShowcaseItem_Widget_EWidget_EWidget_MIN = CMsgShowcaseItem_Widget_EWidget_kSpiderGraph;
constexpr CMsgShowcaseItem_Widget_EWidget CMsgShowcaseItem_Widget_EWidget_EWidget_MAX = CMsgShowcaseItem_Widget_EWidget_kAllHeroChallenge;
constexpr int CMsgShowcaseItem_Widget_EWidget_EWidget_ARRAYSIZE = CMsgShowcaseItem_Widget_EWidget_EWidget_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgShowcaseItem_Widget_EWidget_descriptor();
template<typename T>
inline const std::string& CMsgShowcaseItem_Widget_EWidget_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgShowcaseItem_Widget_EWidget>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgShowcaseItem_Widget_EWidget_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgShowcaseItem_Widget_EWidget_descriptor(), enum_t_value);
}
inline bool CMsgShowcaseItem_Widget_EWidget_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgShowcaseItem_Widget_EWidget* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgShowcaseItem_Widget_EWidget>(
    CMsgShowcaseItem_Widget_EWidget_descriptor(), name, value);
}
enum CMsgClientToGCShowcaseGetUserDataResponse_EResponse : int {
  CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eTimeout = 4
};
bool CMsgClientToGCShowcaseGetUserDataResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCShowcaseGetUserDataResponse_EResponse CMsgClientToGCShowcaseGetUserDataResponse_EResponse_EResponse_MIN = CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCShowcaseGetUserDataResponse_EResponse CMsgClientToGCShowcaseGetUserDataResponse_EResponse_EResponse_MAX = CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eTimeout;
constexpr int CMsgClientToGCShowcaseGetUserDataResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCShowcaseGetUserDataResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseGetUserDataResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCShowcaseGetUserDataResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCShowcaseGetUserDataResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCShowcaseGetUserDataResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCShowcaseGetUserDataResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCShowcaseGetUserDataResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCShowcaseGetUserDataResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCShowcaseGetUserDataResponse_EResponse>(
    CMsgClientToGCShowcaseGetUserDataResponse_EResponse_descriptor(), name, value);
}
enum CMsgClientToGCShowcaseSetUserDataResponse_EResponse : int {
  CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eTimeout = 4,
  CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eInvalid = 5
};
bool CMsgClientToGCShowcaseSetUserDataResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse_EResponse_EResponse_MIN = CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse_EResponse_EResponse_MAX = CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eInvalid;
constexpr int CMsgClientToGCShowcaseSetUserDataResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCShowcaseSetUserDataResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCShowcaseSetUserDataResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCShowcaseSetUserDataResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCShowcaseSetUserDataResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCShowcaseSetUserDataResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCShowcaseSetUserDataResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCShowcaseSetUserDataResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCShowcaseSetUserDataResponse_EResponse>(
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_descriptor(), name, value);
}
enum EShowcaseType : int {
  k_eShowcaseType_Invalid = 0,
  k_eShowcaseType_Profile = 1,
  k_eShowcaseType_MiniProfile = 2
};
bool EShowcaseType_IsValid(int value);
constexpr EShowcaseType EShowcaseType_MIN = k_eShowcaseType_Invalid;
constexpr EShowcaseType EShowcaseType_MAX = k_eShowcaseType_MiniProfile;
constexpr int EShowcaseType_ARRAYSIZE = EShowcaseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EShowcaseType_descriptor();
template<typename T>
inline const std::string& EShowcaseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EShowcaseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EShowcaseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EShowcaseType_descriptor(), enum_t_value);
}
inline bool EShowcaseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EShowcaseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EShowcaseType>(
    EShowcaseType_descriptor(), name, value);
}
enum EShowcaseItemState : int {
  k_eShowcaseItemState_Ok = 0,
  k_eShowcaseItemState_ValidityUnknown = 1,
  k_eShowcaseItemState_Failure = 2,
  k_eShowcaseItemState_Invalid = 3
};
bool EShowcaseItemState_IsValid(int value);
constexpr EShowcaseItemState EShowcaseItemState_MIN = k_eShowcaseItemState_Ok;
constexpr EShowcaseItemState EShowcaseItemState_MAX = k_eShowcaseItemState_Invalid;
constexpr int EShowcaseItemState_ARRAYSIZE = EShowcaseItemState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EShowcaseItemState_descriptor();
template<typename T>
inline const std::string& EShowcaseItemState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EShowcaseItemState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EShowcaseItemState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EShowcaseItemState_descriptor(), enum_t_value);
}
inline bool EShowcaseItemState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EShowcaseItemState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EShowcaseItemState>(
    EShowcaseItemState_descriptor(), name, value);
}
// ===================================================================

class CMsgShowcaseEconItemReference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseEconItemReference) */ {
 public:
  inline CMsgShowcaseEconItemReference() : CMsgShowcaseEconItemReference(nullptr) {}
  ~CMsgShowcaseEconItemReference() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseEconItemReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseEconItemReference(const CMsgShowcaseEconItemReference& from);
  CMsgShowcaseEconItemReference(CMsgShowcaseEconItemReference&& from) noexcept
    : CMsgShowcaseEconItemReference() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseEconItemReference& operator=(const CMsgShowcaseEconItemReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseEconItemReference& operator=(CMsgShowcaseEconItemReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseEconItemReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseEconItemReference* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseEconItemReference*>(
               &_CMsgShowcaseEconItemReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgShowcaseEconItemReference& a, CMsgShowcaseEconItemReference& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseEconItemReference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseEconItemReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseEconItemReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseEconItemReference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseEconItemReference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseEconItemReference& from) {
    CMsgShowcaseEconItemReference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseEconItemReference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseEconItemReference";
  }
  protected:
  explicit CMsgShowcaseEconItemReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOriginalIdFieldNumber = 2,
    kDefinitionIndexFieldNumber = 3,
  };
  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // optional uint64 original_id = 2;
  bool has_original_id() const;
  private:
  bool _internal_has_original_id() const;
  public:
  void clear_original_id();
  uint64_t original_id() const;
  void set_original_id(uint64_t value);
  private:
  uint64_t _internal_original_id() const;
  void _internal_set_original_id(uint64_t value);
  public:

  // optional uint32 definition_index = 3;
  bool has_definition_index() const;
  private:
  bool _internal_has_definition_index() const;
  public:
  void clear_definition_index();
  uint32_t definition_index() const;
  void set_definition_index(uint32_t value);
  private:
  uint32_t _internal_definition_index() const;
  void _internal_set_definition_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseEconItemReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t id_;
    uint64_t original_id_;
    uint32_t definition_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_Trophy_Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_Trophy.Data) */ {
 public:
  inline CMsgShowcaseItem_Trophy_Data() : CMsgShowcaseItem_Trophy_Data(nullptr) {}
  ~CMsgShowcaseItem_Trophy_Data() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_Trophy_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_Trophy_Data(const CMsgShowcaseItem_Trophy_Data& from);
  CMsgShowcaseItem_Trophy_Data(CMsgShowcaseItem_Trophy_Data&& from) noexcept
    : CMsgShowcaseItem_Trophy_Data() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_Trophy_Data& operator=(const CMsgShowcaseItem_Trophy_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_Trophy_Data& operator=(CMsgShowcaseItem_Trophy_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_Trophy_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_Trophy_Data* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_Trophy_Data*>(
               &_CMsgShowcaseItem_Trophy_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgShowcaseItem_Trophy_Data& a, CMsgShowcaseItem_Trophy_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_Trophy_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_Trophy_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_Trophy_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_Trophy_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_Trophy_Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_Trophy_Data& from) {
    CMsgShowcaseItem_Trophy_Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_Trophy_Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_Trophy.Data";
  }
  protected:
  explicit CMsgShowcaseItem_Trophy_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrophyScoreFieldNumber = 1,
  };
  // optional uint32 trophy_score = 1;
  bool has_trophy_score() const;
  private:
  bool _internal_has_trophy_score() const;
  public:
  void clear_trophy_score();
  uint32_t trophy_score() const;
  void set_trophy_score(uint32_t value);
  private:
  uint32_t _internal_trophy_score() const;
  void _internal_set_trophy_score(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_Trophy.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t trophy_score_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_Trophy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_Trophy) */ {
 public:
  inline CMsgShowcaseItem_Trophy() : CMsgShowcaseItem_Trophy(nullptr) {}
  ~CMsgShowcaseItem_Trophy() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_Trophy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_Trophy(const CMsgShowcaseItem_Trophy& from);
  CMsgShowcaseItem_Trophy(CMsgShowcaseItem_Trophy&& from) noexcept
    : CMsgShowcaseItem_Trophy() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_Trophy& operator=(const CMsgShowcaseItem_Trophy& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_Trophy& operator=(CMsgShowcaseItem_Trophy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_Trophy& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_Trophy* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_Trophy*>(
               &_CMsgShowcaseItem_Trophy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgShowcaseItem_Trophy& a, CMsgShowcaseItem_Trophy& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_Trophy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_Trophy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_Trophy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_Trophy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_Trophy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_Trophy& from) {
    CMsgShowcaseItem_Trophy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_Trophy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_Trophy";
  }
  protected:
  explicit CMsgShowcaseItem_Trophy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgShowcaseItem_Trophy_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kTrophyIdFieldNumber = 2,
  };
  // optional .CMsgShowcaseItem_Trophy.Data data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CMsgShowcaseItem_Trophy_Data& data() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_Trophy_Data* release_data();
  ::CMsgShowcaseItem_Trophy_Data* mutable_data();
  void set_allocated_data(::CMsgShowcaseItem_Trophy_Data* data);
  private:
  const ::CMsgShowcaseItem_Trophy_Data& _internal_data() const;
  ::CMsgShowcaseItem_Trophy_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CMsgShowcaseItem_Trophy_Data* data);
  ::CMsgShowcaseItem_Trophy_Data* unsafe_arena_release_data();

  // optional uint32 trophy_id = 2;
  bool has_trophy_id() const;
  private:
  bool _internal_has_trophy_id() const;
  public:
  void clear_trophy_id();
  uint32_t trophy_id() const;
  void set_trophy_id(uint32_t value);
  private:
  uint32_t _internal_trophy_id() const;
  void _internal_set_trophy_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_Trophy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcaseItem_Trophy_Data* data_;
    uint32_t trophy_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_EconItem_Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_EconItem.Data) */ {
 public:
  inline CMsgShowcaseItem_EconItem_Data() : CMsgShowcaseItem_EconItem_Data(nullptr) {}
  ~CMsgShowcaseItem_EconItem_Data() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_EconItem_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_EconItem_Data(const CMsgShowcaseItem_EconItem_Data& from);
  CMsgShowcaseItem_EconItem_Data(CMsgShowcaseItem_EconItem_Data&& from) noexcept
    : CMsgShowcaseItem_EconItem_Data() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_EconItem_Data& operator=(const CMsgShowcaseItem_EconItem_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_EconItem_Data& operator=(CMsgShowcaseItem_EconItem_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_EconItem_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_EconItem_Data* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_EconItem_Data*>(
               &_CMsgShowcaseItem_EconItem_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgShowcaseItem_EconItem_Data& a, CMsgShowcaseItem_EconItem_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_EconItem_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_EconItem_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_EconItem_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_EconItem_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_EconItem_Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_EconItem_Data& from) {
    CMsgShowcaseItem_EconItem_Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_EconItem_Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_EconItem.Data";
  }
  protected:
  explicit CMsgShowcaseItem_EconItem_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEconItemFieldNumber = 1,
  };
  // optional .CSOEconItem econ_item = 1;
  bool has_econ_item() const;
  private:
  bool _internal_has_econ_item() const;
  public:
  void clear_econ_item();
  const ::CSOEconItem& econ_item() const;
  PROTOBUF_NODISCARD ::CSOEconItem* release_econ_item();
  ::CSOEconItem* mutable_econ_item();
  void set_allocated_econ_item(::CSOEconItem* econ_item);
  private:
  const ::CSOEconItem& _internal_econ_item() const;
  ::CSOEconItem* _internal_mutable_econ_item();
  public:
  void unsafe_arena_set_allocated_econ_item(
      ::CSOEconItem* econ_item);
  ::CSOEconItem* unsafe_arena_release_econ_item();

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_EconItem.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CSOEconItem* econ_item_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_EconItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_EconItem) */ {
 public:
  inline CMsgShowcaseItem_EconItem() : CMsgShowcaseItem_EconItem(nullptr) {}
  ~CMsgShowcaseItem_EconItem() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_EconItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_EconItem(const CMsgShowcaseItem_EconItem& from);
  CMsgShowcaseItem_EconItem(CMsgShowcaseItem_EconItem&& from) noexcept
    : CMsgShowcaseItem_EconItem() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_EconItem& operator=(const CMsgShowcaseItem_EconItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_EconItem& operator=(CMsgShowcaseItem_EconItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_EconItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_EconItem* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_EconItem*>(
               &_CMsgShowcaseItem_EconItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgShowcaseItem_EconItem& a, CMsgShowcaseItem_EconItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_EconItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_EconItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_EconItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_EconItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_EconItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_EconItem& from) {
    CMsgShowcaseItem_EconItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_EconItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_EconItem";
  }
  protected:
  explicit CMsgShowcaseItem_EconItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgShowcaseItem_EconItem_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kRefFieldNumber = 2,
  };
  // optional .CMsgShowcaseItem_EconItem.Data data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CMsgShowcaseItem_EconItem_Data& data() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_EconItem_Data* release_data();
  ::CMsgShowcaseItem_EconItem_Data* mutable_data();
  void set_allocated_data(::CMsgShowcaseItem_EconItem_Data* data);
  private:
  const ::CMsgShowcaseItem_EconItem_Data& _internal_data() const;
  ::CMsgShowcaseItem_EconItem_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CMsgShowcaseItem_EconItem_Data* data);
  ::CMsgShowcaseItem_EconItem_Data* unsafe_arena_release_data();

  // optional .CMsgShowcaseEconItemReference ref = 2;
  bool has_ref() const;
  private:
  bool _internal_has_ref() const;
  public:
  void clear_ref();
  const ::CMsgShowcaseEconItemReference& ref() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseEconItemReference* release_ref();
  ::CMsgShowcaseEconItemReference* mutable_ref();
  void set_allocated_ref(::CMsgShowcaseEconItemReference* ref);
  private:
  const ::CMsgShowcaseEconItemReference& _internal_ref() const;
  ::CMsgShowcaseEconItemReference* _internal_mutable_ref();
  public:
  void unsafe_arena_set_allocated_ref(
      ::CMsgShowcaseEconItemReference* ref);
  ::CMsgShowcaseEconItemReference* unsafe_arena_release_ref();

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_EconItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcaseItem_EconItem_Data* data_;
    ::CMsgShowcaseEconItemReference* ref_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_Hero_Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_Hero.Data) */ {
 public:
  inline CMsgShowcaseItem_Hero_Data() : CMsgShowcaseItem_Hero_Data(nullptr) {}
  ~CMsgShowcaseItem_Hero_Data() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_Hero_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_Hero_Data(const CMsgShowcaseItem_Hero_Data& from);
  CMsgShowcaseItem_Hero_Data(CMsgShowcaseItem_Hero_Data&& from) noexcept
    : CMsgShowcaseItem_Hero_Data() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_Hero_Data& operator=(const CMsgShowcaseItem_Hero_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_Hero_Data& operator=(CMsgShowcaseItem_Hero_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_Hero_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_Hero_Data* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_Hero_Data*>(
               &_CMsgShowcaseItem_Hero_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgShowcaseItem_Hero_Data& a, CMsgShowcaseItem_Hero_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_Hero_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_Hero_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_Hero_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_Hero_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_Hero_Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_Hero_Data& from) {
    CMsgShowcaseItem_Hero_Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_Hero_Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_Hero.Data";
  }
  protected:
  explicit CMsgShowcaseItem_Hero_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEconItemsFieldNumber = 1,
  };
  // repeated .CSOEconItem econ_items = 1;
  int econ_items_size() const;
  private:
  int _internal_econ_items_size() const;
  public:
  void clear_econ_items();
  ::CSOEconItem* mutable_econ_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem >*
      mutable_econ_items();
  private:
  const ::CSOEconItem& _internal_econ_items(int index) const;
  ::CSOEconItem* _internal_add_econ_items();
  public:
  const ::CSOEconItem& econ_items(int index) const;
  ::CSOEconItem* add_econ_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem >&
      econ_items() const;

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_Hero.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem > econ_items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_Hero final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_Hero) */ {
 public:
  inline CMsgShowcaseItem_Hero() : CMsgShowcaseItem_Hero(nullptr) {}
  ~CMsgShowcaseItem_Hero() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_Hero(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_Hero(const CMsgShowcaseItem_Hero& from);
  CMsgShowcaseItem_Hero(CMsgShowcaseItem_Hero&& from) noexcept
    : CMsgShowcaseItem_Hero() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_Hero& operator=(const CMsgShowcaseItem_Hero& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_Hero& operator=(CMsgShowcaseItem_Hero&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_Hero& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_Hero* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_Hero*>(
               &_CMsgShowcaseItem_Hero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgShowcaseItem_Hero& a, CMsgShowcaseItem_Hero& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_Hero* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_Hero* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_Hero* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_Hero>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_Hero& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_Hero& from) {
    CMsgShowcaseItem_Hero::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_Hero* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_Hero";
  }
  protected:
  explicit CMsgShowcaseItem_Hero(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgShowcaseItem_Hero_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kEconItemRefsFieldNumber = 3,
    kDataFieldNumber = 1,
    kHeroIdFieldNumber = 2,
  };
  // repeated .CMsgShowcaseEconItemReference econ_item_refs = 3;
  int econ_item_refs_size() const;
  private:
  int _internal_econ_item_refs_size() const;
  public:
  void clear_econ_item_refs();
  ::CMsgShowcaseEconItemReference* mutable_econ_item_refs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseEconItemReference >*
      mutable_econ_item_refs();
  private:
  const ::CMsgShowcaseEconItemReference& _internal_econ_item_refs(int index) const;
  ::CMsgShowcaseEconItemReference* _internal_add_econ_item_refs();
  public:
  const ::CMsgShowcaseEconItemReference& econ_item_refs(int index) const;
  ::CMsgShowcaseEconItemReference* add_econ_item_refs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseEconItemReference >&
      econ_item_refs() const;

  // optional .CMsgShowcaseItem_Hero.Data data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CMsgShowcaseItem_Hero_Data& data() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_Hero_Data* release_data();
  ::CMsgShowcaseItem_Hero_Data* mutable_data();
  void set_allocated_data(::CMsgShowcaseItem_Hero_Data* data);
  private:
  const ::CMsgShowcaseItem_Hero_Data& _internal_data() const;
  ::CMsgShowcaseItem_Hero_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CMsgShowcaseItem_Hero_Data* data);
  ::CMsgShowcaseItem_Hero_Data* unsafe_arena_release_data();

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_Hero)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseEconItemReference > econ_item_refs_;
    ::CMsgShowcaseItem_Hero_Data* data_;
    uint32_t hero_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_PlayerMatch_Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_PlayerMatch.Data) */ {
 public:
  inline CMsgShowcaseItem_PlayerMatch_Data() : CMsgShowcaseItem_PlayerMatch_Data(nullptr) {}
  ~CMsgShowcaseItem_PlayerMatch_Data() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_PlayerMatch_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_PlayerMatch_Data(const CMsgShowcaseItem_PlayerMatch_Data& from);
  CMsgShowcaseItem_PlayerMatch_Data(CMsgShowcaseItem_PlayerMatch_Data&& from) noexcept
    : CMsgShowcaseItem_PlayerMatch_Data() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_PlayerMatch_Data& operator=(const CMsgShowcaseItem_PlayerMatch_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_PlayerMatch_Data& operator=(CMsgShowcaseItem_PlayerMatch_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_PlayerMatch_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_PlayerMatch_Data* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_PlayerMatch_Data*>(
               &_CMsgShowcaseItem_PlayerMatch_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgShowcaseItem_PlayerMatch_Data& a, CMsgShowcaseItem_PlayerMatch_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_PlayerMatch_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_PlayerMatch_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_PlayerMatch_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_PlayerMatch_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_PlayerMatch_Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_PlayerMatch_Data& from) {
    CMsgShowcaseItem_PlayerMatch_Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_PlayerMatch_Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_PlayerMatch.Data";
  }
  protected:
  explicit CMsgShowcaseItem_PlayerMatch_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kDurationFieldNumber = 3,
    kGameModeFieldNumber = 4,
    kOutcomeFieldNumber = 5,
    kKillsFieldNumber = 6,
    kDeathsFieldNumber = 7,
    kAssistsFieldNumber = 8,
  };
  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional uint32 duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  ::DOTA_GameMode game_mode() const;
  void set_game_mode(::DOTA_GameMode value);
  private:
  ::DOTA_GameMode _internal_game_mode() const;
  void _internal_set_game_mode(::DOTA_GameMode value);
  public:

  // optional .CMsgShowcaseItem_PlayerMatch.EPlayerOutcome outcome = 5 [default = k_eInvalid];
  bool has_outcome() const;
  private:
  bool _internal_has_outcome() const;
  public:
  void clear_outcome();
  ::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome outcome() const;
  void set_outcome(::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome value);
  private:
  ::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome _internal_outcome() const;
  void _internal_set_outcome(::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome value);
  public:

  // optional uint32 kills = 6;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  uint32_t kills() const;
  void set_kills(uint32_t value);
  private:
  uint32_t _internal_kills() const;
  void _internal_set_kills(uint32_t value);
  public:

  // optional uint32 deaths = 7;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  uint32_t deaths() const;
  void set_deaths(uint32_t value);
  private:
  uint32_t _internal_deaths() const;
  void _internal_set_deaths(uint32_t value);
  public:

  // optional uint32 assists = 8;
  bool has_assists() const;
  private:
  bool _internal_has_assists() const;
  public:
  void clear_assists();
  uint32_t assists() const;
  void set_assists(uint32_t value);
  private:
  uint32_t _internal_assists() const;
  void _internal_set_assists(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_PlayerMatch.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t hero_id_;
    uint32_t timestamp_;
    uint32_t duration_;
    int game_mode_;
    int outcome_;
    uint32_t kills_;
    uint32_t deaths_;
    uint32_t assists_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_PlayerMatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_PlayerMatch) */ {
 public:
  inline CMsgShowcaseItem_PlayerMatch() : CMsgShowcaseItem_PlayerMatch(nullptr) {}
  ~CMsgShowcaseItem_PlayerMatch() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_PlayerMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_PlayerMatch(const CMsgShowcaseItem_PlayerMatch& from);
  CMsgShowcaseItem_PlayerMatch(CMsgShowcaseItem_PlayerMatch&& from) noexcept
    : CMsgShowcaseItem_PlayerMatch() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_PlayerMatch& operator=(const CMsgShowcaseItem_PlayerMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_PlayerMatch& operator=(CMsgShowcaseItem_PlayerMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_PlayerMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_PlayerMatch* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_PlayerMatch*>(
               &_CMsgShowcaseItem_PlayerMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgShowcaseItem_PlayerMatch& a, CMsgShowcaseItem_PlayerMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_PlayerMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_PlayerMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_PlayerMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_PlayerMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_PlayerMatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_PlayerMatch& from) {
    CMsgShowcaseItem_PlayerMatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_PlayerMatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_PlayerMatch";
  }
  protected:
  explicit CMsgShowcaseItem_PlayerMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgShowcaseItem_PlayerMatch_Data Data;

  typedef CMsgShowcaseItem_PlayerMatch_EPlayerOutcome EPlayerOutcome;
  static constexpr EPlayerOutcome k_eInvalid =
    CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_k_eInvalid;
  static constexpr EPlayerOutcome k_eWin =
    CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_k_eWin;
  static constexpr EPlayerOutcome k_eLoss =
    CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_k_eLoss;
  static constexpr EPlayerOutcome k_eNotScored =
    CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_k_eNotScored;
  static inline bool EPlayerOutcome_IsValid(int value) {
    return CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_IsValid(value);
  }
  static constexpr EPlayerOutcome EPlayerOutcome_MIN =
    CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_EPlayerOutcome_MIN;
  static constexpr EPlayerOutcome EPlayerOutcome_MAX =
    CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_EPlayerOutcome_MAX;
  static constexpr int EPlayerOutcome_ARRAYSIZE =
    CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_EPlayerOutcome_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EPlayerOutcome_descriptor() {
    return CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_descriptor();
  }
  template<typename T>
  static inline const std::string& EPlayerOutcome_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EPlayerOutcome>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EPlayerOutcome_Name.");
    return CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_Name(enum_t_value);
  }
  static inline bool EPlayerOutcome_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EPlayerOutcome* value) {
    return CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kMatchIdFieldNumber = 2,
    kPlayerSlotFieldNumber = 3,
  };
  // optional .CMsgShowcaseItem_PlayerMatch.Data data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CMsgShowcaseItem_PlayerMatch_Data& data() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_PlayerMatch_Data* release_data();
  ::CMsgShowcaseItem_PlayerMatch_Data* mutable_data();
  void set_allocated_data(::CMsgShowcaseItem_PlayerMatch_Data* data);
  private:
  const ::CMsgShowcaseItem_PlayerMatch_Data& _internal_data() const;
  ::CMsgShowcaseItem_PlayerMatch_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CMsgShowcaseItem_PlayerMatch_Data* data);
  ::CMsgShowcaseItem_PlayerMatch_Data* unsafe_arena_release_data();

  // optional uint64 match_id = 2;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint32 player_slot = 3;
  bool has_player_slot() const;
  private:
  bool _internal_has_player_slot() const;
  public:
  void clear_player_slot();
  uint32_t player_slot() const;
  void set_player_slot(uint32_t value);
  private:
  uint32_t _internal_player_slot() const;
  void _internal_set_player_slot(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_PlayerMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcaseItem_PlayerMatch_Data* data_;
    uint64_t match_id_;
    uint32_t player_slot_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_ChatWheel_Data final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_ChatWheel.Data) */ {
 public:
  inline CMsgShowcaseItem_ChatWheel_Data() : CMsgShowcaseItem_ChatWheel_Data(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_ChatWheel_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_ChatWheel_Data(const CMsgShowcaseItem_ChatWheel_Data& from);
  CMsgShowcaseItem_ChatWheel_Data(CMsgShowcaseItem_ChatWheel_Data&& from) noexcept
    : CMsgShowcaseItem_ChatWheel_Data() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_ChatWheel_Data& operator=(const CMsgShowcaseItem_ChatWheel_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_ChatWheel_Data& operator=(CMsgShowcaseItem_ChatWheel_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_ChatWheel_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_ChatWheel_Data* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_ChatWheel_Data*>(
               &_CMsgShowcaseItem_ChatWheel_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgShowcaseItem_ChatWheel_Data& a, CMsgShowcaseItem_ChatWheel_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_ChatWheel_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_ChatWheel_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_ChatWheel_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_ChatWheel_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgShowcaseItem_ChatWheel_Data& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgShowcaseItem_ChatWheel_Data& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_ChatWheel.Data";
  }
  protected:
  explicit CMsgShowcaseItem_ChatWheel_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_ChatWheel.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_ChatWheel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_ChatWheel) */ {
 public:
  inline CMsgShowcaseItem_ChatWheel() : CMsgShowcaseItem_ChatWheel(nullptr) {}
  ~CMsgShowcaseItem_ChatWheel() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_ChatWheel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_ChatWheel(const CMsgShowcaseItem_ChatWheel& from);
  CMsgShowcaseItem_ChatWheel(CMsgShowcaseItem_ChatWheel&& from) noexcept
    : CMsgShowcaseItem_ChatWheel() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_ChatWheel& operator=(const CMsgShowcaseItem_ChatWheel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_ChatWheel& operator=(CMsgShowcaseItem_ChatWheel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_ChatWheel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_ChatWheel* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_ChatWheel*>(
               &_CMsgShowcaseItem_ChatWheel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgShowcaseItem_ChatWheel& a, CMsgShowcaseItem_ChatWheel& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_ChatWheel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_ChatWheel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_ChatWheel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_ChatWheel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_ChatWheel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_ChatWheel& from) {
    CMsgShowcaseItem_ChatWheel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_ChatWheel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_ChatWheel";
  }
  protected:
  explicit CMsgShowcaseItem_ChatWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgShowcaseItem_ChatWheel_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kChatWheelMessageIdFieldNumber = 2,
  };
  // optional .CMsgShowcaseItem_ChatWheel.Data data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CMsgShowcaseItem_ChatWheel_Data& data() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_ChatWheel_Data* release_data();
  ::CMsgShowcaseItem_ChatWheel_Data* mutable_data();
  void set_allocated_data(::CMsgShowcaseItem_ChatWheel_Data* data);
  private:
  const ::CMsgShowcaseItem_ChatWheel_Data& _internal_data() const;
  ::CMsgShowcaseItem_ChatWheel_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CMsgShowcaseItem_ChatWheel_Data* data);
  ::CMsgShowcaseItem_ChatWheel_Data* unsafe_arena_release_data();

  // optional uint32 chat_wheel_message_id = 2 [default = 4294967295];
  bool has_chat_wheel_message_id() const;
  private:
  bool _internal_has_chat_wheel_message_id() const;
  public:
  void clear_chat_wheel_message_id();
  uint32_t chat_wheel_message_id() const;
  void set_chat_wheel_message_id(uint32_t value);
  private:
  uint32_t _internal_chat_wheel_message_id() const;
  void _internal_set_chat_wheel_message_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_ChatWheel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcaseItem_ChatWheel_Data* data_;
    uint32_t chat_wheel_message_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_Emoticon_Data final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_Emoticon.Data) */ {
 public:
  inline CMsgShowcaseItem_Emoticon_Data() : CMsgShowcaseItem_Emoticon_Data(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_Emoticon_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_Emoticon_Data(const CMsgShowcaseItem_Emoticon_Data& from);
  CMsgShowcaseItem_Emoticon_Data(CMsgShowcaseItem_Emoticon_Data&& from) noexcept
    : CMsgShowcaseItem_Emoticon_Data() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_Emoticon_Data& operator=(const CMsgShowcaseItem_Emoticon_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_Emoticon_Data& operator=(CMsgShowcaseItem_Emoticon_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_Emoticon_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_Emoticon_Data* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_Emoticon_Data*>(
               &_CMsgShowcaseItem_Emoticon_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgShowcaseItem_Emoticon_Data& a, CMsgShowcaseItem_Emoticon_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_Emoticon_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_Emoticon_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_Emoticon_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_Emoticon_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgShowcaseItem_Emoticon_Data& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgShowcaseItem_Emoticon_Data& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_Emoticon.Data";
  }
  protected:
  explicit CMsgShowcaseItem_Emoticon_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_Emoticon.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_Emoticon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_Emoticon) */ {
 public:
  inline CMsgShowcaseItem_Emoticon() : CMsgShowcaseItem_Emoticon(nullptr) {}
  ~CMsgShowcaseItem_Emoticon() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_Emoticon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_Emoticon(const CMsgShowcaseItem_Emoticon& from);
  CMsgShowcaseItem_Emoticon(CMsgShowcaseItem_Emoticon&& from) noexcept
    : CMsgShowcaseItem_Emoticon() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_Emoticon& operator=(const CMsgShowcaseItem_Emoticon& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_Emoticon& operator=(CMsgShowcaseItem_Emoticon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_Emoticon& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_Emoticon* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_Emoticon*>(
               &_CMsgShowcaseItem_Emoticon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgShowcaseItem_Emoticon& a, CMsgShowcaseItem_Emoticon& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_Emoticon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_Emoticon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_Emoticon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_Emoticon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_Emoticon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_Emoticon& from) {
    CMsgShowcaseItem_Emoticon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_Emoticon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_Emoticon";
  }
  protected:
  explicit CMsgShowcaseItem_Emoticon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgShowcaseItem_Emoticon_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kEmoticonIdFieldNumber = 2,
  };
  // optional .CMsgShowcaseItem_Emoticon.Data data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CMsgShowcaseItem_Emoticon_Data& data() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_Emoticon_Data* release_data();
  ::CMsgShowcaseItem_Emoticon_Data* mutable_data();
  void set_allocated_data(::CMsgShowcaseItem_Emoticon_Data* data);
  private:
  const ::CMsgShowcaseItem_Emoticon_Data& _internal_data() const;
  ::CMsgShowcaseItem_Emoticon_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CMsgShowcaseItem_Emoticon_Data* data);
  ::CMsgShowcaseItem_Emoticon_Data* unsafe_arena_release_data();

  // optional uint32 emoticon_id = 2;
  bool has_emoticon_id() const;
  private:
  bool _internal_has_emoticon_id() const;
  public:
  void clear_emoticon_id();
  uint32_t emoticon_id() const;
  void set_emoticon_id(uint32_t value);
  private:
  uint32_t _internal_emoticon_id() const;
  void _internal_set_emoticon_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_Emoticon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcaseItem_Emoticon_Data* data_;
    uint32_t emoticon_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_Widget_Data final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_Widget.Data) */ {
 public:
  inline CMsgShowcaseItem_Widget_Data() : CMsgShowcaseItem_Widget_Data(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_Widget_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_Widget_Data(const CMsgShowcaseItem_Widget_Data& from);
  CMsgShowcaseItem_Widget_Data(CMsgShowcaseItem_Widget_Data&& from) noexcept
    : CMsgShowcaseItem_Widget_Data() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_Widget_Data& operator=(const CMsgShowcaseItem_Widget_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_Widget_Data& operator=(CMsgShowcaseItem_Widget_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_Widget_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_Widget_Data* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_Widget_Data*>(
               &_CMsgShowcaseItem_Widget_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgShowcaseItem_Widget_Data& a, CMsgShowcaseItem_Widget_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_Widget_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_Widget_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_Widget_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_Widget_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgShowcaseItem_Widget_Data& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgShowcaseItem_Widget_Data& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_Widget.Data";
  }
  protected:
  explicit CMsgShowcaseItem_Widget_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_Widget.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem_Widget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem_Widget) */ {
 public:
  inline CMsgShowcaseItem_Widget() : CMsgShowcaseItem_Widget(nullptr) {}
  ~CMsgShowcaseItem_Widget() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem_Widget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem_Widget(const CMsgShowcaseItem_Widget& from);
  CMsgShowcaseItem_Widget(CMsgShowcaseItem_Widget&& from) noexcept
    : CMsgShowcaseItem_Widget() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem_Widget& operator=(const CMsgShowcaseItem_Widget& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem_Widget& operator=(CMsgShowcaseItem_Widget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem_Widget& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem_Widget* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem_Widget*>(
               &_CMsgShowcaseItem_Widget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMsgShowcaseItem_Widget& a, CMsgShowcaseItem_Widget& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem_Widget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem_Widget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem_Widget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem_Widget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem_Widget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem_Widget& from) {
    CMsgShowcaseItem_Widget::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem_Widget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem_Widget";
  }
  protected:
  explicit CMsgShowcaseItem_Widget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgShowcaseItem_Widget_Data Data;

  typedef CMsgShowcaseItem_Widget_EWidget EWidget;
  static constexpr EWidget kSpiderGraph =
    CMsgShowcaseItem_Widget_EWidget_kSpiderGraph;
  static constexpr EWidget kUserFeed =
    CMsgShowcaseItem_Widget_EWidget_kUserFeed;
  static constexpr EWidget kAllHeroChallenge =
    CMsgShowcaseItem_Widget_EWidget_kAllHeroChallenge;
  static inline bool EWidget_IsValid(int value) {
    return CMsgShowcaseItem_Widget_EWidget_IsValid(value);
  }
  static constexpr EWidget EWidget_MIN =
    CMsgShowcaseItem_Widget_EWidget_EWidget_MIN;
  static constexpr EWidget EWidget_MAX =
    CMsgShowcaseItem_Widget_EWidget_EWidget_MAX;
  static constexpr int EWidget_ARRAYSIZE =
    CMsgShowcaseItem_Widget_EWidget_EWidget_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EWidget_descriptor() {
    return CMsgShowcaseItem_Widget_EWidget_descriptor();
  }
  template<typename T>
  static inline const std::string& EWidget_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EWidget>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EWidget_Name.");
    return CMsgShowcaseItem_Widget_EWidget_Name(enum_t_value);
  }
  static inline bool EWidget_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EWidget* value) {
    return CMsgShowcaseItem_Widget_EWidget_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kWidgetFieldNumber = 2,
  };
  // optional .CMsgShowcaseItem_Widget.Data data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CMsgShowcaseItem_Widget_Data& data() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_Widget_Data* release_data();
  ::CMsgShowcaseItem_Widget_Data* mutable_data();
  void set_allocated_data(::CMsgShowcaseItem_Widget_Data* data);
  private:
  const ::CMsgShowcaseItem_Widget_Data& _internal_data() const;
  ::CMsgShowcaseItem_Widget_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CMsgShowcaseItem_Widget_Data* data);
  ::CMsgShowcaseItem_Widget_Data* unsafe_arena_release_data();

  // optional .CMsgShowcaseItem_Widget.EWidget widget = 2 [default = kSpiderGraph];
  bool has_widget() const;
  private:
  bool _internal_has_widget() const;
  public:
  void clear_widget();
  ::CMsgShowcaseItem_Widget_EWidget widget() const;
  void set_widget(::CMsgShowcaseItem_Widget_EWidget value);
  private:
  ::CMsgShowcaseItem_Widget_EWidget _internal_widget() const;
  void _internal_set_widget(::CMsgShowcaseItem_Widget_EWidget value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem_Widget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcaseItem_Widget_Data* data_;
    int widget_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseBackground_Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseBackground.Data) */ {
 public:
  inline CMsgShowcaseBackground_Data() : CMsgShowcaseBackground_Data(nullptr) {}
  ~CMsgShowcaseBackground_Data() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseBackground_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseBackground_Data(const CMsgShowcaseBackground_Data& from);
  CMsgShowcaseBackground_Data(CMsgShowcaseBackground_Data&& from) noexcept
    : CMsgShowcaseBackground_Data() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseBackground_Data& operator=(const CMsgShowcaseBackground_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseBackground_Data& operator=(CMsgShowcaseBackground_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseBackground_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseBackground_Data* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseBackground_Data*>(
               &_CMsgShowcaseBackground_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMsgShowcaseBackground_Data& a, CMsgShowcaseBackground_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseBackground_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseBackground_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseBackground_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseBackground_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseBackground_Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseBackground_Data& from) {
    CMsgShowcaseBackground_Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseBackground_Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseBackground.Data";
  }
  protected:
  explicit CMsgShowcaseBackground_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadingScreenFieldNumber = 1,
  };
  // optional .CSOEconItem loading_screen = 1;
  bool has_loading_screen() const;
  private:
  bool _internal_has_loading_screen() const;
  public:
  void clear_loading_screen();
  const ::CSOEconItem& loading_screen() const;
  PROTOBUF_NODISCARD ::CSOEconItem* release_loading_screen();
  ::CSOEconItem* mutable_loading_screen();
  void set_allocated_loading_screen(::CSOEconItem* loading_screen);
  private:
  const ::CSOEconItem& _internal_loading_screen() const;
  ::CSOEconItem* _internal_mutable_loading_screen();
  public:
  void unsafe_arena_set_allocated_loading_screen(
      ::CSOEconItem* loading_screen);
  ::CSOEconItem* unsafe_arena_release_loading_screen();

  // @@protoc_insertion_point(class_scope:CMsgShowcaseBackground.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CSOEconItem* loading_screen_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseBackground final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseBackground) */ {
 public:
  inline CMsgShowcaseBackground() : CMsgShowcaseBackground(nullptr) {}
  ~CMsgShowcaseBackground() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseBackground(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseBackground(const CMsgShowcaseBackground& from);
  CMsgShowcaseBackground(CMsgShowcaseBackground&& from) noexcept
    : CMsgShowcaseBackground() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseBackground& operator=(const CMsgShowcaseBackground& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseBackground& operator=(CMsgShowcaseBackground&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseBackground& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseBackground* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseBackground*>(
               &_CMsgShowcaseBackground_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMsgShowcaseBackground& a, CMsgShowcaseBackground& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseBackground* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseBackground* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseBackground* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseBackground>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseBackground& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseBackground& from) {
    CMsgShowcaseBackground::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseBackground* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseBackground";
  }
  protected:
  explicit CMsgShowcaseBackground(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgShowcaseBackground_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kLoadingScreenRefFieldNumber = 2,
  };
  // optional .CMsgShowcaseBackground.Data data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CMsgShowcaseBackground_Data& data() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseBackground_Data* release_data();
  ::CMsgShowcaseBackground_Data* mutable_data();
  void set_allocated_data(::CMsgShowcaseBackground_Data* data);
  private:
  const ::CMsgShowcaseBackground_Data& _internal_data() const;
  ::CMsgShowcaseBackground_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CMsgShowcaseBackground_Data* data);
  ::CMsgShowcaseBackground_Data* unsafe_arena_release_data();

  // optional .CMsgShowcaseEconItemReference loading_screen_ref = 2;
  bool has_loading_screen_ref() const;
  private:
  bool _internal_has_loading_screen_ref() const;
  public:
  void clear_loading_screen_ref();
  const ::CMsgShowcaseEconItemReference& loading_screen_ref() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseEconItemReference* release_loading_screen_ref();
  ::CMsgShowcaseEconItemReference* mutable_loading_screen_ref();
  void set_allocated_loading_screen_ref(::CMsgShowcaseEconItemReference* loading_screen_ref);
  private:
  const ::CMsgShowcaseEconItemReference& _internal_loading_screen_ref() const;
  ::CMsgShowcaseEconItemReference* _internal_mutable_loading_screen_ref();
  public:
  void unsafe_arena_set_allocated_loading_screen_ref(
      ::CMsgShowcaseEconItemReference* loading_screen_ref);
  ::CMsgShowcaseEconItemReference* unsafe_arena_release_loading_screen_ref();

  // @@protoc_insertion_point(class_scope:CMsgShowcaseBackground)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcaseBackground_Data* data_;
    ::CMsgShowcaseEconItemReference* loading_screen_ref_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItemData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItemData) */ {
 public:
  inline CMsgShowcaseItemData() : CMsgShowcaseItemData(nullptr) {}
  ~CMsgShowcaseItemData() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItemData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItemData(const CMsgShowcaseItemData& from);
  CMsgShowcaseItemData(CMsgShowcaseItemData&& from) noexcept
    : CMsgShowcaseItemData() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItemData& operator=(const CMsgShowcaseItemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItemData& operator=(CMsgShowcaseItemData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItemData& default_instance() {
    return *internal_default_instance();
  }
  enum ItemCase {
    kTrophy = 1,
    kEconItemIcon = 2,
    kSticker = 3,
    kHeroModel = 4,
    kPlayerMatch = 5,
    kChatWheel = 6,
    kSpray = 7,
    kEmoticon = 8,
    kWidget = 9,
    kBackground = 100,
    ITEM_NOT_SET = 0,
  };

  static inline const CMsgShowcaseItemData* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItemData*>(
               &_CMsgShowcaseItemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgShowcaseItemData& a, CMsgShowcaseItemData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItemData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItemData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItemData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItemData& from) {
    CMsgShowcaseItemData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItemData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItemData";
  }
  protected:
  explicit CMsgShowcaseItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrophyFieldNumber = 1,
    kEconItemIconFieldNumber = 2,
    kStickerFieldNumber = 3,
    kHeroModelFieldNumber = 4,
    kPlayerMatchFieldNumber = 5,
    kChatWheelFieldNumber = 6,
    kSprayFieldNumber = 7,
    kEmoticonFieldNumber = 8,
    kWidgetFieldNumber = 9,
    kBackgroundFieldNumber = 100,
  };
  // .CMsgShowcaseItem_Trophy trophy = 1;
  bool has_trophy() const;
  private:
  bool _internal_has_trophy() const;
  public:
  void clear_trophy();
  const ::CMsgShowcaseItem_Trophy& trophy() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_Trophy* release_trophy();
  ::CMsgShowcaseItem_Trophy* mutable_trophy();
  void set_allocated_trophy(::CMsgShowcaseItem_Trophy* trophy);
  private:
  const ::CMsgShowcaseItem_Trophy& _internal_trophy() const;
  ::CMsgShowcaseItem_Trophy* _internal_mutable_trophy();
  public:
  void unsafe_arena_set_allocated_trophy(
      ::CMsgShowcaseItem_Trophy* trophy);
  ::CMsgShowcaseItem_Trophy* unsafe_arena_release_trophy();

  // .CMsgShowcaseItem_EconItem econ_item_icon = 2;
  bool has_econ_item_icon() const;
  private:
  bool _internal_has_econ_item_icon() const;
  public:
  void clear_econ_item_icon();
  const ::CMsgShowcaseItem_EconItem& econ_item_icon() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_EconItem* release_econ_item_icon();
  ::CMsgShowcaseItem_EconItem* mutable_econ_item_icon();
  void set_allocated_econ_item_icon(::CMsgShowcaseItem_EconItem* econ_item_icon);
  private:
  const ::CMsgShowcaseItem_EconItem& _internal_econ_item_icon() const;
  ::CMsgShowcaseItem_EconItem* _internal_mutable_econ_item_icon();
  public:
  void unsafe_arena_set_allocated_econ_item_icon(
      ::CMsgShowcaseItem_EconItem* econ_item_icon);
  ::CMsgShowcaseItem_EconItem* unsafe_arena_release_econ_item_icon();

  // .CMsgShowcaseItem_EconItem sticker = 3;
  bool has_sticker() const;
  private:
  bool _internal_has_sticker() const;
  public:
  void clear_sticker();
  const ::CMsgShowcaseItem_EconItem& sticker() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_EconItem* release_sticker();
  ::CMsgShowcaseItem_EconItem* mutable_sticker();
  void set_allocated_sticker(::CMsgShowcaseItem_EconItem* sticker);
  private:
  const ::CMsgShowcaseItem_EconItem& _internal_sticker() const;
  ::CMsgShowcaseItem_EconItem* _internal_mutable_sticker();
  public:
  void unsafe_arena_set_allocated_sticker(
      ::CMsgShowcaseItem_EconItem* sticker);
  ::CMsgShowcaseItem_EconItem* unsafe_arena_release_sticker();

  // .CMsgShowcaseItem_Hero hero_model = 4;
  bool has_hero_model() const;
  private:
  bool _internal_has_hero_model() const;
  public:
  void clear_hero_model();
  const ::CMsgShowcaseItem_Hero& hero_model() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_Hero* release_hero_model();
  ::CMsgShowcaseItem_Hero* mutable_hero_model();
  void set_allocated_hero_model(::CMsgShowcaseItem_Hero* hero_model);
  private:
  const ::CMsgShowcaseItem_Hero& _internal_hero_model() const;
  ::CMsgShowcaseItem_Hero* _internal_mutable_hero_model();
  public:
  void unsafe_arena_set_allocated_hero_model(
      ::CMsgShowcaseItem_Hero* hero_model);
  ::CMsgShowcaseItem_Hero* unsafe_arena_release_hero_model();

  // .CMsgShowcaseItem_PlayerMatch player_match = 5;
  bool has_player_match() const;
  private:
  bool _internal_has_player_match() const;
  public:
  void clear_player_match();
  const ::CMsgShowcaseItem_PlayerMatch& player_match() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_PlayerMatch* release_player_match();
  ::CMsgShowcaseItem_PlayerMatch* mutable_player_match();
  void set_allocated_player_match(::CMsgShowcaseItem_PlayerMatch* player_match);
  private:
  const ::CMsgShowcaseItem_PlayerMatch& _internal_player_match() const;
  ::CMsgShowcaseItem_PlayerMatch* _internal_mutable_player_match();
  public:
  void unsafe_arena_set_allocated_player_match(
      ::CMsgShowcaseItem_PlayerMatch* player_match);
  ::CMsgShowcaseItem_PlayerMatch* unsafe_arena_release_player_match();

  // .CMsgShowcaseItem_ChatWheel chat_wheel = 6;
  bool has_chat_wheel() const;
  private:
  bool _internal_has_chat_wheel() const;
  public:
  void clear_chat_wheel();
  const ::CMsgShowcaseItem_ChatWheel& chat_wheel() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_ChatWheel* release_chat_wheel();
  ::CMsgShowcaseItem_ChatWheel* mutable_chat_wheel();
  void set_allocated_chat_wheel(::CMsgShowcaseItem_ChatWheel* chat_wheel);
  private:
  const ::CMsgShowcaseItem_ChatWheel& _internal_chat_wheel() const;
  ::CMsgShowcaseItem_ChatWheel* _internal_mutable_chat_wheel();
  public:
  void unsafe_arena_set_allocated_chat_wheel(
      ::CMsgShowcaseItem_ChatWheel* chat_wheel);
  ::CMsgShowcaseItem_ChatWheel* unsafe_arena_release_chat_wheel();

  // .CMsgShowcaseItem_ChatWheel spray = 7;
  bool has_spray() const;
  private:
  bool _internal_has_spray() const;
  public:
  void clear_spray();
  const ::CMsgShowcaseItem_ChatWheel& spray() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_ChatWheel* release_spray();
  ::CMsgShowcaseItem_ChatWheel* mutable_spray();
  void set_allocated_spray(::CMsgShowcaseItem_ChatWheel* spray);
  private:
  const ::CMsgShowcaseItem_ChatWheel& _internal_spray() const;
  ::CMsgShowcaseItem_ChatWheel* _internal_mutable_spray();
  public:
  void unsafe_arena_set_allocated_spray(
      ::CMsgShowcaseItem_ChatWheel* spray);
  ::CMsgShowcaseItem_ChatWheel* unsafe_arena_release_spray();

  // .CMsgShowcaseItem_Emoticon emoticon = 8;
  bool has_emoticon() const;
  private:
  bool _internal_has_emoticon() const;
  public:
  void clear_emoticon();
  const ::CMsgShowcaseItem_Emoticon& emoticon() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_Emoticon* release_emoticon();
  ::CMsgShowcaseItem_Emoticon* mutable_emoticon();
  void set_allocated_emoticon(::CMsgShowcaseItem_Emoticon* emoticon);
  private:
  const ::CMsgShowcaseItem_Emoticon& _internal_emoticon() const;
  ::CMsgShowcaseItem_Emoticon* _internal_mutable_emoticon();
  public:
  void unsafe_arena_set_allocated_emoticon(
      ::CMsgShowcaseItem_Emoticon* emoticon);
  ::CMsgShowcaseItem_Emoticon* unsafe_arena_release_emoticon();

  // .CMsgShowcaseItem_Widget widget = 9;
  bool has_widget() const;
  private:
  bool _internal_has_widget() const;
  public:
  void clear_widget();
  const ::CMsgShowcaseItem_Widget& widget() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem_Widget* release_widget();
  ::CMsgShowcaseItem_Widget* mutable_widget();
  void set_allocated_widget(::CMsgShowcaseItem_Widget* widget);
  private:
  const ::CMsgShowcaseItem_Widget& _internal_widget() const;
  ::CMsgShowcaseItem_Widget* _internal_mutable_widget();
  public:
  void unsafe_arena_set_allocated_widget(
      ::CMsgShowcaseItem_Widget* widget);
  ::CMsgShowcaseItem_Widget* unsafe_arena_release_widget();

  // .CMsgShowcaseBackground background = 100;
  bool has_background() const;
  private:
  bool _internal_has_background() const;
  public:
  void clear_background();
  const ::CMsgShowcaseBackground& background() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseBackground* release_background();
  ::CMsgShowcaseBackground* mutable_background();
  void set_allocated_background(::CMsgShowcaseBackground* background);
  private:
  const ::CMsgShowcaseBackground& _internal_background() const;
  ::CMsgShowcaseBackground* _internal_mutable_background();
  public:
  void unsafe_arena_set_allocated_background(
      ::CMsgShowcaseBackground* background);
  ::CMsgShowcaseBackground* unsafe_arena_release_background();

  void clear_item();
  ItemCase item_case() const;
  // @@protoc_insertion_point(class_scope:CMsgShowcaseItemData)
 private:
  class _Internal;
  void set_has_trophy();
  void set_has_econ_item_icon();
  void set_has_sticker();
  void set_has_hero_model();
  void set_has_player_match();
  void set_has_chat_wheel();
  void set_has_spray();
  void set_has_emoticon();
  void set_has_widget();
  void set_has_background();

  inline bool has_item() const;
  inline void clear_has_item();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ItemUnion {
      constexpr ItemUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::CMsgShowcaseItem_Trophy* trophy_;
      ::CMsgShowcaseItem_EconItem* econ_item_icon_;
      ::CMsgShowcaseItem_EconItem* sticker_;
      ::CMsgShowcaseItem_Hero* hero_model_;
      ::CMsgShowcaseItem_PlayerMatch* player_match_;
      ::CMsgShowcaseItem_ChatWheel* chat_wheel_;
      ::CMsgShowcaseItem_ChatWheel* spray_;
      ::CMsgShowcaseItem_Emoticon* emoticon_;
      ::CMsgShowcaseItem_Widget* widget_;
      ::CMsgShowcaseBackground* background_;
    } item_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItemPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItemPosition) */ {
 public:
  inline CMsgShowcaseItemPosition() : CMsgShowcaseItemPosition(nullptr) {}
  ~CMsgShowcaseItemPosition() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItemPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItemPosition(const CMsgShowcaseItemPosition& from);
  CMsgShowcaseItemPosition(CMsgShowcaseItemPosition&& from) noexcept
    : CMsgShowcaseItemPosition() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItemPosition& operator=(const CMsgShowcaseItemPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItemPosition& operator=(CMsgShowcaseItemPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItemPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItemPosition* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItemPosition*>(
               &_CMsgShowcaseItemPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgShowcaseItemPosition& a, CMsgShowcaseItemPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItemPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItemPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItemPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItemPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItemPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItemPosition& from) {
    CMsgShowcaseItemPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItemPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItemPosition";
  }
  protected:
  explicit CMsgShowcaseItemPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionXFieldNumber = 1,
    kPositionYFieldNumber = 2,
    kScaleFieldNumber = 3,
  };
  // optional int32 position_x = 1;
  bool has_position_x() const;
  private:
  bool _internal_has_position_x() const;
  public:
  void clear_position_x();
  int32_t position_x() const;
  void set_position_x(int32_t value);
  private:
  int32_t _internal_position_x() const;
  void _internal_set_position_x(int32_t value);
  public:

  // optional int32 position_y = 2;
  bool has_position_y() const;
  private:
  bool _internal_has_position_y() const;
  public:
  void clear_position_y();
  int32_t position_y() const;
  void set_position_y(int32_t value);
  private:
  int32_t _internal_position_y() const;
  void _internal_set_position_y(int32_t value);
  public:

  // optional uint32 scale = 3;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  uint32_t scale() const;
  void set_scale(uint32_t value);
  private:
  uint32_t _internal_scale() const;
  void _internal_set_scale(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItemPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t position_x_;
    int32_t position_y_;
    uint32_t scale_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcaseItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcaseItem) */ {
 public:
  inline CMsgShowcaseItem() : CMsgShowcaseItem(nullptr) {}
  ~CMsgShowcaseItem() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcaseItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcaseItem(const CMsgShowcaseItem& from);
  CMsgShowcaseItem(CMsgShowcaseItem&& from) noexcept
    : CMsgShowcaseItem() {
    *this = ::std::move(from);
  }

  inline CMsgShowcaseItem& operator=(const CMsgShowcaseItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcaseItem& operator=(CMsgShowcaseItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcaseItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcaseItem* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcaseItem*>(
               &_CMsgShowcaseItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMsgShowcaseItem& a, CMsgShowcaseItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcaseItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcaseItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcaseItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcaseItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcaseItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcaseItem& from) {
    CMsgShowcaseItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcaseItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcaseItem";
  }
  protected:
  explicit CMsgShowcaseItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemPositionFieldNumber = 2,
    kItemDataFieldNumber = 3,
    kShowcaseItemIdFieldNumber = 1,
    kStateFieldNumber = 4,
  };
  // optional .CMsgShowcaseItemPosition item_position = 2;
  bool has_item_position() const;
  private:
  bool _internal_has_item_position() const;
  public:
  void clear_item_position();
  const ::CMsgShowcaseItemPosition& item_position() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItemPosition* release_item_position();
  ::CMsgShowcaseItemPosition* mutable_item_position();
  void set_allocated_item_position(::CMsgShowcaseItemPosition* item_position);
  private:
  const ::CMsgShowcaseItemPosition& _internal_item_position() const;
  ::CMsgShowcaseItemPosition* _internal_mutable_item_position();
  public:
  void unsafe_arena_set_allocated_item_position(
      ::CMsgShowcaseItemPosition* item_position);
  ::CMsgShowcaseItemPosition* unsafe_arena_release_item_position();

  // optional .CMsgShowcaseItemData item_data = 3;
  bool has_item_data() const;
  private:
  bool _internal_has_item_data() const;
  public:
  void clear_item_data();
  const ::CMsgShowcaseItemData& item_data() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItemData* release_item_data();
  ::CMsgShowcaseItemData* mutable_item_data();
  void set_allocated_item_data(::CMsgShowcaseItemData* item_data);
  private:
  const ::CMsgShowcaseItemData& _internal_item_data() const;
  ::CMsgShowcaseItemData* _internal_mutable_item_data();
  public:
  void unsafe_arena_set_allocated_item_data(
      ::CMsgShowcaseItemData* item_data);
  ::CMsgShowcaseItemData* unsafe_arena_release_item_data();

  // optional uint32 showcase_item_id = 1;
  bool has_showcase_item_id() const;
  private:
  bool _internal_has_showcase_item_id() const;
  public:
  void clear_showcase_item_id();
  uint32_t showcase_item_id() const;
  void set_showcase_item_id(uint32_t value);
  private:
  uint32_t _internal_showcase_item_id() const;
  void _internal_set_showcase_item_id(uint32_t value);
  public:

  // optional .EShowcaseItemState state = 4 [default = k_eShowcaseItemState_Ok];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::EShowcaseItemState state() const;
  void set_state(::EShowcaseItemState value);
  private:
  ::EShowcaseItemState _internal_state() const;
  void _internal_set_state(::EShowcaseItemState value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowcaseItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcaseItemPosition* item_position_;
    ::CMsgShowcaseItemData* item_data_;
    uint32_t showcase_item_id_;
    int state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowcase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowcase) */ {
 public:
  inline CMsgShowcase() : CMsgShowcase(nullptr) {}
  ~CMsgShowcase() override;
  explicit PROTOBUF_CONSTEXPR CMsgShowcase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowcase(const CMsgShowcase& from);
  CMsgShowcase(CMsgShowcase&& from) noexcept
    : CMsgShowcase() {
    *this = ::std::move(from);
  }

  inline CMsgShowcase& operator=(const CMsgShowcase& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowcase& operator=(CMsgShowcase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowcase& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowcase* internal_default_instance() {
    return reinterpret_cast<const CMsgShowcase*>(
               &_CMsgShowcase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMsgShowcase& a, CMsgShowcase& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowcase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowcase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowcase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowcase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowcase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgShowcase& from) {
    CMsgShowcase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowcase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowcase";
  }
  protected:
  explicit CMsgShowcase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowcaseItemsFieldNumber = 1,
    kBackgroundFieldNumber = 3,
  };
  // repeated .CMsgShowcaseItem showcase_items = 1;
  int showcase_items_size() const;
  private:
  int _internal_showcase_items_size() const;
  public:
  void clear_showcase_items();
  ::CMsgShowcaseItem* mutable_showcase_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseItem >*
      mutable_showcase_items();
  private:
  const ::CMsgShowcaseItem& _internal_showcase_items(int index) const;
  ::CMsgShowcaseItem* _internal_add_showcase_items();
  public:
  const ::CMsgShowcaseItem& showcase_items(int index) const;
  ::CMsgShowcaseItem* add_showcase_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseItem >&
      showcase_items() const;

  // optional .CMsgShowcaseItem background = 3;
  bool has_background() const;
  private:
  bool _internal_has_background() const;
  public:
  void clear_background();
  const ::CMsgShowcaseItem& background() const;
  PROTOBUF_NODISCARD ::CMsgShowcaseItem* release_background();
  ::CMsgShowcaseItem* mutable_background();
  void set_allocated_background(::CMsgShowcaseItem* background);
  private:
  const ::CMsgShowcaseItem& _internal_background() const;
  ::CMsgShowcaseItem* _internal_mutable_background();
  public:
  void unsafe_arena_set_allocated_background(
      ::CMsgShowcaseItem* background);
  ::CMsgShowcaseItem* unsafe_arena_release_background();

  // @@protoc_insertion_point(class_scope:CMsgShowcase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseItem > showcase_items_;
    ::CMsgShowcaseItem* background_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseGetUserData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseGetUserData) */ {
 public:
  inline CMsgClientToGCShowcaseGetUserData() : CMsgClientToGCShowcaseGetUserData(nullptr) {}
  ~CMsgClientToGCShowcaseGetUserData() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseGetUserData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseGetUserData(const CMsgClientToGCShowcaseGetUserData& from);
  CMsgClientToGCShowcaseGetUserData(CMsgClientToGCShowcaseGetUserData&& from) noexcept
    : CMsgClientToGCShowcaseGetUserData() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseGetUserData& operator=(const CMsgClientToGCShowcaseGetUserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseGetUserData& operator=(CMsgClientToGCShowcaseGetUserData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseGetUserData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseGetUserData* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseGetUserData*>(
               &_CMsgClientToGCShowcaseGetUserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMsgClientToGCShowcaseGetUserData& a, CMsgClientToGCShowcaseGetUserData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseGetUserData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseGetUserData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseGetUserData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseGetUserData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseGetUserData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseGetUserData& from) {
    CMsgClientToGCShowcaseGetUserData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseGetUserData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseGetUserData";
  }
  protected:
  explicit CMsgClientToGCShowcaseGetUserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kShowcaseTypeFieldNumber = 2,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
  bool has_showcase_type() const;
  private:
  bool _internal_has_showcase_type() const;
  public:
  void clear_showcase_type();
  ::EShowcaseType showcase_type() const;
  void set_showcase_type(::EShowcaseType value);
  private:
  ::EShowcaseType _internal_showcase_type() const;
  void _internal_set_showcase_type(::EShowcaseType value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseGetUserData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    int showcase_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseGetUserDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseGetUserDataResponse) */ {
 public:
  inline CMsgClientToGCShowcaseGetUserDataResponse() : CMsgClientToGCShowcaseGetUserDataResponse(nullptr) {}
  ~CMsgClientToGCShowcaseGetUserDataResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseGetUserDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseGetUserDataResponse(const CMsgClientToGCShowcaseGetUserDataResponse& from);
  CMsgClientToGCShowcaseGetUserDataResponse(CMsgClientToGCShowcaseGetUserDataResponse&& from) noexcept
    : CMsgClientToGCShowcaseGetUserDataResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseGetUserDataResponse& operator=(const CMsgClientToGCShowcaseGetUserDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseGetUserDataResponse& operator=(CMsgClientToGCShowcaseGetUserDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseGetUserDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseGetUserDataResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseGetUserDataResponse*>(
               &_CMsgClientToGCShowcaseGetUserDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CMsgClientToGCShowcaseGetUserDataResponse& a, CMsgClientToGCShowcaseGetUserDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseGetUserDataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseGetUserDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseGetUserDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseGetUserDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseGetUserDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseGetUserDataResponse& from) {
    CMsgClientToGCShowcaseGetUserDataResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseGetUserDataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseGetUserDataResponse";
  }
  protected:
  explicit CMsgClientToGCShowcaseGetUserDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCShowcaseGetUserDataResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_eTimeout =
    CMsgClientToGCShowcaseGetUserDataResponse_EResponse_k_eTimeout;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCShowcaseGetUserDataResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCShowcaseGetUserDataResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCShowcaseGetUserDataResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCShowcaseGetUserDataResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCShowcaseGetUserDataResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCShowcaseGetUserDataResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCShowcaseGetUserDataResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kShowcaseFieldNumber = 2,
    kResponseFieldNumber = 1,
  };
  // optional .CMsgShowcase showcase = 2;
  bool has_showcase() const;
  private:
  bool _internal_has_showcase() const;
  public:
  void clear_showcase();
  const ::CMsgShowcase& showcase() const;
  PROTOBUF_NODISCARD ::CMsgShowcase* release_showcase();
  ::CMsgShowcase* mutable_showcase();
  void set_allocated_showcase(::CMsgShowcase* showcase);
  private:
  const ::CMsgShowcase& _internal_showcase() const;
  ::CMsgShowcase* _internal_mutable_showcase();
  public:
  void unsafe_arena_set_allocated_showcase(
      ::CMsgShowcase* showcase);
  ::CMsgShowcase* unsafe_arena_release_showcase();

  // optional .CMsgClientToGCShowcaseGetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCShowcaseGetUserDataResponse_EResponse response() const;
  void set_response(::CMsgClientToGCShowcaseGetUserDataResponse_EResponse value);
  private:
  ::CMsgClientToGCShowcaseGetUserDataResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCShowcaseGetUserDataResponse_EResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseGetUserDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcase* showcase_;
    int response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseSetUserData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseSetUserData) */ {
 public:
  inline CMsgClientToGCShowcaseSetUserData() : CMsgClientToGCShowcaseSetUserData(nullptr) {}
  ~CMsgClientToGCShowcaseSetUserData() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseSetUserData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseSetUserData(const CMsgClientToGCShowcaseSetUserData& from);
  CMsgClientToGCShowcaseSetUserData(CMsgClientToGCShowcaseSetUserData&& from) noexcept
    : CMsgClientToGCShowcaseSetUserData() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseSetUserData& operator=(const CMsgClientToGCShowcaseSetUserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseSetUserData& operator=(CMsgClientToGCShowcaseSetUserData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseSetUserData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseSetUserData* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseSetUserData*>(
               &_CMsgClientToGCShowcaseSetUserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CMsgClientToGCShowcaseSetUserData& a, CMsgClientToGCShowcaseSetUserData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseSetUserData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseSetUserData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseSetUserData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseSetUserData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseSetUserData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseSetUserData& from) {
    CMsgClientToGCShowcaseSetUserData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseSetUserData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseSetUserData";
  }
  protected:
  explicit CMsgClientToGCShowcaseSetUserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowcaseFieldNumber = 2,
    kShowcaseTypeFieldNumber = 1,
  };
  // optional .CMsgShowcase showcase = 2;
  bool has_showcase() const;
  private:
  bool _internal_has_showcase() const;
  public:
  void clear_showcase();
  const ::CMsgShowcase& showcase() const;
  PROTOBUF_NODISCARD ::CMsgShowcase* release_showcase();
  ::CMsgShowcase* mutable_showcase();
  void set_allocated_showcase(::CMsgShowcase* showcase);
  private:
  const ::CMsgShowcase& _internal_showcase() const;
  ::CMsgShowcase* _internal_mutable_showcase();
  public:
  void unsafe_arena_set_allocated_showcase(
      ::CMsgShowcase* showcase);
  ::CMsgShowcase* unsafe_arena_release_showcase();

  // optional .EShowcaseType showcase_type = 1 [default = k_eShowcaseType_Invalid];
  bool has_showcase_type() const;
  private:
  bool _internal_has_showcase_type() const;
  public:
  void clear_showcase_type();
  ::EShowcaseType showcase_type() const;
  void set_showcase_type(::EShowcaseType value);
  private:
  ::EShowcaseType _internal_showcase_type() const;
  void _internal_set_showcase_type(::EShowcaseType value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseSetUserData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcase* showcase_;
    int showcase_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCShowcaseSetUserDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCShowcaseSetUserDataResponse) */ {
 public:
  inline CMsgClientToGCShowcaseSetUserDataResponse() : CMsgClientToGCShowcaseSetUserDataResponse(nullptr) {}
  ~CMsgClientToGCShowcaseSetUserDataResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCShowcaseSetUserDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCShowcaseSetUserDataResponse(const CMsgClientToGCShowcaseSetUserDataResponse& from);
  CMsgClientToGCShowcaseSetUserDataResponse(CMsgClientToGCShowcaseSetUserDataResponse&& from) noexcept
    : CMsgClientToGCShowcaseSetUserDataResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCShowcaseSetUserDataResponse& operator=(const CMsgClientToGCShowcaseSetUserDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCShowcaseSetUserDataResponse& operator=(CMsgClientToGCShowcaseSetUserDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCShowcaseSetUserDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCShowcaseSetUserDataResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCShowcaseSetUserDataResponse*>(
               &_CMsgClientToGCShowcaseSetUserDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CMsgClientToGCShowcaseSetUserDataResponse& a, CMsgClientToGCShowcaseSetUserDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCShowcaseSetUserDataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCShowcaseSetUserDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCShowcaseSetUserDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCShowcaseSetUserDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCShowcaseSetUserDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCShowcaseSetUserDataResponse& from) {
    CMsgClientToGCShowcaseSetUserDataResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCShowcaseSetUserDataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCShowcaseSetUserDataResponse";
  }
  protected:
  explicit CMsgClientToGCShowcaseSetUserDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCShowcaseSetUserDataResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_eTimeout =
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eTimeout;
  static constexpr EResponse k_eInvalid =
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_k_eInvalid;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCShowcaseSetUserDataResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCShowcaseSetUserDataResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCShowcaseSetUserDataResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCShowcaseSetUserDataResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCShowcaseSetUserDataResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValidatedShowcaseFieldNumber = 2,
    kResponseFieldNumber = 1,
  };
  // optional .CMsgShowcase validated_showcase = 2;
  bool has_validated_showcase() const;
  private:
  bool _internal_has_validated_showcase() const;
  public:
  void clear_validated_showcase();
  const ::CMsgShowcase& validated_showcase() const;
  PROTOBUF_NODISCARD ::CMsgShowcase* release_validated_showcase();
  ::CMsgShowcase* mutable_validated_showcase();
  void set_allocated_validated_showcase(::CMsgShowcase* validated_showcase);
  private:
  const ::CMsgShowcase& _internal_validated_showcase() const;
  ::CMsgShowcase* _internal_mutable_validated_showcase();
  public:
  void unsafe_arena_set_allocated_validated_showcase(
      ::CMsgShowcase* validated_showcase);
  ::CMsgShowcase* unsafe_arena_release_validated_showcase();

  // optional .CMsgClientToGCShowcaseSetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCShowcaseSetUserDataResponse_EResponse response() const;
  void set_response(::CMsgClientToGCShowcaseSetUserDataResponse_EResponse value);
  private:
  ::CMsgClientToGCShowcaseSetUserDataResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCShowcaseSetUserDataResponse_EResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCShowcaseSetUserDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgShowcase* validated_showcase_;
    int response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fshowcase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgShowcaseEconItemReference

// optional uint64 id = 1;
inline bool CMsgShowcaseEconItemReference::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgShowcaseEconItemReference::has_id() const {
  return _internal_has_id();
}
inline void CMsgShowcaseEconItemReference::clear_id() {
  _impl_.id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgShowcaseEconItemReference::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t CMsgShowcaseEconItemReference::id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseEconItemReference.id)
  return _internal_id();
}
inline void CMsgShowcaseEconItemReference::_internal_set_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void CMsgShowcaseEconItemReference::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseEconItemReference.id)
}

// optional uint64 original_id = 2;
inline bool CMsgShowcaseEconItemReference::_internal_has_original_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcaseEconItemReference::has_original_id() const {
  return _internal_has_original_id();
}
inline void CMsgShowcaseEconItemReference::clear_original_id() {
  _impl_.original_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgShowcaseEconItemReference::_internal_original_id() const {
  return _impl_.original_id_;
}
inline uint64_t CMsgShowcaseEconItemReference::original_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseEconItemReference.original_id)
  return _internal_original_id();
}
inline void CMsgShowcaseEconItemReference::_internal_set_original_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.original_id_ = value;
}
inline void CMsgShowcaseEconItemReference::set_original_id(uint64_t value) {
  _internal_set_original_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseEconItemReference.original_id)
}

// optional uint32 definition_index = 3;
inline bool CMsgShowcaseEconItemReference::_internal_has_definition_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgShowcaseEconItemReference::has_definition_index() const {
  return _internal_has_definition_index();
}
inline void CMsgShowcaseEconItemReference::clear_definition_index() {
  _impl_.definition_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgShowcaseEconItemReference::_internal_definition_index() const {
  return _impl_.definition_index_;
}
inline uint32_t CMsgShowcaseEconItemReference::definition_index() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseEconItemReference.definition_index)
  return _internal_definition_index();
}
inline void CMsgShowcaseEconItemReference::_internal_set_definition_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.definition_index_ = value;
}
inline void CMsgShowcaseEconItemReference::set_definition_index(uint32_t value) {
  _internal_set_definition_index(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseEconItemReference.definition_index)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_Trophy_Data

// optional uint32 trophy_score = 1;
inline bool CMsgShowcaseItem_Trophy_Data::_internal_has_trophy_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_Trophy_Data::has_trophy_score() const {
  return _internal_has_trophy_score();
}
inline void CMsgShowcaseItem_Trophy_Data::clear_trophy_score() {
  _impl_.trophy_score_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgShowcaseItem_Trophy_Data::_internal_trophy_score() const {
  return _impl_.trophy_score_;
}
inline uint32_t CMsgShowcaseItem_Trophy_Data::trophy_score() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Trophy.Data.trophy_score)
  return _internal_trophy_score();
}
inline void CMsgShowcaseItem_Trophy_Data::_internal_set_trophy_score(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.trophy_score_ = value;
}
inline void CMsgShowcaseItem_Trophy_Data::set_trophy_score(uint32_t value) {
  _internal_set_trophy_score(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_Trophy.Data.trophy_score)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_Trophy

// optional .CMsgShowcaseItem_Trophy.Data data = 1;
inline bool CMsgShowcaseItem_Trophy::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_Trophy::has_data() const {
  return _internal_has_data();
}
inline void CMsgShowcaseItem_Trophy::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseItem_Trophy_Data& CMsgShowcaseItem_Trophy::_internal_data() const {
  const ::CMsgShowcaseItem_Trophy_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseItem_Trophy_Data&>(
      ::_CMsgShowcaseItem_Trophy_Data_default_instance_);
}
inline const ::CMsgShowcaseItem_Trophy_Data& CMsgShowcaseItem_Trophy::data() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Trophy.data)
  return _internal_data();
}
inline void CMsgShowcaseItem_Trophy::unsafe_arena_set_allocated_data(
    ::CMsgShowcaseItem_Trophy_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_Trophy.data)
}
inline ::CMsgShowcaseItem_Trophy_Data* CMsgShowcaseItem_Trophy::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_Trophy_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseItem_Trophy_Data* CMsgShowcaseItem_Trophy::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_Trophy.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_Trophy_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseItem_Trophy_Data* CMsgShowcaseItem_Trophy::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseItem_Trophy_Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::CMsgShowcaseItem_Trophy_Data* CMsgShowcaseItem_Trophy::mutable_data() {
  ::CMsgShowcaseItem_Trophy_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_Trophy.data)
  return _msg;
}
inline void CMsgShowcaseItem_Trophy::set_allocated_data(::CMsgShowcaseItem_Trophy_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_Trophy.data)
}

// optional uint32 trophy_id = 2;
inline bool CMsgShowcaseItem_Trophy::_internal_has_trophy_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_Trophy::has_trophy_id() const {
  return _internal_has_trophy_id();
}
inline void CMsgShowcaseItem_Trophy::clear_trophy_id() {
  _impl_.trophy_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgShowcaseItem_Trophy::_internal_trophy_id() const {
  return _impl_.trophy_id_;
}
inline uint32_t CMsgShowcaseItem_Trophy::trophy_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Trophy.trophy_id)
  return _internal_trophy_id();
}
inline void CMsgShowcaseItem_Trophy::_internal_set_trophy_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.trophy_id_ = value;
}
inline void CMsgShowcaseItem_Trophy::set_trophy_id(uint32_t value) {
  _internal_set_trophy_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_Trophy.trophy_id)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_EconItem_Data

// optional .CSOEconItem econ_item = 1;
inline bool CMsgShowcaseItem_EconItem_Data::_internal_has_econ_item() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.econ_item_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_EconItem_Data::has_econ_item() const {
  return _internal_has_econ_item();
}
inline const ::CSOEconItem& CMsgShowcaseItem_EconItem_Data::_internal_econ_item() const {
  const ::CSOEconItem* p = _impl_.econ_item_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSOEconItem&>(
      ::_CSOEconItem_default_instance_);
}
inline const ::CSOEconItem& CMsgShowcaseItem_EconItem_Data::econ_item() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_EconItem.Data.econ_item)
  return _internal_econ_item();
}
inline void CMsgShowcaseItem_EconItem_Data::unsafe_arena_set_allocated_econ_item(
    ::CSOEconItem* econ_item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.econ_item_);
  }
  _impl_.econ_item_ = econ_item;
  if (econ_item) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_EconItem.Data.econ_item)
}
inline ::CSOEconItem* CMsgShowcaseItem_EconItem_Data::release_econ_item() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CSOEconItem* temp = _impl_.econ_item_;
  _impl_.econ_item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSOEconItem* CMsgShowcaseItem_EconItem_Data::unsafe_arena_release_econ_item() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_EconItem.Data.econ_item)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CSOEconItem* temp = _impl_.econ_item_;
  _impl_.econ_item_ = nullptr;
  return temp;
}
inline ::CSOEconItem* CMsgShowcaseItem_EconItem_Data::_internal_mutable_econ_item() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.econ_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSOEconItem>(GetArenaForAllocation());
    _impl_.econ_item_ = p;
  }
  return _impl_.econ_item_;
}
inline ::CSOEconItem* CMsgShowcaseItem_EconItem_Data::mutable_econ_item() {
  ::CSOEconItem* _msg = _internal_mutable_econ_item();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_EconItem.Data.econ_item)
  return _msg;
}
inline void CMsgShowcaseItem_EconItem_Data::set_allocated_econ_item(::CSOEconItem* econ_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.econ_item_);
  }
  if (econ_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(econ_item));
    if (message_arena != submessage_arena) {
      econ_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, econ_item, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.econ_item_ = econ_item;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_EconItem.Data.econ_item)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_EconItem

// optional .CMsgShowcaseItem_EconItem.Data data = 1;
inline bool CMsgShowcaseItem_EconItem::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_EconItem::has_data() const {
  return _internal_has_data();
}
inline void CMsgShowcaseItem_EconItem::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseItem_EconItem_Data& CMsgShowcaseItem_EconItem::_internal_data() const {
  const ::CMsgShowcaseItem_EconItem_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseItem_EconItem_Data&>(
      ::_CMsgShowcaseItem_EconItem_Data_default_instance_);
}
inline const ::CMsgShowcaseItem_EconItem_Data& CMsgShowcaseItem_EconItem::data() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_EconItem.data)
  return _internal_data();
}
inline void CMsgShowcaseItem_EconItem::unsafe_arena_set_allocated_data(
    ::CMsgShowcaseItem_EconItem_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_EconItem.data)
}
inline ::CMsgShowcaseItem_EconItem_Data* CMsgShowcaseItem_EconItem::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_EconItem_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseItem_EconItem_Data* CMsgShowcaseItem_EconItem::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_EconItem.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_EconItem_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseItem_EconItem_Data* CMsgShowcaseItem_EconItem::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseItem_EconItem_Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::CMsgShowcaseItem_EconItem_Data* CMsgShowcaseItem_EconItem::mutable_data() {
  ::CMsgShowcaseItem_EconItem_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_EconItem.data)
  return _msg;
}
inline void CMsgShowcaseItem_EconItem::set_allocated_data(::CMsgShowcaseItem_EconItem_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_EconItem.data)
}

// optional .CMsgShowcaseEconItemReference ref = 2;
inline bool CMsgShowcaseItem_EconItem::_internal_has_ref() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ref_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_EconItem::has_ref() const {
  return _internal_has_ref();
}
inline void CMsgShowcaseItem_EconItem::clear_ref() {
  if (_impl_.ref_ != nullptr) _impl_.ref_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgShowcaseEconItemReference& CMsgShowcaseItem_EconItem::_internal_ref() const {
  const ::CMsgShowcaseEconItemReference* p = _impl_.ref_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseEconItemReference&>(
      ::_CMsgShowcaseEconItemReference_default_instance_);
}
inline const ::CMsgShowcaseEconItemReference& CMsgShowcaseItem_EconItem::ref() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_EconItem.ref)
  return _internal_ref();
}
inline void CMsgShowcaseItem_EconItem::unsafe_arena_set_allocated_ref(
    ::CMsgShowcaseEconItemReference* ref) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ref_);
  }
  _impl_.ref_ = ref;
  if (ref) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_EconItem.ref)
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseItem_EconItem::release_ref() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgShowcaseEconItemReference* temp = _impl_.ref_;
  _impl_.ref_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseItem_EconItem::unsafe_arena_release_ref() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_EconItem.ref)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgShowcaseEconItemReference* temp = _impl_.ref_;
  _impl_.ref_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseItem_EconItem::_internal_mutable_ref() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseEconItemReference>(GetArenaForAllocation());
    _impl_.ref_ = p;
  }
  return _impl_.ref_;
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseItem_EconItem::mutable_ref() {
  ::CMsgShowcaseEconItemReference* _msg = _internal_mutable_ref();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_EconItem.ref)
  return _msg;
}
inline void CMsgShowcaseItem_EconItem::set_allocated_ref(::CMsgShowcaseEconItemReference* ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ref_;
  }
  if (ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ref);
    if (message_arena != submessage_arena) {
      ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ref, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.ref_ = ref;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_EconItem.ref)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_Hero_Data

// repeated .CSOEconItem econ_items = 1;
inline int CMsgShowcaseItem_Hero_Data::_internal_econ_items_size() const {
  return _impl_.econ_items_.size();
}
inline int CMsgShowcaseItem_Hero_Data::econ_items_size() const {
  return _internal_econ_items_size();
}
inline ::CSOEconItem* CMsgShowcaseItem_Hero_Data::mutable_econ_items(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_Hero.Data.econ_items)
  return _impl_.econ_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem >*
CMsgShowcaseItem_Hero_Data::mutable_econ_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgShowcaseItem_Hero.Data.econ_items)
  return &_impl_.econ_items_;
}
inline const ::CSOEconItem& CMsgShowcaseItem_Hero_Data::_internal_econ_items(int index) const {
  return _impl_.econ_items_.Get(index);
}
inline const ::CSOEconItem& CMsgShowcaseItem_Hero_Data::econ_items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Hero.Data.econ_items)
  return _internal_econ_items(index);
}
inline ::CSOEconItem* CMsgShowcaseItem_Hero_Data::_internal_add_econ_items() {
  return _impl_.econ_items_.Add();
}
inline ::CSOEconItem* CMsgShowcaseItem_Hero_Data::add_econ_items() {
  ::CSOEconItem* _add = _internal_add_econ_items();
  // @@protoc_insertion_point(field_add:CMsgShowcaseItem_Hero.Data.econ_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem >&
CMsgShowcaseItem_Hero_Data::econ_items() const {
  // @@protoc_insertion_point(field_list:CMsgShowcaseItem_Hero.Data.econ_items)
  return _impl_.econ_items_;
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_Hero

// optional .CMsgShowcaseItem_Hero.Data data = 1;
inline bool CMsgShowcaseItem_Hero::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_Hero::has_data() const {
  return _internal_has_data();
}
inline void CMsgShowcaseItem_Hero::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseItem_Hero_Data& CMsgShowcaseItem_Hero::_internal_data() const {
  const ::CMsgShowcaseItem_Hero_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseItem_Hero_Data&>(
      ::_CMsgShowcaseItem_Hero_Data_default_instance_);
}
inline const ::CMsgShowcaseItem_Hero_Data& CMsgShowcaseItem_Hero::data() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Hero.data)
  return _internal_data();
}
inline void CMsgShowcaseItem_Hero::unsafe_arena_set_allocated_data(
    ::CMsgShowcaseItem_Hero_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_Hero.data)
}
inline ::CMsgShowcaseItem_Hero_Data* CMsgShowcaseItem_Hero::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_Hero_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseItem_Hero_Data* CMsgShowcaseItem_Hero::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_Hero.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_Hero_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseItem_Hero_Data* CMsgShowcaseItem_Hero::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseItem_Hero_Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::CMsgShowcaseItem_Hero_Data* CMsgShowcaseItem_Hero::mutable_data() {
  ::CMsgShowcaseItem_Hero_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_Hero.data)
  return _msg;
}
inline void CMsgShowcaseItem_Hero::set_allocated_data(::CMsgShowcaseItem_Hero_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_Hero.data)
}

// optional uint32 hero_id = 2;
inline bool CMsgShowcaseItem_Hero::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_Hero::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgShowcaseItem_Hero::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgShowcaseItem_Hero::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgShowcaseItem_Hero::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Hero.hero_id)
  return _internal_hero_id();
}
inline void CMsgShowcaseItem_Hero::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hero_id_ = value;
}
inline void CMsgShowcaseItem_Hero::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_Hero.hero_id)
}

// repeated .CMsgShowcaseEconItemReference econ_item_refs = 3;
inline int CMsgShowcaseItem_Hero::_internal_econ_item_refs_size() const {
  return _impl_.econ_item_refs_.size();
}
inline int CMsgShowcaseItem_Hero::econ_item_refs_size() const {
  return _internal_econ_item_refs_size();
}
inline void CMsgShowcaseItem_Hero::clear_econ_item_refs() {
  _impl_.econ_item_refs_.Clear();
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseItem_Hero::mutable_econ_item_refs(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_Hero.econ_item_refs)
  return _impl_.econ_item_refs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseEconItemReference >*
CMsgShowcaseItem_Hero::mutable_econ_item_refs() {
  // @@protoc_insertion_point(field_mutable_list:CMsgShowcaseItem_Hero.econ_item_refs)
  return &_impl_.econ_item_refs_;
}
inline const ::CMsgShowcaseEconItemReference& CMsgShowcaseItem_Hero::_internal_econ_item_refs(int index) const {
  return _impl_.econ_item_refs_.Get(index);
}
inline const ::CMsgShowcaseEconItemReference& CMsgShowcaseItem_Hero::econ_item_refs(int index) const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Hero.econ_item_refs)
  return _internal_econ_item_refs(index);
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseItem_Hero::_internal_add_econ_item_refs() {
  return _impl_.econ_item_refs_.Add();
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseItem_Hero::add_econ_item_refs() {
  ::CMsgShowcaseEconItemReference* _add = _internal_add_econ_item_refs();
  // @@protoc_insertion_point(field_add:CMsgShowcaseItem_Hero.econ_item_refs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseEconItemReference >&
CMsgShowcaseItem_Hero::econ_item_refs() const {
  // @@protoc_insertion_point(field_list:CMsgShowcaseItem_Hero.econ_item_refs)
  return _impl_.econ_item_refs_;
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_PlayerMatch_Data

// optional uint32 hero_id = 1;
inline bool CMsgShowcaseItem_PlayerMatch_Data::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_PlayerMatch_Data::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch_Data::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch_Data::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_PlayerMatch.Data.hero_id)
  return _internal_hero_id();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hero_id_ = value;
}
inline void CMsgShowcaseItem_PlayerMatch_Data::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_PlayerMatch.Data.hero_id)
}

// optional uint32 timestamp = 2;
inline bool CMsgShowcaseItem_PlayerMatch_Data::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_PlayerMatch_Data::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch_Data::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch_Data::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_PlayerMatch.Data.timestamp)
  return _internal_timestamp();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_ = value;
}
inline void CMsgShowcaseItem_PlayerMatch_Data::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_PlayerMatch.Data.timestamp)
}

// optional uint32 duration = 3;
inline bool CMsgShowcaseItem_PlayerMatch_Data::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_PlayerMatch_Data::has_duration() const {
  return _internal_has_duration();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::clear_duration() {
  _impl_.duration_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch_Data::_internal_duration() const {
  return _impl_.duration_;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch_Data::duration() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_PlayerMatch.Data.duration)
  return _internal_duration();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::_internal_set_duration(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.duration_ = value;
}
inline void CMsgShowcaseItem_PlayerMatch_Data::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_PlayerMatch.Data.duration)
}

// optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
inline bool CMsgShowcaseItem_PlayerMatch_Data::_internal_has_game_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_PlayerMatch_Data::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::clear_game_mode() {
  _impl_.game_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::DOTA_GameMode CMsgShowcaseItem_PlayerMatch_Data::_internal_game_mode() const {
  return static_cast< ::DOTA_GameMode >(_impl_.game_mode_);
}
inline ::DOTA_GameMode CMsgShowcaseItem_PlayerMatch_Data::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_PlayerMatch.Data.game_mode)
  return _internal_game_mode();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::_internal_set_game_mode(::DOTA_GameMode value) {
  assert(::DOTA_GameMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.game_mode_ = value;
}
inline void CMsgShowcaseItem_PlayerMatch_Data::set_game_mode(::DOTA_GameMode value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_PlayerMatch.Data.game_mode)
}

// optional .CMsgShowcaseItem_PlayerMatch.EPlayerOutcome outcome = 5 [default = k_eInvalid];
inline bool CMsgShowcaseItem_PlayerMatch_Data::_internal_has_outcome() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_PlayerMatch_Data::has_outcome() const {
  return _internal_has_outcome();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::clear_outcome() {
  _impl_.outcome_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome CMsgShowcaseItem_PlayerMatch_Data::_internal_outcome() const {
  return static_cast< ::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome >(_impl_.outcome_);
}
inline ::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome CMsgShowcaseItem_PlayerMatch_Data::outcome() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_PlayerMatch.Data.outcome)
  return _internal_outcome();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::_internal_set_outcome(::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome value) {
  assert(::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.outcome_ = value;
}
inline void CMsgShowcaseItem_PlayerMatch_Data::set_outcome(::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome value) {
  _internal_set_outcome(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_PlayerMatch.Data.outcome)
}

// optional uint32 kills = 6;
inline bool CMsgShowcaseItem_PlayerMatch_Data::_internal_has_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_PlayerMatch_Data::has_kills() const {
  return _internal_has_kills();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::clear_kills() {
  _impl_.kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch_Data::_internal_kills() const {
  return _impl_.kills_;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch_Data::kills() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_PlayerMatch.Data.kills)
  return _internal_kills();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::_internal_set_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.kills_ = value;
}
inline void CMsgShowcaseItem_PlayerMatch_Data::set_kills(uint32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_PlayerMatch.Data.kills)
}

// optional uint32 deaths = 7;
inline bool CMsgShowcaseItem_PlayerMatch_Data::_internal_has_deaths() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_PlayerMatch_Data::has_deaths() const {
  return _internal_has_deaths();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::clear_deaths() {
  _impl_.deaths_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch_Data::_internal_deaths() const {
  return _impl_.deaths_;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch_Data::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_PlayerMatch.Data.deaths)
  return _internal_deaths();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::_internal_set_deaths(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.deaths_ = value;
}
inline void CMsgShowcaseItem_PlayerMatch_Data::set_deaths(uint32_t value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_PlayerMatch.Data.deaths)
}

// optional uint32 assists = 8;
inline bool CMsgShowcaseItem_PlayerMatch_Data::_internal_has_assists() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_PlayerMatch_Data::has_assists() const {
  return _internal_has_assists();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::clear_assists() {
  _impl_.assists_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch_Data::_internal_assists() const {
  return _impl_.assists_;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch_Data::assists() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_PlayerMatch.Data.assists)
  return _internal_assists();
}
inline void CMsgShowcaseItem_PlayerMatch_Data::_internal_set_assists(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.assists_ = value;
}
inline void CMsgShowcaseItem_PlayerMatch_Data::set_assists(uint32_t value) {
  _internal_set_assists(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_PlayerMatch.Data.assists)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_PlayerMatch

// optional .CMsgShowcaseItem_PlayerMatch.Data data = 1;
inline bool CMsgShowcaseItem_PlayerMatch::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_PlayerMatch::has_data() const {
  return _internal_has_data();
}
inline void CMsgShowcaseItem_PlayerMatch::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseItem_PlayerMatch_Data& CMsgShowcaseItem_PlayerMatch::_internal_data() const {
  const ::CMsgShowcaseItem_PlayerMatch_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseItem_PlayerMatch_Data&>(
      ::_CMsgShowcaseItem_PlayerMatch_Data_default_instance_);
}
inline const ::CMsgShowcaseItem_PlayerMatch_Data& CMsgShowcaseItem_PlayerMatch::data() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_PlayerMatch.data)
  return _internal_data();
}
inline void CMsgShowcaseItem_PlayerMatch::unsafe_arena_set_allocated_data(
    ::CMsgShowcaseItem_PlayerMatch_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_PlayerMatch.data)
}
inline ::CMsgShowcaseItem_PlayerMatch_Data* CMsgShowcaseItem_PlayerMatch::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_PlayerMatch_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseItem_PlayerMatch_Data* CMsgShowcaseItem_PlayerMatch::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_PlayerMatch.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_PlayerMatch_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseItem_PlayerMatch_Data* CMsgShowcaseItem_PlayerMatch::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseItem_PlayerMatch_Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::CMsgShowcaseItem_PlayerMatch_Data* CMsgShowcaseItem_PlayerMatch::mutable_data() {
  ::CMsgShowcaseItem_PlayerMatch_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_PlayerMatch.data)
  return _msg;
}
inline void CMsgShowcaseItem_PlayerMatch::set_allocated_data(::CMsgShowcaseItem_PlayerMatch_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_PlayerMatch.data)
}

// optional uint64 match_id = 2;
inline bool CMsgShowcaseItem_PlayerMatch::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_PlayerMatch::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgShowcaseItem_PlayerMatch::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgShowcaseItem_PlayerMatch::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgShowcaseItem_PlayerMatch::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_PlayerMatch.match_id)
  return _internal_match_id();
}
inline void CMsgShowcaseItem_PlayerMatch::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.match_id_ = value;
}
inline void CMsgShowcaseItem_PlayerMatch::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_PlayerMatch.match_id)
}

// optional uint32 player_slot = 3;
inline bool CMsgShowcaseItem_PlayerMatch::_internal_has_player_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_PlayerMatch::has_player_slot() const {
  return _internal_has_player_slot();
}
inline void CMsgShowcaseItem_PlayerMatch::clear_player_slot() {
  _impl_.player_slot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch::_internal_player_slot() const {
  return _impl_.player_slot_;
}
inline uint32_t CMsgShowcaseItem_PlayerMatch::player_slot() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_PlayerMatch.player_slot)
  return _internal_player_slot();
}
inline void CMsgShowcaseItem_PlayerMatch::_internal_set_player_slot(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.player_slot_ = value;
}
inline void CMsgShowcaseItem_PlayerMatch::set_player_slot(uint32_t value) {
  _internal_set_player_slot(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_PlayerMatch.player_slot)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_ChatWheel_Data

// -------------------------------------------------------------------

// CMsgShowcaseItem_ChatWheel

// optional .CMsgShowcaseItem_ChatWheel.Data data = 1;
inline bool CMsgShowcaseItem_ChatWheel::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_ChatWheel::has_data() const {
  return _internal_has_data();
}
inline void CMsgShowcaseItem_ChatWheel::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseItem_ChatWheel_Data& CMsgShowcaseItem_ChatWheel::_internal_data() const {
  const ::CMsgShowcaseItem_ChatWheel_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseItem_ChatWheel_Data&>(
      ::_CMsgShowcaseItem_ChatWheel_Data_default_instance_);
}
inline const ::CMsgShowcaseItem_ChatWheel_Data& CMsgShowcaseItem_ChatWheel::data() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_ChatWheel.data)
  return _internal_data();
}
inline void CMsgShowcaseItem_ChatWheel::unsafe_arena_set_allocated_data(
    ::CMsgShowcaseItem_ChatWheel_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_ChatWheel.data)
}
inline ::CMsgShowcaseItem_ChatWheel_Data* CMsgShowcaseItem_ChatWheel::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_ChatWheel_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseItem_ChatWheel_Data* CMsgShowcaseItem_ChatWheel::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_ChatWheel.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_ChatWheel_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseItem_ChatWheel_Data* CMsgShowcaseItem_ChatWheel::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseItem_ChatWheel_Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::CMsgShowcaseItem_ChatWheel_Data* CMsgShowcaseItem_ChatWheel::mutable_data() {
  ::CMsgShowcaseItem_ChatWheel_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_ChatWheel.data)
  return _msg;
}
inline void CMsgShowcaseItem_ChatWheel::set_allocated_data(::CMsgShowcaseItem_ChatWheel_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_ChatWheel.data)
}

// optional uint32 chat_wheel_message_id = 2 [default = 4294967295];
inline bool CMsgShowcaseItem_ChatWheel::_internal_has_chat_wheel_message_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_ChatWheel::has_chat_wheel_message_id() const {
  return _internal_has_chat_wheel_message_id();
}
inline void CMsgShowcaseItem_ChatWheel::clear_chat_wheel_message_id() {
  _impl_.chat_wheel_message_id_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgShowcaseItem_ChatWheel::_internal_chat_wheel_message_id() const {
  return _impl_.chat_wheel_message_id_;
}
inline uint32_t CMsgShowcaseItem_ChatWheel::chat_wheel_message_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_ChatWheel.chat_wheel_message_id)
  return _internal_chat_wheel_message_id();
}
inline void CMsgShowcaseItem_ChatWheel::_internal_set_chat_wheel_message_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.chat_wheel_message_id_ = value;
}
inline void CMsgShowcaseItem_ChatWheel::set_chat_wheel_message_id(uint32_t value) {
  _internal_set_chat_wheel_message_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_ChatWheel.chat_wheel_message_id)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_Emoticon_Data

// -------------------------------------------------------------------

// CMsgShowcaseItem_Emoticon

// optional .CMsgShowcaseItem_Emoticon.Data data = 1;
inline bool CMsgShowcaseItem_Emoticon::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_Emoticon::has_data() const {
  return _internal_has_data();
}
inline void CMsgShowcaseItem_Emoticon::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseItem_Emoticon_Data& CMsgShowcaseItem_Emoticon::_internal_data() const {
  const ::CMsgShowcaseItem_Emoticon_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseItem_Emoticon_Data&>(
      ::_CMsgShowcaseItem_Emoticon_Data_default_instance_);
}
inline const ::CMsgShowcaseItem_Emoticon_Data& CMsgShowcaseItem_Emoticon::data() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Emoticon.data)
  return _internal_data();
}
inline void CMsgShowcaseItem_Emoticon::unsafe_arena_set_allocated_data(
    ::CMsgShowcaseItem_Emoticon_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_Emoticon.data)
}
inline ::CMsgShowcaseItem_Emoticon_Data* CMsgShowcaseItem_Emoticon::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_Emoticon_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseItem_Emoticon_Data* CMsgShowcaseItem_Emoticon::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_Emoticon.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_Emoticon_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseItem_Emoticon_Data* CMsgShowcaseItem_Emoticon::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseItem_Emoticon_Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::CMsgShowcaseItem_Emoticon_Data* CMsgShowcaseItem_Emoticon::mutable_data() {
  ::CMsgShowcaseItem_Emoticon_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_Emoticon.data)
  return _msg;
}
inline void CMsgShowcaseItem_Emoticon::set_allocated_data(::CMsgShowcaseItem_Emoticon_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_Emoticon.data)
}

// optional uint32 emoticon_id = 2;
inline bool CMsgShowcaseItem_Emoticon::_internal_has_emoticon_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_Emoticon::has_emoticon_id() const {
  return _internal_has_emoticon_id();
}
inline void CMsgShowcaseItem_Emoticon::clear_emoticon_id() {
  _impl_.emoticon_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgShowcaseItem_Emoticon::_internal_emoticon_id() const {
  return _impl_.emoticon_id_;
}
inline uint32_t CMsgShowcaseItem_Emoticon::emoticon_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Emoticon.emoticon_id)
  return _internal_emoticon_id();
}
inline void CMsgShowcaseItem_Emoticon::_internal_set_emoticon_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.emoticon_id_ = value;
}
inline void CMsgShowcaseItem_Emoticon::set_emoticon_id(uint32_t value) {
  _internal_set_emoticon_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_Emoticon.emoticon_id)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem_Widget_Data

// -------------------------------------------------------------------

// CMsgShowcaseItem_Widget

// optional .CMsgShowcaseItem_Widget.Data data = 1;
inline bool CMsgShowcaseItem_Widget::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem_Widget::has_data() const {
  return _internal_has_data();
}
inline void CMsgShowcaseItem_Widget::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseItem_Widget_Data& CMsgShowcaseItem_Widget::_internal_data() const {
  const ::CMsgShowcaseItem_Widget_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseItem_Widget_Data&>(
      ::_CMsgShowcaseItem_Widget_Data_default_instance_);
}
inline const ::CMsgShowcaseItem_Widget_Data& CMsgShowcaseItem_Widget::data() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Widget.data)
  return _internal_data();
}
inline void CMsgShowcaseItem_Widget::unsafe_arena_set_allocated_data(
    ::CMsgShowcaseItem_Widget_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem_Widget.data)
}
inline ::CMsgShowcaseItem_Widget_Data* CMsgShowcaseItem_Widget::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_Widget_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseItem_Widget_Data* CMsgShowcaseItem_Widget::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem_Widget.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem_Widget_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseItem_Widget_Data* CMsgShowcaseItem_Widget::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseItem_Widget_Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::CMsgShowcaseItem_Widget_Data* CMsgShowcaseItem_Widget::mutable_data() {
  ::CMsgShowcaseItem_Widget_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem_Widget.data)
  return _msg;
}
inline void CMsgShowcaseItem_Widget::set_allocated_data(::CMsgShowcaseItem_Widget_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem_Widget.data)
}

// optional .CMsgShowcaseItem_Widget.EWidget widget = 2 [default = kSpiderGraph];
inline bool CMsgShowcaseItem_Widget::_internal_has_widget() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcaseItem_Widget::has_widget() const {
  return _internal_has_widget();
}
inline void CMsgShowcaseItem_Widget::clear_widget() {
  _impl_.widget_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgShowcaseItem_Widget_EWidget CMsgShowcaseItem_Widget::_internal_widget() const {
  return static_cast< ::CMsgShowcaseItem_Widget_EWidget >(_impl_.widget_);
}
inline ::CMsgShowcaseItem_Widget_EWidget CMsgShowcaseItem_Widget::widget() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem_Widget.widget)
  return _internal_widget();
}
inline void CMsgShowcaseItem_Widget::_internal_set_widget(::CMsgShowcaseItem_Widget_EWidget value) {
  assert(::CMsgShowcaseItem_Widget_EWidget_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.widget_ = value;
}
inline void CMsgShowcaseItem_Widget::set_widget(::CMsgShowcaseItem_Widget_EWidget value) {
  _internal_set_widget(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem_Widget.widget)
}

// -------------------------------------------------------------------

// CMsgShowcaseBackground_Data

// optional .CSOEconItem loading_screen = 1;
inline bool CMsgShowcaseBackground_Data::_internal_has_loading_screen() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.loading_screen_ != nullptr);
  return value;
}
inline bool CMsgShowcaseBackground_Data::has_loading_screen() const {
  return _internal_has_loading_screen();
}
inline const ::CSOEconItem& CMsgShowcaseBackground_Data::_internal_loading_screen() const {
  const ::CSOEconItem* p = _impl_.loading_screen_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSOEconItem&>(
      ::_CSOEconItem_default_instance_);
}
inline const ::CSOEconItem& CMsgShowcaseBackground_Data::loading_screen() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseBackground.Data.loading_screen)
  return _internal_loading_screen();
}
inline void CMsgShowcaseBackground_Data::unsafe_arena_set_allocated_loading_screen(
    ::CSOEconItem* loading_screen) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.loading_screen_);
  }
  _impl_.loading_screen_ = loading_screen;
  if (loading_screen) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseBackground.Data.loading_screen)
}
inline ::CSOEconItem* CMsgShowcaseBackground_Data::release_loading_screen() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CSOEconItem* temp = _impl_.loading_screen_;
  _impl_.loading_screen_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSOEconItem* CMsgShowcaseBackground_Data::unsafe_arena_release_loading_screen() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseBackground.Data.loading_screen)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CSOEconItem* temp = _impl_.loading_screen_;
  _impl_.loading_screen_ = nullptr;
  return temp;
}
inline ::CSOEconItem* CMsgShowcaseBackground_Data::_internal_mutable_loading_screen() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.loading_screen_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSOEconItem>(GetArenaForAllocation());
    _impl_.loading_screen_ = p;
  }
  return _impl_.loading_screen_;
}
inline ::CSOEconItem* CMsgShowcaseBackground_Data::mutable_loading_screen() {
  ::CSOEconItem* _msg = _internal_mutable_loading_screen();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseBackground.Data.loading_screen)
  return _msg;
}
inline void CMsgShowcaseBackground_Data::set_allocated_loading_screen(::CSOEconItem* loading_screen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.loading_screen_);
  }
  if (loading_screen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loading_screen));
    if (message_arena != submessage_arena) {
      loading_screen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loading_screen, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.loading_screen_ = loading_screen;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseBackground.Data.loading_screen)
}

// -------------------------------------------------------------------

// CMsgShowcaseBackground

// optional .CMsgShowcaseBackground.Data data = 1;
inline bool CMsgShowcaseBackground::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool CMsgShowcaseBackground::has_data() const {
  return _internal_has_data();
}
inline void CMsgShowcaseBackground::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseBackground_Data& CMsgShowcaseBackground::_internal_data() const {
  const ::CMsgShowcaseBackground_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseBackground_Data&>(
      ::_CMsgShowcaseBackground_Data_default_instance_);
}
inline const ::CMsgShowcaseBackground_Data& CMsgShowcaseBackground::data() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseBackground.data)
  return _internal_data();
}
inline void CMsgShowcaseBackground::unsafe_arena_set_allocated_data(
    ::CMsgShowcaseBackground_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseBackground.data)
}
inline ::CMsgShowcaseBackground_Data* CMsgShowcaseBackground::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseBackground_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseBackground_Data* CMsgShowcaseBackground::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseBackground.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseBackground_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseBackground_Data* CMsgShowcaseBackground::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseBackground_Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::CMsgShowcaseBackground_Data* CMsgShowcaseBackground::mutable_data() {
  ::CMsgShowcaseBackground_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseBackground.data)
  return _msg;
}
inline void CMsgShowcaseBackground::set_allocated_data(::CMsgShowcaseBackground_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseBackground.data)
}

// optional .CMsgShowcaseEconItemReference loading_screen_ref = 2;
inline bool CMsgShowcaseBackground::_internal_has_loading_screen_ref() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.loading_screen_ref_ != nullptr);
  return value;
}
inline bool CMsgShowcaseBackground::has_loading_screen_ref() const {
  return _internal_has_loading_screen_ref();
}
inline void CMsgShowcaseBackground::clear_loading_screen_ref() {
  if (_impl_.loading_screen_ref_ != nullptr) _impl_.loading_screen_ref_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgShowcaseEconItemReference& CMsgShowcaseBackground::_internal_loading_screen_ref() const {
  const ::CMsgShowcaseEconItemReference* p = _impl_.loading_screen_ref_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseEconItemReference&>(
      ::_CMsgShowcaseEconItemReference_default_instance_);
}
inline const ::CMsgShowcaseEconItemReference& CMsgShowcaseBackground::loading_screen_ref() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseBackground.loading_screen_ref)
  return _internal_loading_screen_ref();
}
inline void CMsgShowcaseBackground::unsafe_arena_set_allocated_loading_screen_ref(
    ::CMsgShowcaseEconItemReference* loading_screen_ref) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.loading_screen_ref_);
  }
  _impl_.loading_screen_ref_ = loading_screen_ref;
  if (loading_screen_ref) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseBackground.loading_screen_ref)
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseBackground::release_loading_screen_ref() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgShowcaseEconItemReference* temp = _impl_.loading_screen_ref_;
  _impl_.loading_screen_ref_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseBackground::unsafe_arena_release_loading_screen_ref() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseBackground.loading_screen_ref)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgShowcaseEconItemReference* temp = _impl_.loading_screen_ref_;
  _impl_.loading_screen_ref_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseBackground::_internal_mutable_loading_screen_ref() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.loading_screen_ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseEconItemReference>(GetArenaForAllocation());
    _impl_.loading_screen_ref_ = p;
  }
  return _impl_.loading_screen_ref_;
}
inline ::CMsgShowcaseEconItemReference* CMsgShowcaseBackground::mutable_loading_screen_ref() {
  ::CMsgShowcaseEconItemReference* _msg = _internal_mutable_loading_screen_ref();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseBackground.loading_screen_ref)
  return _msg;
}
inline void CMsgShowcaseBackground::set_allocated_loading_screen_ref(::CMsgShowcaseEconItemReference* loading_screen_ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.loading_screen_ref_;
  }
  if (loading_screen_ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(loading_screen_ref);
    if (message_arena != submessage_arena) {
      loading_screen_ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loading_screen_ref, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.loading_screen_ref_ = loading_screen_ref;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseBackground.loading_screen_ref)
}

// -------------------------------------------------------------------

// CMsgShowcaseItemData

// .CMsgShowcaseItem_Trophy trophy = 1;
inline bool CMsgShowcaseItemData::_internal_has_trophy() const {
  return item_case() == kTrophy;
}
inline bool CMsgShowcaseItemData::has_trophy() const {
  return _internal_has_trophy();
}
inline void CMsgShowcaseItemData::set_has_trophy() {
  _impl_._oneof_case_[0] = kTrophy;
}
inline void CMsgShowcaseItemData::clear_trophy() {
  if (_internal_has_trophy()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.trophy_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_Trophy* CMsgShowcaseItemData::release_trophy() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.trophy)
  if (_internal_has_trophy()) {
    clear_has_item();
    ::CMsgShowcaseItem_Trophy* temp = _impl_.item_.trophy_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.trophy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_Trophy& CMsgShowcaseItemData::_internal_trophy() const {
  return _internal_has_trophy()
      ? *_impl_.item_.trophy_
      : reinterpret_cast< ::CMsgShowcaseItem_Trophy&>(::_CMsgShowcaseItem_Trophy_default_instance_);
}
inline const ::CMsgShowcaseItem_Trophy& CMsgShowcaseItemData::trophy() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.trophy)
  return _internal_trophy();
}
inline ::CMsgShowcaseItem_Trophy* CMsgShowcaseItemData::unsafe_arena_release_trophy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.trophy)
  if (_internal_has_trophy()) {
    clear_has_item();
    ::CMsgShowcaseItem_Trophy* temp = _impl_.item_.trophy_;
    _impl_.item_.trophy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_trophy(::CMsgShowcaseItem_Trophy* trophy) {
  clear_item();
  if (trophy) {
    set_has_trophy();
    _impl_.item_.trophy_ = trophy;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.trophy)
}
inline ::CMsgShowcaseItem_Trophy* CMsgShowcaseItemData::_internal_mutable_trophy() {
  if (!_internal_has_trophy()) {
    clear_item();
    set_has_trophy();
    _impl_.item_.trophy_ = CreateMaybeMessage< ::CMsgShowcaseItem_Trophy >(GetArenaForAllocation());
  }
  return _impl_.item_.trophy_;
}
inline ::CMsgShowcaseItem_Trophy* CMsgShowcaseItemData::mutable_trophy() {
  ::CMsgShowcaseItem_Trophy* _msg = _internal_mutable_trophy();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.trophy)
  return _msg;
}

// .CMsgShowcaseItem_EconItem econ_item_icon = 2;
inline bool CMsgShowcaseItemData::_internal_has_econ_item_icon() const {
  return item_case() == kEconItemIcon;
}
inline bool CMsgShowcaseItemData::has_econ_item_icon() const {
  return _internal_has_econ_item_icon();
}
inline void CMsgShowcaseItemData::set_has_econ_item_icon() {
  _impl_._oneof_case_[0] = kEconItemIcon;
}
inline void CMsgShowcaseItemData::clear_econ_item_icon() {
  if (_internal_has_econ_item_icon()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.econ_item_icon_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::release_econ_item_icon() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.econ_item_icon)
  if (_internal_has_econ_item_icon()) {
    clear_has_item();
    ::CMsgShowcaseItem_EconItem* temp = _impl_.item_.econ_item_icon_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.econ_item_icon_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_EconItem& CMsgShowcaseItemData::_internal_econ_item_icon() const {
  return _internal_has_econ_item_icon()
      ? *_impl_.item_.econ_item_icon_
      : reinterpret_cast< ::CMsgShowcaseItem_EconItem&>(::_CMsgShowcaseItem_EconItem_default_instance_);
}
inline const ::CMsgShowcaseItem_EconItem& CMsgShowcaseItemData::econ_item_icon() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.econ_item_icon)
  return _internal_econ_item_icon();
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::unsafe_arena_release_econ_item_icon() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.econ_item_icon)
  if (_internal_has_econ_item_icon()) {
    clear_has_item();
    ::CMsgShowcaseItem_EconItem* temp = _impl_.item_.econ_item_icon_;
    _impl_.item_.econ_item_icon_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_econ_item_icon(::CMsgShowcaseItem_EconItem* econ_item_icon) {
  clear_item();
  if (econ_item_icon) {
    set_has_econ_item_icon();
    _impl_.item_.econ_item_icon_ = econ_item_icon;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.econ_item_icon)
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::_internal_mutable_econ_item_icon() {
  if (!_internal_has_econ_item_icon()) {
    clear_item();
    set_has_econ_item_icon();
    _impl_.item_.econ_item_icon_ = CreateMaybeMessage< ::CMsgShowcaseItem_EconItem >(GetArenaForAllocation());
  }
  return _impl_.item_.econ_item_icon_;
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::mutable_econ_item_icon() {
  ::CMsgShowcaseItem_EconItem* _msg = _internal_mutable_econ_item_icon();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.econ_item_icon)
  return _msg;
}

// .CMsgShowcaseItem_EconItem sticker = 3;
inline bool CMsgShowcaseItemData::_internal_has_sticker() const {
  return item_case() == kSticker;
}
inline bool CMsgShowcaseItemData::has_sticker() const {
  return _internal_has_sticker();
}
inline void CMsgShowcaseItemData::set_has_sticker() {
  _impl_._oneof_case_[0] = kSticker;
}
inline void CMsgShowcaseItemData::clear_sticker() {
  if (_internal_has_sticker()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.sticker_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::release_sticker() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.sticker)
  if (_internal_has_sticker()) {
    clear_has_item();
    ::CMsgShowcaseItem_EconItem* temp = _impl_.item_.sticker_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.sticker_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_EconItem& CMsgShowcaseItemData::_internal_sticker() const {
  return _internal_has_sticker()
      ? *_impl_.item_.sticker_
      : reinterpret_cast< ::CMsgShowcaseItem_EconItem&>(::_CMsgShowcaseItem_EconItem_default_instance_);
}
inline const ::CMsgShowcaseItem_EconItem& CMsgShowcaseItemData::sticker() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.sticker)
  return _internal_sticker();
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::unsafe_arena_release_sticker() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.sticker)
  if (_internal_has_sticker()) {
    clear_has_item();
    ::CMsgShowcaseItem_EconItem* temp = _impl_.item_.sticker_;
    _impl_.item_.sticker_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_sticker(::CMsgShowcaseItem_EconItem* sticker) {
  clear_item();
  if (sticker) {
    set_has_sticker();
    _impl_.item_.sticker_ = sticker;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.sticker)
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::_internal_mutable_sticker() {
  if (!_internal_has_sticker()) {
    clear_item();
    set_has_sticker();
    _impl_.item_.sticker_ = CreateMaybeMessage< ::CMsgShowcaseItem_EconItem >(GetArenaForAllocation());
  }
  return _impl_.item_.sticker_;
}
inline ::CMsgShowcaseItem_EconItem* CMsgShowcaseItemData::mutable_sticker() {
  ::CMsgShowcaseItem_EconItem* _msg = _internal_mutable_sticker();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.sticker)
  return _msg;
}

// .CMsgShowcaseItem_Hero hero_model = 4;
inline bool CMsgShowcaseItemData::_internal_has_hero_model() const {
  return item_case() == kHeroModel;
}
inline bool CMsgShowcaseItemData::has_hero_model() const {
  return _internal_has_hero_model();
}
inline void CMsgShowcaseItemData::set_has_hero_model() {
  _impl_._oneof_case_[0] = kHeroModel;
}
inline void CMsgShowcaseItemData::clear_hero_model() {
  if (_internal_has_hero_model()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.hero_model_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_Hero* CMsgShowcaseItemData::release_hero_model() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.hero_model)
  if (_internal_has_hero_model()) {
    clear_has_item();
    ::CMsgShowcaseItem_Hero* temp = _impl_.item_.hero_model_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.hero_model_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_Hero& CMsgShowcaseItemData::_internal_hero_model() const {
  return _internal_has_hero_model()
      ? *_impl_.item_.hero_model_
      : reinterpret_cast< ::CMsgShowcaseItem_Hero&>(::_CMsgShowcaseItem_Hero_default_instance_);
}
inline const ::CMsgShowcaseItem_Hero& CMsgShowcaseItemData::hero_model() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.hero_model)
  return _internal_hero_model();
}
inline ::CMsgShowcaseItem_Hero* CMsgShowcaseItemData::unsafe_arena_release_hero_model() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.hero_model)
  if (_internal_has_hero_model()) {
    clear_has_item();
    ::CMsgShowcaseItem_Hero* temp = _impl_.item_.hero_model_;
    _impl_.item_.hero_model_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_hero_model(::CMsgShowcaseItem_Hero* hero_model) {
  clear_item();
  if (hero_model) {
    set_has_hero_model();
    _impl_.item_.hero_model_ = hero_model;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.hero_model)
}
inline ::CMsgShowcaseItem_Hero* CMsgShowcaseItemData::_internal_mutable_hero_model() {
  if (!_internal_has_hero_model()) {
    clear_item();
    set_has_hero_model();
    _impl_.item_.hero_model_ = CreateMaybeMessage< ::CMsgShowcaseItem_Hero >(GetArenaForAllocation());
  }
  return _impl_.item_.hero_model_;
}
inline ::CMsgShowcaseItem_Hero* CMsgShowcaseItemData::mutable_hero_model() {
  ::CMsgShowcaseItem_Hero* _msg = _internal_mutable_hero_model();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.hero_model)
  return _msg;
}

// .CMsgShowcaseItem_PlayerMatch player_match = 5;
inline bool CMsgShowcaseItemData::_internal_has_player_match() const {
  return item_case() == kPlayerMatch;
}
inline bool CMsgShowcaseItemData::has_player_match() const {
  return _internal_has_player_match();
}
inline void CMsgShowcaseItemData::set_has_player_match() {
  _impl_._oneof_case_[0] = kPlayerMatch;
}
inline void CMsgShowcaseItemData::clear_player_match() {
  if (_internal_has_player_match()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.player_match_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_PlayerMatch* CMsgShowcaseItemData::release_player_match() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.player_match)
  if (_internal_has_player_match()) {
    clear_has_item();
    ::CMsgShowcaseItem_PlayerMatch* temp = _impl_.item_.player_match_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.player_match_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_PlayerMatch& CMsgShowcaseItemData::_internal_player_match() const {
  return _internal_has_player_match()
      ? *_impl_.item_.player_match_
      : reinterpret_cast< ::CMsgShowcaseItem_PlayerMatch&>(::_CMsgShowcaseItem_PlayerMatch_default_instance_);
}
inline const ::CMsgShowcaseItem_PlayerMatch& CMsgShowcaseItemData::player_match() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.player_match)
  return _internal_player_match();
}
inline ::CMsgShowcaseItem_PlayerMatch* CMsgShowcaseItemData::unsafe_arena_release_player_match() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.player_match)
  if (_internal_has_player_match()) {
    clear_has_item();
    ::CMsgShowcaseItem_PlayerMatch* temp = _impl_.item_.player_match_;
    _impl_.item_.player_match_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_player_match(::CMsgShowcaseItem_PlayerMatch* player_match) {
  clear_item();
  if (player_match) {
    set_has_player_match();
    _impl_.item_.player_match_ = player_match;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.player_match)
}
inline ::CMsgShowcaseItem_PlayerMatch* CMsgShowcaseItemData::_internal_mutable_player_match() {
  if (!_internal_has_player_match()) {
    clear_item();
    set_has_player_match();
    _impl_.item_.player_match_ = CreateMaybeMessage< ::CMsgShowcaseItem_PlayerMatch >(GetArenaForAllocation());
  }
  return _impl_.item_.player_match_;
}
inline ::CMsgShowcaseItem_PlayerMatch* CMsgShowcaseItemData::mutable_player_match() {
  ::CMsgShowcaseItem_PlayerMatch* _msg = _internal_mutable_player_match();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.player_match)
  return _msg;
}

// .CMsgShowcaseItem_ChatWheel chat_wheel = 6;
inline bool CMsgShowcaseItemData::_internal_has_chat_wheel() const {
  return item_case() == kChatWheel;
}
inline bool CMsgShowcaseItemData::has_chat_wheel() const {
  return _internal_has_chat_wheel();
}
inline void CMsgShowcaseItemData::set_has_chat_wheel() {
  _impl_._oneof_case_[0] = kChatWheel;
}
inline void CMsgShowcaseItemData::clear_chat_wheel() {
  if (_internal_has_chat_wheel()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.chat_wheel_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_ChatWheel* CMsgShowcaseItemData::release_chat_wheel() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.chat_wheel)
  if (_internal_has_chat_wheel()) {
    clear_has_item();
    ::CMsgShowcaseItem_ChatWheel* temp = _impl_.item_.chat_wheel_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.chat_wheel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_ChatWheel& CMsgShowcaseItemData::_internal_chat_wheel() const {
  return _internal_has_chat_wheel()
      ? *_impl_.item_.chat_wheel_
      : reinterpret_cast< ::CMsgShowcaseItem_ChatWheel&>(::_CMsgShowcaseItem_ChatWheel_default_instance_);
}
inline const ::CMsgShowcaseItem_ChatWheel& CMsgShowcaseItemData::chat_wheel() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.chat_wheel)
  return _internal_chat_wheel();
}
inline ::CMsgShowcaseItem_ChatWheel* CMsgShowcaseItemData::unsafe_arena_release_chat_wheel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.chat_wheel)
  if (_internal_has_chat_wheel()) {
    clear_has_item();
    ::CMsgShowcaseItem_ChatWheel* temp = _impl_.item_.chat_wheel_;
    _impl_.item_.chat_wheel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_chat_wheel(::CMsgShowcaseItem_ChatWheel* chat_wheel) {
  clear_item();
  if (chat_wheel) {
    set_has_chat_wheel();
    _impl_.item_.chat_wheel_ = chat_wheel;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.chat_wheel)
}
inline ::CMsgShowcaseItem_ChatWheel* CMsgShowcaseItemData::_internal_mutable_chat_wheel() {
  if (!_internal_has_chat_wheel()) {
    clear_item();
    set_has_chat_wheel();
    _impl_.item_.chat_wheel_ = CreateMaybeMessage< ::CMsgShowcaseItem_ChatWheel >(GetArenaForAllocation());
  }
  return _impl_.item_.chat_wheel_;
}
inline ::CMsgShowcaseItem_ChatWheel* CMsgShowcaseItemData::mutable_chat_wheel() {
  ::CMsgShowcaseItem_ChatWheel* _msg = _internal_mutable_chat_wheel();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.chat_wheel)
  return _msg;
}

// .CMsgShowcaseItem_ChatWheel spray = 7;
inline bool CMsgShowcaseItemData::_internal_has_spray() const {
  return item_case() == kSpray;
}
inline bool CMsgShowcaseItemData::has_spray() const {
  return _internal_has_spray();
}
inline void CMsgShowcaseItemData::set_has_spray() {
  _impl_._oneof_case_[0] = kSpray;
}
inline void CMsgShowcaseItemData::clear_spray() {
  if (_internal_has_spray()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.spray_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_ChatWheel* CMsgShowcaseItemData::release_spray() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.spray)
  if (_internal_has_spray()) {
    clear_has_item();
    ::CMsgShowcaseItem_ChatWheel* temp = _impl_.item_.spray_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.spray_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_ChatWheel& CMsgShowcaseItemData::_internal_spray() const {
  return _internal_has_spray()
      ? *_impl_.item_.spray_
      : reinterpret_cast< ::CMsgShowcaseItem_ChatWheel&>(::_CMsgShowcaseItem_ChatWheel_default_instance_);
}
inline const ::CMsgShowcaseItem_ChatWheel& CMsgShowcaseItemData::spray() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.spray)
  return _internal_spray();
}
inline ::CMsgShowcaseItem_ChatWheel* CMsgShowcaseItemData::unsafe_arena_release_spray() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.spray)
  if (_internal_has_spray()) {
    clear_has_item();
    ::CMsgShowcaseItem_ChatWheel* temp = _impl_.item_.spray_;
    _impl_.item_.spray_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_spray(::CMsgShowcaseItem_ChatWheel* spray) {
  clear_item();
  if (spray) {
    set_has_spray();
    _impl_.item_.spray_ = spray;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.spray)
}
inline ::CMsgShowcaseItem_ChatWheel* CMsgShowcaseItemData::_internal_mutable_spray() {
  if (!_internal_has_spray()) {
    clear_item();
    set_has_spray();
    _impl_.item_.spray_ = CreateMaybeMessage< ::CMsgShowcaseItem_ChatWheel >(GetArenaForAllocation());
  }
  return _impl_.item_.spray_;
}
inline ::CMsgShowcaseItem_ChatWheel* CMsgShowcaseItemData::mutable_spray() {
  ::CMsgShowcaseItem_ChatWheel* _msg = _internal_mutable_spray();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.spray)
  return _msg;
}

// .CMsgShowcaseItem_Emoticon emoticon = 8;
inline bool CMsgShowcaseItemData::_internal_has_emoticon() const {
  return item_case() == kEmoticon;
}
inline bool CMsgShowcaseItemData::has_emoticon() const {
  return _internal_has_emoticon();
}
inline void CMsgShowcaseItemData::set_has_emoticon() {
  _impl_._oneof_case_[0] = kEmoticon;
}
inline void CMsgShowcaseItemData::clear_emoticon() {
  if (_internal_has_emoticon()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.emoticon_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_Emoticon* CMsgShowcaseItemData::release_emoticon() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.emoticon)
  if (_internal_has_emoticon()) {
    clear_has_item();
    ::CMsgShowcaseItem_Emoticon* temp = _impl_.item_.emoticon_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.emoticon_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_Emoticon& CMsgShowcaseItemData::_internal_emoticon() const {
  return _internal_has_emoticon()
      ? *_impl_.item_.emoticon_
      : reinterpret_cast< ::CMsgShowcaseItem_Emoticon&>(::_CMsgShowcaseItem_Emoticon_default_instance_);
}
inline const ::CMsgShowcaseItem_Emoticon& CMsgShowcaseItemData::emoticon() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.emoticon)
  return _internal_emoticon();
}
inline ::CMsgShowcaseItem_Emoticon* CMsgShowcaseItemData::unsafe_arena_release_emoticon() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.emoticon)
  if (_internal_has_emoticon()) {
    clear_has_item();
    ::CMsgShowcaseItem_Emoticon* temp = _impl_.item_.emoticon_;
    _impl_.item_.emoticon_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_emoticon(::CMsgShowcaseItem_Emoticon* emoticon) {
  clear_item();
  if (emoticon) {
    set_has_emoticon();
    _impl_.item_.emoticon_ = emoticon;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.emoticon)
}
inline ::CMsgShowcaseItem_Emoticon* CMsgShowcaseItemData::_internal_mutable_emoticon() {
  if (!_internal_has_emoticon()) {
    clear_item();
    set_has_emoticon();
    _impl_.item_.emoticon_ = CreateMaybeMessage< ::CMsgShowcaseItem_Emoticon >(GetArenaForAllocation());
  }
  return _impl_.item_.emoticon_;
}
inline ::CMsgShowcaseItem_Emoticon* CMsgShowcaseItemData::mutable_emoticon() {
  ::CMsgShowcaseItem_Emoticon* _msg = _internal_mutable_emoticon();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.emoticon)
  return _msg;
}

// .CMsgShowcaseItem_Widget widget = 9;
inline bool CMsgShowcaseItemData::_internal_has_widget() const {
  return item_case() == kWidget;
}
inline bool CMsgShowcaseItemData::has_widget() const {
  return _internal_has_widget();
}
inline void CMsgShowcaseItemData::set_has_widget() {
  _impl_._oneof_case_[0] = kWidget;
}
inline void CMsgShowcaseItemData::clear_widget() {
  if (_internal_has_widget()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.widget_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseItem_Widget* CMsgShowcaseItemData::release_widget() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.widget)
  if (_internal_has_widget()) {
    clear_has_item();
    ::CMsgShowcaseItem_Widget* temp = _impl_.item_.widget_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.widget_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseItem_Widget& CMsgShowcaseItemData::_internal_widget() const {
  return _internal_has_widget()
      ? *_impl_.item_.widget_
      : reinterpret_cast< ::CMsgShowcaseItem_Widget&>(::_CMsgShowcaseItem_Widget_default_instance_);
}
inline const ::CMsgShowcaseItem_Widget& CMsgShowcaseItemData::widget() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.widget)
  return _internal_widget();
}
inline ::CMsgShowcaseItem_Widget* CMsgShowcaseItemData::unsafe_arena_release_widget() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.widget)
  if (_internal_has_widget()) {
    clear_has_item();
    ::CMsgShowcaseItem_Widget* temp = _impl_.item_.widget_;
    _impl_.item_.widget_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_widget(::CMsgShowcaseItem_Widget* widget) {
  clear_item();
  if (widget) {
    set_has_widget();
    _impl_.item_.widget_ = widget;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.widget)
}
inline ::CMsgShowcaseItem_Widget* CMsgShowcaseItemData::_internal_mutable_widget() {
  if (!_internal_has_widget()) {
    clear_item();
    set_has_widget();
    _impl_.item_.widget_ = CreateMaybeMessage< ::CMsgShowcaseItem_Widget >(GetArenaForAllocation());
  }
  return _impl_.item_.widget_;
}
inline ::CMsgShowcaseItem_Widget* CMsgShowcaseItemData::mutable_widget() {
  ::CMsgShowcaseItem_Widget* _msg = _internal_mutable_widget();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.widget)
  return _msg;
}

// .CMsgShowcaseBackground background = 100;
inline bool CMsgShowcaseItemData::_internal_has_background() const {
  return item_case() == kBackground;
}
inline bool CMsgShowcaseItemData::has_background() const {
  return _internal_has_background();
}
inline void CMsgShowcaseItemData::set_has_background() {
  _impl_._oneof_case_[0] = kBackground;
}
inline void CMsgShowcaseItemData::clear_background() {
  if (_internal_has_background()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.background_;
    }
    clear_has_item();
  }
}
inline ::CMsgShowcaseBackground* CMsgShowcaseItemData::release_background() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItemData.background)
  if (_internal_has_background()) {
    clear_has_item();
    ::CMsgShowcaseBackground* temp = _impl_.item_.background_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.background_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgShowcaseBackground& CMsgShowcaseItemData::_internal_background() const {
  return _internal_has_background()
      ? *_impl_.item_.background_
      : reinterpret_cast< ::CMsgShowcaseBackground&>(::_CMsgShowcaseBackground_default_instance_);
}
inline const ::CMsgShowcaseBackground& CMsgShowcaseItemData::background() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemData.background)
  return _internal_background();
}
inline ::CMsgShowcaseBackground* CMsgShowcaseItemData::unsafe_arena_release_background() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgShowcaseItemData.background)
  if (_internal_has_background()) {
    clear_has_item();
    ::CMsgShowcaseBackground* temp = _impl_.item_.background_;
    _impl_.item_.background_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgShowcaseItemData::unsafe_arena_set_allocated_background(::CMsgShowcaseBackground* background) {
  clear_item();
  if (background) {
    set_has_background();
    _impl_.item_.background_ = background;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItemData.background)
}
inline ::CMsgShowcaseBackground* CMsgShowcaseItemData::_internal_mutable_background() {
  if (!_internal_has_background()) {
    clear_item();
    set_has_background();
    _impl_.item_.background_ = CreateMaybeMessage< ::CMsgShowcaseBackground >(GetArenaForAllocation());
  }
  return _impl_.item_.background_;
}
inline ::CMsgShowcaseBackground* CMsgShowcaseItemData::mutable_background() {
  ::CMsgShowcaseBackground* _msg = _internal_mutable_background();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItemData.background)
  return _msg;
}

inline bool CMsgShowcaseItemData::has_item() const {
  return item_case() != ITEM_NOT_SET;
}
inline void CMsgShowcaseItemData::clear_has_item() {
  _impl_._oneof_case_[0] = ITEM_NOT_SET;
}
inline CMsgShowcaseItemData::ItemCase CMsgShowcaseItemData::item_case() const {
  return CMsgShowcaseItemData::ItemCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CMsgShowcaseItemPosition

// optional int32 position_x = 1;
inline bool CMsgShowcaseItemPosition::_internal_has_position_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgShowcaseItemPosition::has_position_x() const {
  return _internal_has_position_x();
}
inline void CMsgShowcaseItemPosition::clear_position_x() {
  _impl_.position_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgShowcaseItemPosition::_internal_position_x() const {
  return _impl_.position_x_;
}
inline int32_t CMsgShowcaseItemPosition::position_x() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemPosition.position_x)
  return _internal_position_x();
}
inline void CMsgShowcaseItemPosition::_internal_set_position_x(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.position_x_ = value;
}
inline void CMsgShowcaseItemPosition::set_position_x(int32_t value) {
  _internal_set_position_x(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItemPosition.position_x)
}

// optional int32 position_y = 2;
inline bool CMsgShowcaseItemPosition::_internal_has_position_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowcaseItemPosition::has_position_y() const {
  return _internal_has_position_y();
}
inline void CMsgShowcaseItemPosition::clear_position_y() {
  _impl_.position_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgShowcaseItemPosition::_internal_position_y() const {
  return _impl_.position_y_;
}
inline int32_t CMsgShowcaseItemPosition::position_y() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemPosition.position_y)
  return _internal_position_y();
}
inline void CMsgShowcaseItemPosition::_internal_set_position_y(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.position_y_ = value;
}
inline void CMsgShowcaseItemPosition::set_position_y(int32_t value) {
  _internal_set_position_y(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItemPosition.position_y)
}

// optional uint32 scale = 3;
inline bool CMsgShowcaseItemPosition::_internal_has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgShowcaseItemPosition::has_scale() const {
  return _internal_has_scale();
}
inline void CMsgShowcaseItemPosition::clear_scale() {
  _impl_.scale_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgShowcaseItemPosition::_internal_scale() const {
  return _impl_.scale_;
}
inline uint32_t CMsgShowcaseItemPosition::scale() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItemPosition.scale)
  return _internal_scale();
}
inline void CMsgShowcaseItemPosition::_internal_set_scale(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.scale_ = value;
}
inline void CMsgShowcaseItemPosition::set_scale(uint32_t value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItemPosition.scale)
}

// -------------------------------------------------------------------

// CMsgShowcaseItem

// optional uint32 showcase_item_id = 1;
inline bool CMsgShowcaseItem::_internal_has_showcase_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgShowcaseItem::has_showcase_item_id() const {
  return _internal_has_showcase_item_id();
}
inline void CMsgShowcaseItem::clear_showcase_item_id() {
  _impl_.showcase_item_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgShowcaseItem::_internal_showcase_item_id() const {
  return _impl_.showcase_item_id_;
}
inline uint32_t CMsgShowcaseItem::showcase_item_id() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem.showcase_item_id)
  return _internal_showcase_item_id();
}
inline void CMsgShowcaseItem::_internal_set_showcase_item_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.showcase_item_id_ = value;
}
inline void CMsgShowcaseItem::set_showcase_item_id(uint32_t value) {
  _internal_set_showcase_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem.showcase_item_id)
}

// optional .CMsgShowcaseItemPosition item_position = 2;
inline bool CMsgShowcaseItem::_internal_has_item_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.item_position_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem::has_item_position() const {
  return _internal_has_item_position();
}
inline void CMsgShowcaseItem::clear_item_position() {
  if (_impl_.item_position_ != nullptr) _impl_.item_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseItemPosition& CMsgShowcaseItem::_internal_item_position() const {
  const ::CMsgShowcaseItemPosition* p = _impl_.item_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseItemPosition&>(
      ::_CMsgShowcaseItemPosition_default_instance_);
}
inline const ::CMsgShowcaseItemPosition& CMsgShowcaseItem::item_position() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem.item_position)
  return _internal_item_position();
}
inline void CMsgShowcaseItem::unsafe_arena_set_allocated_item_position(
    ::CMsgShowcaseItemPosition* item_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_position_);
  }
  _impl_.item_position_ = item_position;
  if (item_position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem.item_position)
}
inline ::CMsgShowcaseItemPosition* CMsgShowcaseItem::release_item_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItemPosition* temp = _impl_.item_position_;
  _impl_.item_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseItemPosition* CMsgShowcaseItem::unsafe_arena_release_item_position() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem.item_position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItemPosition* temp = _impl_.item_position_;
  _impl_.item_position_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseItemPosition* CMsgShowcaseItem::_internal_mutable_item_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.item_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseItemPosition>(GetArenaForAllocation());
    _impl_.item_position_ = p;
  }
  return _impl_.item_position_;
}
inline ::CMsgShowcaseItemPosition* CMsgShowcaseItem::mutable_item_position() {
  ::CMsgShowcaseItemPosition* _msg = _internal_mutable_item_position();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem.item_position)
  return _msg;
}
inline void CMsgShowcaseItem::set_allocated_item_position(::CMsgShowcaseItemPosition* item_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.item_position_;
  }
  if (item_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(item_position);
    if (message_arena != submessage_arena) {
      item_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.item_position_ = item_position;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem.item_position)
}

// optional .CMsgShowcaseItemData item_data = 3;
inline bool CMsgShowcaseItem::_internal_has_item_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.item_data_ != nullptr);
  return value;
}
inline bool CMsgShowcaseItem::has_item_data() const {
  return _internal_has_item_data();
}
inline void CMsgShowcaseItem::clear_item_data() {
  if (_impl_.item_data_ != nullptr) _impl_.item_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgShowcaseItemData& CMsgShowcaseItem::_internal_item_data() const {
  const ::CMsgShowcaseItemData* p = _impl_.item_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseItemData&>(
      ::_CMsgShowcaseItemData_default_instance_);
}
inline const ::CMsgShowcaseItemData& CMsgShowcaseItem::item_data() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem.item_data)
  return _internal_item_data();
}
inline void CMsgShowcaseItem::unsafe_arena_set_allocated_item_data(
    ::CMsgShowcaseItemData* item_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_data_);
  }
  _impl_.item_data_ = item_data;
  if (item_data) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcaseItem.item_data)
}
inline ::CMsgShowcaseItemData* CMsgShowcaseItem::release_item_data() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgShowcaseItemData* temp = _impl_.item_data_;
  _impl_.item_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseItemData* CMsgShowcaseItem::unsafe_arena_release_item_data() {
  // @@protoc_insertion_point(field_release:CMsgShowcaseItem.item_data)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgShowcaseItemData* temp = _impl_.item_data_;
  _impl_.item_data_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseItemData* CMsgShowcaseItem::_internal_mutable_item_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.item_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseItemData>(GetArenaForAllocation());
    _impl_.item_data_ = p;
  }
  return _impl_.item_data_;
}
inline ::CMsgShowcaseItemData* CMsgShowcaseItem::mutable_item_data() {
  ::CMsgShowcaseItemData* _msg = _internal_mutable_item_data();
  // @@protoc_insertion_point(field_mutable:CMsgShowcaseItem.item_data)
  return _msg;
}
inline void CMsgShowcaseItem::set_allocated_item_data(::CMsgShowcaseItemData* item_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.item_data_;
  }
  if (item_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(item_data);
    if (message_arena != submessage_arena) {
      item_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.item_data_ = item_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcaseItem.item_data)
}

// optional .EShowcaseItemState state = 4 [default = k_eShowcaseItemState_Ok];
inline bool CMsgShowcaseItem::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgShowcaseItem::has_state() const {
  return _internal_has_state();
}
inline void CMsgShowcaseItem::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::EShowcaseItemState CMsgShowcaseItem::_internal_state() const {
  return static_cast< ::EShowcaseItemState >(_impl_.state_);
}
inline ::EShowcaseItemState CMsgShowcaseItem::state() const {
  // @@protoc_insertion_point(field_get:CMsgShowcaseItem.state)
  return _internal_state();
}
inline void CMsgShowcaseItem::_internal_set_state(::EShowcaseItemState value) {
  assert(::EShowcaseItemState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.state_ = value;
}
inline void CMsgShowcaseItem::set_state(::EShowcaseItemState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CMsgShowcaseItem.state)
}

// -------------------------------------------------------------------

// CMsgShowcase

// repeated .CMsgShowcaseItem showcase_items = 1;
inline int CMsgShowcase::_internal_showcase_items_size() const {
  return _impl_.showcase_items_.size();
}
inline int CMsgShowcase::showcase_items_size() const {
  return _internal_showcase_items_size();
}
inline void CMsgShowcase::clear_showcase_items() {
  _impl_.showcase_items_.Clear();
}
inline ::CMsgShowcaseItem* CMsgShowcase::mutable_showcase_items(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgShowcase.showcase_items)
  return _impl_.showcase_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseItem >*
CMsgShowcase::mutable_showcase_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgShowcase.showcase_items)
  return &_impl_.showcase_items_;
}
inline const ::CMsgShowcaseItem& CMsgShowcase::_internal_showcase_items(int index) const {
  return _impl_.showcase_items_.Get(index);
}
inline const ::CMsgShowcaseItem& CMsgShowcase::showcase_items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgShowcase.showcase_items)
  return _internal_showcase_items(index);
}
inline ::CMsgShowcaseItem* CMsgShowcase::_internal_add_showcase_items() {
  return _impl_.showcase_items_.Add();
}
inline ::CMsgShowcaseItem* CMsgShowcase::add_showcase_items() {
  ::CMsgShowcaseItem* _add = _internal_add_showcase_items();
  // @@protoc_insertion_point(field_add:CMsgShowcase.showcase_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowcaseItem >&
CMsgShowcase::showcase_items() const {
  // @@protoc_insertion_point(field_list:CMsgShowcase.showcase_items)
  return _impl_.showcase_items_;
}

// optional .CMsgShowcaseItem background = 3;
inline bool CMsgShowcase::_internal_has_background() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.background_ != nullptr);
  return value;
}
inline bool CMsgShowcase::has_background() const {
  return _internal_has_background();
}
inline void CMsgShowcase::clear_background() {
  if (_impl_.background_ != nullptr) _impl_.background_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcaseItem& CMsgShowcase::_internal_background() const {
  const ::CMsgShowcaseItem* p = _impl_.background_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcaseItem&>(
      ::_CMsgShowcaseItem_default_instance_);
}
inline const ::CMsgShowcaseItem& CMsgShowcase::background() const {
  // @@protoc_insertion_point(field_get:CMsgShowcase.background)
  return _internal_background();
}
inline void CMsgShowcase::unsafe_arena_set_allocated_background(
    ::CMsgShowcaseItem* background) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.background_);
  }
  _impl_.background_ = background;
  if (background) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgShowcase.background)
}
inline ::CMsgShowcaseItem* CMsgShowcase::release_background() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem* temp = _impl_.background_;
  _impl_.background_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcaseItem* CMsgShowcase::unsafe_arena_release_background() {
  // @@protoc_insertion_point(field_release:CMsgShowcase.background)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcaseItem* temp = _impl_.background_;
  _impl_.background_ = nullptr;
  return temp;
}
inline ::CMsgShowcaseItem* CMsgShowcase::_internal_mutable_background() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.background_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcaseItem>(GetArenaForAllocation());
    _impl_.background_ = p;
  }
  return _impl_.background_;
}
inline ::CMsgShowcaseItem* CMsgShowcase::mutable_background() {
  ::CMsgShowcaseItem* _msg = _internal_mutable_background();
  // @@protoc_insertion_point(field_mutable:CMsgShowcase.background)
  return _msg;
}
inline void CMsgShowcase::set_allocated_background(::CMsgShowcaseItem* background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.background_;
  }
  if (background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(background);
    if (message_arena != submessage_arena) {
      background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.background_ = background;
  // @@protoc_insertion_point(field_set_allocated:CMsgShowcase.background)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseGetUserData

// optional uint32 account_id = 1;
inline bool CMsgClientToGCShowcaseGetUserData::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseGetUserData::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgClientToGCShowcaseGetUserData::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCShowcaseGetUserData::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgClientToGCShowcaseGetUserData::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseGetUserData.account_id)
  return _internal_account_id();
}
inline void CMsgClientToGCShowcaseGetUserData::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgClientToGCShowcaseGetUserData::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseGetUserData.account_id)
}

// optional .EShowcaseType showcase_type = 2 [default = k_eShowcaseType_Invalid];
inline bool CMsgClientToGCShowcaseGetUserData::_internal_has_showcase_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseGetUserData::has_showcase_type() const {
  return _internal_has_showcase_type();
}
inline void CMsgClientToGCShowcaseGetUserData::clear_showcase_type() {
  _impl_.showcase_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::EShowcaseType CMsgClientToGCShowcaseGetUserData::_internal_showcase_type() const {
  return static_cast< ::EShowcaseType >(_impl_.showcase_type_);
}
inline ::EShowcaseType CMsgClientToGCShowcaseGetUserData::showcase_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseGetUserData.showcase_type)
  return _internal_showcase_type();
}
inline void CMsgClientToGCShowcaseGetUserData::_internal_set_showcase_type(::EShowcaseType value) {
  assert(::EShowcaseType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.showcase_type_ = value;
}
inline void CMsgClientToGCShowcaseGetUserData::set_showcase_type(::EShowcaseType value) {
  _internal_set_showcase_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseGetUserData.showcase_type)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseGetUserDataResponse

// optional .CMsgClientToGCShowcaseGetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
inline bool CMsgClientToGCShowcaseGetUserDataResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseGetUserDataResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCShowcaseGetUserDataResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgClientToGCShowcaseGetUserDataResponse_EResponse CMsgClientToGCShowcaseGetUserDataResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCShowcaseGetUserDataResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCShowcaseGetUserDataResponse_EResponse CMsgClientToGCShowcaseGetUserDataResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseGetUserDataResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCShowcaseGetUserDataResponse::_internal_set_response(::CMsgClientToGCShowcaseGetUserDataResponse_EResponse value) {
  assert(::CMsgClientToGCShowcaseGetUserDataResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCShowcaseGetUserDataResponse::set_response(::CMsgClientToGCShowcaseGetUserDataResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseGetUserDataResponse.response)
}

// optional .CMsgShowcase showcase = 2;
inline bool CMsgClientToGCShowcaseGetUserDataResponse::_internal_has_showcase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.showcase_ != nullptr);
  return value;
}
inline bool CMsgClientToGCShowcaseGetUserDataResponse::has_showcase() const {
  return _internal_has_showcase();
}
inline void CMsgClientToGCShowcaseGetUserDataResponse::clear_showcase() {
  if (_impl_.showcase_ != nullptr) _impl_.showcase_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcase& CMsgClientToGCShowcaseGetUserDataResponse::_internal_showcase() const {
  const ::CMsgShowcase* p = _impl_.showcase_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcase&>(
      ::_CMsgShowcase_default_instance_);
}
inline const ::CMsgShowcase& CMsgClientToGCShowcaseGetUserDataResponse::showcase() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseGetUserDataResponse.showcase)
  return _internal_showcase();
}
inline void CMsgClientToGCShowcaseGetUserDataResponse::unsafe_arena_set_allocated_showcase(
    ::CMsgShowcase* showcase) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.showcase_);
  }
  _impl_.showcase_ = showcase;
  if (showcase) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientToGCShowcaseGetUserDataResponse.showcase)
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseGetUserDataResponse::release_showcase() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcase* temp = _impl_.showcase_;
  _impl_.showcase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseGetUserDataResponse::unsafe_arena_release_showcase() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCShowcaseGetUserDataResponse.showcase)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcase* temp = _impl_.showcase_;
  _impl_.showcase_ = nullptr;
  return temp;
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseGetUserDataResponse::_internal_mutable_showcase() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.showcase_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcase>(GetArenaForAllocation());
    _impl_.showcase_ = p;
  }
  return _impl_.showcase_;
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseGetUserDataResponse::mutable_showcase() {
  ::CMsgShowcase* _msg = _internal_mutable_showcase();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCShowcaseGetUserDataResponse.showcase)
  return _msg;
}
inline void CMsgClientToGCShowcaseGetUserDataResponse::set_allocated_showcase(::CMsgShowcase* showcase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.showcase_;
  }
  if (showcase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(showcase);
    if (message_arena != submessage_arena) {
      showcase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, showcase, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.showcase_ = showcase;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCShowcaseGetUserDataResponse.showcase)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseSetUserData

// optional .EShowcaseType showcase_type = 1 [default = k_eShowcaseType_Invalid];
inline bool CMsgClientToGCShowcaseSetUserData::_internal_has_showcase_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseSetUserData::has_showcase_type() const {
  return _internal_has_showcase_type();
}
inline void CMsgClientToGCShowcaseSetUserData::clear_showcase_type() {
  _impl_.showcase_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::EShowcaseType CMsgClientToGCShowcaseSetUserData::_internal_showcase_type() const {
  return static_cast< ::EShowcaseType >(_impl_.showcase_type_);
}
inline ::EShowcaseType CMsgClientToGCShowcaseSetUserData::showcase_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseSetUserData.showcase_type)
  return _internal_showcase_type();
}
inline void CMsgClientToGCShowcaseSetUserData::_internal_set_showcase_type(::EShowcaseType value) {
  assert(::EShowcaseType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.showcase_type_ = value;
}
inline void CMsgClientToGCShowcaseSetUserData::set_showcase_type(::EShowcaseType value) {
  _internal_set_showcase_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseSetUserData.showcase_type)
}

// optional .CMsgShowcase showcase = 2;
inline bool CMsgClientToGCShowcaseSetUserData::_internal_has_showcase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.showcase_ != nullptr);
  return value;
}
inline bool CMsgClientToGCShowcaseSetUserData::has_showcase() const {
  return _internal_has_showcase();
}
inline void CMsgClientToGCShowcaseSetUserData::clear_showcase() {
  if (_impl_.showcase_ != nullptr) _impl_.showcase_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcase& CMsgClientToGCShowcaseSetUserData::_internal_showcase() const {
  const ::CMsgShowcase* p = _impl_.showcase_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcase&>(
      ::_CMsgShowcase_default_instance_);
}
inline const ::CMsgShowcase& CMsgClientToGCShowcaseSetUserData::showcase() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseSetUserData.showcase)
  return _internal_showcase();
}
inline void CMsgClientToGCShowcaseSetUserData::unsafe_arena_set_allocated_showcase(
    ::CMsgShowcase* showcase) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.showcase_);
  }
  _impl_.showcase_ = showcase;
  if (showcase) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientToGCShowcaseSetUserData.showcase)
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseSetUserData::release_showcase() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcase* temp = _impl_.showcase_;
  _impl_.showcase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseSetUserData::unsafe_arena_release_showcase() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCShowcaseSetUserData.showcase)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcase* temp = _impl_.showcase_;
  _impl_.showcase_ = nullptr;
  return temp;
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseSetUserData::_internal_mutable_showcase() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.showcase_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcase>(GetArenaForAllocation());
    _impl_.showcase_ = p;
  }
  return _impl_.showcase_;
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseSetUserData::mutable_showcase() {
  ::CMsgShowcase* _msg = _internal_mutable_showcase();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCShowcaseSetUserData.showcase)
  return _msg;
}
inline void CMsgClientToGCShowcaseSetUserData::set_allocated_showcase(::CMsgShowcase* showcase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.showcase_;
  }
  if (showcase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(showcase);
    if (message_arena != submessage_arena) {
      showcase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, showcase, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.showcase_ = showcase;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCShowcaseSetUserData.showcase)
}

// -------------------------------------------------------------------

// CMsgClientToGCShowcaseSetUserDataResponse

// optional .CMsgClientToGCShowcaseSetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
inline bool CMsgClientToGCShowcaseSetUserDataResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCShowcaseSetUserDataResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCShowcaseSetUserDataResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCShowcaseSetUserDataResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCShowcaseSetUserDataResponse_EResponse CMsgClientToGCShowcaseSetUserDataResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseSetUserDataResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCShowcaseSetUserDataResponse::_internal_set_response(::CMsgClientToGCShowcaseSetUserDataResponse_EResponse value) {
  assert(::CMsgClientToGCShowcaseSetUserDataResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCShowcaseSetUserDataResponse::set_response(::CMsgClientToGCShowcaseSetUserDataResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCShowcaseSetUserDataResponse.response)
}

// optional .CMsgShowcase validated_showcase = 2;
inline bool CMsgClientToGCShowcaseSetUserDataResponse::_internal_has_validated_showcase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.validated_showcase_ != nullptr);
  return value;
}
inline bool CMsgClientToGCShowcaseSetUserDataResponse::has_validated_showcase() const {
  return _internal_has_validated_showcase();
}
inline void CMsgClientToGCShowcaseSetUserDataResponse::clear_validated_showcase() {
  if (_impl_.validated_showcase_ != nullptr) _impl_.validated_showcase_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgShowcase& CMsgClientToGCShowcaseSetUserDataResponse::_internal_validated_showcase() const {
  const ::CMsgShowcase* p = _impl_.validated_showcase_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgShowcase&>(
      ::_CMsgShowcase_default_instance_);
}
inline const ::CMsgShowcase& CMsgClientToGCShowcaseSetUserDataResponse::validated_showcase() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCShowcaseSetUserDataResponse.validated_showcase)
  return _internal_validated_showcase();
}
inline void CMsgClientToGCShowcaseSetUserDataResponse::unsafe_arena_set_allocated_validated_showcase(
    ::CMsgShowcase* validated_showcase) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.validated_showcase_);
  }
  _impl_.validated_showcase_ = validated_showcase;
  if (validated_showcase) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientToGCShowcaseSetUserDataResponse.validated_showcase)
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseSetUserDataResponse::release_validated_showcase() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcase* temp = _impl_.validated_showcase_;
  _impl_.validated_showcase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseSetUserDataResponse::unsafe_arena_release_validated_showcase() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCShowcaseSetUserDataResponse.validated_showcase)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgShowcase* temp = _impl_.validated_showcase_;
  _impl_.validated_showcase_ = nullptr;
  return temp;
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseSetUserDataResponse::_internal_mutable_validated_showcase() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.validated_showcase_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgShowcase>(GetArenaForAllocation());
    _impl_.validated_showcase_ = p;
  }
  return _impl_.validated_showcase_;
}
inline ::CMsgShowcase* CMsgClientToGCShowcaseSetUserDataResponse::mutable_validated_showcase() {
  ::CMsgShowcase* _msg = _internal_mutable_validated_showcase();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCShowcaseSetUserDataResponse.validated_showcase)
  return _msg;
}
inline void CMsgClientToGCShowcaseSetUserDataResponse::set_allocated_validated_showcase(::CMsgShowcase* validated_showcase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.validated_showcase_;
  }
  if (validated_showcase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(validated_showcase);
    if (message_arena != submessage_arena) {
      validated_showcase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validated_showcase, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.validated_showcase_ = validated_showcase;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCShowcaseSetUserDataResponse.validated_showcase)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome>() {
  return ::CMsgShowcaseItem_PlayerMatch_EPlayerOutcome_descriptor();
}
template <> struct is_proto_enum< ::CMsgShowcaseItem_Widget_EWidget> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgShowcaseItem_Widget_EWidget>() {
  return ::CMsgShowcaseItem_Widget_EWidget_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCShowcaseGetUserDataResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCShowcaseGetUserDataResponse_EResponse>() {
  return ::CMsgClientToGCShowcaseGetUserDataResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCShowcaseSetUserDataResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCShowcaseSetUserDataResponse_EResponse>() {
  return ::CMsgClientToGCShowcaseSetUserDataResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::EShowcaseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EShowcaseType>() {
  return ::EShowcaseType_descriptor();
}
template <> struct is_proto_enum< ::EShowcaseItemState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EShowcaseItemState>() {
  return ::EShowcaseItemState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fshowcase_2eproto
