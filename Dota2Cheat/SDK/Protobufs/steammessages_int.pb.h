// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_int.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fint_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fint_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fint_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fint_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fint_2eproto;
class CGCMsgGetIPASN;
struct CGCMsgGetIPASNDefaultTypeInternal;
extern CGCMsgGetIPASNDefaultTypeInternal _CGCMsgGetIPASN_default_instance_;
class CGCMsgGetIPASNResponse;
struct CGCMsgGetIPASNResponseDefaultTypeInternal;
extern CGCMsgGetIPASNResponseDefaultTypeInternal _CGCMsgGetIPASNResponse_default_instance_;
class CGCMsgGetIPLocation;
struct CGCMsgGetIPLocationDefaultTypeInternal;
extern CGCMsgGetIPLocationDefaultTypeInternal _CGCMsgGetIPLocation_default_instance_;
class CGCMsgGetSystemStats;
struct CGCMsgGetSystemStatsDefaultTypeInternal;
extern CGCMsgGetSystemStatsDefaultTypeInternal _CGCMsgGetSystemStats_default_instance_;
class CGCMsgGetSystemStatsResponse;
struct CGCMsgGetSystemStatsResponseDefaultTypeInternal;
extern CGCMsgGetSystemStatsResponseDefaultTypeInternal _CGCMsgGetSystemStatsResponse_default_instance_;
class CGCMsgMemCachedDelete;
struct CGCMsgMemCachedDeleteDefaultTypeInternal;
extern CGCMsgMemCachedDeleteDefaultTypeInternal _CGCMsgMemCachedDelete_default_instance_;
class CGCMsgMemCachedGet;
struct CGCMsgMemCachedGetDefaultTypeInternal;
extern CGCMsgMemCachedGetDefaultTypeInternal _CGCMsgMemCachedGet_default_instance_;
class CGCMsgMemCachedGetResponse;
struct CGCMsgMemCachedGetResponseDefaultTypeInternal;
extern CGCMsgMemCachedGetResponseDefaultTypeInternal _CGCMsgMemCachedGetResponse_default_instance_;
class CGCMsgMemCachedGetResponse_ValueTag;
struct CGCMsgMemCachedGetResponse_ValueTagDefaultTypeInternal;
extern CGCMsgMemCachedGetResponse_ValueTagDefaultTypeInternal _CGCMsgMemCachedGetResponse_ValueTag_default_instance_;
class CGCMsgMemCachedSet;
struct CGCMsgMemCachedSetDefaultTypeInternal;
extern CGCMsgMemCachedSetDefaultTypeInternal _CGCMsgMemCachedSet_default_instance_;
class CGCMsgMemCachedSet_KeyPair;
struct CGCMsgMemCachedSet_KeyPairDefaultTypeInternal;
extern CGCMsgMemCachedSet_KeyPairDefaultTypeInternal _CGCMsgMemCachedSet_KeyPair_default_instance_;
class CGCMsgMemCachedStats;
struct CGCMsgMemCachedStatsDefaultTypeInternal;
extern CGCMsgMemCachedStatsDefaultTypeInternal _CGCMsgMemCachedStats_default_instance_;
class CGCMsgMemCachedStatsResponse;
struct CGCMsgMemCachedStatsResponseDefaultTypeInternal;
extern CGCMsgMemCachedStatsResponseDefaultTypeInternal _CGCMsgMemCachedStatsResponse_default_instance_;
class CGCMsgSQLStats;
struct CGCMsgSQLStatsDefaultTypeInternal;
extern CGCMsgSQLStatsDefaultTypeInternal _CGCMsgSQLStats_default_instance_;
class CGCMsgSQLStatsResponse;
struct CGCMsgSQLStatsResponseDefaultTypeInternal;
extern CGCMsgSQLStatsResponseDefaultTypeInternal _CGCMsgSQLStatsResponse_default_instance_;
class CGCMsgSystemStatsSchema;
struct CGCMsgSystemStatsSchemaDefaultTypeInternal;
extern CGCMsgSystemStatsSchemaDefaultTypeInternal _CGCMsgSystemStatsSchema_default_instance_;
class CGCSystemMsg_GetPurchaseTrust_Request;
struct CGCSystemMsg_GetPurchaseTrust_RequestDefaultTypeInternal;
extern CGCSystemMsg_GetPurchaseTrust_RequestDefaultTypeInternal _CGCSystemMsg_GetPurchaseTrust_Request_default_instance_;
class CGCSystemMsg_GetPurchaseTrust_Response;
struct CGCSystemMsg_GetPurchaseTrust_ResponseDefaultTypeInternal;
extern CGCSystemMsg_GetPurchaseTrust_ResponseDefaultTypeInternal _CGCSystemMsg_GetPurchaseTrust_Response_default_instance_;
class CGCSystemMsg_ReportExternalPurchase_Request;
struct CGCSystemMsg_ReportExternalPurchase_RequestDefaultTypeInternal;
extern CGCSystemMsg_ReportExternalPurchase_RequestDefaultTypeInternal _CGCSystemMsg_ReportExternalPurchase_Request_default_instance_;
class CGCSystemMsg_ReportExternalPurchase_Response;
struct CGCSystemMsg_ReportExternalPurchase_ResponseDefaultTypeInternal;
extern CGCSystemMsg_ReportExternalPurchase_ResponseDefaultTypeInternal _CGCSystemMsg_ReportExternalPurchase_Response_default_instance_;
class CIPASNInfo;
struct CIPASNInfoDefaultTypeInternal;
extern CIPASNInfoDefaultTypeInternal _CIPASNInfo_default_instance_;
class CMsgAMAddFreeLicense;
struct CMsgAMAddFreeLicenseDefaultTypeInternal;
extern CMsgAMAddFreeLicenseDefaultTypeInternal _CMsgAMAddFreeLicense_default_instance_;
class CMsgAMAddFreeLicenseResponse;
struct CMsgAMAddFreeLicenseResponseDefaultTypeInternal;
extern CMsgAMAddFreeLicenseResponseDefaultTypeInternal _CMsgAMAddFreeLicenseResponse_default_instance_;
class CMsgAMFindAccounts;
struct CMsgAMFindAccountsDefaultTypeInternal;
extern CMsgAMFindAccountsDefaultTypeInternal _CMsgAMFindAccounts_default_instance_;
class CMsgAMFindAccountsResponse;
struct CMsgAMFindAccountsResponseDefaultTypeInternal;
extern CMsgAMFindAccountsResponseDefaultTypeInternal _CMsgAMFindAccountsResponse_default_instance_;
class CMsgAMGetLicenses;
struct CMsgAMGetLicensesDefaultTypeInternal;
extern CMsgAMGetLicensesDefaultTypeInternal _CMsgAMGetLicenses_default_instance_;
class CMsgAMGetLicensesResponse;
struct CMsgAMGetLicensesResponseDefaultTypeInternal;
extern CMsgAMGetLicensesResponseDefaultTypeInternal _CMsgAMGetLicensesResponse_default_instance_;
class CMsgAMGetUserGameStats;
struct CMsgAMGetUserGameStatsDefaultTypeInternal;
extern CMsgAMGetUserGameStatsDefaultTypeInternal _CMsgAMGetUserGameStats_default_instance_;
class CMsgAMGetUserGameStatsResponse;
struct CMsgAMGetUserGameStatsResponseDefaultTypeInternal;
extern CMsgAMGetUserGameStatsResponseDefaultTypeInternal _CMsgAMGetUserGameStatsResponse_default_instance_;
class CMsgAMGetUserGameStatsResponse_Achievement_Blocks;
struct CMsgAMGetUserGameStatsResponse_Achievement_BlocksDefaultTypeInternal;
extern CMsgAMGetUserGameStatsResponse_Achievement_BlocksDefaultTypeInternal _CMsgAMGetUserGameStatsResponse_Achievement_Blocks_default_instance_;
class CMsgAMGetUserGameStatsResponse_Stats;
struct CMsgAMGetUserGameStatsResponse_StatsDefaultTypeInternal;
extern CMsgAMGetUserGameStatsResponse_StatsDefaultTypeInternal _CMsgAMGetUserGameStatsResponse_Stats_default_instance_;
class CMsgAMGrantGuestPasses2;
struct CMsgAMGrantGuestPasses2DefaultTypeInternal;
extern CMsgAMGrantGuestPasses2DefaultTypeInternal _CMsgAMGrantGuestPasses2_default_instance_;
class CMsgAMGrantGuestPasses2Response;
struct CMsgAMGrantGuestPasses2ResponseDefaultTypeInternal;
extern CMsgAMGrantGuestPasses2ResponseDefaultTypeInternal _CMsgAMGrantGuestPasses2Response_default_instance_;
class CMsgAMSendEmail;
struct CMsgAMSendEmailDefaultTypeInternal;
extern CMsgAMSendEmailDefaultTypeInternal _CMsgAMSendEmail_default_instance_;
class CMsgAMSendEmailResponse;
struct CMsgAMSendEmailResponseDefaultTypeInternal;
extern CMsgAMSendEmailResponseDefaultTypeInternal _CMsgAMSendEmailResponse_default_instance_;
class CMsgAMSendEmail_PersonaNameReplacementToken;
struct CMsgAMSendEmail_PersonaNameReplacementTokenDefaultTypeInternal;
extern CMsgAMSendEmail_PersonaNameReplacementTokenDefaultTypeInternal _CMsgAMSendEmail_PersonaNameReplacementToken_default_instance_;
class CMsgAMSendEmail_ReplacementToken;
struct CMsgAMSendEmail_ReplacementTokenDefaultTypeInternal;
extern CMsgAMSendEmail_ReplacementTokenDefaultTypeInternal _CMsgAMSendEmail_ReplacementToken_default_instance_;
class CMsgDPPartnerMicroTxns;
struct CMsgDPPartnerMicroTxnsDefaultTypeInternal;
extern CMsgDPPartnerMicroTxnsDefaultTypeInternal _CMsgDPPartnerMicroTxns_default_instance_;
class CMsgDPPartnerMicroTxnsResponse;
struct CMsgDPPartnerMicroTxnsResponseDefaultTypeInternal;
extern CMsgDPPartnerMicroTxnsResponseDefaultTypeInternal _CMsgDPPartnerMicroTxnsResponse_default_instance_;
class CMsgDPPartnerMicroTxns_PartnerInfo;
struct CMsgDPPartnerMicroTxns_PartnerInfoDefaultTypeInternal;
extern CMsgDPPartnerMicroTxns_PartnerInfoDefaultTypeInternal _CMsgDPPartnerMicroTxns_PartnerInfo_default_instance_;
class CMsgDPPartnerMicroTxns_PartnerMicroTxn;
struct CMsgDPPartnerMicroTxns_PartnerMicroTxnDefaultTypeInternal;
extern CMsgDPPartnerMicroTxns_PartnerMicroTxnDefaultTypeInternal _CMsgDPPartnerMicroTxns_PartnerMicroTxn_default_instance_;
class CMsgGCCheckClanMembership;
struct CMsgGCCheckClanMembershipDefaultTypeInternal;
extern CMsgGCCheckClanMembershipDefaultTypeInternal _CMsgGCCheckClanMembership_default_instance_;
class CMsgGCCheckClanMembership_Response;
struct CMsgGCCheckClanMembership_ResponseDefaultTypeInternal;
extern CMsgGCCheckClanMembership_ResponseDefaultTypeInternal _CMsgGCCheckClanMembership_Response_default_instance_;
class CMsgGCCheckFriendship;
struct CMsgGCCheckFriendshipDefaultTypeInternal;
extern CMsgGCCheckFriendshipDefaultTypeInternal _CMsgGCCheckFriendship_default_instance_;
class CMsgGCCheckFriendship_Response;
struct CMsgGCCheckFriendship_ResponseDefaultTypeInternal;
extern CMsgGCCheckFriendship_ResponseDefaultTypeInternal _CMsgGCCheckFriendship_Response_default_instance_;
class CMsgGCGetAppFriendsList;
struct CMsgGCGetAppFriendsListDefaultTypeInternal;
extern CMsgGCGetAppFriendsListDefaultTypeInternal _CMsgGCGetAppFriendsList_default_instance_;
class CMsgGCGetAppFriendsList_Response;
struct CMsgGCGetAppFriendsList_ResponseDefaultTypeInternal;
extern CMsgGCGetAppFriendsList_ResponseDefaultTypeInternal _CMsgGCGetAppFriendsList_Response_default_instance_;
class CMsgGCGetCommandList;
struct CMsgGCGetCommandListDefaultTypeInternal;
extern CMsgGCGetCommandListDefaultTypeInternal _CMsgGCGetCommandList_default_instance_;
class CMsgGCGetCommandListResponse;
struct CMsgGCGetCommandListResponseDefaultTypeInternal;
extern CMsgGCGetCommandListResponseDefaultTypeInternal _CMsgGCGetCommandListResponse_default_instance_;
class CMsgGCGetEmailTemplate;
struct CMsgGCGetEmailTemplateDefaultTypeInternal;
extern CMsgGCGetEmailTemplateDefaultTypeInternal _CMsgGCGetEmailTemplate_default_instance_;
class CMsgGCGetEmailTemplateResponse;
struct CMsgGCGetEmailTemplateResponseDefaultTypeInternal;
extern CMsgGCGetEmailTemplateResponseDefaultTypeInternal _CMsgGCGetEmailTemplateResponse_default_instance_;
class CMsgGCGetPartnerAccountLink;
struct CMsgGCGetPartnerAccountLinkDefaultTypeInternal;
extern CMsgGCGetPartnerAccountLinkDefaultTypeInternal _CMsgGCGetPartnerAccountLink_default_instance_;
class CMsgGCGetPartnerAccountLink_Response;
struct CMsgGCGetPartnerAccountLink_ResponseDefaultTypeInternal;
extern CMsgGCGetPartnerAccountLink_ResponseDefaultTypeInternal _CMsgGCGetPartnerAccountLink_Response_default_instance_;
class CMsgGCGetPersonaNames;
struct CMsgGCGetPersonaNamesDefaultTypeInternal;
extern CMsgGCGetPersonaNamesDefaultTypeInternal _CMsgGCGetPersonaNames_default_instance_;
class CMsgGCGetPersonaNames_Response;
struct CMsgGCGetPersonaNames_ResponseDefaultTypeInternal;
extern CMsgGCGetPersonaNames_ResponseDefaultTypeInternal _CMsgGCGetPersonaNames_Response_default_instance_;
class CMsgGCGetPersonaNames_Response_PersonaName;
struct CMsgGCGetPersonaNames_Response_PersonaNameDefaultTypeInternal;
extern CMsgGCGetPersonaNames_Response_PersonaNameDefaultTypeInternal _CMsgGCGetPersonaNames_Response_PersonaName_default_instance_;
class CMsgGCHAccountTwoFactorChange;
struct CMsgGCHAccountTwoFactorChangeDefaultTypeInternal;
extern CMsgGCHAccountTwoFactorChangeDefaultTypeInternal _CMsgGCHAccountTwoFactorChange_default_instance_;
class CMsgGCHAccountVacStatusChange;
struct CMsgGCHAccountVacStatusChangeDefaultTypeInternal;
extern CMsgGCHAccountVacStatusChangeDefaultTypeInternal _CMsgGCHAccountVacStatusChange_default_instance_;
class CMsgGCHAppCheersGetAllowedTypes;
struct CMsgGCHAppCheersGetAllowedTypesDefaultTypeInternal;
extern CMsgGCHAppCheersGetAllowedTypesDefaultTypeInternal _CMsgGCHAppCheersGetAllowedTypes_default_instance_;
class CMsgGCHAppCheersGetAllowedTypesResponse;
struct CMsgGCHAppCheersGetAllowedTypesResponseDefaultTypeInternal;
extern CMsgGCHAppCheersGetAllowedTypesResponseDefaultTypeInternal _CMsgGCHAppCheersGetAllowedTypesResponse_default_instance_;
class CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps;
struct CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemapsDefaultTypeInternal;
extern CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemapsDefaultTypeInternal _CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps_default_instance_;
class CMsgGCHAppCheersReceived;
struct CMsgGCHAppCheersReceivedDefaultTypeInternal;
extern CMsgGCHAppCheersReceivedDefaultTypeInternal _CMsgGCHAppCheersReceived_default_instance_;
class CMsgGCHAppCheersReceived_CheerTarget;
struct CMsgGCHAppCheersReceived_CheerTargetDefaultTypeInternal;
extern CMsgGCHAppCheersReceived_CheerTargetDefaultTypeInternal _CMsgGCHAppCheersReceived_CheerTarget_default_instance_;
class CMsgGCHAppCheersReceived_CheerTypeAmount;
struct CMsgGCHAppCheersReceived_CheerTypeAmountDefaultTypeInternal;
extern CMsgGCHAppCheersReceived_CheerTypeAmountDefaultTypeInternal _CMsgGCHAppCheersReceived_CheerTypeAmount_default_instance_;
class CMsgGCHUpdateSession;
struct CMsgGCHUpdateSessionDefaultTypeInternal;
extern CMsgGCHUpdateSessionDefaultTypeInternal _CMsgGCHUpdateSession_default_instance_;
class CMsgGCHUpdateSession_ExtraField;
struct CMsgGCHUpdateSession_ExtraFieldDefaultTypeInternal;
extern CMsgGCHUpdateSession_ExtraFieldDefaultTypeInternal _CMsgGCHUpdateSession_ExtraField_default_instance_;
class CMsgGCHVacVerificationChange;
struct CMsgGCHVacVerificationChangeDefaultTypeInternal;
extern CMsgGCHVacVerificationChangeDefaultTypeInternal _CMsgGCHVacVerificationChange_default_instance_;
class CMsgGCMsgMasterSetClientMsgRouting;
struct CMsgGCMsgMasterSetClientMsgRoutingDefaultTypeInternal;
extern CMsgGCMsgMasterSetClientMsgRoutingDefaultTypeInternal _CMsgGCMsgMasterSetClientMsgRouting_default_instance_;
class CMsgGCMsgMasterSetClientMsgRouting_Entry;
struct CMsgGCMsgMasterSetClientMsgRouting_EntryDefaultTypeInternal;
extern CMsgGCMsgMasterSetClientMsgRouting_EntryDefaultTypeInternal _CMsgGCMsgMasterSetClientMsgRouting_Entry_default_instance_;
class CMsgGCMsgMasterSetClientMsgRouting_Response;
struct CMsgGCMsgMasterSetClientMsgRouting_ResponseDefaultTypeInternal;
extern CMsgGCMsgMasterSetClientMsgRouting_ResponseDefaultTypeInternal _CMsgGCMsgMasterSetClientMsgRouting_Response_default_instance_;
class CMsgGCMsgMasterSetDirectory;
struct CMsgGCMsgMasterSetDirectoryDefaultTypeInternal;
extern CMsgGCMsgMasterSetDirectoryDefaultTypeInternal _CMsgGCMsgMasterSetDirectory_default_instance_;
class CMsgGCMsgMasterSetDirectory_Response;
struct CMsgGCMsgMasterSetDirectory_ResponseDefaultTypeInternal;
extern CMsgGCMsgMasterSetDirectory_ResponseDefaultTypeInternal _CMsgGCMsgMasterSetDirectory_Response_default_instance_;
class CMsgGCMsgMasterSetDirectory_SubGC;
struct CMsgGCMsgMasterSetDirectory_SubGCDefaultTypeInternal;
extern CMsgGCMsgMasterSetDirectory_SubGCDefaultTypeInternal _CMsgGCMsgMasterSetDirectory_SubGC_default_instance_;
class CMsgGCMsgMasterSetWebAPIRouting;
struct CMsgGCMsgMasterSetWebAPIRoutingDefaultTypeInternal;
extern CMsgGCMsgMasterSetWebAPIRoutingDefaultTypeInternal _CMsgGCMsgMasterSetWebAPIRouting_default_instance_;
class CMsgGCMsgMasterSetWebAPIRouting_Entry;
struct CMsgGCMsgMasterSetWebAPIRouting_EntryDefaultTypeInternal;
extern CMsgGCMsgMasterSetWebAPIRouting_EntryDefaultTypeInternal _CMsgGCMsgMasterSetWebAPIRouting_Entry_default_instance_;
class CMsgGCMsgMasterSetWebAPIRouting_Response;
struct CMsgGCMsgMasterSetWebAPIRouting_ResponseDefaultTypeInternal;
extern CMsgGCMsgMasterSetWebAPIRouting_ResponseDefaultTypeInternal _CMsgGCMsgMasterSetWebAPIRouting_Response_default_instance_;
class CMsgGCMsgSetOptions;
struct CMsgGCMsgSetOptionsDefaultTypeInternal;
extern CMsgGCMsgSetOptionsDefaultTypeInternal _CMsgGCMsgSetOptions_default_instance_;
class CMsgGCMsgSetOptions_MessageRange;
struct CMsgGCMsgSetOptions_MessageRangeDefaultTypeInternal;
extern CMsgGCMsgSetOptions_MessageRangeDefaultTypeInternal _CMsgGCMsgSetOptions_MessageRange_default_instance_;
class CMsgGCMsgWebAPIJobRequestForwardResponse;
struct CMsgGCMsgWebAPIJobRequestForwardResponseDefaultTypeInternal;
extern CMsgGCMsgWebAPIJobRequestForwardResponseDefaultTypeInternal _CMsgGCMsgWebAPIJobRequestForwardResponse_default_instance_;
class CMsgGCRoutingInfo;
struct CMsgGCRoutingInfoDefaultTypeInternal;
extern CMsgGCRoutingInfoDefaultTypeInternal _CMsgGCRoutingInfo_default_instance_;
class CMsgHttpRequest;
struct CMsgHttpRequestDefaultTypeInternal;
extern CMsgHttpRequestDefaultTypeInternal _CMsgHttpRequest_default_instance_;
class CMsgHttpRequest_QueryParam;
struct CMsgHttpRequest_QueryParamDefaultTypeInternal;
extern CMsgHttpRequest_QueryParamDefaultTypeInternal _CMsgHttpRequest_QueryParam_default_instance_;
class CMsgHttpRequest_RequestHeader;
struct CMsgHttpRequest_RequestHeaderDefaultTypeInternal;
extern CMsgHttpRequest_RequestHeaderDefaultTypeInternal _CMsgHttpRequest_RequestHeader_default_instance_;
class CMsgHttpResponse;
struct CMsgHttpResponseDefaultTypeInternal;
extern CMsgHttpResponseDefaultTypeInternal _CMsgHttpResponse_default_instance_;
class CMsgHttpResponse_ResponseHeader;
struct CMsgHttpResponse_ResponseHeaderDefaultTypeInternal;
extern CMsgHttpResponse_ResponseHeaderDefaultTypeInternal _CMsgHttpResponse_ResponseHeader_default_instance_;
class CMsgNotificationOfSuspiciousActivity;
struct CMsgNotificationOfSuspiciousActivityDefaultTypeInternal;
extern CMsgNotificationOfSuspiciousActivityDefaultTypeInternal _CMsgNotificationOfSuspiciousActivity_default_instance_;
class CMsgNotificationOfSuspiciousActivity_MultipleGameInstances;
struct CMsgNotificationOfSuspiciousActivity_MultipleGameInstancesDefaultTypeInternal;
extern CMsgNotificationOfSuspiciousActivity_MultipleGameInstancesDefaultTypeInternal _CMsgNotificationOfSuspiciousActivity_MultipleGameInstances_default_instance_;
class CMsgNotifyWatchdog;
struct CMsgNotifyWatchdogDefaultTypeInternal;
extern CMsgNotifyWatchdogDefaultTypeInternal _CMsgNotifyWatchdog_default_instance_;
class CMsgPackageLicense;
struct CMsgPackageLicenseDefaultTypeInternal;
extern CMsgPackageLicenseDefaultTypeInternal _CMsgPackageLicense_default_instance_;
class CMsgWebAPIKey;
struct CMsgWebAPIKeyDefaultTypeInternal;
extern CMsgWebAPIKeyDefaultTypeInternal _CMsgWebAPIKey_default_instance_;
class CMsgWebAPIRequest;
struct CMsgWebAPIRequestDefaultTypeInternal;
extern CMsgWebAPIRequestDefaultTypeInternal _CMsgWebAPIRequest_default_instance_;
class CWorkshop_AddSpecialPayment_Request;
struct CWorkshop_AddSpecialPayment_RequestDefaultTypeInternal;
extern CWorkshop_AddSpecialPayment_RequestDefaultTypeInternal _CWorkshop_AddSpecialPayment_Request_default_instance_;
class CWorkshop_AddSpecialPayment_Response;
struct CWorkshop_AddSpecialPayment_ResponseDefaultTypeInternal;
extern CWorkshop_AddSpecialPayment_ResponseDefaultTypeInternal _CWorkshop_AddSpecialPayment_Response_default_instance_;
class CWorkshop_GetSpecialPayments_Request;
struct CWorkshop_GetSpecialPayments_RequestDefaultTypeInternal;
extern CWorkshop_GetSpecialPayments_RequestDefaultTypeInternal _CWorkshop_GetSpecialPayments_Request_default_instance_;
class CWorkshop_GetSpecialPayments_Response;
struct CWorkshop_GetSpecialPayments_ResponseDefaultTypeInternal;
extern CWorkshop_GetSpecialPayments_ResponseDefaultTypeInternal _CWorkshop_GetSpecialPayments_Response_default_instance_;
class CWorkshop_GetSpecialPayments_Response_SpecialPayment;
struct CWorkshop_GetSpecialPayments_Response_SpecialPaymentDefaultTypeInternal;
extern CWorkshop_GetSpecialPayments_Response_SpecialPaymentDefaultTypeInternal _CWorkshop_GetSpecialPayments_Response_SpecialPayment_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CGCMsgGetIPASN* Arena::CreateMaybeMessage<::CGCMsgGetIPASN>(Arena*);
template<> ::CGCMsgGetIPASNResponse* Arena::CreateMaybeMessage<::CGCMsgGetIPASNResponse>(Arena*);
template<> ::CGCMsgGetIPLocation* Arena::CreateMaybeMessage<::CGCMsgGetIPLocation>(Arena*);
template<> ::CGCMsgGetSystemStats* Arena::CreateMaybeMessage<::CGCMsgGetSystemStats>(Arena*);
template<> ::CGCMsgGetSystemStatsResponse* Arena::CreateMaybeMessage<::CGCMsgGetSystemStatsResponse>(Arena*);
template<> ::CGCMsgMemCachedDelete* Arena::CreateMaybeMessage<::CGCMsgMemCachedDelete>(Arena*);
template<> ::CGCMsgMemCachedGet* Arena::CreateMaybeMessage<::CGCMsgMemCachedGet>(Arena*);
template<> ::CGCMsgMemCachedGetResponse* Arena::CreateMaybeMessage<::CGCMsgMemCachedGetResponse>(Arena*);
template<> ::CGCMsgMemCachedGetResponse_ValueTag* Arena::CreateMaybeMessage<::CGCMsgMemCachedGetResponse_ValueTag>(Arena*);
template<> ::CGCMsgMemCachedSet* Arena::CreateMaybeMessage<::CGCMsgMemCachedSet>(Arena*);
template<> ::CGCMsgMemCachedSet_KeyPair* Arena::CreateMaybeMessage<::CGCMsgMemCachedSet_KeyPair>(Arena*);
template<> ::CGCMsgMemCachedStats* Arena::CreateMaybeMessage<::CGCMsgMemCachedStats>(Arena*);
template<> ::CGCMsgMemCachedStatsResponse* Arena::CreateMaybeMessage<::CGCMsgMemCachedStatsResponse>(Arena*);
template<> ::CGCMsgSQLStats* Arena::CreateMaybeMessage<::CGCMsgSQLStats>(Arena*);
template<> ::CGCMsgSQLStatsResponse* Arena::CreateMaybeMessage<::CGCMsgSQLStatsResponse>(Arena*);
template<> ::CGCMsgSystemStatsSchema* Arena::CreateMaybeMessage<::CGCMsgSystemStatsSchema>(Arena*);
template<> ::CGCSystemMsg_GetPurchaseTrust_Request* Arena::CreateMaybeMessage<::CGCSystemMsg_GetPurchaseTrust_Request>(Arena*);
template<> ::CGCSystemMsg_GetPurchaseTrust_Response* Arena::CreateMaybeMessage<::CGCSystemMsg_GetPurchaseTrust_Response>(Arena*);
template<> ::CGCSystemMsg_ReportExternalPurchase_Request* Arena::CreateMaybeMessage<::CGCSystemMsg_ReportExternalPurchase_Request>(Arena*);
template<> ::CGCSystemMsg_ReportExternalPurchase_Response* Arena::CreateMaybeMessage<::CGCSystemMsg_ReportExternalPurchase_Response>(Arena*);
template<> ::CIPASNInfo* Arena::CreateMaybeMessage<::CIPASNInfo>(Arena*);
template<> ::CMsgAMAddFreeLicense* Arena::CreateMaybeMessage<::CMsgAMAddFreeLicense>(Arena*);
template<> ::CMsgAMAddFreeLicenseResponse* Arena::CreateMaybeMessage<::CMsgAMAddFreeLicenseResponse>(Arena*);
template<> ::CMsgAMFindAccounts* Arena::CreateMaybeMessage<::CMsgAMFindAccounts>(Arena*);
template<> ::CMsgAMFindAccountsResponse* Arena::CreateMaybeMessage<::CMsgAMFindAccountsResponse>(Arena*);
template<> ::CMsgAMGetLicenses* Arena::CreateMaybeMessage<::CMsgAMGetLicenses>(Arena*);
template<> ::CMsgAMGetLicensesResponse* Arena::CreateMaybeMessage<::CMsgAMGetLicensesResponse>(Arena*);
template<> ::CMsgAMGetUserGameStats* Arena::CreateMaybeMessage<::CMsgAMGetUserGameStats>(Arena*);
template<> ::CMsgAMGetUserGameStatsResponse* Arena::CreateMaybeMessage<::CMsgAMGetUserGameStatsResponse>(Arena*);
template<> ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks* Arena::CreateMaybeMessage<::CMsgAMGetUserGameStatsResponse_Achievement_Blocks>(Arena*);
template<> ::CMsgAMGetUserGameStatsResponse_Stats* Arena::CreateMaybeMessage<::CMsgAMGetUserGameStatsResponse_Stats>(Arena*);
template<> ::CMsgAMGrantGuestPasses2* Arena::CreateMaybeMessage<::CMsgAMGrantGuestPasses2>(Arena*);
template<> ::CMsgAMGrantGuestPasses2Response* Arena::CreateMaybeMessage<::CMsgAMGrantGuestPasses2Response>(Arena*);
template<> ::CMsgAMSendEmail* Arena::CreateMaybeMessage<::CMsgAMSendEmail>(Arena*);
template<> ::CMsgAMSendEmailResponse* Arena::CreateMaybeMessage<::CMsgAMSendEmailResponse>(Arena*);
template<> ::CMsgAMSendEmail_PersonaNameReplacementToken* Arena::CreateMaybeMessage<::CMsgAMSendEmail_PersonaNameReplacementToken>(Arena*);
template<> ::CMsgAMSendEmail_ReplacementToken* Arena::CreateMaybeMessage<::CMsgAMSendEmail_ReplacementToken>(Arena*);
template<> ::CMsgDPPartnerMicroTxns* Arena::CreateMaybeMessage<::CMsgDPPartnerMicroTxns>(Arena*);
template<> ::CMsgDPPartnerMicroTxnsResponse* Arena::CreateMaybeMessage<::CMsgDPPartnerMicroTxnsResponse>(Arena*);
template<> ::CMsgDPPartnerMicroTxns_PartnerInfo* Arena::CreateMaybeMessage<::CMsgDPPartnerMicroTxns_PartnerInfo>(Arena*);
template<> ::CMsgDPPartnerMicroTxns_PartnerMicroTxn* Arena::CreateMaybeMessage<::CMsgDPPartnerMicroTxns_PartnerMicroTxn>(Arena*);
template<> ::CMsgGCCheckClanMembership* Arena::CreateMaybeMessage<::CMsgGCCheckClanMembership>(Arena*);
template<> ::CMsgGCCheckClanMembership_Response* Arena::CreateMaybeMessage<::CMsgGCCheckClanMembership_Response>(Arena*);
template<> ::CMsgGCCheckFriendship* Arena::CreateMaybeMessage<::CMsgGCCheckFriendship>(Arena*);
template<> ::CMsgGCCheckFriendship_Response* Arena::CreateMaybeMessage<::CMsgGCCheckFriendship_Response>(Arena*);
template<> ::CMsgGCGetAppFriendsList* Arena::CreateMaybeMessage<::CMsgGCGetAppFriendsList>(Arena*);
template<> ::CMsgGCGetAppFriendsList_Response* Arena::CreateMaybeMessage<::CMsgGCGetAppFriendsList_Response>(Arena*);
template<> ::CMsgGCGetCommandList* Arena::CreateMaybeMessage<::CMsgGCGetCommandList>(Arena*);
template<> ::CMsgGCGetCommandListResponse* Arena::CreateMaybeMessage<::CMsgGCGetCommandListResponse>(Arena*);
template<> ::CMsgGCGetEmailTemplate* Arena::CreateMaybeMessage<::CMsgGCGetEmailTemplate>(Arena*);
template<> ::CMsgGCGetEmailTemplateResponse* Arena::CreateMaybeMessage<::CMsgGCGetEmailTemplateResponse>(Arena*);
template<> ::CMsgGCGetPartnerAccountLink* Arena::CreateMaybeMessage<::CMsgGCGetPartnerAccountLink>(Arena*);
template<> ::CMsgGCGetPartnerAccountLink_Response* Arena::CreateMaybeMessage<::CMsgGCGetPartnerAccountLink_Response>(Arena*);
template<> ::CMsgGCGetPersonaNames* Arena::CreateMaybeMessage<::CMsgGCGetPersonaNames>(Arena*);
template<> ::CMsgGCGetPersonaNames_Response* Arena::CreateMaybeMessage<::CMsgGCGetPersonaNames_Response>(Arena*);
template<> ::CMsgGCGetPersonaNames_Response_PersonaName* Arena::CreateMaybeMessage<::CMsgGCGetPersonaNames_Response_PersonaName>(Arena*);
template<> ::CMsgGCHAccountTwoFactorChange* Arena::CreateMaybeMessage<::CMsgGCHAccountTwoFactorChange>(Arena*);
template<> ::CMsgGCHAccountVacStatusChange* Arena::CreateMaybeMessage<::CMsgGCHAccountVacStatusChange>(Arena*);
template<> ::CMsgGCHAppCheersGetAllowedTypes* Arena::CreateMaybeMessage<::CMsgGCHAppCheersGetAllowedTypes>(Arena*);
template<> ::CMsgGCHAppCheersGetAllowedTypesResponse* Arena::CreateMaybeMessage<::CMsgGCHAppCheersGetAllowedTypesResponse>(Arena*);
template<> ::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps* Arena::CreateMaybeMessage<::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps>(Arena*);
template<> ::CMsgGCHAppCheersReceived* Arena::CreateMaybeMessage<::CMsgGCHAppCheersReceived>(Arena*);
template<> ::CMsgGCHAppCheersReceived_CheerTarget* Arena::CreateMaybeMessage<::CMsgGCHAppCheersReceived_CheerTarget>(Arena*);
template<> ::CMsgGCHAppCheersReceived_CheerTypeAmount* Arena::CreateMaybeMessage<::CMsgGCHAppCheersReceived_CheerTypeAmount>(Arena*);
template<> ::CMsgGCHUpdateSession* Arena::CreateMaybeMessage<::CMsgGCHUpdateSession>(Arena*);
template<> ::CMsgGCHUpdateSession_ExtraField* Arena::CreateMaybeMessage<::CMsgGCHUpdateSession_ExtraField>(Arena*);
template<> ::CMsgGCHVacVerificationChange* Arena::CreateMaybeMessage<::CMsgGCHVacVerificationChange>(Arena*);
template<> ::CMsgGCMsgMasterSetClientMsgRouting* Arena::CreateMaybeMessage<::CMsgGCMsgMasterSetClientMsgRouting>(Arena*);
template<> ::CMsgGCMsgMasterSetClientMsgRouting_Entry* Arena::CreateMaybeMessage<::CMsgGCMsgMasterSetClientMsgRouting_Entry>(Arena*);
template<> ::CMsgGCMsgMasterSetClientMsgRouting_Response* Arena::CreateMaybeMessage<::CMsgGCMsgMasterSetClientMsgRouting_Response>(Arena*);
template<> ::CMsgGCMsgMasterSetDirectory* Arena::CreateMaybeMessage<::CMsgGCMsgMasterSetDirectory>(Arena*);
template<> ::CMsgGCMsgMasterSetDirectory_Response* Arena::CreateMaybeMessage<::CMsgGCMsgMasterSetDirectory_Response>(Arena*);
template<> ::CMsgGCMsgMasterSetDirectory_SubGC* Arena::CreateMaybeMessage<::CMsgGCMsgMasterSetDirectory_SubGC>(Arena*);
template<> ::CMsgGCMsgMasterSetWebAPIRouting* Arena::CreateMaybeMessage<::CMsgGCMsgMasterSetWebAPIRouting>(Arena*);
template<> ::CMsgGCMsgMasterSetWebAPIRouting_Entry* Arena::CreateMaybeMessage<::CMsgGCMsgMasterSetWebAPIRouting_Entry>(Arena*);
template<> ::CMsgGCMsgMasterSetWebAPIRouting_Response* Arena::CreateMaybeMessage<::CMsgGCMsgMasterSetWebAPIRouting_Response>(Arena*);
template<> ::CMsgGCMsgSetOptions* Arena::CreateMaybeMessage<::CMsgGCMsgSetOptions>(Arena*);
template<> ::CMsgGCMsgSetOptions_MessageRange* Arena::CreateMaybeMessage<::CMsgGCMsgSetOptions_MessageRange>(Arena*);
template<> ::CMsgGCMsgWebAPIJobRequestForwardResponse* Arena::CreateMaybeMessage<::CMsgGCMsgWebAPIJobRequestForwardResponse>(Arena*);
template<> ::CMsgGCRoutingInfo* Arena::CreateMaybeMessage<::CMsgGCRoutingInfo>(Arena*);
template<> ::CMsgHttpRequest* Arena::CreateMaybeMessage<::CMsgHttpRequest>(Arena*);
template<> ::CMsgHttpRequest_QueryParam* Arena::CreateMaybeMessage<::CMsgHttpRequest_QueryParam>(Arena*);
template<> ::CMsgHttpRequest_RequestHeader* Arena::CreateMaybeMessage<::CMsgHttpRequest_RequestHeader>(Arena*);
template<> ::CMsgHttpResponse* Arena::CreateMaybeMessage<::CMsgHttpResponse>(Arena*);
template<> ::CMsgHttpResponse_ResponseHeader* Arena::CreateMaybeMessage<::CMsgHttpResponse_ResponseHeader>(Arena*);
template<> ::CMsgNotificationOfSuspiciousActivity* Arena::CreateMaybeMessage<::CMsgNotificationOfSuspiciousActivity>(Arena*);
template<> ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* Arena::CreateMaybeMessage<::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances>(Arena*);
template<> ::CMsgNotifyWatchdog* Arena::CreateMaybeMessage<::CMsgNotifyWatchdog>(Arena*);
template<> ::CMsgPackageLicense* Arena::CreateMaybeMessage<::CMsgPackageLicense>(Arena*);
template<> ::CMsgWebAPIKey* Arena::CreateMaybeMessage<::CMsgWebAPIKey>(Arena*);
template<> ::CMsgWebAPIRequest* Arena::CreateMaybeMessage<::CMsgWebAPIRequest>(Arena*);
template<> ::CWorkshop_AddSpecialPayment_Request* Arena::CreateMaybeMessage<::CWorkshop_AddSpecialPayment_Request>(Arena*);
template<> ::CWorkshop_AddSpecialPayment_Response* Arena::CreateMaybeMessage<::CWorkshop_AddSpecialPayment_Response>(Arena*);
template<> ::CWorkshop_GetSpecialPayments_Request* Arena::CreateMaybeMessage<::CWorkshop_GetSpecialPayments_Request>(Arena*);
template<> ::CWorkshop_GetSpecialPayments_Response* Arena::CreateMaybeMessage<::CWorkshop_GetSpecialPayments_Response>(Arena*);
template<> ::CWorkshop_GetSpecialPayments_Response_SpecialPayment* Arena::CreateMaybeMessage<::CWorkshop_GetSpecialPayments_Response_SpecialPayment>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CMsgGCRoutingInfo_RoutingMethod : int {
  CMsgGCRoutingInfo_RoutingMethod_RANDOM = 0,
  CMsgGCRoutingInfo_RoutingMethod_DISCARD = 1,
  CMsgGCRoutingInfo_RoutingMethod_CLIENT_STEAMID = 2,
  CMsgGCRoutingInfo_RoutingMethod_PROTOBUF_FIELD_UINT64 = 3,
  CMsgGCRoutingInfo_RoutingMethod_WEBAPI_PARAM = 4,
  CMsgGCRoutingInfo_RoutingMethod_WEBAPI_PARAM_STEAMID_ACCOUNTID = 5
};
bool CMsgGCRoutingInfo_RoutingMethod_IsValid(int value);
constexpr CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo_RoutingMethod_RoutingMethod_MIN = CMsgGCRoutingInfo_RoutingMethod_RANDOM;
constexpr CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo_RoutingMethod_RoutingMethod_MAX = CMsgGCRoutingInfo_RoutingMethod_WEBAPI_PARAM_STEAMID_ACCOUNTID;
constexpr int CMsgGCRoutingInfo_RoutingMethod_RoutingMethod_ARRAYSIZE = CMsgGCRoutingInfo_RoutingMethod_RoutingMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGCRoutingInfo_RoutingMethod_descriptor();
template<typename T>
inline const std::string& CMsgGCRoutingInfo_RoutingMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgGCRoutingInfo_RoutingMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgGCRoutingInfo_RoutingMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgGCRoutingInfo_RoutingMethod_descriptor(), enum_t_value);
}
inline bool CMsgGCRoutingInfo_RoutingMethod_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgGCRoutingInfo_RoutingMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgGCRoutingInfo_RoutingMethod>(
    CMsgGCRoutingInfo_RoutingMethod_descriptor(), name, value);
}
enum CMsgGCMsgSetOptions_Option : int {
  CMsgGCMsgSetOptions_Option_NOTIFY_USER_SESSIONS = 0,
  CMsgGCMsgSetOptions_Option_NOTIFY_SERVER_SESSIONS = 1,
  CMsgGCMsgSetOptions_Option_NOTIFY_ACHIEVEMENTS = 2,
  CMsgGCMsgSetOptions_Option_NOTIFY_VAC_ACTION = 3
};
bool CMsgGCMsgSetOptions_Option_IsValid(int value);
constexpr CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions_Option_Option_MIN = CMsgGCMsgSetOptions_Option_NOTIFY_USER_SESSIONS;
constexpr CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions_Option_Option_MAX = CMsgGCMsgSetOptions_Option_NOTIFY_VAC_ACTION;
constexpr int CMsgGCMsgSetOptions_Option_Option_ARRAYSIZE = CMsgGCMsgSetOptions_Option_Option_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGCMsgSetOptions_Option_descriptor();
template<typename T>
inline const std::string& CMsgGCMsgSetOptions_Option_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgGCMsgSetOptions_Option>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgGCMsgSetOptions_Option_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgGCMsgSetOptions_Option_descriptor(), enum_t_value);
}
inline bool CMsgGCMsgSetOptions_Option_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgGCMsgSetOptions_Option* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgGCMsgSetOptions_Option>(
    CMsgGCMsgSetOptions_Option_descriptor(), name, value);
}
enum CMsgGCMsgSetOptions_GCSQLVersion : int {
  CMsgGCMsgSetOptions_GCSQLVersion_GCSQL_VERSION_BASELINE = 1,
  CMsgGCMsgSetOptions_GCSQLVersion_GCSQL_VERSION_BOOLTYPE = 2
};
bool CMsgGCMsgSetOptions_GCSQLVersion_IsValid(int value);
constexpr CMsgGCMsgSetOptions_GCSQLVersion CMsgGCMsgSetOptions_GCSQLVersion_GCSQLVersion_MIN = CMsgGCMsgSetOptions_GCSQLVersion_GCSQL_VERSION_BASELINE;
constexpr CMsgGCMsgSetOptions_GCSQLVersion CMsgGCMsgSetOptions_GCSQLVersion_GCSQLVersion_MAX = CMsgGCMsgSetOptions_GCSQLVersion_GCSQL_VERSION_BOOLTYPE;
constexpr int CMsgGCMsgSetOptions_GCSQLVersion_GCSQLVersion_ARRAYSIZE = CMsgGCMsgSetOptions_GCSQLVersion_GCSQLVersion_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGCMsgSetOptions_GCSQLVersion_descriptor();
template<typename T>
inline const std::string& CMsgGCMsgSetOptions_GCSQLVersion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgGCMsgSetOptions_GCSQLVersion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgGCMsgSetOptions_GCSQLVersion_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgGCMsgSetOptions_GCSQLVersion_descriptor(), enum_t_value);
}
inline bool CMsgGCMsgSetOptions_GCSQLVersion_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgGCMsgSetOptions_GCSQLVersion* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgGCMsgSetOptions_GCSQLVersion>(
    CMsgGCMsgSetOptions_GCSQLVersion_descriptor(), name, value);
}
enum CMsgDPPartnerMicroTxnsResponse_EErrorCode : int {
  CMsgDPPartnerMicroTxnsResponse_EErrorCode_k_MsgValid = 0,
  CMsgDPPartnerMicroTxnsResponse_EErrorCode_k_MsgInvalidAppID = 1,
  CMsgDPPartnerMicroTxnsResponse_EErrorCode_k_MsgInvalidPartnerInfo = 2,
  CMsgDPPartnerMicroTxnsResponse_EErrorCode_k_MsgNoTransactions = 3,
  CMsgDPPartnerMicroTxnsResponse_EErrorCode_k_MsgSQLFailure = 4,
  CMsgDPPartnerMicroTxnsResponse_EErrorCode_k_MsgPartnerInfoDiscrepancy = 5,
  CMsgDPPartnerMicroTxnsResponse_EErrorCode_k_MsgTransactionInsertFailed = 7,
  CMsgDPPartnerMicroTxnsResponse_EErrorCode_k_MsgAlreadyRunning = 8,
  CMsgDPPartnerMicroTxnsResponse_EErrorCode_k_MsgInvalidTransactionData = 9
};
bool CMsgDPPartnerMicroTxnsResponse_EErrorCode_IsValid(int value);
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse_EErrorCode_EErrorCode_MIN = CMsgDPPartnerMicroTxnsResponse_EErrorCode_k_MsgValid;
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse_EErrorCode_EErrorCode_MAX = CMsgDPPartnerMicroTxnsResponse_EErrorCode_k_MsgInvalidTransactionData;
constexpr int CMsgDPPartnerMicroTxnsResponse_EErrorCode_EErrorCode_ARRAYSIZE = CMsgDPPartnerMicroTxnsResponse_EErrorCode_EErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDPPartnerMicroTxnsResponse_EErrorCode_descriptor();
template<typename T>
inline const std::string& CMsgDPPartnerMicroTxnsResponse_EErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDPPartnerMicroTxnsResponse_EErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDPPartnerMicroTxnsResponse_EErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDPPartnerMicroTxnsResponse_EErrorCode_descriptor(), enum_t_value);
}
inline bool CMsgDPPartnerMicroTxnsResponse_EErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDPPartnerMicroTxnsResponse_EErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDPPartnerMicroTxnsResponse_EErrorCode>(
    CMsgDPPartnerMicroTxnsResponse_EErrorCode_descriptor(), name, value);
}
enum EMobilePaymentProvider : int {
  k_EMobilePaymentProvider_Invalid = 0,
  k_EMobilePaymentProvider_GooglePlay = 1,
  k_EMobilePaymentProvider_AppleAppStore = 2
};
bool EMobilePaymentProvider_IsValid(int value);
constexpr EMobilePaymentProvider EMobilePaymentProvider_MIN = k_EMobilePaymentProvider_Invalid;
constexpr EMobilePaymentProvider EMobilePaymentProvider_MAX = k_EMobilePaymentProvider_AppleAppStore;
constexpr int EMobilePaymentProvider_ARRAYSIZE = EMobilePaymentProvider_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMobilePaymentProvider_descriptor();
template<typename T>
inline const std::string& EMobilePaymentProvider_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMobilePaymentProvider>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMobilePaymentProvider_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMobilePaymentProvider_descriptor(), enum_t_value);
}
inline bool EMobilePaymentProvider_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMobilePaymentProvider* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMobilePaymentProvider>(
    EMobilePaymentProvider_descriptor(), name, value);
}
// ===================================================================

class CMsgWebAPIKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgWebAPIKey) */ {
 public:
  inline CMsgWebAPIKey() : CMsgWebAPIKey(nullptr) {}
  ~CMsgWebAPIKey() override;
  explicit PROTOBUF_CONSTEXPR CMsgWebAPIKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgWebAPIKey(const CMsgWebAPIKey& from);
  CMsgWebAPIKey(CMsgWebAPIKey&& from) noexcept
    : CMsgWebAPIKey() {
    *this = ::std::move(from);
  }

  inline CMsgWebAPIKey& operator=(const CMsgWebAPIKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgWebAPIKey& operator=(CMsgWebAPIKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgWebAPIKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgWebAPIKey* internal_default_instance() {
    return reinterpret_cast<const CMsgWebAPIKey*>(
               &_CMsgWebAPIKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgWebAPIKey& a, CMsgWebAPIKey& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgWebAPIKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgWebAPIKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgWebAPIKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgWebAPIKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgWebAPIKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgWebAPIKey& from) {
    CMsgWebAPIKey::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgWebAPIKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgWebAPIKey";
  }
  protected:
  explicit CMsgWebAPIKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainFieldNumber = 5,
    kAccountIdFieldNumber = 2,
    kPublisherGroupIdFieldNumber = 3,
    kKeyIdFieldNumber = 4,
    kStatusFieldNumber = 1,
  };
  // optional string domain = 5;
  bool has_domain() const;
  private:
  bool _internal_has_domain() const;
  public:
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // optional uint32 account_id = 2 [default = 0];
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 publisher_group_id = 3 [default = 0];
  bool has_publisher_group_id() const;
  private:
  bool _internal_has_publisher_group_id() const;
  public:
  void clear_publisher_group_id();
  uint32_t publisher_group_id() const;
  void set_publisher_group_id(uint32_t value);
  private:
  uint32_t _internal_publisher_group_id() const;
  void _internal_set_publisher_group_id(uint32_t value);
  public:

  // optional uint32 key_id = 4;
  bool has_key_id() const;
  private:
  bool _internal_has_key_id() const;
  public:
  void clear_key_id();
  uint32_t key_id() const;
  void set_key_id(uint32_t value);
  private:
  uint32_t _internal_key_id() const;
  void _internal_set_key_id(uint32_t value);
  public:

  // optional uint32 status = 1 [default = 255];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgWebAPIKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
    uint32_t account_id_;
    uint32_t publisher_group_id_;
    uint32_t key_id_;
    uint32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgHttpRequest_RequestHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgHttpRequest.RequestHeader) */ {
 public:
  inline CMsgHttpRequest_RequestHeader() : CMsgHttpRequest_RequestHeader(nullptr) {}
  ~CMsgHttpRequest_RequestHeader() override;
  explicit PROTOBUF_CONSTEXPR CMsgHttpRequest_RequestHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgHttpRequest_RequestHeader(const CMsgHttpRequest_RequestHeader& from);
  CMsgHttpRequest_RequestHeader(CMsgHttpRequest_RequestHeader&& from) noexcept
    : CMsgHttpRequest_RequestHeader() {
    *this = ::std::move(from);
  }

  inline CMsgHttpRequest_RequestHeader& operator=(const CMsgHttpRequest_RequestHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgHttpRequest_RequestHeader& operator=(CMsgHttpRequest_RequestHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgHttpRequest_RequestHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgHttpRequest_RequestHeader* internal_default_instance() {
    return reinterpret_cast<const CMsgHttpRequest_RequestHeader*>(
               &_CMsgHttpRequest_RequestHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgHttpRequest_RequestHeader& a, CMsgHttpRequest_RequestHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgHttpRequest_RequestHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgHttpRequest_RequestHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgHttpRequest_RequestHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgHttpRequest_RequestHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgHttpRequest_RequestHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgHttpRequest_RequestHeader& from) {
    CMsgHttpRequest_RequestHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgHttpRequest_RequestHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgHttpRequest.RequestHeader";
  }
  protected:
  explicit CMsgHttpRequest_RequestHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CMsgHttpRequest.RequestHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgHttpRequest_QueryParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgHttpRequest.QueryParam) */ {
 public:
  inline CMsgHttpRequest_QueryParam() : CMsgHttpRequest_QueryParam(nullptr) {}
  ~CMsgHttpRequest_QueryParam() override;
  explicit PROTOBUF_CONSTEXPR CMsgHttpRequest_QueryParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgHttpRequest_QueryParam(const CMsgHttpRequest_QueryParam& from);
  CMsgHttpRequest_QueryParam(CMsgHttpRequest_QueryParam&& from) noexcept
    : CMsgHttpRequest_QueryParam() {
    *this = ::std::move(from);
  }

  inline CMsgHttpRequest_QueryParam& operator=(const CMsgHttpRequest_QueryParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgHttpRequest_QueryParam& operator=(CMsgHttpRequest_QueryParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgHttpRequest_QueryParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgHttpRequest_QueryParam* internal_default_instance() {
    return reinterpret_cast<const CMsgHttpRequest_QueryParam*>(
               &_CMsgHttpRequest_QueryParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgHttpRequest_QueryParam& a, CMsgHttpRequest_QueryParam& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgHttpRequest_QueryParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgHttpRequest_QueryParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgHttpRequest_QueryParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgHttpRequest_QueryParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgHttpRequest_QueryParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgHttpRequest_QueryParam& from) {
    CMsgHttpRequest_QueryParam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgHttpRequest_QueryParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgHttpRequest.QueryParam";
  }
  protected:
  explicit CMsgHttpRequest_QueryParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bytes value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CMsgHttpRequest.QueryParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgHttpRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgHttpRequest) */ {
 public:
  inline CMsgHttpRequest() : CMsgHttpRequest(nullptr) {}
  ~CMsgHttpRequest() override;
  explicit PROTOBUF_CONSTEXPR CMsgHttpRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgHttpRequest(const CMsgHttpRequest& from);
  CMsgHttpRequest(CMsgHttpRequest&& from) noexcept
    : CMsgHttpRequest() {
    *this = ::std::move(from);
  }

  inline CMsgHttpRequest& operator=(const CMsgHttpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgHttpRequest& operator=(CMsgHttpRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgHttpRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgHttpRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgHttpRequest*>(
               &_CMsgHttpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgHttpRequest& a, CMsgHttpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgHttpRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgHttpRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgHttpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgHttpRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgHttpRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgHttpRequest& from) {
    CMsgHttpRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgHttpRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgHttpRequest";
  }
  protected:
  explicit CMsgHttpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgHttpRequest_RequestHeader RequestHeader;
  typedef CMsgHttpRequest_QueryParam QueryParam;

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 4,
    kGetParamsFieldNumber = 5,
    kPostParamsFieldNumber = 6,
    kHostnameFieldNumber = 2,
    kUrlFieldNumber = 3,
    kBodyFieldNumber = 7,
    kRequestMethodFieldNumber = 1,
    kAbsoluteTimeoutFieldNumber = 8,
    kUseHttpsFieldNumber = 9,
  };
  // repeated .CMsgHttpRequest.RequestHeader headers = 4;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::CMsgHttpRequest_RequestHeader* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHttpRequest_RequestHeader >*
      mutable_headers();
  private:
  const ::CMsgHttpRequest_RequestHeader& _internal_headers(int index) const;
  ::CMsgHttpRequest_RequestHeader* _internal_add_headers();
  public:
  const ::CMsgHttpRequest_RequestHeader& headers(int index) const;
  ::CMsgHttpRequest_RequestHeader* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHttpRequest_RequestHeader >&
      headers() const;

  // repeated .CMsgHttpRequest.QueryParam get_params = 5;
  int get_params_size() const;
  private:
  int _internal_get_params_size() const;
  public:
  void clear_get_params();
  ::CMsgHttpRequest_QueryParam* mutable_get_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHttpRequest_QueryParam >*
      mutable_get_params();
  private:
  const ::CMsgHttpRequest_QueryParam& _internal_get_params(int index) const;
  ::CMsgHttpRequest_QueryParam* _internal_add_get_params();
  public:
  const ::CMsgHttpRequest_QueryParam& get_params(int index) const;
  ::CMsgHttpRequest_QueryParam* add_get_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHttpRequest_QueryParam >&
      get_params() const;

  // repeated .CMsgHttpRequest.QueryParam post_params = 6;
  int post_params_size() const;
  private:
  int _internal_post_params_size() const;
  public:
  void clear_post_params();
  ::CMsgHttpRequest_QueryParam* mutable_post_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHttpRequest_QueryParam >*
      mutable_post_params();
  private:
  const ::CMsgHttpRequest_QueryParam& _internal_post_params(int index) const;
  ::CMsgHttpRequest_QueryParam* _internal_add_post_params();
  public:
  const ::CMsgHttpRequest_QueryParam& post_params(int index) const;
  ::CMsgHttpRequest_QueryParam* add_post_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHttpRequest_QueryParam >&
      post_params() const;

  // optional string hostname = 2;
  bool has_hostname() const;
  private:
  bool _internal_has_hostname() const;
  public:
  void clear_hostname();
  const std::string& hostname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hostname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // optional string url = 3;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional bytes body = 7;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // optional uint32 request_method = 1;
  bool has_request_method() const;
  private:
  bool _internal_has_request_method() const;
  public:
  void clear_request_method();
  uint32_t request_method() const;
  void set_request_method(uint32_t value);
  private:
  uint32_t _internal_request_method() const;
  void _internal_set_request_method(uint32_t value);
  public:

  // optional uint32 absolute_timeout = 8;
  bool has_absolute_timeout() const;
  private:
  bool _internal_has_absolute_timeout() const;
  public:
  void clear_absolute_timeout();
  uint32_t absolute_timeout() const;
  void set_absolute_timeout(uint32_t value);
  private:
  uint32_t _internal_absolute_timeout() const;
  void _internal_set_absolute_timeout(uint32_t value);
  public:

  // optional bool use_https = 9;
  bool has_use_https() const;
  private:
  bool _internal_has_use_https() const;
  public:
  void clear_use_https();
  bool use_https() const;
  void set_use_https(bool value);
  private:
  bool _internal_use_https() const;
  void _internal_set_use_https(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgHttpRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHttpRequest_RequestHeader > headers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHttpRequest_QueryParam > get_params_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHttpRequest_QueryParam > post_params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    uint32_t request_method_;
    uint32_t absolute_timeout_;
    bool use_https_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgWebAPIRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgWebAPIRequest) */ {
 public:
  inline CMsgWebAPIRequest() : CMsgWebAPIRequest(nullptr) {}
  ~CMsgWebAPIRequest() override;
  explicit PROTOBUF_CONSTEXPR CMsgWebAPIRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgWebAPIRequest(const CMsgWebAPIRequest& from);
  CMsgWebAPIRequest(CMsgWebAPIRequest&& from) noexcept
    : CMsgWebAPIRequest() {
    *this = ::std::move(from);
  }

  inline CMsgWebAPIRequest& operator=(const CMsgWebAPIRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgWebAPIRequest& operator=(CMsgWebAPIRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgWebAPIRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgWebAPIRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgWebAPIRequest*>(
               &_CMsgWebAPIRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgWebAPIRequest& a, CMsgWebAPIRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgWebAPIRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgWebAPIRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgWebAPIRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgWebAPIRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgWebAPIRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgWebAPIRequest& from) {
    CMsgWebAPIRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgWebAPIRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgWebAPIRequest";
  }
  protected:
  explicit CMsgWebAPIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceNameFieldNumber = 2,
    kMethodNameFieldNumber = 3,
    kApiKeyFieldNumber = 5,
    kRequestFieldNumber = 6,
    kVersionFieldNumber = 4,
    kRoutingAppIdFieldNumber = 7,
  };
  // optional string interface_name = 2;
  bool has_interface_name() const;
  private:
  bool _internal_has_interface_name() const;
  public:
  void clear_interface_name();
  const std::string& interface_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_interface_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_interface_name();
  PROTOBUF_NODISCARD std::string* release_interface_name();
  void set_allocated_interface_name(std::string* interface_name);
  private:
  const std::string& _internal_interface_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interface_name(const std::string& value);
  std::string* _internal_mutable_interface_name();
  public:

  // optional string method_name = 3;
  bool has_method_name() const;
  private:
  bool _internal_has_method_name() const;
  public:
  void clear_method_name();
  const std::string& method_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method_name();
  PROTOBUF_NODISCARD std::string* release_method_name();
  void set_allocated_method_name(std::string* method_name);
  private:
  const std::string& _internal_method_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method_name(const std::string& value);
  std::string* _internal_mutable_method_name();
  public:

  // optional .CMsgWebAPIKey api_key = 5;
  bool has_api_key() const;
  private:
  bool _internal_has_api_key() const;
  public:
  void clear_api_key();
  const ::CMsgWebAPIKey& api_key() const;
  PROTOBUF_NODISCARD ::CMsgWebAPIKey* release_api_key();
  ::CMsgWebAPIKey* mutable_api_key();
  void set_allocated_api_key(::CMsgWebAPIKey* api_key);
  private:
  const ::CMsgWebAPIKey& _internal_api_key() const;
  ::CMsgWebAPIKey* _internal_mutable_api_key();
  public:
  void unsafe_arena_set_allocated_api_key(
      ::CMsgWebAPIKey* api_key);
  ::CMsgWebAPIKey* unsafe_arena_release_api_key();

  // optional .CMsgHttpRequest request = 6;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::CMsgHttpRequest& request() const;
  PROTOBUF_NODISCARD ::CMsgHttpRequest* release_request();
  ::CMsgHttpRequest* mutable_request();
  void set_allocated_request(::CMsgHttpRequest* request);
  private:
  const ::CMsgHttpRequest& _internal_request() const;
  ::CMsgHttpRequest* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::CMsgHttpRequest* request);
  ::CMsgHttpRequest* unsafe_arena_release_request();

  // optional uint32 version = 4;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // optional uint32 routing_app_id = 7;
  bool has_routing_app_id() const;
  private:
  bool _internal_has_routing_app_id() const;
  public:
  void clear_routing_app_id();
  uint32_t routing_app_id() const;
  void set_routing_app_id(uint32_t value);
  private:
  uint32_t _internal_routing_app_id() const;
  void _internal_set_routing_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgWebAPIRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
    ::CMsgWebAPIKey* api_key_;
    ::CMsgHttpRequest* request_;
    uint32_t version_;
    uint32_t routing_app_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgHttpResponse_ResponseHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgHttpResponse.ResponseHeader) */ {
 public:
  inline CMsgHttpResponse_ResponseHeader() : CMsgHttpResponse_ResponseHeader(nullptr) {}
  ~CMsgHttpResponse_ResponseHeader() override;
  explicit PROTOBUF_CONSTEXPR CMsgHttpResponse_ResponseHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgHttpResponse_ResponseHeader(const CMsgHttpResponse_ResponseHeader& from);
  CMsgHttpResponse_ResponseHeader(CMsgHttpResponse_ResponseHeader&& from) noexcept
    : CMsgHttpResponse_ResponseHeader() {
    *this = ::std::move(from);
  }

  inline CMsgHttpResponse_ResponseHeader& operator=(const CMsgHttpResponse_ResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgHttpResponse_ResponseHeader& operator=(CMsgHttpResponse_ResponseHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgHttpResponse_ResponseHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgHttpResponse_ResponseHeader* internal_default_instance() {
    return reinterpret_cast<const CMsgHttpResponse_ResponseHeader*>(
               &_CMsgHttpResponse_ResponseHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgHttpResponse_ResponseHeader& a, CMsgHttpResponse_ResponseHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgHttpResponse_ResponseHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgHttpResponse_ResponseHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgHttpResponse_ResponseHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgHttpResponse_ResponseHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgHttpResponse_ResponseHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgHttpResponse_ResponseHeader& from) {
    CMsgHttpResponse_ResponseHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgHttpResponse_ResponseHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgHttpResponse.ResponseHeader";
  }
  protected:
  explicit CMsgHttpResponse_ResponseHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CMsgHttpResponse.ResponseHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgHttpResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgHttpResponse) */ {
 public:
  inline CMsgHttpResponse() : CMsgHttpResponse(nullptr) {}
  ~CMsgHttpResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgHttpResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgHttpResponse(const CMsgHttpResponse& from);
  CMsgHttpResponse(CMsgHttpResponse&& from) noexcept
    : CMsgHttpResponse() {
    *this = ::std::move(from);
  }

  inline CMsgHttpResponse& operator=(const CMsgHttpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgHttpResponse& operator=(CMsgHttpResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgHttpResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgHttpResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgHttpResponse*>(
               &_CMsgHttpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgHttpResponse& a, CMsgHttpResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgHttpResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgHttpResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgHttpResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgHttpResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgHttpResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgHttpResponse& from) {
    CMsgHttpResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgHttpResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgHttpResponse";
  }
  protected:
  explicit CMsgHttpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgHttpResponse_ResponseHeader ResponseHeader;

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 2,
    kBodyFieldNumber = 3,
    kStatusCodeFieldNumber = 1,
  };
  // repeated .CMsgHttpResponse.ResponseHeader headers = 2;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::CMsgHttpResponse_ResponseHeader* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHttpResponse_ResponseHeader >*
      mutable_headers();
  private:
  const ::CMsgHttpResponse_ResponseHeader& _internal_headers(int index) const;
  ::CMsgHttpResponse_ResponseHeader* _internal_add_headers();
  public:
  const ::CMsgHttpResponse_ResponseHeader& headers(int index) const;
  ::CMsgHttpResponse_ResponseHeader* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHttpResponse_ResponseHeader >&
      headers() const;

  // optional bytes body = 3;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // optional uint32 status_code = 1;
  bool has_status_code() const;
  private:
  bool _internal_has_status_code() const;
  public:
  void clear_status_code();
  uint32_t status_code() const;
  void set_status_code(uint32_t value);
  private:
  uint32_t _internal_status_code() const;
  void _internal_set_status_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgHttpResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHttpResponse_ResponseHeader > headers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    uint32_t status_code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgAMFindAccounts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAMFindAccounts) */ {
 public:
  inline CMsgAMFindAccounts() : CMsgAMFindAccounts(nullptr) {}
  ~CMsgAMFindAccounts() override;
  explicit PROTOBUF_CONSTEXPR CMsgAMFindAccounts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAMFindAccounts(const CMsgAMFindAccounts& from);
  CMsgAMFindAccounts(CMsgAMFindAccounts&& from) noexcept
    : CMsgAMFindAccounts() {
    *this = ::std::move(from);
  }

  inline CMsgAMFindAccounts& operator=(const CMsgAMFindAccounts& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAMFindAccounts& operator=(CMsgAMFindAccounts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAMFindAccounts& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAMFindAccounts* internal_default_instance() {
    return reinterpret_cast<const CMsgAMFindAccounts*>(
               &_CMsgAMFindAccounts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgAMFindAccounts& a, CMsgAMFindAccounts& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAMFindAccounts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAMFindAccounts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAMFindAccounts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAMFindAccounts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAMFindAccounts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAMFindAccounts& from) {
    CMsgAMFindAccounts::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAMFindAccounts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAMFindAccounts";
  }
  protected:
  explicit CMsgAMFindAccounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchStringFieldNumber = 2,
    kSearchTypeFieldNumber = 1,
  };
  // optional string search_string = 2;
  bool has_search_string() const;
  private:
  bool _internal_has_search_string() const;
  public:
  void clear_search_string();
  const std::string& search_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_search_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_search_string();
  PROTOBUF_NODISCARD std::string* release_search_string();
  void set_allocated_search_string(std::string* search_string);
  private:
  const std::string& _internal_search_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_search_string(const std::string& value);
  std::string* _internal_mutable_search_string();
  public:

  // optional uint32 search_type = 1;
  bool has_search_type() const;
  private:
  bool _internal_has_search_type() const;
  public:
  void clear_search_type();
  uint32_t search_type() const;
  void set_search_type(uint32_t value);
  private:
  uint32_t _internal_search_type() const;
  void _internal_set_search_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAMFindAccounts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_string_;
    uint32_t search_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgAMFindAccountsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAMFindAccountsResponse) */ {
 public:
  inline CMsgAMFindAccountsResponse() : CMsgAMFindAccountsResponse(nullptr) {}
  ~CMsgAMFindAccountsResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgAMFindAccountsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAMFindAccountsResponse(const CMsgAMFindAccountsResponse& from);
  CMsgAMFindAccountsResponse(CMsgAMFindAccountsResponse&& from) noexcept
    : CMsgAMFindAccountsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgAMFindAccountsResponse& operator=(const CMsgAMFindAccountsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAMFindAccountsResponse& operator=(CMsgAMFindAccountsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAMFindAccountsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAMFindAccountsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgAMFindAccountsResponse*>(
               &_CMsgAMFindAccountsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgAMFindAccountsResponse& a, CMsgAMFindAccountsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAMFindAccountsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAMFindAccountsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAMFindAccountsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAMFindAccountsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAMFindAccountsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAMFindAccountsResponse& from) {
    CMsgAMFindAccountsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAMFindAccountsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAMFindAccountsResponse";
  }
  protected:
  explicit CMsgAMFindAccountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdFieldNumber = 1,
  };
  // repeated fixed64 steam_id = 1;
  int steam_id_size() const;
  private:
  int _internal_steam_id_size() const;
  public:
  void clear_steam_id();
  private:
  uint64_t _internal_steam_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_steam_id() const;
  void _internal_add_steam_id(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_steam_id();
  public:
  uint64_t steam_id(int index) const;
  void set_steam_id(int index, uint64_t value);
  void add_steam_id(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      steam_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_steam_id();

  // @@protoc_insertion_point(class_scope:CMsgAMFindAccountsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > steam_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgNotifyWatchdog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNotifyWatchdog) */ {
 public:
  inline CMsgNotifyWatchdog() : CMsgNotifyWatchdog(nullptr) {}
  ~CMsgNotifyWatchdog() override;
  explicit PROTOBUF_CONSTEXPR CMsgNotifyWatchdog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNotifyWatchdog(const CMsgNotifyWatchdog& from);
  CMsgNotifyWatchdog(CMsgNotifyWatchdog&& from) noexcept
    : CMsgNotifyWatchdog() {
    *this = ::std::move(from);
  }

  inline CMsgNotifyWatchdog& operator=(const CMsgNotifyWatchdog& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNotifyWatchdog& operator=(CMsgNotifyWatchdog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNotifyWatchdog& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgNotifyWatchdog* internal_default_instance() {
    return reinterpret_cast<const CMsgNotifyWatchdog*>(
               &_CMsgNotifyWatchdog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgNotifyWatchdog& a, CMsgNotifyWatchdog& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNotifyWatchdog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNotifyWatchdog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgNotifyWatchdog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgNotifyWatchdog>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgNotifyWatchdog& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgNotifyWatchdog& from) {
    CMsgNotifyWatchdog::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNotifyWatchdog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNotifyWatchdog";
  }
  protected:
  explicit CMsgNotifyWatchdog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 7,
    kRecipientFieldNumber = 12,
    kSourceFieldNumber = 1,
    kAlertTypeFieldNumber = 2,
    kCriticalFieldNumber = 4,
    kTimeFieldNumber = 5,
    kAppidFieldNumber = 6,
  };
  // optional string text = 7;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional string recipient = 12;
  bool has_recipient() const;
  private:
  bool _internal_has_recipient() const;
  public:
  void clear_recipient();
  const std::string& recipient() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recipient(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recipient();
  PROTOBUF_NODISCARD std::string* release_recipient();
  void set_allocated_recipient(std::string* recipient);
  private:
  const std::string& _internal_recipient() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient(const std::string& value);
  std::string* _internal_mutable_recipient();
  public:

  // optional uint32 source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  uint32_t source() const;
  void set_source(uint32_t value);
  private:
  uint32_t _internal_source() const;
  void _internal_set_source(uint32_t value);
  public:

  // optional uint32 alert_type = 2;
  bool has_alert_type() const;
  private:
  bool _internal_has_alert_type() const;
  public:
  void clear_alert_type();
  uint32_t alert_type() const;
  void set_alert_type(uint32_t value);
  private:
  uint32_t _internal_alert_type() const;
  void _internal_set_alert_type(uint32_t value);
  public:

  // optional bool critical = 4;
  bool has_critical() const;
  private:
  bool _internal_has_critical() const;
  public:
  void clear_critical();
  bool critical() const;
  void set_critical(bool value);
  private:
  bool _internal_critical() const;
  void _internal_set_critical(bool value);
  public:

  // optional uint32 time = 5;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // optional uint32 appid = 6;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgNotifyWatchdog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_;
    uint32_t source_;
    uint32_t alert_type_;
    bool critical_;
    uint32_t time_;
    uint32_t appid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgAMGetLicenses final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAMGetLicenses) */ {
 public:
  inline CMsgAMGetLicenses() : CMsgAMGetLicenses(nullptr) {}
  ~CMsgAMGetLicenses() override;
  explicit PROTOBUF_CONSTEXPR CMsgAMGetLicenses(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAMGetLicenses(const CMsgAMGetLicenses& from);
  CMsgAMGetLicenses(CMsgAMGetLicenses&& from) noexcept
    : CMsgAMGetLicenses() {
    *this = ::std::move(from);
  }

  inline CMsgAMGetLicenses& operator=(const CMsgAMGetLicenses& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAMGetLicenses& operator=(CMsgAMGetLicenses&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAMGetLicenses& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAMGetLicenses* internal_default_instance() {
    return reinterpret_cast<const CMsgAMGetLicenses*>(
               &_CMsgAMGetLicenses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgAMGetLicenses& a, CMsgAMGetLicenses& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAMGetLicenses* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAMGetLicenses* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAMGetLicenses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAMGetLicenses>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAMGetLicenses& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAMGetLicenses& from) {
    CMsgAMGetLicenses::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAMGetLicenses* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAMGetLicenses";
  }
  protected:
  explicit CMsgAMGetLicenses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAMGetLicenses)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t steamid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgPackageLicense final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPackageLicense) */ {
 public:
  inline CMsgPackageLicense() : CMsgPackageLicense(nullptr) {}
  ~CMsgPackageLicense() override;
  explicit PROTOBUF_CONSTEXPR CMsgPackageLicense(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPackageLicense(const CMsgPackageLicense& from);
  CMsgPackageLicense(CMsgPackageLicense&& from) noexcept
    : CMsgPackageLicense() {
    *this = ::std::move(from);
  }

  inline CMsgPackageLicense& operator=(const CMsgPackageLicense& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPackageLicense& operator=(CMsgPackageLicense&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPackageLicense& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPackageLicense* internal_default_instance() {
    return reinterpret_cast<const CMsgPackageLicense*>(
               &_CMsgPackageLicense_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgPackageLicense& a, CMsgPackageLicense& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPackageLicense* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPackageLicense* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPackageLicense* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPackageLicense>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPackageLicense& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgPackageLicense& from) {
    CMsgPackageLicense::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPackageLicense* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPackageLicense";
  }
  protected:
  explicit CMsgPackageLicense(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageIdFieldNumber = 1,
    kTimeCreatedFieldNumber = 2,
    kOwnerIdFieldNumber = 3,
  };
  // optional uint32 package_id = 1;
  bool has_package_id() const;
  private:
  bool _internal_has_package_id() const;
  public:
  void clear_package_id();
  uint32_t package_id() const;
  void set_package_id(uint32_t value);
  private:
  uint32_t _internal_package_id() const;
  void _internal_set_package_id(uint32_t value);
  public:

  // optional uint32 time_created = 2;
  bool has_time_created() const;
  private:
  bool _internal_has_time_created() const;
  public:
  void clear_time_created();
  uint32_t time_created() const;
  void set_time_created(uint32_t value);
  private:
  uint32_t _internal_time_created() const;
  void _internal_set_time_created(uint32_t value);
  public:

  // optional uint32 owner_id = 3;
  bool has_owner_id() const;
  private:
  bool _internal_has_owner_id() const;
  public:
  void clear_owner_id();
  uint32_t owner_id() const;
  void set_owner_id(uint32_t value);
  private:
  uint32_t _internal_owner_id() const;
  void _internal_set_owner_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPackageLicense)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t package_id_;
    uint32_t time_created_;
    uint32_t owner_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgAMGetLicensesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAMGetLicensesResponse) */ {
 public:
  inline CMsgAMGetLicensesResponse() : CMsgAMGetLicensesResponse(nullptr) {}
  ~CMsgAMGetLicensesResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgAMGetLicensesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAMGetLicensesResponse(const CMsgAMGetLicensesResponse& from);
  CMsgAMGetLicensesResponse(CMsgAMGetLicensesResponse&& from) noexcept
    : CMsgAMGetLicensesResponse() {
    *this = ::std::move(from);
  }

  inline CMsgAMGetLicensesResponse& operator=(const CMsgAMGetLicensesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAMGetLicensesResponse& operator=(CMsgAMGetLicensesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAMGetLicensesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAMGetLicensesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgAMGetLicensesResponse*>(
               &_CMsgAMGetLicensesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgAMGetLicensesResponse& a, CMsgAMGetLicensesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAMGetLicensesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAMGetLicensesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAMGetLicensesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAMGetLicensesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAMGetLicensesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAMGetLicensesResponse& from) {
    CMsgAMGetLicensesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAMGetLicensesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAMGetLicensesResponse";
  }
  protected:
  explicit CMsgAMGetLicensesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLicenseFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // repeated .CMsgPackageLicense license = 1;
  int license_size() const;
  private:
  int _internal_license_size() const;
  public:
  void clear_license();
  ::CMsgPackageLicense* mutable_license(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPackageLicense >*
      mutable_license();
  private:
  const ::CMsgPackageLicense& _internal_license(int index) const;
  ::CMsgPackageLicense* _internal_add_license();
  public:
  const ::CMsgPackageLicense& license(int index) const;
  ::CMsgPackageLicense* add_license();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPackageLicense >&
      license() const;

  // optional uint32 result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAMGetLicensesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPackageLicense > license_;
    uint32_t result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgAMGetUserGameStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAMGetUserGameStats) */ {
 public:
  inline CMsgAMGetUserGameStats() : CMsgAMGetUserGameStats(nullptr) {}
  ~CMsgAMGetUserGameStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgAMGetUserGameStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAMGetUserGameStats(const CMsgAMGetUserGameStats& from);
  CMsgAMGetUserGameStats(CMsgAMGetUserGameStats&& from) noexcept
    : CMsgAMGetUserGameStats() {
    *this = ::std::move(from);
  }

  inline CMsgAMGetUserGameStats& operator=(const CMsgAMGetUserGameStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAMGetUserGameStats& operator=(CMsgAMGetUserGameStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAMGetUserGameStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAMGetUserGameStats* internal_default_instance() {
    return reinterpret_cast<const CMsgAMGetUserGameStats*>(
               &_CMsgAMGetUserGameStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgAMGetUserGameStats& a, CMsgAMGetUserGameStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAMGetUserGameStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAMGetUserGameStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAMGetUserGameStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAMGetUserGameStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAMGetUserGameStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAMGetUserGameStats& from) {
    CMsgAMGetUserGameStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAMGetUserGameStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAMGetUserGameStats";
  }
  protected:
  explicit CMsgAMGetUserGameStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 3,
    kSteamIdFieldNumber = 1,
    kGameIdFieldNumber = 2,
  };
  // repeated uint32 stats = 3;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  private:
  uint32_t _internal_stats(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_stats() const;
  void _internal_add_stats(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_stats();
  public:
  uint32_t stats(int index) const;
  void set_stats(int index, uint32_t value);
  void add_stats(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      stats() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_stats();

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // optional fixed64 game_id = 2;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  uint64_t game_id() const;
  void set_game_id(uint64_t value);
  private:
  uint64_t _internal_game_id() const;
  void _internal_set_game_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAMGetUserGameStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > stats_;
    uint64_t steam_id_;
    uint64_t game_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgAMGetUserGameStatsResponse_Stats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAMGetUserGameStatsResponse.Stats) */ {
 public:
  inline CMsgAMGetUserGameStatsResponse_Stats() : CMsgAMGetUserGameStatsResponse_Stats(nullptr) {}
  ~CMsgAMGetUserGameStatsResponse_Stats() override;
  explicit PROTOBUF_CONSTEXPR CMsgAMGetUserGameStatsResponse_Stats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAMGetUserGameStatsResponse_Stats(const CMsgAMGetUserGameStatsResponse_Stats& from);
  CMsgAMGetUserGameStatsResponse_Stats(CMsgAMGetUserGameStatsResponse_Stats&& from) noexcept
    : CMsgAMGetUserGameStatsResponse_Stats() {
    *this = ::std::move(from);
  }

  inline CMsgAMGetUserGameStatsResponse_Stats& operator=(const CMsgAMGetUserGameStatsResponse_Stats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAMGetUserGameStatsResponse_Stats& operator=(CMsgAMGetUserGameStatsResponse_Stats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAMGetUserGameStatsResponse_Stats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAMGetUserGameStatsResponse_Stats* internal_default_instance() {
    return reinterpret_cast<const CMsgAMGetUserGameStatsResponse_Stats*>(
               &_CMsgAMGetUserGameStatsResponse_Stats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMsgAMGetUserGameStatsResponse_Stats& a, CMsgAMGetUserGameStatsResponse_Stats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAMGetUserGameStatsResponse_Stats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAMGetUserGameStatsResponse_Stats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAMGetUserGameStatsResponse_Stats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAMGetUserGameStatsResponse_Stats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAMGetUserGameStatsResponse_Stats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAMGetUserGameStatsResponse_Stats& from) {
    CMsgAMGetUserGameStatsResponse_Stats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAMGetUserGameStatsResponse_Stats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAMGetUserGameStatsResponse.Stats";
  }
  protected:
  explicit CMsgAMGetUserGameStatsResponse_Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatIdFieldNumber = 1,
    kStatValueFieldNumber = 2,
  };
  // optional uint32 stat_id = 1;
  bool has_stat_id() const;
  private:
  bool _internal_has_stat_id() const;
  public:
  void clear_stat_id();
  uint32_t stat_id() const;
  void set_stat_id(uint32_t value);
  private:
  uint32_t _internal_stat_id() const;
  void _internal_set_stat_id(uint32_t value);
  public:

  // optional uint32 stat_value = 2;
  bool has_stat_value() const;
  private:
  bool _internal_has_stat_value() const;
  public:
  void clear_stat_value();
  uint32_t stat_value() const;
  void set_stat_value(uint32_t value);
  private:
  uint32_t _internal_stat_value() const;
  void _internal_set_stat_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAMGetUserGameStatsResponse.Stats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t stat_id_;
    uint32_t stat_value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgAMGetUserGameStatsResponse_Achievement_Blocks final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAMGetUserGameStatsResponse.Achievement_Blocks) */ {
 public:
  inline CMsgAMGetUserGameStatsResponse_Achievement_Blocks() : CMsgAMGetUserGameStatsResponse_Achievement_Blocks(nullptr) {}
  ~CMsgAMGetUserGameStatsResponse_Achievement_Blocks() override;
  explicit PROTOBUF_CONSTEXPR CMsgAMGetUserGameStatsResponse_Achievement_Blocks(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAMGetUserGameStatsResponse_Achievement_Blocks(const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& from);
  CMsgAMGetUserGameStatsResponse_Achievement_Blocks(CMsgAMGetUserGameStatsResponse_Achievement_Blocks&& from) noexcept
    : CMsgAMGetUserGameStatsResponse_Achievement_Blocks() {
    *this = ::std::move(from);
  }

  inline CMsgAMGetUserGameStatsResponse_Achievement_Blocks& operator=(const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAMGetUserGameStatsResponse_Achievement_Blocks& operator=(CMsgAMGetUserGameStatsResponse_Achievement_Blocks&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAMGetUserGameStatsResponse_Achievement_Blocks* internal_default_instance() {
    return reinterpret_cast<const CMsgAMGetUserGameStatsResponse_Achievement_Blocks*>(
               &_CMsgAMGetUserGameStatsResponse_Achievement_Blocks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMsgAMGetUserGameStatsResponse_Achievement_Blocks& a, CMsgAMGetUserGameStatsResponse_Achievement_Blocks& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAMGetUserGameStatsResponse_Achievement_Blocks* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAMGetUserGameStatsResponse_Achievement_Blocks* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAMGetUserGameStatsResponse_Achievement_Blocks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAMGetUserGameStatsResponse_Achievement_Blocks>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& from) {
    CMsgAMGetUserGameStatsResponse_Achievement_Blocks::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAMGetUserGameStatsResponse_Achievement_Blocks* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAMGetUserGameStatsResponse.Achievement_Blocks";
  }
  protected:
  explicit CMsgAMGetUserGameStatsResponse_Achievement_Blocks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAchievementIdFieldNumber = 1,
    kAchievementBitIdFieldNumber = 2,
    kUnlockTimeFieldNumber = 3,
  };
  // optional uint32 achievement_id = 1;
  bool has_achievement_id() const;
  private:
  bool _internal_has_achievement_id() const;
  public:
  void clear_achievement_id();
  uint32_t achievement_id() const;
  void set_achievement_id(uint32_t value);
  private:
  uint32_t _internal_achievement_id() const;
  void _internal_set_achievement_id(uint32_t value);
  public:

  // optional uint32 achievement_bit_id = 2;
  bool has_achievement_bit_id() const;
  private:
  bool _internal_has_achievement_bit_id() const;
  public:
  void clear_achievement_bit_id();
  uint32_t achievement_bit_id() const;
  void set_achievement_bit_id(uint32_t value);
  private:
  uint32_t _internal_achievement_bit_id() const;
  void _internal_set_achievement_bit_id(uint32_t value);
  public:

  // optional fixed32 unlock_time = 3;
  bool has_unlock_time() const;
  private:
  bool _internal_has_unlock_time() const;
  public:
  void clear_unlock_time();
  uint32_t unlock_time() const;
  void set_unlock_time(uint32_t value);
  private:
  uint32_t _internal_unlock_time() const;
  void _internal_set_unlock_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t achievement_id_;
    uint32_t achievement_bit_id_;
    uint32_t unlock_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgAMGetUserGameStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAMGetUserGameStatsResponse) */ {
 public:
  inline CMsgAMGetUserGameStatsResponse() : CMsgAMGetUserGameStatsResponse(nullptr) {}
  ~CMsgAMGetUserGameStatsResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgAMGetUserGameStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAMGetUserGameStatsResponse(const CMsgAMGetUserGameStatsResponse& from);
  CMsgAMGetUserGameStatsResponse(CMsgAMGetUserGameStatsResponse&& from) noexcept
    : CMsgAMGetUserGameStatsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgAMGetUserGameStatsResponse& operator=(const CMsgAMGetUserGameStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAMGetUserGameStatsResponse& operator=(CMsgAMGetUserGameStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAMGetUserGameStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAMGetUserGameStatsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgAMGetUserGameStatsResponse*>(
               &_CMsgAMGetUserGameStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMsgAMGetUserGameStatsResponse& a, CMsgAMGetUserGameStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAMGetUserGameStatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAMGetUserGameStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAMGetUserGameStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAMGetUserGameStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAMGetUserGameStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAMGetUserGameStatsResponse& from) {
    CMsgAMGetUserGameStatsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAMGetUserGameStatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAMGetUserGameStatsResponse";
  }
  protected:
  explicit CMsgAMGetUserGameStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgAMGetUserGameStatsResponse_Stats Stats;
  typedef CMsgAMGetUserGameStatsResponse_Achievement_Blocks Achievement_Blocks;

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 4,
    kAchievementBlocksFieldNumber = 5,
    kSteamIdFieldNumber = 1,
    kGameIdFieldNumber = 2,
    kEresultFieldNumber = 3,
  };
  // repeated .CMsgAMGetUserGameStatsResponse.Stats stats = 4;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::CMsgAMGetUserGameStatsResponse_Stats* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAMGetUserGameStatsResponse_Stats >*
      mutable_stats();
  private:
  const ::CMsgAMGetUserGameStatsResponse_Stats& _internal_stats(int index) const;
  ::CMsgAMGetUserGameStatsResponse_Stats* _internal_add_stats();
  public:
  const ::CMsgAMGetUserGameStatsResponse_Stats& stats(int index) const;
  ::CMsgAMGetUserGameStatsResponse_Stats* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAMGetUserGameStatsResponse_Stats >&
      stats() const;

  // repeated .CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
  int achievement_blocks_size() const;
  private:
  int _internal_achievement_blocks_size() const;
  public:
  void clear_achievement_blocks();
  ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks* mutable_achievement_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks >*
      mutable_achievement_blocks();
  private:
  const ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks& _internal_achievement_blocks(int index) const;
  ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks* _internal_add_achievement_blocks();
  public:
  const ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks& achievement_blocks(int index) const;
  ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks* add_achievement_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks >&
      achievement_blocks() const;

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // optional fixed64 game_id = 2;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  uint64_t game_id() const;
  void set_game_id(uint64_t value);
  private:
  uint64_t _internal_game_id() const;
  void _internal_set_game_id(uint64_t value);
  public:

  // optional int32 eresult = 3 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAMGetUserGameStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAMGetUserGameStatsResponse_Stats > stats_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks > achievement_blocks_;
    uint64_t steam_id_;
    uint64_t game_id_;
    int32_t eresult_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCGetCommandList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCGetCommandList) */ {
 public:
  inline CMsgGCGetCommandList() : CMsgGCGetCommandList(nullptr) {}
  ~CMsgGCGetCommandList() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCGetCommandList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCGetCommandList(const CMsgGCGetCommandList& from);
  CMsgGCGetCommandList(CMsgGCGetCommandList&& from) noexcept
    : CMsgGCGetCommandList() {
    *this = ::std::move(from);
  }

  inline CMsgGCGetCommandList& operator=(const CMsgGCGetCommandList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCGetCommandList& operator=(CMsgGCGetCommandList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCGetCommandList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCGetCommandList* internal_default_instance() {
    return reinterpret_cast<const CMsgGCGetCommandList*>(
               &_CMsgGCGetCommandList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgGCGetCommandList& a, CMsgGCGetCommandList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCGetCommandList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCGetCommandList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCGetCommandList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCGetCommandList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCGetCommandList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCGetCommandList& from) {
    CMsgGCGetCommandList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCGetCommandList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCGetCommandList";
  }
  protected:
  explicit CMsgGCGetCommandList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandPrefixFieldNumber = 2,
    kAppIdFieldNumber = 1,
  };
  // optional string command_prefix = 2;
  bool has_command_prefix() const;
  private:
  bool _internal_has_command_prefix() const;
  public:
  void clear_command_prefix();
  const std::string& command_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command_prefix();
  PROTOBUF_NODISCARD std::string* release_command_prefix();
  void set_allocated_command_prefix(std::string* command_prefix);
  private:
  const std::string& _internal_command_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command_prefix(const std::string& value);
  std::string* _internal_mutable_command_prefix();
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCGetCommandList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_prefix_;
    uint32_t app_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCGetCommandListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCGetCommandListResponse) */ {
 public:
  inline CMsgGCGetCommandListResponse() : CMsgGCGetCommandListResponse(nullptr) {}
  ~CMsgGCGetCommandListResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCGetCommandListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCGetCommandListResponse(const CMsgGCGetCommandListResponse& from);
  CMsgGCGetCommandListResponse(CMsgGCGetCommandListResponse&& from) noexcept
    : CMsgGCGetCommandListResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCGetCommandListResponse& operator=(const CMsgGCGetCommandListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCGetCommandListResponse& operator=(CMsgGCGetCommandListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCGetCommandListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCGetCommandListResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCGetCommandListResponse*>(
               &_CMsgGCGetCommandListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgGCGetCommandListResponse& a, CMsgGCGetCommandListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCGetCommandListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCGetCommandListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCGetCommandListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCGetCommandListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCGetCommandListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCGetCommandListResponse& from) {
    CMsgGCGetCommandListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCGetCommandListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCGetCommandListResponse";
  }
  protected:
  explicit CMsgGCGetCommandListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandNameFieldNumber = 1,
  };
  // repeated string command_name = 1;
  int command_name_size() const;
  private:
  int _internal_command_name_size() const;
  public:
  void clear_command_name();
  const std::string& command_name(int index) const;
  std::string* mutable_command_name(int index);
  void set_command_name(int index, const std::string& value);
  void set_command_name(int index, std::string&& value);
  void set_command_name(int index, const char* value);
  void set_command_name(int index, const char* value, size_t size);
  std::string* add_command_name();
  void add_command_name(const std::string& value);
  void add_command_name(std::string&& value);
  void add_command_name(const char* value);
  void add_command_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& command_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_command_name();
  private:
  const std::string& _internal_command_name(int index) const;
  std::string* _internal_add_command_name();
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCGetCommandListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> command_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgMemCachedGet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgMemCachedGet) */ {
 public:
  inline CGCMsgMemCachedGet() : CGCMsgMemCachedGet(nullptr) {}
  ~CGCMsgMemCachedGet() override;
  explicit PROTOBUF_CONSTEXPR CGCMsgMemCachedGet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgMemCachedGet(const CGCMsgMemCachedGet& from);
  CGCMsgMemCachedGet(CGCMsgMemCachedGet&& from) noexcept
    : CGCMsgMemCachedGet() {
    *this = ::std::move(from);
  }

  inline CGCMsgMemCachedGet& operator=(const CGCMsgMemCachedGet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgMemCachedGet& operator=(CGCMsgMemCachedGet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgMemCachedGet& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgMemCachedGet* internal_default_instance() {
    return reinterpret_cast<const CGCMsgMemCachedGet*>(
               &_CGCMsgMemCachedGet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CGCMsgMemCachedGet& a, CGCMsgMemCachedGet& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgMemCachedGet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgMemCachedGet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGCMsgMemCachedGet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGCMsgMemCachedGet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGCMsgMemCachedGet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CGCMsgMemCachedGet& from) {
    CGCMsgMemCachedGet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsgMemCachedGet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgMemCachedGet";
  }
  protected:
  explicit CGCMsgMemCachedGet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
  };
  // repeated string keys = 1;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();
  private:
  const std::string& _internal_keys(int index) const;
  std::string* _internal_add_keys();
  public:

  // @@protoc_insertion_point(class_scope:CGCMsgMemCachedGet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgMemCachedGetResponse_ValueTag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgMemCachedGetResponse.ValueTag) */ {
 public:
  inline CGCMsgMemCachedGetResponse_ValueTag() : CGCMsgMemCachedGetResponse_ValueTag(nullptr) {}
  ~CGCMsgMemCachedGetResponse_ValueTag() override;
  explicit PROTOBUF_CONSTEXPR CGCMsgMemCachedGetResponse_ValueTag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgMemCachedGetResponse_ValueTag(const CGCMsgMemCachedGetResponse_ValueTag& from);
  CGCMsgMemCachedGetResponse_ValueTag(CGCMsgMemCachedGetResponse_ValueTag&& from) noexcept
    : CGCMsgMemCachedGetResponse_ValueTag() {
    *this = ::std::move(from);
  }

  inline CGCMsgMemCachedGetResponse_ValueTag& operator=(const CGCMsgMemCachedGetResponse_ValueTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgMemCachedGetResponse_ValueTag& operator=(CGCMsgMemCachedGetResponse_ValueTag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgMemCachedGetResponse_ValueTag& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgMemCachedGetResponse_ValueTag* internal_default_instance() {
    return reinterpret_cast<const CGCMsgMemCachedGetResponse_ValueTag*>(
               &_CGCMsgMemCachedGetResponse_ValueTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CGCMsgMemCachedGetResponse_ValueTag& a, CGCMsgMemCachedGetResponse_ValueTag& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgMemCachedGetResponse_ValueTag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgMemCachedGetResponse_ValueTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGCMsgMemCachedGetResponse_ValueTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGCMsgMemCachedGetResponse_ValueTag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGCMsgMemCachedGetResponse_ValueTag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CGCMsgMemCachedGetResponse_ValueTag& from) {
    CGCMsgMemCachedGetResponse_ValueTag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsgMemCachedGetResponse_ValueTag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgMemCachedGetResponse.ValueTag";
  }
  protected:
  explicit CGCMsgMemCachedGetResponse_ValueTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kFoundFieldNumber = 1,
  };
  // optional bytes value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional bool found = 1;
  bool has_found() const;
  private:
  bool _internal_has_found() const;
  public:
  void clear_found();
  bool found() const;
  void set_found(bool value);
  private:
  bool _internal_found() const;
  void _internal_set_found(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CGCMsgMemCachedGetResponse.ValueTag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    bool found_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgMemCachedGetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgMemCachedGetResponse) */ {
 public:
  inline CGCMsgMemCachedGetResponse() : CGCMsgMemCachedGetResponse(nullptr) {}
  ~CGCMsgMemCachedGetResponse() override;
  explicit PROTOBUF_CONSTEXPR CGCMsgMemCachedGetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgMemCachedGetResponse(const CGCMsgMemCachedGetResponse& from);
  CGCMsgMemCachedGetResponse(CGCMsgMemCachedGetResponse&& from) noexcept
    : CGCMsgMemCachedGetResponse() {
    *this = ::std::move(from);
  }

  inline CGCMsgMemCachedGetResponse& operator=(const CGCMsgMemCachedGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgMemCachedGetResponse& operator=(CGCMsgMemCachedGetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgMemCachedGetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgMemCachedGetResponse* internal_default_instance() {
    return reinterpret_cast<const CGCMsgMemCachedGetResponse*>(
               &_CGCMsgMemCachedGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CGCMsgMemCachedGetResponse& a, CGCMsgMemCachedGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgMemCachedGetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgMemCachedGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGCMsgMemCachedGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGCMsgMemCachedGetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGCMsgMemCachedGetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CGCMsgMemCachedGetResponse& from) {
    CGCMsgMemCachedGetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsgMemCachedGetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgMemCachedGetResponse";
  }
  protected:
  explicit CGCMsgMemCachedGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CGCMsgMemCachedGetResponse_ValueTag ValueTag;

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .CGCMsgMemCachedGetResponse.ValueTag values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::CGCMsgMemCachedGetResponse_ValueTag* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGCMsgMemCachedGetResponse_ValueTag >*
      mutable_values();
  private:
  const ::CGCMsgMemCachedGetResponse_ValueTag& _internal_values(int index) const;
  ::CGCMsgMemCachedGetResponse_ValueTag* _internal_add_values();
  public:
  const ::CGCMsgMemCachedGetResponse_ValueTag& values(int index) const;
  ::CGCMsgMemCachedGetResponse_ValueTag* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGCMsgMemCachedGetResponse_ValueTag >&
      values() const;

  // @@protoc_insertion_point(class_scope:CGCMsgMemCachedGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGCMsgMemCachedGetResponse_ValueTag > values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgMemCachedSet_KeyPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgMemCachedSet.KeyPair) */ {
 public:
  inline CGCMsgMemCachedSet_KeyPair() : CGCMsgMemCachedSet_KeyPair(nullptr) {}
  ~CGCMsgMemCachedSet_KeyPair() override;
  explicit PROTOBUF_CONSTEXPR CGCMsgMemCachedSet_KeyPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgMemCachedSet_KeyPair(const CGCMsgMemCachedSet_KeyPair& from);
  CGCMsgMemCachedSet_KeyPair(CGCMsgMemCachedSet_KeyPair&& from) noexcept
    : CGCMsgMemCachedSet_KeyPair() {
    *this = ::std::move(from);
  }

  inline CGCMsgMemCachedSet_KeyPair& operator=(const CGCMsgMemCachedSet_KeyPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgMemCachedSet_KeyPair& operator=(CGCMsgMemCachedSet_KeyPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgMemCachedSet_KeyPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgMemCachedSet_KeyPair* internal_default_instance() {
    return reinterpret_cast<const CGCMsgMemCachedSet_KeyPair*>(
               &_CGCMsgMemCachedSet_KeyPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CGCMsgMemCachedSet_KeyPair& a, CGCMsgMemCachedSet_KeyPair& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgMemCachedSet_KeyPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgMemCachedSet_KeyPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGCMsgMemCachedSet_KeyPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGCMsgMemCachedSet_KeyPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGCMsgMemCachedSet_KeyPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CGCMsgMemCachedSet_KeyPair& from) {
    CGCMsgMemCachedSet_KeyPair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsgMemCachedSet_KeyPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgMemCachedSet.KeyPair";
  }
  protected:
  explicit CGCMsgMemCachedSet_KeyPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bytes value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CGCMsgMemCachedSet.KeyPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgMemCachedSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgMemCachedSet) */ {
 public:
  inline CGCMsgMemCachedSet() : CGCMsgMemCachedSet(nullptr) {}
  ~CGCMsgMemCachedSet() override;
  explicit PROTOBUF_CONSTEXPR CGCMsgMemCachedSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgMemCachedSet(const CGCMsgMemCachedSet& from);
  CGCMsgMemCachedSet(CGCMsgMemCachedSet&& from) noexcept
    : CGCMsgMemCachedSet() {
    *this = ::std::move(from);
  }

  inline CGCMsgMemCachedSet& operator=(const CGCMsgMemCachedSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgMemCachedSet& operator=(CGCMsgMemCachedSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgMemCachedSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgMemCachedSet* internal_default_instance() {
    return reinterpret_cast<const CGCMsgMemCachedSet*>(
               &_CGCMsgMemCachedSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CGCMsgMemCachedSet& a, CGCMsgMemCachedSet& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgMemCachedSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgMemCachedSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGCMsgMemCachedSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGCMsgMemCachedSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGCMsgMemCachedSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CGCMsgMemCachedSet& from) {
    CGCMsgMemCachedSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsgMemCachedSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgMemCachedSet";
  }
  protected:
  explicit CGCMsgMemCachedSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CGCMsgMemCachedSet_KeyPair KeyPair;

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
  };
  // repeated .CGCMsgMemCachedSet.KeyPair keys = 1;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::CGCMsgMemCachedSet_KeyPair* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGCMsgMemCachedSet_KeyPair >*
      mutable_keys();
  private:
  const ::CGCMsgMemCachedSet_KeyPair& _internal_keys(int index) const;
  ::CGCMsgMemCachedSet_KeyPair* _internal_add_keys();
  public:
  const ::CGCMsgMemCachedSet_KeyPair& keys(int index) const;
  ::CGCMsgMemCachedSet_KeyPair* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGCMsgMemCachedSet_KeyPair >&
      keys() const;

  // @@protoc_insertion_point(class_scope:CGCMsgMemCachedSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGCMsgMemCachedSet_KeyPair > keys_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgMemCachedDelete final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgMemCachedDelete) */ {
 public:
  inline CGCMsgMemCachedDelete() : CGCMsgMemCachedDelete(nullptr) {}
  ~CGCMsgMemCachedDelete() override;
  explicit PROTOBUF_CONSTEXPR CGCMsgMemCachedDelete(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgMemCachedDelete(const CGCMsgMemCachedDelete& from);
  CGCMsgMemCachedDelete(CGCMsgMemCachedDelete&& from) noexcept
    : CGCMsgMemCachedDelete() {
    *this = ::std::move(from);
  }

  inline CGCMsgMemCachedDelete& operator=(const CGCMsgMemCachedDelete& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgMemCachedDelete& operator=(CGCMsgMemCachedDelete&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgMemCachedDelete& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgMemCachedDelete* internal_default_instance() {
    return reinterpret_cast<const CGCMsgMemCachedDelete*>(
               &_CGCMsgMemCachedDelete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CGCMsgMemCachedDelete& a, CGCMsgMemCachedDelete& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgMemCachedDelete* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgMemCachedDelete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGCMsgMemCachedDelete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGCMsgMemCachedDelete>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGCMsgMemCachedDelete& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CGCMsgMemCachedDelete& from) {
    CGCMsgMemCachedDelete::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsgMemCachedDelete* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgMemCachedDelete";
  }
  protected:
  explicit CGCMsgMemCachedDelete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
  };
  // repeated string keys = 1;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();
  private:
  const std::string& _internal_keys(int index) const;
  std::string* _internal_add_keys();
  public:

  // @@protoc_insertion_point(class_scope:CGCMsgMemCachedDelete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgMemCachedStats final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CGCMsgMemCachedStats) */ {
 public:
  inline CGCMsgMemCachedStats() : CGCMsgMemCachedStats(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CGCMsgMemCachedStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgMemCachedStats(const CGCMsgMemCachedStats& from);
  CGCMsgMemCachedStats(CGCMsgMemCachedStats&& from) noexcept
    : CGCMsgMemCachedStats() {
    *this = ::std::move(from);
  }

  inline CGCMsgMemCachedStats& operator=(const CGCMsgMemCachedStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgMemCachedStats& operator=(CGCMsgMemCachedStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgMemCachedStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgMemCachedStats* internal_default_instance() {
    return reinterpret_cast<const CGCMsgMemCachedStats*>(
               &_CGCMsgMemCachedStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CGCMsgMemCachedStats& a, CGCMsgMemCachedStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgMemCachedStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgMemCachedStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGCMsgMemCachedStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGCMsgMemCachedStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CGCMsgMemCachedStats& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CGCMsgMemCachedStats& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgMemCachedStats";
  }
  protected:
  explicit CGCMsgMemCachedStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGCMsgMemCachedStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgMemCachedStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgMemCachedStatsResponse) */ {
 public:
  inline CGCMsgMemCachedStatsResponse() : CGCMsgMemCachedStatsResponse(nullptr) {}
  ~CGCMsgMemCachedStatsResponse() override;
  explicit PROTOBUF_CONSTEXPR CGCMsgMemCachedStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgMemCachedStatsResponse(const CGCMsgMemCachedStatsResponse& from);
  CGCMsgMemCachedStatsResponse(CGCMsgMemCachedStatsResponse&& from) noexcept
    : CGCMsgMemCachedStatsResponse() {
    *this = ::std::move(from);
  }

  inline CGCMsgMemCachedStatsResponse& operator=(const CGCMsgMemCachedStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgMemCachedStatsResponse& operator=(CGCMsgMemCachedStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgMemCachedStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgMemCachedStatsResponse* internal_default_instance() {
    return reinterpret_cast<const CGCMsgMemCachedStatsResponse*>(
               &_CGCMsgMemCachedStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CGCMsgMemCachedStatsResponse& a, CGCMsgMemCachedStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgMemCachedStatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgMemCachedStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGCMsgMemCachedStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGCMsgMemCachedStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGCMsgMemCachedStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CGCMsgMemCachedStatsResponse& from) {
    CGCMsgMemCachedStatsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsgMemCachedStatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgMemCachedStatsResponse";
  }
  protected:
  explicit CGCMsgMemCachedStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrConnectionsFieldNumber = 1,
    kCmdGetFieldNumber = 2,
    kCmdSetFieldNumber = 3,
    kCmdFlushFieldNumber = 4,
    kGetHitsFieldNumber = 5,
    kGetMissesFieldNumber = 6,
    kDeleteHitsFieldNumber = 7,
    kDeleteMissesFieldNumber = 8,
    kBytesReadFieldNumber = 9,
    kBytesWrittenFieldNumber = 10,
    kLimitMaxbytesFieldNumber = 11,
    kCurrItemsFieldNumber = 12,
    kEvictionsFieldNumber = 13,
    kBytesFieldNumber = 14,
  };
  // optional uint64 curr_connections = 1;
  bool has_curr_connections() const;
  private:
  bool _internal_has_curr_connections() const;
  public:
  void clear_curr_connections();
  uint64_t curr_connections() const;
  void set_curr_connections(uint64_t value);
  private:
  uint64_t _internal_curr_connections() const;
  void _internal_set_curr_connections(uint64_t value);
  public:

  // optional uint64 cmd_get = 2;
  bool has_cmd_get() const;
  private:
  bool _internal_has_cmd_get() const;
  public:
  void clear_cmd_get();
  uint64_t cmd_get() const;
  void set_cmd_get(uint64_t value);
  private:
  uint64_t _internal_cmd_get() const;
  void _internal_set_cmd_get(uint64_t value);
  public:

  // optional uint64 cmd_set = 3;
  bool has_cmd_set() const;
  private:
  bool _internal_has_cmd_set() const;
  public:
  void clear_cmd_set();
  uint64_t cmd_set() const;
  void set_cmd_set(uint64_t value);
  private:
  uint64_t _internal_cmd_set() const;
  void _internal_set_cmd_set(uint64_t value);
  public:

  // optional uint64 cmd_flush = 4;
  bool has_cmd_flush() const;
  private:
  bool _internal_has_cmd_flush() const;
  public:
  void clear_cmd_flush();
  uint64_t cmd_flush() const;
  void set_cmd_flush(uint64_t value);
  private:
  uint64_t _internal_cmd_flush() const;
  void _internal_set_cmd_flush(uint64_t value);
  public:

  // optional uint64 get_hits = 5;
  bool has_get_hits() const;
  private:
  bool _internal_has_get_hits() const;
  public:
  void clear_get_hits();
  uint64_t get_hits() const;
  void set_get_hits(uint64_t value);
  private:
  uint64_t _internal_get_hits() const;
  void _internal_set_get_hits(uint64_t value);
  public:

  // optional uint64 get_misses = 6;
  bool has_get_misses() const;
  private:
  bool _internal_has_get_misses() const;
  public:
  void clear_get_misses();
  uint64_t get_misses() const;
  void set_get_misses(uint64_t value);
  private:
  uint64_t _internal_get_misses() const;
  void _internal_set_get_misses(uint64_t value);
  public:

  // optional uint64 delete_hits = 7;
  bool has_delete_hits() const;
  private:
  bool _internal_has_delete_hits() const;
  public:
  void clear_delete_hits();
  uint64_t delete_hits() const;
  void set_delete_hits(uint64_t value);
  private:
  uint64_t _internal_delete_hits() const;
  void _internal_set_delete_hits(uint64_t value);
  public:

  // optional uint64 delete_misses = 8;
  bool has_delete_misses() const;
  private:
  bool _internal_has_delete_misses() const;
  public:
  void clear_delete_misses();
  uint64_t delete_misses() const;
  void set_delete_misses(uint64_t value);
  private:
  uint64_t _internal_delete_misses() const;
  void _internal_set_delete_misses(uint64_t value);
  public:

  // optional uint64 bytes_read = 9;
  bool has_bytes_read() const;
  private:
  bool _internal_has_bytes_read() const;
  public:
  void clear_bytes_read();
  uint64_t bytes_read() const;
  void set_bytes_read(uint64_t value);
  private:
  uint64_t _internal_bytes_read() const;
  void _internal_set_bytes_read(uint64_t value);
  public:

  // optional uint64 bytes_written = 10;
  bool has_bytes_written() const;
  private:
  bool _internal_has_bytes_written() const;
  public:
  void clear_bytes_written();
  uint64_t bytes_written() const;
  void set_bytes_written(uint64_t value);
  private:
  uint64_t _internal_bytes_written() const;
  void _internal_set_bytes_written(uint64_t value);
  public:

  // optional uint64 limit_maxbytes = 11;
  bool has_limit_maxbytes() const;
  private:
  bool _internal_has_limit_maxbytes() const;
  public:
  void clear_limit_maxbytes();
  uint64_t limit_maxbytes() const;
  void set_limit_maxbytes(uint64_t value);
  private:
  uint64_t _internal_limit_maxbytes() const;
  void _internal_set_limit_maxbytes(uint64_t value);
  public:

  // optional uint64 curr_items = 12;
  bool has_curr_items() const;
  private:
  bool _internal_has_curr_items() const;
  public:
  void clear_curr_items();
  uint64_t curr_items() const;
  void set_curr_items(uint64_t value);
  private:
  uint64_t _internal_curr_items() const;
  void _internal_set_curr_items(uint64_t value);
  public:

  // optional uint64 evictions = 13;
  bool has_evictions() const;
  private:
  bool _internal_has_evictions() const;
  public:
  void clear_evictions();
  uint64_t evictions() const;
  void set_evictions(uint64_t value);
  private:
  uint64_t _internal_evictions() const;
  void _internal_set_evictions(uint64_t value);
  public:

  // optional uint64 bytes = 14;
  bool has_bytes() const;
  private:
  bool _internal_has_bytes() const;
  public:
  void clear_bytes();
  uint64_t bytes() const;
  void set_bytes(uint64_t value);
  private:
  uint64_t _internal_bytes() const;
  void _internal_set_bytes(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CGCMsgMemCachedStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t curr_connections_;
    uint64_t cmd_get_;
    uint64_t cmd_set_;
    uint64_t cmd_flush_;
    uint64_t get_hits_;
    uint64_t get_misses_;
    uint64_t delete_hits_;
    uint64_t delete_misses_;
    uint64_t bytes_read_;
    uint64_t bytes_written_;
    uint64_t limit_maxbytes_;
    uint64_t curr_items_;
    uint64_t evictions_;
    uint64_t bytes_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgSQLStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgSQLStats) */ {
 public:
  inline CGCMsgSQLStats() : CGCMsgSQLStats(nullptr) {}
  ~CGCMsgSQLStats() override;
  explicit PROTOBUF_CONSTEXPR CGCMsgSQLStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgSQLStats(const CGCMsgSQLStats& from);
  CGCMsgSQLStats(CGCMsgSQLStats&& from) noexcept
    : CGCMsgSQLStats() {
    *this = ::std::move(from);
  }

  inline CGCMsgSQLStats& operator=(const CGCMsgSQLStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgSQLStats& operator=(CGCMsgSQLStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgSQLStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgSQLStats* internal_default_instance() {
    return reinterpret_cast<const CGCMsgSQLStats*>(
               &_CGCMsgSQLStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CGCMsgSQLStats& a, CGCMsgSQLStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgSQLStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgSQLStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGCMsgSQLStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGCMsgSQLStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGCMsgSQLStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CGCMsgSQLStats& from) {
    CGCMsgSQLStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsgSQLStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgSQLStats";
  }
  protected:
  explicit CGCMsgSQLStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemaCatalogFieldNumber = 1,
  };
  // optional uint32 schema_catalog = 1;
  bool has_schema_catalog() const;
  private:
  bool _internal_has_schema_catalog() const;
  public:
  void clear_schema_catalog();
  uint32_t schema_catalog() const;
  void set_schema_catalog(uint32_t value);
  private:
  uint32_t _internal_schema_catalog() const;
  void _internal_set_schema_catalog(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CGCMsgSQLStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t schema_catalog_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgSQLStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgSQLStatsResponse) */ {
 public:
  inline CGCMsgSQLStatsResponse() : CGCMsgSQLStatsResponse(nullptr) {}
  ~CGCMsgSQLStatsResponse() override;
  explicit PROTOBUF_CONSTEXPR CGCMsgSQLStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgSQLStatsResponse(const CGCMsgSQLStatsResponse& from);
  CGCMsgSQLStatsResponse(CGCMsgSQLStatsResponse&& from) noexcept
    : CGCMsgSQLStatsResponse() {
    *this = ::std::move(from);
  }

  inline CGCMsgSQLStatsResponse& operator=(const CGCMsgSQLStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgSQLStatsResponse& operator=(CGCMsgSQLStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgSQLStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgSQLStatsResponse* internal_default_instance() {
    return reinterpret_cast<const CGCMsgSQLStatsResponse*>(
               &_CGCMsgSQLStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CGCMsgSQLStatsResponse& a, CGCMsgSQLStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgSQLStatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgSQLStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGCMsgSQLStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGCMsgSQLStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGCMsgSQLStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CGCMsgSQLStatsResponse& from) {
    CGCMsgSQLStatsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsgSQLStatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgSQLStatsResponse";
  }
  protected:
  explicit CGCMsgSQLStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThreadsFieldNumber = 1,
    kThreadsConnectedFieldNumber = 2,
    kThreadsActiveFieldNumber = 3,
    kOperationsSubmittedFieldNumber = 4,
    kPreparedStatementsExecutedFieldNumber = 5,
    kNonPreparedStatementsExecutedFieldNumber = 6,
    kDeadlockRetriesFieldNumber = 7,
    kOperationsTimedOutInQueueFieldNumber = 8,
    kErrorsFieldNumber = 9,
  };
  // optional uint32 threads = 1;
  bool has_threads() const;
  private:
  bool _internal_has_threads() const;
  public:
  void clear_threads();
  uint32_t threads() const;
  void set_threads(uint32_t value);
  private:
  uint32_t _internal_threads() const;
  void _internal_set_threads(uint32_t value);
  public:

  // optional uint32 threads_connected = 2;
  bool has_threads_connected() const;
  private:
  bool _internal_has_threads_connected() const;
  public:
  void clear_threads_connected();
  uint32_t threads_connected() const;
  void set_threads_connected(uint32_t value);
  private:
  uint32_t _internal_threads_connected() const;
  void _internal_set_threads_connected(uint32_t value);
  public:

  // optional uint32 threads_active = 3;
  bool has_threads_active() const;
  private:
  bool _internal_has_threads_active() const;
  public:
  void clear_threads_active();
  uint32_t threads_active() const;
  void set_threads_active(uint32_t value);
  private:
  uint32_t _internal_threads_active() const;
  void _internal_set_threads_active(uint32_t value);
  public:

  // optional uint32 operations_submitted = 4;
  bool has_operations_submitted() const;
  private:
  bool _internal_has_operations_submitted() const;
  public:
  void clear_operations_submitted();
  uint32_t operations_submitted() const;
  void set_operations_submitted(uint32_t value);
  private:
  uint32_t _internal_operations_submitted() const;
  void _internal_set_operations_submitted(uint32_t value);
  public:

  // optional uint32 prepared_statements_executed = 5;
  bool has_prepared_statements_executed() const;
  private:
  bool _internal_has_prepared_statements_executed() const;
  public:
  void clear_prepared_statements_executed();
  uint32_t prepared_statements_executed() const;
  void set_prepared_statements_executed(uint32_t value);
  private:
  uint32_t _internal_prepared_statements_executed() const;
  void _internal_set_prepared_statements_executed(uint32_t value);
  public:

  // optional uint32 non_prepared_statements_executed = 6;
  bool has_non_prepared_statements_executed() const;
  private:
  bool _internal_has_non_prepared_statements_executed() const;
  public:
  void clear_non_prepared_statements_executed();
  uint32_t non_prepared_statements_executed() const;
  void set_non_prepared_statements_executed(uint32_t value);
  private:
  uint32_t _internal_non_prepared_statements_executed() const;
  void _internal_set_non_prepared_statements_executed(uint32_t value);
  public:

  // optional uint32 deadlock_retries = 7;
  bool has_deadlock_retries() const;
  private:
  bool _internal_has_deadlock_retries() const;
  public:
  void clear_deadlock_retries();
  uint32_t deadlock_retries() const;
  void set_deadlock_retries(uint32_t value);
  private:
  uint32_t _internal_deadlock_retries() const;
  void _internal_set_deadlock_retries(uint32_t value);
  public:

  // optional uint32 operations_timed_out_in_queue = 8;
  bool has_operations_timed_out_in_queue() const;
  private:
  bool _internal_has_operations_timed_out_in_queue() const;
  public:
  void clear_operations_timed_out_in_queue();
  uint32_t operations_timed_out_in_queue() const;
  void set_operations_timed_out_in_queue(uint32_t value);
  private:
  uint32_t _internal_operations_timed_out_in_queue() const;
  void _internal_set_operations_timed_out_in_queue(uint32_t value);
  public:

  // optional uint32 errors = 9;
  bool has_errors() const;
  private:
  bool _internal_has_errors() const;
  public:
  void clear_errors();
  uint32_t errors() const;
  void set_errors(uint32_t value);
  private:
  uint32_t _internal_errors() const;
  void _internal_set_errors(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CGCMsgSQLStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t threads_;
    uint32_t threads_connected_;
    uint32_t threads_active_;
    uint32_t operations_submitted_;
    uint32_t prepared_statements_executed_;
    uint32_t non_prepared_statements_executed_;
    uint32_t deadlock_retries_;
    uint32_t operations_timed_out_in_queue_;
    uint32_t errors_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgAMAddFreeLicense final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAMAddFreeLicense) */ {
 public:
  inline CMsgAMAddFreeLicense() : CMsgAMAddFreeLicense(nullptr) {}
  ~CMsgAMAddFreeLicense() override;
  explicit PROTOBUF_CONSTEXPR CMsgAMAddFreeLicense(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAMAddFreeLicense(const CMsgAMAddFreeLicense& from);
  CMsgAMAddFreeLicense(CMsgAMAddFreeLicense&& from) noexcept
    : CMsgAMAddFreeLicense() {
    *this = ::std::move(from);
  }

  inline CMsgAMAddFreeLicense& operator=(const CMsgAMAddFreeLicense& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAMAddFreeLicense& operator=(CMsgAMAddFreeLicense&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAMAddFreeLicense& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAMAddFreeLicense* internal_default_instance() {
    return reinterpret_cast<const CMsgAMAddFreeLicense*>(
               &_CMsgAMAddFreeLicense_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CMsgAMAddFreeLicense& a, CMsgAMAddFreeLicense& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAMAddFreeLicense* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAMAddFreeLicense* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAMAddFreeLicense* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAMAddFreeLicense>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAMAddFreeLicense& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAMAddFreeLicense& from) {
    CMsgAMAddFreeLicense::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAMAddFreeLicense* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAMAddFreeLicense";
  }
  protected:
  explicit CMsgAMAddFreeLicense(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoreCountryCodeFieldNumber = 4,
    kSteamidFieldNumber = 1,
    kIpPublicFieldNumber = 2,
    kPackageidFieldNumber = 3,
  };
  // optional string store_country_code = 4;
  bool has_store_country_code() const;
  private:
  bool _internal_has_store_country_code() const;
  public:
  void clear_store_country_code();
  const std::string& store_country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_store_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_store_country_code();
  PROTOBUF_NODISCARD std::string* release_store_country_code();
  void set_allocated_store_country_code(std::string* store_country_code);
  private:
  const std::string& _internal_store_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_store_country_code(const std::string& value);
  std::string* _internal_mutable_store_country_code();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 ip_public = 2;
  bool has_ip_public() const;
  private:
  bool _internal_has_ip_public() const;
  public:
  void clear_ip_public();
  uint32_t ip_public() const;
  void set_ip_public(uint32_t value);
  private:
  uint32_t _internal_ip_public() const;
  void _internal_set_ip_public(uint32_t value);
  public:

  // optional uint32 packageid = 3;
  bool has_packageid() const;
  private:
  bool _internal_has_packageid() const;
  public:
  void clear_packageid();
  uint32_t packageid() const;
  void set_packageid(uint32_t value);
  private:
  uint32_t _internal_packageid() const;
  void _internal_set_packageid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAMAddFreeLicense)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr store_country_code_;
    uint64_t steamid_;
    uint32_t ip_public_;
    uint32_t packageid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgAMAddFreeLicenseResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAMAddFreeLicenseResponse) */ {
 public:
  inline CMsgAMAddFreeLicenseResponse() : CMsgAMAddFreeLicenseResponse(nullptr) {}
  ~CMsgAMAddFreeLicenseResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgAMAddFreeLicenseResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAMAddFreeLicenseResponse(const CMsgAMAddFreeLicenseResponse& from);
  CMsgAMAddFreeLicenseResponse(CMsgAMAddFreeLicenseResponse&& from) noexcept
    : CMsgAMAddFreeLicenseResponse() {
    *this = ::std::move(from);
  }

  inline CMsgAMAddFreeLicenseResponse& operator=(const CMsgAMAddFreeLicenseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAMAddFreeLicenseResponse& operator=(CMsgAMAddFreeLicenseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAMAddFreeLicenseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAMAddFreeLicenseResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgAMAddFreeLicenseResponse*>(
               &_CMsgAMAddFreeLicenseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CMsgAMAddFreeLicenseResponse& a, CMsgAMAddFreeLicenseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAMAddFreeLicenseResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAMAddFreeLicenseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAMAddFreeLicenseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAMAddFreeLicenseResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAMAddFreeLicenseResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAMAddFreeLicenseResponse& from) {
    CMsgAMAddFreeLicenseResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAMAddFreeLicenseResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAMAddFreeLicenseResponse";
  }
  protected:
  explicit CMsgAMAddFreeLicenseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransidFieldNumber = 3,
    kPurchaseResultDetailFieldNumber = 2,
    kEresultFieldNumber = 1,
  };
  // optional fixed64 transid = 3;
  bool has_transid() const;
  private:
  bool _internal_has_transid() const;
  public:
  void clear_transid();
  uint64_t transid() const;
  void set_transid(uint64_t value);
  private:
  uint64_t _internal_transid() const;
  void _internal_set_transid(uint64_t value);
  public:

  // optional int32 purchase_result_detail = 2;
  bool has_purchase_result_detail() const;
  private:
  bool _internal_has_purchase_result_detail() const;
  public:
  void clear_purchase_result_detail();
  int32_t purchase_result_detail() const;
  void set_purchase_result_detail(int32_t value);
  private:
  int32_t _internal_purchase_result_detail() const;
  void _internal_set_purchase_result_detail(int32_t value);
  public:

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAMAddFreeLicenseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t transid_;
    int32_t purchase_result_detail_;
    int32_t eresult_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgGetIPLocation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgGetIPLocation) */ {
 public:
  inline CGCMsgGetIPLocation() : CGCMsgGetIPLocation(nullptr) {}
  ~CGCMsgGetIPLocation() override;
  explicit PROTOBUF_CONSTEXPR CGCMsgGetIPLocation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgGetIPLocation(const CGCMsgGetIPLocation& from);
  CGCMsgGetIPLocation(CGCMsgGetIPLocation&& from) noexcept
    : CGCMsgGetIPLocation() {
    *this = ::std::move(from);
  }

  inline CGCMsgGetIPLocation& operator=(const CGCMsgGetIPLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgGetIPLocation& operator=(CGCMsgGetIPLocation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgGetIPLocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgGetIPLocation* internal_default_instance() {
    return reinterpret_cast<const CGCMsgGetIPLocation*>(
               &_CGCMsgGetIPLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CGCMsgGetIPLocation& a, CGCMsgGetIPLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgGetIPLocation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgGetIPLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGCMsgGetIPLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGCMsgGetIPLocation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGCMsgGetIPLocation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CGCMsgGetIPLocation& from) {
    CGCMsgGetIPLocation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsgGetIPLocation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgGetIPLocation";
  }
  protected:
  explicit CGCMsgGetIPLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpsFieldNumber = 1,
  };
  // repeated fixed32 ips = 1;
  int ips_size() const;
  private:
  int _internal_ips_size() const;
  public:
  void clear_ips();
  private:
  uint32_t _internal_ips(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_ips() const;
  void _internal_add_ips(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_ips();
  public:
  uint32_t ips(int index) const;
  void set_ips(int index, uint32_t value);
  void add_ips(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      ips() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_ips();

  // @@protoc_insertion_point(class_scope:CGCMsgGetIPLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > ips_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgGetIPASN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgGetIPASN) */ {
 public:
  inline CGCMsgGetIPASN() : CGCMsgGetIPASN(nullptr) {}
  ~CGCMsgGetIPASN() override;
  explicit PROTOBUF_CONSTEXPR CGCMsgGetIPASN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgGetIPASN(const CGCMsgGetIPASN& from);
  CGCMsgGetIPASN(CGCMsgGetIPASN&& from) noexcept
    : CGCMsgGetIPASN() {
    *this = ::std::move(from);
  }

  inline CGCMsgGetIPASN& operator=(const CGCMsgGetIPASN& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgGetIPASN& operator=(CGCMsgGetIPASN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgGetIPASN& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgGetIPASN* internal_default_instance() {
    return reinterpret_cast<const CGCMsgGetIPASN*>(
               &_CGCMsgGetIPASN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CGCMsgGetIPASN& a, CGCMsgGetIPASN& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgGetIPASN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgGetIPASN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGCMsgGetIPASN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGCMsgGetIPASN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGCMsgGetIPASN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CGCMsgGetIPASN& from) {
    CGCMsgGetIPASN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsgGetIPASN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgGetIPASN";
  }
  protected:
  explicit CGCMsgGetIPASN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpsFieldNumber = 1,
  };
  // repeated fixed32 ips = 1;
  int ips_size() const;
  private:
  int _internal_ips_size() const;
  public:
  void clear_ips();
  private:
  uint32_t _internal_ips(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_ips() const;
  void _internal_add_ips(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_ips();
  public:
  uint32_t ips(int index) const;
  void set_ips(int index, uint32_t value);
  void add_ips(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      ips() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_ips();

  // @@protoc_insertion_point(class_scope:CGCMsgGetIPASN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > ips_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CIPASNInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CIPASNInfo) */ {
 public:
  inline CIPASNInfo() : CIPASNInfo(nullptr) {}
  ~CIPASNInfo() override;
  explicit PROTOBUF_CONSTEXPR CIPASNInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CIPASNInfo(const CIPASNInfo& from);
  CIPASNInfo(CIPASNInfo&& from) noexcept
    : CIPASNInfo() {
    *this = ::std::move(from);
  }

  inline CIPASNInfo& operator=(const CIPASNInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIPASNInfo& operator=(CIPASNInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CIPASNInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CIPASNInfo* internal_default_instance() {
    return reinterpret_cast<const CIPASNInfo*>(
               &_CIPASNInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CIPASNInfo& a, CIPASNInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CIPASNInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIPASNInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CIPASNInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CIPASNInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CIPASNInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CIPASNInfo& from) {
    CIPASNInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CIPASNInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIPASNInfo";
  }
  protected:
  explicit CIPASNInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kAsnFieldNumber = 2,
  };
  // optional fixed32 ip = 1;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  uint32_t ip() const;
  void set_ip(uint32_t value);
  private:
  uint32_t _internal_ip() const;
  void _internal_set_ip(uint32_t value);
  public:

  // optional uint32 asn = 2;
  bool has_asn() const;
  private:
  bool _internal_has_asn() const;
  public:
  void clear_asn();
  uint32_t asn() const;
  void set_asn(uint32_t value);
  private:
  uint32_t _internal_asn() const;
  void _internal_set_asn(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CIPASNInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t ip_;
    uint32_t asn_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgGetIPASNResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgGetIPASNResponse) */ {
 public:
  inline CGCMsgGetIPASNResponse() : CGCMsgGetIPASNResponse(nullptr) {}
  ~CGCMsgGetIPASNResponse() override;
  explicit PROTOBUF_CONSTEXPR CGCMsgGetIPASNResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgGetIPASNResponse(const CGCMsgGetIPASNResponse& from);
  CGCMsgGetIPASNResponse(CGCMsgGetIPASNResponse&& from) noexcept
    : CGCMsgGetIPASNResponse() {
    *this = ::std::move(from);
  }

  inline CGCMsgGetIPASNResponse& operator=(const CGCMsgGetIPASNResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgGetIPASNResponse& operator=(CGCMsgGetIPASNResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgGetIPASNResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgGetIPASNResponse* internal_default_instance() {
    return reinterpret_cast<const CGCMsgGetIPASNResponse*>(
               &_CGCMsgGetIPASNResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CGCMsgGetIPASNResponse& a, CGCMsgGetIPASNResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgGetIPASNResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgGetIPASNResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGCMsgGetIPASNResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGCMsgGetIPASNResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGCMsgGetIPASNResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CGCMsgGetIPASNResponse& from) {
    CGCMsgGetIPASNResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsgGetIPASNResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgGetIPASNResponse";
  }
  protected:
  explicit CGCMsgGetIPASNResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 1,
  };
  // repeated .CIPASNInfo infos = 1;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::CIPASNInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CIPASNInfo >*
      mutable_infos();
  private:
  const ::CIPASNInfo& _internal_infos(int index) const;
  ::CIPASNInfo* _internal_add_infos();
  public:
  const ::CIPASNInfo& infos(int index) const;
  ::CIPASNInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CIPASNInfo >&
      infos() const;

  // @@protoc_insertion_point(class_scope:CGCMsgGetIPASNResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CIPASNInfo > infos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgSystemStatsSchema final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgSystemStatsSchema) */ {
 public:
  inline CGCMsgSystemStatsSchema() : CGCMsgSystemStatsSchema(nullptr) {}
  ~CGCMsgSystemStatsSchema() override;
  explicit PROTOBUF_CONSTEXPR CGCMsgSystemStatsSchema(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgSystemStatsSchema(const CGCMsgSystemStatsSchema& from);
  CGCMsgSystemStatsSchema(CGCMsgSystemStatsSchema&& from) noexcept
    : CGCMsgSystemStatsSchema() {
    *this = ::std::move(from);
  }

  inline CGCMsgSystemStatsSchema& operator=(const CGCMsgSystemStatsSchema& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgSystemStatsSchema& operator=(CGCMsgSystemStatsSchema&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgSystemStatsSchema& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgSystemStatsSchema* internal_default_instance() {
    return reinterpret_cast<const CGCMsgSystemStatsSchema*>(
               &_CGCMsgSystemStatsSchema_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CGCMsgSystemStatsSchema& a, CGCMsgSystemStatsSchema& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgSystemStatsSchema* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgSystemStatsSchema* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGCMsgSystemStatsSchema* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGCMsgSystemStatsSchema>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGCMsgSystemStatsSchema& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CGCMsgSystemStatsSchema& from) {
    CGCMsgSystemStatsSchema::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsgSystemStatsSchema* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgSystemStatsSchema";
  }
  protected:
  explicit CGCMsgSystemStatsSchema(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemaKvFieldNumber = 2,
    kGcAppIdFieldNumber = 1,
  };
  // optional bytes schema_kv = 2;
  bool has_schema_kv() const;
  private:
  bool _internal_has_schema_kv() const;
  public:
  void clear_schema_kv();
  const std::string& schema_kv() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_schema_kv(ArgT0&& arg0, ArgT... args);
  std::string* mutable_schema_kv();
  PROTOBUF_NODISCARD std::string* release_schema_kv();
  void set_allocated_schema_kv(std::string* schema_kv);
  private:
  const std::string& _internal_schema_kv() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema_kv(const std::string& value);
  std::string* _internal_mutable_schema_kv();
  public:

  // optional uint32 gc_app_id = 1;
  bool has_gc_app_id() const;
  private:
  bool _internal_has_gc_app_id() const;
  public:
  void clear_gc_app_id();
  uint32_t gc_app_id() const;
  void set_gc_app_id(uint32_t value);
  private:
  uint32_t _internal_gc_app_id() const;
  void _internal_set_gc_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CGCMsgSystemStatsSchema)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_kv_;
    uint32_t gc_app_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgGetSystemStats final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CGCMsgGetSystemStats) */ {
 public:
  inline CGCMsgGetSystemStats() : CGCMsgGetSystemStats(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CGCMsgGetSystemStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgGetSystemStats(const CGCMsgGetSystemStats& from);
  CGCMsgGetSystemStats(CGCMsgGetSystemStats&& from) noexcept
    : CGCMsgGetSystemStats() {
    *this = ::std::move(from);
  }

  inline CGCMsgGetSystemStats& operator=(const CGCMsgGetSystemStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgGetSystemStats& operator=(CGCMsgGetSystemStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgGetSystemStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgGetSystemStats* internal_default_instance() {
    return reinterpret_cast<const CGCMsgGetSystemStats*>(
               &_CGCMsgGetSystemStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CGCMsgGetSystemStats& a, CGCMsgGetSystemStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgGetSystemStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgGetSystemStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGCMsgGetSystemStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGCMsgGetSystemStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CGCMsgGetSystemStats& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CGCMsgGetSystemStats& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgGetSystemStats";
  }
  protected:
  explicit CGCMsgGetSystemStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGCMsgGetSystemStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CGCMsgGetSystemStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCMsgGetSystemStatsResponse) */ {
 public:
  inline CGCMsgGetSystemStatsResponse() : CGCMsgGetSystemStatsResponse(nullptr) {}
  ~CGCMsgGetSystemStatsResponse() override;
  explicit PROTOBUF_CONSTEXPR CGCMsgGetSystemStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCMsgGetSystemStatsResponse(const CGCMsgGetSystemStatsResponse& from);
  CGCMsgGetSystemStatsResponse(CGCMsgGetSystemStatsResponse&& from) noexcept
    : CGCMsgGetSystemStatsResponse() {
    *this = ::std::move(from);
  }

  inline CGCMsgGetSystemStatsResponse& operator=(const CGCMsgGetSystemStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCMsgGetSystemStatsResponse& operator=(CGCMsgGetSystemStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCMsgGetSystemStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCMsgGetSystemStatsResponse* internal_default_instance() {
    return reinterpret_cast<const CGCMsgGetSystemStatsResponse*>(
               &_CGCMsgGetSystemStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CGCMsgGetSystemStatsResponse& a, CGCMsgGetSystemStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCMsgGetSystemStatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCMsgGetSystemStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGCMsgGetSystemStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGCMsgGetSystemStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGCMsgGetSystemStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CGCMsgGetSystemStatsResponse& from) {
    CGCMsgGetSystemStatsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCMsgGetSystemStatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCMsgGetSystemStatsResponse";
  }
  protected:
  explicit CGCMsgGetSystemStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsKvFieldNumber = 2,
    kGcAppIdFieldNumber = 1,
    kActiveJobsFieldNumber = 3,
    kYieldingJobsFieldNumber = 4,
    kUserSessionsFieldNumber = 5,
    kGameServerSessionsFieldNumber = 6,
    kSocachesFieldNumber = 7,
    kSocachesToUnloadFieldNumber = 8,
    kSocachesLoadingFieldNumber = 9,
    kWritebackQueueFieldNumber = 10,
    kSteamidLocksFieldNumber = 11,
    kLogonQueueFieldNumber = 12,
    kLogonJobsFieldNumber = 13,
  };
  // optional bytes stats_kv = 2;
  bool has_stats_kv() const;
  private:
  bool _internal_has_stats_kv() const;
  public:
  void clear_stats_kv();
  const std::string& stats_kv() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stats_kv(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stats_kv();
  PROTOBUF_NODISCARD std::string* release_stats_kv();
  void set_allocated_stats_kv(std::string* stats_kv);
  private:
  const std::string& _internal_stats_kv() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stats_kv(const std::string& value);
  std::string* _internal_mutable_stats_kv();
  public:

  // optional uint32 gc_app_id = 1;
  bool has_gc_app_id() const;
  private:
  bool _internal_has_gc_app_id() const;
  public:
  void clear_gc_app_id();
  uint32_t gc_app_id() const;
  void set_gc_app_id(uint32_t value);
  private:
  uint32_t _internal_gc_app_id() const;
  void _internal_set_gc_app_id(uint32_t value);
  public:

  // optional uint32 active_jobs = 3;
  bool has_active_jobs() const;
  private:
  bool _internal_has_active_jobs() const;
  public:
  void clear_active_jobs();
  uint32_t active_jobs() const;
  void set_active_jobs(uint32_t value);
  private:
  uint32_t _internal_active_jobs() const;
  void _internal_set_active_jobs(uint32_t value);
  public:

  // optional uint32 yielding_jobs = 4;
  bool has_yielding_jobs() const;
  private:
  bool _internal_has_yielding_jobs() const;
  public:
  void clear_yielding_jobs();
  uint32_t yielding_jobs() const;
  void set_yielding_jobs(uint32_t value);
  private:
  uint32_t _internal_yielding_jobs() const;
  void _internal_set_yielding_jobs(uint32_t value);
  public:

  // optional uint32 user_sessions = 5;
  bool has_user_sessions() const;
  private:
  bool _internal_has_user_sessions() const;
  public:
  void clear_user_sessions();
  uint32_t user_sessions() const;
  void set_user_sessions(uint32_t value);
  private:
  uint32_t _internal_user_sessions() const;
  void _internal_set_user_sessions(uint32_t value);
  public:

  // optional uint32 game_server_sessions = 6;
  bool has_game_server_sessions() const;
  private:
  bool _internal_has_game_server_sessions() const;
  public:
  void clear_game_server_sessions();
  uint32_t game_server_sessions() const;
  void set_game_server_sessions(uint32_t value);
  private:
  uint32_t _internal_game_server_sessions() const;
  void _internal_set_game_server_sessions(uint32_t value);
  public:

  // optional uint32 socaches = 7;
  bool has_socaches() const;
  private:
  bool _internal_has_socaches() const;
  public:
  void clear_socaches();
  uint32_t socaches() const;
  void set_socaches(uint32_t value);
  private:
  uint32_t _internal_socaches() const;
  void _internal_set_socaches(uint32_t value);
  public:

  // optional uint32 socaches_to_unload = 8;
  bool has_socaches_to_unload() const;
  private:
  bool _internal_has_socaches_to_unload() const;
  public:
  void clear_socaches_to_unload();
  uint32_t socaches_to_unload() const;
  void set_socaches_to_unload(uint32_t value);
  private:
  uint32_t _internal_socaches_to_unload() const;
  void _internal_set_socaches_to_unload(uint32_t value);
  public:

  // optional uint32 socaches_loading = 9;
  bool has_socaches_loading() const;
  private:
  bool _internal_has_socaches_loading() const;
  public:
  void clear_socaches_loading();
  uint32_t socaches_loading() const;
  void set_socaches_loading(uint32_t value);
  private:
  uint32_t _internal_socaches_loading() const;
  void _internal_set_socaches_loading(uint32_t value);
  public:

  // optional uint32 writeback_queue = 10;
  bool has_writeback_queue() const;
  private:
  bool _internal_has_writeback_queue() const;
  public:
  void clear_writeback_queue();
  uint32_t writeback_queue() const;
  void set_writeback_queue(uint32_t value);
  private:
  uint32_t _internal_writeback_queue() const;
  void _internal_set_writeback_queue(uint32_t value);
  public:

  // optional uint32 steamid_locks = 11;
  bool has_steamid_locks() const;
  private:
  bool _internal_has_steamid_locks() const;
  public:
  void clear_steamid_locks();
  uint32_t steamid_locks() const;
  void set_steamid_locks(uint32_t value);
  private:
  uint32_t _internal_steamid_locks() const;
  void _internal_set_steamid_locks(uint32_t value);
  public:

  // optional uint32 logon_queue = 12;
  bool has_logon_queue() const;
  private:
  bool _internal_has_logon_queue() const;
  public:
  void clear_logon_queue();
  uint32_t logon_queue() const;
  void set_logon_queue(uint32_t value);
  private:
  uint32_t _internal_logon_queue() const;
  void _internal_set_logon_queue(uint32_t value);
  public:

  // optional uint32 logon_jobs = 13;
  bool has_logon_jobs() const;
  private:
  bool _internal_has_logon_jobs() const;
  public:
  void clear_logon_jobs();
  uint32_t logon_jobs() const;
  void set_logon_jobs(uint32_t value);
  private:
  uint32_t _internal_logon_jobs() const;
  void _internal_set_logon_jobs(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CGCMsgGetSystemStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stats_kv_;
    uint32_t gc_app_id_;
    uint32_t active_jobs_;
    uint32_t yielding_jobs_;
    uint32_t user_sessions_;
    uint32_t game_server_sessions_;
    uint32_t socaches_;
    uint32_t socaches_to_unload_;
    uint32_t socaches_loading_;
    uint32_t writeback_queue_;
    uint32_t steamid_locks_;
    uint32_t logon_queue_;
    uint32_t logon_jobs_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgAMSendEmail_ReplacementToken final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAMSendEmail.ReplacementToken) */ {
 public:
  inline CMsgAMSendEmail_ReplacementToken() : CMsgAMSendEmail_ReplacementToken(nullptr) {}
  ~CMsgAMSendEmail_ReplacementToken() override;
  explicit PROTOBUF_CONSTEXPR CMsgAMSendEmail_ReplacementToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAMSendEmail_ReplacementToken(const CMsgAMSendEmail_ReplacementToken& from);
  CMsgAMSendEmail_ReplacementToken(CMsgAMSendEmail_ReplacementToken&& from) noexcept
    : CMsgAMSendEmail_ReplacementToken() {
    *this = ::std::move(from);
  }

  inline CMsgAMSendEmail_ReplacementToken& operator=(const CMsgAMSendEmail_ReplacementToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAMSendEmail_ReplacementToken& operator=(CMsgAMSendEmail_ReplacementToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAMSendEmail_ReplacementToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAMSendEmail_ReplacementToken* internal_default_instance() {
    return reinterpret_cast<const CMsgAMSendEmail_ReplacementToken*>(
               &_CMsgAMSendEmail_ReplacementToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CMsgAMSendEmail_ReplacementToken& a, CMsgAMSendEmail_ReplacementToken& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAMSendEmail_ReplacementToken* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAMSendEmail_ReplacementToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAMSendEmail_ReplacementToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAMSendEmail_ReplacementToken>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAMSendEmail_ReplacementToken& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAMSendEmail_ReplacementToken& from) {
    CMsgAMSendEmail_ReplacementToken::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAMSendEmail_ReplacementToken* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAMSendEmail.ReplacementToken";
  }
  protected:
  explicit CMsgAMSendEmail_ReplacementToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenNameFieldNumber = 1,
    kTokenValueFieldNumber = 2,
  };
  // optional string token_name = 1;
  bool has_token_name() const;
  private:
  bool _internal_has_token_name() const;
  public:
  void clear_token_name();
  const std::string& token_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_name();
  PROTOBUF_NODISCARD std::string* release_token_name();
  void set_allocated_token_name(std::string* token_name);
  private:
  const std::string& _internal_token_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_name(const std::string& value);
  std::string* _internal_mutable_token_name();
  public:

  // optional string token_value = 2;
  bool has_token_value() const;
  private:
  bool _internal_has_token_value() const;
  public:
  void clear_token_value();
  const std::string& token_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_value();
  PROTOBUF_NODISCARD std::string* release_token_value();
  void set_allocated_token_value(std::string* token_value);
  private:
  const std::string& _internal_token_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_value(const std::string& value);
  std::string* _internal_mutable_token_value();
  public:

  // @@protoc_insertion_point(class_scope:CMsgAMSendEmail.ReplacementToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgAMSendEmail_PersonaNameReplacementToken final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAMSendEmail.PersonaNameReplacementToken) */ {
 public:
  inline CMsgAMSendEmail_PersonaNameReplacementToken() : CMsgAMSendEmail_PersonaNameReplacementToken(nullptr) {}
  ~CMsgAMSendEmail_PersonaNameReplacementToken() override;
  explicit PROTOBUF_CONSTEXPR CMsgAMSendEmail_PersonaNameReplacementToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAMSendEmail_PersonaNameReplacementToken(const CMsgAMSendEmail_PersonaNameReplacementToken& from);
  CMsgAMSendEmail_PersonaNameReplacementToken(CMsgAMSendEmail_PersonaNameReplacementToken&& from) noexcept
    : CMsgAMSendEmail_PersonaNameReplacementToken() {
    *this = ::std::move(from);
  }

  inline CMsgAMSendEmail_PersonaNameReplacementToken& operator=(const CMsgAMSendEmail_PersonaNameReplacementToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAMSendEmail_PersonaNameReplacementToken& operator=(CMsgAMSendEmail_PersonaNameReplacementToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAMSendEmail_PersonaNameReplacementToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAMSendEmail_PersonaNameReplacementToken* internal_default_instance() {
    return reinterpret_cast<const CMsgAMSendEmail_PersonaNameReplacementToken*>(
               &_CMsgAMSendEmail_PersonaNameReplacementToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CMsgAMSendEmail_PersonaNameReplacementToken& a, CMsgAMSendEmail_PersonaNameReplacementToken& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAMSendEmail_PersonaNameReplacementToken* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAMSendEmail_PersonaNameReplacementToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAMSendEmail_PersonaNameReplacementToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAMSendEmail_PersonaNameReplacementToken>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAMSendEmail_PersonaNameReplacementToken& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAMSendEmail_PersonaNameReplacementToken& from) {
    CMsgAMSendEmail_PersonaNameReplacementToken::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAMSendEmail_PersonaNameReplacementToken* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAMSendEmail.PersonaNameReplacementToken";
  }
  protected:
  explicit CMsgAMSendEmail_PersonaNameReplacementToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenNameFieldNumber = 2,
    kSteamidFieldNumber = 1,
  };
  // optional string token_name = 2;
  bool has_token_name() const;
  private:
  bool _internal_has_token_name() const;
  public:
  void clear_token_name();
  const std::string& token_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_name();
  PROTOBUF_NODISCARD std::string* release_token_name();
  void set_allocated_token_name(std::string* token_name);
  private:
  const std::string& _internal_token_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_name(const std::string& value);
  std::string* _internal_mutable_token_name();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAMSendEmail.PersonaNameReplacementToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_name_;
    uint64_t steamid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgAMSendEmail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAMSendEmail) */ {
 public:
  inline CMsgAMSendEmail() : CMsgAMSendEmail(nullptr) {}
  ~CMsgAMSendEmail() override;
  explicit PROTOBUF_CONSTEXPR CMsgAMSendEmail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAMSendEmail(const CMsgAMSendEmail& from);
  CMsgAMSendEmail(CMsgAMSendEmail&& from) noexcept
    : CMsgAMSendEmail() {
    *this = ::std::move(from);
  }

  inline CMsgAMSendEmail& operator=(const CMsgAMSendEmail& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAMSendEmail& operator=(CMsgAMSendEmail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAMSendEmail& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAMSendEmail* internal_default_instance() {
    return reinterpret_cast<const CMsgAMSendEmail*>(
               &_CMsgAMSendEmail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CMsgAMSendEmail& a, CMsgAMSendEmail& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAMSendEmail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAMSendEmail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAMSendEmail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAMSendEmail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAMSendEmail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAMSendEmail& from) {
    CMsgAMSendEmail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAMSendEmail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAMSendEmail";
  }
  protected:
  explicit CMsgAMSendEmail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgAMSendEmail_ReplacementToken ReplacementToken;
  typedef CMsgAMSendEmail_PersonaNameReplacementToken PersonaNameReplacementToken;

  // accessors -------------------------------------------------------

  enum : int {
    kPersonaNameTokensFieldNumber = 5,
    kTokensFieldNumber = 7,
    kSteamidFieldNumber = 1,
    kEmailMsgTypeFieldNumber = 2,
    kEmailFormatFieldNumber = 3,
    kSourceGcFieldNumber = 6,
  };
  // repeated .CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
  int persona_name_tokens_size() const;
  private:
  int _internal_persona_name_tokens_size() const;
  public:
  void clear_persona_name_tokens();
  ::CMsgAMSendEmail_PersonaNameReplacementToken* mutable_persona_name_tokens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAMSendEmail_PersonaNameReplacementToken >*
      mutable_persona_name_tokens();
  private:
  const ::CMsgAMSendEmail_PersonaNameReplacementToken& _internal_persona_name_tokens(int index) const;
  ::CMsgAMSendEmail_PersonaNameReplacementToken* _internal_add_persona_name_tokens();
  public:
  const ::CMsgAMSendEmail_PersonaNameReplacementToken& persona_name_tokens(int index) const;
  ::CMsgAMSendEmail_PersonaNameReplacementToken* add_persona_name_tokens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAMSendEmail_PersonaNameReplacementToken >&
      persona_name_tokens() const;

  // repeated .CMsgAMSendEmail.ReplacementToken tokens = 7;
  int tokens_size() const;
  private:
  int _internal_tokens_size() const;
  public:
  void clear_tokens();
  ::CMsgAMSendEmail_ReplacementToken* mutable_tokens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAMSendEmail_ReplacementToken >*
      mutable_tokens();
  private:
  const ::CMsgAMSendEmail_ReplacementToken& _internal_tokens(int index) const;
  ::CMsgAMSendEmail_ReplacementToken* _internal_add_tokens();
  public:
  const ::CMsgAMSendEmail_ReplacementToken& tokens(int index) const;
  ::CMsgAMSendEmail_ReplacementToken* add_tokens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAMSendEmail_ReplacementToken >&
      tokens() const;

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 email_msg_type = 2;
  bool has_email_msg_type() const;
  private:
  bool _internal_has_email_msg_type() const;
  public:
  void clear_email_msg_type();
  uint32_t email_msg_type() const;
  void set_email_msg_type(uint32_t value);
  private:
  uint32_t _internal_email_msg_type() const;
  void _internal_set_email_msg_type(uint32_t value);
  public:

  // optional uint32 email_format = 3;
  bool has_email_format() const;
  private:
  bool _internal_has_email_format() const;
  public:
  void clear_email_format();
  uint32_t email_format() const;
  void set_email_format(uint32_t value);
  private:
  uint32_t _internal_email_format() const;
  void _internal_set_email_format(uint32_t value);
  public:

  // optional uint32 source_gc = 6;
  bool has_source_gc() const;
  private:
  bool _internal_has_source_gc() const;
  public:
  void clear_source_gc();
  uint32_t source_gc() const;
  void set_source_gc(uint32_t value);
  private:
  uint32_t _internal_source_gc() const;
  void _internal_set_source_gc(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAMSendEmail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAMSendEmail_PersonaNameReplacementToken > persona_name_tokens_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAMSendEmail_ReplacementToken > tokens_;
    uint64_t steamid_;
    uint32_t email_msg_type_;
    uint32_t email_format_;
    uint32_t source_gc_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgAMSendEmailResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAMSendEmailResponse) */ {
 public:
  inline CMsgAMSendEmailResponse() : CMsgAMSendEmailResponse(nullptr) {}
  ~CMsgAMSendEmailResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgAMSendEmailResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAMSendEmailResponse(const CMsgAMSendEmailResponse& from);
  CMsgAMSendEmailResponse(CMsgAMSendEmailResponse&& from) noexcept
    : CMsgAMSendEmailResponse() {
    *this = ::std::move(from);
  }

  inline CMsgAMSendEmailResponse& operator=(const CMsgAMSendEmailResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAMSendEmailResponse& operator=(CMsgAMSendEmailResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAMSendEmailResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAMSendEmailResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgAMSendEmailResponse*>(
               &_CMsgAMSendEmailResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CMsgAMSendEmailResponse& a, CMsgAMSendEmailResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAMSendEmailResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAMSendEmailResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAMSendEmailResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAMSendEmailResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAMSendEmailResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAMSendEmailResponse& from) {
    CMsgAMSendEmailResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAMSendEmailResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAMSendEmailResponse";
  }
  protected:
  explicit CMsgAMSendEmailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEresultFieldNumber = 1,
  };
  // optional uint32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  uint32_t eresult() const;
  void set_eresult(uint32_t value);
  private:
  uint32_t _internal_eresult() const;
  void _internal_set_eresult(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAMSendEmailResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t eresult_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCGetEmailTemplate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCGetEmailTemplate) */ {
 public:
  inline CMsgGCGetEmailTemplate() : CMsgGCGetEmailTemplate(nullptr) {}
  ~CMsgGCGetEmailTemplate() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCGetEmailTemplate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCGetEmailTemplate(const CMsgGCGetEmailTemplate& from);
  CMsgGCGetEmailTemplate(CMsgGCGetEmailTemplate&& from) noexcept
    : CMsgGCGetEmailTemplate() {
    *this = ::std::move(from);
  }

  inline CMsgGCGetEmailTemplate& operator=(const CMsgGCGetEmailTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCGetEmailTemplate& operator=(CMsgGCGetEmailTemplate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCGetEmailTemplate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCGetEmailTemplate* internal_default_instance() {
    return reinterpret_cast<const CMsgGCGetEmailTemplate*>(
               &_CMsgGCGetEmailTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CMsgGCGetEmailTemplate& a, CMsgGCGetEmailTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCGetEmailTemplate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCGetEmailTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCGetEmailTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCGetEmailTemplate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCGetEmailTemplate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCGetEmailTemplate& from) {
    CMsgGCGetEmailTemplate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCGetEmailTemplate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCGetEmailTemplate";
  }
  protected:
  explicit CMsgGCGetEmailTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kEmailMsgTypeFieldNumber = 2,
    kEmailLangFieldNumber = 3,
    kEmailFormatFieldNumber = 4,
  };
  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 email_msg_type = 2;
  bool has_email_msg_type() const;
  private:
  bool _internal_has_email_msg_type() const;
  public:
  void clear_email_msg_type();
  uint32_t email_msg_type() const;
  void set_email_msg_type(uint32_t value);
  private:
  uint32_t _internal_email_msg_type() const;
  void _internal_set_email_msg_type(uint32_t value);
  public:

  // optional int32 email_lang = 3;
  bool has_email_lang() const;
  private:
  bool _internal_has_email_lang() const;
  public:
  void clear_email_lang();
  int32_t email_lang() const;
  void set_email_lang(int32_t value);
  private:
  int32_t _internal_email_lang() const;
  void _internal_set_email_lang(int32_t value);
  public:

  // optional int32 email_format = 4;
  bool has_email_format() const;
  private:
  bool _internal_has_email_format() const;
  public:
  void clear_email_format();
  int32_t email_format() const;
  void set_email_format(int32_t value);
  private:
  int32_t _internal_email_format() const;
  void _internal_set_email_format(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCGetEmailTemplate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t app_id_;
    uint32_t email_msg_type_;
    int32_t email_lang_;
    int32_t email_format_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCGetEmailTemplateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCGetEmailTemplateResponse) */ {
 public:
  inline CMsgGCGetEmailTemplateResponse() : CMsgGCGetEmailTemplateResponse(nullptr) {}
  ~CMsgGCGetEmailTemplateResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCGetEmailTemplateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCGetEmailTemplateResponse(const CMsgGCGetEmailTemplateResponse& from);
  CMsgGCGetEmailTemplateResponse(CMsgGCGetEmailTemplateResponse&& from) noexcept
    : CMsgGCGetEmailTemplateResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCGetEmailTemplateResponse& operator=(const CMsgGCGetEmailTemplateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCGetEmailTemplateResponse& operator=(CMsgGCGetEmailTemplateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCGetEmailTemplateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCGetEmailTemplateResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCGetEmailTemplateResponse*>(
               &_CMsgGCGetEmailTemplateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CMsgGCGetEmailTemplateResponse& a, CMsgGCGetEmailTemplateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCGetEmailTemplateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCGetEmailTemplateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCGetEmailTemplateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCGetEmailTemplateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCGetEmailTemplateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCGetEmailTemplateResponse& from) {
    CMsgGCGetEmailTemplateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCGetEmailTemplateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCGetEmailTemplateResponse";
  }
  protected:
  explicit CMsgGCGetEmailTemplateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemplateFieldNumber = 3,
    kTemplateExistsFieldNumber = 2,
    kEresultFieldNumber = 1,
  };
  // optional string template = 3;
  bool has_template_() const;
  private:
  bool _internal_has_template_() const;
  public:
  void clear_template_();
  const std::string& template_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_template_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_template_();
  PROTOBUF_NODISCARD std::string* release_template_();
  void set_allocated_template_(std::string* template_);
  private:
  const std::string& _internal_template_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_template_(const std::string& value);
  std::string* _internal_mutable_template_();
  public:

  // optional bool template_exists = 2;
  bool has_template_exists() const;
  private:
  bool _internal_has_template_exists() const;
  public:
  void clear_template_exists();
  bool template_exists() const;
  void set_template_exists(bool value);
  private:
  bool _internal_template_exists() const;
  void _internal_set_template_exists(bool value);
  public:

  // optional uint32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  uint32_t eresult() const;
  void set_eresult(uint32_t value);
  private:
  uint32_t _internal_eresult() const;
  void _internal_set_eresult(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCGetEmailTemplateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr template__;
    bool template_exists_;
    uint32_t eresult_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgAMGrantGuestPasses2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAMGrantGuestPasses2) */ {
 public:
  inline CMsgAMGrantGuestPasses2() : CMsgAMGrantGuestPasses2(nullptr) {}
  ~CMsgAMGrantGuestPasses2() override;
  explicit PROTOBUF_CONSTEXPR CMsgAMGrantGuestPasses2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAMGrantGuestPasses2(const CMsgAMGrantGuestPasses2& from);
  CMsgAMGrantGuestPasses2(CMsgAMGrantGuestPasses2&& from) noexcept
    : CMsgAMGrantGuestPasses2() {
    *this = ::std::move(from);
  }

  inline CMsgAMGrantGuestPasses2& operator=(const CMsgAMGrantGuestPasses2& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAMGrantGuestPasses2& operator=(CMsgAMGrantGuestPasses2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAMGrantGuestPasses2& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAMGrantGuestPasses2* internal_default_instance() {
    return reinterpret_cast<const CMsgAMGrantGuestPasses2*>(
               &_CMsgAMGrantGuestPasses2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CMsgAMGrantGuestPasses2& a, CMsgAMGrantGuestPasses2& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAMGrantGuestPasses2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAMGrantGuestPasses2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAMGrantGuestPasses2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAMGrantGuestPasses2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAMGrantGuestPasses2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAMGrantGuestPasses2& from) {
    CMsgAMGrantGuestPasses2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAMGrantGuestPasses2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAMGrantGuestPasses2";
  }
  protected:
  explicit CMsgAMGrantGuestPasses2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdFieldNumber = 1,
    kPackageIdFieldNumber = 2,
    kPassesToGrantFieldNumber = 3,
    kDaysToExpirationFieldNumber = 4,
    kActionFieldNumber = 5,
  };
  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // optional uint32 package_id = 2;
  bool has_package_id() const;
  private:
  bool _internal_has_package_id() const;
  public:
  void clear_package_id();
  uint32_t package_id() const;
  void set_package_id(uint32_t value);
  private:
  uint32_t _internal_package_id() const;
  void _internal_set_package_id(uint32_t value);
  public:

  // optional int32 passes_to_grant = 3;
  bool has_passes_to_grant() const;
  private:
  bool _internal_has_passes_to_grant() const;
  public:
  void clear_passes_to_grant();
  int32_t passes_to_grant() const;
  void set_passes_to_grant(int32_t value);
  private:
  int32_t _internal_passes_to_grant() const;
  void _internal_set_passes_to_grant(int32_t value);
  public:

  // optional int32 days_to_expiration = 4;
  bool has_days_to_expiration() const;
  private:
  bool _internal_has_days_to_expiration() const;
  public:
  void clear_days_to_expiration();
  int32_t days_to_expiration() const;
  void set_days_to_expiration(int32_t value);
  private:
  int32_t _internal_days_to_expiration() const;
  void _internal_set_days_to_expiration(int32_t value);
  public:

  // optional int32 action = 5;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  int32_t action() const;
  void set_action(int32_t value);
  private:
  int32_t _internal_action() const;
  void _internal_set_action(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAMGrantGuestPasses2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t steam_id_;
    uint32_t package_id_;
    int32_t passes_to_grant_;
    int32_t days_to_expiration_;
    int32_t action_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgAMGrantGuestPasses2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAMGrantGuestPasses2Response) */ {
 public:
  inline CMsgAMGrantGuestPasses2Response() : CMsgAMGrantGuestPasses2Response(nullptr) {}
  ~CMsgAMGrantGuestPasses2Response() override;
  explicit PROTOBUF_CONSTEXPR CMsgAMGrantGuestPasses2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAMGrantGuestPasses2Response(const CMsgAMGrantGuestPasses2Response& from);
  CMsgAMGrantGuestPasses2Response(CMsgAMGrantGuestPasses2Response&& from) noexcept
    : CMsgAMGrantGuestPasses2Response() {
    *this = ::std::move(from);
  }

  inline CMsgAMGrantGuestPasses2Response& operator=(const CMsgAMGrantGuestPasses2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAMGrantGuestPasses2Response& operator=(CMsgAMGrantGuestPasses2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAMGrantGuestPasses2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAMGrantGuestPasses2Response* internal_default_instance() {
    return reinterpret_cast<const CMsgAMGrantGuestPasses2Response*>(
               &_CMsgAMGrantGuestPasses2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CMsgAMGrantGuestPasses2Response& a, CMsgAMGrantGuestPasses2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAMGrantGuestPasses2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAMGrantGuestPasses2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAMGrantGuestPasses2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAMGrantGuestPasses2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAMGrantGuestPasses2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAMGrantGuestPasses2Response& from) {
    CMsgAMGrantGuestPasses2Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAMGrantGuestPasses2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAMGrantGuestPasses2Response";
  }
  protected:
  explicit CMsgAMGrantGuestPasses2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPassesGrantedFieldNumber = 2,
    kEresultFieldNumber = 1,
  };
  // optional int32 passes_granted = 2 [default = 0];
  bool has_passes_granted() const;
  private:
  bool _internal_has_passes_granted() const;
  public:
  void clear_passes_granted();
  int32_t passes_granted() const;
  void set_passes_granted(int32_t value);
  private:
  int32_t _internal_passes_granted() const;
  void _internal_set_passes_granted(int32_t value);
  public:

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAMGrantGuestPasses2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t passes_granted_;
    int32_t eresult_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCGetPersonaNames final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCGetPersonaNames) */ {
 public:
  inline CMsgGCGetPersonaNames() : CMsgGCGetPersonaNames(nullptr) {}
  ~CMsgGCGetPersonaNames() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCGetPersonaNames(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCGetPersonaNames(const CMsgGCGetPersonaNames& from);
  CMsgGCGetPersonaNames(CMsgGCGetPersonaNames&& from) noexcept
    : CMsgGCGetPersonaNames() {
    *this = ::std::move(from);
  }

  inline CMsgGCGetPersonaNames& operator=(const CMsgGCGetPersonaNames& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCGetPersonaNames& operator=(CMsgGCGetPersonaNames&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCGetPersonaNames& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCGetPersonaNames* internal_default_instance() {
    return reinterpret_cast<const CMsgGCGetPersonaNames*>(
               &_CMsgGCGetPersonaNames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CMsgGCGetPersonaNames& a, CMsgGCGetPersonaNames& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCGetPersonaNames* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCGetPersonaNames* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCGetPersonaNames* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCGetPersonaNames>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCGetPersonaNames& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCGetPersonaNames& from) {
    CMsgGCGetPersonaNames::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCGetPersonaNames* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCGetPersonaNames";
  }
  protected:
  explicit CMsgGCGetPersonaNames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidsFieldNumber = 1,
  };
  // repeated fixed64 steamids = 1;
  int steamids_size() const;
  private:
  int _internal_steamids_size() const;
  public:
  void clear_steamids();
  private:
  uint64_t _internal_steamids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_steamids() const;
  void _internal_add_steamids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_steamids();
  public:
  uint64_t steamids(int index) const;
  void set_steamids(int index, uint64_t value);
  void add_steamids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      steamids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_steamids();

  // @@protoc_insertion_point(class_scope:CMsgGCGetPersonaNames)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > steamids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCGetPersonaNames_Response_PersonaName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCGetPersonaNames_Response.PersonaName) */ {
 public:
  inline CMsgGCGetPersonaNames_Response_PersonaName() : CMsgGCGetPersonaNames_Response_PersonaName(nullptr) {}
  ~CMsgGCGetPersonaNames_Response_PersonaName() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCGetPersonaNames_Response_PersonaName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCGetPersonaNames_Response_PersonaName(const CMsgGCGetPersonaNames_Response_PersonaName& from);
  CMsgGCGetPersonaNames_Response_PersonaName(CMsgGCGetPersonaNames_Response_PersonaName&& from) noexcept
    : CMsgGCGetPersonaNames_Response_PersonaName() {
    *this = ::std::move(from);
  }

  inline CMsgGCGetPersonaNames_Response_PersonaName& operator=(const CMsgGCGetPersonaNames_Response_PersonaName& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCGetPersonaNames_Response_PersonaName& operator=(CMsgGCGetPersonaNames_Response_PersonaName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCGetPersonaNames_Response_PersonaName& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCGetPersonaNames_Response_PersonaName* internal_default_instance() {
    return reinterpret_cast<const CMsgGCGetPersonaNames_Response_PersonaName*>(
               &_CMsgGCGetPersonaNames_Response_PersonaName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CMsgGCGetPersonaNames_Response_PersonaName& a, CMsgGCGetPersonaNames_Response_PersonaName& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCGetPersonaNames_Response_PersonaName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCGetPersonaNames_Response_PersonaName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCGetPersonaNames_Response_PersonaName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCGetPersonaNames_Response_PersonaName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCGetPersonaNames_Response_PersonaName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCGetPersonaNames_Response_PersonaName& from) {
    CMsgGCGetPersonaNames_Response_PersonaName::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCGetPersonaNames_Response_PersonaName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCGetPersonaNames_Response.PersonaName";
  }
  protected:
  explicit CMsgGCGetPersonaNames_Response_PersonaName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonaNameFieldNumber = 2,
    kSteamidFieldNumber = 1,
  };
  // optional string persona_name = 2;
  bool has_persona_name() const;
  private:
  bool _internal_has_persona_name() const;
  public:
  void clear_persona_name();
  const std::string& persona_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_persona_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_persona_name();
  PROTOBUF_NODISCARD std::string* release_persona_name();
  void set_allocated_persona_name(std::string* persona_name);
  private:
  const std::string& _internal_persona_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_persona_name(const std::string& value);
  std::string* _internal_mutable_persona_name();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCGetPersonaNames_Response.PersonaName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr persona_name_;
    uint64_t steamid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCGetPersonaNames_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCGetPersonaNames_Response) */ {
 public:
  inline CMsgGCGetPersonaNames_Response() : CMsgGCGetPersonaNames_Response(nullptr) {}
  ~CMsgGCGetPersonaNames_Response() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCGetPersonaNames_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCGetPersonaNames_Response(const CMsgGCGetPersonaNames_Response& from);
  CMsgGCGetPersonaNames_Response(CMsgGCGetPersonaNames_Response&& from) noexcept
    : CMsgGCGetPersonaNames_Response() {
    *this = ::std::move(from);
  }

  inline CMsgGCGetPersonaNames_Response& operator=(const CMsgGCGetPersonaNames_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCGetPersonaNames_Response& operator=(CMsgGCGetPersonaNames_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCGetPersonaNames_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCGetPersonaNames_Response* internal_default_instance() {
    return reinterpret_cast<const CMsgGCGetPersonaNames_Response*>(
               &_CMsgGCGetPersonaNames_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CMsgGCGetPersonaNames_Response& a, CMsgGCGetPersonaNames_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCGetPersonaNames_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCGetPersonaNames_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCGetPersonaNames_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCGetPersonaNames_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCGetPersonaNames_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCGetPersonaNames_Response& from) {
    CMsgGCGetPersonaNames_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCGetPersonaNames_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCGetPersonaNames_Response";
  }
  protected:
  explicit CMsgGCGetPersonaNames_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCGetPersonaNames_Response_PersonaName PersonaName;

  // accessors -------------------------------------------------------

  enum : int {
    kSucceededLookupsFieldNumber = 1,
    kFailedLookupSteamidsFieldNumber = 2,
  };
  // repeated .CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
  int succeeded_lookups_size() const;
  private:
  int _internal_succeeded_lookups_size() const;
  public:
  void clear_succeeded_lookups();
  ::CMsgGCGetPersonaNames_Response_PersonaName* mutable_succeeded_lookups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCGetPersonaNames_Response_PersonaName >*
      mutable_succeeded_lookups();
  private:
  const ::CMsgGCGetPersonaNames_Response_PersonaName& _internal_succeeded_lookups(int index) const;
  ::CMsgGCGetPersonaNames_Response_PersonaName* _internal_add_succeeded_lookups();
  public:
  const ::CMsgGCGetPersonaNames_Response_PersonaName& succeeded_lookups(int index) const;
  ::CMsgGCGetPersonaNames_Response_PersonaName* add_succeeded_lookups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCGetPersonaNames_Response_PersonaName >&
      succeeded_lookups() const;

  // repeated fixed64 failed_lookup_steamids = 2;
  int failed_lookup_steamids_size() const;
  private:
  int _internal_failed_lookup_steamids_size() const;
  public:
  void clear_failed_lookup_steamids();
  private:
  uint64_t _internal_failed_lookup_steamids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_failed_lookup_steamids() const;
  void _internal_add_failed_lookup_steamids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_failed_lookup_steamids();
  public:
  uint64_t failed_lookup_steamids(int index) const;
  void set_failed_lookup_steamids(int index, uint64_t value);
  void add_failed_lookup_steamids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      failed_lookup_steamids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_failed_lookup_steamids();

  // @@protoc_insertion_point(class_scope:CMsgGCGetPersonaNames_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCGetPersonaNames_Response_PersonaName > succeeded_lookups_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > failed_lookup_steamids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCheckFriendship final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCheckFriendship) */ {
 public:
  inline CMsgGCCheckFriendship() : CMsgGCCheckFriendship(nullptr) {}
  ~CMsgGCCheckFriendship() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCCheckFriendship(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCheckFriendship(const CMsgGCCheckFriendship& from);
  CMsgGCCheckFriendship(CMsgGCCheckFriendship&& from) noexcept
    : CMsgGCCheckFriendship() {
    *this = ::std::move(from);
  }

  inline CMsgGCCheckFriendship& operator=(const CMsgGCCheckFriendship& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCheckFriendship& operator=(CMsgGCCheckFriendship&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCheckFriendship& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCheckFriendship* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCheckFriendship*>(
               &_CMsgGCCheckFriendship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CMsgGCCheckFriendship& a, CMsgGCCheckFriendship& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCheckFriendship* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCheckFriendship* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCCheckFriendship* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCCheckFriendship>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCheckFriendship& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCCheckFriendship& from) {
    CMsgGCCheckFriendship::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCheckFriendship* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCheckFriendship";
  }
  protected:
  explicit CMsgGCCheckFriendship(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidLeftFieldNumber = 1,
    kSteamidRightFieldNumber = 2,
  };
  // optional fixed64 steamid_left = 1;
  bool has_steamid_left() const;
  private:
  bool _internal_has_steamid_left() const;
  public:
  void clear_steamid_left();
  uint64_t steamid_left() const;
  void set_steamid_left(uint64_t value);
  private:
  uint64_t _internal_steamid_left() const;
  void _internal_set_steamid_left(uint64_t value);
  public:

  // optional fixed64 steamid_right = 2;
  bool has_steamid_right() const;
  private:
  bool _internal_has_steamid_right() const;
  public:
  void clear_steamid_right();
  uint64_t steamid_right() const;
  void set_steamid_right(uint64_t value);
  private:
  uint64_t _internal_steamid_right() const;
  void _internal_set_steamid_right(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCheckFriendship)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t steamid_left_;
    uint64_t steamid_right_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCheckFriendship_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCheckFriendship_Response) */ {
 public:
  inline CMsgGCCheckFriendship_Response() : CMsgGCCheckFriendship_Response(nullptr) {}
  ~CMsgGCCheckFriendship_Response() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCCheckFriendship_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCheckFriendship_Response(const CMsgGCCheckFriendship_Response& from);
  CMsgGCCheckFriendship_Response(CMsgGCCheckFriendship_Response&& from) noexcept
    : CMsgGCCheckFriendship_Response() {
    *this = ::std::move(from);
  }

  inline CMsgGCCheckFriendship_Response& operator=(const CMsgGCCheckFriendship_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCheckFriendship_Response& operator=(CMsgGCCheckFriendship_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCheckFriendship_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCheckFriendship_Response* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCheckFriendship_Response*>(
               &_CMsgGCCheckFriendship_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CMsgGCCheckFriendship_Response& a, CMsgGCCheckFriendship_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCheckFriendship_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCheckFriendship_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCCheckFriendship_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCCheckFriendship_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCheckFriendship_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCCheckFriendship_Response& from) {
    CMsgGCCheckFriendship_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCheckFriendship_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCheckFriendship_Response";
  }
  protected:
  explicit CMsgGCCheckFriendship_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kFoundFriendshipFieldNumber = 2,
  };
  // optional bool success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // optional bool found_friendship = 2;
  bool has_found_friendship() const;
  private:
  bool _internal_has_found_friendship() const;
  public:
  void clear_found_friendship();
  bool found_friendship() const;
  void set_found_friendship(bool value);
  private:
  bool _internal_found_friendship() const;
  void _internal_set_found_friendship(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCheckFriendship_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool success_;
    bool found_friendship_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCGetAppFriendsList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCGetAppFriendsList) */ {
 public:
  inline CMsgGCGetAppFriendsList() : CMsgGCGetAppFriendsList(nullptr) {}
  ~CMsgGCGetAppFriendsList() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCGetAppFriendsList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCGetAppFriendsList(const CMsgGCGetAppFriendsList& from);
  CMsgGCGetAppFriendsList(CMsgGCGetAppFriendsList&& from) noexcept
    : CMsgGCGetAppFriendsList() {
    *this = ::std::move(from);
  }

  inline CMsgGCGetAppFriendsList& operator=(const CMsgGCGetAppFriendsList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCGetAppFriendsList& operator=(CMsgGCGetAppFriendsList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCGetAppFriendsList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCGetAppFriendsList* internal_default_instance() {
    return reinterpret_cast<const CMsgGCGetAppFriendsList*>(
               &_CMsgGCGetAppFriendsList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CMsgGCGetAppFriendsList& a, CMsgGCGetAppFriendsList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCGetAppFriendsList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCGetAppFriendsList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCGetAppFriendsList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCGetAppFriendsList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCGetAppFriendsList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCGetAppFriendsList& from) {
    CMsgGCGetAppFriendsList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCGetAppFriendsList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCGetAppFriendsList";
  }
  protected:
  explicit CMsgGCGetAppFriendsList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kIncludeFriendshipTimestampsFieldNumber = 2,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional bool include_friendship_timestamps = 2;
  bool has_include_friendship_timestamps() const;
  private:
  bool _internal_has_include_friendship_timestamps() const;
  public:
  void clear_include_friendship_timestamps();
  bool include_friendship_timestamps() const;
  void set_include_friendship_timestamps(bool value);
  private:
  bool _internal_include_friendship_timestamps() const;
  void _internal_set_include_friendship_timestamps(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCGetAppFriendsList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t steamid_;
    bool include_friendship_timestamps_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCGetAppFriendsList_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCGetAppFriendsList_Response) */ {
 public:
  inline CMsgGCGetAppFriendsList_Response() : CMsgGCGetAppFriendsList_Response(nullptr) {}
  ~CMsgGCGetAppFriendsList_Response() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCGetAppFriendsList_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCGetAppFriendsList_Response(const CMsgGCGetAppFriendsList_Response& from);
  CMsgGCGetAppFriendsList_Response(CMsgGCGetAppFriendsList_Response&& from) noexcept
    : CMsgGCGetAppFriendsList_Response() {
    *this = ::std::move(from);
  }

  inline CMsgGCGetAppFriendsList_Response& operator=(const CMsgGCGetAppFriendsList_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCGetAppFriendsList_Response& operator=(CMsgGCGetAppFriendsList_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCGetAppFriendsList_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCGetAppFriendsList_Response* internal_default_instance() {
    return reinterpret_cast<const CMsgGCGetAppFriendsList_Response*>(
               &_CMsgGCGetAppFriendsList_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CMsgGCGetAppFriendsList_Response& a, CMsgGCGetAppFriendsList_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCGetAppFriendsList_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCGetAppFriendsList_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCGetAppFriendsList_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCGetAppFriendsList_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCGetAppFriendsList_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCGetAppFriendsList_Response& from) {
    CMsgGCGetAppFriendsList_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCGetAppFriendsList_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCGetAppFriendsList_Response";
  }
  protected:
  explicit CMsgGCGetAppFriendsList_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidsFieldNumber = 2,
    kFriendshipTimestampsFieldNumber = 3,
    kLastPlaytimesFieldNumber = 4,
    kSuccessFieldNumber = 1,
  };
  // repeated fixed64 steamids = 2;
  int steamids_size() const;
  private:
  int _internal_steamids_size() const;
  public:
  void clear_steamids();
  private:
  uint64_t _internal_steamids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_steamids() const;
  void _internal_add_steamids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_steamids();
  public:
  uint64_t steamids(int index) const;
  void set_steamids(int index, uint64_t value);
  void add_steamids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      steamids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_steamids();

  // repeated fixed32 friendship_timestamps = 3;
  int friendship_timestamps_size() const;
  private:
  int _internal_friendship_timestamps_size() const;
  public:
  void clear_friendship_timestamps();
  private:
  uint32_t _internal_friendship_timestamps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_friendship_timestamps() const;
  void _internal_add_friendship_timestamps(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_friendship_timestamps();
  public:
  uint32_t friendship_timestamps(int index) const;
  void set_friendship_timestamps(int index, uint32_t value);
  void add_friendship_timestamps(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      friendship_timestamps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_friendship_timestamps();

  // repeated fixed32 last_playtimes = 4;
  int last_playtimes_size() const;
  private:
  int _internal_last_playtimes_size() const;
  public:
  void clear_last_playtimes();
  private:
  uint32_t _internal_last_playtimes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_last_playtimes() const;
  void _internal_add_last_playtimes(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_last_playtimes();
  public:
  uint32_t last_playtimes(int index) const;
  void set_last_playtimes(int index, uint32_t value);
  void add_last_playtimes(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      last_playtimes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_last_playtimes();

  // optional bool success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCGetAppFriendsList_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > steamids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > friendship_timestamps_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > last_playtimes_;
    bool success_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCMsgMasterSetDirectory_SubGC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCMsgMasterSetDirectory.SubGC) */ {
 public:
  inline CMsgGCMsgMasterSetDirectory_SubGC() : CMsgGCMsgMasterSetDirectory_SubGC(nullptr) {}
  ~CMsgGCMsgMasterSetDirectory_SubGC() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetDirectory_SubGC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCMsgMasterSetDirectory_SubGC(const CMsgGCMsgMasterSetDirectory_SubGC& from);
  CMsgGCMsgMasterSetDirectory_SubGC(CMsgGCMsgMasterSetDirectory_SubGC&& from) noexcept
    : CMsgGCMsgMasterSetDirectory_SubGC() {
    *this = ::std::move(from);
  }

  inline CMsgGCMsgMasterSetDirectory_SubGC& operator=(const CMsgGCMsgMasterSetDirectory_SubGC& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCMsgMasterSetDirectory_SubGC& operator=(CMsgGCMsgMasterSetDirectory_SubGC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCMsgMasterSetDirectory_SubGC& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCMsgMasterSetDirectory_SubGC* internal_default_instance() {
    return reinterpret_cast<const CMsgGCMsgMasterSetDirectory_SubGC*>(
               &_CMsgGCMsgMasterSetDirectory_SubGC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CMsgGCMsgMasterSetDirectory_SubGC& a, CMsgGCMsgMasterSetDirectory_SubGC& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCMsgMasterSetDirectory_SubGC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCMsgMasterSetDirectory_SubGC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCMsgMasterSetDirectory_SubGC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCMsgMasterSetDirectory_SubGC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCMsgMasterSetDirectory_SubGC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCMsgMasterSetDirectory_SubGC& from) {
    CMsgGCMsgMasterSetDirectory_SubGC::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCMsgMasterSetDirectory_SubGC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCMsgMasterSetDirectory.SubGC";
  }
  protected:
  explicit CMsgGCMsgMasterSetDirectory_SubGC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kBoxFieldNumber = 3,
    kCommandLineFieldNumber = 4,
    kGcBinaryFieldNumber = 5,
    kDirIndexFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string box = 3;
  bool has_box() const;
  private:
  bool _internal_has_box() const;
  public:
  void clear_box();
  const std::string& box() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_box(ArgT0&& arg0, ArgT... args);
  std::string* mutable_box();
  PROTOBUF_NODISCARD std::string* release_box();
  void set_allocated_box(std::string* box);
  private:
  const std::string& _internal_box() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_box(const std::string& value);
  std::string* _internal_mutable_box();
  public:

  // optional string command_line = 4;
  bool has_command_line() const;
  private:
  bool _internal_has_command_line() const;
  public:
  void clear_command_line();
  const std::string& command_line() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command_line(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command_line();
  PROTOBUF_NODISCARD std::string* release_command_line();
  void set_allocated_command_line(std::string* command_line);
  private:
  const std::string& _internal_command_line() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command_line(const std::string& value);
  std::string* _internal_mutable_command_line();
  public:

  // optional string gc_binary = 5;
  bool has_gc_binary() const;
  private:
  bool _internal_has_gc_binary() const;
  public:
  void clear_gc_binary();
  const std::string& gc_binary() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gc_binary(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gc_binary();
  PROTOBUF_NODISCARD std::string* release_gc_binary();
  void set_allocated_gc_binary(std::string* gc_binary);
  private:
  const std::string& _internal_gc_binary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gc_binary(const std::string& value);
  std::string* _internal_mutable_gc_binary();
  public:

  // optional int32 dir_index = 1 [default = -1];
  bool has_dir_index() const;
  private:
  bool _internal_has_dir_index() const;
  public:
  void clear_dir_index();
  int32_t dir_index() const;
  void set_dir_index(int32_t value);
  private:
  int32_t _internal_dir_index() const;
  void _internal_set_dir_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCMsgMasterSetDirectory.SubGC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr box_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_line_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gc_binary_;
    int32_t dir_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCMsgMasterSetDirectory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCMsgMasterSetDirectory) */ {
 public:
  inline CMsgGCMsgMasterSetDirectory() : CMsgGCMsgMasterSetDirectory(nullptr) {}
  ~CMsgGCMsgMasterSetDirectory() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetDirectory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCMsgMasterSetDirectory(const CMsgGCMsgMasterSetDirectory& from);
  CMsgGCMsgMasterSetDirectory(CMsgGCMsgMasterSetDirectory&& from) noexcept
    : CMsgGCMsgMasterSetDirectory() {
    *this = ::std::move(from);
  }

  inline CMsgGCMsgMasterSetDirectory& operator=(const CMsgGCMsgMasterSetDirectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCMsgMasterSetDirectory& operator=(CMsgGCMsgMasterSetDirectory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCMsgMasterSetDirectory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCMsgMasterSetDirectory* internal_default_instance() {
    return reinterpret_cast<const CMsgGCMsgMasterSetDirectory*>(
               &_CMsgGCMsgMasterSetDirectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CMsgGCMsgMasterSetDirectory& a, CMsgGCMsgMasterSetDirectory& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCMsgMasterSetDirectory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCMsgMasterSetDirectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCMsgMasterSetDirectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCMsgMasterSetDirectory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCMsgMasterSetDirectory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCMsgMasterSetDirectory& from) {
    CMsgGCMsgMasterSetDirectory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCMsgMasterSetDirectory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCMsgMasterSetDirectory";
  }
  protected:
  explicit CMsgGCMsgMasterSetDirectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCMsgMasterSetDirectory_SubGC SubGC;

  // accessors -------------------------------------------------------

  enum : int {
    kDirFieldNumber = 2,
    kMasterDirIndexFieldNumber = 1,
  };
  // repeated .CMsgGCMsgMasterSetDirectory.SubGC dir = 2;
  int dir_size() const;
  private:
  int _internal_dir_size() const;
  public:
  void clear_dir();
  ::CMsgGCMsgMasterSetDirectory_SubGC* mutable_dir(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMsgMasterSetDirectory_SubGC >*
      mutable_dir();
  private:
  const ::CMsgGCMsgMasterSetDirectory_SubGC& _internal_dir(int index) const;
  ::CMsgGCMsgMasterSetDirectory_SubGC* _internal_add_dir();
  public:
  const ::CMsgGCMsgMasterSetDirectory_SubGC& dir(int index) const;
  ::CMsgGCMsgMasterSetDirectory_SubGC* add_dir();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMsgMasterSetDirectory_SubGC >&
      dir() const;

  // optional int32 master_dir_index = 1 [default = -1];
  bool has_master_dir_index() const;
  private:
  bool _internal_has_master_dir_index() const;
  public:
  void clear_master_dir_index();
  int32_t master_dir_index() const;
  void set_master_dir_index(int32_t value);
  private:
  int32_t _internal_master_dir_index() const;
  void _internal_set_master_dir_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCMsgMasterSetDirectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMsgMasterSetDirectory_SubGC > dir_;
    int32_t master_dir_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCMsgMasterSetDirectory_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCMsgMasterSetDirectory_Response) */ {
 public:
  inline CMsgGCMsgMasterSetDirectory_Response() : CMsgGCMsgMasterSetDirectory_Response(nullptr) {}
  ~CMsgGCMsgMasterSetDirectory_Response() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetDirectory_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCMsgMasterSetDirectory_Response(const CMsgGCMsgMasterSetDirectory_Response& from);
  CMsgGCMsgMasterSetDirectory_Response(CMsgGCMsgMasterSetDirectory_Response&& from) noexcept
    : CMsgGCMsgMasterSetDirectory_Response() {
    *this = ::std::move(from);
  }

  inline CMsgGCMsgMasterSetDirectory_Response& operator=(const CMsgGCMsgMasterSetDirectory_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCMsgMasterSetDirectory_Response& operator=(CMsgGCMsgMasterSetDirectory_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCMsgMasterSetDirectory_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCMsgMasterSetDirectory_Response* internal_default_instance() {
    return reinterpret_cast<const CMsgGCMsgMasterSetDirectory_Response*>(
               &_CMsgGCMsgMasterSetDirectory_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CMsgGCMsgMasterSetDirectory_Response& a, CMsgGCMsgMasterSetDirectory_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCMsgMasterSetDirectory_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCMsgMasterSetDirectory_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCMsgMasterSetDirectory_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCMsgMasterSetDirectory_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCMsgMasterSetDirectory_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCMsgMasterSetDirectory_Response& from) {
    CMsgGCMsgMasterSetDirectory_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCMsgMasterSetDirectory_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCMsgMasterSetDirectory_Response";
  }
  protected:
  explicit CMsgGCMsgMasterSetDirectory_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kEresultFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCMsgMasterSetDirectory_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int32_t eresult_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCMsgWebAPIJobRequestForwardResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCMsgWebAPIJobRequestForwardResponse) */ {
 public:
  inline CMsgGCMsgWebAPIJobRequestForwardResponse() : CMsgGCMsgWebAPIJobRequestForwardResponse(nullptr) {}
  ~CMsgGCMsgWebAPIJobRequestForwardResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCMsgWebAPIJobRequestForwardResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCMsgWebAPIJobRequestForwardResponse(const CMsgGCMsgWebAPIJobRequestForwardResponse& from);
  CMsgGCMsgWebAPIJobRequestForwardResponse(CMsgGCMsgWebAPIJobRequestForwardResponse&& from) noexcept
    : CMsgGCMsgWebAPIJobRequestForwardResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCMsgWebAPIJobRequestForwardResponse& operator=(const CMsgGCMsgWebAPIJobRequestForwardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCMsgWebAPIJobRequestForwardResponse& operator=(CMsgGCMsgWebAPIJobRequestForwardResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCMsgWebAPIJobRequestForwardResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCMsgWebAPIJobRequestForwardResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCMsgWebAPIJobRequestForwardResponse*>(
               &_CMsgGCMsgWebAPIJobRequestForwardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CMsgGCMsgWebAPIJobRequestForwardResponse& a, CMsgGCMsgWebAPIJobRequestForwardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCMsgWebAPIJobRequestForwardResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCMsgWebAPIJobRequestForwardResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCMsgWebAPIJobRequestForwardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCMsgWebAPIJobRequestForwardResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCMsgWebAPIJobRequestForwardResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCMsgWebAPIJobRequestForwardResponse& from) {
    CMsgGCMsgWebAPIJobRequestForwardResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCMsgWebAPIJobRequestForwardResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCMsgWebAPIJobRequestForwardResponse";
  }
  protected:
  explicit CMsgGCMsgWebAPIJobRequestForwardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirIndexFieldNumber = 1,
  };
  // optional int32 dir_index = 1 [default = -1];
  bool has_dir_index() const;
  private:
  bool _internal_has_dir_index() const;
  public:
  void clear_dir_index();
  int32_t dir_index() const;
  void set_dir_index(int32_t value);
  private:
  int32_t _internal_dir_index() const;
  void _internal_set_dir_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCMsgWebAPIJobRequestForwardResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t dir_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CGCSystemMsg_GetPurchaseTrust_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCSystemMsg_GetPurchaseTrust_Request) */ {
 public:
  inline CGCSystemMsg_GetPurchaseTrust_Request() : CGCSystemMsg_GetPurchaseTrust_Request(nullptr) {}
  ~CGCSystemMsg_GetPurchaseTrust_Request() override;
  explicit PROTOBUF_CONSTEXPR CGCSystemMsg_GetPurchaseTrust_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCSystemMsg_GetPurchaseTrust_Request(const CGCSystemMsg_GetPurchaseTrust_Request& from);
  CGCSystemMsg_GetPurchaseTrust_Request(CGCSystemMsg_GetPurchaseTrust_Request&& from) noexcept
    : CGCSystemMsg_GetPurchaseTrust_Request() {
    *this = ::std::move(from);
  }

  inline CGCSystemMsg_GetPurchaseTrust_Request& operator=(const CGCSystemMsg_GetPurchaseTrust_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCSystemMsg_GetPurchaseTrust_Request& operator=(CGCSystemMsg_GetPurchaseTrust_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCSystemMsg_GetPurchaseTrust_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCSystemMsg_GetPurchaseTrust_Request* internal_default_instance() {
    return reinterpret_cast<const CGCSystemMsg_GetPurchaseTrust_Request*>(
               &_CGCSystemMsg_GetPurchaseTrust_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CGCSystemMsg_GetPurchaseTrust_Request& a, CGCSystemMsg_GetPurchaseTrust_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCSystemMsg_GetPurchaseTrust_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCSystemMsg_GetPurchaseTrust_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGCSystemMsg_GetPurchaseTrust_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGCSystemMsg_GetPurchaseTrust_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGCSystemMsg_GetPurchaseTrust_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CGCSystemMsg_GetPurchaseTrust_Request& from) {
    CGCSystemMsg_GetPurchaseTrust_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCSystemMsg_GetPurchaseTrust_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCSystemMsg_GetPurchaseTrust_Request";
  }
  protected:
  explicit CGCSystemMsg_GetPurchaseTrust_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CGCSystemMsg_GetPurchaseTrust_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t steamid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CGCSystemMsg_GetPurchaseTrust_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCSystemMsg_GetPurchaseTrust_Response) */ {
 public:
  inline CGCSystemMsg_GetPurchaseTrust_Response() : CGCSystemMsg_GetPurchaseTrust_Response(nullptr) {}
  ~CGCSystemMsg_GetPurchaseTrust_Response() override;
  explicit PROTOBUF_CONSTEXPR CGCSystemMsg_GetPurchaseTrust_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCSystemMsg_GetPurchaseTrust_Response(const CGCSystemMsg_GetPurchaseTrust_Response& from);
  CGCSystemMsg_GetPurchaseTrust_Response(CGCSystemMsg_GetPurchaseTrust_Response&& from) noexcept
    : CGCSystemMsg_GetPurchaseTrust_Response() {
    *this = ::std::move(from);
  }

  inline CGCSystemMsg_GetPurchaseTrust_Response& operator=(const CGCSystemMsg_GetPurchaseTrust_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCSystemMsg_GetPurchaseTrust_Response& operator=(CGCSystemMsg_GetPurchaseTrust_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCSystemMsg_GetPurchaseTrust_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCSystemMsg_GetPurchaseTrust_Response* internal_default_instance() {
    return reinterpret_cast<const CGCSystemMsg_GetPurchaseTrust_Response*>(
               &_CGCSystemMsg_GetPurchaseTrust_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CGCSystemMsg_GetPurchaseTrust_Response& a, CGCSystemMsg_GetPurchaseTrust_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCSystemMsg_GetPurchaseTrust_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCSystemMsg_GetPurchaseTrust_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGCSystemMsg_GetPurchaseTrust_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGCSystemMsg_GetPurchaseTrust_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGCSystemMsg_GetPurchaseTrust_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CGCSystemMsg_GetPurchaseTrust_Response& from) {
    CGCSystemMsg_GetPurchaseTrust_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCSystemMsg_GetPurchaseTrust_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCSystemMsg_GetPurchaseTrust_Response";
  }
  protected:
  explicit CGCSystemMsg_GetPurchaseTrust_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHasPriorPurchaseHistoryFieldNumber = 1,
    kHasNoRecentPasswordResetsFieldNumber = 2,
    kIsWalletCashTrustedFieldNumber = 3,
    kTimeAllTrustedFieldNumber = 4,
  };
  // optional bool has_prior_purchase_history = 1;
  bool has_has_prior_purchase_history() const;
  private:
  bool _internal_has_has_prior_purchase_history() const;
  public:
  void clear_has_prior_purchase_history();
  bool has_prior_purchase_history() const;
  void set_has_prior_purchase_history(bool value);
  private:
  bool _internal_has_prior_purchase_history() const;
  void _internal_set_has_prior_purchase_history(bool value);
  public:

  // optional bool has_no_recent_password_resets = 2;
  bool has_has_no_recent_password_resets() const;
  private:
  bool _internal_has_has_no_recent_password_resets() const;
  public:
  void clear_has_no_recent_password_resets();
  bool has_no_recent_password_resets() const;
  void set_has_no_recent_password_resets(bool value);
  private:
  bool _internal_has_no_recent_password_resets() const;
  void _internal_set_has_no_recent_password_resets(bool value);
  public:

  // optional bool is_wallet_cash_trusted = 3;
  bool has_is_wallet_cash_trusted() const;
  private:
  bool _internal_has_is_wallet_cash_trusted() const;
  public:
  void clear_is_wallet_cash_trusted();
  bool is_wallet_cash_trusted() const;
  void set_is_wallet_cash_trusted(bool value);
  private:
  bool _internal_is_wallet_cash_trusted() const;
  void _internal_set_is_wallet_cash_trusted(bool value);
  public:

  // optional uint32 time_all_trusted = 4;
  bool has_time_all_trusted() const;
  private:
  bool _internal_has_time_all_trusted() const;
  public:
  void clear_time_all_trusted();
  uint32_t time_all_trusted() const;
  void set_time_all_trusted(uint32_t value);
  private:
  uint32_t _internal_time_all_trusted() const;
  void _internal_set_time_all_trusted(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CGCSystemMsg_GetPurchaseTrust_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool has_prior_purchase_history_;
    bool has_no_recent_password_resets_;
    bool is_wallet_cash_trusted_;
    uint32_t time_all_trusted_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCHAccountVacStatusChange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCHAccountVacStatusChange) */ {
 public:
  inline CMsgGCHAccountVacStatusChange() : CMsgGCHAccountVacStatusChange(nullptr) {}
  ~CMsgGCHAccountVacStatusChange() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCHAccountVacStatusChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCHAccountVacStatusChange(const CMsgGCHAccountVacStatusChange& from);
  CMsgGCHAccountVacStatusChange(CMsgGCHAccountVacStatusChange&& from) noexcept
    : CMsgGCHAccountVacStatusChange() {
    *this = ::std::move(from);
  }

  inline CMsgGCHAccountVacStatusChange& operator=(const CMsgGCHAccountVacStatusChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCHAccountVacStatusChange& operator=(CMsgGCHAccountVacStatusChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCHAccountVacStatusChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCHAccountVacStatusChange* internal_default_instance() {
    return reinterpret_cast<const CMsgGCHAccountVacStatusChange*>(
               &_CMsgGCHAccountVacStatusChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CMsgGCHAccountVacStatusChange& a, CMsgGCHAccountVacStatusChange& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCHAccountVacStatusChange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCHAccountVacStatusChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCHAccountVacStatusChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCHAccountVacStatusChange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCHAccountVacStatusChange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCHAccountVacStatusChange& from) {
    CMsgGCHAccountVacStatusChange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCHAccountVacStatusChange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCHAccountVacStatusChange";
  }
  protected:
  explicit CMsgGCHAccountVacStatusChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdFieldNumber = 1,
    kAppIdFieldNumber = 2,
    kRtimeVacbanStartsFieldNumber = 3,
    kIsBannedNowFieldNumber = 4,
    kIsBannedFutureFieldNumber = 5,
  };
  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // optional uint32 app_id = 2;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 rtime_vacban_starts = 3;
  bool has_rtime_vacban_starts() const;
  private:
  bool _internal_has_rtime_vacban_starts() const;
  public:
  void clear_rtime_vacban_starts();
  uint32_t rtime_vacban_starts() const;
  void set_rtime_vacban_starts(uint32_t value);
  private:
  uint32_t _internal_rtime_vacban_starts() const;
  void _internal_set_rtime_vacban_starts(uint32_t value);
  public:

  // optional bool is_banned_now = 4;
  bool has_is_banned_now() const;
  private:
  bool _internal_has_is_banned_now() const;
  public:
  void clear_is_banned_now();
  bool is_banned_now() const;
  void set_is_banned_now(bool value);
  private:
  bool _internal_is_banned_now() const;
  void _internal_set_is_banned_now(bool value);
  public:

  // optional bool is_banned_future = 5;
  bool has_is_banned_future() const;
  private:
  bool _internal_has_is_banned_future() const;
  public:
  void clear_is_banned_future();
  bool is_banned_future() const;
  void set_is_banned_future(bool value);
  private:
  bool _internal_is_banned_future() const;
  void _internal_set_is_banned_future(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCHAccountVacStatusChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t steam_id_;
    uint32_t app_id_;
    uint32_t rtime_vacban_starts_;
    bool is_banned_now_;
    bool is_banned_future_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCGetPartnerAccountLink final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCGetPartnerAccountLink) */ {
 public:
  inline CMsgGCGetPartnerAccountLink() : CMsgGCGetPartnerAccountLink(nullptr) {}
  ~CMsgGCGetPartnerAccountLink() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCGetPartnerAccountLink(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCGetPartnerAccountLink(const CMsgGCGetPartnerAccountLink& from);
  CMsgGCGetPartnerAccountLink(CMsgGCGetPartnerAccountLink&& from) noexcept
    : CMsgGCGetPartnerAccountLink() {
    *this = ::std::move(from);
  }

  inline CMsgGCGetPartnerAccountLink& operator=(const CMsgGCGetPartnerAccountLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCGetPartnerAccountLink& operator=(CMsgGCGetPartnerAccountLink&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCGetPartnerAccountLink& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCGetPartnerAccountLink* internal_default_instance() {
    return reinterpret_cast<const CMsgGCGetPartnerAccountLink*>(
               &_CMsgGCGetPartnerAccountLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CMsgGCGetPartnerAccountLink& a, CMsgGCGetPartnerAccountLink& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCGetPartnerAccountLink* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCGetPartnerAccountLink* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCGetPartnerAccountLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCGetPartnerAccountLink>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCGetPartnerAccountLink& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCGetPartnerAccountLink& from) {
    CMsgGCGetPartnerAccountLink::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCGetPartnerAccountLink* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCGetPartnerAccountLink";
  }
  protected:
  explicit CMsgGCGetPartnerAccountLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCGetPartnerAccountLink)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t steamid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCGetPartnerAccountLink_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCGetPartnerAccountLink_Response) */ {
 public:
  inline CMsgGCGetPartnerAccountLink_Response() : CMsgGCGetPartnerAccountLink_Response(nullptr) {}
  ~CMsgGCGetPartnerAccountLink_Response() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCGetPartnerAccountLink_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCGetPartnerAccountLink_Response(const CMsgGCGetPartnerAccountLink_Response& from);
  CMsgGCGetPartnerAccountLink_Response(CMsgGCGetPartnerAccountLink_Response&& from) noexcept
    : CMsgGCGetPartnerAccountLink_Response() {
    *this = ::std::move(from);
  }

  inline CMsgGCGetPartnerAccountLink_Response& operator=(const CMsgGCGetPartnerAccountLink_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCGetPartnerAccountLink_Response& operator=(CMsgGCGetPartnerAccountLink_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCGetPartnerAccountLink_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCGetPartnerAccountLink_Response* internal_default_instance() {
    return reinterpret_cast<const CMsgGCGetPartnerAccountLink_Response*>(
               &_CMsgGCGetPartnerAccountLink_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(CMsgGCGetPartnerAccountLink_Response& a, CMsgGCGetPartnerAccountLink_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCGetPartnerAccountLink_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCGetPartnerAccountLink_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCGetPartnerAccountLink_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCGetPartnerAccountLink_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCGetPartnerAccountLink_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCGetPartnerAccountLink_Response& from) {
    CMsgGCGetPartnerAccountLink_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCGetPartnerAccountLink_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCGetPartnerAccountLink_Response";
  }
  protected:
  explicit CMsgGCGetPartnerAccountLink_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPwidFieldNumber = 1,
    kNexonidFieldNumber = 2,
    kAgeclassFieldNumber = 3,
    kIdVerifiedFieldNumber = 4,
    kIsAdultFieldNumber = 5,
  };
  // optional uint32 pwid = 1;
  bool has_pwid() const;
  private:
  bool _internal_has_pwid() const;
  public:
  void clear_pwid();
  uint32_t pwid() const;
  void set_pwid(uint32_t value);
  private:
  uint32_t _internal_pwid() const;
  void _internal_set_pwid(uint32_t value);
  public:

  // optional uint32 nexonid = 2;
  bool has_nexonid() const;
  private:
  bool _internal_has_nexonid() const;
  public:
  void clear_nexonid();
  uint32_t nexonid() const;
  void set_nexonid(uint32_t value);
  private:
  uint32_t _internal_nexonid() const;
  void _internal_set_nexonid(uint32_t value);
  public:

  // optional int32 ageclass = 3 [default = 0];
  bool has_ageclass() const;
  private:
  bool _internal_has_ageclass() const;
  public:
  void clear_ageclass();
  int32_t ageclass() const;
  void set_ageclass(int32_t value);
  private:
  int32_t _internal_ageclass() const;
  void _internal_set_ageclass(int32_t value);
  public:

  // optional bool id_verified = 4 [default = true];
  bool has_id_verified() const;
  private:
  bool _internal_has_id_verified() const;
  public:
  void clear_id_verified();
  bool id_verified() const;
  void set_id_verified(bool value);
  private:
  bool _internal_id_verified() const;
  void _internal_set_id_verified(bool value);
  public:

  // optional bool is_adult = 5 [default = true];
  bool has_is_adult() const;
  private:
  bool _internal_has_is_adult() const;
  public:
  void clear_is_adult();
  bool is_adult() const;
  void set_is_adult(bool value);
  private:
  bool _internal_is_adult() const;
  void _internal_set_is_adult(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCGetPartnerAccountLink_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t pwid_;
    uint32_t nexonid_;
    int32_t ageclass_;
    bool id_verified_;
    bool is_adult_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCRoutingInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCRoutingInfo) */ {
 public:
  inline CMsgGCRoutingInfo() : CMsgGCRoutingInfo(nullptr) {}
  ~CMsgGCRoutingInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCRoutingInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCRoutingInfo(const CMsgGCRoutingInfo& from);
  CMsgGCRoutingInfo(CMsgGCRoutingInfo&& from) noexcept
    : CMsgGCRoutingInfo() {
    *this = ::std::move(from);
  }

  inline CMsgGCRoutingInfo& operator=(const CMsgGCRoutingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCRoutingInfo& operator=(CMsgGCRoutingInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCRoutingInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCRoutingInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgGCRoutingInfo*>(
               &_CMsgGCRoutingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CMsgGCRoutingInfo& a, CMsgGCRoutingInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCRoutingInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCRoutingInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCRoutingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCRoutingInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCRoutingInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCRoutingInfo& from) {
    CMsgGCRoutingInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCRoutingInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCRoutingInfo";
  }
  protected:
  explicit CMsgGCRoutingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCRoutingInfo_RoutingMethod RoutingMethod;
  static constexpr RoutingMethod RANDOM =
    CMsgGCRoutingInfo_RoutingMethod_RANDOM;
  static constexpr RoutingMethod DISCARD =
    CMsgGCRoutingInfo_RoutingMethod_DISCARD;
  static constexpr RoutingMethod CLIENT_STEAMID =
    CMsgGCRoutingInfo_RoutingMethod_CLIENT_STEAMID;
  static constexpr RoutingMethod PROTOBUF_FIELD_UINT64 =
    CMsgGCRoutingInfo_RoutingMethod_PROTOBUF_FIELD_UINT64;
  static constexpr RoutingMethod WEBAPI_PARAM =
    CMsgGCRoutingInfo_RoutingMethod_WEBAPI_PARAM;
  static constexpr RoutingMethod WEBAPI_PARAM_STEAMID_ACCOUNTID =
    CMsgGCRoutingInfo_RoutingMethod_WEBAPI_PARAM_STEAMID_ACCOUNTID;
  static inline bool RoutingMethod_IsValid(int value) {
    return CMsgGCRoutingInfo_RoutingMethod_IsValid(value);
  }
  static constexpr RoutingMethod RoutingMethod_MIN =
    CMsgGCRoutingInfo_RoutingMethod_RoutingMethod_MIN;
  static constexpr RoutingMethod RoutingMethod_MAX =
    CMsgGCRoutingInfo_RoutingMethod_RoutingMethod_MAX;
  static constexpr int RoutingMethod_ARRAYSIZE =
    CMsgGCRoutingInfo_RoutingMethod_RoutingMethod_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RoutingMethod_descriptor() {
    return CMsgGCRoutingInfo_RoutingMethod_descriptor();
  }
  template<typename T>
  static inline const std::string& RoutingMethod_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RoutingMethod>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RoutingMethod_Name.");
    return CMsgGCRoutingInfo_RoutingMethod_Name(enum_t_value);
  }
  static inline bool RoutingMethod_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RoutingMethod* value) {
    return CMsgGCRoutingInfo_RoutingMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDirIndexFieldNumber = 1,
    kWebapiParamFieldNumber = 5,
    kMethodFieldNumber = 2,
    kProtobufFieldFieldNumber = 4,
    kFallbackFieldNumber = 3,
  };
  // repeated int32 dir_index = 1;
  int dir_index_size() const;
  private:
  int _internal_dir_index_size() const;
  public:
  void clear_dir_index();
  private:
  int32_t _internal_dir_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_dir_index() const;
  void _internal_add_dir_index(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_dir_index();
  public:
  int32_t dir_index(int index) const;
  void set_dir_index(int index, int32_t value);
  void add_dir_index(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      dir_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_dir_index();

  // optional string webapi_param = 5;
  bool has_webapi_param() const;
  private:
  bool _internal_has_webapi_param() const;
  public:
  void clear_webapi_param();
  const std::string& webapi_param() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_webapi_param(ArgT0&& arg0, ArgT... args);
  std::string* mutable_webapi_param();
  PROTOBUF_NODISCARD std::string* release_webapi_param();
  void set_allocated_webapi_param(std::string* webapi_param);
  private:
  const std::string& _internal_webapi_param() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_webapi_param(const std::string& value);
  std::string* _internal_mutable_webapi_param();
  public:

  // optional .CMsgGCRoutingInfo.RoutingMethod method = 2 [default = RANDOM];
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  ::CMsgGCRoutingInfo_RoutingMethod method() const;
  void set_method(::CMsgGCRoutingInfo_RoutingMethod value);
  private:
  ::CMsgGCRoutingInfo_RoutingMethod _internal_method() const;
  void _internal_set_method(::CMsgGCRoutingInfo_RoutingMethod value);
  public:

  // optional uint32 protobuf_field = 4;
  bool has_protobuf_field() const;
  private:
  bool _internal_has_protobuf_field() const;
  public:
  void clear_protobuf_field();
  uint32_t protobuf_field() const;
  void set_protobuf_field(uint32_t value);
  private:
  uint32_t _internal_protobuf_field() const;
  void _internal_set_protobuf_field(uint32_t value);
  public:

  // optional .CMsgGCRoutingInfo.RoutingMethod fallback = 3 [default = DISCARD];
  bool has_fallback() const;
  private:
  bool _internal_has_fallback() const;
  public:
  void clear_fallback();
  ::CMsgGCRoutingInfo_RoutingMethod fallback() const;
  void set_fallback(::CMsgGCRoutingInfo_RoutingMethod value);
  private:
  ::CMsgGCRoutingInfo_RoutingMethod _internal_fallback() const;
  void _internal_set_fallback(::CMsgGCRoutingInfo_RoutingMethod value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCRoutingInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > dir_index_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr webapi_param_;
    int method_;
    uint32_t protobuf_field_;
    int fallback_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCMsgMasterSetWebAPIRouting_Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCMsgMasterSetWebAPIRouting.Entry) */ {
 public:
  inline CMsgGCMsgMasterSetWebAPIRouting_Entry() : CMsgGCMsgMasterSetWebAPIRouting_Entry(nullptr) {}
  ~CMsgGCMsgMasterSetWebAPIRouting_Entry() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetWebAPIRouting_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCMsgMasterSetWebAPIRouting_Entry(const CMsgGCMsgMasterSetWebAPIRouting_Entry& from);
  CMsgGCMsgMasterSetWebAPIRouting_Entry(CMsgGCMsgMasterSetWebAPIRouting_Entry&& from) noexcept
    : CMsgGCMsgMasterSetWebAPIRouting_Entry() {
    *this = ::std::move(from);
  }

  inline CMsgGCMsgMasterSetWebAPIRouting_Entry& operator=(const CMsgGCMsgMasterSetWebAPIRouting_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCMsgMasterSetWebAPIRouting_Entry& operator=(CMsgGCMsgMasterSetWebAPIRouting_Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCMsgMasterSetWebAPIRouting_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCMsgMasterSetWebAPIRouting_Entry* internal_default_instance() {
    return reinterpret_cast<const CMsgGCMsgMasterSetWebAPIRouting_Entry*>(
               &_CMsgGCMsgMasterSetWebAPIRouting_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(CMsgGCMsgMasterSetWebAPIRouting_Entry& a, CMsgGCMsgMasterSetWebAPIRouting_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCMsgMasterSetWebAPIRouting_Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCMsgMasterSetWebAPIRouting_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCMsgMasterSetWebAPIRouting_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCMsgMasterSetWebAPIRouting_Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCMsgMasterSetWebAPIRouting_Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCMsgMasterSetWebAPIRouting_Entry& from) {
    CMsgGCMsgMasterSetWebAPIRouting_Entry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCMsgMasterSetWebAPIRouting_Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCMsgMasterSetWebAPIRouting.Entry";
  }
  protected:
  explicit CMsgGCMsgMasterSetWebAPIRouting_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceNameFieldNumber = 1,
    kMethodNameFieldNumber = 2,
    kRoutingFieldNumber = 3,
  };
  // optional string interface_name = 1;
  bool has_interface_name() const;
  private:
  bool _internal_has_interface_name() const;
  public:
  void clear_interface_name();
  const std::string& interface_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_interface_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_interface_name();
  PROTOBUF_NODISCARD std::string* release_interface_name();
  void set_allocated_interface_name(std::string* interface_name);
  private:
  const std::string& _internal_interface_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interface_name(const std::string& value);
  std::string* _internal_mutable_interface_name();
  public:

  // optional string method_name = 2;
  bool has_method_name() const;
  private:
  bool _internal_has_method_name() const;
  public:
  void clear_method_name();
  const std::string& method_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method_name();
  PROTOBUF_NODISCARD std::string* release_method_name();
  void set_allocated_method_name(std::string* method_name);
  private:
  const std::string& _internal_method_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method_name(const std::string& value);
  std::string* _internal_mutable_method_name();
  public:

  // optional .CMsgGCRoutingInfo routing = 3;
  bool has_routing() const;
  private:
  bool _internal_has_routing() const;
  public:
  void clear_routing();
  const ::CMsgGCRoutingInfo& routing() const;
  PROTOBUF_NODISCARD ::CMsgGCRoutingInfo* release_routing();
  ::CMsgGCRoutingInfo* mutable_routing();
  void set_allocated_routing(::CMsgGCRoutingInfo* routing);
  private:
  const ::CMsgGCRoutingInfo& _internal_routing() const;
  ::CMsgGCRoutingInfo* _internal_mutable_routing();
  public:
  void unsafe_arena_set_allocated_routing(
      ::CMsgGCRoutingInfo* routing);
  ::CMsgGCRoutingInfo* unsafe_arena_release_routing();

  // @@protoc_insertion_point(class_scope:CMsgGCMsgMasterSetWebAPIRouting.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
    ::CMsgGCRoutingInfo* routing_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCMsgMasterSetWebAPIRouting final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCMsgMasterSetWebAPIRouting) */ {
 public:
  inline CMsgGCMsgMasterSetWebAPIRouting() : CMsgGCMsgMasterSetWebAPIRouting(nullptr) {}
  ~CMsgGCMsgMasterSetWebAPIRouting() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetWebAPIRouting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCMsgMasterSetWebAPIRouting(const CMsgGCMsgMasterSetWebAPIRouting& from);
  CMsgGCMsgMasterSetWebAPIRouting(CMsgGCMsgMasterSetWebAPIRouting&& from) noexcept
    : CMsgGCMsgMasterSetWebAPIRouting() {
    *this = ::std::move(from);
  }

  inline CMsgGCMsgMasterSetWebAPIRouting& operator=(const CMsgGCMsgMasterSetWebAPIRouting& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCMsgMasterSetWebAPIRouting& operator=(CMsgGCMsgMasterSetWebAPIRouting&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCMsgMasterSetWebAPIRouting& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCMsgMasterSetWebAPIRouting* internal_default_instance() {
    return reinterpret_cast<const CMsgGCMsgMasterSetWebAPIRouting*>(
               &_CMsgGCMsgMasterSetWebAPIRouting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(CMsgGCMsgMasterSetWebAPIRouting& a, CMsgGCMsgMasterSetWebAPIRouting& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCMsgMasterSetWebAPIRouting* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCMsgMasterSetWebAPIRouting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCMsgMasterSetWebAPIRouting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCMsgMasterSetWebAPIRouting>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCMsgMasterSetWebAPIRouting& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCMsgMasterSetWebAPIRouting& from) {
    CMsgGCMsgMasterSetWebAPIRouting::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCMsgMasterSetWebAPIRouting* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCMsgMasterSetWebAPIRouting";
  }
  protected:
  explicit CMsgGCMsgMasterSetWebAPIRouting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCMsgMasterSetWebAPIRouting_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .CMsgGCMsgMasterSetWebAPIRouting.Entry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::CMsgGCMsgMasterSetWebAPIRouting_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMsgMasterSetWebAPIRouting_Entry >*
      mutable_entries();
  private:
  const ::CMsgGCMsgMasterSetWebAPIRouting_Entry& _internal_entries(int index) const;
  ::CMsgGCMsgMasterSetWebAPIRouting_Entry* _internal_add_entries();
  public:
  const ::CMsgGCMsgMasterSetWebAPIRouting_Entry& entries(int index) const;
  ::CMsgGCMsgMasterSetWebAPIRouting_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMsgMasterSetWebAPIRouting_Entry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:CMsgGCMsgMasterSetWebAPIRouting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMsgMasterSetWebAPIRouting_Entry > entries_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCMsgMasterSetClientMsgRouting_Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCMsgMasterSetClientMsgRouting.Entry) */ {
 public:
  inline CMsgGCMsgMasterSetClientMsgRouting_Entry() : CMsgGCMsgMasterSetClientMsgRouting_Entry(nullptr) {}
  ~CMsgGCMsgMasterSetClientMsgRouting_Entry() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetClientMsgRouting_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCMsgMasterSetClientMsgRouting_Entry(const CMsgGCMsgMasterSetClientMsgRouting_Entry& from);
  CMsgGCMsgMasterSetClientMsgRouting_Entry(CMsgGCMsgMasterSetClientMsgRouting_Entry&& from) noexcept
    : CMsgGCMsgMasterSetClientMsgRouting_Entry() {
    *this = ::std::move(from);
  }

  inline CMsgGCMsgMasterSetClientMsgRouting_Entry& operator=(const CMsgGCMsgMasterSetClientMsgRouting_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCMsgMasterSetClientMsgRouting_Entry& operator=(CMsgGCMsgMasterSetClientMsgRouting_Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCMsgMasterSetClientMsgRouting_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCMsgMasterSetClientMsgRouting_Entry* internal_default_instance() {
    return reinterpret_cast<const CMsgGCMsgMasterSetClientMsgRouting_Entry*>(
               &_CMsgGCMsgMasterSetClientMsgRouting_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(CMsgGCMsgMasterSetClientMsgRouting_Entry& a, CMsgGCMsgMasterSetClientMsgRouting_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCMsgMasterSetClientMsgRouting_Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCMsgMasterSetClientMsgRouting_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCMsgMasterSetClientMsgRouting_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCMsgMasterSetClientMsgRouting_Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCMsgMasterSetClientMsgRouting_Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCMsgMasterSetClientMsgRouting_Entry& from) {
    CMsgGCMsgMasterSetClientMsgRouting_Entry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCMsgMasterSetClientMsgRouting_Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCMsgMasterSetClientMsgRouting.Entry";
  }
  protected:
  explicit CMsgGCMsgMasterSetClientMsgRouting_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutingFieldNumber = 2,
    kMsgTypeFieldNumber = 1,
  };
  // optional .CMsgGCRoutingInfo routing = 2;
  bool has_routing() const;
  private:
  bool _internal_has_routing() const;
  public:
  void clear_routing();
  const ::CMsgGCRoutingInfo& routing() const;
  PROTOBUF_NODISCARD ::CMsgGCRoutingInfo* release_routing();
  ::CMsgGCRoutingInfo* mutable_routing();
  void set_allocated_routing(::CMsgGCRoutingInfo* routing);
  private:
  const ::CMsgGCRoutingInfo& _internal_routing() const;
  ::CMsgGCRoutingInfo* _internal_mutable_routing();
  public:
  void unsafe_arena_set_allocated_routing(
      ::CMsgGCRoutingInfo* routing);
  ::CMsgGCRoutingInfo* unsafe_arena_release_routing();

  // optional uint32 msg_type = 1;
  bool has_msg_type() const;
  private:
  bool _internal_has_msg_type() const;
  public:
  void clear_msg_type();
  uint32_t msg_type() const;
  void set_msg_type(uint32_t value);
  private:
  uint32_t _internal_msg_type() const;
  void _internal_set_msg_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCMsgMasterSetClientMsgRouting.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgGCRoutingInfo* routing_;
    uint32_t msg_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCMsgMasterSetClientMsgRouting final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCMsgMasterSetClientMsgRouting) */ {
 public:
  inline CMsgGCMsgMasterSetClientMsgRouting() : CMsgGCMsgMasterSetClientMsgRouting(nullptr) {}
  ~CMsgGCMsgMasterSetClientMsgRouting() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetClientMsgRouting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCMsgMasterSetClientMsgRouting(const CMsgGCMsgMasterSetClientMsgRouting& from);
  CMsgGCMsgMasterSetClientMsgRouting(CMsgGCMsgMasterSetClientMsgRouting&& from) noexcept
    : CMsgGCMsgMasterSetClientMsgRouting() {
    *this = ::std::move(from);
  }

  inline CMsgGCMsgMasterSetClientMsgRouting& operator=(const CMsgGCMsgMasterSetClientMsgRouting& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCMsgMasterSetClientMsgRouting& operator=(CMsgGCMsgMasterSetClientMsgRouting&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCMsgMasterSetClientMsgRouting& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCMsgMasterSetClientMsgRouting* internal_default_instance() {
    return reinterpret_cast<const CMsgGCMsgMasterSetClientMsgRouting*>(
               &_CMsgGCMsgMasterSetClientMsgRouting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(CMsgGCMsgMasterSetClientMsgRouting& a, CMsgGCMsgMasterSetClientMsgRouting& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCMsgMasterSetClientMsgRouting* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCMsgMasterSetClientMsgRouting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCMsgMasterSetClientMsgRouting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCMsgMasterSetClientMsgRouting>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCMsgMasterSetClientMsgRouting& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCMsgMasterSetClientMsgRouting& from) {
    CMsgGCMsgMasterSetClientMsgRouting::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCMsgMasterSetClientMsgRouting* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCMsgMasterSetClientMsgRouting";
  }
  protected:
  explicit CMsgGCMsgMasterSetClientMsgRouting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCMsgMasterSetClientMsgRouting_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .CMsgGCMsgMasterSetClientMsgRouting.Entry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::CMsgGCMsgMasterSetClientMsgRouting_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMsgMasterSetClientMsgRouting_Entry >*
      mutable_entries();
  private:
  const ::CMsgGCMsgMasterSetClientMsgRouting_Entry& _internal_entries(int index) const;
  ::CMsgGCMsgMasterSetClientMsgRouting_Entry* _internal_add_entries();
  public:
  const ::CMsgGCMsgMasterSetClientMsgRouting_Entry& entries(int index) const;
  ::CMsgGCMsgMasterSetClientMsgRouting_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMsgMasterSetClientMsgRouting_Entry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:CMsgGCMsgMasterSetClientMsgRouting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMsgMasterSetClientMsgRouting_Entry > entries_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCMsgMasterSetWebAPIRouting_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCMsgMasterSetWebAPIRouting_Response) */ {
 public:
  inline CMsgGCMsgMasterSetWebAPIRouting_Response() : CMsgGCMsgMasterSetWebAPIRouting_Response(nullptr) {}
  ~CMsgGCMsgMasterSetWebAPIRouting_Response() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetWebAPIRouting_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCMsgMasterSetWebAPIRouting_Response(const CMsgGCMsgMasterSetWebAPIRouting_Response& from);
  CMsgGCMsgMasterSetWebAPIRouting_Response(CMsgGCMsgMasterSetWebAPIRouting_Response&& from) noexcept
    : CMsgGCMsgMasterSetWebAPIRouting_Response() {
    *this = ::std::move(from);
  }

  inline CMsgGCMsgMasterSetWebAPIRouting_Response& operator=(const CMsgGCMsgMasterSetWebAPIRouting_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCMsgMasterSetWebAPIRouting_Response& operator=(CMsgGCMsgMasterSetWebAPIRouting_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCMsgMasterSetWebAPIRouting_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCMsgMasterSetWebAPIRouting_Response* internal_default_instance() {
    return reinterpret_cast<const CMsgGCMsgMasterSetWebAPIRouting_Response*>(
               &_CMsgGCMsgMasterSetWebAPIRouting_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(CMsgGCMsgMasterSetWebAPIRouting_Response& a, CMsgGCMsgMasterSetWebAPIRouting_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCMsgMasterSetWebAPIRouting_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCMsgMasterSetWebAPIRouting_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCMsgMasterSetWebAPIRouting_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCMsgMasterSetWebAPIRouting_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCMsgMasterSetWebAPIRouting_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCMsgMasterSetWebAPIRouting_Response& from) {
    CMsgGCMsgMasterSetWebAPIRouting_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCMsgMasterSetWebAPIRouting_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCMsgMasterSetWebAPIRouting_Response";
  }
  protected:
  explicit CMsgGCMsgMasterSetWebAPIRouting_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEresultFieldNumber = 1,
  };
  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCMsgMasterSetWebAPIRouting_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t eresult_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCMsgMasterSetClientMsgRouting_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCMsgMasterSetClientMsgRouting_Response) */ {
 public:
  inline CMsgGCMsgMasterSetClientMsgRouting_Response() : CMsgGCMsgMasterSetClientMsgRouting_Response(nullptr) {}
  ~CMsgGCMsgMasterSetClientMsgRouting_Response() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCMsgMasterSetClientMsgRouting_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCMsgMasterSetClientMsgRouting_Response(const CMsgGCMsgMasterSetClientMsgRouting_Response& from);
  CMsgGCMsgMasterSetClientMsgRouting_Response(CMsgGCMsgMasterSetClientMsgRouting_Response&& from) noexcept
    : CMsgGCMsgMasterSetClientMsgRouting_Response() {
    *this = ::std::move(from);
  }

  inline CMsgGCMsgMasterSetClientMsgRouting_Response& operator=(const CMsgGCMsgMasterSetClientMsgRouting_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCMsgMasterSetClientMsgRouting_Response& operator=(CMsgGCMsgMasterSetClientMsgRouting_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCMsgMasterSetClientMsgRouting_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCMsgMasterSetClientMsgRouting_Response* internal_default_instance() {
    return reinterpret_cast<const CMsgGCMsgMasterSetClientMsgRouting_Response*>(
               &_CMsgGCMsgMasterSetClientMsgRouting_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(CMsgGCMsgMasterSetClientMsgRouting_Response& a, CMsgGCMsgMasterSetClientMsgRouting_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCMsgMasterSetClientMsgRouting_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCMsgMasterSetClientMsgRouting_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCMsgMasterSetClientMsgRouting_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCMsgMasterSetClientMsgRouting_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCMsgMasterSetClientMsgRouting_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCMsgMasterSetClientMsgRouting_Response& from) {
    CMsgGCMsgMasterSetClientMsgRouting_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCMsgMasterSetClientMsgRouting_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCMsgMasterSetClientMsgRouting_Response";
  }
  protected:
  explicit CMsgGCMsgMasterSetClientMsgRouting_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEresultFieldNumber = 1,
  };
  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCMsgMasterSetClientMsgRouting_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t eresult_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCMsgSetOptions_MessageRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCMsgSetOptions.MessageRange) */ {
 public:
  inline CMsgGCMsgSetOptions_MessageRange() : CMsgGCMsgSetOptions_MessageRange(nullptr) {}
  ~CMsgGCMsgSetOptions_MessageRange() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCMsgSetOptions_MessageRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCMsgSetOptions_MessageRange(const CMsgGCMsgSetOptions_MessageRange& from);
  CMsgGCMsgSetOptions_MessageRange(CMsgGCMsgSetOptions_MessageRange&& from) noexcept
    : CMsgGCMsgSetOptions_MessageRange() {
    *this = ::std::move(from);
  }

  inline CMsgGCMsgSetOptions_MessageRange& operator=(const CMsgGCMsgSetOptions_MessageRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCMsgSetOptions_MessageRange& operator=(CMsgGCMsgSetOptions_MessageRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCMsgSetOptions_MessageRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCMsgSetOptions_MessageRange* internal_default_instance() {
    return reinterpret_cast<const CMsgGCMsgSetOptions_MessageRange*>(
               &_CMsgGCMsgSetOptions_MessageRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(CMsgGCMsgSetOptions_MessageRange& a, CMsgGCMsgSetOptions_MessageRange& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCMsgSetOptions_MessageRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCMsgSetOptions_MessageRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCMsgSetOptions_MessageRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCMsgSetOptions_MessageRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCMsgSetOptions_MessageRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCMsgSetOptions_MessageRange& from) {
    CMsgGCMsgSetOptions_MessageRange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCMsgSetOptions_MessageRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCMsgSetOptions.MessageRange";
  }
  protected:
  explicit CMsgGCMsgSetOptions_MessageRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowFieldNumber = 1,
    kHighFieldNumber = 2,
  };
  // required uint32 low = 1;
  bool has_low() const;
  private:
  bool _internal_has_low() const;
  public:
  void clear_low();
  uint32_t low() const;
  void set_low(uint32_t value);
  private:
  uint32_t _internal_low() const;
  void _internal_set_low(uint32_t value);
  public:

  // required uint32 high = 2;
  bool has_high() const;
  private:
  bool _internal_has_high() const;
  public:
  void clear_high();
  uint32_t high() const;
  void set_high(uint32_t value);
  private:
  uint32_t _internal_high() const;
  void _internal_set_high(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCMsgSetOptions.MessageRange)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t low_;
    uint32_t high_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCMsgSetOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCMsgSetOptions) */ {
 public:
  inline CMsgGCMsgSetOptions() : CMsgGCMsgSetOptions(nullptr) {}
  ~CMsgGCMsgSetOptions() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCMsgSetOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCMsgSetOptions(const CMsgGCMsgSetOptions& from);
  CMsgGCMsgSetOptions(CMsgGCMsgSetOptions&& from) noexcept
    : CMsgGCMsgSetOptions() {
    *this = ::std::move(from);
  }

  inline CMsgGCMsgSetOptions& operator=(const CMsgGCMsgSetOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCMsgSetOptions& operator=(CMsgGCMsgSetOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCMsgSetOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCMsgSetOptions* internal_default_instance() {
    return reinterpret_cast<const CMsgGCMsgSetOptions*>(
               &_CMsgGCMsgSetOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(CMsgGCMsgSetOptions& a, CMsgGCMsgSetOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCMsgSetOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCMsgSetOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCMsgSetOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCMsgSetOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCMsgSetOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCMsgSetOptions& from) {
    CMsgGCMsgSetOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCMsgSetOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCMsgSetOptions";
  }
  protected:
  explicit CMsgGCMsgSetOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCMsgSetOptions_MessageRange MessageRange;

  typedef CMsgGCMsgSetOptions_Option Option;
  static constexpr Option NOTIFY_USER_SESSIONS =
    CMsgGCMsgSetOptions_Option_NOTIFY_USER_SESSIONS;
  static constexpr Option NOTIFY_SERVER_SESSIONS =
    CMsgGCMsgSetOptions_Option_NOTIFY_SERVER_SESSIONS;
  static constexpr Option NOTIFY_ACHIEVEMENTS =
    CMsgGCMsgSetOptions_Option_NOTIFY_ACHIEVEMENTS;
  static constexpr Option NOTIFY_VAC_ACTION =
    CMsgGCMsgSetOptions_Option_NOTIFY_VAC_ACTION;
  static inline bool Option_IsValid(int value) {
    return CMsgGCMsgSetOptions_Option_IsValid(value);
  }
  static constexpr Option Option_MIN =
    CMsgGCMsgSetOptions_Option_Option_MIN;
  static constexpr Option Option_MAX =
    CMsgGCMsgSetOptions_Option_Option_MAX;
  static constexpr int Option_ARRAYSIZE =
    CMsgGCMsgSetOptions_Option_Option_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Option_descriptor() {
    return CMsgGCMsgSetOptions_Option_descriptor();
  }
  template<typename T>
  static inline const std::string& Option_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Option>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Option_Name.");
    return CMsgGCMsgSetOptions_Option_Name(enum_t_value);
  }
  static inline bool Option_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Option* value) {
    return CMsgGCMsgSetOptions_Option_Parse(name, value);
  }

  typedef CMsgGCMsgSetOptions_GCSQLVersion GCSQLVersion;
  static constexpr GCSQLVersion GCSQL_VERSION_BASELINE =
    CMsgGCMsgSetOptions_GCSQLVersion_GCSQL_VERSION_BASELINE;
  static constexpr GCSQLVersion GCSQL_VERSION_BOOLTYPE =
    CMsgGCMsgSetOptions_GCSQLVersion_GCSQL_VERSION_BOOLTYPE;
  static inline bool GCSQLVersion_IsValid(int value) {
    return CMsgGCMsgSetOptions_GCSQLVersion_IsValid(value);
  }
  static constexpr GCSQLVersion GCSQLVersion_MIN =
    CMsgGCMsgSetOptions_GCSQLVersion_GCSQLVersion_MIN;
  static constexpr GCSQLVersion GCSQLVersion_MAX =
    CMsgGCMsgSetOptions_GCSQLVersion_GCSQLVersion_MAX;
  static constexpr int GCSQLVersion_ARRAYSIZE =
    CMsgGCMsgSetOptions_GCSQLVersion_GCSQLVersion_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GCSQLVersion_descriptor() {
    return CMsgGCMsgSetOptions_GCSQLVersion_descriptor();
  }
  template<typename T>
  static inline const std::string& GCSQLVersion_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GCSQLVersion>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GCSQLVersion_Name.");
    return CMsgGCMsgSetOptions_GCSQLVersion_Name(enum_t_value);
  }
  static inline bool GCSQLVersion_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GCSQLVersion* value) {
    return CMsgGCMsgSetOptions_GCSQLVersion_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
    kClientMsgRangesFieldNumber = 2,
    kGcsqlVersionFieldNumber = 3,
  };
  // repeated .CMsgGCMsgSetOptions.Option options = 1;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  private:
  ::CMsgGCMsgSetOptions_Option _internal_options(int index) const;
  void _internal_add_options(::CMsgGCMsgSetOptions_Option value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_options();
  public:
  ::CMsgGCMsgSetOptions_Option options(int index) const;
  void set_options(int index, ::CMsgGCMsgSetOptions_Option value);
  void add_options(::CMsgGCMsgSetOptions_Option value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& options() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_options();

  // repeated .CMsgGCMsgSetOptions.MessageRange client_msg_ranges = 2;
  int client_msg_ranges_size() const;
  private:
  int _internal_client_msg_ranges_size() const;
  public:
  void clear_client_msg_ranges();
  ::CMsgGCMsgSetOptions_MessageRange* mutable_client_msg_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMsgSetOptions_MessageRange >*
      mutable_client_msg_ranges();
  private:
  const ::CMsgGCMsgSetOptions_MessageRange& _internal_client_msg_ranges(int index) const;
  ::CMsgGCMsgSetOptions_MessageRange* _internal_add_client_msg_ranges();
  public:
  const ::CMsgGCMsgSetOptions_MessageRange& client_msg_ranges(int index) const;
  ::CMsgGCMsgSetOptions_MessageRange* add_client_msg_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMsgSetOptions_MessageRange >&
      client_msg_ranges() const;

  // optional .CMsgGCMsgSetOptions.GCSQLVersion gcsql_version = 3 [default = GCSQL_VERSION_BASELINE];
  bool has_gcsql_version() const;
  private:
  bool _internal_has_gcsql_version() const;
  public:
  void clear_gcsql_version();
  ::CMsgGCMsgSetOptions_GCSQLVersion gcsql_version() const;
  void set_gcsql_version(::CMsgGCMsgSetOptions_GCSQLVersion value);
  private:
  ::CMsgGCMsgSetOptions_GCSQLVersion _internal_gcsql_version() const;
  void _internal_set_gcsql_version(::CMsgGCMsgSetOptions_GCSQLVersion value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCMsgSetOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> options_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMsgSetOptions_MessageRange > client_msg_ranges_;
    int gcsql_version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCHUpdateSession_ExtraField final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCHUpdateSession.ExtraField) */ {
 public:
  inline CMsgGCHUpdateSession_ExtraField() : CMsgGCHUpdateSession_ExtraField(nullptr) {}
  ~CMsgGCHUpdateSession_ExtraField() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCHUpdateSession_ExtraField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCHUpdateSession_ExtraField(const CMsgGCHUpdateSession_ExtraField& from);
  CMsgGCHUpdateSession_ExtraField(CMsgGCHUpdateSession_ExtraField&& from) noexcept
    : CMsgGCHUpdateSession_ExtraField() {
    *this = ::std::move(from);
  }

  inline CMsgGCHUpdateSession_ExtraField& operator=(const CMsgGCHUpdateSession_ExtraField& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCHUpdateSession_ExtraField& operator=(CMsgGCHUpdateSession_ExtraField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCHUpdateSession_ExtraField& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCHUpdateSession_ExtraField* internal_default_instance() {
    return reinterpret_cast<const CMsgGCHUpdateSession_ExtraField*>(
               &_CMsgGCHUpdateSession_ExtraField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(CMsgGCHUpdateSession_ExtraField& a, CMsgGCHUpdateSession_ExtraField& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCHUpdateSession_ExtraField* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCHUpdateSession_ExtraField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCHUpdateSession_ExtraField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCHUpdateSession_ExtraField>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCHUpdateSession_ExtraField& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCHUpdateSession_ExtraField& from) {
    CMsgGCHUpdateSession_ExtraField::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCHUpdateSession_ExtraField* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCHUpdateSession.ExtraField";
  }
  protected:
  explicit CMsgGCHUpdateSession_ExtraField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCHUpdateSession.ExtraField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCHUpdateSession final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCHUpdateSession) */ {
 public:
  inline CMsgGCHUpdateSession() : CMsgGCHUpdateSession(nullptr) {}
  ~CMsgGCHUpdateSession() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCHUpdateSession(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCHUpdateSession(const CMsgGCHUpdateSession& from);
  CMsgGCHUpdateSession(CMsgGCHUpdateSession&& from) noexcept
    : CMsgGCHUpdateSession() {
    *this = ::std::move(from);
  }

  inline CMsgGCHUpdateSession& operator=(const CMsgGCHUpdateSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCHUpdateSession& operator=(CMsgGCHUpdateSession&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCHUpdateSession& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCHUpdateSession* internal_default_instance() {
    return reinterpret_cast<const CMsgGCHUpdateSession*>(
               &_CMsgGCHUpdateSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(CMsgGCHUpdateSession& a, CMsgGCHUpdateSession& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCHUpdateSession* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCHUpdateSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCHUpdateSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCHUpdateSession>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCHUpdateSession& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCHUpdateSession& from) {
    CMsgGCHUpdateSession::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCHUpdateSession* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCHUpdateSession";
  }
  protected:
  explicit CMsgGCHUpdateSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCHUpdateSession_ExtraField ExtraField;

  // accessors -------------------------------------------------------

  enum : int {
    kExtraFieldsFieldNumber = 9,
    kSteamIdFieldNumber = 1,
    kAppIdFieldNumber = 2,
    kOnlineFieldNumber = 3,
    kServerSteamIdFieldNumber = 4,
    kServerAddrFieldNumber = 5,
    kServerPortFieldNumber = 6,
    kOsTypeFieldNumber = 7,
    kClientAddrFieldNumber = 8,
  };
  // repeated .CMsgGCHUpdateSession.ExtraField extra_fields = 9;
  int extra_fields_size() const;
  private:
  int _internal_extra_fields_size() const;
  public:
  void clear_extra_fields();
  ::CMsgGCHUpdateSession_ExtraField* mutable_extra_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCHUpdateSession_ExtraField >*
      mutable_extra_fields();
  private:
  const ::CMsgGCHUpdateSession_ExtraField& _internal_extra_fields(int index) const;
  ::CMsgGCHUpdateSession_ExtraField* _internal_add_extra_fields();
  public:
  const ::CMsgGCHUpdateSession_ExtraField& extra_fields(int index) const;
  ::CMsgGCHUpdateSession_ExtraField* add_extra_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCHUpdateSession_ExtraField >&
      extra_fields() const;

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // optional uint32 app_id = 2;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional bool online = 3;
  bool has_online() const;
  private:
  bool _internal_has_online() const;
  public:
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  // optional fixed64 server_steam_id = 4;
  bool has_server_steam_id() const;
  private:
  bool _internal_has_server_steam_id() const;
  public:
  void clear_server_steam_id();
  uint64_t server_steam_id() const;
  void set_server_steam_id(uint64_t value);
  private:
  uint64_t _internal_server_steam_id() const;
  void _internal_set_server_steam_id(uint64_t value);
  public:

  // optional uint32 server_addr = 5;
  bool has_server_addr() const;
  private:
  bool _internal_has_server_addr() const;
  public:
  void clear_server_addr();
  uint32_t server_addr() const;
  void set_server_addr(uint32_t value);
  private:
  uint32_t _internal_server_addr() const;
  void _internal_set_server_addr(uint32_t value);
  public:

  // optional uint32 server_port = 6;
  bool has_server_port() const;
  private:
  bool _internal_has_server_port() const;
  public:
  void clear_server_port();
  uint32_t server_port() const;
  void set_server_port(uint32_t value);
  private:
  uint32_t _internal_server_port() const;
  void _internal_set_server_port(uint32_t value);
  public:

  // optional uint32 os_type = 7;
  bool has_os_type() const;
  private:
  bool _internal_has_os_type() const;
  public:
  void clear_os_type();
  uint32_t os_type() const;
  void set_os_type(uint32_t value);
  private:
  uint32_t _internal_os_type() const;
  void _internal_set_os_type(uint32_t value);
  public:

  // optional uint32 client_addr = 8;
  bool has_client_addr() const;
  private:
  bool _internal_has_client_addr() const;
  public:
  void clear_client_addr();
  uint32_t client_addr() const;
  void set_client_addr(uint32_t value);
  private:
  uint32_t _internal_client_addr() const;
  void _internal_set_client_addr(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCHUpdateSession)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCHUpdateSession_ExtraField > extra_fields_;
    uint64_t steam_id_;
    uint32_t app_id_;
    bool online_;
    uint64_t server_steam_id_;
    uint32_t server_addr_;
    uint32_t server_port_;
    uint32_t os_type_;
    uint32_t client_addr_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgNotificationOfSuspiciousActivity_MultipleGameInstances final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances) */ {
 public:
  inline CMsgNotificationOfSuspiciousActivity_MultipleGameInstances() : CMsgNotificationOfSuspiciousActivity_MultipleGameInstances(nullptr) {}
  ~CMsgNotificationOfSuspiciousActivity_MultipleGameInstances() override;
  explicit PROTOBUF_CONSTEXPR CMsgNotificationOfSuspiciousActivity_MultipleGameInstances(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNotificationOfSuspiciousActivity_MultipleGameInstances(const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& from);
  CMsgNotificationOfSuspiciousActivity_MultipleGameInstances(CMsgNotificationOfSuspiciousActivity_MultipleGameInstances&& from) noexcept
    : CMsgNotificationOfSuspiciousActivity_MultipleGameInstances() {
    *this = ::std::move(from);
  }

  inline CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& operator=(const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& operator=(CMsgNotificationOfSuspiciousActivity_MultipleGameInstances&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* internal_default_instance() {
    return reinterpret_cast<const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances*>(
               &_CMsgNotificationOfSuspiciousActivity_MultipleGameInstances_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& a, CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgNotificationOfSuspiciousActivity_MultipleGameInstances>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& from) {
    CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNotificationOfSuspiciousActivity.MultipleGameInstances";
  }
  protected:
  explicit CMsgNotificationOfSuspiciousActivity_MultipleGameInstances(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOtherSteamidsFieldNumber = 2,
    kAppInstanceCountFieldNumber = 1,
  };
  // repeated fixed64 other_steamids = 2;
  int other_steamids_size() const;
  private:
  int _internal_other_steamids_size() const;
  public:
  void clear_other_steamids();
  private:
  uint64_t _internal_other_steamids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_other_steamids() const;
  void _internal_add_other_steamids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_other_steamids();
  public:
  uint64_t other_steamids(int index) const;
  void set_other_steamids(int index, uint64_t value);
  void add_other_steamids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      other_steamids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_other_steamids();

  // optional uint32 app_instance_count = 1;
  bool has_app_instance_count() const;
  private:
  bool _internal_has_app_instance_count() const;
  public:
  void clear_app_instance_count();
  uint32_t app_instance_count() const;
  void set_app_instance_count(uint32_t value);
  private:
  uint32_t _internal_app_instance_count() const;
  void _internal_set_app_instance_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > other_steamids_;
    uint32_t app_instance_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgNotificationOfSuspiciousActivity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNotificationOfSuspiciousActivity) */ {
 public:
  inline CMsgNotificationOfSuspiciousActivity() : CMsgNotificationOfSuspiciousActivity(nullptr) {}
  ~CMsgNotificationOfSuspiciousActivity() override;
  explicit PROTOBUF_CONSTEXPR CMsgNotificationOfSuspiciousActivity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNotificationOfSuspiciousActivity(const CMsgNotificationOfSuspiciousActivity& from);
  CMsgNotificationOfSuspiciousActivity(CMsgNotificationOfSuspiciousActivity&& from) noexcept
    : CMsgNotificationOfSuspiciousActivity() {
    *this = ::std::move(from);
  }

  inline CMsgNotificationOfSuspiciousActivity& operator=(const CMsgNotificationOfSuspiciousActivity& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNotificationOfSuspiciousActivity& operator=(CMsgNotificationOfSuspiciousActivity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNotificationOfSuspiciousActivity& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgNotificationOfSuspiciousActivity* internal_default_instance() {
    return reinterpret_cast<const CMsgNotificationOfSuspiciousActivity*>(
               &_CMsgNotificationOfSuspiciousActivity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CMsgNotificationOfSuspiciousActivity& a, CMsgNotificationOfSuspiciousActivity& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNotificationOfSuspiciousActivity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNotificationOfSuspiciousActivity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgNotificationOfSuspiciousActivity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgNotificationOfSuspiciousActivity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgNotificationOfSuspiciousActivity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgNotificationOfSuspiciousActivity& from) {
    CMsgNotificationOfSuspiciousActivity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNotificationOfSuspiciousActivity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNotificationOfSuspiciousActivity";
  }
  protected:
  explicit CMsgNotificationOfSuspiciousActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgNotificationOfSuspiciousActivity_MultipleGameInstances MultipleGameInstances;

  // accessors -------------------------------------------------------

  enum : int {
    kMultipleInstancesFieldNumber = 3,
    kSteamidFieldNumber = 1,
    kAppidFieldNumber = 2,
  };
  // optional .CMsgNotificationOfSuspiciousActivity.MultipleGameInstances multiple_instances = 3;
  bool has_multiple_instances() const;
  private:
  bool _internal_has_multiple_instances() const;
  public:
  void clear_multiple_instances();
  const ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& multiple_instances() const;
  PROTOBUF_NODISCARD ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* release_multiple_instances();
  ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* mutable_multiple_instances();
  void set_allocated_multiple_instances(::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* multiple_instances);
  private:
  const ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& _internal_multiple_instances() const;
  ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* _internal_mutable_multiple_instances();
  public:
  void unsafe_arena_set_allocated_multiple_instances(
      ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* multiple_instances);
  ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* unsafe_arena_release_multiple_instances();

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgNotificationOfSuspiciousActivity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* multiple_instances_;
    uint64_t steamid_;
    uint32_t appid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgDPPartnerMicroTxns_PartnerMicroTxn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDPPartnerMicroTxns.PartnerMicroTxn) */ {
 public:
  inline CMsgDPPartnerMicroTxns_PartnerMicroTxn() : CMsgDPPartnerMicroTxns_PartnerMicroTxn(nullptr) {}
  ~CMsgDPPartnerMicroTxns_PartnerMicroTxn() override;
  explicit PROTOBUF_CONSTEXPR CMsgDPPartnerMicroTxns_PartnerMicroTxn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDPPartnerMicroTxns_PartnerMicroTxn(const CMsgDPPartnerMicroTxns_PartnerMicroTxn& from);
  CMsgDPPartnerMicroTxns_PartnerMicroTxn(CMsgDPPartnerMicroTxns_PartnerMicroTxn&& from) noexcept
    : CMsgDPPartnerMicroTxns_PartnerMicroTxn() {
    *this = ::std::move(from);
  }

  inline CMsgDPPartnerMicroTxns_PartnerMicroTxn& operator=(const CMsgDPPartnerMicroTxns_PartnerMicroTxn& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDPPartnerMicroTxns_PartnerMicroTxn& operator=(CMsgDPPartnerMicroTxns_PartnerMicroTxn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDPPartnerMicroTxns_PartnerMicroTxn& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDPPartnerMicroTxns_PartnerMicroTxn* internal_default_instance() {
    return reinterpret_cast<const CMsgDPPartnerMicroTxns_PartnerMicroTxn*>(
               &_CMsgDPPartnerMicroTxns_PartnerMicroTxn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(CMsgDPPartnerMicroTxns_PartnerMicroTxn& a, CMsgDPPartnerMicroTxns_PartnerMicroTxn& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDPPartnerMicroTxns_PartnerMicroTxn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDPPartnerMicroTxns_PartnerMicroTxn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDPPartnerMicroTxns_PartnerMicroTxn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDPPartnerMicroTxns_PartnerMicroTxn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDPPartnerMicroTxns_PartnerMicroTxn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDPPartnerMicroTxns_PartnerMicroTxn& from) {
    CMsgDPPartnerMicroTxns_PartnerMicroTxn::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDPPartnerMicroTxns_PartnerMicroTxn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDPPartnerMicroTxns.PartnerMicroTxn";
  }
  protected:
  explicit CMsgDPPartnerMicroTxns_PartnerMicroTxn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryCodeFieldNumber = 14,
    kRegionCodeFieldNumber = 15,
    kInitTimeFieldNumber = 1,
    kLastUpdateTimeFieldNumber = 2,
    kTxnIdFieldNumber = 3,
    kAccountIdFieldNumber = 4,
    kLineItemFieldNumber = 5,
    kItemIdFieldNumber = 6,
    kPriceFieldNumber = 8,
    kTaxFieldNumber = 9,
    kDefIndexFieldNumber = 7,
    kPurchaseTypeFieldNumber = 12,
    kPriceUsdFieldNumber = 10,
    kTaxUsdFieldNumber = 11,
    kSteamTxnTypeFieldNumber = 13,
    kQuantityFieldNumber = 16,
    kRefTransIdFieldNumber = 17,
  };
  // optional string country_code = 14;
  bool has_country_code() const;
  private:
  bool _internal_has_country_code() const;
  public:
  void clear_country_code();
  const std::string& country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_code();
  PROTOBUF_NODISCARD std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // optional string region_code = 15;
  bool has_region_code() const;
  private:
  bool _internal_has_region_code() const;
  public:
  void clear_region_code();
  const std::string& region_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_region_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_region_code();
  PROTOBUF_NODISCARD std::string* release_region_code();
  void set_allocated_region_code(std::string* region_code);
  private:
  const std::string& _internal_region_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_region_code(const std::string& value);
  std::string* _internal_mutable_region_code();
  public:

  // optional uint32 init_time = 1;
  bool has_init_time() const;
  private:
  bool _internal_has_init_time() const;
  public:
  void clear_init_time();
  uint32_t init_time() const;
  void set_init_time(uint32_t value);
  private:
  uint32_t _internal_init_time() const;
  void _internal_set_init_time(uint32_t value);
  public:

  // optional uint32 last_update_time = 2;
  bool has_last_update_time() const;
  private:
  bool _internal_has_last_update_time() const;
  public:
  void clear_last_update_time();
  uint32_t last_update_time() const;
  void set_last_update_time(uint32_t value);
  private:
  uint32_t _internal_last_update_time() const;
  void _internal_set_last_update_time(uint32_t value);
  public:

  // optional uint64 txn_id = 3;
  bool has_txn_id() const;
  private:
  bool _internal_has_txn_id() const;
  public:
  void clear_txn_id();
  uint64_t txn_id() const;
  void set_txn_id(uint64_t value);
  private:
  uint64_t _internal_txn_id() const;
  void _internal_set_txn_id(uint64_t value);
  public:

  // optional uint32 account_id = 4;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 line_item = 5;
  bool has_line_item() const;
  private:
  bool _internal_has_line_item() const;
  public:
  void clear_line_item();
  uint32_t line_item() const;
  void set_line_item(uint32_t value);
  private:
  uint32_t _internal_line_item() const;
  void _internal_set_line_item(uint32_t value);
  public:

  // optional uint64 item_id = 6;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  uint64_t item_id() const;
  void set_item_id(uint64_t value);
  private:
  uint64_t _internal_item_id() const;
  void _internal_set_item_id(uint64_t value);
  public:

  // optional uint64 price = 8;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  uint64_t price() const;
  void set_price(uint64_t value);
  private:
  uint64_t _internal_price() const;
  void _internal_set_price(uint64_t value);
  public:

  // optional uint64 tax = 9;
  bool has_tax() const;
  private:
  bool _internal_has_tax() const;
  public:
  void clear_tax();
  uint64_t tax() const;
  void set_tax(uint64_t value);
  private:
  uint64_t _internal_tax() const;
  void _internal_set_tax(uint64_t value);
  public:

  // optional uint32 def_index = 7;
  bool has_def_index() const;
  private:
  bool _internal_has_def_index() const;
  public:
  void clear_def_index();
  uint32_t def_index() const;
  void set_def_index(uint32_t value);
  private:
  uint32_t _internal_def_index() const;
  void _internal_set_def_index(uint32_t value);
  public:

  // optional uint32 purchase_type = 12;
  bool has_purchase_type() const;
  private:
  bool _internal_has_purchase_type() const;
  public:
  void clear_purchase_type();
  uint32_t purchase_type() const;
  void set_purchase_type(uint32_t value);
  private:
  uint32_t _internal_purchase_type() const;
  void _internal_set_purchase_type(uint32_t value);
  public:

  // optional uint64 price_usd = 10;
  bool has_price_usd() const;
  private:
  bool _internal_has_price_usd() const;
  public:
  void clear_price_usd();
  uint64_t price_usd() const;
  void set_price_usd(uint64_t value);
  private:
  uint64_t _internal_price_usd() const;
  void _internal_set_price_usd(uint64_t value);
  public:

  // optional uint64 tax_usd = 11;
  bool has_tax_usd() const;
  private:
  bool _internal_has_tax_usd() const;
  public:
  void clear_tax_usd();
  uint64_t tax_usd() const;
  void set_tax_usd(uint64_t value);
  private:
  uint64_t _internal_tax_usd() const;
  void _internal_set_tax_usd(uint64_t value);
  public:

  // optional uint32 steam_txn_type = 13;
  bool has_steam_txn_type() const;
  private:
  bool _internal_has_steam_txn_type() const;
  public:
  void clear_steam_txn_type();
  uint32_t steam_txn_type() const;
  void set_steam_txn_type(uint32_t value);
  private:
  uint32_t _internal_steam_txn_type() const;
  void _internal_set_steam_txn_type(uint32_t value);
  public:

  // optional int32 quantity = 16;
  bool has_quantity() const;
  private:
  bool _internal_has_quantity() const;
  public:
  void clear_quantity();
  int32_t quantity() const;
  void set_quantity(int32_t value);
  private:
  int32_t _internal_quantity() const;
  void _internal_set_quantity(int32_t value);
  public:

  // optional uint64 ref_trans_id = 17;
  bool has_ref_trans_id() const;
  private:
  bool _internal_has_ref_trans_id() const;
  public:
  void clear_ref_trans_id();
  uint64_t ref_trans_id() const;
  void set_ref_trans_id(uint64_t value);
  private:
  uint64_t _internal_ref_trans_id() const;
  void _internal_set_ref_trans_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDPPartnerMicroTxns.PartnerMicroTxn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_code_;
    uint32_t init_time_;
    uint32_t last_update_time_;
    uint64_t txn_id_;
    uint32_t account_id_;
    uint32_t line_item_;
    uint64_t item_id_;
    uint64_t price_;
    uint64_t tax_;
    uint32_t def_index_;
    uint32_t purchase_type_;
    uint64_t price_usd_;
    uint64_t tax_usd_;
    uint32_t steam_txn_type_;
    int32_t quantity_;
    uint64_t ref_trans_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgDPPartnerMicroTxns_PartnerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDPPartnerMicroTxns.PartnerInfo) */ {
 public:
  inline CMsgDPPartnerMicroTxns_PartnerInfo() : CMsgDPPartnerMicroTxns_PartnerInfo(nullptr) {}
  ~CMsgDPPartnerMicroTxns_PartnerInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgDPPartnerMicroTxns_PartnerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDPPartnerMicroTxns_PartnerInfo(const CMsgDPPartnerMicroTxns_PartnerInfo& from);
  CMsgDPPartnerMicroTxns_PartnerInfo(CMsgDPPartnerMicroTxns_PartnerInfo&& from) noexcept
    : CMsgDPPartnerMicroTxns_PartnerInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDPPartnerMicroTxns_PartnerInfo& operator=(const CMsgDPPartnerMicroTxns_PartnerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDPPartnerMicroTxns_PartnerInfo& operator=(CMsgDPPartnerMicroTxns_PartnerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDPPartnerMicroTxns_PartnerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDPPartnerMicroTxns_PartnerInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDPPartnerMicroTxns_PartnerInfo*>(
               &_CMsgDPPartnerMicroTxns_PartnerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(CMsgDPPartnerMicroTxns_PartnerInfo& a, CMsgDPPartnerMicroTxns_PartnerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDPPartnerMicroTxns_PartnerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDPPartnerMicroTxns_PartnerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDPPartnerMicroTxns_PartnerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDPPartnerMicroTxns_PartnerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDPPartnerMicroTxns_PartnerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDPPartnerMicroTxns_PartnerInfo& from) {
    CMsgDPPartnerMicroTxns_PartnerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDPPartnerMicroTxns_PartnerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDPPartnerMicroTxns.PartnerInfo";
  }
  protected:
  explicit CMsgDPPartnerMicroTxns_PartnerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartnerNameFieldNumber = 2,
    kCurrencyCodeFieldNumber = 3,
    kCurrencyNameFieldNumber = 4,
    kPartnerIdFieldNumber = 1,
  };
  // optional string partner_name = 2;
  bool has_partner_name() const;
  private:
  bool _internal_has_partner_name() const;
  public:
  void clear_partner_name();
  const std::string& partner_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partner_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partner_name();
  PROTOBUF_NODISCARD std::string* release_partner_name();
  void set_allocated_partner_name(std::string* partner_name);
  private:
  const std::string& _internal_partner_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partner_name(const std::string& value);
  std::string* _internal_mutable_partner_name();
  public:

  // optional string currency_code = 3;
  bool has_currency_code() const;
  private:
  bool _internal_has_currency_code() const;
  public:
  void clear_currency_code();
  const std::string& currency_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency_code();
  PROTOBUF_NODISCARD std::string* release_currency_code();
  void set_allocated_currency_code(std::string* currency_code);
  private:
  const std::string& _internal_currency_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency_code(const std::string& value);
  std::string* _internal_mutable_currency_code();
  public:

  // optional string currency_name = 4;
  bool has_currency_name() const;
  private:
  bool _internal_has_currency_name() const;
  public:
  void clear_currency_name();
  const std::string& currency_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency_name();
  PROTOBUF_NODISCARD std::string* release_currency_name();
  void set_allocated_currency_name(std::string* currency_name);
  private:
  const std::string& _internal_currency_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency_name(const std::string& value);
  std::string* _internal_mutable_currency_name();
  public:

  // optional uint32 partner_id = 1;
  bool has_partner_id() const;
  private:
  bool _internal_has_partner_id() const;
  public:
  void clear_partner_id();
  uint32_t partner_id() const;
  void set_partner_id(uint32_t value);
  private:
  uint32_t _internal_partner_id() const;
  void _internal_set_partner_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDPPartnerMicroTxns.PartnerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partner_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_name_;
    uint32_t partner_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgDPPartnerMicroTxns final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDPPartnerMicroTxns) */ {
 public:
  inline CMsgDPPartnerMicroTxns() : CMsgDPPartnerMicroTxns(nullptr) {}
  ~CMsgDPPartnerMicroTxns() override;
  explicit PROTOBUF_CONSTEXPR CMsgDPPartnerMicroTxns(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDPPartnerMicroTxns(const CMsgDPPartnerMicroTxns& from);
  CMsgDPPartnerMicroTxns(CMsgDPPartnerMicroTxns&& from) noexcept
    : CMsgDPPartnerMicroTxns() {
    *this = ::std::move(from);
  }

  inline CMsgDPPartnerMicroTxns& operator=(const CMsgDPPartnerMicroTxns& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDPPartnerMicroTxns& operator=(CMsgDPPartnerMicroTxns&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDPPartnerMicroTxns& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDPPartnerMicroTxns* internal_default_instance() {
    return reinterpret_cast<const CMsgDPPartnerMicroTxns*>(
               &_CMsgDPPartnerMicroTxns_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(CMsgDPPartnerMicroTxns& a, CMsgDPPartnerMicroTxns& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDPPartnerMicroTxns* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDPPartnerMicroTxns* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDPPartnerMicroTxns* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDPPartnerMicroTxns>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDPPartnerMicroTxns& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDPPartnerMicroTxns& from) {
    CMsgDPPartnerMicroTxns::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDPPartnerMicroTxns* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDPPartnerMicroTxns";
  }
  protected:
  explicit CMsgDPPartnerMicroTxns(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDPPartnerMicroTxns_PartnerMicroTxn PartnerMicroTxn;
  typedef CMsgDPPartnerMicroTxns_PartnerInfo PartnerInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 4,
    kGcNameFieldNumber = 2,
    kPartnerFieldNumber = 3,
    kAppidFieldNumber = 1,
  };
  // repeated .CMsgDPPartnerMicroTxns.PartnerMicroTxn transactions = 4;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::CMsgDPPartnerMicroTxns_PartnerMicroTxn* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDPPartnerMicroTxns_PartnerMicroTxn >*
      mutable_transactions();
  private:
  const ::CMsgDPPartnerMicroTxns_PartnerMicroTxn& _internal_transactions(int index) const;
  ::CMsgDPPartnerMicroTxns_PartnerMicroTxn* _internal_add_transactions();
  public:
  const ::CMsgDPPartnerMicroTxns_PartnerMicroTxn& transactions(int index) const;
  ::CMsgDPPartnerMicroTxns_PartnerMicroTxn* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDPPartnerMicroTxns_PartnerMicroTxn >&
      transactions() const;

  // optional string gc_name = 2;
  bool has_gc_name() const;
  private:
  bool _internal_has_gc_name() const;
  public:
  void clear_gc_name();
  const std::string& gc_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gc_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gc_name();
  PROTOBUF_NODISCARD std::string* release_gc_name();
  void set_allocated_gc_name(std::string* gc_name);
  private:
  const std::string& _internal_gc_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gc_name(const std::string& value);
  std::string* _internal_mutable_gc_name();
  public:

  // optional .CMsgDPPartnerMicroTxns.PartnerInfo partner = 3;
  bool has_partner() const;
  private:
  bool _internal_has_partner() const;
  public:
  void clear_partner();
  const ::CMsgDPPartnerMicroTxns_PartnerInfo& partner() const;
  PROTOBUF_NODISCARD ::CMsgDPPartnerMicroTxns_PartnerInfo* release_partner();
  ::CMsgDPPartnerMicroTxns_PartnerInfo* mutable_partner();
  void set_allocated_partner(::CMsgDPPartnerMicroTxns_PartnerInfo* partner);
  private:
  const ::CMsgDPPartnerMicroTxns_PartnerInfo& _internal_partner() const;
  ::CMsgDPPartnerMicroTxns_PartnerInfo* _internal_mutable_partner();
  public:
  void unsafe_arena_set_allocated_partner(
      ::CMsgDPPartnerMicroTxns_PartnerInfo* partner);
  ::CMsgDPPartnerMicroTxns_PartnerInfo* unsafe_arena_release_partner();

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDPPartnerMicroTxns)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDPPartnerMicroTxns_PartnerMicroTxn > transactions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gc_name_;
    ::CMsgDPPartnerMicroTxns_PartnerInfo* partner_;
    uint32_t appid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgDPPartnerMicroTxnsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDPPartnerMicroTxnsResponse) */ {
 public:
  inline CMsgDPPartnerMicroTxnsResponse() : CMsgDPPartnerMicroTxnsResponse(nullptr) {}
  ~CMsgDPPartnerMicroTxnsResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgDPPartnerMicroTxnsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDPPartnerMicroTxnsResponse(const CMsgDPPartnerMicroTxnsResponse& from);
  CMsgDPPartnerMicroTxnsResponse(CMsgDPPartnerMicroTxnsResponse&& from) noexcept
    : CMsgDPPartnerMicroTxnsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDPPartnerMicroTxnsResponse& operator=(const CMsgDPPartnerMicroTxnsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDPPartnerMicroTxnsResponse& operator=(CMsgDPPartnerMicroTxnsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDPPartnerMicroTxnsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDPPartnerMicroTxnsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDPPartnerMicroTxnsResponse*>(
               &_CMsgDPPartnerMicroTxnsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(CMsgDPPartnerMicroTxnsResponse& a, CMsgDPPartnerMicroTxnsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDPPartnerMicroTxnsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDPPartnerMicroTxnsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDPPartnerMicroTxnsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDPPartnerMicroTxnsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDPPartnerMicroTxnsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDPPartnerMicroTxnsResponse& from) {
    CMsgDPPartnerMicroTxnsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDPPartnerMicroTxnsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDPPartnerMicroTxnsResponse";
  }
  protected:
  explicit CMsgDPPartnerMicroTxnsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDPPartnerMicroTxnsResponse_EErrorCode EErrorCode;
  static constexpr EErrorCode k_MsgValid =
    CMsgDPPartnerMicroTxnsResponse_EErrorCode_k_MsgValid;
  static constexpr EErrorCode k_MsgInvalidAppID =
    CMsgDPPartnerMicroTxnsResponse_EErrorCode_k_MsgInvalidAppID;
  static constexpr EErrorCode k_MsgInvalidPartnerInfo =
    CMsgDPPartnerMicroTxnsResponse_EErrorCode_k_MsgInvalidPartnerInfo;
  static constexpr EErrorCode k_MsgNoTransactions =
    CMsgDPPartnerMicroTxnsResponse_EErrorCode_k_MsgNoTransactions;
  static constexpr EErrorCode k_MsgSQLFailure =
    CMsgDPPartnerMicroTxnsResponse_EErrorCode_k_MsgSQLFailure;
  static constexpr EErrorCode k_MsgPartnerInfoDiscrepancy =
    CMsgDPPartnerMicroTxnsResponse_EErrorCode_k_MsgPartnerInfoDiscrepancy;
  static constexpr EErrorCode k_MsgTransactionInsertFailed =
    CMsgDPPartnerMicroTxnsResponse_EErrorCode_k_MsgTransactionInsertFailed;
  static constexpr EErrorCode k_MsgAlreadyRunning =
    CMsgDPPartnerMicroTxnsResponse_EErrorCode_k_MsgAlreadyRunning;
  static constexpr EErrorCode k_MsgInvalidTransactionData =
    CMsgDPPartnerMicroTxnsResponse_EErrorCode_k_MsgInvalidTransactionData;
  static inline bool EErrorCode_IsValid(int value) {
    return CMsgDPPartnerMicroTxnsResponse_EErrorCode_IsValid(value);
  }
  static constexpr EErrorCode EErrorCode_MIN =
    CMsgDPPartnerMicroTxnsResponse_EErrorCode_EErrorCode_MIN;
  static constexpr EErrorCode EErrorCode_MAX =
    CMsgDPPartnerMicroTxnsResponse_EErrorCode_EErrorCode_MAX;
  static constexpr int EErrorCode_ARRAYSIZE =
    CMsgDPPartnerMicroTxnsResponse_EErrorCode_EErrorCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EErrorCode_descriptor() {
    return CMsgDPPartnerMicroTxnsResponse_EErrorCode_descriptor();
  }
  template<typename T>
  static inline const std::string& EErrorCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EErrorCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EErrorCode_Name.");
    return CMsgDPPartnerMicroTxnsResponse_EErrorCode_Name(enum_t_value);
  }
  static inline bool EErrorCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EErrorCode* value) {
    return CMsgDPPartnerMicroTxnsResponse_EErrorCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEerrorcodeFieldNumber = 2,
    kEresultFieldNumber = 1,
  };
  // optional .CMsgDPPartnerMicroTxnsResponse.EErrorCode eerrorcode = 2 [default = k_MsgValid];
  bool has_eerrorcode() const;
  private:
  bool _internal_has_eerrorcode() const;
  public:
  void clear_eerrorcode();
  ::CMsgDPPartnerMicroTxnsResponse_EErrorCode eerrorcode() const;
  void set_eerrorcode(::CMsgDPPartnerMicroTxnsResponse_EErrorCode value);
  private:
  ::CMsgDPPartnerMicroTxnsResponse_EErrorCode _internal_eerrorcode() const;
  void _internal_set_eerrorcode(::CMsgDPPartnerMicroTxnsResponse_EErrorCode value);
  public:

  // optional uint32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  uint32_t eresult() const;
  void set_eresult(uint32_t value);
  private:
  uint32_t _internal_eresult() const;
  void _internal_set_eresult(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDPPartnerMicroTxnsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int eerrorcode_;
    uint32_t eresult_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCHVacVerificationChange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCHVacVerificationChange) */ {
 public:
  inline CMsgGCHVacVerificationChange() : CMsgGCHVacVerificationChange(nullptr) {}
  ~CMsgGCHVacVerificationChange() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCHVacVerificationChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCHVacVerificationChange(const CMsgGCHVacVerificationChange& from);
  CMsgGCHVacVerificationChange(CMsgGCHVacVerificationChange&& from) noexcept
    : CMsgGCHVacVerificationChange() {
    *this = ::std::move(from);
  }

  inline CMsgGCHVacVerificationChange& operator=(const CMsgGCHVacVerificationChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCHVacVerificationChange& operator=(CMsgGCHVacVerificationChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCHVacVerificationChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCHVacVerificationChange* internal_default_instance() {
    return reinterpret_cast<const CMsgGCHVacVerificationChange*>(
               &_CMsgGCHVacVerificationChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(CMsgGCHVacVerificationChange& a, CMsgGCHVacVerificationChange& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCHVacVerificationChange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCHVacVerificationChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCHVacVerificationChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCHVacVerificationChange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCHVacVerificationChange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCHVacVerificationChange& from) {
    CMsgGCHVacVerificationChange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCHVacVerificationChange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCHVacVerificationChange";
  }
  protected:
  explicit CMsgGCHVacVerificationChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kAppidFieldNumber = 2,
    kIsVerifiedFieldNumber = 3,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional bool is_verified = 3;
  bool has_is_verified() const;
  private:
  bool _internal_has_is_verified() const;
  public:
  void clear_is_verified();
  bool is_verified() const;
  void set_is_verified(bool value);
  private:
  bool _internal_is_verified() const;
  void _internal_set_is_verified(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCHVacVerificationChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t steamid_;
    uint32_t appid_;
    bool is_verified_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCHAccountTwoFactorChange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCHAccountTwoFactorChange) */ {
 public:
  inline CMsgGCHAccountTwoFactorChange() : CMsgGCHAccountTwoFactorChange(nullptr) {}
  ~CMsgGCHAccountTwoFactorChange() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCHAccountTwoFactorChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCHAccountTwoFactorChange(const CMsgGCHAccountTwoFactorChange& from);
  CMsgGCHAccountTwoFactorChange(CMsgGCHAccountTwoFactorChange&& from) noexcept
    : CMsgGCHAccountTwoFactorChange() {
    *this = ::std::move(from);
  }

  inline CMsgGCHAccountTwoFactorChange& operator=(const CMsgGCHAccountTwoFactorChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCHAccountTwoFactorChange& operator=(CMsgGCHAccountTwoFactorChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCHAccountTwoFactorChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCHAccountTwoFactorChange* internal_default_instance() {
    return reinterpret_cast<const CMsgGCHAccountTwoFactorChange*>(
               &_CMsgGCHAccountTwoFactorChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(CMsgGCHAccountTwoFactorChange& a, CMsgGCHAccountTwoFactorChange& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCHAccountTwoFactorChange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCHAccountTwoFactorChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCHAccountTwoFactorChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCHAccountTwoFactorChange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCHAccountTwoFactorChange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCHAccountTwoFactorChange& from) {
    CMsgGCHAccountTwoFactorChange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCHAccountTwoFactorChange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCHAccountTwoFactorChange";
  }
  protected:
  explicit CMsgGCHAccountTwoFactorChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kAppidFieldNumber = 2,
    kTwofactorEnabledFieldNumber = 3,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional bool twofactor_enabled = 3;
  bool has_twofactor_enabled() const;
  private:
  bool _internal_has_twofactor_enabled() const;
  public:
  void clear_twofactor_enabled();
  bool twofactor_enabled() const;
  void set_twofactor_enabled(bool value);
  private:
  bool _internal_twofactor_enabled() const;
  void _internal_set_twofactor_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCHAccountTwoFactorChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t steamid_;
    uint32_t appid_;
    bool twofactor_enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCheckClanMembership final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCheckClanMembership) */ {
 public:
  inline CMsgGCCheckClanMembership() : CMsgGCCheckClanMembership(nullptr) {}
  ~CMsgGCCheckClanMembership() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCCheckClanMembership(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCheckClanMembership(const CMsgGCCheckClanMembership& from);
  CMsgGCCheckClanMembership(CMsgGCCheckClanMembership&& from) noexcept
    : CMsgGCCheckClanMembership() {
    *this = ::std::move(from);
  }

  inline CMsgGCCheckClanMembership& operator=(const CMsgGCCheckClanMembership& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCheckClanMembership& operator=(CMsgGCCheckClanMembership&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCheckClanMembership& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCheckClanMembership* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCheckClanMembership*>(
               &_CMsgGCCheckClanMembership_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(CMsgGCCheckClanMembership& a, CMsgGCCheckClanMembership& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCheckClanMembership* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCheckClanMembership* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCCheckClanMembership* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCCheckClanMembership>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCheckClanMembership& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCCheckClanMembership& from) {
    CMsgGCCheckClanMembership::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCheckClanMembership* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCheckClanMembership";
  }
  protected:
  explicit CMsgGCCheckClanMembership(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kClanidFieldNumber = 2,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 clanid = 2;
  bool has_clanid() const;
  private:
  bool _internal_has_clanid() const;
  public:
  void clear_clanid();
  uint32_t clanid() const;
  void set_clanid(uint32_t value);
  private:
  uint32_t _internal_clanid() const;
  void _internal_set_clanid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCheckClanMembership)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t steamid_;
    uint32_t clanid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCheckClanMembership_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCheckClanMembership_Response) */ {
 public:
  inline CMsgGCCheckClanMembership_Response() : CMsgGCCheckClanMembership_Response(nullptr) {}
  ~CMsgGCCheckClanMembership_Response() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCCheckClanMembership_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCheckClanMembership_Response(const CMsgGCCheckClanMembership_Response& from);
  CMsgGCCheckClanMembership_Response(CMsgGCCheckClanMembership_Response&& from) noexcept
    : CMsgGCCheckClanMembership_Response() {
    *this = ::std::move(from);
  }

  inline CMsgGCCheckClanMembership_Response& operator=(const CMsgGCCheckClanMembership_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCheckClanMembership_Response& operator=(CMsgGCCheckClanMembership_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCheckClanMembership_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCheckClanMembership_Response* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCheckClanMembership_Response*>(
               &_CMsgGCCheckClanMembership_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(CMsgGCCheckClanMembership_Response& a, CMsgGCCheckClanMembership_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCheckClanMembership_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCheckClanMembership_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCCheckClanMembership_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCCheckClanMembership_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCheckClanMembership_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCCheckClanMembership_Response& from) {
    CMsgGCCheckClanMembership_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCheckClanMembership_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCheckClanMembership_Response";
  }
  protected:
  explicit CMsgGCCheckClanMembership_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsmemberFieldNumber = 1,
  };
  // optional bool ismember = 1;
  bool has_ismember() const;
  private:
  bool _internal_has_ismember() const;
  public:
  void clear_ismember();
  bool ismember() const;
  void set_ismember(bool value);
  private:
  bool _internal_ismember() const;
  void _internal_set_ismember(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCheckClanMembership_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool ismember_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCHAppCheersReceived_CheerTypeAmount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCHAppCheersReceived.CheerTypeAmount) */ {
 public:
  inline CMsgGCHAppCheersReceived_CheerTypeAmount() : CMsgGCHAppCheersReceived_CheerTypeAmount(nullptr) {}
  ~CMsgGCHAppCheersReceived_CheerTypeAmount() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCHAppCheersReceived_CheerTypeAmount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCHAppCheersReceived_CheerTypeAmount(const CMsgGCHAppCheersReceived_CheerTypeAmount& from);
  CMsgGCHAppCheersReceived_CheerTypeAmount(CMsgGCHAppCheersReceived_CheerTypeAmount&& from) noexcept
    : CMsgGCHAppCheersReceived_CheerTypeAmount() {
    *this = ::std::move(from);
  }

  inline CMsgGCHAppCheersReceived_CheerTypeAmount& operator=(const CMsgGCHAppCheersReceived_CheerTypeAmount& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCHAppCheersReceived_CheerTypeAmount& operator=(CMsgGCHAppCheersReceived_CheerTypeAmount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCHAppCheersReceived_CheerTypeAmount& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCHAppCheersReceived_CheerTypeAmount* internal_default_instance() {
    return reinterpret_cast<const CMsgGCHAppCheersReceived_CheerTypeAmount*>(
               &_CMsgGCHAppCheersReceived_CheerTypeAmount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(CMsgGCHAppCheersReceived_CheerTypeAmount& a, CMsgGCHAppCheersReceived_CheerTypeAmount& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCHAppCheersReceived_CheerTypeAmount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCHAppCheersReceived_CheerTypeAmount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCHAppCheersReceived_CheerTypeAmount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCHAppCheersReceived_CheerTypeAmount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCHAppCheersReceived_CheerTypeAmount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCHAppCheersReceived_CheerTypeAmount& from) {
    CMsgGCHAppCheersReceived_CheerTypeAmount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCHAppCheersReceived_CheerTypeAmount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCHAppCheersReceived.CheerTypeAmount";
  }
  protected:
  explicit CMsgGCHAppCheersReceived_CheerTypeAmount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheerTypeFieldNumber = 1,
    kCheerAmountFieldNumber = 2,
  };
  // optional uint32 cheer_type = 1;
  bool has_cheer_type() const;
  private:
  bool _internal_has_cheer_type() const;
  public:
  void clear_cheer_type();
  uint32_t cheer_type() const;
  void set_cheer_type(uint32_t value);
  private:
  uint32_t _internal_cheer_type() const;
  void _internal_set_cheer_type(uint32_t value);
  public:

  // optional uint32 cheer_amount = 2;
  bool has_cheer_amount() const;
  private:
  bool _internal_has_cheer_amount() const;
  public:
  void clear_cheer_amount();
  uint32_t cheer_amount() const;
  void set_cheer_amount(uint32_t value);
  private:
  uint32_t _internal_cheer_amount() const;
  void _internal_set_cheer_amount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCHAppCheersReceived.CheerTypeAmount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t cheer_type_;
    uint32_t cheer_amount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCHAppCheersReceived_CheerTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCHAppCheersReceived.CheerTarget) */ {
 public:
  inline CMsgGCHAppCheersReceived_CheerTarget() : CMsgGCHAppCheersReceived_CheerTarget(nullptr) {}
  ~CMsgGCHAppCheersReceived_CheerTarget() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCHAppCheersReceived_CheerTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCHAppCheersReceived_CheerTarget(const CMsgGCHAppCheersReceived_CheerTarget& from);
  CMsgGCHAppCheersReceived_CheerTarget(CMsgGCHAppCheersReceived_CheerTarget&& from) noexcept
    : CMsgGCHAppCheersReceived_CheerTarget() {
    *this = ::std::move(from);
  }

  inline CMsgGCHAppCheersReceived_CheerTarget& operator=(const CMsgGCHAppCheersReceived_CheerTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCHAppCheersReceived_CheerTarget& operator=(CMsgGCHAppCheersReceived_CheerTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCHAppCheersReceived_CheerTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCHAppCheersReceived_CheerTarget* internal_default_instance() {
    return reinterpret_cast<const CMsgGCHAppCheersReceived_CheerTarget*>(
               &_CMsgGCHAppCheersReceived_CheerTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(CMsgGCHAppCheersReceived_CheerTarget& a, CMsgGCHAppCheersReceived_CheerTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCHAppCheersReceived_CheerTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCHAppCheersReceived_CheerTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCHAppCheersReceived_CheerTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCHAppCheersReceived_CheerTarget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCHAppCheersReceived_CheerTarget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCHAppCheersReceived_CheerTarget& from) {
    CMsgGCHAppCheersReceived_CheerTarget::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCHAppCheersReceived_CheerTarget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCHAppCheersReceived.CheerTarget";
  }
  protected:
  explicit CMsgGCHAppCheersReceived_CheerTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheerTypesFieldNumber = 2,
    kCheerTargetFieldNumber = 1,
  };
  // repeated .CMsgGCHAppCheersReceived.CheerTypeAmount cheer_types = 2;
  int cheer_types_size() const;
  private:
  int _internal_cheer_types_size() const;
  public:
  void clear_cheer_types();
  ::CMsgGCHAppCheersReceived_CheerTypeAmount* mutable_cheer_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCHAppCheersReceived_CheerTypeAmount >*
      mutable_cheer_types();
  private:
  const ::CMsgGCHAppCheersReceived_CheerTypeAmount& _internal_cheer_types(int index) const;
  ::CMsgGCHAppCheersReceived_CheerTypeAmount* _internal_add_cheer_types();
  public:
  const ::CMsgGCHAppCheersReceived_CheerTypeAmount& cheer_types(int index) const;
  ::CMsgGCHAppCheersReceived_CheerTypeAmount* add_cheer_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCHAppCheersReceived_CheerTypeAmount >&
      cheer_types() const;

  // optional uint64 cheer_target = 1;
  bool has_cheer_target() const;
  private:
  bool _internal_has_cheer_target() const;
  public:
  void clear_cheer_target();
  uint64_t cheer_target() const;
  void set_cheer_target(uint64_t value);
  private:
  uint64_t _internal_cheer_target() const;
  void _internal_set_cheer_target(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCHAppCheersReceived.CheerTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCHAppCheersReceived_CheerTypeAmount > cheer_types_;
    uint64_t cheer_target_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCHAppCheersReceived final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCHAppCheersReceived) */ {
 public:
  inline CMsgGCHAppCheersReceived() : CMsgGCHAppCheersReceived(nullptr) {}
  ~CMsgGCHAppCheersReceived() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCHAppCheersReceived(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCHAppCheersReceived(const CMsgGCHAppCheersReceived& from);
  CMsgGCHAppCheersReceived(CMsgGCHAppCheersReceived&& from) noexcept
    : CMsgGCHAppCheersReceived() {
    *this = ::std::move(from);
  }

  inline CMsgGCHAppCheersReceived& operator=(const CMsgGCHAppCheersReceived& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCHAppCheersReceived& operator=(CMsgGCHAppCheersReceived&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCHAppCheersReceived& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCHAppCheersReceived* internal_default_instance() {
    return reinterpret_cast<const CMsgGCHAppCheersReceived*>(
               &_CMsgGCHAppCheersReceived_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(CMsgGCHAppCheersReceived& a, CMsgGCHAppCheersReceived& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCHAppCheersReceived* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCHAppCheersReceived* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCHAppCheersReceived* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCHAppCheersReceived>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCHAppCheersReceived& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCHAppCheersReceived& from) {
    CMsgGCHAppCheersReceived::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCHAppCheersReceived* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCHAppCheersReceived";
  }
  protected:
  explicit CMsgGCHAppCheersReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCHAppCheersReceived_CheerTypeAmount CheerTypeAmount;
  typedef CMsgGCHAppCheersReceived_CheerTarget CheerTarget;

  // accessors -------------------------------------------------------

  enum : int {
    kCheerTargetsFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // repeated .CMsgGCHAppCheersReceived.CheerTarget cheer_targets = 2;
  int cheer_targets_size() const;
  private:
  int _internal_cheer_targets_size() const;
  public:
  void clear_cheer_targets();
  ::CMsgGCHAppCheersReceived_CheerTarget* mutable_cheer_targets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCHAppCheersReceived_CheerTarget >*
      mutable_cheer_targets();
  private:
  const ::CMsgGCHAppCheersReceived_CheerTarget& _internal_cheer_targets(int index) const;
  ::CMsgGCHAppCheersReceived_CheerTarget* _internal_add_cheer_targets();
  public:
  const ::CMsgGCHAppCheersReceived_CheerTarget& cheer_targets(int index) const;
  ::CMsgGCHAppCheersReceived_CheerTarget* add_cheer_targets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCHAppCheersReceived_CheerTarget >&
      cheer_targets() const;

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCHAppCheersReceived)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCHAppCheersReceived_CheerTarget > cheer_targets_;
    uint32_t appid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCHAppCheersGetAllowedTypes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCHAppCheersGetAllowedTypes) */ {
 public:
  inline CMsgGCHAppCheersGetAllowedTypes() : CMsgGCHAppCheersGetAllowedTypes(nullptr) {}
  ~CMsgGCHAppCheersGetAllowedTypes() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCHAppCheersGetAllowedTypes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCHAppCheersGetAllowedTypes(const CMsgGCHAppCheersGetAllowedTypes& from);
  CMsgGCHAppCheersGetAllowedTypes(CMsgGCHAppCheersGetAllowedTypes&& from) noexcept
    : CMsgGCHAppCheersGetAllowedTypes() {
    *this = ::std::move(from);
  }

  inline CMsgGCHAppCheersGetAllowedTypes& operator=(const CMsgGCHAppCheersGetAllowedTypes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCHAppCheersGetAllowedTypes& operator=(CMsgGCHAppCheersGetAllowedTypes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCHAppCheersGetAllowedTypes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCHAppCheersGetAllowedTypes* internal_default_instance() {
    return reinterpret_cast<const CMsgGCHAppCheersGetAllowedTypes*>(
               &_CMsgGCHAppCheersGetAllowedTypes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(CMsgGCHAppCheersGetAllowedTypes& a, CMsgGCHAppCheersGetAllowedTypes& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCHAppCheersGetAllowedTypes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCHAppCheersGetAllowedTypes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCHAppCheersGetAllowedTypes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCHAppCheersGetAllowedTypes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCHAppCheersGetAllowedTypes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCHAppCheersGetAllowedTypes& from) {
    CMsgGCHAppCheersGetAllowedTypes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCHAppCheersGetAllowedTypes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCHAppCheersGetAllowedTypes";
  }
  protected:
  explicit CMsgGCHAppCheersGetAllowedTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheerTargetFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // optional uint64 cheer_target = 2;
  bool has_cheer_target() const;
  private:
  bool _internal_has_cheer_target() const;
  public:
  void clear_cheer_target();
  uint64_t cheer_target() const;
  void set_cheer_target(uint64_t value);
  private:
  uint64_t _internal_cheer_target() const;
  void _internal_set_cheer_target(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCHAppCheersGetAllowedTypes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t cheer_target_;
    uint32_t appid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps) */ {
 public:
  inline CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps() : CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps(nullptr) {}
  ~CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps(const CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps& from);
  CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps(CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps&& from) noexcept
    : CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps() {
    *this = ::std::move(from);
  }

  inline CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps& operator=(const CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps& operator=(CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps* internal_default_instance() {
    return reinterpret_cast<const CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps*>(
               &_CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps& a, CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps& from) {
    CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps";
  }
  protected:
  explicit CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 3,
    kOriginalCheerTypeFieldNumber = 1,
    kRemappedCheerTypeFieldNumber = 2,
  };
  // repeated uint32 account_ids = 3;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  private:
  uint32_t _internal_account_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_account_ids() const;
  void _internal_add_account_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_account_ids();
  public:
  uint32_t account_ids(int index) const;
  void set_account_ids(int index, uint32_t value);
  void add_account_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_account_ids();

  // optional uint32 original_cheer_type = 1;
  bool has_original_cheer_type() const;
  private:
  bool _internal_has_original_cheer_type() const;
  public:
  void clear_original_cheer_type();
  uint32_t original_cheer_type() const;
  void set_original_cheer_type(uint32_t value);
  private:
  uint32_t _internal_original_cheer_type() const;
  void _internal_set_original_cheer_type(uint32_t value);
  public:

  // optional uint32 remapped_cheer_type = 2;
  bool has_remapped_cheer_type() const;
  private:
  bool _internal_has_remapped_cheer_type() const;
  public:
  void clear_remapped_cheer_type();
  uint32_t remapped_cheer_type() const;
  void set_remapped_cheer_type(uint32_t value);
  private:
  uint32_t _internal_remapped_cheer_type() const;
  void _internal_set_remapped_cheer_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > account_ids_;
    uint32_t original_cheer_type_;
    uint32_t remapped_cheer_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCHAppCheersGetAllowedTypesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCHAppCheersGetAllowedTypesResponse) */ {
 public:
  inline CMsgGCHAppCheersGetAllowedTypesResponse() : CMsgGCHAppCheersGetAllowedTypesResponse(nullptr) {}
  ~CMsgGCHAppCheersGetAllowedTypesResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCHAppCheersGetAllowedTypesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCHAppCheersGetAllowedTypesResponse(const CMsgGCHAppCheersGetAllowedTypesResponse& from);
  CMsgGCHAppCheersGetAllowedTypesResponse(CMsgGCHAppCheersGetAllowedTypesResponse&& from) noexcept
    : CMsgGCHAppCheersGetAllowedTypesResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCHAppCheersGetAllowedTypesResponse& operator=(const CMsgGCHAppCheersGetAllowedTypesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCHAppCheersGetAllowedTypesResponse& operator=(CMsgGCHAppCheersGetAllowedTypesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCHAppCheersGetAllowedTypesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCHAppCheersGetAllowedTypesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCHAppCheersGetAllowedTypesResponse*>(
               &_CMsgGCHAppCheersGetAllowedTypesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(CMsgGCHAppCheersGetAllowedTypesResponse& a, CMsgGCHAppCheersGetAllowedTypesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCHAppCheersGetAllowedTypesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCHAppCheersGetAllowedTypesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCHAppCheersGetAllowedTypesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCHAppCheersGetAllowedTypesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCHAppCheersGetAllowedTypesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCHAppCheersGetAllowedTypesResponse& from) {
    CMsgGCHAppCheersGetAllowedTypesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCHAppCheersGetAllowedTypesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCHAppCheersGetAllowedTypesResponse";
  }
  protected:
  explicit CMsgGCHAppCheersGetAllowedTypesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps CheerRemaps;

  // accessors -------------------------------------------------------

  enum : int {
    kCheerTypesValidAllUsersFieldNumber = 1,
    kCheerRemapsFieldNumber = 2,
    kCacheDurationFieldNumber = 3,
  };
  // repeated uint32 cheer_types_valid_all_users = 1;
  int cheer_types_valid_all_users_size() const;
  private:
  int _internal_cheer_types_valid_all_users_size() const;
  public:
  void clear_cheer_types_valid_all_users();
  private:
  uint32_t _internal_cheer_types_valid_all_users(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_cheer_types_valid_all_users() const;
  void _internal_add_cheer_types_valid_all_users(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_cheer_types_valid_all_users();
  public:
  uint32_t cheer_types_valid_all_users(int index) const;
  void set_cheer_types_valid_all_users(int index, uint32_t value);
  void add_cheer_types_valid_all_users(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      cheer_types_valid_all_users() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_cheer_types_valid_all_users();

  // repeated .CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps cheer_remaps = 2;
  int cheer_remaps_size() const;
  private:
  int _internal_cheer_remaps_size() const;
  public:
  void clear_cheer_remaps();
  ::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps* mutable_cheer_remaps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps >*
      mutable_cheer_remaps();
  private:
  const ::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps& _internal_cheer_remaps(int index) const;
  ::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps* _internal_add_cheer_remaps();
  public:
  const ::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps& cheer_remaps(int index) const;
  ::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps* add_cheer_remaps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps >&
      cheer_remaps() const;

  // optional uint32 cache_duration = 3;
  bool has_cache_duration() const;
  private:
  bool _internal_has_cache_duration() const;
  public:
  void clear_cache_duration();
  uint32_t cache_duration() const;
  void set_cache_duration(uint32_t value);
  private:
  uint32_t _internal_cache_duration() const;
  void _internal_set_cache_duration(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCHAppCheersGetAllowedTypesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > cheer_types_valid_all_users_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps > cheer_remaps_;
    uint32_t cache_duration_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CGCSystemMsg_ReportExternalPurchase_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCSystemMsg_ReportExternalPurchase_Request) */ {
 public:
  inline CGCSystemMsg_ReportExternalPurchase_Request() : CGCSystemMsg_ReportExternalPurchase_Request(nullptr) {}
  ~CGCSystemMsg_ReportExternalPurchase_Request() override;
  explicit PROTOBUF_CONSTEXPR CGCSystemMsg_ReportExternalPurchase_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCSystemMsg_ReportExternalPurchase_Request(const CGCSystemMsg_ReportExternalPurchase_Request& from);
  CGCSystemMsg_ReportExternalPurchase_Request(CGCSystemMsg_ReportExternalPurchase_Request&& from) noexcept
    : CGCSystemMsg_ReportExternalPurchase_Request() {
    *this = ::std::move(from);
  }

  inline CGCSystemMsg_ReportExternalPurchase_Request& operator=(const CGCSystemMsg_ReportExternalPurchase_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCSystemMsg_ReportExternalPurchase_Request& operator=(CGCSystemMsg_ReportExternalPurchase_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCSystemMsg_ReportExternalPurchase_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCSystemMsg_ReportExternalPurchase_Request* internal_default_instance() {
    return reinterpret_cast<const CGCSystemMsg_ReportExternalPurchase_Request*>(
               &_CGCSystemMsg_ReportExternalPurchase_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(CGCSystemMsg_ReportExternalPurchase_Request& a, CGCSystemMsg_ReportExternalPurchase_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCSystemMsg_ReportExternalPurchase_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCSystemMsg_ReportExternalPurchase_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGCSystemMsg_ReportExternalPurchase_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGCSystemMsg_ReportExternalPurchase_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGCSystemMsg_ReportExternalPurchase_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CGCSystemMsg_ReportExternalPurchase_Request& from) {
    CGCSystemMsg_ReportExternalPurchase_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCSystemMsg_ReportExternalPurchase_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCSystemMsg_ReportExternalPurchase_Request";
  }
  protected:
  explicit CGCSystemMsg_ReportExternalPurchase_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProviderOrderidFieldNumber = 5,
    kCurrencyFieldNumber = 7,
    kItemDescriptionFieldNumber = 10,
    kLanguageFieldNumber = 11,
    kCategoryFieldNumber = 12,
    kSteamidFieldNumber = 2,
    kAppidFieldNumber = 1,
    kProviderFieldNumber = 3,
    kOrderidFieldNumber = 4,
    kAmountFieldNumber = 6,
    kQuantityFieldNumber = 8,
    kItemidFieldNumber = 9,
    kTimeCreatedFieldNumber = 13,
  };
  // optional string provider_orderid = 5;
  bool has_provider_orderid() const;
  private:
  bool _internal_has_provider_orderid() const;
  public:
  void clear_provider_orderid();
  const std::string& provider_orderid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_provider_orderid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_provider_orderid();
  PROTOBUF_NODISCARD std::string* release_provider_orderid();
  void set_allocated_provider_orderid(std::string* provider_orderid);
  private:
  const std::string& _internal_provider_orderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_provider_orderid(const std::string& value);
  std::string* _internal_mutable_provider_orderid();
  public:

  // optional string currency = 7;
  bool has_currency() const;
  private:
  bool _internal_has_currency() const;
  public:
  void clear_currency();
  const std::string& currency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // optional string item_description = 10;
  bool has_item_description() const;
  private:
  bool _internal_has_item_description() const;
  public:
  void clear_item_description();
  const std::string& item_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_description();
  PROTOBUF_NODISCARD std::string* release_item_description();
  void set_allocated_item_description(std::string* item_description);
  private:
  const std::string& _internal_item_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_description(const std::string& value);
  std::string* _internal_mutable_item_description();
  public:

  // optional string language = 11;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional string category = 12;
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  const std::string& category() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_category(ArgT0&& arg0, ArgT... args);
  std::string* mutable_category();
  PROTOBUF_NODISCARD std::string* release_category();
  void set_allocated_category(std::string* category);
  private:
  const std::string& _internal_category() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // optional fixed64 steamid = 2;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional .EMobilePaymentProvider provider = 3 [default = k_EMobilePaymentProvider_Invalid];
  bool has_provider() const;
  private:
  bool _internal_has_provider() const;
  public:
  void clear_provider();
  ::EMobilePaymentProvider provider() const;
  void set_provider(::EMobilePaymentProvider value);
  private:
  ::EMobilePaymentProvider _internal_provider() const;
  void _internal_set_provider(::EMobilePaymentProvider value);
  public:

  // optional uint64 orderid = 4;
  bool has_orderid() const;
  private:
  bool _internal_has_orderid() const;
  public:
  void clear_orderid();
  uint64_t orderid() const;
  void set_orderid(uint64_t value);
  private:
  uint64_t _internal_orderid() const;
  void _internal_set_orderid(uint64_t value);
  public:

  // optional int64 amount = 6;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // optional uint32 quantity = 8;
  bool has_quantity() const;
  private:
  bool _internal_has_quantity() const;
  public:
  void clear_quantity();
  uint32_t quantity() const;
  void set_quantity(uint32_t value);
  private:
  uint32_t _internal_quantity() const;
  void _internal_set_quantity(uint32_t value);
  public:

  // optional uint32 itemid = 9;
  bool has_itemid() const;
  private:
  bool _internal_has_itemid() const;
  public:
  void clear_itemid();
  uint32_t itemid() const;
  void set_itemid(uint32_t value);
  private:
  uint32_t _internal_itemid() const;
  void _internal_set_itemid(uint32_t value);
  public:

  // optional uint32 time_created = 13;
  bool has_time_created() const;
  private:
  bool _internal_has_time_created() const;
  public:
  void clear_time_created();
  uint32_t time_created() const;
  void set_time_created(uint32_t value);
  private:
  uint32_t _internal_time_created() const;
  void _internal_set_time_created(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CGCSystemMsg_ReportExternalPurchase_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_orderid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
    uint64_t steamid_;
    uint32_t appid_;
    int provider_;
    uint64_t orderid_;
    int64_t amount_;
    uint32_t quantity_;
    uint32_t itemid_;
    uint32_t time_created_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CGCSystemMsg_ReportExternalPurchase_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGCSystemMsg_ReportExternalPurchase_Response) */ {
 public:
  inline CGCSystemMsg_ReportExternalPurchase_Response() : CGCSystemMsg_ReportExternalPurchase_Response(nullptr) {}
  ~CGCSystemMsg_ReportExternalPurchase_Response() override;
  explicit PROTOBUF_CONSTEXPR CGCSystemMsg_ReportExternalPurchase_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGCSystemMsg_ReportExternalPurchase_Response(const CGCSystemMsg_ReportExternalPurchase_Response& from);
  CGCSystemMsg_ReportExternalPurchase_Response(CGCSystemMsg_ReportExternalPurchase_Response&& from) noexcept
    : CGCSystemMsg_ReportExternalPurchase_Response() {
    *this = ::std::move(from);
  }

  inline CGCSystemMsg_ReportExternalPurchase_Response& operator=(const CGCSystemMsg_ReportExternalPurchase_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGCSystemMsg_ReportExternalPurchase_Response& operator=(CGCSystemMsg_ReportExternalPurchase_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGCSystemMsg_ReportExternalPurchase_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGCSystemMsg_ReportExternalPurchase_Response* internal_default_instance() {
    return reinterpret_cast<const CGCSystemMsg_ReportExternalPurchase_Response*>(
               &_CGCSystemMsg_ReportExternalPurchase_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(CGCSystemMsg_ReportExternalPurchase_Response& a, CGCSystemMsg_ReportExternalPurchase_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGCSystemMsg_ReportExternalPurchase_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGCSystemMsg_ReportExternalPurchase_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGCSystemMsg_ReportExternalPurchase_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGCSystemMsg_ReportExternalPurchase_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGCSystemMsg_ReportExternalPurchase_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CGCSystemMsg_ReportExternalPurchase_Response& from) {
    CGCSystemMsg_ReportExternalPurchase_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGCSystemMsg_ReportExternalPurchase_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGCSystemMsg_ReportExternalPurchase_Response";
  }
  protected:
  explicit CGCSystemMsg_ReportExternalPurchase_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransidFieldNumber = 1,
    kOrderidFieldNumber = 2,
  };
  // optional fixed64 transid = 1;
  bool has_transid() const;
  private:
  bool _internal_has_transid() const;
  public:
  void clear_transid();
  uint64_t transid() const;
  void set_transid(uint64_t value);
  private:
  uint64_t _internal_transid() const;
  void _internal_set_transid(uint64_t value);
  public:

  // optional uint64 orderid = 2;
  bool has_orderid() const;
  private:
  bool _internal_has_orderid() const;
  public:
  void clear_orderid();
  uint64_t orderid() const;
  void set_orderid(uint64_t value);
  private:
  uint64_t _internal_orderid() const;
  void _internal_set_orderid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CGCSystemMsg_ReportExternalPurchase_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t transid_;
    uint64_t orderid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CWorkshop_AddSpecialPayment_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CWorkshop_AddSpecialPayment_Request) */ {
 public:
  inline CWorkshop_AddSpecialPayment_Request() : CWorkshop_AddSpecialPayment_Request(nullptr) {}
  ~CWorkshop_AddSpecialPayment_Request() override;
  explicit PROTOBUF_CONSTEXPR CWorkshop_AddSpecialPayment_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CWorkshop_AddSpecialPayment_Request(const CWorkshop_AddSpecialPayment_Request& from);
  CWorkshop_AddSpecialPayment_Request(CWorkshop_AddSpecialPayment_Request&& from) noexcept
    : CWorkshop_AddSpecialPayment_Request() {
    *this = ::std::move(from);
  }

  inline CWorkshop_AddSpecialPayment_Request& operator=(const CWorkshop_AddSpecialPayment_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CWorkshop_AddSpecialPayment_Request& operator=(CWorkshop_AddSpecialPayment_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CWorkshop_AddSpecialPayment_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CWorkshop_AddSpecialPayment_Request* internal_default_instance() {
    return reinterpret_cast<const CWorkshop_AddSpecialPayment_Request*>(
               &_CWorkshop_AddSpecialPayment_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(CWorkshop_AddSpecialPayment_Request& a, CWorkshop_AddSpecialPayment_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CWorkshop_AddSpecialPayment_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CWorkshop_AddSpecialPayment_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CWorkshop_AddSpecialPayment_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CWorkshop_AddSpecialPayment_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CWorkshop_AddSpecialPayment_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CWorkshop_AddSpecialPayment_Request& from) {
    CWorkshop_AddSpecialPayment_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CWorkshop_AddSpecialPayment_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CWorkshop_AddSpecialPayment_Request";
  }
  protected:
  explicit CWorkshop_AddSpecialPayment_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateFieldNumber = 3,
    kAppidFieldNumber = 1,
    kGameitemidFieldNumber = 2,
    kPaymentUsUsdFieldNumber = 4,
    kPaymentRowUsdFieldNumber = 5,
  };
  // optional string date = 3;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const std::string& date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_date();
  PROTOBUF_NODISCARD std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 gameitemid = 2;
  bool has_gameitemid() const;
  private:
  bool _internal_has_gameitemid() const;
  public:
  void clear_gameitemid();
  uint32_t gameitemid() const;
  void set_gameitemid(uint32_t value);
  private:
  uint32_t _internal_gameitemid() const;
  void _internal_set_gameitemid(uint32_t value);
  public:

  // optional uint64 payment_us_usd = 4;
  bool has_payment_us_usd() const;
  private:
  bool _internal_has_payment_us_usd() const;
  public:
  void clear_payment_us_usd();
  uint64_t payment_us_usd() const;
  void set_payment_us_usd(uint64_t value);
  private:
  uint64_t _internal_payment_us_usd() const;
  void _internal_set_payment_us_usd(uint64_t value);
  public:

  // optional uint64 payment_row_usd = 5;
  bool has_payment_row_usd() const;
  private:
  bool _internal_has_payment_row_usd() const;
  public:
  void clear_payment_row_usd();
  uint64_t payment_row_usd() const;
  void set_payment_row_usd(uint64_t value);
  private:
  uint64_t _internal_payment_row_usd() const;
  void _internal_set_payment_row_usd(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CWorkshop_AddSpecialPayment_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
    uint32_t appid_;
    uint32_t gameitemid_;
    uint64_t payment_us_usd_;
    uint64_t payment_row_usd_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CWorkshop_AddSpecialPayment_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CWorkshop_AddSpecialPayment_Response) */ {
 public:
  inline CWorkshop_AddSpecialPayment_Response() : CWorkshop_AddSpecialPayment_Response(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CWorkshop_AddSpecialPayment_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CWorkshop_AddSpecialPayment_Response(const CWorkshop_AddSpecialPayment_Response& from);
  CWorkshop_AddSpecialPayment_Response(CWorkshop_AddSpecialPayment_Response&& from) noexcept
    : CWorkshop_AddSpecialPayment_Response() {
    *this = ::std::move(from);
  }

  inline CWorkshop_AddSpecialPayment_Response& operator=(const CWorkshop_AddSpecialPayment_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CWorkshop_AddSpecialPayment_Response& operator=(CWorkshop_AddSpecialPayment_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CWorkshop_AddSpecialPayment_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CWorkshop_AddSpecialPayment_Response* internal_default_instance() {
    return reinterpret_cast<const CWorkshop_AddSpecialPayment_Response*>(
               &_CWorkshop_AddSpecialPayment_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(CWorkshop_AddSpecialPayment_Response& a, CWorkshop_AddSpecialPayment_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CWorkshop_AddSpecialPayment_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CWorkshop_AddSpecialPayment_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CWorkshop_AddSpecialPayment_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CWorkshop_AddSpecialPayment_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CWorkshop_AddSpecialPayment_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CWorkshop_AddSpecialPayment_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CWorkshop_AddSpecialPayment_Response";
  }
  protected:
  explicit CWorkshop_AddSpecialPayment_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CWorkshop_AddSpecialPayment_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CWorkshop_GetSpecialPayments_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CWorkshop_GetSpecialPayments_Request) */ {
 public:
  inline CWorkshop_GetSpecialPayments_Request() : CWorkshop_GetSpecialPayments_Request(nullptr) {}
  ~CWorkshop_GetSpecialPayments_Request() override;
  explicit PROTOBUF_CONSTEXPR CWorkshop_GetSpecialPayments_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CWorkshop_GetSpecialPayments_Request(const CWorkshop_GetSpecialPayments_Request& from);
  CWorkshop_GetSpecialPayments_Request(CWorkshop_GetSpecialPayments_Request&& from) noexcept
    : CWorkshop_GetSpecialPayments_Request() {
    *this = ::std::move(from);
  }

  inline CWorkshop_GetSpecialPayments_Request& operator=(const CWorkshop_GetSpecialPayments_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CWorkshop_GetSpecialPayments_Request& operator=(CWorkshop_GetSpecialPayments_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CWorkshop_GetSpecialPayments_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CWorkshop_GetSpecialPayments_Request* internal_default_instance() {
    return reinterpret_cast<const CWorkshop_GetSpecialPayments_Request*>(
               &_CWorkshop_GetSpecialPayments_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(CWorkshop_GetSpecialPayments_Request& a, CWorkshop_GetSpecialPayments_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CWorkshop_GetSpecialPayments_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CWorkshop_GetSpecialPayments_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CWorkshop_GetSpecialPayments_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CWorkshop_GetSpecialPayments_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CWorkshop_GetSpecialPayments_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CWorkshop_GetSpecialPayments_Request& from) {
    CWorkshop_GetSpecialPayments_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CWorkshop_GetSpecialPayments_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CWorkshop_GetSpecialPayments_Request";
  }
  protected:
  explicit CWorkshop_GetSpecialPayments_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateFieldNumber = 3,
    kAppidFieldNumber = 1,
    kGameitemidFieldNumber = 2,
  };
  // optional string date = 3;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const std::string& date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_date();
  PROTOBUF_NODISCARD std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 gameitemid = 2;
  bool has_gameitemid() const;
  private:
  bool _internal_has_gameitemid() const;
  public:
  void clear_gameitemid();
  uint32_t gameitemid() const;
  void set_gameitemid(uint32_t value);
  private:
  uint32_t _internal_gameitemid() const;
  void _internal_set_gameitemid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CWorkshop_GetSpecialPayments_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
    uint32_t appid_;
    uint32_t gameitemid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CWorkshop_GetSpecialPayments_Response_SpecialPayment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CWorkshop_GetSpecialPayments_Response.SpecialPayment) */ {
 public:
  inline CWorkshop_GetSpecialPayments_Response_SpecialPayment() : CWorkshop_GetSpecialPayments_Response_SpecialPayment(nullptr) {}
  ~CWorkshop_GetSpecialPayments_Response_SpecialPayment() override;
  explicit PROTOBUF_CONSTEXPR CWorkshop_GetSpecialPayments_Response_SpecialPayment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CWorkshop_GetSpecialPayments_Response_SpecialPayment(const CWorkshop_GetSpecialPayments_Response_SpecialPayment& from);
  CWorkshop_GetSpecialPayments_Response_SpecialPayment(CWorkshop_GetSpecialPayments_Response_SpecialPayment&& from) noexcept
    : CWorkshop_GetSpecialPayments_Response_SpecialPayment() {
    *this = ::std::move(from);
  }

  inline CWorkshop_GetSpecialPayments_Response_SpecialPayment& operator=(const CWorkshop_GetSpecialPayments_Response_SpecialPayment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CWorkshop_GetSpecialPayments_Response_SpecialPayment& operator=(CWorkshop_GetSpecialPayments_Response_SpecialPayment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CWorkshop_GetSpecialPayments_Response_SpecialPayment& default_instance() {
    return *internal_default_instance();
  }
  static inline const CWorkshop_GetSpecialPayments_Response_SpecialPayment* internal_default_instance() {
    return reinterpret_cast<const CWorkshop_GetSpecialPayments_Response_SpecialPayment*>(
               &_CWorkshop_GetSpecialPayments_Response_SpecialPayment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(CWorkshop_GetSpecialPayments_Response_SpecialPayment& a, CWorkshop_GetSpecialPayments_Response_SpecialPayment& b) {
    a.Swap(&b);
  }
  inline void Swap(CWorkshop_GetSpecialPayments_Response_SpecialPayment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CWorkshop_GetSpecialPayments_Response_SpecialPayment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CWorkshop_GetSpecialPayments_Response_SpecialPayment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CWorkshop_GetSpecialPayments_Response_SpecialPayment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CWorkshop_GetSpecialPayments_Response_SpecialPayment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CWorkshop_GetSpecialPayments_Response_SpecialPayment& from) {
    CWorkshop_GetSpecialPayments_Response_SpecialPayment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CWorkshop_GetSpecialPayments_Response_SpecialPayment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CWorkshop_GetSpecialPayments_Response.SpecialPayment";
  }
  protected:
  explicit CWorkshop_GetSpecialPayments_Response_SpecialPayment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateFieldNumber = 3,
    kAppidFieldNumber = 1,
    kGameitemidFieldNumber = 2,
    kNetPaymentUsUsdFieldNumber = 4,
    kNetPaymentRowUsdFieldNumber = 5,
  };
  // optional string date = 3;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const std::string& date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_date();
  PROTOBUF_NODISCARD std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 gameitemid = 2;
  bool has_gameitemid() const;
  private:
  bool _internal_has_gameitemid() const;
  public:
  void clear_gameitemid();
  uint32_t gameitemid() const;
  void set_gameitemid(uint32_t value);
  private:
  uint32_t _internal_gameitemid() const;
  void _internal_set_gameitemid(uint32_t value);
  public:

  // optional uint64 net_payment_us_usd = 4;
  bool has_net_payment_us_usd() const;
  private:
  bool _internal_has_net_payment_us_usd() const;
  public:
  void clear_net_payment_us_usd();
  uint64_t net_payment_us_usd() const;
  void set_net_payment_us_usd(uint64_t value);
  private:
  uint64_t _internal_net_payment_us_usd() const;
  void _internal_set_net_payment_us_usd(uint64_t value);
  public:

  // optional uint64 net_payment_row_usd = 5;
  bool has_net_payment_row_usd() const;
  private:
  bool _internal_has_net_payment_row_usd() const;
  public:
  void clear_net_payment_row_usd();
  uint64_t net_payment_row_usd() const;
  void set_net_payment_row_usd(uint64_t value);
  private:
  uint64_t _internal_net_payment_row_usd() const;
  void _internal_set_net_payment_row_usd(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CWorkshop_GetSpecialPayments_Response.SpecialPayment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
    uint32_t appid_;
    uint32_t gameitemid_;
    uint64_t net_payment_us_usd_;
    uint64_t net_payment_row_usd_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// -------------------------------------------------------------------

class CWorkshop_GetSpecialPayments_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CWorkshop_GetSpecialPayments_Response) */ {
 public:
  inline CWorkshop_GetSpecialPayments_Response() : CWorkshop_GetSpecialPayments_Response(nullptr) {}
  ~CWorkshop_GetSpecialPayments_Response() override;
  explicit PROTOBUF_CONSTEXPR CWorkshop_GetSpecialPayments_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CWorkshop_GetSpecialPayments_Response(const CWorkshop_GetSpecialPayments_Response& from);
  CWorkshop_GetSpecialPayments_Response(CWorkshop_GetSpecialPayments_Response&& from) noexcept
    : CWorkshop_GetSpecialPayments_Response() {
    *this = ::std::move(from);
  }

  inline CWorkshop_GetSpecialPayments_Response& operator=(const CWorkshop_GetSpecialPayments_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CWorkshop_GetSpecialPayments_Response& operator=(CWorkshop_GetSpecialPayments_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CWorkshop_GetSpecialPayments_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CWorkshop_GetSpecialPayments_Response* internal_default_instance() {
    return reinterpret_cast<const CWorkshop_GetSpecialPayments_Response*>(
               &_CWorkshop_GetSpecialPayments_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(CWorkshop_GetSpecialPayments_Response& a, CWorkshop_GetSpecialPayments_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CWorkshop_GetSpecialPayments_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CWorkshop_GetSpecialPayments_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CWorkshop_GetSpecialPayments_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CWorkshop_GetSpecialPayments_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CWorkshop_GetSpecialPayments_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CWorkshop_GetSpecialPayments_Response& from) {
    CWorkshop_GetSpecialPayments_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CWorkshop_GetSpecialPayments_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CWorkshop_GetSpecialPayments_Response";
  }
  protected:
  explicit CWorkshop_GetSpecialPayments_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CWorkshop_GetSpecialPayments_Response_SpecialPayment SpecialPayment;

  // accessors -------------------------------------------------------

  enum : int {
    kSpecialPaymentsFieldNumber = 1,
  };
  // repeated .CWorkshop_GetSpecialPayments_Response.SpecialPayment special_payments = 1;
  int special_payments_size() const;
  private:
  int _internal_special_payments_size() const;
  public:
  void clear_special_payments();
  ::CWorkshop_GetSpecialPayments_Response_SpecialPayment* mutable_special_payments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CWorkshop_GetSpecialPayments_Response_SpecialPayment >*
      mutable_special_payments();
  private:
  const ::CWorkshop_GetSpecialPayments_Response_SpecialPayment& _internal_special_payments(int index) const;
  ::CWorkshop_GetSpecialPayments_Response_SpecialPayment* _internal_add_special_payments();
  public:
  const ::CWorkshop_GetSpecialPayments_Response_SpecialPayment& special_payments(int index) const;
  ::CWorkshop_GetSpecialPayments_Response_SpecialPayment* add_special_payments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CWorkshop_GetSpecialPayments_Response_SpecialPayment >&
      special_payments() const;

  // @@protoc_insertion_point(class_scope:CWorkshop_GetSpecialPayments_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CWorkshop_GetSpecialPayments_Response_SpecialPayment > special_payments_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fint_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgWebAPIKey

// optional uint32 status = 1 [default = 255];
inline bool CMsgWebAPIKey::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgWebAPIKey::has_status() const {
  return _internal_has_status();
}
inline void CMsgWebAPIKey::clear_status() {
  _impl_.status_ = 255u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgWebAPIKey::_internal_status() const {
  return _impl_.status_;
}
inline uint32_t CMsgWebAPIKey::status() const {
  // @@protoc_insertion_point(field_get:CMsgWebAPIKey.status)
  return _internal_status();
}
inline void CMsgWebAPIKey::_internal_set_status(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.status_ = value;
}
inline void CMsgWebAPIKey::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:CMsgWebAPIKey.status)
}

// optional uint32 account_id = 2 [default = 0];
inline bool CMsgWebAPIKey::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgWebAPIKey::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgWebAPIKey::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgWebAPIKey::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgWebAPIKey::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgWebAPIKey.account_id)
  return _internal_account_id();
}
inline void CMsgWebAPIKey::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.account_id_ = value;
}
inline void CMsgWebAPIKey::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgWebAPIKey.account_id)
}

// optional uint32 publisher_group_id = 3 [default = 0];
inline bool CMsgWebAPIKey::_internal_has_publisher_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgWebAPIKey::has_publisher_group_id() const {
  return _internal_has_publisher_group_id();
}
inline void CMsgWebAPIKey::clear_publisher_group_id() {
  _impl_.publisher_group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgWebAPIKey::_internal_publisher_group_id() const {
  return _impl_.publisher_group_id_;
}
inline uint32_t CMsgWebAPIKey::publisher_group_id() const {
  // @@protoc_insertion_point(field_get:CMsgWebAPIKey.publisher_group_id)
  return _internal_publisher_group_id();
}
inline void CMsgWebAPIKey::_internal_set_publisher_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.publisher_group_id_ = value;
}
inline void CMsgWebAPIKey::set_publisher_group_id(uint32_t value) {
  _internal_set_publisher_group_id(value);
  // @@protoc_insertion_point(field_set:CMsgWebAPIKey.publisher_group_id)
}

// optional uint32 key_id = 4;
inline bool CMsgWebAPIKey::_internal_has_key_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgWebAPIKey::has_key_id() const {
  return _internal_has_key_id();
}
inline void CMsgWebAPIKey::clear_key_id() {
  _impl_.key_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgWebAPIKey::_internal_key_id() const {
  return _impl_.key_id_;
}
inline uint32_t CMsgWebAPIKey::key_id() const {
  // @@protoc_insertion_point(field_get:CMsgWebAPIKey.key_id)
  return _internal_key_id();
}
inline void CMsgWebAPIKey::_internal_set_key_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.key_id_ = value;
}
inline void CMsgWebAPIKey::set_key_id(uint32_t value) {
  _internal_set_key_id(value);
  // @@protoc_insertion_point(field_set:CMsgWebAPIKey.key_id)
}

// optional string domain = 5;
inline bool CMsgWebAPIKey::_internal_has_domain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgWebAPIKey::has_domain() const {
  return _internal_has_domain();
}
inline void CMsgWebAPIKey::clear_domain() {
  _impl_.domain_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgWebAPIKey::domain() const {
  // @@protoc_insertion_point(field_get:CMsgWebAPIKey.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgWebAPIKey::set_domain(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgWebAPIKey.domain)
}
inline std::string* CMsgWebAPIKey::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:CMsgWebAPIKey.domain)
  return _s;
}
inline const std::string& CMsgWebAPIKey::_internal_domain() const {
  return _impl_.domain_.Get();
}
inline void CMsgWebAPIKey::_internal_set_domain(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.domain_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgWebAPIKey::_internal_mutable_domain() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.domain_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgWebAPIKey::release_domain() {
  // @@protoc_insertion_point(field_release:CMsgWebAPIKey.domain)
  if (!_internal_has_domain()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.domain_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgWebAPIKey::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.domain_.SetAllocated(domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgWebAPIKey.domain)
}

// -------------------------------------------------------------------

// CMsgHttpRequest_RequestHeader

// optional string name = 1;
inline bool CMsgHttpRequest_RequestHeader::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgHttpRequest_RequestHeader::has_name() const {
  return _internal_has_name();
}
inline void CMsgHttpRequest_RequestHeader::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgHttpRequest_RequestHeader::name() const {
  // @@protoc_insertion_point(field_get:CMsgHttpRequest.RequestHeader.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgHttpRequest_RequestHeader::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgHttpRequest.RequestHeader.name)
}
inline std::string* CMsgHttpRequest_RequestHeader::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgHttpRequest.RequestHeader.name)
  return _s;
}
inline const std::string& CMsgHttpRequest_RequestHeader::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgHttpRequest_RequestHeader::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgHttpRequest_RequestHeader::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgHttpRequest_RequestHeader::release_name() {
  // @@protoc_insertion_point(field_release:CMsgHttpRequest.RequestHeader.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgHttpRequest_RequestHeader::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgHttpRequest.RequestHeader.name)
}

// optional string value = 2;
inline bool CMsgHttpRequest_RequestHeader::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgHttpRequest_RequestHeader::has_value() const {
  return _internal_has_value();
}
inline void CMsgHttpRequest_RequestHeader::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgHttpRequest_RequestHeader::value() const {
  // @@protoc_insertion_point(field_get:CMsgHttpRequest.RequestHeader.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgHttpRequest_RequestHeader::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgHttpRequest.RequestHeader.value)
}
inline std::string* CMsgHttpRequest_RequestHeader::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CMsgHttpRequest.RequestHeader.value)
  return _s;
}
inline const std::string& CMsgHttpRequest_RequestHeader::_internal_value() const {
  return _impl_.value_.Get();
}
inline void CMsgHttpRequest_RequestHeader::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgHttpRequest_RequestHeader::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgHttpRequest_RequestHeader::release_value() {
  // @@protoc_insertion_point(field_release:CMsgHttpRequest.RequestHeader.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgHttpRequest_RequestHeader::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgHttpRequest.RequestHeader.value)
}

// -------------------------------------------------------------------

// CMsgHttpRequest_QueryParam

// optional string name = 1;
inline bool CMsgHttpRequest_QueryParam::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgHttpRequest_QueryParam::has_name() const {
  return _internal_has_name();
}
inline void CMsgHttpRequest_QueryParam::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgHttpRequest_QueryParam::name() const {
  // @@protoc_insertion_point(field_get:CMsgHttpRequest.QueryParam.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgHttpRequest_QueryParam::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgHttpRequest.QueryParam.name)
}
inline std::string* CMsgHttpRequest_QueryParam::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgHttpRequest.QueryParam.name)
  return _s;
}
inline const std::string& CMsgHttpRequest_QueryParam::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgHttpRequest_QueryParam::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgHttpRequest_QueryParam::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgHttpRequest_QueryParam::release_name() {
  // @@protoc_insertion_point(field_release:CMsgHttpRequest.QueryParam.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgHttpRequest_QueryParam::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgHttpRequest.QueryParam.name)
}

// optional bytes value = 2;
inline bool CMsgHttpRequest_QueryParam::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgHttpRequest_QueryParam::has_value() const {
  return _internal_has_value();
}
inline void CMsgHttpRequest_QueryParam::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgHttpRequest_QueryParam::value() const {
  // @@protoc_insertion_point(field_get:CMsgHttpRequest.QueryParam.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgHttpRequest_QueryParam::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgHttpRequest.QueryParam.value)
}
inline std::string* CMsgHttpRequest_QueryParam::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CMsgHttpRequest.QueryParam.value)
  return _s;
}
inline const std::string& CMsgHttpRequest_QueryParam::_internal_value() const {
  return _impl_.value_.Get();
}
inline void CMsgHttpRequest_QueryParam::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgHttpRequest_QueryParam::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgHttpRequest_QueryParam::release_value() {
  // @@protoc_insertion_point(field_release:CMsgHttpRequest.QueryParam.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgHttpRequest_QueryParam::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgHttpRequest.QueryParam.value)
}

// -------------------------------------------------------------------

// CMsgHttpRequest

// optional uint32 request_method = 1;
inline bool CMsgHttpRequest::_internal_has_request_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgHttpRequest::has_request_method() const {
  return _internal_has_request_method();
}
inline void CMsgHttpRequest::clear_request_method() {
  _impl_.request_method_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgHttpRequest::_internal_request_method() const {
  return _impl_.request_method_;
}
inline uint32_t CMsgHttpRequest::request_method() const {
  // @@protoc_insertion_point(field_get:CMsgHttpRequest.request_method)
  return _internal_request_method();
}
inline void CMsgHttpRequest::_internal_set_request_method(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.request_method_ = value;
}
inline void CMsgHttpRequest::set_request_method(uint32_t value) {
  _internal_set_request_method(value);
  // @@protoc_insertion_point(field_set:CMsgHttpRequest.request_method)
}

// optional string hostname = 2;
inline bool CMsgHttpRequest::_internal_has_hostname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgHttpRequest::has_hostname() const {
  return _internal_has_hostname();
}
inline void CMsgHttpRequest::clear_hostname() {
  _impl_.hostname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgHttpRequest::hostname() const {
  // @@protoc_insertion_point(field_get:CMsgHttpRequest.hostname)
  return _internal_hostname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgHttpRequest::set_hostname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.hostname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgHttpRequest.hostname)
}
inline std::string* CMsgHttpRequest::mutable_hostname() {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:CMsgHttpRequest.hostname)
  return _s;
}
inline const std::string& CMsgHttpRequest::_internal_hostname() const {
  return _impl_.hostname_.Get();
}
inline void CMsgHttpRequest::_internal_set_hostname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hostname_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgHttpRequest::_internal_mutable_hostname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.hostname_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgHttpRequest::release_hostname() {
  // @@protoc_insertion_point(field_release:CMsgHttpRequest.hostname)
  if (!_internal_has_hostname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.hostname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hostname_.IsDefault()) {
    _impl_.hostname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgHttpRequest::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.hostname_.SetAllocated(hostname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hostname_.IsDefault()) {
    _impl_.hostname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgHttpRequest.hostname)
}

// optional string url = 3;
inline bool CMsgHttpRequest::_internal_has_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgHttpRequest::has_url() const {
  return _internal_has_url();
}
inline void CMsgHttpRequest::clear_url() {
  _impl_.url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgHttpRequest::url() const {
  // @@protoc_insertion_point(field_get:CMsgHttpRequest.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgHttpRequest::set_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgHttpRequest.url)
}
inline std::string* CMsgHttpRequest::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CMsgHttpRequest.url)
  return _s;
}
inline const std::string& CMsgHttpRequest::_internal_url() const {
  return _impl_.url_.Get();
}
inline void CMsgHttpRequest::_internal_set_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgHttpRequest::_internal_mutable_url() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgHttpRequest::release_url() {
  // @@protoc_insertion_point(field_release:CMsgHttpRequest.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgHttpRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgHttpRequest.url)
}

// repeated .CMsgHttpRequest.RequestHeader headers = 4;
inline int CMsgHttpRequest::_internal_headers_size() const {
  return _impl_.headers_.size();
}
inline int CMsgHttpRequest::headers_size() const {
  return _internal_headers_size();
}
inline void CMsgHttpRequest::clear_headers() {
  _impl_.headers_.Clear();
}
inline ::CMsgHttpRequest_RequestHeader* CMsgHttpRequest::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgHttpRequest.headers)
  return _impl_.headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHttpRequest_RequestHeader >*
CMsgHttpRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:CMsgHttpRequest.headers)
  return &_impl_.headers_;
}
inline const ::CMsgHttpRequest_RequestHeader& CMsgHttpRequest::_internal_headers(int index) const {
  return _impl_.headers_.Get(index);
}
inline const ::CMsgHttpRequest_RequestHeader& CMsgHttpRequest::headers(int index) const {
  // @@protoc_insertion_point(field_get:CMsgHttpRequest.headers)
  return _internal_headers(index);
}
inline ::CMsgHttpRequest_RequestHeader* CMsgHttpRequest::_internal_add_headers() {
  return _impl_.headers_.Add();
}
inline ::CMsgHttpRequest_RequestHeader* CMsgHttpRequest::add_headers() {
  ::CMsgHttpRequest_RequestHeader* _add = _internal_add_headers();
  // @@protoc_insertion_point(field_add:CMsgHttpRequest.headers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHttpRequest_RequestHeader >&
CMsgHttpRequest::headers() const {
  // @@protoc_insertion_point(field_list:CMsgHttpRequest.headers)
  return _impl_.headers_;
}

// repeated .CMsgHttpRequest.QueryParam get_params = 5;
inline int CMsgHttpRequest::_internal_get_params_size() const {
  return _impl_.get_params_.size();
}
inline int CMsgHttpRequest::get_params_size() const {
  return _internal_get_params_size();
}
inline void CMsgHttpRequest::clear_get_params() {
  _impl_.get_params_.Clear();
}
inline ::CMsgHttpRequest_QueryParam* CMsgHttpRequest::mutable_get_params(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgHttpRequest.get_params)
  return _impl_.get_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHttpRequest_QueryParam >*
CMsgHttpRequest::mutable_get_params() {
  // @@protoc_insertion_point(field_mutable_list:CMsgHttpRequest.get_params)
  return &_impl_.get_params_;
}
inline const ::CMsgHttpRequest_QueryParam& CMsgHttpRequest::_internal_get_params(int index) const {
  return _impl_.get_params_.Get(index);
}
inline const ::CMsgHttpRequest_QueryParam& CMsgHttpRequest::get_params(int index) const {
  // @@protoc_insertion_point(field_get:CMsgHttpRequest.get_params)
  return _internal_get_params(index);
}
inline ::CMsgHttpRequest_QueryParam* CMsgHttpRequest::_internal_add_get_params() {
  return _impl_.get_params_.Add();
}
inline ::CMsgHttpRequest_QueryParam* CMsgHttpRequest::add_get_params() {
  ::CMsgHttpRequest_QueryParam* _add = _internal_add_get_params();
  // @@protoc_insertion_point(field_add:CMsgHttpRequest.get_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHttpRequest_QueryParam >&
CMsgHttpRequest::get_params() const {
  // @@protoc_insertion_point(field_list:CMsgHttpRequest.get_params)
  return _impl_.get_params_;
}

// repeated .CMsgHttpRequest.QueryParam post_params = 6;
inline int CMsgHttpRequest::_internal_post_params_size() const {
  return _impl_.post_params_.size();
}
inline int CMsgHttpRequest::post_params_size() const {
  return _internal_post_params_size();
}
inline void CMsgHttpRequest::clear_post_params() {
  _impl_.post_params_.Clear();
}
inline ::CMsgHttpRequest_QueryParam* CMsgHttpRequest::mutable_post_params(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgHttpRequest.post_params)
  return _impl_.post_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHttpRequest_QueryParam >*
CMsgHttpRequest::mutable_post_params() {
  // @@protoc_insertion_point(field_mutable_list:CMsgHttpRequest.post_params)
  return &_impl_.post_params_;
}
inline const ::CMsgHttpRequest_QueryParam& CMsgHttpRequest::_internal_post_params(int index) const {
  return _impl_.post_params_.Get(index);
}
inline const ::CMsgHttpRequest_QueryParam& CMsgHttpRequest::post_params(int index) const {
  // @@protoc_insertion_point(field_get:CMsgHttpRequest.post_params)
  return _internal_post_params(index);
}
inline ::CMsgHttpRequest_QueryParam* CMsgHttpRequest::_internal_add_post_params() {
  return _impl_.post_params_.Add();
}
inline ::CMsgHttpRequest_QueryParam* CMsgHttpRequest::add_post_params() {
  ::CMsgHttpRequest_QueryParam* _add = _internal_add_post_params();
  // @@protoc_insertion_point(field_add:CMsgHttpRequest.post_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHttpRequest_QueryParam >&
CMsgHttpRequest::post_params() const {
  // @@protoc_insertion_point(field_list:CMsgHttpRequest.post_params)
  return _impl_.post_params_;
}

// optional bytes body = 7;
inline bool CMsgHttpRequest::_internal_has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgHttpRequest::has_body() const {
  return _internal_has_body();
}
inline void CMsgHttpRequest::clear_body() {
  _impl_.body_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgHttpRequest::body() const {
  // @@protoc_insertion_point(field_get:CMsgHttpRequest.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgHttpRequest::set_body(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.body_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgHttpRequest.body)
}
inline std::string* CMsgHttpRequest::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:CMsgHttpRequest.body)
  return _s;
}
inline const std::string& CMsgHttpRequest::_internal_body() const {
  return _impl_.body_.Get();
}
inline void CMsgHttpRequest::_internal_set_body(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgHttpRequest::_internal_mutable_body() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.body_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgHttpRequest::release_body() {
  // @@protoc_insertion_point(field_release:CMsgHttpRequest.body)
  if (!_internal_has_body()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.body_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgHttpRequest::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgHttpRequest.body)
}

// optional uint32 absolute_timeout = 8;
inline bool CMsgHttpRequest::_internal_has_absolute_timeout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgHttpRequest::has_absolute_timeout() const {
  return _internal_has_absolute_timeout();
}
inline void CMsgHttpRequest::clear_absolute_timeout() {
  _impl_.absolute_timeout_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgHttpRequest::_internal_absolute_timeout() const {
  return _impl_.absolute_timeout_;
}
inline uint32_t CMsgHttpRequest::absolute_timeout() const {
  // @@protoc_insertion_point(field_get:CMsgHttpRequest.absolute_timeout)
  return _internal_absolute_timeout();
}
inline void CMsgHttpRequest::_internal_set_absolute_timeout(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.absolute_timeout_ = value;
}
inline void CMsgHttpRequest::set_absolute_timeout(uint32_t value) {
  _internal_set_absolute_timeout(value);
  // @@protoc_insertion_point(field_set:CMsgHttpRequest.absolute_timeout)
}

// optional bool use_https = 9;
inline bool CMsgHttpRequest::_internal_has_use_https() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgHttpRequest::has_use_https() const {
  return _internal_has_use_https();
}
inline void CMsgHttpRequest::clear_use_https() {
  _impl_.use_https_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgHttpRequest::_internal_use_https() const {
  return _impl_.use_https_;
}
inline bool CMsgHttpRequest::use_https() const {
  // @@protoc_insertion_point(field_get:CMsgHttpRequest.use_https)
  return _internal_use_https();
}
inline void CMsgHttpRequest::_internal_set_use_https(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.use_https_ = value;
}
inline void CMsgHttpRequest::set_use_https(bool value) {
  _internal_set_use_https(value);
  // @@protoc_insertion_point(field_set:CMsgHttpRequest.use_https)
}

// -------------------------------------------------------------------

// CMsgWebAPIRequest

// optional string interface_name = 2;
inline bool CMsgWebAPIRequest::_internal_has_interface_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgWebAPIRequest::has_interface_name() const {
  return _internal_has_interface_name();
}
inline void CMsgWebAPIRequest::clear_interface_name() {
  _impl_.interface_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgWebAPIRequest::interface_name() const {
  // @@protoc_insertion_point(field_get:CMsgWebAPIRequest.interface_name)
  return _internal_interface_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgWebAPIRequest::set_interface_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.interface_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgWebAPIRequest.interface_name)
}
inline std::string* CMsgWebAPIRequest::mutable_interface_name() {
  std::string* _s = _internal_mutable_interface_name();
  // @@protoc_insertion_point(field_mutable:CMsgWebAPIRequest.interface_name)
  return _s;
}
inline const std::string& CMsgWebAPIRequest::_internal_interface_name() const {
  return _impl_.interface_name_.Get();
}
inline void CMsgWebAPIRequest::_internal_set_interface_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.interface_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgWebAPIRequest::_internal_mutable_interface_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.interface_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgWebAPIRequest::release_interface_name() {
  // @@protoc_insertion_point(field_release:CMsgWebAPIRequest.interface_name)
  if (!_internal_has_interface_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.interface_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.interface_name_.IsDefault()) {
    _impl_.interface_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgWebAPIRequest::set_allocated_interface_name(std::string* interface_name) {
  if (interface_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.interface_name_.SetAllocated(interface_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.interface_name_.IsDefault()) {
    _impl_.interface_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgWebAPIRequest.interface_name)
}

// optional string method_name = 3;
inline bool CMsgWebAPIRequest::_internal_has_method_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgWebAPIRequest::has_method_name() const {
  return _internal_has_method_name();
}
inline void CMsgWebAPIRequest::clear_method_name() {
  _impl_.method_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgWebAPIRequest::method_name() const {
  // @@protoc_insertion_point(field_get:CMsgWebAPIRequest.method_name)
  return _internal_method_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgWebAPIRequest::set_method_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.method_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgWebAPIRequest.method_name)
}
inline std::string* CMsgWebAPIRequest::mutable_method_name() {
  std::string* _s = _internal_mutable_method_name();
  // @@protoc_insertion_point(field_mutable:CMsgWebAPIRequest.method_name)
  return _s;
}
inline const std::string& CMsgWebAPIRequest::_internal_method_name() const {
  return _impl_.method_name_.Get();
}
inline void CMsgWebAPIRequest::_internal_set_method_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.method_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgWebAPIRequest::_internal_mutable_method_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.method_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgWebAPIRequest::release_method_name() {
  // @@protoc_insertion_point(field_release:CMsgWebAPIRequest.method_name)
  if (!_internal_has_method_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.method_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_name_.IsDefault()) {
    _impl_.method_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgWebAPIRequest::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.method_name_.SetAllocated(method_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_name_.IsDefault()) {
    _impl_.method_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgWebAPIRequest.method_name)
}

// optional uint32 version = 4;
inline bool CMsgWebAPIRequest::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgWebAPIRequest::has_version() const {
  return _internal_has_version();
}
inline void CMsgWebAPIRequest::clear_version() {
  _impl_.version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgWebAPIRequest::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t CMsgWebAPIRequest::version() const {
  // @@protoc_insertion_point(field_get:CMsgWebAPIRequest.version)
  return _internal_version();
}
inline void CMsgWebAPIRequest::_internal_set_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.version_ = value;
}
inline void CMsgWebAPIRequest::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CMsgWebAPIRequest.version)
}

// optional .CMsgWebAPIKey api_key = 5;
inline bool CMsgWebAPIRequest::_internal_has_api_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.api_key_ != nullptr);
  return value;
}
inline bool CMsgWebAPIRequest::has_api_key() const {
  return _internal_has_api_key();
}
inline void CMsgWebAPIRequest::clear_api_key() {
  if (_impl_.api_key_ != nullptr) _impl_.api_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgWebAPIKey& CMsgWebAPIRequest::_internal_api_key() const {
  const ::CMsgWebAPIKey* p = _impl_.api_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgWebAPIKey&>(
      ::_CMsgWebAPIKey_default_instance_);
}
inline const ::CMsgWebAPIKey& CMsgWebAPIRequest::api_key() const {
  // @@protoc_insertion_point(field_get:CMsgWebAPIRequest.api_key)
  return _internal_api_key();
}
inline void CMsgWebAPIRequest::unsafe_arena_set_allocated_api_key(
    ::CMsgWebAPIKey* api_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.api_key_);
  }
  _impl_.api_key_ = api_key;
  if (api_key) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgWebAPIRequest.api_key)
}
inline ::CMsgWebAPIKey* CMsgWebAPIRequest::release_api_key() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgWebAPIKey* temp = _impl_.api_key_;
  _impl_.api_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgWebAPIKey* CMsgWebAPIRequest::unsafe_arena_release_api_key() {
  // @@protoc_insertion_point(field_release:CMsgWebAPIRequest.api_key)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgWebAPIKey* temp = _impl_.api_key_;
  _impl_.api_key_ = nullptr;
  return temp;
}
inline ::CMsgWebAPIKey* CMsgWebAPIRequest::_internal_mutable_api_key() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.api_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgWebAPIKey>(GetArenaForAllocation());
    _impl_.api_key_ = p;
  }
  return _impl_.api_key_;
}
inline ::CMsgWebAPIKey* CMsgWebAPIRequest::mutable_api_key() {
  ::CMsgWebAPIKey* _msg = _internal_mutable_api_key();
  // @@protoc_insertion_point(field_mutable:CMsgWebAPIRequest.api_key)
  return _msg;
}
inline void CMsgWebAPIRequest::set_allocated_api_key(::CMsgWebAPIKey* api_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.api_key_;
  }
  if (api_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(api_key);
    if (message_arena != submessage_arena) {
      api_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, api_key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.api_key_ = api_key;
  // @@protoc_insertion_point(field_set_allocated:CMsgWebAPIRequest.api_key)
}

// optional .CMsgHttpRequest request = 6;
inline bool CMsgWebAPIRequest::_internal_has_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.request_ != nullptr);
  return value;
}
inline bool CMsgWebAPIRequest::has_request() const {
  return _internal_has_request();
}
inline void CMsgWebAPIRequest::clear_request() {
  if (_impl_.request_ != nullptr) _impl_.request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::CMsgHttpRequest& CMsgWebAPIRequest::_internal_request() const {
  const ::CMsgHttpRequest* p = _impl_.request_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgHttpRequest&>(
      ::_CMsgHttpRequest_default_instance_);
}
inline const ::CMsgHttpRequest& CMsgWebAPIRequest::request() const {
  // @@protoc_insertion_point(field_get:CMsgWebAPIRequest.request)
  return _internal_request();
}
inline void CMsgWebAPIRequest::unsafe_arena_set_allocated_request(
    ::CMsgHttpRequest* request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_);
  }
  _impl_.request_ = request;
  if (request) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgWebAPIRequest.request)
}
inline ::CMsgHttpRequest* CMsgWebAPIRequest::release_request() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CMsgHttpRequest* temp = _impl_.request_;
  _impl_.request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgHttpRequest* CMsgWebAPIRequest::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:CMsgWebAPIRequest.request)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CMsgHttpRequest* temp = _impl_.request_;
  _impl_.request_ = nullptr;
  return temp;
}
inline ::CMsgHttpRequest* CMsgWebAPIRequest::_internal_mutable_request() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.request_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgHttpRequest>(GetArenaForAllocation());
    _impl_.request_ = p;
  }
  return _impl_.request_;
}
inline ::CMsgHttpRequest* CMsgWebAPIRequest::mutable_request() {
  ::CMsgHttpRequest* _msg = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:CMsgWebAPIRequest.request)
  return _msg;
}
inline void CMsgWebAPIRequest::set_allocated_request(::CMsgHttpRequest* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.request_ = request;
  // @@protoc_insertion_point(field_set_allocated:CMsgWebAPIRequest.request)
}

// optional uint32 routing_app_id = 7;
inline bool CMsgWebAPIRequest::_internal_has_routing_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgWebAPIRequest::has_routing_app_id() const {
  return _internal_has_routing_app_id();
}
inline void CMsgWebAPIRequest::clear_routing_app_id() {
  _impl_.routing_app_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgWebAPIRequest::_internal_routing_app_id() const {
  return _impl_.routing_app_id_;
}
inline uint32_t CMsgWebAPIRequest::routing_app_id() const {
  // @@protoc_insertion_point(field_get:CMsgWebAPIRequest.routing_app_id)
  return _internal_routing_app_id();
}
inline void CMsgWebAPIRequest::_internal_set_routing_app_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.routing_app_id_ = value;
}
inline void CMsgWebAPIRequest::set_routing_app_id(uint32_t value) {
  _internal_set_routing_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgWebAPIRequest.routing_app_id)
}

// -------------------------------------------------------------------

// CMsgHttpResponse_ResponseHeader

// optional string name = 1;
inline bool CMsgHttpResponse_ResponseHeader::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgHttpResponse_ResponseHeader::has_name() const {
  return _internal_has_name();
}
inline void CMsgHttpResponse_ResponseHeader::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgHttpResponse_ResponseHeader::name() const {
  // @@protoc_insertion_point(field_get:CMsgHttpResponse.ResponseHeader.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgHttpResponse_ResponseHeader::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgHttpResponse.ResponseHeader.name)
}
inline std::string* CMsgHttpResponse_ResponseHeader::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgHttpResponse.ResponseHeader.name)
  return _s;
}
inline const std::string& CMsgHttpResponse_ResponseHeader::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgHttpResponse_ResponseHeader::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgHttpResponse_ResponseHeader::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgHttpResponse_ResponseHeader::release_name() {
  // @@protoc_insertion_point(field_release:CMsgHttpResponse.ResponseHeader.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgHttpResponse_ResponseHeader::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgHttpResponse.ResponseHeader.name)
}

// optional string value = 2;
inline bool CMsgHttpResponse_ResponseHeader::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgHttpResponse_ResponseHeader::has_value() const {
  return _internal_has_value();
}
inline void CMsgHttpResponse_ResponseHeader::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgHttpResponse_ResponseHeader::value() const {
  // @@protoc_insertion_point(field_get:CMsgHttpResponse.ResponseHeader.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgHttpResponse_ResponseHeader::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgHttpResponse.ResponseHeader.value)
}
inline std::string* CMsgHttpResponse_ResponseHeader::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CMsgHttpResponse.ResponseHeader.value)
  return _s;
}
inline const std::string& CMsgHttpResponse_ResponseHeader::_internal_value() const {
  return _impl_.value_.Get();
}
inline void CMsgHttpResponse_ResponseHeader::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgHttpResponse_ResponseHeader::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgHttpResponse_ResponseHeader::release_value() {
  // @@protoc_insertion_point(field_release:CMsgHttpResponse.ResponseHeader.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgHttpResponse_ResponseHeader::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgHttpResponse.ResponseHeader.value)
}

// -------------------------------------------------------------------

// CMsgHttpResponse

// optional uint32 status_code = 1;
inline bool CMsgHttpResponse::_internal_has_status_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgHttpResponse::has_status_code() const {
  return _internal_has_status_code();
}
inline void CMsgHttpResponse::clear_status_code() {
  _impl_.status_code_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgHttpResponse::_internal_status_code() const {
  return _impl_.status_code_;
}
inline uint32_t CMsgHttpResponse::status_code() const {
  // @@protoc_insertion_point(field_get:CMsgHttpResponse.status_code)
  return _internal_status_code();
}
inline void CMsgHttpResponse::_internal_set_status_code(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.status_code_ = value;
}
inline void CMsgHttpResponse::set_status_code(uint32_t value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:CMsgHttpResponse.status_code)
}

// repeated .CMsgHttpResponse.ResponseHeader headers = 2;
inline int CMsgHttpResponse::_internal_headers_size() const {
  return _impl_.headers_.size();
}
inline int CMsgHttpResponse::headers_size() const {
  return _internal_headers_size();
}
inline void CMsgHttpResponse::clear_headers() {
  _impl_.headers_.Clear();
}
inline ::CMsgHttpResponse_ResponseHeader* CMsgHttpResponse::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgHttpResponse.headers)
  return _impl_.headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHttpResponse_ResponseHeader >*
CMsgHttpResponse::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:CMsgHttpResponse.headers)
  return &_impl_.headers_;
}
inline const ::CMsgHttpResponse_ResponseHeader& CMsgHttpResponse::_internal_headers(int index) const {
  return _impl_.headers_.Get(index);
}
inline const ::CMsgHttpResponse_ResponseHeader& CMsgHttpResponse::headers(int index) const {
  // @@protoc_insertion_point(field_get:CMsgHttpResponse.headers)
  return _internal_headers(index);
}
inline ::CMsgHttpResponse_ResponseHeader* CMsgHttpResponse::_internal_add_headers() {
  return _impl_.headers_.Add();
}
inline ::CMsgHttpResponse_ResponseHeader* CMsgHttpResponse::add_headers() {
  ::CMsgHttpResponse_ResponseHeader* _add = _internal_add_headers();
  // @@protoc_insertion_point(field_add:CMsgHttpResponse.headers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgHttpResponse_ResponseHeader >&
CMsgHttpResponse::headers() const {
  // @@protoc_insertion_point(field_list:CMsgHttpResponse.headers)
  return _impl_.headers_;
}

// optional bytes body = 3;
inline bool CMsgHttpResponse::_internal_has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgHttpResponse::has_body() const {
  return _internal_has_body();
}
inline void CMsgHttpResponse::clear_body() {
  _impl_.body_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgHttpResponse::body() const {
  // @@protoc_insertion_point(field_get:CMsgHttpResponse.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgHttpResponse::set_body(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.body_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgHttpResponse.body)
}
inline std::string* CMsgHttpResponse::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:CMsgHttpResponse.body)
  return _s;
}
inline const std::string& CMsgHttpResponse::_internal_body() const {
  return _impl_.body_.Get();
}
inline void CMsgHttpResponse::_internal_set_body(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgHttpResponse::_internal_mutable_body() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.body_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgHttpResponse::release_body() {
  // @@protoc_insertion_point(field_release:CMsgHttpResponse.body)
  if (!_internal_has_body()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.body_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgHttpResponse::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgHttpResponse.body)
}

// -------------------------------------------------------------------

// CMsgAMFindAccounts

// optional uint32 search_type = 1;
inline bool CMsgAMFindAccounts::_internal_has_search_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAMFindAccounts::has_search_type() const {
  return _internal_has_search_type();
}
inline void CMsgAMFindAccounts::clear_search_type() {
  _impl_.search_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgAMFindAccounts::_internal_search_type() const {
  return _impl_.search_type_;
}
inline uint32_t CMsgAMFindAccounts::search_type() const {
  // @@protoc_insertion_point(field_get:CMsgAMFindAccounts.search_type)
  return _internal_search_type();
}
inline void CMsgAMFindAccounts::_internal_set_search_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.search_type_ = value;
}
inline void CMsgAMFindAccounts::set_search_type(uint32_t value) {
  _internal_set_search_type(value);
  // @@protoc_insertion_point(field_set:CMsgAMFindAccounts.search_type)
}

// optional string search_string = 2;
inline bool CMsgAMFindAccounts::_internal_has_search_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAMFindAccounts::has_search_string() const {
  return _internal_has_search_string();
}
inline void CMsgAMFindAccounts::clear_search_string() {
  _impl_.search_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgAMFindAccounts::search_string() const {
  // @@protoc_insertion_point(field_get:CMsgAMFindAccounts.search_string)
  return _internal_search_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgAMFindAccounts::set_search_string(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.search_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgAMFindAccounts.search_string)
}
inline std::string* CMsgAMFindAccounts::mutable_search_string() {
  std::string* _s = _internal_mutable_search_string();
  // @@protoc_insertion_point(field_mutable:CMsgAMFindAccounts.search_string)
  return _s;
}
inline const std::string& CMsgAMFindAccounts::_internal_search_string() const {
  return _impl_.search_string_.Get();
}
inline void CMsgAMFindAccounts::_internal_set_search_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.search_string_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgAMFindAccounts::_internal_mutable_search_string() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.search_string_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgAMFindAccounts::release_search_string() {
  // @@protoc_insertion_point(field_release:CMsgAMFindAccounts.search_string)
  if (!_internal_has_search_string()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.search_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.search_string_.IsDefault()) {
    _impl_.search_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgAMFindAccounts::set_allocated_search_string(std::string* search_string) {
  if (search_string != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.search_string_.SetAllocated(search_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.search_string_.IsDefault()) {
    _impl_.search_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgAMFindAccounts.search_string)
}

// -------------------------------------------------------------------

// CMsgAMFindAccountsResponse

// repeated fixed64 steam_id = 1;
inline int CMsgAMFindAccountsResponse::_internal_steam_id_size() const {
  return _impl_.steam_id_.size();
}
inline int CMsgAMFindAccountsResponse::steam_id_size() const {
  return _internal_steam_id_size();
}
inline void CMsgAMFindAccountsResponse::clear_steam_id() {
  _impl_.steam_id_.Clear();
}
inline uint64_t CMsgAMFindAccountsResponse::_internal_steam_id(int index) const {
  return _impl_.steam_id_.Get(index);
}
inline uint64_t CMsgAMFindAccountsResponse::steam_id(int index) const {
  // @@protoc_insertion_point(field_get:CMsgAMFindAccountsResponse.steam_id)
  return _internal_steam_id(index);
}
inline void CMsgAMFindAccountsResponse::set_steam_id(int index, uint64_t value) {
  _impl_.steam_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgAMFindAccountsResponse.steam_id)
}
inline void CMsgAMFindAccountsResponse::_internal_add_steam_id(uint64_t value) {
  _impl_.steam_id_.Add(value);
}
inline void CMsgAMFindAccountsResponse::add_steam_id(uint64_t value) {
  _internal_add_steam_id(value);
  // @@protoc_insertion_point(field_add:CMsgAMFindAccountsResponse.steam_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgAMFindAccountsResponse::_internal_steam_id() const {
  return _impl_.steam_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgAMFindAccountsResponse::steam_id() const {
  // @@protoc_insertion_point(field_list:CMsgAMFindAccountsResponse.steam_id)
  return _internal_steam_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgAMFindAccountsResponse::_internal_mutable_steam_id() {
  return &_impl_.steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgAMFindAccountsResponse::mutable_steam_id() {
  // @@protoc_insertion_point(field_mutable_list:CMsgAMFindAccountsResponse.steam_id)
  return _internal_mutable_steam_id();
}

// -------------------------------------------------------------------

// CMsgNotifyWatchdog

// optional uint32 source = 1;
inline bool CMsgNotifyWatchdog::_internal_has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgNotifyWatchdog::has_source() const {
  return _internal_has_source();
}
inline void CMsgNotifyWatchdog::clear_source() {
  _impl_.source_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgNotifyWatchdog::_internal_source() const {
  return _impl_.source_;
}
inline uint32_t CMsgNotifyWatchdog::source() const {
  // @@protoc_insertion_point(field_get:CMsgNotifyWatchdog.source)
  return _internal_source();
}
inline void CMsgNotifyWatchdog::_internal_set_source(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.source_ = value;
}
inline void CMsgNotifyWatchdog::set_source(uint32_t value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:CMsgNotifyWatchdog.source)
}

// optional uint32 alert_type = 2;
inline bool CMsgNotifyWatchdog::_internal_has_alert_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgNotifyWatchdog::has_alert_type() const {
  return _internal_has_alert_type();
}
inline void CMsgNotifyWatchdog::clear_alert_type() {
  _impl_.alert_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgNotifyWatchdog::_internal_alert_type() const {
  return _impl_.alert_type_;
}
inline uint32_t CMsgNotifyWatchdog::alert_type() const {
  // @@protoc_insertion_point(field_get:CMsgNotifyWatchdog.alert_type)
  return _internal_alert_type();
}
inline void CMsgNotifyWatchdog::_internal_set_alert_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.alert_type_ = value;
}
inline void CMsgNotifyWatchdog::set_alert_type(uint32_t value) {
  _internal_set_alert_type(value);
  // @@protoc_insertion_point(field_set:CMsgNotifyWatchdog.alert_type)
}

// optional bool critical = 4;
inline bool CMsgNotifyWatchdog::_internal_has_critical() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgNotifyWatchdog::has_critical() const {
  return _internal_has_critical();
}
inline void CMsgNotifyWatchdog::clear_critical() {
  _impl_.critical_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgNotifyWatchdog::_internal_critical() const {
  return _impl_.critical_;
}
inline bool CMsgNotifyWatchdog::critical() const {
  // @@protoc_insertion_point(field_get:CMsgNotifyWatchdog.critical)
  return _internal_critical();
}
inline void CMsgNotifyWatchdog::_internal_set_critical(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.critical_ = value;
}
inline void CMsgNotifyWatchdog::set_critical(bool value) {
  _internal_set_critical(value);
  // @@protoc_insertion_point(field_set:CMsgNotifyWatchdog.critical)
}

// optional uint32 time = 5;
inline bool CMsgNotifyWatchdog::_internal_has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgNotifyWatchdog::has_time() const {
  return _internal_has_time();
}
inline void CMsgNotifyWatchdog::clear_time() {
  _impl_.time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgNotifyWatchdog::_internal_time() const {
  return _impl_.time_;
}
inline uint32_t CMsgNotifyWatchdog::time() const {
  // @@protoc_insertion_point(field_get:CMsgNotifyWatchdog.time)
  return _internal_time();
}
inline void CMsgNotifyWatchdog::_internal_set_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.time_ = value;
}
inline void CMsgNotifyWatchdog::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:CMsgNotifyWatchdog.time)
}

// optional uint32 appid = 6;
inline bool CMsgNotifyWatchdog::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgNotifyWatchdog::has_appid() const {
  return _internal_has_appid();
}
inline void CMsgNotifyWatchdog::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgNotifyWatchdog::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CMsgNotifyWatchdog::appid() const {
  // @@protoc_insertion_point(field_get:CMsgNotifyWatchdog.appid)
  return _internal_appid();
}
inline void CMsgNotifyWatchdog::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.appid_ = value;
}
inline void CMsgNotifyWatchdog::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CMsgNotifyWatchdog.appid)
}

// optional string text = 7;
inline bool CMsgNotifyWatchdog::_internal_has_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgNotifyWatchdog::has_text() const {
  return _internal_has_text();
}
inline void CMsgNotifyWatchdog::clear_text() {
  _impl_.text_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgNotifyWatchdog::text() const {
  // @@protoc_insertion_point(field_get:CMsgNotifyWatchdog.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgNotifyWatchdog::set_text(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgNotifyWatchdog.text)
}
inline std::string* CMsgNotifyWatchdog::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:CMsgNotifyWatchdog.text)
  return _s;
}
inline const std::string& CMsgNotifyWatchdog::_internal_text() const {
  return _impl_.text_.Get();
}
inline void CMsgNotifyWatchdog::_internal_set_text(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgNotifyWatchdog::_internal_mutable_text() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgNotifyWatchdog::release_text() {
  // @@protoc_insertion_point(field_release:CMsgNotifyWatchdog.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.text_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgNotifyWatchdog::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgNotifyWatchdog.text)
}

// optional string recipient = 12;
inline bool CMsgNotifyWatchdog::_internal_has_recipient() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgNotifyWatchdog::has_recipient() const {
  return _internal_has_recipient();
}
inline void CMsgNotifyWatchdog::clear_recipient() {
  _impl_.recipient_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgNotifyWatchdog::recipient() const {
  // @@protoc_insertion_point(field_get:CMsgNotifyWatchdog.recipient)
  return _internal_recipient();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgNotifyWatchdog::set_recipient(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.recipient_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgNotifyWatchdog.recipient)
}
inline std::string* CMsgNotifyWatchdog::mutable_recipient() {
  std::string* _s = _internal_mutable_recipient();
  // @@protoc_insertion_point(field_mutable:CMsgNotifyWatchdog.recipient)
  return _s;
}
inline const std::string& CMsgNotifyWatchdog::_internal_recipient() const {
  return _impl_.recipient_.Get();
}
inline void CMsgNotifyWatchdog::_internal_set_recipient(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.recipient_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgNotifyWatchdog::_internal_mutable_recipient() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.recipient_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgNotifyWatchdog::release_recipient() {
  // @@protoc_insertion_point(field_release:CMsgNotifyWatchdog.recipient)
  if (!_internal_has_recipient()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.recipient_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recipient_.IsDefault()) {
    _impl_.recipient_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgNotifyWatchdog::set_allocated_recipient(std::string* recipient) {
  if (recipient != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.recipient_.SetAllocated(recipient, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recipient_.IsDefault()) {
    _impl_.recipient_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgNotifyWatchdog.recipient)
}

// -------------------------------------------------------------------

// CMsgAMGetLicenses

// optional fixed64 steamid = 1;
inline bool CMsgAMGetLicenses::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAMGetLicenses::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgAMGetLicenses::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgAMGetLicenses::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CMsgAMGetLicenses::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgAMGetLicenses.steamid)
  return _internal_steamid();
}
inline void CMsgAMGetLicenses::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steamid_ = value;
}
inline void CMsgAMGetLicenses::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgAMGetLicenses.steamid)
}

// -------------------------------------------------------------------

// CMsgPackageLicense

// optional uint32 package_id = 1;
inline bool CMsgPackageLicense::_internal_has_package_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPackageLicense::has_package_id() const {
  return _internal_has_package_id();
}
inline void CMsgPackageLicense::clear_package_id() {
  _impl_.package_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgPackageLicense::_internal_package_id() const {
  return _impl_.package_id_;
}
inline uint32_t CMsgPackageLicense::package_id() const {
  // @@protoc_insertion_point(field_get:CMsgPackageLicense.package_id)
  return _internal_package_id();
}
inline void CMsgPackageLicense::_internal_set_package_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.package_id_ = value;
}
inline void CMsgPackageLicense::set_package_id(uint32_t value) {
  _internal_set_package_id(value);
  // @@protoc_insertion_point(field_set:CMsgPackageLicense.package_id)
}

// optional uint32 time_created = 2;
inline bool CMsgPackageLicense::_internal_has_time_created() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPackageLicense::has_time_created() const {
  return _internal_has_time_created();
}
inline void CMsgPackageLicense::clear_time_created() {
  _impl_.time_created_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgPackageLicense::_internal_time_created() const {
  return _impl_.time_created_;
}
inline uint32_t CMsgPackageLicense::time_created() const {
  // @@protoc_insertion_point(field_get:CMsgPackageLicense.time_created)
  return _internal_time_created();
}
inline void CMsgPackageLicense::_internal_set_time_created(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.time_created_ = value;
}
inline void CMsgPackageLicense::set_time_created(uint32_t value) {
  _internal_set_time_created(value);
  // @@protoc_insertion_point(field_set:CMsgPackageLicense.time_created)
}

// optional uint32 owner_id = 3;
inline bool CMsgPackageLicense::_internal_has_owner_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPackageLicense::has_owner_id() const {
  return _internal_has_owner_id();
}
inline void CMsgPackageLicense::clear_owner_id() {
  _impl_.owner_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgPackageLicense::_internal_owner_id() const {
  return _impl_.owner_id_;
}
inline uint32_t CMsgPackageLicense::owner_id() const {
  // @@protoc_insertion_point(field_get:CMsgPackageLicense.owner_id)
  return _internal_owner_id();
}
inline void CMsgPackageLicense::_internal_set_owner_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.owner_id_ = value;
}
inline void CMsgPackageLicense::set_owner_id(uint32_t value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:CMsgPackageLicense.owner_id)
}

// -------------------------------------------------------------------

// CMsgAMGetLicensesResponse

// repeated .CMsgPackageLicense license = 1;
inline int CMsgAMGetLicensesResponse::_internal_license_size() const {
  return _impl_.license_.size();
}
inline int CMsgAMGetLicensesResponse::license_size() const {
  return _internal_license_size();
}
inline void CMsgAMGetLicensesResponse::clear_license() {
  _impl_.license_.Clear();
}
inline ::CMsgPackageLicense* CMsgAMGetLicensesResponse::mutable_license(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgAMGetLicensesResponse.license)
  return _impl_.license_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPackageLicense >*
CMsgAMGetLicensesResponse::mutable_license() {
  // @@protoc_insertion_point(field_mutable_list:CMsgAMGetLicensesResponse.license)
  return &_impl_.license_;
}
inline const ::CMsgPackageLicense& CMsgAMGetLicensesResponse::_internal_license(int index) const {
  return _impl_.license_.Get(index);
}
inline const ::CMsgPackageLicense& CMsgAMGetLicensesResponse::license(int index) const {
  // @@protoc_insertion_point(field_get:CMsgAMGetLicensesResponse.license)
  return _internal_license(index);
}
inline ::CMsgPackageLicense* CMsgAMGetLicensesResponse::_internal_add_license() {
  return _impl_.license_.Add();
}
inline ::CMsgPackageLicense* CMsgAMGetLicensesResponse::add_license() {
  ::CMsgPackageLicense* _add = _internal_add_license();
  // @@protoc_insertion_point(field_add:CMsgAMGetLicensesResponse.license)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPackageLicense >&
CMsgAMGetLicensesResponse::license() const {
  // @@protoc_insertion_point(field_list:CMsgAMGetLicensesResponse.license)
  return _impl_.license_;
}

// optional uint32 result = 2;
inline bool CMsgAMGetLicensesResponse::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAMGetLicensesResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgAMGetLicensesResponse::clear_result() {
  _impl_.result_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgAMGetLicensesResponse::_internal_result() const {
  return _impl_.result_;
}
inline uint32_t CMsgAMGetLicensesResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgAMGetLicensesResponse.result)
  return _internal_result();
}
inline void CMsgAMGetLicensesResponse::_internal_set_result(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.result_ = value;
}
inline void CMsgAMGetLicensesResponse::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgAMGetLicensesResponse.result)
}

// -------------------------------------------------------------------

// CMsgAMGetUserGameStats

// optional fixed64 steam_id = 1;
inline bool CMsgAMGetUserGameStats::_internal_has_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAMGetUserGameStats::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgAMGetUserGameStats::clear_steam_id() {
  _impl_.steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgAMGetUserGameStats::_internal_steam_id() const {
  return _impl_.steam_id_;
}
inline uint64_t CMsgAMGetUserGameStats::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgAMGetUserGameStats.steam_id)
  return _internal_steam_id();
}
inline void CMsgAMGetUserGameStats::_internal_set_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steam_id_ = value;
}
inline void CMsgAMGetUserGameStats::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgAMGetUserGameStats.steam_id)
}

// optional fixed64 game_id = 2;
inline bool CMsgAMGetUserGameStats::_internal_has_game_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAMGetUserGameStats::has_game_id() const {
  return _internal_has_game_id();
}
inline void CMsgAMGetUserGameStats::clear_game_id() {
  _impl_.game_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgAMGetUserGameStats::_internal_game_id() const {
  return _impl_.game_id_;
}
inline uint64_t CMsgAMGetUserGameStats::game_id() const {
  // @@protoc_insertion_point(field_get:CMsgAMGetUserGameStats.game_id)
  return _internal_game_id();
}
inline void CMsgAMGetUserGameStats::_internal_set_game_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.game_id_ = value;
}
inline void CMsgAMGetUserGameStats::set_game_id(uint64_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CMsgAMGetUserGameStats.game_id)
}

// repeated uint32 stats = 3;
inline int CMsgAMGetUserGameStats::_internal_stats_size() const {
  return _impl_.stats_.size();
}
inline int CMsgAMGetUserGameStats::stats_size() const {
  return _internal_stats_size();
}
inline void CMsgAMGetUserGameStats::clear_stats() {
  _impl_.stats_.Clear();
}
inline uint32_t CMsgAMGetUserGameStats::_internal_stats(int index) const {
  return _impl_.stats_.Get(index);
}
inline uint32_t CMsgAMGetUserGameStats::stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgAMGetUserGameStats.stats)
  return _internal_stats(index);
}
inline void CMsgAMGetUserGameStats::set_stats(int index, uint32_t value) {
  _impl_.stats_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgAMGetUserGameStats.stats)
}
inline void CMsgAMGetUserGameStats::_internal_add_stats(uint32_t value) {
  _impl_.stats_.Add(value);
}
inline void CMsgAMGetUserGameStats::add_stats(uint32_t value) {
  _internal_add_stats(value);
  // @@protoc_insertion_point(field_add:CMsgAMGetUserGameStats.stats)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgAMGetUserGameStats::_internal_stats() const {
  return _impl_.stats_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgAMGetUserGameStats::stats() const {
  // @@protoc_insertion_point(field_list:CMsgAMGetUserGameStats.stats)
  return _internal_stats();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgAMGetUserGameStats::_internal_mutable_stats() {
  return &_impl_.stats_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgAMGetUserGameStats::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgAMGetUserGameStats.stats)
  return _internal_mutable_stats();
}

// -------------------------------------------------------------------

// CMsgAMGetUserGameStatsResponse_Stats

// optional uint32 stat_id = 1;
inline bool CMsgAMGetUserGameStatsResponse_Stats::_internal_has_stat_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAMGetUserGameStatsResponse_Stats::has_stat_id() const {
  return _internal_has_stat_id();
}
inline void CMsgAMGetUserGameStatsResponse_Stats::clear_stat_id() {
  _impl_.stat_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgAMGetUserGameStatsResponse_Stats::_internal_stat_id() const {
  return _impl_.stat_id_;
}
inline uint32_t CMsgAMGetUserGameStatsResponse_Stats::stat_id() const {
  // @@protoc_insertion_point(field_get:CMsgAMGetUserGameStatsResponse.Stats.stat_id)
  return _internal_stat_id();
}
inline void CMsgAMGetUserGameStatsResponse_Stats::_internal_set_stat_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stat_id_ = value;
}
inline void CMsgAMGetUserGameStatsResponse_Stats::set_stat_id(uint32_t value) {
  _internal_set_stat_id(value);
  // @@protoc_insertion_point(field_set:CMsgAMGetUserGameStatsResponse.Stats.stat_id)
}

// optional uint32 stat_value = 2;
inline bool CMsgAMGetUserGameStatsResponse_Stats::_internal_has_stat_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAMGetUserGameStatsResponse_Stats::has_stat_value() const {
  return _internal_has_stat_value();
}
inline void CMsgAMGetUserGameStatsResponse_Stats::clear_stat_value() {
  _impl_.stat_value_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgAMGetUserGameStatsResponse_Stats::_internal_stat_value() const {
  return _impl_.stat_value_;
}
inline uint32_t CMsgAMGetUserGameStatsResponse_Stats::stat_value() const {
  // @@protoc_insertion_point(field_get:CMsgAMGetUserGameStatsResponse.Stats.stat_value)
  return _internal_stat_value();
}
inline void CMsgAMGetUserGameStatsResponse_Stats::_internal_set_stat_value(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.stat_value_ = value;
}
inline void CMsgAMGetUserGameStatsResponse_Stats::set_stat_value(uint32_t value) {
  _internal_set_stat_value(value);
  // @@protoc_insertion_point(field_set:CMsgAMGetUserGameStatsResponse.Stats.stat_value)
}

// -------------------------------------------------------------------

// CMsgAMGetUserGameStatsResponse_Achievement_Blocks

// optional uint32 achievement_id = 1;
inline bool CMsgAMGetUserGameStatsResponse_Achievement_Blocks::_internal_has_achievement_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAMGetUserGameStatsResponse_Achievement_Blocks::has_achievement_id() const {
  return _internal_has_achievement_id();
}
inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::clear_achievement_id() {
  _impl_.achievement_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgAMGetUserGameStatsResponse_Achievement_Blocks::_internal_achievement_id() const {
  return _impl_.achievement_id_;
}
inline uint32_t CMsgAMGetUserGameStatsResponse_Achievement_Blocks::achievement_id() const {
  // @@protoc_insertion_point(field_get:CMsgAMGetUserGameStatsResponse.Achievement_Blocks.achievement_id)
  return _internal_achievement_id();
}
inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::_internal_set_achievement_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.achievement_id_ = value;
}
inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::set_achievement_id(uint32_t value) {
  _internal_set_achievement_id(value);
  // @@protoc_insertion_point(field_set:CMsgAMGetUserGameStatsResponse.Achievement_Blocks.achievement_id)
}

// optional uint32 achievement_bit_id = 2;
inline bool CMsgAMGetUserGameStatsResponse_Achievement_Blocks::_internal_has_achievement_bit_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAMGetUserGameStatsResponse_Achievement_Blocks::has_achievement_bit_id() const {
  return _internal_has_achievement_bit_id();
}
inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::clear_achievement_bit_id() {
  _impl_.achievement_bit_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgAMGetUserGameStatsResponse_Achievement_Blocks::_internal_achievement_bit_id() const {
  return _impl_.achievement_bit_id_;
}
inline uint32_t CMsgAMGetUserGameStatsResponse_Achievement_Blocks::achievement_bit_id() const {
  // @@protoc_insertion_point(field_get:CMsgAMGetUserGameStatsResponse.Achievement_Blocks.achievement_bit_id)
  return _internal_achievement_bit_id();
}
inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::_internal_set_achievement_bit_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.achievement_bit_id_ = value;
}
inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::set_achievement_bit_id(uint32_t value) {
  _internal_set_achievement_bit_id(value);
  // @@protoc_insertion_point(field_set:CMsgAMGetUserGameStatsResponse.Achievement_Blocks.achievement_bit_id)
}

// optional fixed32 unlock_time = 3;
inline bool CMsgAMGetUserGameStatsResponse_Achievement_Blocks::_internal_has_unlock_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgAMGetUserGameStatsResponse_Achievement_Blocks::has_unlock_time() const {
  return _internal_has_unlock_time();
}
inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::clear_unlock_time() {
  _impl_.unlock_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgAMGetUserGameStatsResponse_Achievement_Blocks::_internal_unlock_time() const {
  return _impl_.unlock_time_;
}
inline uint32_t CMsgAMGetUserGameStatsResponse_Achievement_Blocks::unlock_time() const {
  // @@protoc_insertion_point(field_get:CMsgAMGetUserGameStatsResponse.Achievement_Blocks.unlock_time)
  return _internal_unlock_time();
}
inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::_internal_set_unlock_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.unlock_time_ = value;
}
inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::set_unlock_time(uint32_t value) {
  _internal_set_unlock_time(value);
  // @@protoc_insertion_point(field_set:CMsgAMGetUserGameStatsResponse.Achievement_Blocks.unlock_time)
}

// -------------------------------------------------------------------

// CMsgAMGetUserGameStatsResponse

// optional fixed64 steam_id = 1;
inline bool CMsgAMGetUserGameStatsResponse::_internal_has_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAMGetUserGameStatsResponse::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgAMGetUserGameStatsResponse::clear_steam_id() {
  _impl_.steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgAMGetUserGameStatsResponse::_internal_steam_id() const {
  return _impl_.steam_id_;
}
inline uint64_t CMsgAMGetUserGameStatsResponse::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgAMGetUserGameStatsResponse.steam_id)
  return _internal_steam_id();
}
inline void CMsgAMGetUserGameStatsResponse::_internal_set_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steam_id_ = value;
}
inline void CMsgAMGetUserGameStatsResponse::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgAMGetUserGameStatsResponse.steam_id)
}

// optional fixed64 game_id = 2;
inline bool CMsgAMGetUserGameStatsResponse::_internal_has_game_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAMGetUserGameStatsResponse::has_game_id() const {
  return _internal_has_game_id();
}
inline void CMsgAMGetUserGameStatsResponse::clear_game_id() {
  _impl_.game_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgAMGetUserGameStatsResponse::_internal_game_id() const {
  return _impl_.game_id_;
}
inline uint64_t CMsgAMGetUserGameStatsResponse::game_id() const {
  // @@protoc_insertion_point(field_get:CMsgAMGetUserGameStatsResponse.game_id)
  return _internal_game_id();
}
inline void CMsgAMGetUserGameStatsResponse::_internal_set_game_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.game_id_ = value;
}
inline void CMsgAMGetUserGameStatsResponse::set_game_id(uint64_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CMsgAMGetUserGameStatsResponse.game_id)
}

// optional int32 eresult = 3 [default = 2];
inline bool CMsgAMGetUserGameStatsResponse::_internal_has_eresult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgAMGetUserGameStatsResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgAMGetUserGameStatsResponse::clear_eresult() {
  _impl_.eresult_ = 2;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgAMGetUserGameStatsResponse::_internal_eresult() const {
  return _impl_.eresult_;
}
inline int32_t CMsgAMGetUserGameStatsResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgAMGetUserGameStatsResponse.eresult)
  return _internal_eresult();
}
inline void CMsgAMGetUserGameStatsResponse::_internal_set_eresult(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.eresult_ = value;
}
inline void CMsgAMGetUserGameStatsResponse::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgAMGetUserGameStatsResponse.eresult)
}

// repeated .CMsgAMGetUserGameStatsResponse.Stats stats = 4;
inline int CMsgAMGetUserGameStatsResponse::_internal_stats_size() const {
  return _impl_.stats_.size();
}
inline int CMsgAMGetUserGameStatsResponse::stats_size() const {
  return _internal_stats_size();
}
inline void CMsgAMGetUserGameStatsResponse::clear_stats() {
  _impl_.stats_.Clear();
}
inline ::CMsgAMGetUserGameStatsResponse_Stats* CMsgAMGetUserGameStatsResponse::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgAMGetUserGameStatsResponse.stats)
  return _impl_.stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAMGetUserGameStatsResponse_Stats >*
CMsgAMGetUserGameStatsResponse::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgAMGetUserGameStatsResponse.stats)
  return &_impl_.stats_;
}
inline const ::CMsgAMGetUserGameStatsResponse_Stats& CMsgAMGetUserGameStatsResponse::_internal_stats(int index) const {
  return _impl_.stats_.Get(index);
}
inline const ::CMsgAMGetUserGameStatsResponse_Stats& CMsgAMGetUserGameStatsResponse::stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgAMGetUserGameStatsResponse.stats)
  return _internal_stats(index);
}
inline ::CMsgAMGetUserGameStatsResponse_Stats* CMsgAMGetUserGameStatsResponse::_internal_add_stats() {
  return _impl_.stats_.Add();
}
inline ::CMsgAMGetUserGameStatsResponse_Stats* CMsgAMGetUserGameStatsResponse::add_stats() {
  ::CMsgAMGetUserGameStatsResponse_Stats* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:CMsgAMGetUserGameStatsResponse.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAMGetUserGameStatsResponse_Stats >&
CMsgAMGetUserGameStatsResponse::stats() const {
  // @@protoc_insertion_point(field_list:CMsgAMGetUserGameStatsResponse.stats)
  return _impl_.stats_;
}

// repeated .CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
inline int CMsgAMGetUserGameStatsResponse::_internal_achievement_blocks_size() const {
  return _impl_.achievement_blocks_.size();
}
inline int CMsgAMGetUserGameStatsResponse::achievement_blocks_size() const {
  return _internal_achievement_blocks_size();
}
inline void CMsgAMGetUserGameStatsResponse::clear_achievement_blocks() {
  _impl_.achievement_blocks_.Clear();
}
inline ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks* CMsgAMGetUserGameStatsResponse::mutable_achievement_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgAMGetUserGameStatsResponse.achievement_blocks)
  return _impl_.achievement_blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks >*
CMsgAMGetUserGameStatsResponse::mutable_achievement_blocks() {
  // @@protoc_insertion_point(field_mutable_list:CMsgAMGetUserGameStatsResponse.achievement_blocks)
  return &_impl_.achievement_blocks_;
}
inline const ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks& CMsgAMGetUserGameStatsResponse::_internal_achievement_blocks(int index) const {
  return _impl_.achievement_blocks_.Get(index);
}
inline const ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks& CMsgAMGetUserGameStatsResponse::achievement_blocks(int index) const {
  // @@protoc_insertion_point(field_get:CMsgAMGetUserGameStatsResponse.achievement_blocks)
  return _internal_achievement_blocks(index);
}
inline ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks* CMsgAMGetUserGameStatsResponse::_internal_add_achievement_blocks() {
  return _impl_.achievement_blocks_.Add();
}
inline ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks* CMsgAMGetUserGameStatsResponse::add_achievement_blocks() {
  ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks* _add = _internal_add_achievement_blocks();
  // @@protoc_insertion_point(field_add:CMsgAMGetUserGameStatsResponse.achievement_blocks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks >&
CMsgAMGetUserGameStatsResponse::achievement_blocks() const {
  // @@protoc_insertion_point(field_list:CMsgAMGetUserGameStatsResponse.achievement_blocks)
  return _impl_.achievement_blocks_;
}

// -------------------------------------------------------------------

// CMsgGCGetCommandList

// optional uint32 app_id = 1;
inline bool CMsgGCGetCommandList::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCGetCommandList::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgGCGetCommandList::clear_app_id() {
  _impl_.app_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCGetCommandList::_internal_app_id() const {
  return _impl_.app_id_;
}
inline uint32_t CMsgGCGetCommandList::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetCommandList.app_id)
  return _internal_app_id();
}
inline void CMsgGCGetCommandList::_internal_set_app_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.app_id_ = value;
}
inline void CMsgGCGetCommandList::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCGetCommandList.app_id)
}

// optional string command_prefix = 2;
inline bool CMsgGCGetCommandList::_internal_has_command_prefix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCGetCommandList::has_command_prefix() const {
  return _internal_has_command_prefix();
}
inline void CMsgGCGetCommandList::clear_command_prefix() {
  _impl_.command_prefix_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCGetCommandList::command_prefix() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetCommandList.command_prefix)
  return _internal_command_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCGetCommandList::set_command_prefix(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.command_prefix_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCGetCommandList.command_prefix)
}
inline std::string* CMsgGCGetCommandList::mutable_command_prefix() {
  std::string* _s = _internal_mutable_command_prefix();
  // @@protoc_insertion_point(field_mutable:CMsgGCGetCommandList.command_prefix)
  return _s;
}
inline const std::string& CMsgGCGetCommandList::_internal_command_prefix() const {
  return _impl_.command_prefix_.Get();
}
inline void CMsgGCGetCommandList::_internal_set_command_prefix(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.command_prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGCGetCommandList::_internal_mutable_command_prefix() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.command_prefix_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGCGetCommandList::release_command_prefix() {
  // @@protoc_insertion_point(field_release:CMsgGCGetCommandList.command_prefix)
  if (!_internal_has_command_prefix()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.command_prefix_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_prefix_.IsDefault()) {
    _impl_.command_prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGCGetCommandList::set_allocated_command_prefix(std::string* command_prefix) {
  if (command_prefix != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.command_prefix_.SetAllocated(command_prefix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_prefix_.IsDefault()) {
    _impl_.command_prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGCGetCommandList.command_prefix)
}

// -------------------------------------------------------------------

// CMsgGCGetCommandListResponse

// repeated string command_name = 1;
inline int CMsgGCGetCommandListResponse::_internal_command_name_size() const {
  return _impl_.command_name_.size();
}
inline int CMsgGCGetCommandListResponse::command_name_size() const {
  return _internal_command_name_size();
}
inline void CMsgGCGetCommandListResponse::clear_command_name() {
  _impl_.command_name_.Clear();
}
inline std::string* CMsgGCGetCommandListResponse::add_command_name() {
  std::string* _s = _internal_add_command_name();
  // @@protoc_insertion_point(field_add_mutable:CMsgGCGetCommandListResponse.command_name)
  return _s;
}
inline const std::string& CMsgGCGetCommandListResponse::_internal_command_name(int index) const {
  return _impl_.command_name_.Get(index);
}
inline const std::string& CMsgGCGetCommandListResponse::command_name(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCGetCommandListResponse.command_name)
  return _internal_command_name(index);
}
inline std::string* CMsgGCGetCommandListResponse::mutable_command_name(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCGetCommandListResponse.command_name)
  return _impl_.command_name_.Mutable(index);
}
inline void CMsgGCGetCommandListResponse::set_command_name(int index, const std::string& value) {
  _impl_.command_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CMsgGCGetCommandListResponse.command_name)
}
inline void CMsgGCGetCommandListResponse::set_command_name(int index, std::string&& value) {
  _impl_.command_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CMsgGCGetCommandListResponse.command_name)
}
inline void CMsgGCGetCommandListResponse::set_command_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.command_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgGCGetCommandListResponse.command_name)
}
inline void CMsgGCGetCommandListResponse::set_command_name(int index, const char* value, size_t size) {
  _impl_.command_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgGCGetCommandListResponse.command_name)
}
inline std::string* CMsgGCGetCommandListResponse::_internal_add_command_name() {
  return _impl_.command_name_.Add();
}
inline void CMsgGCGetCommandListResponse::add_command_name(const std::string& value) {
  _impl_.command_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgGCGetCommandListResponse.command_name)
}
inline void CMsgGCGetCommandListResponse::add_command_name(std::string&& value) {
  _impl_.command_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgGCGetCommandListResponse.command_name)
}
inline void CMsgGCGetCommandListResponse::add_command_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.command_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgGCGetCommandListResponse.command_name)
}
inline void CMsgGCGetCommandListResponse::add_command_name(const char* value, size_t size) {
  _impl_.command_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgGCGetCommandListResponse.command_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgGCGetCommandListResponse::command_name() const {
  // @@protoc_insertion_point(field_list:CMsgGCGetCommandListResponse.command_name)
  return _impl_.command_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgGCGetCommandListResponse::mutable_command_name() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCGetCommandListResponse.command_name)
  return &_impl_.command_name_;
}

// -------------------------------------------------------------------

// CGCMsgMemCachedGet

// repeated string keys = 1;
inline int CGCMsgMemCachedGet::_internal_keys_size() const {
  return _impl_.keys_.size();
}
inline int CGCMsgMemCachedGet::keys_size() const {
  return _internal_keys_size();
}
inline void CGCMsgMemCachedGet::clear_keys() {
  _impl_.keys_.Clear();
}
inline std::string* CGCMsgMemCachedGet::add_keys() {
  std::string* _s = _internal_add_keys();
  // @@protoc_insertion_point(field_add_mutable:CGCMsgMemCachedGet.keys)
  return _s;
}
inline const std::string& CGCMsgMemCachedGet::_internal_keys(int index) const {
  return _impl_.keys_.Get(index);
}
inline const std::string& CGCMsgMemCachedGet::keys(int index) const {
  // @@protoc_insertion_point(field_get:CGCMsgMemCachedGet.keys)
  return _internal_keys(index);
}
inline std::string* CGCMsgMemCachedGet::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:CGCMsgMemCachedGet.keys)
  return _impl_.keys_.Mutable(index);
}
inline void CGCMsgMemCachedGet::set_keys(int index, const std::string& value) {
  _impl_.keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CGCMsgMemCachedGet.keys)
}
inline void CGCMsgMemCachedGet::set_keys(int index, std::string&& value) {
  _impl_.keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CGCMsgMemCachedGet.keys)
}
inline void CGCMsgMemCachedGet::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CGCMsgMemCachedGet.keys)
}
inline void CGCMsgMemCachedGet::set_keys(int index, const char* value, size_t size) {
  _impl_.keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CGCMsgMemCachedGet.keys)
}
inline std::string* CGCMsgMemCachedGet::_internal_add_keys() {
  return _impl_.keys_.Add();
}
inline void CGCMsgMemCachedGet::add_keys(const std::string& value) {
  _impl_.keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CGCMsgMemCachedGet.keys)
}
inline void CGCMsgMemCachedGet::add_keys(std::string&& value) {
  _impl_.keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CGCMsgMemCachedGet.keys)
}
inline void CGCMsgMemCachedGet::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CGCMsgMemCachedGet.keys)
}
inline void CGCMsgMemCachedGet::add_keys(const char* value, size_t size) {
  _impl_.keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CGCMsgMemCachedGet.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CGCMsgMemCachedGet::keys() const {
  // @@protoc_insertion_point(field_list:CGCMsgMemCachedGet.keys)
  return _impl_.keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CGCMsgMemCachedGet::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:CGCMsgMemCachedGet.keys)
  return &_impl_.keys_;
}

// -------------------------------------------------------------------

// CGCMsgMemCachedGetResponse_ValueTag

// optional bool found = 1;
inline bool CGCMsgMemCachedGetResponse_ValueTag::_internal_has_found() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGCMsgMemCachedGetResponse_ValueTag::has_found() const {
  return _internal_has_found();
}
inline void CGCMsgMemCachedGetResponse_ValueTag::clear_found() {
  _impl_.found_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CGCMsgMemCachedGetResponse_ValueTag::_internal_found() const {
  return _impl_.found_;
}
inline bool CGCMsgMemCachedGetResponse_ValueTag::found() const {
  // @@protoc_insertion_point(field_get:CGCMsgMemCachedGetResponse.ValueTag.found)
  return _internal_found();
}
inline void CGCMsgMemCachedGetResponse_ValueTag::_internal_set_found(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.found_ = value;
}
inline void CGCMsgMemCachedGetResponse_ValueTag::set_found(bool value) {
  _internal_set_found(value);
  // @@protoc_insertion_point(field_set:CGCMsgMemCachedGetResponse.ValueTag.found)
}

// optional bytes value = 2;
inline bool CGCMsgMemCachedGetResponse_ValueTag::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCMsgMemCachedGetResponse_ValueTag::has_value() const {
  return _internal_has_value();
}
inline void CGCMsgMemCachedGetResponse_ValueTag::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGCMsgMemCachedGetResponse_ValueTag::value() const {
  // @@protoc_insertion_point(field_get:CGCMsgMemCachedGetResponse.ValueTag.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCMsgMemCachedGetResponse_ValueTag::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCMsgMemCachedGetResponse.ValueTag.value)
}
inline std::string* CGCMsgMemCachedGetResponse_ValueTag::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CGCMsgMemCachedGetResponse.ValueTag.value)
  return _s;
}
inline const std::string& CGCMsgMemCachedGetResponse_ValueTag::_internal_value() const {
  return _impl_.value_.Get();
}
inline void CGCMsgMemCachedGetResponse_ValueTag::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* CGCMsgMemCachedGetResponse_ValueTag::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* CGCMsgMemCachedGetResponse_ValueTag::release_value() {
  // @@protoc_insertion_point(field_release:CGCMsgMemCachedGetResponse.ValueTag.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGCMsgMemCachedGetResponse_ValueTag::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGCMsgMemCachedGetResponse.ValueTag.value)
}

// -------------------------------------------------------------------

// CGCMsgMemCachedGetResponse

// repeated .CGCMsgMemCachedGetResponse.ValueTag values = 1;
inline int CGCMsgMemCachedGetResponse::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int CGCMsgMemCachedGetResponse::values_size() const {
  return _internal_values_size();
}
inline void CGCMsgMemCachedGetResponse::clear_values() {
  _impl_.values_.Clear();
}
inline ::CGCMsgMemCachedGetResponse_ValueTag* CGCMsgMemCachedGetResponse::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:CGCMsgMemCachedGetResponse.values)
  return _impl_.values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGCMsgMemCachedGetResponse_ValueTag >*
CGCMsgMemCachedGetResponse::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CGCMsgMemCachedGetResponse.values)
  return &_impl_.values_;
}
inline const ::CGCMsgMemCachedGetResponse_ValueTag& CGCMsgMemCachedGetResponse::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline const ::CGCMsgMemCachedGetResponse_ValueTag& CGCMsgMemCachedGetResponse::values(int index) const {
  // @@protoc_insertion_point(field_get:CGCMsgMemCachedGetResponse.values)
  return _internal_values(index);
}
inline ::CGCMsgMemCachedGetResponse_ValueTag* CGCMsgMemCachedGetResponse::_internal_add_values() {
  return _impl_.values_.Add();
}
inline ::CGCMsgMemCachedGetResponse_ValueTag* CGCMsgMemCachedGetResponse::add_values() {
  ::CGCMsgMemCachedGetResponse_ValueTag* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:CGCMsgMemCachedGetResponse.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGCMsgMemCachedGetResponse_ValueTag >&
CGCMsgMemCachedGetResponse::values() const {
  // @@protoc_insertion_point(field_list:CGCMsgMemCachedGetResponse.values)
  return _impl_.values_;
}

// -------------------------------------------------------------------

// CGCMsgMemCachedSet_KeyPair

// optional string name = 1;
inline bool CGCMsgMemCachedSet_KeyPair::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCMsgMemCachedSet_KeyPair::has_name() const {
  return _internal_has_name();
}
inline void CGCMsgMemCachedSet_KeyPair::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGCMsgMemCachedSet_KeyPair::name() const {
  // @@protoc_insertion_point(field_get:CGCMsgMemCachedSet.KeyPair.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCMsgMemCachedSet_KeyPair::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCMsgMemCachedSet.KeyPair.name)
}
inline std::string* CGCMsgMemCachedSet_KeyPair::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CGCMsgMemCachedSet.KeyPair.name)
  return _s;
}
inline const std::string& CGCMsgMemCachedSet_KeyPair::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CGCMsgMemCachedSet_KeyPair::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CGCMsgMemCachedSet_KeyPair::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CGCMsgMemCachedSet_KeyPair::release_name() {
  // @@protoc_insertion_point(field_release:CGCMsgMemCachedSet.KeyPair.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGCMsgMemCachedSet_KeyPair::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGCMsgMemCachedSet.KeyPair.name)
}

// optional bytes value = 2;
inline bool CGCMsgMemCachedSet_KeyPair::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGCMsgMemCachedSet_KeyPair::has_value() const {
  return _internal_has_value();
}
inline void CGCMsgMemCachedSet_KeyPair::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGCMsgMemCachedSet_KeyPair::value() const {
  // @@protoc_insertion_point(field_get:CGCMsgMemCachedSet.KeyPair.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCMsgMemCachedSet_KeyPair::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCMsgMemCachedSet.KeyPair.value)
}
inline std::string* CGCMsgMemCachedSet_KeyPair::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CGCMsgMemCachedSet.KeyPair.value)
  return _s;
}
inline const std::string& CGCMsgMemCachedSet_KeyPair::_internal_value() const {
  return _impl_.value_.Get();
}
inline void CGCMsgMemCachedSet_KeyPair::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* CGCMsgMemCachedSet_KeyPair::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* CGCMsgMemCachedSet_KeyPair::release_value() {
  // @@protoc_insertion_point(field_release:CGCMsgMemCachedSet.KeyPair.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGCMsgMemCachedSet_KeyPair::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGCMsgMemCachedSet.KeyPair.value)
}

// -------------------------------------------------------------------

// CGCMsgMemCachedSet

// repeated .CGCMsgMemCachedSet.KeyPair keys = 1;
inline int CGCMsgMemCachedSet::_internal_keys_size() const {
  return _impl_.keys_.size();
}
inline int CGCMsgMemCachedSet::keys_size() const {
  return _internal_keys_size();
}
inline void CGCMsgMemCachedSet::clear_keys() {
  _impl_.keys_.Clear();
}
inline ::CGCMsgMemCachedSet_KeyPair* CGCMsgMemCachedSet::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:CGCMsgMemCachedSet.keys)
  return _impl_.keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGCMsgMemCachedSet_KeyPair >*
CGCMsgMemCachedSet::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:CGCMsgMemCachedSet.keys)
  return &_impl_.keys_;
}
inline const ::CGCMsgMemCachedSet_KeyPair& CGCMsgMemCachedSet::_internal_keys(int index) const {
  return _impl_.keys_.Get(index);
}
inline const ::CGCMsgMemCachedSet_KeyPair& CGCMsgMemCachedSet::keys(int index) const {
  // @@protoc_insertion_point(field_get:CGCMsgMemCachedSet.keys)
  return _internal_keys(index);
}
inline ::CGCMsgMemCachedSet_KeyPair* CGCMsgMemCachedSet::_internal_add_keys() {
  return _impl_.keys_.Add();
}
inline ::CGCMsgMemCachedSet_KeyPair* CGCMsgMemCachedSet::add_keys() {
  ::CGCMsgMemCachedSet_KeyPair* _add = _internal_add_keys();
  // @@protoc_insertion_point(field_add:CGCMsgMemCachedSet.keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGCMsgMemCachedSet_KeyPair >&
CGCMsgMemCachedSet::keys() const {
  // @@protoc_insertion_point(field_list:CGCMsgMemCachedSet.keys)
  return _impl_.keys_;
}

// -------------------------------------------------------------------

// CGCMsgMemCachedDelete

// repeated string keys = 1;
inline int CGCMsgMemCachedDelete::_internal_keys_size() const {
  return _impl_.keys_.size();
}
inline int CGCMsgMemCachedDelete::keys_size() const {
  return _internal_keys_size();
}
inline void CGCMsgMemCachedDelete::clear_keys() {
  _impl_.keys_.Clear();
}
inline std::string* CGCMsgMemCachedDelete::add_keys() {
  std::string* _s = _internal_add_keys();
  // @@protoc_insertion_point(field_add_mutable:CGCMsgMemCachedDelete.keys)
  return _s;
}
inline const std::string& CGCMsgMemCachedDelete::_internal_keys(int index) const {
  return _impl_.keys_.Get(index);
}
inline const std::string& CGCMsgMemCachedDelete::keys(int index) const {
  // @@protoc_insertion_point(field_get:CGCMsgMemCachedDelete.keys)
  return _internal_keys(index);
}
inline std::string* CGCMsgMemCachedDelete::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:CGCMsgMemCachedDelete.keys)
  return _impl_.keys_.Mutable(index);
}
inline void CGCMsgMemCachedDelete::set_keys(int index, const std::string& value) {
  _impl_.keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CGCMsgMemCachedDelete.keys)
}
inline void CGCMsgMemCachedDelete::set_keys(int index, std::string&& value) {
  _impl_.keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CGCMsgMemCachedDelete.keys)
}
inline void CGCMsgMemCachedDelete::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CGCMsgMemCachedDelete.keys)
}
inline void CGCMsgMemCachedDelete::set_keys(int index, const char* value, size_t size) {
  _impl_.keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CGCMsgMemCachedDelete.keys)
}
inline std::string* CGCMsgMemCachedDelete::_internal_add_keys() {
  return _impl_.keys_.Add();
}
inline void CGCMsgMemCachedDelete::add_keys(const std::string& value) {
  _impl_.keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CGCMsgMemCachedDelete.keys)
}
inline void CGCMsgMemCachedDelete::add_keys(std::string&& value) {
  _impl_.keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CGCMsgMemCachedDelete.keys)
}
inline void CGCMsgMemCachedDelete::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CGCMsgMemCachedDelete.keys)
}
inline void CGCMsgMemCachedDelete::add_keys(const char* value, size_t size) {
  _impl_.keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CGCMsgMemCachedDelete.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CGCMsgMemCachedDelete::keys() const {
  // @@protoc_insertion_point(field_list:CGCMsgMemCachedDelete.keys)
  return _impl_.keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CGCMsgMemCachedDelete::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:CGCMsgMemCachedDelete.keys)
  return &_impl_.keys_;
}

// -------------------------------------------------------------------

// CGCMsgMemCachedStats

// -------------------------------------------------------------------

// CGCMsgMemCachedStatsResponse

// optional uint64 curr_connections = 1;
inline bool CGCMsgMemCachedStatsResponse::_internal_has_curr_connections() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCMsgMemCachedStatsResponse::has_curr_connections() const {
  return _internal_has_curr_connections();
}
inline void CGCMsgMemCachedStatsResponse::clear_curr_connections() {
  _impl_.curr_connections_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CGCMsgMemCachedStatsResponse::_internal_curr_connections() const {
  return _impl_.curr_connections_;
}
inline uint64_t CGCMsgMemCachedStatsResponse::curr_connections() const {
  // @@protoc_insertion_point(field_get:CGCMsgMemCachedStatsResponse.curr_connections)
  return _internal_curr_connections();
}
inline void CGCMsgMemCachedStatsResponse::_internal_set_curr_connections(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.curr_connections_ = value;
}
inline void CGCMsgMemCachedStatsResponse::set_curr_connections(uint64_t value) {
  _internal_set_curr_connections(value);
  // @@protoc_insertion_point(field_set:CGCMsgMemCachedStatsResponse.curr_connections)
}

// optional uint64 cmd_get = 2;
inline bool CGCMsgMemCachedStatsResponse::_internal_has_cmd_get() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGCMsgMemCachedStatsResponse::has_cmd_get() const {
  return _internal_has_cmd_get();
}
inline void CGCMsgMemCachedStatsResponse::clear_cmd_get() {
  _impl_.cmd_get_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CGCMsgMemCachedStatsResponse::_internal_cmd_get() const {
  return _impl_.cmd_get_;
}
inline uint64_t CGCMsgMemCachedStatsResponse::cmd_get() const {
  // @@protoc_insertion_point(field_get:CGCMsgMemCachedStatsResponse.cmd_get)
  return _internal_cmd_get();
}
inline void CGCMsgMemCachedStatsResponse::_internal_set_cmd_get(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cmd_get_ = value;
}
inline void CGCMsgMemCachedStatsResponse::set_cmd_get(uint64_t value) {
  _internal_set_cmd_get(value);
  // @@protoc_insertion_point(field_set:CGCMsgMemCachedStatsResponse.cmd_get)
}

// optional uint64 cmd_set = 3;
inline bool CGCMsgMemCachedStatsResponse::_internal_has_cmd_set() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGCMsgMemCachedStatsResponse::has_cmd_set() const {
  return _internal_has_cmd_set();
}
inline void CGCMsgMemCachedStatsResponse::clear_cmd_set() {
  _impl_.cmd_set_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CGCMsgMemCachedStatsResponse::_internal_cmd_set() const {
  return _impl_.cmd_set_;
}
inline uint64_t CGCMsgMemCachedStatsResponse::cmd_set() const {
  // @@protoc_insertion_point(field_get:CGCMsgMemCachedStatsResponse.cmd_set)
  return _internal_cmd_set();
}
inline void CGCMsgMemCachedStatsResponse::_internal_set_cmd_set(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cmd_set_ = value;
}
inline void CGCMsgMemCachedStatsResponse::set_cmd_set(uint64_t value) {
  _internal_set_cmd_set(value);
  // @@protoc_insertion_point(field_set:CGCMsgMemCachedStatsResponse.cmd_set)
}

// optional uint64 cmd_flush = 4;
inline bool CGCMsgMemCachedStatsResponse::_internal_has_cmd_flush() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGCMsgMemCachedStatsResponse::has_cmd_flush() const {
  return _internal_has_cmd_flush();
}
inline void CGCMsgMemCachedStatsResponse::clear_cmd_flush() {
  _impl_.cmd_flush_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CGCMsgMemCachedStatsResponse::_internal_cmd_flush() const {
  return _impl_.cmd_flush_;
}
inline uint64_t CGCMsgMemCachedStatsResponse::cmd_flush() const {
  // @@protoc_insertion_point(field_get:CGCMsgMemCachedStatsResponse.cmd_flush)
  return _internal_cmd_flush();
}
inline void CGCMsgMemCachedStatsResponse::_internal_set_cmd_flush(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.cmd_flush_ = value;
}
inline void CGCMsgMemCachedStatsResponse::set_cmd_flush(uint64_t value) {
  _internal_set_cmd_flush(value);
  // @@protoc_insertion_point(field_set:CGCMsgMemCachedStatsResponse.cmd_flush)
}

// optional uint64 get_hits = 5;
inline bool CGCMsgMemCachedStatsResponse::_internal_has_get_hits() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGCMsgMemCachedStatsResponse::has_get_hits() const {
  return _internal_has_get_hits();
}
inline void CGCMsgMemCachedStatsResponse::clear_get_hits() {
  _impl_.get_hits_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CGCMsgMemCachedStatsResponse::_internal_get_hits() const {
  return _impl_.get_hits_;
}
inline uint64_t CGCMsgMemCachedStatsResponse::get_hits() const {
  // @@protoc_insertion_point(field_get:CGCMsgMemCachedStatsResponse.get_hits)
  return _internal_get_hits();
}
inline void CGCMsgMemCachedStatsResponse::_internal_set_get_hits(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.get_hits_ = value;
}
inline void CGCMsgMemCachedStatsResponse::set_get_hits(uint64_t value) {
  _internal_set_get_hits(value);
  // @@protoc_insertion_point(field_set:CGCMsgMemCachedStatsResponse.get_hits)
}

// optional uint64 get_misses = 6;
inline bool CGCMsgMemCachedStatsResponse::_internal_has_get_misses() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CGCMsgMemCachedStatsResponse::has_get_misses() const {
  return _internal_has_get_misses();
}
inline void CGCMsgMemCachedStatsResponse::clear_get_misses() {
  _impl_.get_misses_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CGCMsgMemCachedStatsResponse::_internal_get_misses() const {
  return _impl_.get_misses_;
}
inline uint64_t CGCMsgMemCachedStatsResponse::get_misses() const {
  // @@protoc_insertion_point(field_get:CGCMsgMemCachedStatsResponse.get_misses)
  return _internal_get_misses();
}
inline void CGCMsgMemCachedStatsResponse::_internal_set_get_misses(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.get_misses_ = value;
}
inline void CGCMsgMemCachedStatsResponse::set_get_misses(uint64_t value) {
  _internal_set_get_misses(value);
  // @@protoc_insertion_point(field_set:CGCMsgMemCachedStatsResponse.get_misses)
}

// optional uint64 delete_hits = 7;
inline bool CGCMsgMemCachedStatsResponse::_internal_has_delete_hits() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CGCMsgMemCachedStatsResponse::has_delete_hits() const {
  return _internal_has_delete_hits();
}
inline void CGCMsgMemCachedStatsResponse::clear_delete_hits() {
  _impl_.delete_hits_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CGCMsgMemCachedStatsResponse::_internal_delete_hits() const {
  return _impl_.delete_hits_;
}
inline uint64_t CGCMsgMemCachedStatsResponse::delete_hits() const {
  // @@protoc_insertion_point(field_get:CGCMsgMemCachedStatsResponse.delete_hits)
  return _internal_delete_hits();
}
inline void CGCMsgMemCachedStatsResponse::_internal_set_delete_hits(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.delete_hits_ = value;
}
inline void CGCMsgMemCachedStatsResponse::set_delete_hits(uint64_t value) {
  _internal_set_delete_hits(value);
  // @@protoc_insertion_point(field_set:CGCMsgMemCachedStatsResponse.delete_hits)
}

// optional uint64 delete_misses = 8;
inline bool CGCMsgMemCachedStatsResponse::_internal_has_delete_misses() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CGCMsgMemCachedStatsResponse::has_delete_misses() const {
  return _internal_has_delete_misses();
}
inline void CGCMsgMemCachedStatsResponse::clear_delete_misses() {
  _impl_.delete_misses_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t CGCMsgMemCachedStatsResponse::_internal_delete_misses() const {
  return _impl_.delete_misses_;
}
inline uint64_t CGCMsgMemCachedStatsResponse::delete_misses() const {
  // @@protoc_insertion_point(field_get:CGCMsgMemCachedStatsResponse.delete_misses)
  return _internal_delete_misses();
}
inline void CGCMsgMemCachedStatsResponse::_internal_set_delete_misses(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.delete_misses_ = value;
}
inline void CGCMsgMemCachedStatsResponse::set_delete_misses(uint64_t value) {
  _internal_set_delete_misses(value);
  // @@protoc_insertion_point(field_set:CGCMsgMemCachedStatsResponse.delete_misses)
}

// optional uint64 bytes_read = 9;
inline bool CGCMsgMemCachedStatsResponse::_internal_has_bytes_read() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CGCMsgMemCachedStatsResponse::has_bytes_read() const {
  return _internal_has_bytes_read();
}
inline void CGCMsgMemCachedStatsResponse::clear_bytes_read() {
  _impl_.bytes_read_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t CGCMsgMemCachedStatsResponse::_internal_bytes_read() const {
  return _impl_.bytes_read_;
}
inline uint64_t CGCMsgMemCachedStatsResponse::bytes_read() const {
  // @@protoc_insertion_point(field_get:CGCMsgMemCachedStatsResponse.bytes_read)
  return _internal_bytes_read();
}
inline void CGCMsgMemCachedStatsResponse::_internal_set_bytes_read(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.bytes_read_ = value;
}
inline void CGCMsgMemCachedStatsResponse::set_bytes_read(uint64_t value) {
  _internal_set_bytes_read(value);
  // @@protoc_insertion_point(field_set:CGCMsgMemCachedStatsResponse.bytes_read)
}

// optional uint64 bytes_written = 10;
inline bool CGCMsgMemCachedStatsResponse::_internal_has_bytes_written() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CGCMsgMemCachedStatsResponse::has_bytes_written() const {
  return _internal_has_bytes_written();
}
inline void CGCMsgMemCachedStatsResponse::clear_bytes_written() {
  _impl_.bytes_written_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint64_t CGCMsgMemCachedStatsResponse::_internal_bytes_written() const {
  return _impl_.bytes_written_;
}
inline uint64_t CGCMsgMemCachedStatsResponse::bytes_written() const {
  // @@protoc_insertion_point(field_get:CGCMsgMemCachedStatsResponse.bytes_written)
  return _internal_bytes_written();
}
inline void CGCMsgMemCachedStatsResponse::_internal_set_bytes_written(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.bytes_written_ = value;
}
inline void CGCMsgMemCachedStatsResponse::set_bytes_written(uint64_t value) {
  _internal_set_bytes_written(value);
  // @@protoc_insertion_point(field_set:CGCMsgMemCachedStatsResponse.bytes_written)
}

// optional uint64 limit_maxbytes = 11;
inline bool CGCMsgMemCachedStatsResponse::_internal_has_limit_maxbytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CGCMsgMemCachedStatsResponse::has_limit_maxbytes() const {
  return _internal_has_limit_maxbytes();
}
inline void CGCMsgMemCachedStatsResponse::clear_limit_maxbytes() {
  _impl_.limit_maxbytes_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint64_t CGCMsgMemCachedStatsResponse::_internal_limit_maxbytes() const {
  return _impl_.limit_maxbytes_;
}
inline uint64_t CGCMsgMemCachedStatsResponse::limit_maxbytes() const {
  // @@protoc_insertion_point(field_get:CGCMsgMemCachedStatsResponse.limit_maxbytes)
  return _internal_limit_maxbytes();
}
inline void CGCMsgMemCachedStatsResponse::_internal_set_limit_maxbytes(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.limit_maxbytes_ = value;
}
inline void CGCMsgMemCachedStatsResponse::set_limit_maxbytes(uint64_t value) {
  _internal_set_limit_maxbytes(value);
  // @@protoc_insertion_point(field_set:CGCMsgMemCachedStatsResponse.limit_maxbytes)
}

// optional uint64 curr_items = 12;
inline bool CGCMsgMemCachedStatsResponse::_internal_has_curr_items() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CGCMsgMemCachedStatsResponse::has_curr_items() const {
  return _internal_has_curr_items();
}
inline void CGCMsgMemCachedStatsResponse::clear_curr_items() {
  _impl_.curr_items_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint64_t CGCMsgMemCachedStatsResponse::_internal_curr_items() const {
  return _impl_.curr_items_;
}
inline uint64_t CGCMsgMemCachedStatsResponse::curr_items() const {
  // @@protoc_insertion_point(field_get:CGCMsgMemCachedStatsResponse.curr_items)
  return _internal_curr_items();
}
inline void CGCMsgMemCachedStatsResponse::_internal_set_curr_items(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.curr_items_ = value;
}
inline void CGCMsgMemCachedStatsResponse::set_curr_items(uint64_t value) {
  _internal_set_curr_items(value);
  // @@protoc_insertion_point(field_set:CGCMsgMemCachedStatsResponse.curr_items)
}

// optional uint64 evictions = 13;
inline bool CGCMsgMemCachedStatsResponse::_internal_has_evictions() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CGCMsgMemCachedStatsResponse::has_evictions() const {
  return _internal_has_evictions();
}
inline void CGCMsgMemCachedStatsResponse::clear_evictions() {
  _impl_.evictions_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint64_t CGCMsgMemCachedStatsResponse::_internal_evictions() const {
  return _impl_.evictions_;
}
inline uint64_t CGCMsgMemCachedStatsResponse::evictions() const {
  // @@protoc_insertion_point(field_get:CGCMsgMemCachedStatsResponse.evictions)
  return _internal_evictions();
}
inline void CGCMsgMemCachedStatsResponse::_internal_set_evictions(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.evictions_ = value;
}
inline void CGCMsgMemCachedStatsResponse::set_evictions(uint64_t value) {
  _internal_set_evictions(value);
  // @@protoc_insertion_point(field_set:CGCMsgMemCachedStatsResponse.evictions)
}

// optional uint64 bytes = 14;
inline bool CGCMsgMemCachedStatsResponse::_internal_has_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CGCMsgMemCachedStatsResponse::has_bytes() const {
  return _internal_has_bytes();
}
inline void CGCMsgMemCachedStatsResponse::clear_bytes() {
  _impl_.bytes_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint64_t CGCMsgMemCachedStatsResponse::_internal_bytes() const {
  return _impl_.bytes_;
}
inline uint64_t CGCMsgMemCachedStatsResponse::bytes() const {
  // @@protoc_insertion_point(field_get:CGCMsgMemCachedStatsResponse.bytes)
  return _internal_bytes();
}
inline void CGCMsgMemCachedStatsResponse::_internal_set_bytes(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.bytes_ = value;
}
inline void CGCMsgMemCachedStatsResponse::set_bytes(uint64_t value) {
  _internal_set_bytes(value);
  // @@protoc_insertion_point(field_set:CGCMsgMemCachedStatsResponse.bytes)
}

// -------------------------------------------------------------------

// CGCMsgSQLStats

// optional uint32 schema_catalog = 1;
inline bool CGCMsgSQLStats::_internal_has_schema_catalog() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCMsgSQLStats::has_schema_catalog() const {
  return _internal_has_schema_catalog();
}
inline void CGCMsgSQLStats::clear_schema_catalog() {
  _impl_.schema_catalog_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CGCMsgSQLStats::_internal_schema_catalog() const {
  return _impl_.schema_catalog_;
}
inline uint32_t CGCMsgSQLStats::schema_catalog() const {
  // @@protoc_insertion_point(field_get:CGCMsgSQLStats.schema_catalog)
  return _internal_schema_catalog();
}
inline void CGCMsgSQLStats::_internal_set_schema_catalog(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.schema_catalog_ = value;
}
inline void CGCMsgSQLStats::set_schema_catalog(uint32_t value) {
  _internal_set_schema_catalog(value);
  // @@protoc_insertion_point(field_set:CGCMsgSQLStats.schema_catalog)
}

// -------------------------------------------------------------------

// CGCMsgSQLStatsResponse

// optional uint32 threads = 1;
inline bool CGCMsgSQLStatsResponse::_internal_has_threads() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCMsgSQLStatsResponse::has_threads() const {
  return _internal_has_threads();
}
inline void CGCMsgSQLStatsResponse::clear_threads() {
  _impl_.threads_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CGCMsgSQLStatsResponse::_internal_threads() const {
  return _impl_.threads_;
}
inline uint32_t CGCMsgSQLStatsResponse::threads() const {
  // @@protoc_insertion_point(field_get:CGCMsgSQLStatsResponse.threads)
  return _internal_threads();
}
inline void CGCMsgSQLStatsResponse::_internal_set_threads(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.threads_ = value;
}
inline void CGCMsgSQLStatsResponse::set_threads(uint32_t value) {
  _internal_set_threads(value);
  // @@protoc_insertion_point(field_set:CGCMsgSQLStatsResponse.threads)
}

// optional uint32 threads_connected = 2;
inline bool CGCMsgSQLStatsResponse::_internal_has_threads_connected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGCMsgSQLStatsResponse::has_threads_connected() const {
  return _internal_has_threads_connected();
}
inline void CGCMsgSQLStatsResponse::clear_threads_connected() {
  _impl_.threads_connected_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CGCMsgSQLStatsResponse::_internal_threads_connected() const {
  return _impl_.threads_connected_;
}
inline uint32_t CGCMsgSQLStatsResponse::threads_connected() const {
  // @@protoc_insertion_point(field_get:CGCMsgSQLStatsResponse.threads_connected)
  return _internal_threads_connected();
}
inline void CGCMsgSQLStatsResponse::_internal_set_threads_connected(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.threads_connected_ = value;
}
inline void CGCMsgSQLStatsResponse::set_threads_connected(uint32_t value) {
  _internal_set_threads_connected(value);
  // @@protoc_insertion_point(field_set:CGCMsgSQLStatsResponse.threads_connected)
}

// optional uint32 threads_active = 3;
inline bool CGCMsgSQLStatsResponse::_internal_has_threads_active() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGCMsgSQLStatsResponse::has_threads_active() const {
  return _internal_has_threads_active();
}
inline void CGCMsgSQLStatsResponse::clear_threads_active() {
  _impl_.threads_active_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CGCMsgSQLStatsResponse::_internal_threads_active() const {
  return _impl_.threads_active_;
}
inline uint32_t CGCMsgSQLStatsResponse::threads_active() const {
  // @@protoc_insertion_point(field_get:CGCMsgSQLStatsResponse.threads_active)
  return _internal_threads_active();
}
inline void CGCMsgSQLStatsResponse::_internal_set_threads_active(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.threads_active_ = value;
}
inline void CGCMsgSQLStatsResponse::set_threads_active(uint32_t value) {
  _internal_set_threads_active(value);
  // @@protoc_insertion_point(field_set:CGCMsgSQLStatsResponse.threads_active)
}

// optional uint32 operations_submitted = 4;
inline bool CGCMsgSQLStatsResponse::_internal_has_operations_submitted() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGCMsgSQLStatsResponse::has_operations_submitted() const {
  return _internal_has_operations_submitted();
}
inline void CGCMsgSQLStatsResponse::clear_operations_submitted() {
  _impl_.operations_submitted_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CGCMsgSQLStatsResponse::_internal_operations_submitted() const {
  return _impl_.operations_submitted_;
}
inline uint32_t CGCMsgSQLStatsResponse::operations_submitted() const {
  // @@protoc_insertion_point(field_get:CGCMsgSQLStatsResponse.operations_submitted)
  return _internal_operations_submitted();
}
inline void CGCMsgSQLStatsResponse::_internal_set_operations_submitted(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.operations_submitted_ = value;
}
inline void CGCMsgSQLStatsResponse::set_operations_submitted(uint32_t value) {
  _internal_set_operations_submitted(value);
  // @@protoc_insertion_point(field_set:CGCMsgSQLStatsResponse.operations_submitted)
}

// optional uint32 prepared_statements_executed = 5;
inline bool CGCMsgSQLStatsResponse::_internal_has_prepared_statements_executed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGCMsgSQLStatsResponse::has_prepared_statements_executed() const {
  return _internal_has_prepared_statements_executed();
}
inline void CGCMsgSQLStatsResponse::clear_prepared_statements_executed() {
  _impl_.prepared_statements_executed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CGCMsgSQLStatsResponse::_internal_prepared_statements_executed() const {
  return _impl_.prepared_statements_executed_;
}
inline uint32_t CGCMsgSQLStatsResponse::prepared_statements_executed() const {
  // @@protoc_insertion_point(field_get:CGCMsgSQLStatsResponse.prepared_statements_executed)
  return _internal_prepared_statements_executed();
}
inline void CGCMsgSQLStatsResponse::_internal_set_prepared_statements_executed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.prepared_statements_executed_ = value;
}
inline void CGCMsgSQLStatsResponse::set_prepared_statements_executed(uint32_t value) {
  _internal_set_prepared_statements_executed(value);
  // @@protoc_insertion_point(field_set:CGCMsgSQLStatsResponse.prepared_statements_executed)
}

// optional uint32 non_prepared_statements_executed = 6;
inline bool CGCMsgSQLStatsResponse::_internal_has_non_prepared_statements_executed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CGCMsgSQLStatsResponse::has_non_prepared_statements_executed() const {
  return _internal_has_non_prepared_statements_executed();
}
inline void CGCMsgSQLStatsResponse::clear_non_prepared_statements_executed() {
  _impl_.non_prepared_statements_executed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CGCMsgSQLStatsResponse::_internal_non_prepared_statements_executed() const {
  return _impl_.non_prepared_statements_executed_;
}
inline uint32_t CGCMsgSQLStatsResponse::non_prepared_statements_executed() const {
  // @@protoc_insertion_point(field_get:CGCMsgSQLStatsResponse.non_prepared_statements_executed)
  return _internal_non_prepared_statements_executed();
}
inline void CGCMsgSQLStatsResponse::_internal_set_non_prepared_statements_executed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.non_prepared_statements_executed_ = value;
}
inline void CGCMsgSQLStatsResponse::set_non_prepared_statements_executed(uint32_t value) {
  _internal_set_non_prepared_statements_executed(value);
  // @@protoc_insertion_point(field_set:CGCMsgSQLStatsResponse.non_prepared_statements_executed)
}

// optional uint32 deadlock_retries = 7;
inline bool CGCMsgSQLStatsResponse::_internal_has_deadlock_retries() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CGCMsgSQLStatsResponse::has_deadlock_retries() const {
  return _internal_has_deadlock_retries();
}
inline void CGCMsgSQLStatsResponse::clear_deadlock_retries() {
  _impl_.deadlock_retries_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CGCMsgSQLStatsResponse::_internal_deadlock_retries() const {
  return _impl_.deadlock_retries_;
}
inline uint32_t CGCMsgSQLStatsResponse::deadlock_retries() const {
  // @@protoc_insertion_point(field_get:CGCMsgSQLStatsResponse.deadlock_retries)
  return _internal_deadlock_retries();
}
inline void CGCMsgSQLStatsResponse::_internal_set_deadlock_retries(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.deadlock_retries_ = value;
}
inline void CGCMsgSQLStatsResponse::set_deadlock_retries(uint32_t value) {
  _internal_set_deadlock_retries(value);
  // @@protoc_insertion_point(field_set:CGCMsgSQLStatsResponse.deadlock_retries)
}

// optional uint32 operations_timed_out_in_queue = 8;
inline bool CGCMsgSQLStatsResponse::_internal_has_operations_timed_out_in_queue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CGCMsgSQLStatsResponse::has_operations_timed_out_in_queue() const {
  return _internal_has_operations_timed_out_in_queue();
}
inline void CGCMsgSQLStatsResponse::clear_operations_timed_out_in_queue() {
  _impl_.operations_timed_out_in_queue_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CGCMsgSQLStatsResponse::_internal_operations_timed_out_in_queue() const {
  return _impl_.operations_timed_out_in_queue_;
}
inline uint32_t CGCMsgSQLStatsResponse::operations_timed_out_in_queue() const {
  // @@protoc_insertion_point(field_get:CGCMsgSQLStatsResponse.operations_timed_out_in_queue)
  return _internal_operations_timed_out_in_queue();
}
inline void CGCMsgSQLStatsResponse::_internal_set_operations_timed_out_in_queue(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.operations_timed_out_in_queue_ = value;
}
inline void CGCMsgSQLStatsResponse::set_operations_timed_out_in_queue(uint32_t value) {
  _internal_set_operations_timed_out_in_queue(value);
  // @@protoc_insertion_point(field_set:CGCMsgSQLStatsResponse.operations_timed_out_in_queue)
}

// optional uint32 errors = 9;
inline bool CGCMsgSQLStatsResponse::_internal_has_errors() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CGCMsgSQLStatsResponse::has_errors() const {
  return _internal_has_errors();
}
inline void CGCMsgSQLStatsResponse::clear_errors() {
  _impl_.errors_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CGCMsgSQLStatsResponse::_internal_errors() const {
  return _impl_.errors_;
}
inline uint32_t CGCMsgSQLStatsResponse::errors() const {
  // @@protoc_insertion_point(field_get:CGCMsgSQLStatsResponse.errors)
  return _internal_errors();
}
inline void CGCMsgSQLStatsResponse::_internal_set_errors(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.errors_ = value;
}
inline void CGCMsgSQLStatsResponse::set_errors(uint32_t value) {
  _internal_set_errors(value);
  // @@protoc_insertion_point(field_set:CGCMsgSQLStatsResponse.errors)
}

// -------------------------------------------------------------------

// CMsgAMAddFreeLicense

// optional fixed64 steamid = 1;
inline bool CMsgAMAddFreeLicense::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAMAddFreeLicense::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgAMAddFreeLicense::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgAMAddFreeLicense::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CMsgAMAddFreeLicense::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgAMAddFreeLicense.steamid)
  return _internal_steamid();
}
inline void CMsgAMAddFreeLicense::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.steamid_ = value;
}
inline void CMsgAMAddFreeLicense::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgAMAddFreeLicense.steamid)
}

// optional uint32 ip_public = 2;
inline bool CMsgAMAddFreeLicense::_internal_has_ip_public() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgAMAddFreeLicense::has_ip_public() const {
  return _internal_has_ip_public();
}
inline void CMsgAMAddFreeLicense::clear_ip_public() {
  _impl_.ip_public_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgAMAddFreeLicense::_internal_ip_public() const {
  return _impl_.ip_public_;
}
inline uint32_t CMsgAMAddFreeLicense::ip_public() const {
  // @@protoc_insertion_point(field_get:CMsgAMAddFreeLicense.ip_public)
  return _internal_ip_public();
}
inline void CMsgAMAddFreeLicense::_internal_set_ip_public(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ip_public_ = value;
}
inline void CMsgAMAddFreeLicense::set_ip_public(uint32_t value) {
  _internal_set_ip_public(value);
  // @@protoc_insertion_point(field_set:CMsgAMAddFreeLicense.ip_public)
}

// optional uint32 packageid = 3;
inline bool CMsgAMAddFreeLicense::_internal_has_packageid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgAMAddFreeLicense::has_packageid() const {
  return _internal_has_packageid();
}
inline void CMsgAMAddFreeLicense::clear_packageid() {
  _impl_.packageid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgAMAddFreeLicense::_internal_packageid() const {
  return _impl_.packageid_;
}
inline uint32_t CMsgAMAddFreeLicense::packageid() const {
  // @@protoc_insertion_point(field_get:CMsgAMAddFreeLicense.packageid)
  return _internal_packageid();
}
inline void CMsgAMAddFreeLicense::_internal_set_packageid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.packageid_ = value;
}
inline void CMsgAMAddFreeLicense::set_packageid(uint32_t value) {
  _internal_set_packageid(value);
  // @@protoc_insertion_point(field_set:CMsgAMAddFreeLicense.packageid)
}

// optional string store_country_code = 4;
inline bool CMsgAMAddFreeLicense::_internal_has_store_country_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAMAddFreeLicense::has_store_country_code() const {
  return _internal_has_store_country_code();
}
inline void CMsgAMAddFreeLicense::clear_store_country_code() {
  _impl_.store_country_code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgAMAddFreeLicense::store_country_code() const {
  // @@protoc_insertion_point(field_get:CMsgAMAddFreeLicense.store_country_code)
  return _internal_store_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgAMAddFreeLicense::set_store_country_code(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.store_country_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgAMAddFreeLicense.store_country_code)
}
inline std::string* CMsgAMAddFreeLicense::mutable_store_country_code() {
  std::string* _s = _internal_mutable_store_country_code();
  // @@protoc_insertion_point(field_mutable:CMsgAMAddFreeLicense.store_country_code)
  return _s;
}
inline const std::string& CMsgAMAddFreeLicense::_internal_store_country_code() const {
  return _impl_.store_country_code_.Get();
}
inline void CMsgAMAddFreeLicense::_internal_set_store_country_code(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.store_country_code_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgAMAddFreeLicense::_internal_mutable_store_country_code() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.store_country_code_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgAMAddFreeLicense::release_store_country_code() {
  // @@protoc_insertion_point(field_release:CMsgAMAddFreeLicense.store_country_code)
  if (!_internal_has_store_country_code()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.store_country_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.store_country_code_.IsDefault()) {
    _impl_.store_country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgAMAddFreeLicense::set_allocated_store_country_code(std::string* store_country_code) {
  if (store_country_code != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.store_country_code_.SetAllocated(store_country_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.store_country_code_.IsDefault()) {
    _impl_.store_country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgAMAddFreeLicense.store_country_code)
}

// -------------------------------------------------------------------

// CMsgAMAddFreeLicenseResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgAMAddFreeLicenseResponse::_internal_has_eresult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgAMAddFreeLicenseResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgAMAddFreeLicenseResponse::clear_eresult() {
  _impl_.eresult_ = 2;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgAMAddFreeLicenseResponse::_internal_eresult() const {
  return _impl_.eresult_;
}
inline int32_t CMsgAMAddFreeLicenseResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgAMAddFreeLicenseResponse.eresult)
  return _internal_eresult();
}
inline void CMsgAMAddFreeLicenseResponse::_internal_set_eresult(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.eresult_ = value;
}
inline void CMsgAMAddFreeLicenseResponse::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgAMAddFreeLicenseResponse.eresult)
}

// optional int32 purchase_result_detail = 2;
inline bool CMsgAMAddFreeLicenseResponse::_internal_has_purchase_result_detail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAMAddFreeLicenseResponse::has_purchase_result_detail() const {
  return _internal_has_purchase_result_detail();
}
inline void CMsgAMAddFreeLicenseResponse::clear_purchase_result_detail() {
  _impl_.purchase_result_detail_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgAMAddFreeLicenseResponse::_internal_purchase_result_detail() const {
  return _impl_.purchase_result_detail_;
}
inline int32_t CMsgAMAddFreeLicenseResponse::purchase_result_detail() const {
  // @@protoc_insertion_point(field_get:CMsgAMAddFreeLicenseResponse.purchase_result_detail)
  return _internal_purchase_result_detail();
}
inline void CMsgAMAddFreeLicenseResponse::_internal_set_purchase_result_detail(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.purchase_result_detail_ = value;
}
inline void CMsgAMAddFreeLicenseResponse::set_purchase_result_detail(int32_t value) {
  _internal_set_purchase_result_detail(value);
  // @@protoc_insertion_point(field_set:CMsgAMAddFreeLicenseResponse.purchase_result_detail)
}

// optional fixed64 transid = 3;
inline bool CMsgAMAddFreeLicenseResponse::_internal_has_transid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAMAddFreeLicenseResponse::has_transid() const {
  return _internal_has_transid();
}
inline void CMsgAMAddFreeLicenseResponse::clear_transid() {
  _impl_.transid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgAMAddFreeLicenseResponse::_internal_transid() const {
  return _impl_.transid_;
}
inline uint64_t CMsgAMAddFreeLicenseResponse::transid() const {
  // @@protoc_insertion_point(field_get:CMsgAMAddFreeLicenseResponse.transid)
  return _internal_transid();
}
inline void CMsgAMAddFreeLicenseResponse::_internal_set_transid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.transid_ = value;
}
inline void CMsgAMAddFreeLicenseResponse::set_transid(uint64_t value) {
  _internal_set_transid(value);
  // @@protoc_insertion_point(field_set:CMsgAMAddFreeLicenseResponse.transid)
}

// -------------------------------------------------------------------

// CGCMsgGetIPLocation

// repeated fixed32 ips = 1;
inline int CGCMsgGetIPLocation::_internal_ips_size() const {
  return _impl_.ips_.size();
}
inline int CGCMsgGetIPLocation::ips_size() const {
  return _internal_ips_size();
}
inline void CGCMsgGetIPLocation::clear_ips() {
  _impl_.ips_.Clear();
}
inline uint32_t CGCMsgGetIPLocation::_internal_ips(int index) const {
  return _impl_.ips_.Get(index);
}
inline uint32_t CGCMsgGetIPLocation::ips(int index) const {
  // @@protoc_insertion_point(field_get:CGCMsgGetIPLocation.ips)
  return _internal_ips(index);
}
inline void CGCMsgGetIPLocation::set_ips(int index, uint32_t value) {
  _impl_.ips_.Set(index, value);
  // @@protoc_insertion_point(field_set:CGCMsgGetIPLocation.ips)
}
inline void CGCMsgGetIPLocation::_internal_add_ips(uint32_t value) {
  _impl_.ips_.Add(value);
}
inline void CGCMsgGetIPLocation::add_ips(uint32_t value) {
  _internal_add_ips(value);
  // @@protoc_insertion_point(field_add:CGCMsgGetIPLocation.ips)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CGCMsgGetIPLocation::_internal_ips() const {
  return _impl_.ips_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CGCMsgGetIPLocation::ips() const {
  // @@protoc_insertion_point(field_list:CGCMsgGetIPLocation.ips)
  return _internal_ips();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CGCMsgGetIPLocation::_internal_mutable_ips() {
  return &_impl_.ips_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CGCMsgGetIPLocation::mutable_ips() {
  // @@protoc_insertion_point(field_mutable_list:CGCMsgGetIPLocation.ips)
  return _internal_mutable_ips();
}

// -------------------------------------------------------------------

// CGCMsgGetIPASN

// repeated fixed32 ips = 1;
inline int CGCMsgGetIPASN::_internal_ips_size() const {
  return _impl_.ips_.size();
}
inline int CGCMsgGetIPASN::ips_size() const {
  return _internal_ips_size();
}
inline void CGCMsgGetIPASN::clear_ips() {
  _impl_.ips_.Clear();
}
inline uint32_t CGCMsgGetIPASN::_internal_ips(int index) const {
  return _impl_.ips_.Get(index);
}
inline uint32_t CGCMsgGetIPASN::ips(int index) const {
  // @@protoc_insertion_point(field_get:CGCMsgGetIPASN.ips)
  return _internal_ips(index);
}
inline void CGCMsgGetIPASN::set_ips(int index, uint32_t value) {
  _impl_.ips_.Set(index, value);
  // @@protoc_insertion_point(field_set:CGCMsgGetIPASN.ips)
}
inline void CGCMsgGetIPASN::_internal_add_ips(uint32_t value) {
  _impl_.ips_.Add(value);
}
inline void CGCMsgGetIPASN::add_ips(uint32_t value) {
  _internal_add_ips(value);
  // @@protoc_insertion_point(field_add:CGCMsgGetIPASN.ips)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CGCMsgGetIPASN::_internal_ips() const {
  return _impl_.ips_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CGCMsgGetIPASN::ips() const {
  // @@protoc_insertion_point(field_list:CGCMsgGetIPASN.ips)
  return _internal_ips();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CGCMsgGetIPASN::_internal_mutable_ips() {
  return &_impl_.ips_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CGCMsgGetIPASN::mutable_ips() {
  // @@protoc_insertion_point(field_mutable_list:CGCMsgGetIPASN.ips)
  return _internal_mutable_ips();
}

// -------------------------------------------------------------------

// CIPASNInfo

// optional fixed32 ip = 1;
inline bool CIPASNInfo::_internal_has_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CIPASNInfo::has_ip() const {
  return _internal_has_ip();
}
inline void CIPASNInfo::clear_ip() {
  _impl_.ip_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CIPASNInfo::_internal_ip() const {
  return _impl_.ip_;
}
inline uint32_t CIPASNInfo::ip() const {
  // @@protoc_insertion_point(field_get:CIPASNInfo.ip)
  return _internal_ip();
}
inline void CIPASNInfo::_internal_set_ip(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ip_ = value;
}
inline void CIPASNInfo::set_ip(uint32_t value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:CIPASNInfo.ip)
}

// optional uint32 asn = 2;
inline bool CIPASNInfo::_internal_has_asn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CIPASNInfo::has_asn() const {
  return _internal_has_asn();
}
inline void CIPASNInfo::clear_asn() {
  _impl_.asn_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CIPASNInfo::_internal_asn() const {
  return _impl_.asn_;
}
inline uint32_t CIPASNInfo::asn() const {
  // @@protoc_insertion_point(field_get:CIPASNInfo.asn)
  return _internal_asn();
}
inline void CIPASNInfo::_internal_set_asn(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.asn_ = value;
}
inline void CIPASNInfo::set_asn(uint32_t value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:CIPASNInfo.asn)
}

// -------------------------------------------------------------------

// CGCMsgGetIPASNResponse

// repeated .CIPASNInfo infos = 1;
inline int CGCMsgGetIPASNResponse::_internal_infos_size() const {
  return _impl_.infos_.size();
}
inline int CGCMsgGetIPASNResponse::infos_size() const {
  return _internal_infos_size();
}
inline void CGCMsgGetIPASNResponse::clear_infos() {
  _impl_.infos_.Clear();
}
inline ::CIPASNInfo* CGCMsgGetIPASNResponse::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:CGCMsgGetIPASNResponse.infos)
  return _impl_.infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CIPASNInfo >*
CGCMsgGetIPASNResponse::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:CGCMsgGetIPASNResponse.infos)
  return &_impl_.infos_;
}
inline const ::CIPASNInfo& CGCMsgGetIPASNResponse::_internal_infos(int index) const {
  return _impl_.infos_.Get(index);
}
inline const ::CIPASNInfo& CGCMsgGetIPASNResponse::infos(int index) const {
  // @@protoc_insertion_point(field_get:CGCMsgGetIPASNResponse.infos)
  return _internal_infos(index);
}
inline ::CIPASNInfo* CGCMsgGetIPASNResponse::_internal_add_infos() {
  return _impl_.infos_.Add();
}
inline ::CIPASNInfo* CGCMsgGetIPASNResponse::add_infos() {
  ::CIPASNInfo* _add = _internal_add_infos();
  // @@protoc_insertion_point(field_add:CGCMsgGetIPASNResponse.infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CIPASNInfo >&
CGCMsgGetIPASNResponse::infos() const {
  // @@protoc_insertion_point(field_list:CGCMsgGetIPASNResponse.infos)
  return _impl_.infos_;
}

// -------------------------------------------------------------------

// CGCMsgSystemStatsSchema

// optional uint32 gc_app_id = 1;
inline bool CGCMsgSystemStatsSchema::_internal_has_gc_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGCMsgSystemStatsSchema::has_gc_app_id() const {
  return _internal_has_gc_app_id();
}
inline void CGCMsgSystemStatsSchema::clear_gc_app_id() {
  _impl_.gc_app_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CGCMsgSystemStatsSchema::_internal_gc_app_id() const {
  return _impl_.gc_app_id_;
}
inline uint32_t CGCMsgSystemStatsSchema::gc_app_id() const {
  // @@protoc_insertion_point(field_get:CGCMsgSystemStatsSchema.gc_app_id)
  return _internal_gc_app_id();
}
inline void CGCMsgSystemStatsSchema::_internal_set_gc_app_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.gc_app_id_ = value;
}
inline void CGCMsgSystemStatsSchema::set_gc_app_id(uint32_t value) {
  _internal_set_gc_app_id(value);
  // @@protoc_insertion_point(field_set:CGCMsgSystemStatsSchema.gc_app_id)
}

// optional bytes schema_kv = 2;
inline bool CGCMsgSystemStatsSchema::_internal_has_schema_kv() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCMsgSystemStatsSchema::has_schema_kv() const {
  return _internal_has_schema_kv();
}
inline void CGCMsgSystemStatsSchema::clear_schema_kv() {
  _impl_.schema_kv_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGCMsgSystemStatsSchema::schema_kv() const {
  // @@protoc_insertion_point(field_get:CGCMsgSystemStatsSchema.schema_kv)
  return _internal_schema_kv();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCMsgSystemStatsSchema::set_schema_kv(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.schema_kv_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCMsgSystemStatsSchema.schema_kv)
}
inline std::string* CGCMsgSystemStatsSchema::mutable_schema_kv() {
  std::string* _s = _internal_mutable_schema_kv();
  // @@protoc_insertion_point(field_mutable:CGCMsgSystemStatsSchema.schema_kv)
  return _s;
}
inline const std::string& CGCMsgSystemStatsSchema::_internal_schema_kv() const {
  return _impl_.schema_kv_.Get();
}
inline void CGCMsgSystemStatsSchema::_internal_set_schema_kv(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.schema_kv_.Set(value, GetArenaForAllocation());
}
inline std::string* CGCMsgSystemStatsSchema::_internal_mutable_schema_kv() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.schema_kv_.Mutable(GetArenaForAllocation());
}
inline std::string* CGCMsgSystemStatsSchema::release_schema_kv() {
  // @@protoc_insertion_point(field_release:CGCMsgSystemStatsSchema.schema_kv)
  if (!_internal_has_schema_kv()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.schema_kv_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.schema_kv_.IsDefault()) {
    _impl_.schema_kv_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGCMsgSystemStatsSchema::set_allocated_schema_kv(std::string* schema_kv) {
  if (schema_kv != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.schema_kv_.SetAllocated(schema_kv, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.schema_kv_.IsDefault()) {
    _impl_.schema_kv_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGCMsgSystemStatsSchema.schema_kv)
}

// -------------------------------------------------------------------

// CGCMsgGetSystemStats

// -------------------------------------------------------------------

// CGCMsgGetSystemStatsResponse

// optional uint32 gc_app_id = 1;
inline bool CGCMsgGetSystemStatsResponse::_internal_has_gc_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGCMsgGetSystemStatsResponse::has_gc_app_id() const {
  return _internal_has_gc_app_id();
}
inline void CGCMsgGetSystemStatsResponse::clear_gc_app_id() {
  _impl_.gc_app_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CGCMsgGetSystemStatsResponse::_internal_gc_app_id() const {
  return _impl_.gc_app_id_;
}
inline uint32_t CGCMsgGetSystemStatsResponse::gc_app_id() const {
  // @@protoc_insertion_point(field_get:CGCMsgGetSystemStatsResponse.gc_app_id)
  return _internal_gc_app_id();
}
inline void CGCMsgGetSystemStatsResponse::_internal_set_gc_app_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.gc_app_id_ = value;
}
inline void CGCMsgGetSystemStatsResponse::set_gc_app_id(uint32_t value) {
  _internal_set_gc_app_id(value);
  // @@protoc_insertion_point(field_set:CGCMsgGetSystemStatsResponse.gc_app_id)
}

// optional bytes stats_kv = 2;
inline bool CGCMsgGetSystemStatsResponse::_internal_has_stats_kv() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCMsgGetSystemStatsResponse::has_stats_kv() const {
  return _internal_has_stats_kv();
}
inline void CGCMsgGetSystemStatsResponse::clear_stats_kv() {
  _impl_.stats_kv_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGCMsgGetSystemStatsResponse::stats_kv() const {
  // @@protoc_insertion_point(field_get:CGCMsgGetSystemStatsResponse.stats_kv)
  return _internal_stats_kv();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCMsgGetSystemStatsResponse::set_stats_kv(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.stats_kv_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCMsgGetSystemStatsResponse.stats_kv)
}
inline std::string* CGCMsgGetSystemStatsResponse::mutable_stats_kv() {
  std::string* _s = _internal_mutable_stats_kv();
  // @@protoc_insertion_point(field_mutable:CGCMsgGetSystemStatsResponse.stats_kv)
  return _s;
}
inline const std::string& CGCMsgGetSystemStatsResponse::_internal_stats_kv() const {
  return _impl_.stats_kv_.Get();
}
inline void CGCMsgGetSystemStatsResponse::_internal_set_stats_kv(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stats_kv_.Set(value, GetArenaForAllocation());
}
inline std::string* CGCMsgGetSystemStatsResponse::_internal_mutable_stats_kv() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.stats_kv_.Mutable(GetArenaForAllocation());
}
inline std::string* CGCMsgGetSystemStatsResponse::release_stats_kv() {
  // @@protoc_insertion_point(field_release:CGCMsgGetSystemStatsResponse.stats_kv)
  if (!_internal_has_stats_kv()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.stats_kv_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stats_kv_.IsDefault()) {
    _impl_.stats_kv_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGCMsgGetSystemStatsResponse::set_allocated_stats_kv(std::string* stats_kv) {
  if (stats_kv != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.stats_kv_.SetAllocated(stats_kv, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stats_kv_.IsDefault()) {
    _impl_.stats_kv_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGCMsgGetSystemStatsResponse.stats_kv)
}

// optional uint32 active_jobs = 3;
inline bool CGCMsgGetSystemStatsResponse::_internal_has_active_jobs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGCMsgGetSystemStatsResponse::has_active_jobs() const {
  return _internal_has_active_jobs();
}
inline void CGCMsgGetSystemStatsResponse::clear_active_jobs() {
  _impl_.active_jobs_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CGCMsgGetSystemStatsResponse::_internal_active_jobs() const {
  return _impl_.active_jobs_;
}
inline uint32_t CGCMsgGetSystemStatsResponse::active_jobs() const {
  // @@protoc_insertion_point(field_get:CGCMsgGetSystemStatsResponse.active_jobs)
  return _internal_active_jobs();
}
inline void CGCMsgGetSystemStatsResponse::_internal_set_active_jobs(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.active_jobs_ = value;
}
inline void CGCMsgGetSystemStatsResponse::set_active_jobs(uint32_t value) {
  _internal_set_active_jobs(value);
  // @@protoc_insertion_point(field_set:CGCMsgGetSystemStatsResponse.active_jobs)
}

// optional uint32 yielding_jobs = 4;
inline bool CGCMsgGetSystemStatsResponse::_internal_has_yielding_jobs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGCMsgGetSystemStatsResponse::has_yielding_jobs() const {
  return _internal_has_yielding_jobs();
}
inline void CGCMsgGetSystemStatsResponse::clear_yielding_jobs() {
  _impl_.yielding_jobs_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CGCMsgGetSystemStatsResponse::_internal_yielding_jobs() const {
  return _impl_.yielding_jobs_;
}
inline uint32_t CGCMsgGetSystemStatsResponse::yielding_jobs() const {
  // @@protoc_insertion_point(field_get:CGCMsgGetSystemStatsResponse.yielding_jobs)
  return _internal_yielding_jobs();
}
inline void CGCMsgGetSystemStatsResponse::_internal_set_yielding_jobs(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.yielding_jobs_ = value;
}
inline void CGCMsgGetSystemStatsResponse::set_yielding_jobs(uint32_t value) {
  _internal_set_yielding_jobs(value);
  // @@protoc_insertion_point(field_set:CGCMsgGetSystemStatsResponse.yielding_jobs)
}

// optional uint32 user_sessions = 5;
inline bool CGCMsgGetSystemStatsResponse::_internal_has_user_sessions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGCMsgGetSystemStatsResponse::has_user_sessions() const {
  return _internal_has_user_sessions();
}
inline void CGCMsgGetSystemStatsResponse::clear_user_sessions() {
  _impl_.user_sessions_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CGCMsgGetSystemStatsResponse::_internal_user_sessions() const {
  return _impl_.user_sessions_;
}
inline uint32_t CGCMsgGetSystemStatsResponse::user_sessions() const {
  // @@protoc_insertion_point(field_get:CGCMsgGetSystemStatsResponse.user_sessions)
  return _internal_user_sessions();
}
inline void CGCMsgGetSystemStatsResponse::_internal_set_user_sessions(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.user_sessions_ = value;
}
inline void CGCMsgGetSystemStatsResponse::set_user_sessions(uint32_t value) {
  _internal_set_user_sessions(value);
  // @@protoc_insertion_point(field_set:CGCMsgGetSystemStatsResponse.user_sessions)
}

// optional uint32 game_server_sessions = 6;
inline bool CGCMsgGetSystemStatsResponse::_internal_has_game_server_sessions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CGCMsgGetSystemStatsResponse::has_game_server_sessions() const {
  return _internal_has_game_server_sessions();
}
inline void CGCMsgGetSystemStatsResponse::clear_game_server_sessions() {
  _impl_.game_server_sessions_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CGCMsgGetSystemStatsResponse::_internal_game_server_sessions() const {
  return _impl_.game_server_sessions_;
}
inline uint32_t CGCMsgGetSystemStatsResponse::game_server_sessions() const {
  // @@protoc_insertion_point(field_get:CGCMsgGetSystemStatsResponse.game_server_sessions)
  return _internal_game_server_sessions();
}
inline void CGCMsgGetSystemStatsResponse::_internal_set_game_server_sessions(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.game_server_sessions_ = value;
}
inline void CGCMsgGetSystemStatsResponse::set_game_server_sessions(uint32_t value) {
  _internal_set_game_server_sessions(value);
  // @@protoc_insertion_point(field_set:CGCMsgGetSystemStatsResponse.game_server_sessions)
}

// optional uint32 socaches = 7;
inline bool CGCMsgGetSystemStatsResponse::_internal_has_socaches() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CGCMsgGetSystemStatsResponse::has_socaches() const {
  return _internal_has_socaches();
}
inline void CGCMsgGetSystemStatsResponse::clear_socaches() {
  _impl_.socaches_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CGCMsgGetSystemStatsResponse::_internal_socaches() const {
  return _impl_.socaches_;
}
inline uint32_t CGCMsgGetSystemStatsResponse::socaches() const {
  // @@protoc_insertion_point(field_get:CGCMsgGetSystemStatsResponse.socaches)
  return _internal_socaches();
}
inline void CGCMsgGetSystemStatsResponse::_internal_set_socaches(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.socaches_ = value;
}
inline void CGCMsgGetSystemStatsResponse::set_socaches(uint32_t value) {
  _internal_set_socaches(value);
  // @@protoc_insertion_point(field_set:CGCMsgGetSystemStatsResponse.socaches)
}

// optional uint32 socaches_to_unload = 8;
inline bool CGCMsgGetSystemStatsResponse::_internal_has_socaches_to_unload() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CGCMsgGetSystemStatsResponse::has_socaches_to_unload() const {
  return _internal_has_socaches_to_unload();
}
inline void CGCMsgGetSystemStatsResponse::clear_socaches_to_unload() {
  _impl_.socaches_to_unload_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CGCMsgGetSystemStatsResponse::_internal_socaches_to_unload() const {
  return _impl_.socaches_to_unload_;
}
inline uint32_t CGCMsgGetSystemStatsResponse::socaches_to_unload() const {
  // @@protoc_insertion_point(field_get:CGCMsgGetSystemStatsResponse.socaches_to_unload)
  return _internal_socaches_to_unload();
}
inline void CGCMsgGetSystemStatsResponse::_internal_set_socaches_to_unload(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.socaches_to_unload_ = value;
}
inline void CGCMsgGetSystemStatsResponse::set_socaches_to_unload(uint32_t value) {
  _internal_set_socaches_to_unload(value);
  // @@protoc_insertion_point(field_set:CGCMsgGetSystemStatsResponse.socaches_to_unload)
}

// optional uint32 socaches_loading = 9;
inline bool CGCMsgGetSystemStatsResponse::_internal_has_socaches_loading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CGCMsgGetSystemStatsResponse::has_socaches_loading() const {
  return _internal_has_socaches_loading();
}
inline void CGCMsgGetSystemStatsResponse::clear_socaches_loading() {
  _impl_.socaches_loading_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CGCMsgGetSystemStatsResponse::_internal_socaches_loading() const {
  return _impl_.socaches_loading_;
}
inline uint32_t CGCMsgGetSystemStatsResponse::socaches_loading() const {
  // @@protoc_insertion_point(field_get:CGCMsgGetSystemStatsResponse.socaches_loading)
  return _internal_socaches_loading();
}
inline void CGCMsgGetSystemStatsResponse::_internal_set_socaches_loading(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.socaches_loading_ = value;
}
inline void CGCMsgGetSystemStatsResponse::set_socaches_loading(uint32_t value) {
  _internal_set_socaches_loading(value);
  // @@protoc_insertion_point(field_set:CGCMsgGetSystemStatsResponse.socaches_loading)
}

// optional uint32 writeback_queue = 10;
inline bool CGCMsgGetSystemStatsResponse::_internal_has_writeback_queue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CGCMsgGetSystemStatsResponse::has_writeback_queue() const {
  return _internal_has_writeback_queue();
}
inline void CGCMsgGetSystemStatsResponse::clear_writeback_queue() {
  _impl_.writeback_queue_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CGCMsgGetSystemStatsResponse::_internal_writeback_queue() const {
  return _impl_.writeback_queue_;
}
inline uint32_t CGCMsgGetSystemStatsResponse::writeback_queue() const {
  // @@protoc_insertion_point(field_get:CGCMsgGetSystemStatsResponse.writeback_queue)
  return _internal_writeback_queue();
}
inline void CGCMsgGetSystemStatsResponse::_internal_set_writeback_queue(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.writeback_queue_ = value;
}
inline void CGCMsgGetSystemStatsResponse::set_writeback_queue(uint32_t value) {
  _internal_set_writeback_queue(value);
  // @@protoc_insertion_point(field_set:CGCMsgGetSystemStatsResponse.writeback_queue)
}

// optional uint32 steamid_locks = 11;
inline bool CGCMsgGetSystemStatsResponse::_internal_has_steamid_locks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CGCMsgGetSystemStatsResponse::has_steamid_locks() const {
  return _internal_has_steamid_locks();
}
inline void CGCMsgGetSystemStatsResponse::clear_steamid_locks() {
  _impl_.steamid_locks_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CGCMsgGetSystemStatsResponse::_internal_steamid_locks() const {
  return _impl_.steamid_locks_;
}
inline uint32_t CGCMsgGetSystemStatsResponse::steamid_locks() const {
  // @@protoc_insertion_point(field_get:CGCMsgGetSystemStatsResponse.steamid_locks)
  return _internal_steamid_locks();
}
inline void CGCMsgGetSystemStatsResponse::_internal_set_steamid_locks(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.steamid_locks_ = value;
}
inline void CGCMsgGetSystemStatsResponse::set_steamid_locks(uint32_t value) {
  _internal_set_steamid_locks(value);
  // @@protoc_insertion_point(field_set:CGCMsgGetSystemStatsResponse.steamid_locks)
}

// optional uint32 logon_queue = 12;
inline bool CGCMsgGetSystemStatsResponse::_internal_has_logon_queue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CGCMsgGetSystemStatsResponse::has_logon_queue() const {
  return _internal_has_logon_queue();
}
inline void CGCMsgGetSystemStatsResponse::clear_logon_queue() {
  _impl_.logon_queue_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CGCMsgGetSystemStatsResponse::_internal_logon_queue() const {
  return _impl_.logon_queue_;
}
inline uint32_t CGCMsgGetSystemStatsResponse::logon_queue() const {
  // @@protoc_insertion_point(field_get:CGCMsgGetSystemStatsResponse.logon_queue)
  return _internal_logon_queue();
}
inline void CGCMsgGetSystemStatsResponse::_internal_set_logon_queue(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.logon_queue_ = value;
}
inline void CGCMsgGetSystemStatsResponse::set_logon_queue(uint32_t value) {
  _internal_set_logon_queue(value);
  // @@protoc_insertion_point(field_set:CGCMsgGetSystemStatsResponse.logon_queue)
}

// optional uint32 logon_jobs = 13;
inline bool CGCMsgGetSystemStatsResponse::_internal_has_logon_jobs() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CGCMsgGetSystemStatsResponse::has_logon_jobs() const {
  return _internal_has_logon_jobs();
}
inline void CGCMsgGetSystemStatsResponse::clear_logon_jobs() {
  _impl_.logon_jobs_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CGCMsgGetSystemStatsResponse::_internal_logon_jobs() const {
  return _impl_.logon_jobs_;
}
inline uint32_t CGCMsgGetSystemStatsResponse::logon_jobs() const {
  // @@protoc_insertion_point(field_get:CGCMsgGetSystemStatsResponse.logon_jobs)
  return _internal_logon_jobs();
}
inline void CGCMsgGetSystemStatsResponse::_internal_set_logon_jobs(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.logon_jobs_ = value;
}
inline void CGCMsgGetSystemStatsResponse::set_logon_jobs(uint32_t value) {
  _internal_set_logon_jobs(value);
  // @@protoc_insertion_point(field_set:CGCMsgGetSystemStatsResponse.logon_jobs)
}

// -------------------------------------------------------------------

// CMsgAMSendEmail_ReplacementToken

// optional string token_name = 1;
inline bool CMsgAMSendEmail_ReplacementToken::_internal_has_token_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAMSendEmail_ReplacementToken::has_token_name() const {
  return _internal_has_token_name();
}
inline void CMsgAMSendEmail_ReplacementToken::clear_token_name() {
  _impl_.token_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgAMSendEmail_ReplacementToken::token_name() const {
  // @@protoc_insertion_point(field_get:CMsgAMSendEmail.ReplacementToken.token_name)
  return _internal_token_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgAMSendEmail_ReplacementToken::set_token_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.token_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgAMSendEmail.ReplacementToken.token_name)
}
inline std::string* CMsgAMSendEmail_ReplacementToken::mutable_token_name() {
  std::string* _s = _internal_mutable_token_name();
  // @@protoc_insertion_point(field_mutable:CMsgAMSendEmail.ReplacementToken.token_name)
  return _s;
}
inline const std::string& CMsgAMSendEmail_ReplacementToken::_internal_token_name() const {
  return _impl_.token_name_.Get();
}
inline void CMsgAMSendEmail_ReplacementToken::_internal_set_token_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.token_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgAMSendEmail_ReplacementToken::_internal_mutable_token_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.token_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgAMSendEmail_ReplacementToken::release_token_name() {
  // @@protoc_insertion_point(field_release:CMsgAMSendEmail.ReplacementToken.token_name)
  if (!_internal_has_token_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.token_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_name_.IsDefault()) {
    _impl_.token_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgAMSendEmail_ReplacementToken::set_allocated_token_name(std::string* token_name) {
  if (token_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.token_name_.SetAllocated(token_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_name_.IsDefault()) {
    _impl_.token_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgAMSendEmail.ReplacementToken.token_name)
}

// optional string token_value = 2;
inline bool CMsgAMSendEmail_ReplacementToken::_internal_has_token_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAMSendEmail_ReplacementToken::has_token_value() const {
  return _internal_has_token_value();
}
inline void CMsgAMSendEmail_ReplacementToken::clear_token_value() {
  _impl_.token_value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgAMSendEmail_ReplacementToken::token_value() const {
  // @@protoc_insertion_point(field_get:CMsgAMSendEmail.ReplacementToken.token_value)
  return _internal_token_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgAMSendEmail_ReplacementToken::set_token_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.token_value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgAMSendEmail.ReplacementToken.token_value)
}
inline std::string* CMsgAMSendEmail_ReplacementToken::mutable_token_value() {
  std::string* _s = _internal_mutable_token_value();
  // @@protoc_insertion_point(field_mutable:CMsgAMSendEmail.ReplacementToken.token_value)
  return _s;
}
inline const std::string& CMsgAMSendEmail_ReplacementToken::_internal_token_value() const {
  return _impl_.token_value_.Get();
}
inline void CMsgAMSendEmail_ReplacementToken::_internal_set_token_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.token_value_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgAMSendEmail_ReplacementToken::_internal_mutable_token_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.token_value_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgAMSendEmail_ReplacementToken::release_token_value() {
  // @@protoc_insertion_point(field_release:CMsgAMSendEmail.ReplacementToken.token_value)
  if (!_internal_has_token_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.token_value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_value_.IsDefault()) {
    _impl_.token_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgAMSendEmail_ReplacementToken::set_allocated_token_value(std::string* token_value) {
  if (token_value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.token_value_.SetAllocated(token_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_value_.IsDefault()) {
    _impl_.token_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgAMSendEmail.ReplacementToken.token_value)
}

// -------------------------------------------------------------------

// CMsgAMSendEmail_PersonaNameReplacementToken

// optional fixed64 steamid = 1;
inline bool CMsgAMSendEmail_PersonaNameReplacementToken::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAMSendEmail_PersonaNameReplacementToken::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgAMSendEmail_PersonaNameReplacementToken::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgAMSendEmail_PersonaNameReplacementToken::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CMsgAMSendEmail_PersonaNameReplacementToken::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgAMSendEmail.PersonaNameReplacementToken.steamid)
  return _internal_steamid();
}
inline void CMsgAMSendEmail_PersonaNameReplacementToken::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.steamid_ = value;
}
inline void CMsgAMSendEmail_PersonaNameReplacementToken::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgAMSendEmail.PersonaNameReplacementToken.steamid)
}

// optional string token_name = 2;
inline bool CMsgAMSendEmail_PersonaNameReplacementToken::_internal_has_token_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAMSendEmail_PersonaNameReplacementToken::has_token_name() const {
  return _internal_has_token_name();
}
inline void CMsgAMSendEmail_PersonaNameReplacementToken::clear_token_name() {
  _impl_.token_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgAMSendEmail_PersonaNameReplacementToken::token_name() const {
  // @@protoc_insertion_point(field_get:CMsgAMSendEmail.PersonaNameReplacementToken.token_name)
  return _internal_token_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgAMSendEmail_PersonaNameReplacementToken::set_token_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.token_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgAMSendEmail.PersonaNameReplacementToken.token_name)
}
inline std::string* CMsgAMSendEmail_PersonaNameReplacementToken::mutable_token_name() {
  std::string* _s = _internal_mutable_token_name();
  // @@protoc_insertion_point(field_mutable:CMsgAMSendEmail.PersonaNameReplacementToken.token_name)
  return _s;
}
inline const std::string& CMsgAMSendEmail_PersonaNameReplacementToken::_internal_token_name() const {
  return _impl_.token_name_.Get();
}
inline void CMsgAMSendEmail_PersonaNameReplacementToken::_internal_set_token_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.token_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgAMSendEmail_PersonaNameReplacementToken::_internal_mutable_token_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.token_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgAMSendEmail_PersonaNameReplacementToken::release_token_name() {
  // @@protoc_insertion_point(field_release:CMsgAMSendEmail.PersonaNameReplacementToken.token_name)
  if (!_internal_has_token_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.token_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_name_.IsDefault()) {
    _impl_.token_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgAMSendEmail_PersonaNameReplacementToken::set_allocated_token_name(std::string* token_name) {
  if (token_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.token_name_.SetAllocated(token_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_name_.IsDefault()) {
    _impl_.token_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgAMSendEmail.PersonaNameReplacementToken.token_name)
}

// -------------------------------------------------------------------

// CMsgAMSendEmail

// optional fixed64 steamid = 1;
inline bool CMsgAMSendEmail::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAMSendEmail::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgAMSendEmail::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgAMSendEmail::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CMsgAMSendEmail::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgAMSendEmail.steamid)
  return _internal_steamid();
}
inline void CMsgAMSendEmail::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steamid_ = value;
}
inline void CMsgAMSendEmail::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgAMSendEmail.steamid)
}

// optional uint32 email_msg_type = 2;
inline bool CMsgAMSendEmail::_internal_has_email_msg_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAMSendEmail::has_email_msg_type() const {
  return _internal_has_email_msg_type();
}
inline void CMsgAMSendEmail::clear_email_msg_type() {
  _impl_.email_msg_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgAMSendEmail::_internal_email_msg_type() const {
  return _impl_.email_msg_type_;
}
inline uint32_t CMsgAMSendEmail::email_msg_type() const {
  // @@protoc_insertion_point(field_get:CMsgAMSendEmail.email_msg_type)
  return _internal_email_msg_type();
}
inline void CMsgAMSendEmail::_internal_set_email_msg_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.email_msg_type_ = value;
}
inline void CMsgAMSendEmail::set_email_msg_type(uint32_t value) {
  _internal_set_email_msg_type(value);
  // @@protoc_insertion_point(field_set:CMsgAMSendEmail.email_msg_type)
}

// optional uint32 email_format = 3;
inline bool CMsgAMSendEmail::_internal_has_email_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgAMSendEmail::has_email_format() const {
  return _internal_has_email_format();
}
inline void CMsgAMSendEmail::clear_email_format() {
  _impl_.email_format_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgAMSendEmail::_internal_email_format() const {
  return _impl_.email_format_;
}
inline uint32_t CMsgAMSendEmail::email_format() const {
  // @@protoc_insertion_point(field_get:CMsgAMSendEmail.email_format)
  return _internal_email_format();
}
inline void CMsgAMSendEmail::_internal_set_email_format(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.email_format_ = value;
}
inline void CMsgAMSendEmail::set_email_format(uint32_t value) {
  _internal_set_email_format(value);
  // @@protoc_insertion_point(field_set:CMsgAMSendEmail.email_format)
}

// repeated .CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
inline int CMsgAMSendEmail::_internal_persona_name_tokens_size() const {
  return _impl_.persona_name_tokens_.size();
}
inline int CMsgAMSendEmail::persona_name_tokens_size() const {
  return _internal_persona_name_tokens_size();
}
inline void CMsgAMSendEmail::clear_persona_name_tokens() {
  _impl_.persona_name_tokens_.Clear();
}
inline ::CMsgAMSendEmail_PersonaNameReplacementToken* CMsgAMSendEmail::mutable_persona_name_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgAMSendEmail.persona_name_tokens)
  return _impl_.persona_name_tokens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAMSendEmail_PersonaNameReplacementToken >*
CMsgAMSendEmail::mutable_persona_name_tokens() {
  // @@protoc_insertion_point(field_mutable_list:CMsgAMSendEmail.persona_name_tokens)
  return &_impl_.persona_name_tokens_;
}
inline const ::CMsgAMSendEmail_PersonaNameReplacementToken& CMsgAMSendEmail::_internal_persona_name_tokens(int index) const {
  return _impl_.persona_name_tokens_.Get(index);
}
inline const ::CMsgAMSendEmail_PersonaNameReplacementToken& CMsgAMSendEmail::persona_name_tokens(int index) const {
  // @@protoc_insertion_point(field_get:CMsgAMSendEmail.persona_name_tokens)
  return _internal_persona_name_tokens(index);
}
inline ::CMsgAMSendEmail_PersonaNameReplacementToken* CMsgAMSendEmail::_internal_add_persona_name_tokens() {
  return _impl_.persona_name_tokens_.Add();
}
inline ::CMsgAMSendEmail_PersonaNameReplacementToken* CMsgAMSendEmail::add_persona_name_tokens() {
  ::CMsgAMSendEmail_PersonaNameReplacementToken* _add = _internal_add_persona_name_tokens();
  // @@protoc_insertion_point(field_add:CMsgAMSendEmail.persona_name_tokens)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAMSendEmail_PersonaNameReplacementToken >&
CMsgAMSendEmail::persona_name_tokens() const {
  // @@protoc_insertion_point(field_list:CMsgAMSendEmail.persona_name_tokens)
  return _impl_.persona_name_tokens_;
}

// optional uint32 source_gc = 6;
inline bool CMsgAMSendEmail::_internal_has_source_gc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgAMSendEmail::has_source_gc() const {
  return _internal_has_source_gc();
}
inline void CMsgAMSendEmail::clear_source_gc() {
  _impl_.source_gc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgAMSendEmail::_internal_source_gc() const {
  return _impl_.source_gc_;
}
inline uint32_t CMsgAMSendEmail::source_gc() const {
  // @@protoc_insertion_point(field_get:CMsgAMSendEmail.source_gc)
  return _internal_source_gc();
}
inline void CMsgAMSendEmail::_internal_set_source_gc(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.source_gc_ = value;
}
inline void CMsgAMSendEmail::set_source_gc(uint32_t value) {
  _internal_set_source_gc(value);
  // @@protoc_insertion_point(field_set:CMsgAMSendEmail.source_gc)
}

// repeated .CMsgAMSendEmail.ReplacementToken tokens = 7;
inline int CMsgAMSendEmail::_internal_tokens_size() const {
  return _impl_.tokens_.size();
}
inline int CMsgAMSendEmail::tokens_size() const {
  return _internal_tokens_size();
}
inline void CMsgAMSendEmail::clear_tokens() {
  _impl_.tokens_.Clear();
}
inline ::CMsgAMSendEmail_ReplacementToken* CMsgAMSendEmail::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgAMSendEmail.tokens)
  return _impl_.tokens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAMSendEmail_ReplacementToken >*
CMsgAMSendEmail::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:CMsgAMSendEmail.tokens)
  return &_impl_.tokens_;
}
inline const ::CMsgAMSendEmail_ReplacementToken& CMsgAMSendEmail::_internal_tokens(int index) const {
  return _impl_.tokens_.Get(index);
}
inline const ::CMsgAMSendEmail_ReplacementToken& CMsgAMSendEmail::tokens(int index) const {
  // @@protoc_insertion_point(field_get:CMsgAMSendEmail.tokens)
  return _internal_tokens(index);
}
inline ::CMsgAMSendEmail_ReplacementToken* CMsgAMSendEmail::_internal_add_tokens() {
  return _impl_.tokens_.Add();
}
inline ::CMsgAMSendEmail_ReplacementToken* CMsgAMSendEmail::add_tokens() {
  ::CMsgAMSendEmail_ReplacementToken* _add = _internal_add_tokens();
  // @@protoc_insertion_point(field_add:CMsgAMSendEmail.tokens)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAMSendEmail_ReplacementToken >&
CMsgAMSendEmail::tokens() const {
  // @@protoc_insertion_point(field_list:CMsgAMSendEmail.tokens)
  return _impl_.tokens_;
}

// -------------------------------------------------------------------

// CMsgAMSendEmailResponse

// optional uint32 eresult = 1 [default = 2];
inline bool CMsgAMSendEmailResponse::_internal_has_eresult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAMSendEmailResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgAMSendEmailResponse::clear_eresult() {
  _impl_.eresult_ = 2u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgAMSendEmailResponse::_internal_eresult() const {
  return _impl_.eresult_;
}
inline uint32_t CMsgAMSendEmailResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgAMSendEmailResponse.eresult)
  return _internal_eresult();
}
inline void CMsgAMSendEmailResponse::_internal_set_eresult(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.eresult_ = value;
}
inline void CMsgAMSendEmailResponse::set_eresult(uint32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgAMSendEmailResponse.eresult)
}

// -------------------------------------------------------------------

// CMsgGCGetEmailTemplate

// optional uint32 app_id = 1;
inline bool CMsgGCGetEmailTemplate::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCGetEmailTemplate::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgGCGetEmailTemplate::clear_app_id() {
  _impl_.app_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGCGetEmailTemplate::_internal_app_id() const {
  return _impl_.app_id_;
}
inline uint32_t CMsgGCGetEmailTemplate::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetEmailTemplate.app_id)
  return _internal_app_id();
}
inline void CMsgGCGetEmailTemplate::_internal_set_app_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.app_id_ = value;
}
inline void CMsgGCGetEmailTemplate::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCGetEmailTemplate.app_id)
}

// optional uint32 email_msg_type = 2;
inline bool CMsgGCGetEmailTemplate::_internal_has_email_msg_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCGetEmailTemplate::has_email_msg_type() const {
  return _internal_has_email_msg_type();
}
inline void CMsgGCGetEmailTemplate::clear_email_msg_type() {
  _impl_.email_msg_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCGetEmailTemplate::_internal_email_msg_type() const {
  return _impl_.email_msg_type_;
}
inline uint32_t CMsgGCGetEmailTemplate::email_msg_type() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetEmailTemplate.email_msg_type)
  return _internal_email_msg_type();
}
inline void CMsgGCGetEmailTemplate::_internal_set_email_msg_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.email_msg_type_ = value;
}
inline void CMsgGCGetEmailTemplate::set_email_msg_type(uint32_t value) {
  _internal_set_email_msg_type(value);
  // @@protoc_insertion_point(field_set:CMsgGCGetEmailTemplate.email_msg_type)
}

// optional int32 email_lang = 3;
inline bool CMsgGCGetEmailTemplate::_internal_has_email_lang() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCGetEmailTemplate::has_email_lang() const {
  return _internal_has_email_lang();
}
inline void CMsgGCGetEmailTemplate::clear_email_lang() {
  _impl_.email_lang_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgGCGetEmailTemplate::_internal_email_lang() const {
  return _impl_.email_lang_;
}
inline int32_t CMsgGCGetEmailTemplate::email_lang() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetEmailTemplate.email_lang)
  return _internal_email_lang();
}
inline void CMsgGCGetEmailTemplate::_internal_set_email_lang(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.email_lang_ = value;
}
inline void CMsgGCGetEmailTemplate::set_email_lang(int32_t value) {
  _internal_set_email_lang(value);
  // @@protoc_insertion_point(field_set:CMsgGCGetEmailTemplate.email_lang)
}

// optional int32 email_format = 4;
inline bool CMsgGCGetEmailTemplate::_internal_has_email_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCGetEmailTemplate::has_email_format() const {
  return _internal_has_email_format();
}
inline void CMsgGCGetEmailTemplate::clear_email_format() {
  _impl_.email_format_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgGCGetEmailTemplate::_internal_email_format() const {
  return _impl_.email_format_;
}
inline int32_t CMsgGCGetEmailTemplate::email_format() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetEmailTemplate.email_format)
  return _internal_email_format();
}
inline void CMsgGCGetEmailTemplate::_internal_set_email_format(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.email_format_ = value;
}
inline void CMsgGCGetEmailTemplate::set_email_format(int32_t value) {
  _internal_set_email_format(value);
  // @@protoc_insertion_point(field_set:CMsgGCGetEmailTemplate.email_format)
}

// -------------------------------------------------------------------

// CMsgGCGetEmailTemplateResponse

// optional uint32 eresult = 1 [default = 2];
inline bool CMsgGCGetEmailTemplateResponse::_internal_has_eresult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCGetEmailTemplateResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgGCGetEmailTemplateResponse::clear_eresult() {
  _impl_.eresult_ = 2u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGCGetEmailTemplateResponse::_internal_eresult() const {
  return _impl_.eresult_;
}
inline uint32_t CMsgGCGetEmailTemplateResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetEmailTemplateResponse.eresult)
  return _internal_eresult();
}
inline void CMsgGCGetEmailTemplateResponse::_internal_set_eresult(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.eresult_ = value;
}
inline void CMsgGCGetEmailTemplateResponse::set_eresult(uint32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgGCGetEmailTemplateResponse.eresult)
}

// optional bool template_exists = 2;
inline bool CMsgGCGetEmailTemplateResponse::_internal_has_template_exists() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCGetEmailTemplateResponse::has_template_exists() const {
  return _internal_has_template_exists();
}
inline void CMsgGCGetEmailTemplateResponse::clear_template_exists() {
  _impl_.template_exists_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgGCGetEmailTemplateResponse::_internal_template_exists() const {
  return _impl_.template_exists_;
}
inline bool CMsgGCGetEmailTemplateResponse::template_exists() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetEmailTemplateResponse.template_exists)
  return _internal_template_exists();
}
inline void CMsgGCGetEmailTemplateResponse::_internal_set_template_exists(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.template_exists_ = value;
}
inline void CMsgGCGetEmailTemplateResponse::set_template_exists(bool value) {
  _internal_set_template_exists(value);
  // @@protoc_insertion_point(field_set:CMsgGCGetEmailTemplateResponse.template_exists)
}

// optional string template = 3;
inline bool CMsgGCGetEmailTemplateResponse::_internal_has_template_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCGetEmailTemplateResponse::has_template_() const {
  return _internal_has_template_();
}
inline void CMsgGCGetEmailTemplateResponse::clear_template_() {
  _impl_.template__.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCGetEmailTemplateResponse::template_() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetEmailTemplateResponse.template)
  return _internal_template_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCGetEmailTemplateResponse::set_template_(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.template__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCGetEmailTemplateResponse.template)
}
inline std::string* CMsgGCGetEmailTemplateResponse::mutable_template_() {
  std::string* _s = _internal_mutable_template_();
  // @@protoc_insertion_point(field_mutable:CMsgGCGetEmailTemplateResponse.template)
  return _s;
}
inline const std::string& CMsgGCGetEmailTemplateResponse::_internal_template_() const {
  return _impl_.template__.Get();
}
inline void CMsgGCGetEmailTemplateResponse::_internal_set_template_(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.template__.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGCGetEmailTemplateResponse::_internal_mutable_template_() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.template__.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGCGetEmailTemplateResponse::release_template_() {
  // @@protoc_insertion_point(field_release:CMsgGCGetEmailTemplateResponse.template)
  if (!_internal_has_template_()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.template__.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.template__.IsDefault()) {
    _impl_.template__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGCGetEmailTemplateResponse::set_allocated_template_(std::string* template_) {
  if (template_ != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.template__.SetAllocated(template_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.template__.IsDefault()) {
    _impl_.template__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGCGetEmailTemplateResponse.template)
}

// -------------------------------------------------------------------

// CMsgAMGrantGuestPasses2

// optional fixed64 steam_id = 1;
inline bool CMsgAMGrantGuestPasses2::_internal_has_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAMGrantGuestPasses2::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgAMGrantGuestPasses2::clear_steam_id() {
  _impl_.steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgAMGrantGuestPasses2::_internal_steam_id() const {
  return _impl_.steam_id_;
}
inline uint64_t CMsgAMGrantGuestPasses2::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgAMGrantGuestPasses2.steam_id)
  return _internal_steam_id();
}
inline void CMsgAMGrantGuestPasses2::_internal_set_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steam_id_ = value;
}
inline void CMsgAMGrantGuestPasses2::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgAMGrantGuestPasses2.steam_id)
}

// optional uint32 package_id = 2;
inline bool CMsgAMGrantGuestPasses2::_internal_has_package_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAMGrantGuestPasses2::has_package_id() const {
  return _internal_has_package_id();
}
inline void CMsgAMGrantGuestPasses2::clear_package_id() {
  _impl_.package_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgAMGrantGuestPasses2::_internal_package_id() const {
  return _impl_.package_id_;
}
inline uint32_t CMsgAMGrantGuestPasses2::package_id() const {
  // @@protoc_insertion_point(field_get:CMsgAMGrantGuestPasses2.package_id)
  return _internal_package_id();
}
inline void CMsgAMGrantGuestPasses2::_internal_set_package_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.package_id_ = value;
}
inline void CMsgAMGrantGuestPasses2::set_package_id(uint32_t value) {
  _internal_set_package_id(value);
  // @@protoc_insertion_point(field_set:CMsgAMGrantGuestPasses2.package_id)
}

// optional int32 passes_to_grant = 3;
inline bool CMsgAMGrantGuestPasses2::_internal_has_passes_to_grant() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgAMGrantGuestPasses2::has_passes_to_grant() const {
  return _internal_has_passes_to_grant();
}
inline void CMsgAMGrantGuestPasses2::clear_passes_to_grant() {
  _impl_.passes_to_grant_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgAMGrantGuestPasses2::_internal_passes_to_grant() const {
  return _impl_.passes_to_grant_;
}
inline int32_t CMsgAMGrantGuestPasses2::passes_to_grant() const {
  // @@protoc_insertion_point(field_get:CMsgAMGrantGuestPasses2.passes_to_grant)
  return _internal_passes_to_grant();
}
inline void CMsgAMGrantGuestPasses2::_internal_set_passes_to_grant(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.passes_to_grant_ = value;
}
inline void CMsgAMGrantGuestPasses2::set_passes_to_grant(int32_t value) {
  _internal_set_passes_to_grant(value);
  // @@protoc_insertion_point(field_set:CMsgAMGrantGuestPasses2.passes_to_grant)
}

// optional int32 days_to_expiration = 4;
inline bool CMsgAMGrantGuestPasses2::_internal_has_days_to_expiration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgAMGrantGuestPasses2::has_days_to_expiration() const {
  return _internal_has_days_to_expiration();
}
inline void CMsgAMGrantGuestPasses2::clear_days_to_expiration() {
  _impl_.days_to_expiration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgAMGrantGuestPasses2::_internal_days_to_expiration() const {
  return _impl_.days_to_expiration_;
}
inline int32_t CMsgAMGrantGuestPasses2::days_to_expiration() const {
  // @@protoc_insertion_point(field_get:CMsgAMGrantGuestPasses2.days_to_expiration)
  return _internal_days_to_expiration();
}
inline void CMsgAMGrantGuestPasses2::_internal_set_days_to_expiration(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.days_to_expiration_ = value;
}
inline void CMsgAMGrantGuestPasses2::set_days_to_expiration(int32_t value) {
  _internal_set_days_to_expiration(value);
  // @@protoc_insertion_point(field_set:CMsgAMGrantGuestPasses2.days_to_expiration)
}

// optional int32 action = 5;
inline bool CMsgAMGrantGuestPasses2::_internal_has_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgAMGrantGuestPasses2::has_action() const {
  return _internal_has_action();
}
inline void CMsgAMGrantGuestPasses2::clear_action() {
  _impl_.action_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t CMsgAMGrantGuestPasses2::_internal_action() const {
  return _impl_.action_;
}
inline int32_t CMsgAMGrantGuestPasses2::action() const {
  // @@protoc_insertion_point(field_get:CMsgAMGrantGuestPasses2.action)
  return _internal_action();
}
inline void CMsgAMGrantGuestPasses2::_internal_set_action(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.action_ = value;
}
inline void CMsgAMGrantGuestPasses2::set_action(int32_t value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:CMsgAMGrantGuestPasses2.action)
}

// -------------------------------------------------------------------

// CMsgAMGrantGuestPasses2Response

// optional int32 eresult = 1 [default = 2];
inline bool CMsgAMGrantGuestPasses2Response::_internal_has_eresult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAMGrantGuestPasses2Response::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgAMGrantGuestPasses2Response::clear_eresult() {
  _impl_.eresult_ = 2;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgAMGrantGuestPasses2Response::_internal_eresult() const {
  return _impl_.eresult_;
}
inline int32_t CMsgAMGrantGuestPasses2Response::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgAMGrantGuestPasses2Response.eresult)
  return _internal_eresult();
}
inline void CMsgAMGrantGuestPasses2Response::_internal_set_eresult(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.eresult_ = value;
}
inline void CMsgAMGrantGuestPasses2Response::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgAMGrantGuestPasses2Response.eresult)
}

// optional int32 passes_granted = 2 [default = 0];
inline bool CMsgAMGrantGuestPasses2Response::_internal_has_passes_granted() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAMGrantGuestPasses2Response::has_passes_granted() const {
  return _internal_has_passes_granted();
}
inline void CMsgAMGrantGuestPasses2Response::clear_passes_granted() {
  _impl_.passes_granted_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgAMGrantGuestPasses2Response::_internal_passes_granted() const {
  return _impl_.passes_granted_;
}
inline int32_t CMsgAMGrantGuestPasses2Response::passes_granted() const {
  // @@protoc_insertion_point(field_get:CMsgAMGrantGuestPasses2Response.passes_granted)
  return _internal_passes_granted();
}
inline void CMsgAMGrantGuestPasses2Response::_internal_set_passes_granted(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.passes_granted_ = value;
}
inline void CMsgAMGrantGuestPasses2Response::set_passes_granted(int32_t value) {
  _internal_set_passes_granted(value);
  // @@protoc_insertion_point(field_set:CMsgAMGrantGuestPasses2Response.passes_granted)
}

// -------------------------------------------------------------------

// CMsgGCGetPersonaNames

// repeated fixed64 steamids = 1;
inline int CMsgGCGetPersonaNames::_internal_steamids_size() const {
  return _impl_.steamids_.size();
}
inline int CMsgGCGetPersonaNames::steamids_size() const {
  return _internal_steamids_size();
}
inline void CMsgGCGetPersonaNames::clear_steamids() {
  _impl_.steamids_.Clear();
}
inline uint64_t CMsgGCGetPersonaNames::_internal_steamids(int index) const {
  return _impl_.steamids_.Get(index);
}
inline uint64_t CMsgGCGetPersonaNames::steamids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPersonaNames.steamids)
  return _internal_steamids(index);
}
inline void CMsgGCGetPersonaNames::set_steamids(int index, uint64_t value) {
  _impl_.steamids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCGetPersonaNames.steamids)
}
inline void CMsgGCGetPersonaNames::_internal_add_steamids(uint64_t value) {
  _impl_.steamids_.Add(value);
}
inline void CMsgGCGetPersonaNames::add_steamids(uint64_t value) {
  _internal_add_steamids(value);
  // @@protoc_insertion_point(field_add:CMsgGCGetPersonaNames.steamids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgGCGetPersonaNames::_internal_steamids() const {
  return _impl_.steamids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgGCGetPersonaNames::steamids() const {
  // @@protoc_insertion_point(field_list:CMsgGCGetPersonaNames.steamids)
  return _internal_steamids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgGCGetPersonaNames::_internal_mutable_steamids() {
  return &_impl_.steamids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgGCGetPersonaNames::mutable_steamids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCGetPersonaNames.steamids)
  return _internal_mutable_steamids();
}

// -------------------------------------------------------------------

// CMsgGCGetPersonaNames_Response_PersonaName

// optional fixed64 steamid = 1;
inline bool CMsgGCGetPersonaNames_Response_PersonaName::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCGetPersonaNames_Response_PersonaName::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgGCGetPersonaNames_Response_PersonaName::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgGCGetPersonaNames_Response_PersonaName::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CMsgGCGetPersonaNames_Response_PersonaName::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPersonaNames_Response.PersonaName.steamid)
  return _internal_steamid();
}
inline void CMsgGCGetPersonaNames_Response_PersonaName::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.steamid_ = value;
}
inline void CMsgGCGetPersonaNames_Response_PersonaName::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgGCGetPersonaNames_Response.PersonaName.steamid)
}

// optional string persona_name = 2;
inline bool CMsgGCGetPersonaNames_Response_PersonaName::_internal_has_persona_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCGetPersonaNames_Response_PersonaName::has_persona_name() const {
  return _internal_has_persona_name();
}
inline void CMsgGCGetPersonaNames_Response_PersonaName::clear_persona_name() {
  _impl_.persona_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCGetPersonaNames_Response_PersonaName::persona_name() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPersonaNames_Response.PersonaName.persona_name)
  return _internal_persona_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCGetPersonaNames_Response_PersonaName::set_persona_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.persona_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCGetPersonaNames_Response.PersonaName.persona_name)
}
inline std::string* CMsgGCGetPersonaNames_Response_PersonaName::mutable_persona_name() {
  std::string* _s = _internal_mutable_persona_name();
  // @@protoc_insertion_point(field_mutable:CMsgGCGetPersonaNames_Response.PersonaName.persona_name)
  return _s;
}
inline const std::string& CMsgGCGetPersonaNames_Response_PersonaName::_internal_persona_name() const {
  return _impl_.persona_name_.Get();
}
inline void CMsgGCGetPersonaNames_Response_PersonaName::_internal_set_persona_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.persona_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGCGetPersonaNames_Response_PersonaName::_internal_mutable_persona_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.persona_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGCGetPersonaNames_Response_PersonaName::release_persona_name() {
  // @@protoc_insertion_point(field_release:CMsgGCGetPersonaNames_Response.PersonaName.persona_name)
  if (!_internal_has_persona_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.persona_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.persona_name_.IsDefault()) {
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGCGetPersonaNames_Response_PersonaName::set_allocated_persona_name(std::string* persona_name) {
  if (persona_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.persona_name_.SetAllocated(persona_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.persona_name_.IsDefault()) {
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGCGetPersonaNames_Response.PersonaName.persona_name)
}

// -------------------------------------------------------------------

// CMsgGCGetPersonaNames_Response

// repeated .CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
inline int CMsgGCGetPersonaNames_Response::_internal_succeeded_lookups_size() const {
  return _impl_.succeeded_lookups_.size();
}
inline int CMsgGCGetPersonaNames_Response::succeeded_lookups_size() const {
  return _internal_succeeded_lookups_size();
}
inline void CMsgGCGetPersonaNames_Response::clear_succeeded_lookups() {
  _impl_.succeeded_lookups_.Clear();
}
inline ::CMsgGCGetPersonaNames_Response_PersonaName* CMsgGCGetPersonaNames_Response::mutable_succeeded_lookups(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCGetPersonaNames_Response.succeeded_lookups)
  return _impl_.succeeded_lookups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCGetPersonaNames_Response_PersonaName >*
CMsgGCGetPersonaNames_Response::mutable_succeeded_lookups() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCGetPersonaNames_Response.succeeded_lookups)
  return &_impl_.succeeded_lookups_;
}
inline const ::CMsgGCGetPersonaNames_Response_PersonaName& CMsgGCGetPersonaNames_Response::_internal_succeeded_lookups(int index) const {
  return _impl_.succeeded_lookups_.Get(index);
}
inline const ::CMsgGCGetPersonaNames_Response_PersonaName& CMsgGCGetPersonaNames_Response::succeeded_lookups(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPersonaNames_Response.succeeded_lookups)
  return _internal_succeeded_lookups(index);
}
inline ::CMsgGCGetPersonaNames_Response_PersonaName* CMsgGCGetPersonaNames_Response::_internal_add_succeeded_lookups() {
  return _impl_.succeeded_lookups_.Add();
}
inline ::CMsgGCGetPersonaNames_Response_PersonaName* CMsgGCGetPersonaNames_Response::add_succeeded_lookups() {
  ::CMsgGCGetPersonaNames_Response_PersonaName* _add = _internal_add_succeeded_lookups();
  // @@protoc_insertion_point(field_add:CMsgGCGetPersonaNames_Response.succeeded_lookups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCGetPersonaNames_Response_PersonaName >&
CMsgGCGetPersonaNames_Response::succeeded_lookups() const {
  // @@protoc_insertion_point(field_list:CMsgGCGetPersonaNames_Response.succeeded_lookups)
  return _impl_.succeeded_lookups_;
}

// repeated fixed64 failed_lookup_steamids = 2;
inline int CMsgGCGetPersonaNames_Response::_internal_failed_lookup_steamids_size() const {
  return _impl_.failed_lookup_steamids_.size();
}
inline int CMsgGCGetPersonaNames_Response::failed_lookup_steamids_size() const {
  return _internal_failed_lookup_steamids_size();
}
inline void CMsgGCGetPersonaNames_Response::clear_failed_lookup_steamids() {
  _impl_.failed_lookup_steamids_.Clear();
}
inline uint64_t CMsgGCGetPersonaNames_Response::_internal_failed_lookup_steamids(int index) const {
  return _impl_.failed_lookup_steamids_.Get(index);
}
inline uint64_t CMsgGCGetPersonaNames_Response::failed_lookup_steamids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPersonaNames_Response.failed_lookup_steamids)
  return _internal_failed_lookup_steamids(index);
}
inline void CMsgGCGetPersonaNames_Response::set_failed_lookup_steamids(int index, uint64_t value) {
  _impl_.failed_lookup_steamids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCGetPersonaNames_Response.failed_lookup_steamids)
}
inline void CMsgGCGetPersonaNames_Response::_internal_add_failed_lookup_steamids(uint64_t value) {
  _impl_.failed_lookup_steamids_.Add(value);
}
inline void CMsgGCGetPersonaNames_Response::add_failed_lookup_steamids(uint64_t value) {
  _internal_add_failed_lookup_steamids(value);
  // @@protoc_insertion_point(field_add:CMsgGCGetPersonaNames_Response.failed_lookup_steamids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgGCGetPersonaNames_Response::_internal_failed_lookup_steamids() const {
  return _impl_.failed_lookup_steamids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgGCGetPersonaNames_Response::failed_lookup_steamids() const {
  // @@protoc_insertion_point(field_list:CMsgGCGetPersonaNames_Response.failed_lookup_steamids)
  return _internal_failed_lookup_steamids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgGCGetPersonaNames_Response::_internal_mutable_failed_lookup_steamids() {
  return &_impl_.failed_lookup_steamids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgGCGetPersonaNames_Response::mutable_failed_lookup_steamids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCGetPersonaNames_Response.failed_lookup_steamids)
  return _internal_mutable_failed_lookup_steamids();
}

// -------------------------------------------------------------------

// CMsgGCCheckFriendship

// optional fixed64 steamid_left = 1;
inline bool CMsgGCCheckFriendship::_internal_has_steamid_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCheckFriendship::has_steamid_left() const {
  return _internal_has_steamid_left();
}
inline void CMsgGCCheckFriendship::clear_steamid_left() {
  _impl_.steamid_left_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGCCheckFriendship::_internal_steamid_left() const {
  return _impl_.steamid_left_;
}
inline uint64_t CMsgGCCheckFriendship::steamid_left() const {
  // @@protoc_insertion_point(field_get:CMsgGCCheckFriendship.steamid_left)
  return _internal_steamid_left();
}
inline void CMsgGCCheckFriendship::_internal_set_steamid_left(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steamid_left_ = value;
}
inline void CMsgGCCheckFriendship::set_steamid_left(uint64_t value) {
  _internal_set_steamid_left(value);
  // @@protoc_insertion_point(field_set:CMsgGCCheckFriendship.steamid_left)
}

// optional fixed64 steamid_right = 2;
inline bool CMsgGCCheckFriendship::_internal_has_steamid_right() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCheckFriendship::has_steamid_right() const {
  return _internal_has_steamid_right();
}
inline void CMsgGCCheckFriendship::clear_steamid_right() {
  _impl_.steamid_right_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgGCCheckFriendship::_internal_steamid_right() const {
  return _impl_.steamid_right_;
}
inline uint64_t CMsgGCCheckFriendship::steamid_right() const {
  // @@protoc_insertion_point(field_get:CMsgGCCheckFriendship.steamid_right)
  return _internal_steamid_right();
}
inline void CMsgGCCheckFriendship::_internal_set_steamid_right(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.steamid_right_ = value;
}
inline void CMsgGCCheckFriendship::set_steamid_right(uint64_t value) {
  _internal_set_steamid_right(value);
  // @@protoc_insertion_point(field_set:CMsgGCCheckFriendship.steamid_right)
}

// -------------------------------------------------------------------

// CMsgGCCheckFriendship_Response

// optional bool success = 1;
inline bool CMsgGCCheckFriendship_Response::_internal_has_success() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCheckFriendship_Response::has_success() const {
  return _internal_has_success();
}
inline void CMsgGCCheckFriendship_Response::clear_success() {
  _impl_.success_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgGCCheckFriendship_Response::_internal_success() const {
  return _impl_.success_;
}
inline bool CMsgGCCheckFriendship_Response::success() const {
  // @@protoc_insertion_point(field_get:CMsgGCCheckFriendship_Response.success)
  return _internal_success();
}
inline void CMsgGCCheckFriendship_Response::_internal_set_success(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.success_ = value;
}
inline void CMsgGCCheckFriendship_Response::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:CMsgGCCheckFriendship_Response.success)
}

// optional bool found_friendship = 2;
inline bool CMsgGCCheckFriendship_Response::_internal_has_found_friendship() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCheckFriendship_Response::has_found_friendship() const {
  return _internal_has_found_friendship();
}
inline void CMsgGCCheckFriendship_Response::clear_found_friendship() {
  _impl_.found_friendship_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgGCCheckFriendship_Response::_internal_found_friendship() const {
  return _impl_.found_friendship_;
}
inline bool CMsgGCCheckFriendship_Response::found_friendship() const {
  // @@protoc_insertion_point(field_get:CMsgGCCheckFriendship_Response.found_friendship)
  return _internal_found_friendship();
}
inline void CMsgGCCheckFriendship_Response::_internal_set_found_friendship(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.found_friendship_ = value;
}
inline void CMsgGCCheckFriendship_Response::set_found_friendship(bool value) {
  _internal_set_found_friendship(value);
  // @@protoc_insertion_point(field_set:CMsgGCCheckFriendship_Response.found_friendship)
}

// -------------------------------------------------------------------

// CMsgGCGetAppFriendsList

// optional fixed64 steamid = 1;
inline bool CMsgGCGetAppFriendsList::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCGetAppFriendsList::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgGCGetAppFriendsList::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGCGetAppFriendsList::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CMsgGCGetAppFriendsList::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetAppFriendsList.steamid)
  return _internal_steamid();
}
inline void CMsgGCGetAppFriendsList::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steamid_ = value;
}
inline void CMsgGCGetAppFriendsList::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgGCGetAppFriendsList.steamid)
}

// optional bool include_friendship_timestamps = 2;
inline bool CMsgGCGetAppFriendsList::_internal_has_include_friendship_timestamps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCGetAppFriendsList::has_include_friendship_timestamps() const {
  return _internal_has_include_friendship_timestamps();
}
inline void CMsgGCGetAppFriendsList::clear_include_friendship_timestamps() {
  _impl_.include_friendship_timestamps_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgGCGetAppFriendsList::_internal_include_friendship_timestamps() const {
  return _impl_.include_friendship_timestamps_;
}
inline bool CMsgGCGetAppFriendsList::include_friendship_timestamps() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetAppFriendsList.include_friendship_timestamps)
  return _internal_include_friendship_timestamps();
}
inline void CMsgGCGetAppFriendsList::_internal_set_include_friendship_timestamps(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.include_friendship_timestamps_ = value;
}
inline void CMsgGCGetAppFriendsList::set_include_friendship_timestamps(bool value) {
  _internal_set_include_friendship_timestamps(value);
  // @@protoc_insertion_point(field_set:CMsgGCGetAppFriendsList.include_friendship_timestamps)
}

// -------------------------------------------------------------------

// CMsgGCGetAppFriendsList_Response

// optional bool success = 1;
inline bool CMsgGCGetAppFriendsList_Response::_internal_has_success() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCGetAppFriendsList_Response::has_success() const {
  return _internal_has_success();
}
inline void CMsgGCGetAppFriendsList_Response::clear_success() {
  _impl_.success_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgGCGetAppFriendsList_Response::_internal_success() const {
  return _impl_.success_;
}
inline bool CMsgGCGetAppFriendsList_Response::success() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetAppFriendsList_Response.success)
  return _internal_success();
}
inline void CMsgGCGetAppFriendsList_Response::_internal_set_success(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.success_ = value;
}
inline void CMsgGCGetAppFriendsList_Response::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:CMsgGCGetAppFriendsList_Response.success)
}

// repeated fixed64 steamids = 2;
inline int CMsgGCGetAppFriendsList_Response::_internal_steamids_size() const {
  return _impl_.steamids_.size();
}
inline int CMsgGCGetAppFriendsList_Response::steamids_size() const {
  return _internal_steamids_size();
}
inline void CMsgGCGetAppFriendsList_Response::clear_steamids() {
  _impl_.steamids_.Clear();
}
inline uint64_t CMsgGCGetAppFriendsList_Response::_internal_steamids(int index) const {
  return _impl_.steamids_.Get(index);
}
inline uint64_t CMsgGCGetAppFriendsList_Response::steamids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCGetAppFriendsList_Response.steamids)
  return _internal_steamids(index);
}
inline void CMsgGCGetAppFriendsList_Response::set_steamids(int index, uint64_t value) {
  _impl_.steamids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCGetAppFriendsList_Response.steamids)
}
inline void CMsgGCGetAppFriendsList_Response::_internal_add_steamids(uint64_t value) {
  _impl_.steamids_.Add(value);
}
inline void CMsgGCGetAppFriendsList_Response::add_steamids(uint64_t value) {
  _internal_add_steamids(value);
  // @@protoc_insertion_point(field_add:CMsgGCGetAppFriendsList_Response.steamids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgGCGetAppFriendsList_Response::_internal_steamids() const {
  return _impl_.steamids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgGCGetAppFriendsList_Response::steamids() const {
  // @@protoc_insertion_point(field_list:CMsgGCGetAppFriendsList_Response.steamids)
  return _internal_steamids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgGCGetAppFriendsList_Response::_internal_mutable_steamids() {
  return &_impl_.steamids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgGCGetAppFriendsList_Response::mutable_steamids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCGetAppFriendsList_Response.steamids)
  return _internal_mutable_steamids();
}

// repeated fixed32 friendship_timestamps = 3;
inline int CMsgGCGetAppFriendsList_Response::_internal_friendship_timestamps_size() const {
  return _impl_.friendship_timestamps_.size();
}
inline int CMsgGCGetAppFriendsList_Response::friendship_timestamps_size() const {
  return _internal_friendship_timestamps_size();
}
inline void CMsgGCGetAppFriendsList_Response::clear_friendship_timestamps() {
  _impl_.friendship_timestamps_.Clear();
}
inline uint32_t CMsgGCGetAppFriendsList_Response::_internal_friendship_timestamps(int index) const {
  return _impl_.friendship_timestamps_.Get(index);
}
inline uint32_t CMsgGCGetAppFriendsList_Response::friendship_timestamps(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCGetAppFriendsList_Response.friendship_timestamps)
  return _internal_friendship_timestamps(index);
}
inline void CMsgGCGetAppFriendsList_Response::set_friendship_timestamps(int index, uint32_t value) {
  _impl_.friendship_timestamps_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCGetAppFriendsList_Response.friendship_timestamps)
}
inline void CMsgGCGetAppFriendsList_Response::_internal_add_friendship_timestamps(uint32_t value) {
  _impl_.friendship_timestamps_.Add(value);
}
inline void CMsgGCGetAppFriendsList_Response::add_friendship_timestamps(uint32_t value) {
  _internal_add_friendship_timestamps(value);
  // @@protoc_insertion_point(field_add:CMsgGCGetAppFriendsList_Response.friendship_timestamps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGCGetAppFriendsList_Response::_internal_friendship_timestamps() const {
  return _impl_.friendship_timestamps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGCGetAppFriendsList_Response::friendship_timestamps() const {
  // @@protoc_insertion_point(field_list:CMsgGCGetAppFriendsList_Response.friendship_timestamps)
  return _internal_friendship_timestamps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGCGetAppFriendsList_Response::_internal_mutable_friendship_timestamps() {
  return &_impl_.friendship_timestamps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGCGetAppFriendsList_Response::mutable_friendship_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCGetAppFriendsList_Response.friendship_timestamps)
  return _internal_mutable_friendship_timestamps();
}

// repeated fixed32 last_playtimes = 4;
inline int CMsgGCGetAppFriendsList_Response::_internal_last_playtimes_size() const {
  return _impl_.last_playtimes_.size();
}
inline int CMsgGCGetAppFriendsList_Response::last_playtimes_size() const {
  return _internal_last_playtimes_size();
}
inline void CMsgGCGetAppFriendsList_Response::clear_last_playtimes() {
  _impl_.last_playtimes_.Clear();
}
inline uint32_t CMsgGCGetAppFriendsList_Response::_internal_last_playtimes(int index) const {
  return _impl_.last_playtimes_.Get(index);
}
inline uint32_t CMsgGCGetAppFriendsList_Response::last_playtimes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCGetAppFriendsList_Response.last_playtimes)
  return _internal_last_playtimes(index);
}
inline void CMsgGCGetAppFriendsList_Response::set_last_playtimes(int index, uint32_t value) {
  _impl_.last_playtimes_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCGetAppFriendsList_Response.last_playtimes)
}
inline void CMsgGCGetAppFriendsList_Response::_internal_add_last_playtimes(uint32_t value) {
  _impl_.last_playtimes_.Add(value);
}
inline void CMsgGCGetAppFriendsList_Response::add_last_playtimes(uint32_t value) {
  _internal_add_last_playtimes(value);
  // @@protoc_insertion_point(field_add:CMsgGCGetAppFriendsList_Response.last_playtimes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGCGetAppFriendsList_Response::_internal_last_playtimes() const {
  return _impl_.last_playtimes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGCGetAppFriendsList_Response::last_playtimes() const {
  // @@protoc_insertion_point(field_list:CMsgGCGetAppFriendsList_Response.last_playtimes)
  return _internal_last_playtimes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGCGetAppFriendsList_Response::_internal_mutable_last_playtimes() {
  return &_impl_.last_playtimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGCGetAppFriendsList_Response::mutable_last_playtimes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCGetAppFriendsList_Response.last_playtimes)
  return _internal_mutable_last_playtimes();
}

// -------------------------------------------------------------------

// CMsgGCMsgMasterSetDirectory_SubGC

// optional int32 dir_index = 1 [default = -1];
inline bool CMsgGCMsgMasterSetDirectory_SubGC::_internal_has_dir_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCMsgMasterSetDirectory_SubGC::has_dir_index() const {
  return _internal_has_dir_index();
}
inline void CMsgGCMsgMasterSetDirectory_SubGC::clear_dir_index() {
  _impl_.dir_index_ = -1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t CMsgGCMsgMasterSetDirectory_SubGC::_internal_dir_index() const {
  return _impl_.dir_index_;
}
inline int32_t CMsgGCMsgMasterSetDirectory_SubGC::dir_index() const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgMasterSetDirectory.SubGC.dir_index)
  return _internal_dir_index();
}
inline void CMsgGCMsgMasterSetDirectory_SubGC::_internal_set_dir_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.dir_index_ = value;
}
inline void CMsgGCMsgMasterSetDirectory_SubGC::set_dir_index(int32_t value) {
  _internal_set_dir_index(value);
  // @@protoc_insertion_point(field_set:CMsgGCMsgMasterSetDirectory.SubGC.dir_index)
}

// optional string name = 2;
inline bool CMsgGCMsgMasterSetDirectory_SubGC::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCMsgMasterSetDirectory_SubGC::has_name() const {
  return _internal_has_name();
}
inline void CMsgGCMsgMasterSetDirectory_SubGC::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCMsgMasterSetDirectory_SubGC::name() const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgMasterSetDirectory.SubGC.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCMsgMasterSetDirectory_SubGC::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCMsgMasterSetDirectory.SubGC.name)
}
inline std::string* CMsgGCMsgMasterSetDirectory_SubGC::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgGCMsgMasterSetDirectory.SubGC.name)
  return _s;
}
inline const std::string& CMsgGCMsgMasterSetDirectory_SubGC::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgGCMsgMasterSetDirectory_SubGC::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGCMsgMasterSetDirectory_SubGC::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGCMsgMasterSetDirectory_SubGC::release_name() {
  // @@protoc_insertion_point(field_release:CMsgGCMsgMasterSetDirectory.SubGC.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGCMsgMasterSetDirectory_SubGC::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGCMsgMasterSetDirectory.SubGC.name)
}

// optional string box = 3;
inline bool CMsgGCMsgMasterSetDirectory_SubGC::_internal_has_box() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCMsgMasterSetDirectory_SubGC::has_box() const {
  return _internal_has_box();
}
inline void CMsgGCMsgMasterSetDirectory_SubGC::clear_box() {
  _impl_.box_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgGCMsgMasterSetDirectory_SubGC::box() const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgMasterSetDirectory.SubGC.box)
  return _internal_box();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCMsgMasterSetDirectory_SubGC::set_box(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.box_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCMsgMasterSetDirectory.SubGC.box)
}
inline std::string* CMsgGCMsgMasterSetDirectory_SubGC::mutable_box() {
  std::string* _s = _internal_mutable_box();
  // @@protoc_insertion_point(field_mutable:CMsgGCMsgMasterSetDirectory.SubGC.box)
  return _s;
}
inline const std::string& CMsgGCMsgMasterSetDirectory_SubGC::_internal_box() const {
  return _impl_.box_.Get();
}
inline void CMsgGCMsgMasterSetDirectory_SubGC::_internal_set_box(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.box_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGCMsgMasterSetDirectory_SubGC::_internal_mutable_box() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.box_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGCMsgMasterSetDirectory_SubGC::release_box() {
  // @@protoc_insertion_point(field_release:CMsgGCMsgMasterSetDirectory.SubGC.box)
  if (!_internal_has_box()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.box_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.box_.IsDefault()) {
    _impl_.box_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGCMsgMasterSetDirectory_SubGC::set_allocated_box(std::string* box) {
  if (box != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.box_.SetAllocated(box, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.box_.IsDefault()) {
    _impl_.box_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGCMsgMasterSetDirectory.SubGC.box)
}

// optional string command_line = 4;
inline bool CMsgGCMsgMasterSetDirectory_SubGC::_internal_has_command_line() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCMsgMasterSetDirectory_SubGC::has_command_line() const {
  return _internal_has_command_line();
}
inline void CMsgGCMsgMasterSetDirectory_SubGC::clear_command_line() {
  _impl_.command_line_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgGCMsgMasterSetDirectory_SubGC::command_line() const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgMasterSetDirectory.SubGC.command_line)
  return _internal_command_line();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCMsgMasterSetDirectory_SubGC::set_command_line(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.command_line_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCMsgMasterSetDirectory.SubGC.command_line)
}
inline std::string* CMsgGCMsgMasterSetDirectory_SubGC::mutable_command_line() {
  std::string* _s = _internal_mutable_command_line();
  // @@protoc_insertion_point(field_mutable:CMsgGCMsgMasterSetDirectory.SubGC.command_line)
  return _s;
}
inline const std::string& CMsgGCMsgMasterSetDirectory_SubGC::_internal_command_line() const {
  return _impl_.command_line_.Get();
}
inline void CMsgGCMsgMasterSetDirectory_SubGC::_internal_set_command_line(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.command_line_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGCMsgMasterSetDirectory_SubGC::_internal_mutable_command_line() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.command_line_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGCMsgMasterSetDirectory_SubGC::release_command_line() {
  // @@protoc_insertion_point(field_release:CMsgGCMsgMasterSetDirectory.SubGC.command_line)
  if (!_internal_has_command_line()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.command_line_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_line_.IsDefault()) {
    _impl_.command_line_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGCMsgMasterSetDirectory_SubGC::set_allocated_command_line(std::string* command_line) {
  if (command_line != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.command_line_.SetAllocated(command_line, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_line_.IsDefault()) {
    _impl_.command_line_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGCMsgMasterSetDirectory.SubGC.command_line)
}

// optional string gc_binary = 5;
inline bool CMsgGCMsgMasterSetDirectory_SubGC::_internal_has_gc_binary() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCMsgMasterSetDirectory_SubGC::has_gc_binary() const {
  return _internal_has_gc_binary();
}
inline void CMsgGCMsgMasterSetDirectory_SubGC::clear_gc_binary() {
  _impl_.gc_binary_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgGCMsgMasterSetDirectory_SubGC::gc_binary() const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgMasterSetDirectory.SubGC.gc_binary)
  return _internal_gc_binary();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCMsgMasterSetDirectory_SubGC::set_gc_binary(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.gc_binary_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCMsgMasterSetDirectory.SubGC.gc_binary)
}
inline std::string* CMsgGCMsgMasterSetDirectory_SubGC::mutable_gc_binary() {
  std::string* _s = _internal_mutable_gc_binary();
  // @@protoc_insertion_point(field_mutable:CMsgGCMsgMasterSetDirectory.SubGC.gc_binary)
  return _s;
}
inline const std::string& CMsgGCMsgMasterSetDirectory_SubGC::_internal_gc_binary() const {
  return _impl_.gc_binary_.Get();
}
inline void CMsgGCMsgMasterSetDirectory_SubGC::_internal_set_gc_binary(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.gc_binary_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGCMsgMasterSetDirectory_SubGC::_internal_mutable_gc_binary() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.gc_binary_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGCMsgMasterSetDirectory_SubGC::release_gc_binary() {
  // @@protoc_insertion_point(field_release:CMsgGCMsgMasterSetDirectory.SubGC.gc_binary)
  if (!_internal_has_gc_binary()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.gc_binary_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gc_binary_.IsDefault()) {
    _impl_.gc_binary_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGCMsgMasterSetDirectory_SubGC::set_allocated_gc_binary(std::string* gc_binary) {
  if (gc_binary != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.gc_binary_.SetAllocated(gc_binary, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gc_binary_.IsDefault()) {
    _impl_.gc_binary_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGCMsgMasterSetDirectory.SubGC.gc_binary)
}

// -------------------------------------------------------------------

// CMsgGCMsgMasterSetDirectory

// optional int32 master_dir_index = 1 [default = -1];
inline bool CMsgGCMsgMasterSetDirectory::_internal_has_master_dir_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCMsgMasterSetDirectory::has_master_dir_index() const {
  return _internal_has_master_dir_index();
}
inline void CMsgGCMsgMasterSetDirectory::clear_master_dir_index() {
  _impl_.master_dir_index_ = -1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgGCMsgMasterSetDirectory::_internal_master_dir_index() const {
  return _impl_.master_dir_index_;
}
inline int32_t CMsgGCMsgMasterSetDirectory::master_dir_index() const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgMasterSetDirectory.master_dir_index)
  return _internal_master_dir_index();
}
inline void CMsgGCMsgMasterSetDirectory::_internal_set_master_dir_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.master_dir_index_ = value;
}
inline void CMsgGCMsgMasterSetDirectory::set_master_dir_index(int32_t value) {
  _internal_set_master_dir_index(value);
  // @@protoc_insertion_point(field_set:CMsgGCMsgMasterSetDirectory.master_dir_index)
}

// repeated .CMsgGCMsgMasterSetDirectory.SubGC dir = 2;
inline int CMsgGCMsgMasterSetDirectory::_internal_dir_size() const {
  return _impl_.dir_.size();
}
inline int CMsgGCMsgMasterSetDirectory::dir_size() const {
  return _internal_dir_size();
}
inline void CMsgGCMsgMasterSetDirectory::clear_dir() {
  _impl_.dir_.Clear();
}
inline ::CMsgGCMsgMasterSetDirectory_SubGC* CMsgGCMsgMasterSetDirectory::mutable_dir(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCMsgMasterSetDirectory.dir)
  return _impl_.dir_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMsgMasterSetDirectory_SubGC >*
CMsgGCMsgMasterSetDirectory::mutable_dir() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCMsgMasterSetDirectory.dir)
  return &_impl_.dir_;
}
inline const ::CMsgGCMsgMasterSetDirectory_SubGC& CMsgGCMsgMasterSetDirectory::_internal_dir(int index) const {
  return _impl_.dir_.Get(index);
}
inline const ::CMsgGCMsgMasterSetDirectory_SubGC& CMsgGCMsgMasterSetDirectory::dir(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgMasterSetDirectory.dir)
  return _internal_dir(index);
}
inline ::CMsgGCMsgMasterSetDirectory_SubGC* CMsgGCMsgMasterSetDirectory::_internal_add_dir() {
  return _impl_.dir_.Add();
}
inline ::CMsgGCMsgMasterSetDirectory_SubGC* CMsgGCMsgMasterSetDirectory::add_dir() {
  ::CMsgGCMsgMasterSetDirectory_SubGC* _add = _internal_add_dir();
  // @@protoc_insertion_point(field_add:CMsgGCMsgMasterSetDirectory.dir)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMsgMasterSetDirectory_SubGC >&
CMsgGCMsgMasterSetDirectory::dir() const {
  // @@protoc_insertion_point(field_list:CMsgGCMsgMasterSetDirectory.dir)
  return _impl_.dir_;
}

// -------------------------------------------------------------------

// CMsgGCMsgMasterSetDirectory_Response

// optional int32 eresult = 1 [default = 2];
inline bool CMsgGCMsgMasterSetDirectory_Response::_internal_has_eresult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCMsgMasterSetDirectory_Response::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgGCMsgMasterSetDirectory_Response::clear_eresult() {
  _impl_.eresult_ = 2;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgGCMsgMasterSetDirectory_Response::_internal_eresult() const {
  return _impl_.eresult_;
}
inline int32_t CMsgGCMsgMasterSetDirectory_Response::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgMasterSetDirectory_Response.eresult)
  return _internal_eresult();
}
inline void CMsgGCMsgMasterSetDirectory_Response::_internal_set_eresult(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.eresult_ = value;
}
inline void CMsgGCMsgMasterSetDirectory_Response::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgGCMsgMasterSetDirectory_Response.eresult)
}

// optional string message = 2;
inline bool CMsgGCMsgMasterSetDirectory_Response::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCMsgMasterSetDirectory_Response::has_message() const {
  return _internal_has_message();
}
inline void CMsgGCMsgMasterSetDirectory_Response::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCMsgMasterSetDirectory_Response::message() const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgMasterSetDirectory_Response.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCMsgMasterSetDirectory_Response::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCMsgMasterSetDirectory_Response.message)
}
inline std::string* CMsgGCMsgMasterSetDirectory_Response::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:CMsgGCMsgMasterSetDirectory_Response.message)
  return _s;
}
inline const std::string& CMsgGCMsgMasterSetDirectory_Response::_internal_message() const {
  return _impl_.message_.Get();
}
inline void CMsgGCMsgMasterSetDirectory_Response::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGCMsgMasterSetDirectory_Response::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGCMsgMasterSetDirectory_Response::release_message() {
  // @@protoc_insertion_point(field_release:CMsgGCMsgMasterSetDirectory_Response.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGCMsgMasterSetDirectory_Response::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGCMsgMasterSetDirectory_Response.message)
}

// -------------------------------------------------------------------

// CMsgGCMsgWebAPIJobRequestForwardResponse

// optional int32 dir_index = 1 [default = -1];
inline bool CMsgGCMsgWebAPIJobRequestForwardResponse::_internal_has_dir_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCMsgWebAPIJobRequestForwardResponse::has_dir_index() const {
  return _internal_has_dir_index();
}
inline void CMsgGCMsgWebAPIJobRequestForwardResponse::clear_dir_index() {
  _impl_.dir_index_ = -1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgGCMsgWebAPIJobRequestForwardResponse::_internal_dir_index() const {
  return _impl_.dir_index_;
}
inline int32_t CMsgGCMsgWebAPIJobRequestForwardResponse::dir_index() const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgWebAPIJobRequestForwardResponse.dir_index)
  return _internal_dir_index();
}
inline void CMsgGCMsgWebAPIJobRequestForwardResponse::_internal_set_dir_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dir_index_ = value;
}
inline void CMsgGCMsgWebAPIJobRequestForwardResponse::set_dir_index(int32_t value) {
  _internal_set_dir_index(value);
  // @@protoc_insertion_point(field_set:CMsgGCMsgWebAPIJobRequestForwardResponse.dir_index)
}

// -------------------------------------------------------------------

// CGCSystemMsg_GetPurchaseTrust_Request

// optional fixed64 steamid = 1;
inline bool CGCSystemMsg_GetPurchaseTrust_Request::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetPurchaseTrust_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CGCSystemMsg_GetPurchaseTrust_Request::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CGCSystemMsg_GetPurchaseTrust_Request::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CGCSystemMsg_GetPurchaseTrust_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetPurchaseTrust_Request.steamid)
  return _internal_steamid();
}
inline void CGCSystemMsg_GetPurchaseTrust_Request::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steamid_ = value;
}
inline void CGCSystemMsg_GetPurchaseTrust_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetPurchaseTrust_Request.steamid)
}

// -------------------------------------------------------------------

// CGCSystemMsg_GetPurchaseTrust_Response

// optional bool has_prior_purchase_history = 1;
inline bool CGCSystemMsg_GetPurchaseTrust_Response::_internal_has_has_prior_purchase_history() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetPurchaseTrust_Response::has_has_prior_purchase_history() const {
  return _internal_has_has_prior_purchase_history();
}
inline void CGCSystemMsg_GetPurchaseTrust_Response::clear_has_prior_purchase_history() {
  _impl_.has_prior_purchase_history_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CGCSystemMsg_GetPurchaseTrust_Response::_internal_has_prior_purchase_history() const {
  return _impl_.has_prior_purchase_history_;
}
inline bool CGCSystemMsg_GetPurchaseTrust_Response::has_prior_purchase_history() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetPurchaseTrust_Response.has_prior_purchase_history)
  return _internal_has_prior_purchase_history();
}
inline void CGCSystemMsg_GetPurchaseTrust_Response::_internal_set_has_prior_purchase_history(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.has_prior_purchase_history_ = value;
}
inline void CGCSystemMsg_GetPurchaseTrust_Response::set_has_prior_purchase_history(bool value) {
  _internal_set_has_prior_purchase_history(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetPurchaseTrust_Response.has_prior_purchase_history)
}

// optional bool has_no_recent_password_resets = 2;
inline bool CGCSystemMsg_GetPurchaseTrust_Response::_internal_has_has_no_recent_password_resets() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetPurchaseTrust_Response::has_has_no_recent_password_resets() const {
  return _internal_has_has_no_recent_password_resets();
}
inline void CGCSystemMsg_GetPurchaseTrust_Response::clear_has_no_recent_password_resets() {
  _impl_.has_no_recent_password_resets_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CGCSystemMsg_GetPurchaseTrust_Response::_internal_has_no_recent_password_resets() const {
  return _impl_.has_no_recent_password_resets_;
}
inline bool CGCSystemMsg_GetPurchaseTrust_Response::has_no_recent_password_resets() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetPurchaseTrust_Response.has_no_recent_password_resets)
  return _internal_has_no_recent_password_resets();
}
inline void CGCSystemMsg_GetPurchaseTrust_Response::_internal_set_has_no_recent_password_resets(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.has_no_recent_password_resets_ = value;
}
inline void CGCSystemMsg_GetPurchaseTrust_Response::set_has_no_recent_password_resets(bool value) {
  _internal_set_has_no_recent_password_resets(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetPurchaseTrust_Response.has_no_recent_password_resets)
}

// optional bool is_wallet_cash_trusted = 3;
inline bool CGCSystemMsg_GetPurchaseTrust_Response::_internal_has_is_wallet_cash_trusted() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetPurchaseTrust_Response::has_is_wallet_cash_trusted() const {
  return _internal_has_is_wallet_cash_trusted();
}
inline void CGCSystemMsg_GetPurchaseTrust_Response::clear_is_wallet_cash_trusted() {
  _impl_.is_wallet_cash_trusted_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CGCSystemMsg_GetPurchaseTrust_Response::_internal_is_wallet_cash_trusted() const {
  return _impl_.is_wallet_cash_trusted_;
}
inline bool CGCSystemMsg_GetPurchaseTrust_Response::is_wallet_cash_trusted() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetPurchaseTrust_Response.is_wallet_cash_trusted)
  return _internal_is_wallet_cash_trusted();
}
inline void CGCSystemMsg_GetPurchaseTrust_Response::_internal_set_is_wallet_cash_trusted(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.is_wallet_cash_trusted_ = value;
}
inline void CGCSystemMsg_GetPurchaseTrust_Response::set_is_wallet_cash_trusted(bool value) {
  _internal_set_is_wallet_cash_trusted(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetPurchaseTrust_Response.is_wallet_cash_trusted)
}

// optional uint32 time_all_trusted = 4;
inline bool CGCSystemMsg_GetPurchaseTrust_Response::_internal_has_time_all_trusted() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGCSystemMsg_GetPurchaseTrust_Response::has_time_all_trusted() const {
  return _internal_has_time_all_trusted();
}
inline void CGCSystemMsg_GetPurchaseTrust_Response::clear_time_all_trusted() {
  _impl_.time_all_trusted_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CGCSystemMsg_GetPurchaseTrust_Response::_internal_time_all_trusted() const {
  return _impl_.time_all_trusted_;
}
inline uint32_t CGCSystemMsg_GetPurchaseTrust_Response::time_all_trusted() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_GetPurchaseTrust_Response.time_all_trusted)
  return _internal_time_all_trusted();
}
inline void CGCSystemMsg_GetPurchaseTrust_Response::_internal_set_time_all_trusted(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.time_all_trusted_ = value;
}
inline void CGCSystemMsg_GetPurchaseTrust_Response::set_time_all_trusted(uint32_t value) {
  _internal_set_time_all_trusted(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_GetPurchaseTrust_Response.time_all_trusted)
}

// -------------------------------------------------------------------

// CMsgGCHAccountVacStatusChange

// optional fixed64 steam_id = 1;
inline bool CMsgGCHAccountVacStatusChange::_internal_has_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCHAccountVacStatusChange::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgGCHAccountVacStatusChange::clear_steam_id() {
  _impl_.steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGCHAccountVacStatusChange::_internal_steam_id() const {
  return _impl_.steam_id_;
}
inline uint64_t CMsgGCHAccountVacStatusChange::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAccountVacStatusChange.steam_id)
  return _internal_steam_id();
}
inline void CMsgGCHAccountVacStatusChange::_internal_set_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steam_id_ = value;
}
inline void CMsgGCHAccountVacStatusChange::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCHAccountVacStatusChange.steam_id)
}

// optional uint32 app_id = 2;
inline bool CMsgGCHAccountVacStatusChange::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCHAccountVacStatusChange::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgGCHAccountVacStatusChange::clear_app_id() {
  _impl_.app_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCHAccountVacStatusChange::_internal_app_id() const {
  return _impl_.app_id_;
}
inline uint32_t CMsgGCHAccountVacStatusChange::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAccountVacStatusChange.app_id)
  return _internal_app_id();
}
inline void CMsgGCHAccountVacStatusChange::_internal_set_app_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.app_id_ = value;
}
inline void CMsgGCHAccountVacStatusChange::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCHAccountVacStatusChange.app_id)
}

// optional uint32 rtime_vacban_starts = 3;
inline bool CMsgGCHAccountVacStatusChange::_internal_has_rtime_vacban_starts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCHAccountVacStatusChange::has_rtime_vacban_starts() const {
  return _internal_has_rtime_vacban_starts();
}
inline void CMsgGCHAccountVacStatusChange::clear_rtime_vacban_starts() {
  _impl_.rtime_vacban_starts_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGCHAccountVacStatusChange::_internal_rtime_vacban_starts() const {
  return _impl_.rtime_vacban_starts_;
}
inline uint32_t CMsgGCHAccountVacStatusChange::rtime_vacban_starts() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAccountVacStatusChange.rtime_vacban_starts)
  return _internal_rtime_vacban_starts();
}
inline void CMsgGCHAccountVacStatusChange::_internal_set_rtime_vacban_starts(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.rtime_vacban_starts_ = value;
}
inline void CMsgGCHAccountVacStatusChange::set_rtime_vacban_starts(uint32_t value) {
  _internal_set_rtime_vacban_starts(value);
  // @@protoc_insertion_point(field_set:CMsgGCHAccountVacStatusChange.rtime_vacban_starts)
}

// optional bool is_banned_now = 4;
inline bool CMsgGCHAccountVacStatusChange::_internal_has_is_banned_now() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCHAccountVacStatusChange::has_is_banned_now() const {
  return _internal_has_is_banned_now();
}
inline void CMsgGCHAccountVacStatusChange::clear_is_banned_now() {
  _impl_.is_banned_now_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgGCHAccountVacStatusChange::_internal_is_banned_now() const {
  return _impl_.is_banned_now_;
}
inline bool CMsgGCHAccountVacStatusChange::is_banned_now() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAccountVacStatusChange.is_banned_now)
  return _internal_is_banned_now();
}
inline void CMsgGCHAccountVacStatusChange::_internal_set_is_banned_now(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.is_banned_now_ = value;
}
inline void CMsgGCHAccountVacStatusChange::set_is_banned_now(bool value) {
  _internal_set_is_banned_now(value);
  // @@protoc_insertion_point(field_set:CMsgGCHAccountVacStatusChange.is_banned_now)
}

// optional bool is_banned_future = 5;
inline bool CMsgGCHAccountVacStatusChange::_internal_has_is_banned_future() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCHAccountVacStatusChange::has_is_banned_future() const {
  return _internal_has_is_banned_future();
}
inline void CMsgGCHAccountVacStatusChange::clear_is_banned_future() {
  _impl_.is_banned_future_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgGCHAccountVacStatusChange::_internal_is_banned_future() const {
  return _impl_.is_banned_future_;
}
inline bool CMsgGCHAccountVacStatusChange::is_banned_future() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAccountVacStatusChange.is_banned_future)
  return _internal_is_banned_future();
}
inline void CMsgGCHAccountVacStatusChange::_internal_set_is_banned_future(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.is_banned_future_ = value;
}
inline void CMsgGCHAccountVacStatusChange::set_is_banned_future(bool value) {
  _internal_set_is_banned_future(value);
  // @@protoc_insertion_point(field_set:CMsgGCHAccountVacStatusChange.is_banned_future)
}

// -------------------------------------------------------------------

// CMsgGCGetPartnerAccountLink

// optional fixed64 steamid = 1;
inline bool CMsgGCGetPartnerAccountLink::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCGetPartnerAccountLink::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgGCGetPartnerAccountLink::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGCGetPartnerAccountLink::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CMsgGCGetPartnerAccountLink::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPartnerAccountLink.steamid)
  return _internal_steamid();
}
inline void CMsgGCGetPartnerAccountLink::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steamid_ = value;
}
inline void CMsgGCGetPartnerAccountLink::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgGCGetPartnerAccountLink.steamid)
}

// -------------------------------------------------------------------

// CMsgGCGetPartnerAccountLink_Response

// optional uint32 pwid = 1;
inline bool CMsgGCGetPartnerAccountLink_Response::_internal_has_pwid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCGetPartnerAccountLink_Response::has_pwid() const {
  return _internal_has_pwid();
}
inline void CMsgGCGetPartnerAccountLink_Response::clear_pwid() {
  _impl_.pwid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGCGetPartnerAccountLink_Response::_internal_pwid() const {
  return _impl_.pwid_;
}
inline uint32_t CMsgGCGetPartnerAccountLink_Response::pwid() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPartnerAccountLink_Response.pwid)
  return _internal_pwid();
}
inline void CMsgGCGetPartnerAccountLink_Response::_internal_set_pwid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pwid_ = value;
}
inline void CMsgGCGetPartnerAccountLink_Response::set_pwid(uint32_t value) {
  _internal_set_pwid(value);
  // @@protoc_insertion_point(field_set:CMsgGCGetPartnerAccountLink_Response.pwid)
}

// optional uint32 nexonid = 2;
inline bool CMsgGCGetPartnerAccountLink_Response::_internal_has_nexonid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCGetPartnerAccountLink_Response::has_nexonid() const {
  return _internal_has_nexonid();
}
inline void CMsgGCGetPartnerAccountLink_Response::clear_nexonid() {
  _impl_.nexonid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCGetPartnerAccountLink_Response::_internal_nexonid() const {
  return _impl_.nexonid_;
}
inline uint32_t CMsgGCGetPartnerAccountLink_Response::nexonid() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPartnerAccountLink_Response.nexonid)
  return _internal_nexonid();
}
inline void CMsgGCGetPartnerAccountLink_Response::_internal_set_nexonid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.nexonid_ = value;
}
inline void CMsgGCGetPartnerAccountLink_Response::set_nexonid(uint32_t value) {
  _internal_set_nexonid(value);
  // @@protoc_insertion_point(field_set:CMsgGCGetPartnerAccountLink_Response.nexonid)
}

// optional int32 ageclass = 3 [default = 0];
inline bool CMsgGCGetPartnerAccountLink_Response::_internal_has_ageclass() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCGetPartnerAccountLink_Response::has_ageclass() const {
  return _internal_has_ageclass();
}
inline void CMsgGCGetPartnerAccountLink_Response::clear_ageclass() {
  _impl_.ageclass_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgGCGetPartnerAccountLink_Response::_internal_ageclass() const {
  return _impl_.ageclass_;
}
inline int32_t CMsgGCGetPartnerAccountLink_Response::ageclass() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPartnerAccountLink_Response.ageclass)
  return _internal_ageclass();
}
inline void CMsgGCGetPartnerAccountLink_Response::_internal_set_ageclass(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ageclass_ = value;
}
inline void CMsgGCGetPartnerAccountLink_Response::set_ageclass(int32_t value) {
  _internal_set_ageclass(value);
  // @@protoc_insertion_point(field_set:CMsgGCGetPartnerAccountLink_Response.ageclass)
}

// optional bool id_verified = 4 [default = true];
inline bool CMsgGCGetPartnerAccountLink_Response::_internal_has_id_verified() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCGetPartnerAccountLink_Response::has_id_verified() const {
  return _internal_has_id_verified();
}
inline void CMsgGCGetPartnerAccountLink_Response::clear_id_verified() {
  _impl_.id_verified_ = true;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgGCGetPartnerAccountLink_Response::_internal_id_verified() const {
  return _impl_.id_verified_;
}
inline bool CMsgGCGetPartnerAccountLink_Response::id_verified() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPartnerAccountLink_Response.id_verified)
  return _internal_id_verified();
}
inline void CMsgGCGetPartnerAccountLink_Response::_internal_set_id_verified(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.id_verified_ = value;
}
inline void CMsgGCGetPartnerAccountLink_Response::set_id_verified(bool value) {
  _internal_set_id_verified(value);
  // @@protoc_insertion_point(field_set:CMsgGCGetPartnerAccountLink_Response.id_verified)
}

// optional bool is_adult = 5 [default = true];
inline bool CMsgGCGetPartnerAccountLink_Response::_internal_has_is_adult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCGetPartnerAccountLink_Response::has_is_adult() const {
  return _internal_has_is_adult();
}
inline void CMsgGCGetPartnerAccountLink_Response::clear_is_adult() {
  _impl_.is_adult_ = true;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgGCGetPartnerAccountLink_Response::_internal_is_adult() const {
  return _impl_.is_adult_;
}
inline bool CMsgGCGetPartnerAccountLink_Response::is_adult() const {
  // @@protoc_insertion_point(field_get:CMsgGCGetPartnerAccountLink_Response.is_adult)
  return _internal_is_adult();
}
inline void CMsgGCGetPartnerAccountLink_Response::_internal_set_is_adult(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.is_adult_ = value;
}
inline void CMsgGCGetPartnerAccountLink_Response::set_is_adult(bool value) {
  _internal_set_is_adult(value);
  // @@protoc_insertion_point(field_set:CMsgGCGetPartnerAccountLink_Response.is_adult)
}

// -------------------------------------------------------------------

// CMsgGCRoutingInfo

// repeated int32 dir_index = 1;
inline int CMsgGCRoutingInfo::_internal_dir_index_size() const {
  return _impl_.dir_index_.size();
}
inline int CMsgGCRoutingInfo::dir_index_size() const {
  return _internal_dir_index_size();
}
inline void CMsgGCRoutingInfo::clear_dir_index() {
  _impl_.dir_index_.Clear();
}
inline int32_t CMsgGCRoutingInfo::_internal_dir_index(int index) const {
  return _impl_.dir_index_.Get(index);
}
inline int32_t CMsgGCRoutingInfo::dir_index(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCRoutingInfo.dir_index)
  return _internal_dir_index(index);
}
inline void CMsgGCRoutingInfo::set_dir_index(int index, int32_t value) {
  _impl_.dir_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCRoutingInfo.dir_index)
}
inline void CMsgGCRoutingInfo::_internal_add_dir_index(int32_t value) {
  _impl_.dir_index_.Add(value);
}
inline void CMsgGCRoutingInfo::add_dir_index(int32_t value) {
  _internal_add_dir_index(value);
  // @@protoc_insertion_point(field_add:CMsgGCRoutingInfo.dir_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgGCRoutingInfo::_internal_dir_index() const {
  return _impl_.dir_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgGCRoutingInfo::dir_index() const {
  // @@protoc_insertion_point(field_list:CMsgGCRoutingInfo.dir_index)
  return _internal_dir_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgGCRoutingInfo::_internal_mutable_dir_index() {
  return &_impl_.dir_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgGCRoutingInfo::mutable_dir_index() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCRoutingInfo.dir_index)
  return _internal_mutable_dir_index();
}

// optional .CMsgGCRoutingInfo.RoutingMethod method = 2 [default = RANDOM];
inline bool CMsgGCRoutingInfo::_internal_has_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCRoutingInfo::has_method() const {
  return _internal_has_method();
}
inline void CMsgGCRoutingInfo::clear_method() {
  _impl_.method_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::_internal_method() const {
  return static_cast< ::CMsgGCRoutingInfo_RoutingMethod >(_impl_.method_);
}
inline ::CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::method() const {
  // @@protoc_insertion_point(field_get:CMsgGCRoutingInfo.method)
  return _internal_method();
}
inline void CMsgGCRoutingInfo::_internal_set_method(::CMsgGCRoutingInfo_RoutingMethod value) {
  assert(::CMsgGCRoutingInfo_RoutingMethod_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.method_ = value;
}
inline void CMsgGCRoutingInfo::set_method(::CMsgGCRoutingInfo_RoutingMethod value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:CMsgGCRoutingInfo.method)
}

// optional .CMsgGCRoutingInfo.RoutingMethod fallback = 3 [default = DISCARD];
inline bool CMsgGCRoutingInfo::_internal_has_fallback() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCRoutingInfo::has_fallback() const {
  return _internal_has_fallback();
}
inline void CMsgGCRoutingInfo::clear_fallback() {
  _impl_.fallback_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::_internal_fallback() const {
  return static_cast< ::CMsgGCRoutingInfo_RoutingMethod >(_impl_.fallback_);
}
inline ::CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::fallback() const {
  // @@protoc_insertion_point(field_get:CMsgGCRoutingInfo.fallback)
  return _internal_fallback();
}
inline void CMsgGCRoutingInfo::_internal_set_fallback(::CMsgGCRoutingInfo_RoutingMethod value) {
  assert(::CMsgGCRoutingInfo_RoutingMethod_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.fallback_ = value;
}
inline void CMsgGCRoutingInfo::set_fallback(::CMsgGCRoutingInfo_RoutingMethod value) {
  _internal_set_fallback(value);
  // @@protoc_insertion_point(field_set:CMsgGCRoutingInfo.fallback)
}

// optional uint32 protobuf_field = 4;
inline bool CMsgGCRoutingInfo::_internal_has_protobuf_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCRoutingInfo::has_protobuf_field() const {
  return _internal_has_protobuf_field();
}
inline void CMsgGCRoutingInfo::clear_protobuf_field() {
  _impl_.protobuf_field_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGCRoutingInfo::_internal_protobuf_field() const {
  return _impl_.protobuf_field_;
}
inline uint32_t CMsgGCRoutingInfo::protobuf_field() const {
  // @@protoc_insertion_point(field_get:CMsgGCRoutingInfo.protobuf_field)
  return _internal_protobuf_field();
}
inline void CMsgGCRoutingInfo::_internal_set_protobuf_field(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.protobuf_field_ = value;
}
inline void CMsgGCRoutingInfo::set_protobuf_field(uint32_t value) {
  _internal_set_protobuf_field(value);
  // @@protoc_insertion_point(field_set:CMsgGCRoutingInfo.protobuf_field)
}

// optional string webapi_param = 5;
inline bool CMsgGCRoutingInfo::_internal_has_webapi_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCRoutingInfo::has_webapi_param() const {
  return _internal_has_webapi_param();
}
inline void CMsgGCRoutingInfo::clear_webapi_param() {
  _impl_.webapi_param_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCRoutingInfo::webapi_param() const {
  // @@protoc_insertion_point(field_get:CMsgGCRoutingInfo.webapi_param)
  return _internal_webapi_param();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCRoutingInfo::set_webapi_param(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.webapi_param_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCRoutingInfo.webapi_param)
}
inline std::string* CMsgGCRoutingInfo::mutable_webapi_param() {
  std::string* _s = _internal_mutable_webapi_param();
  // @@protoc_insertion_point(field_mutable:CMsgGCRoutingInfo.webapi_param)
  return _s;
}
inline const std::string& CMsgGCRoutingInfo::_internal_webapi_param() const {
  return _impl_.webapi_param_.Get();
}
inline void CMsgGCRoutingInfo::_internal_set_webapi_param(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.webapi_param_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGCRoutingInfo::_internal_mutable_webapi_param() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.webapi_param_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGCRoutingInfo::release_webapi_param() {
  // @@protoc_insertion_point(field_release:CMsgGCRoutingInfo.webapi_param)
  if (!_internal_has_webapi_param()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.webapi_param_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.webapi_param_.IsDefault()) {
    _impl_.webapi_param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGCRoutingInfo::set_allocated_webapi_param(std::string* webapi_param) {
  if (webapi_param != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.webapi_param_.SetAllocated(webapi_param, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.webapi_param_.IsDefault()) {
    _impl_.webapi_param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGCRoutingInfo.webapi_param)
}

// -------------------------------------------------------------------

// CMsgGCMsgMasterSetWebAPIRouting_Entry

// optional string interface_name = 1;
inline bool CMsgGCMsgMasterSetWebAPIRouting_Entry::_internal_has_interface_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCMsgMasterSetWebAPIRouting_Entry::has_interface_name() const {
  return _internal_has_interface_name();
}
inline void CMsgGCMsgMasterSetWebAPIRouting_Entry::clear_interface_name() {
  _impl_.interface_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCMsgMasterSetWebAPIRouting_Entry::interface_name() const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name)
  return _internal_interface_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCMsgMasterSetWebAPIRouting_Entry::set_interface_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.interface_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name)
}
inline std::string* CMsgGCMsgMasterSetWebAPIRouting_Entry::mutable_interface_name() {
  std::string* _s = _internal_mutable_interface_name();
  // @@protoc_insertion_point(field_mutable:CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name)
  return _s;
}
inline const std::string& CMsgGCMsgMasterSetWebAPIRouting_Entry::_internal_interface_name() const {
  return _impl_.interface_name_.Get();
}
inline void CMsgGCMsgMasterSetWebAPIRouting_Entry::_internal_set_interface_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.interface_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGCMsgMasterSetWebAPIRouting_Entry::_internal_mutable_interface_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.interface_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGCMsgMasterSetWebAPIRouting_Entry::release_interface_name() {
  // @@protoc_insertion_point(field_release:CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name)
  if (!_internal_has_interface_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.interface_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.interface_name_.IsDefault()) {
    _impl_.interface_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGCMsgMasterSetWebAPIRouting_Entry::set_allocated_interface_name(std::string* interface_name) {
  if (interface_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.interface_name_.SetAllocated(interface_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.interface_name_.IsDefault()) {
    _impl_.interface_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name)
}

// optional string method_name = 2;
inline bool CMsgGCMsgMasterSetWebAPIRouting_Entry::_internal_has_method_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCMsgMasterSetWebAPIRouting_Entry::has_method_name() const {
  return _internal_has_method_name();
}
inline void CMsgGCMsgMasterSetWebAPIRouting_Entry::clear_method_name() {
  _impl_.method_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgGCMsgMasterSetWebAPIRouting_Entry::method_name() const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name)
  return _internal_method_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCMsgMasterSetWebAPIRouting_Entry::set_method_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.method_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name)
}
inline std::string* CMsgGCMsgMasterSetWebAPIRouting_Entry::mutable_method_name() {
  std::string* _s = _internal_mutable_method_name();
  // @@protoc_insertion_point(field_mutable:CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name)
  return _s;
}
inline const std::string& CMsgGCMsgMasterSetWebAPIRouting_Entry::_internal_method_name() const {
  return _impl_.method_name_.Get();
}
inline void CMsgGCMsgMasterSetWebAPIRouting_Entry::_internal_set_method_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.method_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGCMsgMasterSetWebAPIRouting_Entry::_internal_mutable_method_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.method_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGCMsgMasterSetWebAPIRouting_Entry::release_method_name() {
  // @@protoc_insertion_point(field_release:CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name)
  if (!_internal_has_method_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.method_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_name_.IsDefault()) {
    _impl_.method_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGCMsgMasterSetWebAPIRouting_Entry::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.method_name_.SetAllocated(method_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_name_.IsDefault()) {
    _impl_.method_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name)
}

// optional .CMsgGCRoutingInfo routing = 3;
inline bool CMsgGCMsgMasterSetWebAPIRouting_Entry::_internal_has_routing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.routing_ != nullptr);
  return value;
}
inline bool CMsgGCMsgMasterSetWebAPIRouting_Entry::has_routing() const {
  return _internal_has_routing();
}
inline void CMsgGCMsgMasterSetWebAPIRouting_Entry::clear_routing() {
  if (_impl_.routing_ != nullptr) _impl_.routing_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgGCRoutingInfo& CMsgGCMsgMasterSetWebAPIRouting_Entry::_internal_routing() const {
  const ::CMsgGCRoutingInfo* p = _impl_.routing_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGCRoutingInfo&>(
      ::_CMsgGCRoutingInfo_default_instance_);
}
inline const ::CMsgGCRoutingInfo& CMsgGCMsgMasterSetWebAPIRouting_Entry::routing() const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgMasterSetWebAPIRouting.Entry.routing)
  return _internal_routing();
}
inline void CMsgGCMsgMasterSetWebAPIRouting_Entry::unsafe_arena_set_allocated_routing(
    ::CMsgGCRoutingInfo* routing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_);
  }
  _impl_.routing_ = routing;
  if (routing) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCMsgMasterSetWebAPIRouting.Entry.routing)
}
inline ::CMsgGCRoutingInfo* CMsgGCMsgMasterSetWebAPIRouting_Entry::release_routing() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgGCRoutingInfo* temp = _impl_.routing_;
  _impl_.routing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGCRoutingInfo* CMsgGCMsgMasterSetWebAPIRouting_Entry::unsafe_arena_release_routing() {
  // @@protoc_insertion_point(field_release:CMsgGCMsgMasterSetWebAPIRouting.Entry.routing)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgGCRoutingInfo* temp = _impl_.routing_;
  _impl_.routing_ = nullptr;
  return temp;
}
inline ::CMsgGCRoutingInfo* CMsgGCMsgMasterSetWebAPIRouting_Entry::_internal_mutable_routing() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.routing_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGCRoutingInfo>(GetArenaForAllocation());
    _impl_.routing_ = p;
  }
  return _impl_.routing_;
}
inline ::CMsgGCRoutingInfo* CMsgGCMsgMasterSetWebAPIRouting_Entry::mutable_routing() {
  ::CMsgGCRoutingInfo* _msg = _internal_mutable_routing();
  // @@protoc_insertion_point(field_mutable:CMsgGCMsgMasterSetWebAPIRouting.Entry.routing)
  return _msg;
}
inline void CMsgGCMsgMasterSetWebAPIRouting_Entry::set_allocated_routing(::CMsgGCRoutingInfo* routing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.routing_;
  }
  if (routing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(routing);
    if (message_arena != submessage_arena) {
      routing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.routing_ = routing;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCMsgMasterSetWebAPIRouting.Entry.routing)
}

// -------------------------------------------------------------------

// CMsgGCMsgMasterSetWebAPIRouting

// repeated .CMsgGCMsgMasterSetWebAPIRouting.Entry entries = 1;
inline int CMsgGCMsgMasterSetWebAPIRouting::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int CMsgGCMsgMasterSetWebAPIRouting::entries_size() const {
  return _internal_entries_size();
}
inline void CMsgGCMsgMasterSetWebAPIRouting::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::CMsgGCMsgMasterSetWebAPIRouting_Entry* CMsgGCMsgMasterSetWebAPIRouting::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCMsgMasterSetWebAPIRouting.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMsgMasterSetWebAPIRouting_Entry >*
CMsgGCMsgMasterSetWebAPIRouting::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCMsgMasterSetWebAPIRouting.entries)
  return &_impl_.entries_;
}
inline const ::CMsgGCMsgMasterSetWebAPIRouting_Entry& CMsgGCMsgMasterSetWebAPIRouting::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::CMsgGCMsgMasterSetWebAPIRouting_Entry& CMsgGCMsgMasterSetWebAPIRouting::entries(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgMasterSetWebAPIRouting.entries)
  return _internal_entries(index);
}
inline ::CMsgGCMsgMasterSetWebAPIRouting_Entry* CMsgGCMsgMasterSetWebAPIRouting::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::CMsgGCMsgMasterSetWebAPIRouting_Entry* CMsgGCMsgMasterSetWebAPIRouting::add_entries() {
  ::CMsgGCMsgMasterSetWebAPIRouting_Entry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:CMsgGCMsgMasterSetWebAPIRouting.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMsgMasterSetWebAPIRouting_Entry >&
CMsgGCMsgMasterSetWebAPIRouting::entries() const {
  // @@protoc_insertion_point(field_list:CMsgGCMsgMasterSetWebAPIRouting.entries)
  return _impl_.entries_;
}

// -------------------------------------------------------------------

// CMsgGCMsgMasterSetClientMsgRouting_Entry

// optional uint32 msg_type = 1;
inline bool CMsgGCMsgMasterSetClientMsgRouting_Entry::_internal_has_msg_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCMsgMasterSetClientMsgRouting_Entry::has_msg_type() const {
  return _internal_has_msg_type();
}
inline void CMsgGCMsgMasterSetClientMsgRouting_Entry::clear_msg_type() {
  _impl_.msg_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCMsgMasterSetClientMsgRouting_Entry::_internal_msg_type() const {
  return _impl_.msg_type_;
}
inline uint32_t CMsgGCMsgMasterSetClientMsgRouting_Entry::msg_type() const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgMasterSetClientMsgRouting.Entry.msg_type)
  return _internal_msg_type();
}
inline void CMsgGCMsgMasterSetClientMsgRouting_Entry::_internal_set_msg_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.msg_type_ = value;
}
inline void CMsgGCMsgMasterSetClientMsgRouting_Entry::set_msg_type(uint32_t value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:CMsgGCMsgMasterSetClientMsgRouting.Entry.msg_type)
}

// optional .CMsgGCRoutingInfo routing = 2;
inline bool CMsgGCMsgMasterSetClientMsgRouting_Entry::_internal_has_routing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.routing_ != nullptr);
  return value;
}
inline bool CMsgGCMsgMasterSetClientMsgRouting_Entry::has_routing() const {
  return _internal_has_routing();
}
inline void CMsgGCMsgMasterSetClientMsgRouting_Entry::clear_routing() {
  if (_impl_.routing_ != nullptr) _impl_.routing_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgGCRoutingInfo& CMsgGCMsgMasterSetClientMsgRouting_Entry::_internal_routing() const {
  const ::CMsgGCRoutingInfo* p = _impl_.routing_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGCRoutingInfo&>(
      ::_CMsgGCRoutingInfo_default_instance_);
}
inline const ::CMsgGCRoutingInfo& CMsgGCMsgMasterSetClientMsgRouting_Entry::routing() const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgMasterSetClientMsgRouting.Entry.routing)
  return _internal_routing();
}
inline void CMsgGCMsgMasterSetClientMsgRouting_Entry::unsafe_arena_set_allocated_routing(
    ::CMsgGCRoutingInfo* routing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_);
  }
  _impl_.routing_ = routing;
  if (routing) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCMsgMasterSetClientMsgRouting.Entry.routing)
}
inline ::CMsgGCRoutingInfo* CMsgGCMsgMasterSetClientMsgRouting_Entry::release_routing() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgGCRoutingInfo* temp = _impl_.routing_;
  _impl_.routing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGCRoutingInfo* CMsgGCMsgMasterSetClientMsgRouting_Entry::unsafe_arena_release_routing() {
  // @@protoc_insertion_point(field_release:CMsgGCMsgMasterSetClientMsgRouting.Entry.routing)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgGCRoutingInfo* temp = _impl_.routing_;
  _impl_.routing_ = nullptr;
  return temp;
}
inline ::CMsgGCRoutingInfo* CMsgGCMsgMasterSetClientMsgRouting_Entry::_internal_mutable_routing() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.routing_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGCRoutingInfo>(GetArenaForAllocation());
    _impl_.routing_ = p;
  }
  return _impl_.routing_;
}
inline ::CMsgGCRoutingInfo* CMsgGCMsgMasterSetClientMsgRouting_Entry::mutable_routing() {
  ::CMsgGCRoutingInfo* _msg = _internal_mutable_routing();
  // @@protoc_insertion_point(field_mutable:CMsgGCMsgMasterSetClientMsgRouting.Entry.routing)
  return _msg;
}
inline void CMsgGCMsgMasterSetClientMsgRouting_Entry::set_allocated_routing(::CMsgGCRoutingInfo* routing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.routing_;
  }
  if (routing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(routing);
    if (message_arena != submessage_arena) {
      routing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.routing_ = routing;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCMsgMasterSetClientMsgRouting.Entry.routing)
}

// -------------------------------------------------------------------

// CMsgGCMsgMasterSetClientMsgRouting

// repeated .CMsgGCMsgMasterSetClientMsgRouting.Entry entries = 1;
inline int CMsgGCMsgMasterSetClientMsgRouting::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int CMsgGCMsgMasterSetClientMsgRouting::entries_size() const {
  return _internal_entries_size();
}
inline void CMsgGCMsgMasterSetClientMsgRouting::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::CMsgGCMsgMasterSetClientMsgRouting_Entry* CMsgGCMsgMasterSetClientMsgRouting::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCMsgMasterSetClientMsgRouting.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMsgMasterSetClientMsgRouting_Entry >*
CMsgGCMsgMasterSetClientMsgRouting::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCMsgMasterSetClientMsgRouting.entries)
  return &_impl_.entries_;
}
inline const ::CMsgGCMsgMasterSetClientMsgRouting_Entry& CMsgGCMsgMasterSetClientMsgRouting::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::CMsgGCMsgMasterSetClientMsgRouting_Entry& CMsgGCMsgMasterSetClientMsgRouting::entries(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgMasterSetClientMsgRouting.entries)
  return _internal_entries(index);
}
inline ::CMsgGCMsgMasterSetClientMsgRouting_Entry* CMsgGCMsgMasterSetClientMsgRouting::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::CMsgGCMsgMasterSetClientMsgRouting_Entry* CMsgGCMsgMasterSetClientMsgRouting::add_entries() {
  ::CMsgGCMsgMasterSetClientMsgRouting_Entry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:CMsgGCMsgMasterSetClientMsgRouting.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMsgMasterSetClientMsgRouting_Entry >&
CMsgGCMsgMasterSetClientMsgRouting::entries() const {
  // @@protoc_insertion_point(field_list:CMsgGCMsgMasterSetClientMsgRouting.entries)
  return _impl_.entries_;
}

// -------------------------------------------------------------------

// CMsgGCMsgMasterSetWebAPIRouting_Response

// optional int32 eresult = 1 [default = 2];
inline bool CMsgGCMsgMasterSetWebAPIRouting_Response::_internal_has_eresult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCMsgMasterSetWebAPIRouting_Response::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgGCMsgMasterSetWebAPIRouting_Response::clear_eresult() {
  _impl_.eresult_ = 2;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgGCMsgMasterSetWebAPIRouting_Response::_internal_eresult() const {
  return _impl_.eresult_;
}
inline int32_t CMsgGCMsgMasterSetWebAPIRouting_Response::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgMasterSetWebAPIRouting_Response.eresult)
  return _internal_eresult();
}
inline void CMsgGCMsgMasterSetWebAPIRouting_Response::_internal_set_eresult(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.eresult_ = value;
}
inline void CMsgGCMsgMasterSetWebAPIRouting_Response::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgGCMsgMasterSetWebAPIRouting_Response.eresult)
}

// -------------------------------------------------------------------

// CMsgGCMsgMasterSetClientMsgRouting_Response

// optional int32 eresult = 1 [default = 2];
inline bool CMsgGCMsgMasterSetClientMsgRouting_Response::_internal_has_eresult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCMsgMasterSetClientMsgRouting_Response::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgGCMsgMasterSetClientMsgRouting_Response::clear_eresult() {
  _impl_.eresult_ = 2;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgGCMsgMasterSetClientMsgRouting_Response::_internal_eresult() const {
  return _impl_.eresult_;
}
inline int32_t CMsgGCMsgMasterSetClientMsgRouting_Response::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgMasterSetClientMsgRouting_Response.eresult)
  return _internal_eresult();
}
inline void CMsgGCMsgMasterSetClientMsgRouting_Response::_internal_set_eresult(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.eresult_ = value;
}
inline void CMsgGCMsgMasterSetClientMsgRouting_Response::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgGCMsgMasterSetClientMsgRouting_Response.eresult)
}

// -------------------------------------------------------------------

// CMsgGCMsgSetOptions_MessageRange

// required uint32 low = 1;
inline bool CMsgGCMsgSetOptions_MessageRange::_internal_has_low() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCMsgSetOptions_MessageRange::has_low() const {
  return _internal_has_low();
}
inline void CMsgGCMsgSetOptions_MessageRange::clear_low() {
  _impl_.low_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGCMsgSetOptions_MessageRange::_internal_low() const {
  return _impl_.low_;
}
inline uint32_t CMsgGCMsgSetOptions_MessageRange::low() const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgSetOptions.MessageRange.low)
  return _internal_low();
}
inline void CMsgGCMsgSetOptions_MessageRange::_internal_set_low(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.low_ = value;
}
inline void CMsgGCMsgSetOptions_MessageRange::set_low(uint32_t value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:CMsgGCMsgSetOptions.MessageRange.low)
}

// required uint32 high = 2;
inline bool CMsgGCMsgSetOptions_MessageRange::_internal_has_high() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCMsgSetOptions_MessageRange::has_high() const {
  return _internal_has_high();
}
inline void CMsgGCMsgSetOptions_MessageRange::clear_high() {
  _impl_.high_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCMsgSetOptions_MessageRange::_internal_high() const {
  return _impl_.high_;
}
inline uint32_t CMsgGCMsgSetOptions_MessageRange::high() const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgSetOptions.MessageRange.high)
  return _internal_high();
}
inline void CMsgGCMsgSetOptions_MessageRange::_internal_set_high(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.high_ = value;
}
inline void CMsgGCMsgSetOptions_MessageRange::set_high(uint32_t value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:CMsgGCMsgSetOptions.MessageRange.high)
}

// -------------------------------------------------------------------

// CMsgGCMsgSetOptions

// repeated .CMsgGCMsgSetOptions.Option options = 1;
inline int CMsgGCMsgSetOptions::_internal_options_size() const {
  return _impl_.options_.size();
}
inline int CMsgGCMsgSetOptions::options_size() const {
  return _internal_options_size();
}
inline void CMsgGCMsgSetOptions::clear_options() {
  _impl_.options_.Clear();
}
inline ::CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::_internal_options(int index) const {
  return static_cast< ::CMsgGCMsgSetOptions_Option >(_impl_.options_.Get(index));
}
inline ::CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::options(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgSetOptions.options)
  return _internal_options(index);
}
inline void CMsgGCMsgSetOptions::set_options(int index, ::CMsgGCMsgSetOptions_Option value) {
  assert(::CMsgGCMsgSetOptions_Option_IsValid(value));
  _impl_.options_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCMsgSetOptions.options)
}
inline void CMsgGCMsgSetOptions::_internal_add_options(::CMsgGCMsgSetOptions_Option value) {
  assert(::CMsgGCMsgSetOptions_Option_IsValid(value));
  _impl_.options_.Add(value);
}
inline void CMsgGCMsgSetOptions::add_options(::CMsgGCMsgSetOptions_Option value) {
  _internal_add_options(value);
  // @@protoc_insertion_point(field_add:CMsgGCMsgSetOptions.options)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CMsgGCMsgSetOptions::options() const {
  // @@protoc_insertion_point(field_list:CMsgGCMsgSetOptions.options)
  return _impl_.options_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CMsgGCMsgSetOptions::_internal_mutable_options() {
  return &_impl_.options_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CMsgGCMsgSetOptions::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCMsgSetOptions.options)
  return _internal_mutable_options();
}

// repeated .CMsgGCMsgSetOptions.MessageRange client_msg_ranges = 2;
inline int CMsgGCMsgSetOptions::_internal_client_msg_ranges_size() const {
  return _impl_.client_msg_ranges_.size();
}
inline int CMsgGCMsgSetOptions::client_msg_ranges_size() const {
  return _internal_client_msg_ranges_size();
}
inline void CMsgGCMsgSetOptions::clear_client_msg_ranges() {
  _impl_.client_msg_ranges_.Clear();
}
inline ::CMsgGCMsgSetOptions_MessageRange* CMsgGCMsgSetOptions::mutable_client_msg_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCMsgSetOptions.client_msg_ranges)
  return _impl_.client_msg_ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMsgSetOptions_MessageRange >*
CMsgGCMsgSetOptions::mutable_client_msg_ranges() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCMsgSetOptions.client_msg_ranges)
  return &_impl_.client_msg_ranges_;
}
inline const ::CMsgGCMsgSetOptions_MessageRange& CMsgGCMsgSetOptions::_internal_client_msg_ranges(int index) const {
  return _impl_.client_msg_ranges_.Get(index);
}
inline const ::CMsgGCMsgSetOptions_MessageRange& CMsgGCMsgSetOptions::client_msg_ranges(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgSetOptions.client_msg_ranges)
  return _internal_client_msg_ranges(index);
}
inline ::CMsgGCMsgSetOptions_MessageRange* CMsgGCMsgSetOptions::_internal_add_client_msg_ranges() {
  return _impl_.client_msg_ranges_.Add();
}
inline ::CMsgGCMsgSetOptions_MessageRange* CMsgGCMsgSetOptions::add_client_msg_ranges() {
  ::CMsgGCMsgSetOptions_MessageRange* _add = _internal_add_client_msg_ranges();
  // @@protoc_insertion_point(field_add:CMsgGCMsgSetOptions.client_msg_ranges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCMsgSetOptions_MessageRange >&
CMsgGCMsgSetOptions::client_msg_ranges() const {
  // @@protoc_insertion_point(field_list:CMsgGCMsgSetOptions.client_msg_ranges)
  return _impl_.client_msg_ranges_;
}

// optional .CMsgGCMsgSetOptions.GCSQLVersion gcsql_version = 3 [default = GCSQL_VERSION_BASELINE];
inline bool CMsgGCMsgSetOptions::_internal_has_gcsql_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCMsgSetOptions::has_gcsql_version() const {
  return _internal_has_gcsql_version();
}
inline void CMsgGCMsgSetOptions::clear_gcsql_version() {
  _impl_.gcsql_version_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgGCMsgSetOptions_GCSQLVersion CMsgGCMsgSetOptions::_internal_gcsql_version() const {
  return static_cast< ::CMsgGCMsgSetOptions_GCSQLVersion >(_impl_.gcsql_version_);
}
inline ::CMsgGCMsgSetOptions_GCSQLVersion CMsgGCMsgSetOptions::gcsql_version() const {
  // @@protoc_insertion_point(field_get:CMsgGCMsgSetOptions.gcsql_version)
  return _internal_gcsql_version();
}
inline void CMsgGCMsgSetOptions::_internal_set_gcsql_version(::CMsgGCMsgSetOptions_GCSQLVersion value) {
  assert(::CMsgGCMsgSetOptions_GCSQLVersion_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.gcsql_version_ = value;
}
inline void CMsgGCMsgSetOptions::set_gcsql_version(::CMsgGCMsgSetOptions_GCSQLVersion value) {
  _internal_set_gcsql_version(value);
  // @@protoc_insertion_point(field_set:CMsgGCMsgSetOptions.gcsql_version)
}

// -------------------------------------------------------------------

// CMsgGCHUpdateSession_ExtraField

// optional string name = 1;
inline bool CMsgGCHUpdateSession_ExtraField::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCHUpdateSession_ExtraField::has_name() const {
  return _internal_has_name();
}
inline void CMsgGCHUpdateSession_ExtraField::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCHUpdateSession_ExtraField::name() const {
  // @@protoc_insertion_point(field_get:CMsgGCHUpdateSession.ExtraField.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCHUpdateSession_ExtraField::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCHUpdateSession.ExtraField.name)
}
inline std::string* CMsgGCHUpdateSession_ExtraField::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgGCHUpdateSession.ExtraField.name)
  return _s;
}
inline const std::string& CMsgGCHUpdateSession_ExtraField::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgGCHUpdateSession_ExtraField::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGCHUpdateSession_ExtraField::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGCHUpdateSession_ExtraField::release_name() {
  // @@protoc_insertion_point(field_release:CMsgGCHUpdateSession.ExtraField.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGCHUpdateSession_ExtraField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGCHUpdateSession.ExtraField.name)
}

// optional string value = 2;
inline bool CMsgGCHUpdateSession_ExtraField::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCHUpdateSession_ExtraField::has_value() const {
  return _internal_has_value();
}
inline void CMsgGCHUpdateSession_ExtraField::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgGCHUpdateSession_ExtraField::value() const {
  // @@protoc_insertion_point(field_get:CMsgGCHUpdateSession.ExtraField.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCHUpdateSession_ExtraField::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCHUpdateSession.ExtraField.value)
}
inline std::string* CMsgGCHUpdateSession_ExtraField::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CMsgGCHUpdateSession.ExtraField.value)
  return _s;
}
inline const std::string& CMsgGCHUpdateSession_ExtraField::_internal_value() const {
  return _impl_.value_.Get();
}
inline void CMsgGCHUpdateSession_ExtraField::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGCHUpdateSession_ExtraField::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGCHUpdateSession_ExtraField::release_value() {
  // @@protoc_insertion_point(field_release:CMsgGCHUpdateSession.ExtraField.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGCHUpdateSession_ExtraField::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGCHUpdateSession.ExtraField.value)
}

// -------------------------------------------------------------------

// CMsgGCHUpdateSession

// optional fixed64 steam_id = 1;
inline bool CMsgGCHUpdateSession::_internal_has_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCHUpdateSession::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgGCHUpdateSession::clear_steam_id() {
  _impl_.steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGCHUpdateSession::_internal_steam_id() const {
  return _impl_.steam_id_;
}
inline uint64_t CMsgGCHUpdateSession::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCHUpdateSession.steam_id)
  return _internal_steam_id();
}
inline void CMsgGCHUpdateSession::_internal_set_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steam_id_ = value;
}
inline void CMsgGCHUpdateSession::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCHUpdateSession.steam_id)
}

// optional uint32 app_id = 2;
inline bool CMsgGCHUpdateSession::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCHUpdateSession::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgGCHUpdateSession::clear_app_id() {
  _impl_.app_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCHUpdateSession::_internal_app_id() const {
  return _impl_.app_id_;
}
inline uint32_t CMsgGCHUpdateSession::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCHUpdateSession.app_id)
  return _internal_app_id();
}
inline void CMsgGCHUpdateSession::_internal_set_app_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.app_id_ = value;
}
inline void CMsgGCHUpdateSession::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCHUpdateSession.app_id)
}

// optional bool online = 3;
inline bool CMsgGCHUpdateSession::_internal_has_online() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCHUpdateSession::has_online() const {
  return _internal_has_online();
}
inline void CMsgGCHUpdateSession::clear_online() {
  _impl_.online_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgGCHUpdateSession::_internal_online() const {
  return _impl_.online_;
}
inline bool CMsgGCHUpdateSession::online() const {
  // @@protoc_insertion_point(field_get:CMsgGCHUpdateSession.online)
  return _internal_online();
}
inline void CMsgGCHUpdateSession::_internal_set_online(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.online_ = value;
}
inline void CMsgGCHUpdateSession::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:CMsgGCHUpdateSession.online)
}

// optional fixed64 server_steam_id = 4;
inline bool CMsgGCHUpdateSession::_internal_has_server_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCHUpdateSession::has_server_steam_id() const {
  return _internal_has_server_steam_id();
}
inline void CMsgGCHUpdateSession::clear_server_steam_id() {
  _impl_.server_steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CMsgGCHUpdateSession::_internal_server_steam_id() const {
  return _impl_.server_steam_id_;
}
inline uint64_t CMsgGCHUpdateSession::server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCHUpdateSession.server_steam_id)
  return _internal_server_steam_id();
}
inline void CMsgGCHUpdateSession::_internal_set_server_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.server_steam_id_ = value;
}
inline void CMsgGCHUpdateSession::set_server_steam_id(uint64_t value) {
  _internal_set_server_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCHUpdateSession.server_steam_id)
}

// optional uint32 server_addr = 5;
inline bool CMsgGCHUpdateSession::_internal_has_server_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCHUpdateSession::has_server_addr() const {
  return _internal_has_server_addr();
}
inline void CMsgGCHUpdateSession::clear_server_addr() {
  _impl_.server_addr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgGCHUpdateSession::_internal_server_addr() const {
  return _impl_.server_addr_;
}
inline uint32_t CMsgGCHUpdateSession::server_addr() const {
  // @@protoc_insertion_point(field_get:CMsgGCHUpdateSession.server_addr)
  return _internal_server_addr();
}
inline void CMsgGCHUpdateSession::_internal_set_server_addr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.server_addr_ = value;
}
inline void CMsgGCHUpdateSession::set_server_addr(uint32_t value) {
  _internal_set_server_addr(value);
  // @@protoc_insertion_point(field_set:CMsgGCHUpdateSession.server_addr)
}

// optional uint32 server_port = 6;
inline bool CMsgGCHUpdateSession::_internal_has_server_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGCHUpdateSession::has_server_port() const {
  return _internal_has_server_port();
}
inline void CMsgGCHUpdateSession::clear_server_port() {
  _impl_.server_port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgGCHUpdateSession::_internal_server_port() const {
  return _impl_.server_port_;
}
inline uint32_t CMsgGCHUpdateSession::server_port() const {
  // @@protoc_insertion_point(field_get:CMsgGCHUpdateSession.server_port)
  return _internal_server_port();
}
inline void CMsgGCHUpdateSession::_internal_set_server_port(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.server_port_ = value;
}
inline void CMsgGCHUpdateSession::set_server_port(uint32_t value) {
  _internal_set_server_port(value);
  // @@protoc_insertion_point(field_set:CMsgGCHUpdateSession.server_port)
}

// optional uint32 os_type = 7;
inline bool CMsgGCHUpdateSession::_internal_has_os_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGCHUpdateSession::has_os_type() const {
  return _internal_has_os_type();
}
inline void CMsgGCHUpdateSession::clear_os_type() {
  _impl_.os_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgGCHUpdateSession::_internal_os_type() const {
  return _impl_.os_type_;
}
inline uint32_t CMsgGCHUpdateSession::os_type() const {
  // @@protoc_insertion_point(field_get:CMsgGCHUpdateSession.os_type)
  return _internal_os_type();
}
inline void CMsgGCHUpdateSession::_internal_set_os_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.os_type_ = value;
}
inline void CMsgGCHUpdateSession::set_os_type(uint32_t value) {
  _internal_set_os_type(value);
  // @@protoc_insertion_point(field_set:CMsgGCHUpdateSession.os_type)
}

// optional uint32 client_addr = 8;
inline bool CMsgGCHUpdateSession::_internal_has_client_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGCHUpdateSession::has_client_addr() const {
  return _internal_has_client_addr();
}
inline void CMsgGCHUpdateSession::clear_client_addr() {
  _impl_.client_addr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgGCHUpdateSession::_internal_client_addr() const {
  return _impl_.client_addr_;
}
inline uint32_t CMsgGCHUpdateSession::client_addr() const {
  // @@protoc_insertion_point(field_get:CMsgGCHUpdateSession.client_addr)
  return _internal_client_addr();
}
inline void CMsgGCHUpdateSession::_internal_set_client_addr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.client_addr_ = value;
}
inline void CMsgGCHUpdateSession::set_client_addr(uint32_t value) {
  _internal_set_client_addr(value);
  // @@protoc_insertion_point(field_set:CMsgGCHUpdateSession.client_addr)
}

// repeated .CMsgGCHUpdateSession.ExtraField extra_fields = 9;
inline int CMsgGCHUpdateSession::_internal_extra_fields_size() const {
  return _impl_.extra_fields_.size();
}
inline int CMsgGCHUpdateSession::extra_fields_size() const {
  return _internal_extra_fields_size();
}
inline void CMsgGCHUpdateSession::clear_extra_fields() {
  _impl_.extra_fields_.Clear();
}
inline ::CMsgGCHUpdateSession_ExtraField* CMsgGCHUpdateSession::mutable_extra_fields(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCHUpdateSession.extra_fields)
  return _impl_.extra_fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCHUpdateSession_ExtraField >*
CMsgGCHUpdateSession::mutable_extra_fields() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCHUpdateSession.extra_fields)
  return &_impl_.extra_fields_;
}
inline const ::CMsgGCHUpdateSession_ExtraField& CMsgGCHUpdateSession::_internal_extra_fields(int index) const {
  return _impl_.extra_fields_.Get(index);
}
inline const ::CMsgGCHUpdateSession_ExtraField& CMsgGCHUpdateSession::extra_fields(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCHUpdateSession.extra_fields)
  return _internal_extra_fields(index);
}
inline ::CMsgGCHUpdateSession_ExtraField* CMsgGCHUpdateSession::_internal_add_extra_fields() {
  return _impl_.extra_fields_.Add();
}
inline ::CMsgGCHUpdateSession_ExtraField* CMsgGCHUpdateSession::add_extra_fields() {
  ::CMsgGCHUpdateSession_ExtraField* _add = _internal_add_extra_fields();
  // @@protoc_insertion_point(field_add:CMsgGCHUpdateSession.extra_fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCHUpdateSession_ExtraField >&
CMsgGCHUpdateSession::extra_fields() const {
  // @@protoc_insertion_point(field_list:CMsgGCHUpdateSession.extra_fields)
  return _impl_.extra_fields_;
}

// -------------------------------------------------------------------

// CMsgNotificationOfSuspiciousActivity_MultipleGameInstances

// optional uint32 app_instance_count = 1;
inline bool CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::_internal_has_app_instance_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::has_app_instance_count() const {
  return _internal_has_app_instance_count();
}
inline void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::clear_app_instance_count() {
  _impl_.app_instance_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::_internal_app_instance_count() const {
  return _impl_.app_instance_count_;
}
inline uint32_t CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::app_instance_count() const {
  // @@protoc_insertion_point(field_get:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.app_instance_count)
  return _internal_app_instance_count();
}
inline void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::_internal_set_app_instance_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.app_instance_count_ = value;
}
inline void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::set_app_instance_count(uint32_t value) {
  _internal_set_app_instance_count(value);
  // @@protoc_insertion_point(field_set:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.app_instance_count)
}

// repeated fixed64 other_steamids = 2;
inline int CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::_internal_other_steamids_size() const {
  return _impl_.other_steamids_.size();
}
inline int CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::other_steamids_size() const {
  return _internal_other_steamids_size();
}
inline void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::clear_other_steamids() {
  _impl_.other_steamids_.Clear();
}
inline uint64_t CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::_internal_other_steamids(int index) const {
  return _impl_.other_steamids_.Get(index);
}
inline uint64_t CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::other_steamids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.other_steamids)
  return _internal_other_steamids(index);
}
inline void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::set_other_steamids(int index, uint64_t value) {
  _impl_.other_steamids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.other_steamids)
}
inline void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::_internal_add_other_steamids(uint64_t value) {
  _impl_.other_steamids_.Add(value);
}
inline void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::add_other_steamids(uint64_t value) {
  _internal_add_other_steamids(value);
  // @@protoc_insertion_point(field_add:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.other_steamids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::_internal_other_steamids() const {
  return _impl_.other_steamids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::other_steamids() const {
  // @@protoc_insertion_point(field_list:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.other_steamids)
  return _internal_other_steamids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::_internal_mutable_other_steamids() {
  return &_impl_.other_steamids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::mutable_other_steamids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.other_steamids)
  return _internal_mutable_other_steamids();
}

// -------------------------------------------------------------------

// CMsgNotificationOfSuspiciousActivity

// optional fixed64 steamid = 1;
inline bool CMsgNotificationOfSuspiciousActivity::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgNotificationOfSuspiciousActivity::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgNotificationOfSuspiciousActivity::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgNotificationOfSuspiciousActivity::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CMsgNotificationOfSuspiciousActivity::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgNotificationOfSuspiciousActivity.steamid)
  return _internal_steamid();
}
inline void CMsgNotificationOfSuspiciousActivity::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.steamid_ = value;
}
inline void CMsgNotificationOfSuspiciousActivity::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgNotificationOfSuspiciousActivity.steamid)
}

// optional uint32 appid = 2;
inline bool CMsgNotificationOfSuspiciousActivity::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgNotificationOfSuspiciousActivity::has_appid() const {
  return _internal_has_appid();
}
inline void CMsgNotificationOfSuspiciousActivity::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgNotificationOfSuspiciousActivity::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CMsgNotificationOfSuspiciousActivity::appid() const {
  // @@protoc_insertion_point(field_get:CMsgNotificationOfSuspiciousActivity.appid)
  return _internal_appid();
}
inline void CMsgNotificationOfSuspiciousActivity::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.appid_ = value;
}
inline void CMsgNotificationOfSuspiciousActivity::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CMsgNotificationOfSuspiciousActivity.appid)
}

// optional .CMsgNotificationOfSuspiciousActivity.MultipleGameInstances multiple_instances = 3;
inline bool CMsgNotificationOfSuspiciousActivity::_internal_has_multiple_instances() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.multiple_instances_ != nullptr);
  return value;
}
inline bool CMsgNotificationOfSuspiciousActivity::has_multiple_instances() const {
  return _internal_has_multiple_instances();
}
inline void CMsgNotificationOfSuspiciousActivity::clear_multiple_instances() {
  if (_impl_.multiple_instances_ != nullptr) _impl_.multiple_instances_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& CMsgNotificationOfSuspiciousActivity::_internal_multiple_instances() const {
  const ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* p = _impl_.multiple_instances_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances&>(
      ::_CMsgNotificationOfSuspiciousActivity_MultipleGameInstances_default_instance_);
}
inline const ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& CMsgNotificationOfSuspiciousActivity::multiple_instances() const {
  // @@protoc_insertion_point(field_get:CMsgNotificationOfSuspiciousActivity.multiple_instances)
  return _internal_multiple_instances();
}
inline void CMsgNotificationOfSuspiciousActivity::unsafe_arena_set_allocated_multiple_instances(
    ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* multiple_instances) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.multiple_instances_);
  }
  _impl_.multiple_instances_ = multiple_instances;
  if (multiple_instances) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgNotificationOfSuspiciousActivity.multiple_instances)
}
inline ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* CMsgNotificationOfSuspiciousActivity::release_multiple_instances() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* temp = _impl_.multiple_instances_;
  _impl_.multiple_instances_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* CMsgNotificationOfSuspiciousActivity::unsafe_arena_release_multiple_instances() {
  // @@protoc_insertion_point(field_release:CMsgNotificationOfSuspiciousActivity.multiple_instances)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* temp = _impl_.multiple_instances_;
  _impl_.multiple_instances_ = nullptr;
  return temp;
}
inline ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* CMsgNotificationOfSuspiciousActivity::_internal_mutable_multiple_instances() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.multiple_instances_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances>(GetArenaForAllocation());
    _impl_.multiple_instances_ = p;
  }
  return _impl_.multiple_instances_;
}
inline ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* CMsgNotificationOfSuspiciousActivity::mutable_multiple_instances() {
  ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* _msg = _internal_mutable_multiple_instances();
  // @@protoc_insertion_point(field_mutable:CMsgNotificationOfSuspiciousActivity.multiple_instances)
  return _msg;
}
inline void CMsgNotificationOfSuspiciousActivity::set_allocated_multiple_instances(::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* multiple_instances) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.multiple_instances_;
  }
  if (multiple_instances) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(multiple_instances);
    if (message_arena != submessage_arena) {
      multiple_instances = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multiple_instances, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.multiple_instances_ = multiple_instances;
  // @@protoc_insertion_point(field_set_allocated:CMsgNotificationOfSuspiciousActivity.multiple_instances)
}

// -------------------------------------------------------------------

// CMsgDPPartnerMicroTxns_PartnerMicroTxn

// optional uint32 init_time = 1;
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_has_init_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_init_time() const {
  return _internal_has_init_time();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_init_time() {
  _impl_.init_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_init_time() const {
  return _impl_.init_time_;
}
inline uint32_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::init_time() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.PartnerMicroTxn.init_time)
  return _internal_init_time();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_set_init_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.init_time_ = value;
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_init_time(uint32_t value) {
  _internal_set_init_time(value);
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxns.PartnerMicroTxn.init_time)
}

// optional uint32 last_update_time = 2;
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_has_last_update_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_last_update_time() const {
  return _internal_has_last_update_time();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_last_update_time() {
  _impl_.last_update_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_last_update_time() const {
  return _impl_.last_update_time_;
}
inline uint32_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::last_update_time() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.PartnerMicroTxn.last_update_time)
  return _internal_last_update_time();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_set_last_update_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.last_update_time_ = value;
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_last_update_time(uint32_t value) {
  _internal_set_last_update_time(value);
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxns.PartnerMicroTxn.last_update_time)
}

// optional uint64 txn_id = 3;
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_has_txn_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_txn_id() const {
  return _internal_has_txn_id();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_txn_id() {
  _impl_.txn_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_txn_id() const {
  return _impl_.txn_id_;
}
inline uint64_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::txn_id() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.PartnerMicroTxn.txn_id)
  return _internal_txn_id();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_set_txn_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.txn_id_ = value;
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_txn_id(uint64_t value) {
  _internal_set_txn_id(value);
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxns.PartnerMicroTxn.txn_id)
}

// optional uint32 account_id = 4;
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.PartnerMicroTxn.account_id)
  return _internal_account_id();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.account_id_ = value;
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxns.PartnerMicroTxn.account_id)
}

// optional uint32 line_item = 5;
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_has_line_item() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_line_item() const {
  return _internal_has_line_item();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_line_item() {
  _impl_.line_item_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_line_item() const {
  return _impl_.line_item_;
}
inline uint32_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::line_item() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.PartnerMicroTxn.line_item)
  return _internal_line_item();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_set_line_item(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.line_item_ = value;
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_line_item(uint32_t value) {
  _internal_set_line_item(value);
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxns.PartnerMicroTxn.line_item)
}

// optional uint64 item_id = 6;
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_has_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_item_id() const {
  return _internal_has_item_id();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_item_id() {
  _impl_.item_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint64_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.PartnerMicroTxn.item_id)
  return _internal_item_id();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_set_item_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.item_id_ = value;
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_item_id(uint64_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxns.PartnerMicroTxn.item_id)
}

// optional uint32 def_index = 7;
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_has_def_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_def_index() const {
  return _internal_has_def_index();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_def_index() {
  _impl_.def_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_def_index() const {
  return _impl_.def_index_;
}
inline uint32_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::def_index() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.PartnerMicroTxn.def_index)
  return _internal_def_index();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_set_def_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.def_index_ = value;
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_def_index(uint32_t value) {
  _internal_set_def_index(value);
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxns.PartnerMicroTxn.def_index)
}

// optional uint64 price = 8;
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_has_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_price() const {
  return _internal_has_price();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_price() {
  _impl_.price_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_price() const {
  return _impl_.price_;
}
inline uint64_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::price() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.PartnerMicroTxn.price)
  return _internal_price();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_set_price(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.price_ = value;
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_price(uint64_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxns.PartnerMicroTxn.price)
}

// optional uint64 tax = 9;
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_has_tax() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_tax() const {
  return _internal_has_tax();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_tax() {
  _impl_.tax_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint64_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_tax() const {
  return _impl_.tax_;
}
inline uint64_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::tax() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.PartnerMicroTxn.tax)
  return _internal_tax();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_set_tax(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.tax_ = value;
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_tax(uint64_t value) {
  _internal_set_tax(value);
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxns.PartnerMicroTxn.tax)
}

// optional uint64 price_usd = 10;
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_has_price_usd() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_price_usd() const {
  return _internal_has_price_usd();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_price_usd() {
  _impl_.price_usd_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint64_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_price_usd() const {
  return _impl_.price_usd_;
}
inline uint64_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::price_usd() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.PartnerMicroTxn.price_usd)
  return _internal_price_usd();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_set_price_usd(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.price_usd_ = value;
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_price_usd(uint64_t value) {
  _internal_set_price_usd(value);
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxns.PartnerMicroTxn.price_usd)
}

// optional uint64 tax_usd = 11;
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_has_tax_usd() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_tax_usd() const {
  return _internal_has_tax_usd();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_tax_usd() {
  _impl_.tax_usd_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint64_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_tax_usd() const {
  return _impl_.tax_usd_;
}
inline uint64_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::tax_usd() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.PartnerMicroTxn.tax_usd)
  return _internal_tax_usd();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_set_tax_usd(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.tax_usd_ = value;
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_tax_usd(uint64_t value) {
  _internal_set_tax_usd(value);
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxns.PartnerMicroTxn.tax_usd)
}

// optional uint32 purchase_type = 12;
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_has_purchase_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_purchase_type() const {
  return _internal_has_purchase_type();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_purchase_type() {
  _impl_.purchase_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_purchase_type() const {
  return _impl_.purchase_type_;
}
inline uint32_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::purchase_type() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.PartnerMicroTxn.purchase_type)
  return _internal_purchase_type();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_set_purchase_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.purchase_type_ = value;
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_purchase_type(uint32_t value) {
  _internal_set_purchase_type(value);
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxns.PartnerMicroTxn.purchase_type)
}

// optional uint32 steam_txn_type = 13;
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_has_steam_txn_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_steam_txn_type() const {
  return _internal_has_steam_txn_type();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_steam_txn_type() {
  _impl_.steam_txn_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_steam_txn_type() const {
  return _impl_.steam_txn_type_;
}
inline uint32_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::steam_txn_type() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.PartnerMicroTxn.steam_txn_type)
  return _internal_steam_txn_type();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_set_steam_txn_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.steam_txn_type_ = value;
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_steam_txn_type(uint32_t value) {
  _internal_set_steam_txn_type(value);
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxns.PartnerMicroTxn.steam_txn_type)
}

// optional string country_code = 14;
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_has_country_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_country_code() const {
  return _internal_has_country_code();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_country_code() {
  _impl_.country_code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDPPartnerMicroTxns_PartnerMicroTxn::country_code() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code)
  return _internal_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_country_code(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.country_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code)
}
inline std::string* CMsgDPPartnerMicroTxns_PartnerMicroTxn::mutable_country_code() {
  std::string* _s = _internal_mutable_country_code();
  // @@protoc_insertion_point(field_mutable:CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code)
  return _s;
}
inline const std::string& CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_country_code() const {
  return _impl_.country_code_.Get();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_set_country_code(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.country_code_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_mutable_country_code() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.country_code_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDPPartnerMicroTxns_PartnerMicroTxn::release_country_code() {
  // @@protoc_insertion_point(field_release:CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code)
  if (!_internal_has_country_code()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.country_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_code_.IsDefault()) {
    _impl_.country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.country_code_.SetAllocated(country_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_code_.IsDefault()) {
    _impl_.country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code)
}

// optional string region_code = 15;
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_has_region_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_region_code() const {
  return _internal_has_region_code();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_region_code() {
  _impl_.region_code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDPPartnerMicroTxns_PartnerMicroTxn::region_code() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code)
  return _internal_region_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_region_code(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.region_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code)
}
inline std::string* CMsgDPPartnerMicroTxns_PartnerMicroTxn::mutable_region_code() {
  std::string* _s = _internal_mutable_region_code();
  // @@protoc_insertion_point(field_mutable:CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code)
  return _s;
}
inline const std::string& CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_region_code() const {
  return _impl_.region_code_.Get();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_set_region_code(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.region_code_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_mutable_region_code() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.region_code_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDPPartnerMicroTxns_PartnerMicroTxn::release_region_code() {
  // @@protoc_insertion_point(field_release:CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code)
  if (!_internal_has_region_code()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.region_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.region_code_.IsDefault()) {
    _impl_.region_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_allocated_region_code(std::string* region_code) {
  if (region_code != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.region_code_.SetAllocated(region_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.region_code_.IsDefault()) {
    _impl_.region_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code)
}

// optional int32 quantity = 16;
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_has_quantity() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_quantity() const {
  return _internal_has_quantity();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_quantity() {
  _impl_.quantity_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline int32_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_quantity() const {
  return _impl_.quantity_;
}
inline int32_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::quantity() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.PartnerMicroTxn.quantity)
  return _internal_quantity();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_set_quantity(int32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.quantity_ = value;
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_quantity(int32_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxns.PartnerMicroTxn.quantity)
}

// optional uint64 ref_trans_id = 17;
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_has_ref_trans_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_ref_trans_id() const {
  return _internal_has_ref_trans_id();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_ref_trans_id() {
  _impl_.ref_trans_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint64_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_ref_trans_id() const {
  return _impl_.ref_trans_id_;
}
inline uint64_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::ref_trans_id() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.PartnerMicroTxn.ref_trans_id)
  return _internal_ref_trans_id();
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::_internal_set_ref_trans_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.ref_trans_id_ = value;
}
inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_ref_trans_id(uint64_t value) {
  _internal_set_ref_trans_id(value);
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxns.PartnerMicroTxn.ref_trans_id)
}

// -------------------------------------------------------------------

// CMsgDPPartnerMicroTxns_PartnerInfo

// optional uint32 partner_id = 1;
inline bool CMsgDPPartnerMicroTxns_PartnerInfo::_internal_has_partner_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxns_PartnerInfo::has_partner_id() const {
  return _internal_has_partner_id();
}
inline void CMsgDPPartnerMicroTxns_PartnerInfo::clear_partner_id() {
  _impl_.partner_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDPPartnerMicroTxns_PartnerInfo::_internal_partner_id() const {
  return _impl_.partner_id_;
}
inline uint32_t CMsgDPPartnerMicroTxns_PartnerInfo::partner_id() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.PartnerInfo.partner_id)
  return _internal_partner_id();
}
inline void CMsgDPPartnerMicroTxns_PartnerInfo::_internal_set_partner_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.partner_id_ = value;
}
inline void CMsgDPPartnerMicroTxns_PartnerInfo::set_partner_id(uint32_t value) {
  _internal_set_partner_id(value);
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxns.PartnerInfo.partner_id)
}

// optional string partner_name = 2;
inline bool CMsgDPPartnerMicroTxns_PartnerInfo::_internal_has_partner_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxns_PartnerInfo::has_partner_name() const {
  return _internal_has_partner_name();
}
inline void CMsgDPPartnerMicroTxns_PartnerInfo::clear_partner_name() {
  _impl_.partner_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDPPartnerMicroTxns_PartnerInfo::partner_name() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.PartnerInfo.partner_name)
  return _internal_partner_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDPPartnerMicroTxns_PartnerInfo::set_partner_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.partner_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxns.PartnerInfo.partner_name)
}
inline std::string* CMsgDPPartnerMicroTxns_PartnerInfo::mutable_partner_name() {
  std::string* _s = _internal_mutable_partner_name();
  // @@protoc_insertion_point(field_mutable:CMsgDPPartnerMicroTxns.PartnerInfo.partner_name)
  return _s;
}
inline const std::string& CMsgDPPartnerMicroTxns_PartnerInfo::_internal_partner_name() const {
  return _impl_.partner_name_.Get();
}
inline void CMsgDPPartnerMicroTxns_PartnerInfo::_internal_set_partner_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.partner_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDPPartnerMicroTxns_PartnerInfo::_internal_mutable_partner_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.partner_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDPPartnerMicroTxns_PartnerInfo::release_partner_name() {
  // @@protoc_insertion_point(field_release:CMsgDPPartnerMicroTxns.PartnerInfo.partner_name)
  if (!_internal_has_partner_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.partner_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.partner_name_.IsDefault()) {
    _impl_.partner_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDPPartnerMicroTxns_PartnerInfo::set_allocated_partner_name(std::string* partner_name) {
  if (partner_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.partner_name_.SetAllocated(partner_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.partner_name_.IsDefault()) {
    _impl_.partner_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDPPartnerMicroTxns.PartnerInfo.partner_name)
}

// optional string currency_code = 3;
inline bool CMsgDPPartnerMicroTxns_PartnerInfo::_internal_has_currency_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxns_PartnerInfo::has_currency_code() const {
  return _internal_has_currency_code();
}
inline void CMsgDPPartnerMicroTxns_PartnerInfo::clear_currency_code() {
  _impl_.currency_code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDPPartnerMicroTxns_PartnerInfo::currency_code() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.PartnerInfo.currency_code)
  return _internal_currency_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDPPartnerMicroTxns_PartnerInfo::set_currency_code(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.currency_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxns.PartnerInfo.currency_code)
}
inline std::string* CMsgDPPartnerMicroTxns_PartnerInfo::mutable_currency_code() {
  std::string* _s = _internal_mutable_currency_code();
  // @@protoc_insertion_point(field_mutable:CMsgDPPartnerMicroTxns.PartnerInfo.currency_code)
  return _s;
}
inline const std::string& CMsgDPPartnerMicroTxns_PartnerInfo::_internal_currency_code() const {
  return _impl_.currency_code_.Get();
}
inline void CMsgDPPartnerMicroTxns_PartnerInfo::_internal_set_currency_code(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.currency_code_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDPPartnerMicroTxns_PartnerInfo::_internal_mutable_currency_code() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.currency_code_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDPPartnerMicroTxns_PartnerInfo::release_currency_code() {
  // @@protoc_insertion_point(field_release:CMsgDPPartnerMicroTxns.PartnerInfo.currency_code)
  if (!_internal_has_currency_code()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.currency_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currency_code_.IsDefault()) {
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDPPartnerMicroTxns_PartnerInfo::set_allocated_currency_code(std::string* currency_code) {
  if (currency_code != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.currency_code_.SetAllocated(currency_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currency_code_.IsDefault()) {
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDPPartnerMicroTxns.PartnerInfo.currency_code)
}

// optional string currency_name = 4;
inline bool CMsgDPPartnerMicroTxns_PartnerInfo::_internal_has_currency_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxns_PartnerInfo::has_currency_name() const {
  return _internal_has_currency_name();
}
inline void CMsgDPPartnerMicroTxns_PartnerInfo::clear_currency_name() {
  _impl_.currency_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgDPPartnerMicroTxns_PartnerInfo::currency_name() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.PartnerInfo.currency_name)
  return _internal_currency_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDPPartnerMicroTxns_PartnerInfo::set_currency_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.currency_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxns.PartnerInfo.currency_name)
}
inline std::string* CMsgDPPartnerMicroTxns_PartnerInfo::mutable_currency_name() {
  std::string* _s = _internal_mutable_currency_name();
  // @@protoc_insertion_point(field_mutable:CMsgDPPartnerMicroTxns.PartnerInfo.currency_name)
  return _s;
}
inline const std::string& CMsgDPPartnerMicroTxns_PartnerInfo::_internal_currency_name() const {
  return _impl_.currency_name_.Get();
}
inline void CMsgDPPartnerMicroTxns_PartnerInfo::_internal_set_currency_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.currency_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDPPartnerMicroTxns_PartnerInfo::_internal_mutable_currency_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.currency_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDPPartnerMicroTxns_PartnerInfo::release_currency_name() {
  // @@protoc_insertion_point(field_release:CMsgDPPartnerMicroTxns.PartnerInfo.currency_name)
  if (!_internal_has_currency_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.currency_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currency_name_.IsDefault()) {
    _impl_.currency_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDPPartnerMicroTxns_PartnerInfo::set_allocated_currency_name(std::string* currency_name) {
  if (currency_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.currency_name_.SetAllocated(currency_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currency_name_.IsDefault()) {
    _impl_.currency_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDPPartnerMicroTxns.PartnerInfo.currency_name)
}

// -------------------------------------------------------------------

// CMsgDPPartnerMicroTxns

// optional uint32 appid = 1;
inline bool CMsgDPPartnerMicroTxns::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxns::has_appid() const {
  return _internal_has_appid();
}
inline void CMsgDPPartnerMicroTxns::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDPPartnerMicroTxns::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CMsgDPPartnerMicroTxns::appid() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.appid)
  return _internal_appid();
}
inline void CMsgDPPartnerMicroTxns::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.appid_ = value;
}
inline void CMsgDPPartnerMicroTxns::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxns.appid)
}

// optional string gc_name = 2;
inline bool CMsgDPPartnerMicroTxns::_internal_has_gc_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxns::has_gc_name() const {
  return _internal_has_gc_name();
}
inline void CMsgDPPartnerMicroTxns::clear_gc_name() {
  _impl_.gc_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDPPartnerMicroTxns::gc_name() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.gc_name)
  return _internal_gc_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDPPartnerMicroTxns::set_gc_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.gc_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxns.gc_name)
}
inline std::string* CMsgDPPartnerMicroTxns::mutable_gc_name() {
  std::string* _s = _internal_mutable_gc_name();
  // @@protoc_insertion_point(field_mutable:CMsgDPPartnerMicroTxns.gc_name)
  return _s;
}
inline const std::string& CMsgDPPartnerMicroTxns::_internal_gc_name() const {
  return _impl_.gc_name_.Get();
}
inline void CMsgDPPartnerMicroTxns::_internal_set_gc_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.gc_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDPPartnerMicroTxns::_internal_mutable_gc_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.gc_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDPPartnerMicroTxns::release_gc_name() {
  // @@protoc_insertion_point(field_release:CMsgDPPartnerMicroTxns.gc_name)
  if (!_internal_has_gc_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.gc_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gc_name_.IsDefault()) {
    _impl_.gc_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDPPartnerMicroTxns::set_allocated_gc_name(std::string* gc_name) {
  if (gc_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.gc_name_.SetAllocated(gc_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gc_name_.IsDefault()) {
    _impl_.gc_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDPPartnerMicroTxns.gc_name)
}

// optional .CMsgDPPartnerMicroTxns.PartnerInfo partner = 3;
inline bool CMsgDPPartnerMicroTxns::_internal_has_partner() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.partner_ != nullptr);
  return value;
}
inline bool CMsgDPPartnerMicroTxns::has_partner() const {
  return _internal_has_partner();
}
inline void CMsgDPPartnerMicroTxns::clear_partner() {
  if (_impl_.partner_ != nullptr) _impl_.partner_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgDPPartnerMicroTxns_PartnerInfo& CMsgDPPartnerMicroTxns::_internal_partner() const {
  const ::CMsgDPPartnerMicroTxns_PartnerInfo* p = _impl_.partner_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDPPartnerMicroTxns_PartnerInfo&>(
      ::_CMsgDPPartnerMicroTxns_PartnerInfo_default_instance_);
}
inline const ::CMsgDPPartnerMicroTxns_PartnerInfo& CMsgDPPartnerMicroTxns::partner() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.partner)
  return _internal_partner();
}
inline void CMsgDPPartnerMicroTxns::unsafe_arena_set_allocated_partner(
    ::CMsgDPPartnerMicroTxns_PartnerInfo* partner) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.partner_);
  }
  _impl_.partner_ = partner;
  if (partner) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDPPartnerMicroTxns.partner)
}
inline ::CMsgDPPartnerMicroTxns_PartnerInfo* CMsgDPPartnerMicroTxns::release_partner() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgDPPartnerMicroTxns_PartnerInfo* temp = _impl_.partner_;
  _impl_.partner_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDPPartnerMicroTxns_PartnerInfo* CMsgDPPartnerMicroTxns::unsafe_arena_release_partner() {
  // @@protoc_insertion_point(field_release:CMsgDPPartnerMicroTxns.partner)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgDPPartnerMicroTxns_PartnerInfo* temp = _impl_.partner_;
  _impl_.partner_ = nullptr;
  return temp;
}
inline ::CMsgDPPartnerMicroTxns_PartnerInfo* CMsgDPPartnerMicroTxns::_internal_mutable_partner() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.partner_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDPPartnerMicroTxns_PartnerInfo>(GetArenaForAllocation());
    _impl_.partner_ = p;
  }
  return _impl_.partner_;
}
inline ::CMsgDPPartnerMicroTxns_PartnerInfo* CMsgDPPartnerMicroTxns::mutable_partner() {
  ::CMsgDPPartnerMicroTxns_PartnerInfo* _msg = _internal_mutable_partner();
  // @@protoc_insertion_point(field_mutable:CMsgDPPartnerMicroTxns.partner)
  return _msg;
}
inline void CMsgDPPartnerMicroTxns::set_allocated_partner(::CMsgDPPartnerMicroTxns_PartnerInfo* partner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.partner_;
  }
  if (partner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(partner);
    if (message_arena != submessage_arena) {
      partner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partner, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.partner_ = partner;
  // @@protoc_insertion_point(field_set_allocated:CMsgDPPartnerMicroTxns.partner)
}

// repeated .CMsgDPPartnerMicroTxns.PartnerMicroTxn transactions = 4;
inline int CMsgDPPartnerMicroTxns::_internal_transactions_size() const {
  return _impl_.transactions_.size();
}
inline int CMsgDPPartnerMicroTxns::transactions_size() const {
  return _internal_transactions_size();
}
inline void CMsgDPPartnerMicroTxns::clear_transactions() {
  _impl_.transactions_.Clear();
}
inline ::CMsgDPPartnerMicroTxns_PartnerMicroTxn* CMsgDPPartnerMicroTxns::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDPPartnerMicroTxns.transactions)
  return _impl_.transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDPPartnerMicroTxns_PartnerMicroTxn >*
CMsgDPPartnerMicroTxns::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDPPartnerMicroTxns.transactions)
  return &_impl_.transactions_;
}
inline const ::CMsgDPPartnerMicroTxns_PartnerMicroTxn& CMsgDPPartnerMicroTxns::_internal_transactions(int index) const {
  return _impl_.transactions_.Get(index);
}
inline const ::CMsgDPPartnerMicroTxns_PartnerMicroTxn& CMsgDPPartnerMicroTxns::transactions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxns.transactions)
  return _internal_transactions(index);
}
inline ::CMsgDPPartnerMicroTxns_PartnerMicroTxn* CMsgDPPartnerMicroTxns::_internal_add_transactions() {
  return _impl_.transactions_.Add();
}
inline ::CMsgDPPartnerMicroTxns_PartnerMicroTxn* CMsgDPPartnerMicroTxns::add_transactions() {
  ::CMsgDPPartnerMicroTxns_PartnerMicroTxn* _add = _internal_add_transactions();
  // @@protoc_insertion_point(field_add:CMsgDPPartnerMicroTxns.transactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDPPartnerMicroTxns_PartnerMicroTxn >&
CMsgDPPartnerMicroTxns::transactions() const {
  // @@protoc_insertion_point(field_list:CMsgDPPartnerMicroTxns.transactions)
  return _impl_.transactions_;
}

// -------------------------------------------------------------------

// CMsgDPPartnerMicroTxnsResponse

// optional uint32 eresult = 1 [default = 2];
inline bool CMsgDPPartnerMicroTxnsResponse::_internal_has_eresult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxnsResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgDPPartnerMicroTxnsResponse::clear_eresult() {
  _impl_.eresult_ = 2u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDPPartnerMicroTxnsResponse::_internal_eresult() const {
  return _impl_.eresult_;
}
inline uint32_t CMsgDPPartnerMicroTxnsResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxnsResponse.eresult)
  return _internal_eresult();
}
inline void CMsgDPPartnerMicroTxnsResponse::_internal_set_eresult(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.eresult_ = value;
}
inline void CMsgDPPartnerMicroTxnsResponse::set_eresult(uint32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxnsResponse.eresult)
}

// optional .CMsgDPPartnerMicroTxnsResponse.EErrorCode eerrorcode = 2 [default = k_MsgValid];
inline bool CMsgDPPartnerMicroTxnsResponse::_internal_has_eerrorcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDPPartnerMicroTxnsResponse::has_eerrorcode() const {
  return _internal_has_eerrorcode();
}
inline void CMsgDPPartnerMicroTxnsResponse::clear_eerrorcode() {
  _impl_.eerrorcode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::_internal_eerrorcode() const {
  return static_cast< ::CMsgDPPartnerMicroTxnsResponse_EErrorCode >(_impl_.eerrorcode_);
}
inline ::CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::eerrorcode() const {
  // @@protoc_insertion_point(field_get:CMsgDPPartnerMicroTxnsResponse.eerrorcode)
  return _internal_eerrorcode();
}
inline void CMsgDPPartnerMicroTxnsResponse::_internal_set_eerrorcode(::CMsgDPPartnerMicroTxnsResponse_EErrorCode value) {
  assert(::CMsgDPPartnerMicroTxnsResponse_EErrorCode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.eerrorcode_ = value;
}
inline void CMsgDPPartnerMicroTxnsResponse::set_eerrorcode(::CMsgDPPartnerMicroTxnsResponse_EErrorCode value) {
  _internal_set_eerrorcode(value);
  // @@protoc_insertion_point(field_set:CMsgDPPartnerMicroTxnsResponse.eerrorcode)
}

// -------------------------------------------------------------------

// CMsgGCHVacVerificationChange

// optional fixed64 steamid = 1;
inline bool CMsgGCHVacVerificationChange::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCHVacVerificationChange::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgGCHVacVerificationChange::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGCHVacVerificationChange::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CMsgGCHVacVerificationChange::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgGCHVacVerificationChange.steamid)
  return _internal_steamid();
}
inline void CMsgGCHVacVerificationChange::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steamid_ = value;
}
inline void CMsgGCHVacVerificationChange::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgGCHVacVerificationChange.steamid)
}

// optional uint32 appid = 2;
inline bool CMsgGCHVacVerificationChange::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCHVacVerificationChange::has_appid() const {
  return _internal_has_appid();
}
inline void CMsgGCHVacVerificationChange::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCHVacVerificationChange::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CMsgGCHVacVerificationChange::appid() const {
  // @@protoc_insertion_point(field_get:CMsgGCHVacVerificationChange.appid)
  return _internal_appid();
}
inline void CMsgGCHVacVerificationChange::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.appid_ = value;
}
inline void CMsgGCHVacVerificationChange::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CMsgGCHVacVerificationChange.appid)
}

// optional bool is_verified = 3;
inline bool CMsgGCHVacVerificationChange::_internal_has_is_verified() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCHVacVerificationChange::has_is_verified() const {
  return _internal_has_is_verified();
}
inline void CMsgGCHVacVerificationChange::clear_is_verified() {
  _impl_.is_verified_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgGCHVacVerificationChange::_internal_is_verified() const {
  return _impl_.is_verified_;
}
inline bool CMsgGCHVacVerificationChange::is_verified() const {
  // @@protoc_insertion_point(field_get:CMsgGCHVacVerificationChange.is_verified)
  return _internal_is_verified();
}
inline void CMsgGCHVacVerificationChange::_internal_set_is_verified(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.is_verified_ = value;
}
inline void CMsgGCHVacVerificationChange::set_is_verified(bool value) {
  _internal_set_is_verified(value);
  // @@protoc_insertion_point(field_set:CMsgGCHVacVerificationChange.is_verified)
}

// -------------------------------------------------------------------

// CMsgGCHAccountTwoFactorChange

// optional fixed64 steamid = 1;
inline bool CMsgGCHAccountTwoFactorChange::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCHAccountTwoFactorChange::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgGCHAccountTwoFactorChange::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGCHAccountTwoFactorChange::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CMsgGCHAccountTwoFactorChange::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAccountTwoFactorChange.steamid)
  return _internal_steamid();
}
inline void CMsgGCHAccountTwoFactorChange::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steamid_ = value;
}
inline void CMsgGCHAccountTwoFactorChange::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgGCHAccountTwoFactorChange.steamid)
}

// optional uint32 appid = 2;
inline bool CMsgGCHAccountTwoFactorChange::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCHAccountTwoFactorChange::has_appid() const {
  return _internal_has_appid();
}
inline void CMsgGCHAccountTwoFactorChange::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCHAccountTwoFactorChange::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CMsgGCHAccountTwoFactorChange::appid() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAccountTwoFactorChange.appid)
  return _internal_appid();
}
inline void CMsgGCHAccountTwoFactorChange::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.appid_ = value;
}
inline void CMsgGCHAccountTwoFactorChange::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CMsgGCHAccountTwoFactorChange.appid)
}

// optional bool twofactor_enabled = 3;
inline bool CMsgGCHAccountTwoFactorChange::_internal_has_twofactor_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCHAccountTwoFactorChange::has_twofactor_enabled() const {
  return _internal_has_twofactor_enabled();
}
inline void CMsgGCHAccountTwoFactorChange::clear_twofactor_enabled() {
  _impl_.twofactor_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgGCHAccountTwoFactorChange::_internal_twofactor_enabled() const {
  return _impl_.twofactor_enabled_;
}
inline bool CMsgGCHAccountTwoFactorChange::twofactor_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAccountTwoFactorChange.twofactor_enabled)
  return _internal_twofactor_enabled();
}
inline void CMsgGCHAccountTwoFactorChange::_internal_set_twofactor_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.twofactor_enabled_ = value;
}
inline void CMsgGCHAccountTwoFactorChange::set_twofactor_enabled(bool value) {
  _internal_set_twofactor_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgGCHAccountTwoFactorChange.twofactor_enabled)
}

// -------------------------------------------------------------------

// CMsgGCCheckClanMembership

// optional fixed64 steamid = 1;
inline bool CMsgGCCheckClanMembership::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCheckClanMembership::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgGCCheckClanMembership::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGCCheckClanMembership::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CMsgGCCheckClanMembership::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCheckClanMembership.steamid)
  return _internal_steamid();
}
inline void CMsgGCCheckClanMembership::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steamid_ = value;
}
inline void CMsgGCCheckClanMembership::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCheckClanMembership.steamid)
}

// optional uint32 clanid = 2;
inline bool CMsgGCCheckClanMembership::_internal_has_clanid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCheckClanMembership::has_clanid() const {
  return _internal_has_clanid();
}
inline void CMsgGCCheckClanMembership::clear_clanid() {
  _impl_.clanid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCCheckClanMembership::_internal_clanid() const {
  return _impl_.clanid_;
}
inline uint32_t CMsgGCCheckClanMembership::clanid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCheckClanMembership.clanid)
  return _internal_clanid();
}
inline void CMsgGCCheckClanMembership::_internal_set_clanid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.clanid_ = value;
}
inline void CMsgGCCheckClanMembership::set_clanid(uint32_t value) {
  _internal_set_clanid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCheckClanMembership.clanid)
}

// -------------------------------------------------------------------

// CMsgGCCheckClanMembership_Response

// optional bool ismember = 1;
inline bool CMsgGCCheckClanMembership_Response::_internal_has_ismember() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCheckClanMembership_Response::has_ismember() const {
  return _internal_has_ismember();
}
inline void CMsgGCCheckClanMembership_Response::clear_ismember() {
  _impl_.ismember_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgGCCheckClanMembership_Response::_internal_ismember() const {
  return _impl_.ismember_;
}
inline bool CMsgGCCheckClanMembership_Response::ismember() const {
  // @@protoc_insertion_point(field_get:CMsgGCCheckClanMembership_Response.ismember)
  return _internal_ismember();
}
inline void CMsgGCCheckClanMembership_Response::_internal_set_ismember(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ismember_ = value;
}
inline void CMsgGCCheckClanMembership_Response::set_ismember(bool value) {
  _internal_set_ismember(value);
  // @@protoc_insertion_point(field_set:CMsgGCCheckClanMembership_Response.ismember)
}

// -------------------------------------------------------------------

// CMsgGCHAppCheersReceived_CheerTypeAmount

// optional uint32 cheer_type = 1;
inline bool CMsgGCHAppCheersReceived_CheerTypeAmount::_internal_has_cheer_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCHAppCheersReceived_CheerTypeAmount::has_cheer_type() const {
  return _internal_has_cheer_type();
}
inline void CMsgGCHAppCheersReceived_CheerTypeAmount::clear_cheer_type() {
  _impl_.cheer_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGCHAppCheersReceived_CheerTypeAmount::_internal_cheer_type() const {
  return _impl_.cheer_type_;
}
inline uint32_t CMsgGCHAppCheersReceived_CheerTypeAmount::cheer_type() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAppCheersReceived.CheerTypeAmount.cheer_type)
  return _internal_cheer_type();
}
inline void CMsgGCHAppCheersReceived_CheerTypeAmount::_internal_set_cheer_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cheer_type_ = value;
}
inline void CMsgGCHAppCheersReceived_CheerTypeAmount::set_cheer_type(uint32_t value) {
  _internal_set_cheer_type(value);
  // @@protoc_insertion_point(field_set:CMsgGCHAppCheersReceived.CheerTypeAmount.cheer_type)
}

// optional uint32 cheer_amount = 2;
inline bool CMsgGCHAppCheersReceived_CheerTypeAmount::_internal_has_cheer_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCHAppCheersReceived_CheerTypeAmount::has_cheer_amount() const {
  return _internal_has_cheer_amount();
}
inline void CMsgGCHAppCheersReceived_CheerTypeAmount::clear_cheer_amount() {
  _impl_.cheer_amount_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCHAppCheersReceived_CheerTypeAmount::_internal_cheer_amount() const {
  return _impl_.cheer_amount_;
}
inline uint32_t CMsgGCHAppCheersReceived_CheerTypeAmount::cheer_amount() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAppCheersReceived.CheerTypeAmount.cheer_amount)
  return _internal_cheer_amount();
}
inline void CMsgGCHAppCheersReceived_CheerTypeAmount::_internal_set_cheer_amount(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cheer_amount_ = value;
}
inline void CMsgGCHAppCheersReceived_CheerTypeAmount::set_cheer_amount(uint32_t value) {
  _internal_set_cheer_amount(value);
  // @@protoc_insertion_point(field_set:CMsgGCHAppCheersReceived.CheerTypeAmount.cheer_amount)
}

// -------------------------------------------------------------------

// CMsgGCHAppCheersReceived_CheerTarget

// optional uint64 cheer_target = 1;
inline bool CMsgGCHAppCheersReceived_CheerTarget::_internal_has_cheer_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCHAppCheersReceived_CheerTarget::has_cheer_target() const {
  return _internal_has_cheer_target();
}
inline void CMsgGCHAppCheersReceived_CheerTarget::clear_cheer_target() {
  _impl_.cheer_target_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGCHAppCheersReceived_CheerTarget::_internal_cheer_target() const {
  return _impl_.cheer_target_;
}
inline uint64_t CMsgGCHAppCheersReceived_CheerTarget::cheer_target() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAppCheersReceived.CheerTarget.cheer_target)
  return _internal_cheer_target();
}
inline void CMsgGCHAppCheersReceived_CheerTarget::_internal_set_cheer_target(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cheer_target_ = value;
}
inline void CMsgGCHAppCheersReceived_CheerTarget::set_cheer_target(uint64_t value) {
  _internal_set_cheer_target(value);
  // @@protoc_insertion_point(field_set:CMsgGCHAppCheersReceived.CheerTarget.cheer_target)
}

// repeated .CMsgGCHAppCheersReceived.CheerTypeAmount cheer_types = 2;
inline int CMsgGCHAppCheersReceived_CheerTarget::_internal_cheer_types_size() const {
  return _impl_.cheer_types_.size();
}
inline int CMsgGCHAppCheersReceived_CheerTarget::cheer_types_size() const {
  return _internal_cheer_types_size();
}
inline void CMsgGCHAppCheersReceived_CheerTarget::clear_cheer_types() {
  _impl_.cheer_types_.Clear();
}
inline ::CMsgGCHAppCheersReceived_CheerTypeAmount* CMsgGCHAppCheersReceived_CheerTarget::mutable_cheer_types(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCHAppCheersReceived.CheerTarget.cheer_types)
  return _impl_.cheer_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCHAppCheersReceived_CheerTypeAmount >*
CMsgGCHAppCheersReceived_CheerTarget::mutable_cheer_types() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCHAppCheersReceived.CheerTarget.cheer_types)
  return &_impl_.cheer_types_;
}
inline const ::CMsgGCHAppCheersReceived_CheerTypeAmount& CMsgGCHAppCheersReceived_CheerTarget::_internal_cheer_types(int index) const {
  return _impl_.cheer_types_.Get(index);
}
inline const ::CMsgGCHAppCheersReceived_CheerTypeAmount& CMsgGCHAppCheersReceived_CheerTarget::cheer_types(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCHAppCheersReceived.CheerTarget.cheer_types)
  return _internal_cheer_types(index);
}
inline ::CMsgGCHAppCheersReceived_CheerTypeAmount* CMsgGCHAppCheersReceived_CheerTarget::_internal_add_cheer_types() {
  return _impl_.cheer_types_.Add();
}
inline ::CMsgGCHAppCheersReceived_CheerTypeAmount* CMsgGCHAppCheersReceived_CheerTarget::add_cheer_types() {
  ::CMsgGCHAppCheersReceived_CheerTypeAmount* _add = _internal_add_cheer_types();
  // @@protoc_insertion_point(field_add:CMsgGCHAppCheersReceived.CheerTarget.cheer_types)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCHAppCheersReceived_CheerTypeAmount >&
CMsgGCHAppCheersReceived_CheerTarget::cheer_types() const {
  // @@protoc_insertion_point(field_list:CMsgGCHAppCheersReceived.CheerTarget.cheer_types)
  return _impl_.cheer_types_;
}

// -------------------------------------------------------------------

// CMsgGCHAppCheersReceived

// optional uint32 appid = 1;
inline bool CMsgGCHAppCheersReceived::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCHAppCheersReceived::has_appid() const {
  return _internal_has_appid();
}
inline void CMsgGCHAppCheersReceived::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGCHAppCheersReceived::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CMsgGCHAppCheersReceived::appid() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAppCheersReceived.appid)
  return _internal_appid();
}
inline void CMsgGCHAppCheersReceived::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.appid_ = value;
}
inline void CMsgGCHAppCheersReceived::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CMsgGCHAppCheersReceived.appid)
}

// repeated .CMsgGCHAppCheersReceived.CheerTarget cheer_targets = 2;
inline int CMsgGCHAppCheersReceived::_internal_cheer_targets_size() const {
  return _impl_.cheer_targets_.size();
}
inline int CMsgGCHAppCheersReceived::cheer_targets_size() const {
  return _internal_cheer_targets_size();
}
inline void CMsgGCHAppCheersReceived::clear_cheer_targets() {
  _impl_.cheer_targets_.Clear();
}
inline ::CMsgGCHAppCheersReceived_CheerTarget* CMsgGCHAppCheersReceived::mutable_cheer_targets(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCHAppCheersReceived.cheer_targets)
  return _impl_.cheer_targets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCHAppCheersReceived_CheerTarget >*
CMsgGCHAppCheersReceived::mutable_cheer_targets() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCHAppCheersReceived.cheer_targets)
  return &_impl_.cheer_targets_;
}
inline const ::CMsgGCHAppCheersReceived_CheerTarget& CMsgGCHAppCheersReceived::_internal_cheer_targets(int index) const {
  return _impl_.cheer_targets_.Get(index);
}
inline const ::CMsgGCHAppCheersReceived_CheerTarget& CMsgGCHAppCheersReceived::cheer_targets(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCHAppCheersReceived.cheer_targets)
  return _internal_cheer_targets(index);
}
inline ::CMsgGCHAppCheersReceived_CheerTarget* CMsgGCHAppCheersReceived::_internal_add_cheer_targets() {
  return _impl_.cheer_targets_.Add();
}
inline ::CMsgGCHAppCheersReceived_CheerTarget* CMsgGCHAppCheersReceived::add_cheer_targets() {
  ::CMsgGCHAppCheersReceived_CheerTarget* _add = _internal_add_cheer_targets();
  // @@protoc_insertion_point(field_add:CMsgGCHAppCheersReceived.cheer_targets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCHAppCheersReceived_CheerTarget >&
CMsgGCHAppCheersReceived::cheer_targets() const {
  // @@protoc_insertion_point(field_list:CMsgGCHAppCheersReceived.cheer_targets)
  return _impl_.cheer_targets_;
}

// -------------------------------------------------------------------

// CMsgGCHAppCheersGetAllowedTypes

// optional uint32 appid = 1;
inline bool CMsgGCHAppCheersGetAllowedTypes::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCHAppCheersGetAllowedTypes::has_appid() const {
  return _internal_has_appid();
}
inline void CMsgGCHAppCheersGetAllowedTypes::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCHAppCheersGetAllowedTypes::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CMsgGCHAppCheersGetAllowedTypes::appid() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAppCheersGetAllowedTypes.appid)
  return _internal_appid();
}
inline void CMsgGCHAppCheersGetAllowedTypes::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.appid_ = value;
}
inline void CMsgGCHAppCheersGetAllowedTypes::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CMsgGCHAppCheersGetAllowedTypes.appid)
}

// optional uint64 cheer_target = 2;
inline bool CMsgGCHAppCheersGetAllowedTypes::_internal_has_cheer_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCHAppCheersGetAllowedTypes::has_cheer_target() const {
  return _internal_has_cheer_target();
}
inline void CMsgGCHAppCheersGetAllowedTypes::clear_cheer_target() {
  _impl_.cheer_target_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGCHAppCheersGetAllowedTypes::_internal_cheer_target() const {
  return _impl_.cheer_target_;
}
inline uint64_t CMsgGCHAppCheersGetAllowedTypes::cheer_target() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAppCheersGetAllowedTypes.cheer_target)
  return _internal_cheer_target();
}
inline void CMsgGCHAppCheersGetAllowedTypes::_internal_set_cheer_target(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cheer_target_ = value;
}
inline void CMsgGCHAppCheersGetAllowedTypes::set_cheer_target(uint64_t value) {
  _internal_set_cheer_target(value);
  // @@protoc_insertion_point(field_set:CMsgGCHAppCheersGetAllowedTypes.cheer_target)
}

// -------------------------------------------------------------------

// CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps

// optional uint32 original_cheer_type = 1;
inline bool CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::_internal_has_original_cheer_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::has_original_cheer_type() const {
  return _internal_has_original_cheer_type();
}
inline void CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::clear_original_cheer_type() {
  _impl_.original_cheer_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::_internal_original_cheer_type() const {
  return _impl_.original_cheer_type_;
}
inline uint32_t CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::original_cheer_type() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps.original_cheer_type)
  return _internal_original_cheer_type();
}
inline void CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::_internal_set_original_cheer_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.original_cheer_type_ = value;
}
inline void CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::set_original_cheer_type(uint32_t value) {
  _internal_set_original_cheer_type(value);
  // @@protoc_insertion_point(field_set:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps.original_cheer_type)
}

// optional uint32 remapped_cheer_type = 2;
inline bool CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::_internal_has_remapped_cheer_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::has_remapped_cheer_type() const {
  return _internal_has_remapped_cheer_type();
}
inline void CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::clear_remapped_cheer_type() {
  _impl_.remapped_cheer_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::_internal_remapped_cheer_type() const {
  return _impl_.remapped_cheer_type_;
}
inline uint32_t CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::remapped_cheer_type() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps.remapped_cheer_type)
  return _internal_remapped_cheer_type();
}
inline void CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::_internal_set_remapped_cheer_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.remapped_cheer_type_ = value;
}
inline void CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::set_remapped_cheer_type(uint32_t value) {
  _internal_set_remapped_cheer_type(value);
  // @@protoc_insertion_point(field_set:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps.remapped_cheer_type)
}

// repeated uint32 account_ids = 3;
inline int CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::_internal_account_ids_size() const {
  return _impl_.account_ids_.size();
}
inline int CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::clear_account_ids() {
  _impl_.account_ids_.Clear();
}
inline uint32_t CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::_internal_account_ids(int index) const {
  return _impl_.account_ids_.Get(index);
}
inline uint32_t CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps.account_ids)
  return _internal_account_ids(index);
}
inline void CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::set_account_ids(int index, uint32_t value) {
  _impl_.account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps.account_ids)
}
inline void CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::_internal_add_account_ids(uint32_t value) {
  _impl_.account_ids_.Add(value);
}
inline void CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::add_account_ids(uint32_t value) {
  _internal_add_account_ids(value);
  // @@protoc_insertion_point(field_add:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::_internal_account_ids() const {
  return _impl_.account_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps.account_ids)
  return _internal_account_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::_internal_mutable_account_ids() {
  return &_impl_.account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps.account_ids)
  return _internal_mutable_account_ids();
}

// -------------------------------------------------------------------

// CMsgGCHAppCheersGetAllowedTypesResponse

// repeated uint32 cheer_types_valid_all_users = 1;
inline int CMsgGCHAppCheersGetAllowedTypesResponse::_internal_cheer_types_valid_all_users_size() const {
  return _impl_.cheer_types_valid_all_users_.size();
}
inline int CMsgGCHAppCheersGetAllowedTypesResponse::cheer_types_valid_all_users_size() const {
  return _internal_cheer_types_valid_all_users_size();
}
inline void CMsgGCHAppCheersGetAllowedTypesResponse::clear_cheer_types_valid_all_users() {
  _impl_.cheer_types_valid_all_users_.Clear();
}
inline uint32_t CMsgGCHAppCheersGetAllowedTypesResponse::_internal_cheer_types_valid_all_users(int index) const {
  return _impl_.cheer_types_valid_all_users_.Get(index);
}
inline uint32_t CMsgGCHAppCheersGetAllowedTypesResponse::cheer_types_valid_all_users(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCHAppCheersGetAllowedTypesResponse.cheer_types_valid_all_users)
  return _internal_cheer_types_valid_all_users(index);
}
inline void CMsgGCHAppCheersGetAllowedTypesResponse::set_cheer_types_valid_all_users(int index, uint32_t value) {
  _impl_.cheer_types_valid_all_users_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCHAppCheersGetAllowedTypesResponse.cheer_types_valid_all_users)
}
inline void CMsgGCHAppCheersGetAllowedTypesResponse::_internal_add_cheer_types_valid_all_users(uint32_t value) {
  _impl_.cheer_types_valid_all_users_.Add(value);
}
inline void CMsgGCHAppCheersGetAllowedTypesResponse::add_cheer_types_valid_all_users(uint32_t value) {
  _internal_add_cheer_types_valid_all_users(value);
  // @@protoc_insertion_point(field_add:CMsgGCHAppCheersGetAllowedTypesResponse.cheer_types_valid_all_users)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGCHAppCheersGetAllowedTypesResponse::_internal_cheer_types_valid_all_users() const {
  return _impl_.cheer_types_valid_all_users_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGCHAppCheersGetAllowedTypesResponse::cheer_types_valid_all_users() const {
  // @@protoc_insertion_point(field_list:CMsgGCHAppCheersGetAllowedTypesResponse.cheer_types_valid_all_users)
  return _internal_cheer_types_valid_all_users();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGCHAppCheersGetAllowedTypesResponse::_internal_mutable_cheer_types_valid_all_users() {
  return &_impl_.cheer_types_valid_all_users_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGCHAppCheersGetAllowedTypesResponse::mutable_cheer_types_valid_all_users() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCHAppCheersGetAllowedTypesResponse.cheer_types_valid_all_users)
  return _internal_mutable_cheer_types_valid_all_users();
}

// repeated .CMsgGCHAppCheersGetAllowedTypesResponse.CheerRemaps cheer_remaps = 2;
inline int CMsgGCHAppCheersGetAllowedTypesResponse::_internal_cheer_remaps_size() const {
  return _impl_.cheer_remaps_.size();
}
inline int CMsgGCHAppCheersGetAllowedTypesResponse::cheer_remaps_size() const {
  return _internal_cheer_remaps_size();
}
inline void CMsgGCHAppCheersGetAllowedTypesResponse::clear_cheer_remaps() {
  _impl_.cheer_remaps_.Clear();
}
inline ::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps* CMsgGCHAppCheersGetAllowedTypesResponse::mutable_cheer_remaps(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCHAppCheersGetAllowedTypesResponse.cheer_remaps)
  return _impl_.cheer_remaps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps >*
CMsgGCHAppCheersGetAllowedTypesResponse::mutable_cheer_remaps() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCHAppCheersGetAllowedTypesResponse.cheer_remaps)
  return &_impl_.cheer_remaps_;
}
inline const ::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps& CMsgGCHAppCheersGetAllowedTypesResponse::_internal_cheer_remaps(int index) const {
  return _impl_.cheer_remaps_.Get(index);
}
inline const ::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps& CMsgGCHAppCheersGetAllowedTypesResponse::cheer_remaps(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCHAppCheersGetAllowedTypesResponse.cheer_remaps)
  return _internal_cheer_remaps(index);
}
inline ::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps* CMsgGCHAppCheersGetAllowedTypesResponse::_internal_add_cheer_remaps() {
  return _impl_.cheer_remaps_.Add();
}
inline ::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps* CMsgGCHAppCheersGetAllowedTypesResponse::add_cheer_remaps() {
  ::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps* _add = _internal_add_cheer_remaps();
  // @@protoc_insertion_point(field_add:CMsgGCHAppCheersGetAllowedTypesResponse.cheer_remaps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCHAppCheersGetAllowedTypesResponse_CheerRemaps >&
CMsgGCHAppCheersGetAllowedTypesResponse::cheer_remaps() const {
  // @@protoc_insertion_point(field_list:CMsgGCHAppCheersGetAllowedTypesResponse.cheer_remaps)
  return _impl_.cheer_remaps_;
}

// optional uint32 cache_duration = 3;
inline bool CMsgGCHAppCheersGetAllowedTypesResponse::_internal_has_cache_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCHAppCheersGetAllowedTypesResponse::has_cache_duration() const {
  return _internal_has_cache_duration();
}
inline void CMsgGCHAppCheersGetAllowedTypesResponse::clear_cache_duration() {
  _impl_.cache_duration_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGCHAppCheersGetAllowedTypesResponse::_internal_cache_duration() const {
  return _impl_.cache_duration_;
}
inline uint32_t CMsgGCHAppCheersGetAllowedTypesResponse::cache_duration() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAppCheersGetAllowedTypesResponse.cache_duration)
  return _internal_cache_duration();
}
inline void CMsgGCHAppCheersGetAllowedTypesResponse::_internal_set_cache_duration(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cache_duration_ = value;
}
inline void CMsgGCHAppCheersGetAllowedTypesResponse::set_cache_duration(uint32_t value) {
  _internal_set_cache_duration(value);
  // @@protoc_insertion_point(field_set:CMsgGCHAppCheersGetAllowedTypesResponse.cache_duration)
}

// -------------------------------------------------------------------

// CGCSystemMsg_ReportExternalPurchase_Request

// optional uint32 appid = 1;
inline bool CGCSystemMsg_ReportExternalPurchase_Request::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CGCSystemMsg_ReportExternalPurchase_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CGCSystemMsg_ReportExternalPurchase_Request::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CGCSystemMsg_ReportExternalPurchase_Request::appid() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_ReportExternalPurchase_Request.appid)
  return _internal_appid();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.appid_ = value;
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_ReportExternalPurchase_Request.appid)
}

// optional fixed64 steamid = 2;
inline bool CGCSystemMsg_ReportExternalPurchase_Request::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CGCSystemMsg_ReportExternalPurchase_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CGCSystemMsg_ReportExternalPurchase_Request::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CGCSystemMsg_ReportExternalPurchase_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_ReportExternalPurchase_Request.steamid)
  return _internal_steamid();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.steamid_ = value;
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_ReportExternalPurchase_Request.steamid)
}

// optional .EMobilePaymentProvider provider = 3 [default = k_EMobilePaymentProvider_Invalid];
inline bool CGCSystemMsg_ReportExternalPurchase_Request::_internal_has_provider() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CGCSystemMsg_ReportExternalPurchase_Request::has_provider() const {
  return _internal_has_provider();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::clear_provider() {
  _impl_.provider_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::EMobilePaymentProvider CGCSystemMsg_ReportExternalPurchase_Request::_internal_provider() const {
  return static_cast< ::EMobilePaymentProvider >(_impl_.provider_);
}
inline ::EMobilePaymentProvider CGCSystemMsg_ReportExternalPurchase_Request::provider() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_ReportExternalPurchase_Request.provider)
  return _internal_provider();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::_internal_set_provider(::EMobilePaymentProvider value) {
  assert(::EMobilePaymentProvider_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.provider_ = value;
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::set_provider(::EMobilePaymentProvider value) {
  _internal_set_provider(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_ReportExternalPurchase_Request.provider)
}

// optional uint64 orderid = 4;
inline bool CGCSystemMsg_ReportExternalPurchase_Request::_internal_has_orderid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CGCSystemMsg_ReportExternalPurchase_Request::has_orderid() const {
  return _internal_has_orderid();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::clear_orderid() {
  _impl_.orderid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t CGCSystemMsg_ReportExternalPurchase_Request::_internal_orderid() const {
  return _impl_.orderid_;
}
inline uint64_t CGCSystemMsg_ReportExternalPurchase_Request::orderid() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_ReportExternalPurchase_Request.orderid)
  return _internal_orderid();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::_internal_set_orderid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.orderid_ = value;
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::set_orderid(uint64_t value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_ReportExternalPurchase_Request.orderid)
}

// optional string provider_orderid = 5;
inline bool CGCSystemMsg_ReportExternalPurchase_Request::_internal_has_provider_orderid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCSystemMsg_ReportExternalPurchase_Request::has_provider_orderid() const {
  return _internal_has_provider_orderid();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::clear_provider_orderid() {
  _impl_.provider_orderid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGCSystemMsg_ReportExternalPurchase_Request::provider_orderid() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_ReportExternalPurchase_Request.provider_orderid)
  return _internal_provider_orderid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCSystemMsg_ReportExternalPurchase_Request::set_provider_orderid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.provider_orderid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCSystemMsg_ReportExternalPurchase_Request.provider_orderid)
}
inline std::string* CGCSystemMsg_ReportExternalPurchase_Request::mutable_provider_orderid() {
  std::string* _s = _internal_mutable_provider_orderid();
  // @@protoc_insertion_point(field_mutable:CGCSystemMsg_ReportExternalPurchase_Request.provider_orderid)
  return _s;
}
inline const std::string& CGCSystemMsg_ReportExternalPurchase_Request::_internal_provider_orderid() const {
  return _impl_.provider_orderid_.Get();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::_internal_set_provider_orderid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.provider_orderid_.Set(value, GetArenaForAllocation());
}
inline std::string* CGCSystemMsg_ReportExternalPurchase_Request::_internal_mutable_provider_orderid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.provider_orderid_.Mutable(GetArenaForAllocation());
}
inline std::string* CGCSystemMsg_ReportExternalPurchase_Request::release_provider_orderid() {
  // @@protoc_insertion_point(field_release:CGCSystemMsg_ReportExternalPurchase_Request.provider_orderid)
  if (!_internal_has_provider_orderid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.provider_orderid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.provider_orderid_.IsDefault()) {
    _impl_.provider_orderid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::set_allocated_provider_orderid(std::string* provider_orderid) {
  if (provider_orderid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.provider_orderid_.SetAllocated(provider_orderid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.provider_orderid_.IsDefault()) {
    _impl_.provider_orderid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGCSystemMsg_ReportExternalPurchase_Request.provider_orderid)
}

// optional int64 amount = 6;
inline bool CGCSystemMsg_ReportExternalPurchase_Request::_internal_has_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CGCSystemMsg_ReportExternalPurchase_Request::has_amount() const {
  return _internal_has_amount();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::clear_amount() {
  _impl_.amount_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int64_t CGCSystemMsg_ReportExternalPurchase_Request::_internal_amount() const {
  return _impl_.amount_;
}
inline int64_t CGCSystemMsg_ReportExternalPurchase_Request::amount() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_ReportExternalPurchase_Request.amount)
  return _internal_amount();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::_internal_set_amount(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.amount_ = value;
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_ReportExternalPurchase_Request.amount)
}

// optional string currency = 7;
inline bool CGCSystemMsg_ReportExternalPurchase_Request::_internal_has_currency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGCSystemMsg_ReportExternalPurchase_Request::has_currency() const {
  return _internal_has_currency();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::clear_currency() {
  _impl_.currency_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGCSystemMsg_ReportExternalPurchase_Request::currency() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_ReportExternalPurchase_Request.currency)
  return _internal_currency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCSystemMsg_ReportExternalPurchase_Request::set_currency(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.currency_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCSystemMsg_ReportExternalPurchase_Request.currency)
}
inline std::string* CGCSystemMsg_ReportExternalPurchase_Request::mutable_currency() {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:CGCSystemMsg_ReportExternalPurchase_Request.currency)
  return _s;
}
inline const std::string& CGCSystemMsg_ReportExternalPurchase_Request::_internal_currency() const {
  return _impl_.currency_.Get();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::_internal_set_currency(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.currency_.Set(value, GetArenaForAllocation());
}
inline std::string* CGCSystemMsg_ReportExternalPurchase_Request::_internal_mutable_currency() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.currency_.Mutable(GetArenaForAllocation());
}
inline std::string* CGCSystemMsg_ReportExternalPurchase_Request::release_currency() {
  // @@protoc_insertion_point(field_release:CGCSystemMsg_ReportExternalPurchase_Request.currency)
  if (!_internal_has_currency()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.currency_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currency_.IsDefault()) {
    _impl_.currency_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.currency_.SetAllocated(currency, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currency_.IsDefault()) {
    _impl_.currency_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGCSystemMsg_ReportExternalPurchase_Request.currency)
}

// optional uint32 quantity = 8;
inline bool CGCSystemMsg_ReportExternalPurchase_Request::_internal_has_quantity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CGCSystemMsg_ReportExternalPurchase_Request::has_quantity() const {
  return _internal_has_quantity();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::clear_quantity() {
  _impl_.quantity_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CGCSystemMsg_ReportExternalPurchase_Request::_internal_quantity() const {
  return _impl_.quantity_;
}
inline uint32_t CGCSystemMsg_ReportExternalPurchase_Request::quantity() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_ReportExternalPurchase_Request.quantity)
  return _internal_quantity();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::_internal_set_quantity(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.quantity_ = value;
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::set_quantity(uint32_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_ReportExternalPurchase_Request.quantity)
}

// optional uint32 itemid = 9;
inline bool CGCSystemMsg_ReportExternalPurchase_Request::_internal_has_itemid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CGCSystemMsg_ReportExternalPurchase_Request::has_itemid() const {
  return _internal_has_itemid();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::clear_itemid() {
  _impl_.itemid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CGCSystemMsg_ReportExternalPurchase_Request::_internal_itemid() const {
  return _impl_.itemid_;
}
inline uint32_t CGCSystemMsg_ReportExternalPurchase_Request::itemid() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_ReportExternalPurchase_Request.itemid)
  return _internal_itemid();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::_internal_set_itemid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.itemid_ = value;
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::set_itemid(uint32_t value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_ReportExternalPurchase_Request.itemid)
}

// optional string item_description = 10;
inline bool CGCSystemMsg_ReportExternalPurchase_Request::_internal_has_item_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGCSystemMsg_ReportExternalPurchase_Request::has_item_description() const {
  return _internal_has_item_description();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::clear_item_description() {
  _impl_.item_description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CGCSystemMsg_ReportExternalPurchase_Request::item_description() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_ReportExternalPurchase_Request.item_description)
  return _internal_item_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCSystemMsg_ReportExternalPurchase_Request::set_item_description(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.item_description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCSystemMsg_ReportExternalPurchase_Request.item_description)
}
inline std::string* CGCSystemMsg_ReportExternalPurchase_Request::mutable_item_description() {
  std::string* _s = _internal_mutable_item_description();
  // @@protoc_insertion_point(field_mutable:CGCSystemMsg_ReportExternalPurchase_Request.item_description)
  return _s;
}
inline const std::string& CGCSystemMsg_ReportExternalPurchase_Request::_internal_item_description() const {
  return _impl_.item_description_.Get();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::_internal_set_item_description(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.item_description_.Set(value, GetArenaForAllocation());
}
inline std::string* CGCSystemMsg_ReportExternalPurchase_Request::_internal_mutable_item_description() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.item_description_.Mutable(GetArenaForAllocation());
}
inline std::string* CGCSystemMsg_ReportExternalPurchase_Request::release_item_description() {
  // @@protoc_insertion_point(field_release:CGCSystemMsg_ReportExternalPurchase_Request.item_description)
  if (!_internal_has_item_description()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.item_description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.item_description_.IsDefault()) {
    _impl_.item_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::set_allocated_item_description(std::string* item_description) {
  if (item_description != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.item_description_.SetAllocated(item_description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.item_description_.IsDefault()) {
    _impl_.item_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGCSystemMsg_ReportExternalPurchase_Request.item_description)
}

// optional string language = 11;
inline bool CGCSystemMsg_ReportExternalPurchase_Request::_internal_has_language() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGCSystemMsg_ReportExternalPurchase_Request::has_language() const {
  return _internal_has_language();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::clear_language() {
  _impl_.language_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CGCSystemMsg_ReportExternalPurchase_Request::language() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_ReportExternalPurchase_Request.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCSystemMsg_ReportExternalPurchase_Request::set_language(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.language_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCSystemMsg_ReportExternalPurchase_Request.language)
}
inline std::string* CGCSystemMsg_ReportExternalPurchase_Request::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:CGCSystemMsg_ReportExternalPurchase_Request.language)
  return _s;
}
inline const std::string& CGCSystemMsg_ReportExternalPurchase_Request::_internal_language() const {
  return _impl_.language_.Get();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::_internal_set_language(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.language_.Set(value, GetArenaForAllocation());
}
inline std::string* CGCSystemMsg_ReportExternalPurchase_Request::_internal_mutable_language() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.language_.Mutable(GetArenaForAllocation());
}
inline std::string* CGCSystemMsg_ReportExternalPurchase_Request::release_language() {
  // @@protoc_insertion_point(field_release:CGCSystemMsg_ReportExternalPurchase_Request.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.language_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_.IsDefault()) {
    _impl_.language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.language_.SetAllocated(language, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_.IsDefault()) {
    _impl_.language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGCSystemMsg_ReportExternalPurchase_Request.language)
}

// optional string category = 12;
inline bool CGCSystemMsg_ReportExternalPurchase_Request::_internal_has_category() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGCSystemMsg_ReportExternalPurchase_Request::has_category() const {
  return _internal_has_category();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::clear_category() {
  _impl_.category_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CGCSystemMsg_ReportExternalPurchase_Request::category() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_ReportExternalPurchase_Request.category)
  return _internal_category();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGCSystemMsg_ReportExternalPurchase_Request::set_category(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.category_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGCSystemMsg_ReportExternalPurchase_Request.category)
}
inline std::string* CGCSystemMsg_ReportExternalPurchase_Request::mutable_category() {
  std::string* _s = _internal_mutable_category();
  // @@protoc_insertion_point(field_mutable:CGCSystemMsg_ReportExternalPurchase_Request.category)
  return _s;
}
inline const std::string& CGCSystemMsg_ReportExternalPurchase_Request::_internal_category() const {
  return _impl_.category_.Get();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::_internal_set_category(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.category_.Set(value, GetArenaForAllocation());
}
inline std::string* CGCSystemMsg_ReportExternalPurchase_Request::_internal_mutable_category() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.category_.Mutable(GetArenaForAllocation());
}
inline std::string* CGCSystemMsg_ReportExternalPurchase_Request::release_category() {
  // @@protoc_insertion_point(field_release:CGCSystemMsg_ReportExternalPurchase_Request.category)
  if (!_internal_has_category()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.category_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.category_.IsDefault()) {
    _impl_.category_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.category_.SetAllocated(category, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.category_.IsDefault()) {
    _impl_.category_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGCSystemMsg_ReportExternalPurchase_Request.category)
}

// optional uint32 time_created = 13;
inline bool CGCSystemMsg_ReportExternalPurchase_Request::_internal_has_time_created() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CGCSystemMsg_ReportExternalPurchase_Request::has_time_created() const {
  return _internal_has_time_created();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::clear_time_created() {
  _impl_.time_created_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CGCSystemMsg_ReportExternalPurchase_Request::_internal_time_created() const {
  return _impl_.time_created_;
}
inline uint32_t CGCSystemMsg_ReportExternalPurchase_Request::time_created() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_ReportExternalPurchase_Request.time_created)
  return _internal_time_created();
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::_internal_set_time_created(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.time_created_ = value;
}
inline void CGCSystemMsg_ReportExternalPurchase_Request::set_time_created(uint32_t value) {
  _internal_set_time_created(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_ReportExternalPurchase_Request.time_created)
}

// -------------------------------------------------------------------

// CGCSystemMsg_ReportExternalPurchase_Response

// optional fixed64 transid = 1;
inline bool CGCSystemMsg_ReportExternalPurchase_Response::_internal_has_transid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGCSystemMsg_ReportExternalPurchase_Response::has_transid() const {
  return _internal_has_transid();
}
inline void CGCSystemMsg_ReportExternalPurchase_Response::clear_transid() {
  _impl_.transid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CGCSystemMsg_ReportExternalPurchase_Response::_internal_transid() const {
  return _impl_.transid_;
}
inline uint64_t CGCSystemMsg_ReportExternalPurchase_Response::transid() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_ReportExternalPurchase_Response.transid)
  return _internal_transid();
}
inline void CGCSystemMsg_ReportExternalPurchase_Response::_internal_set_transid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.transid_ = value;
}
inline void CGCSystemMsg_ReportExternalPurchase_Response::set_transid(uint64_t value) {
  _internal_set_transid(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_ReportExternalPurchase_Response.transid)
}

// optional uint64 orderid = 2;
inline bool CGCSystemMsg_ReportExternalPurchase_Response::_internal_has_orderid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGCSystemMsg_ReportExternalPurchase_Response::has_orderid() const {
  return _internal_has_orderid();
}
inline void CGCSystemMsg_ReportExternalPurchase_Response::clear_orderid() {
  _impl_.orderid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CGCSystemMsg_ReportExternalPurchase_Response::_internal_orderid() const {
  return _impl_.orderid_;
}
inline uint64_t CGCSystemMsg_ReportExternalPurchase_Response::orderid() const {
  // @@protoc_insertion_point(field_get:CGCSystemMsg_ReportExternalPurchase_Response.orderid)
  return _internal_orderid();
}
inline void CGCSystemMsg_ReportExternalPurchase_Response::_internal_set_orderid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.orderid_ = value;
}
inline void CGCSystemMsg_ReportExternalPurchase_Response::set_orderid(uint64_t value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:CGCSystemMsg_ReportExternalPurchase_Response.orderid)
}

// -------------------------------------------------------------------

// CWorkshop_AddSpecialPayment_Request

// optional uint32 appid = 1;
inline bool CWorkshop_AddSpecialPayment_Request::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CWorkshop_AddSpecialPayment_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CWorkshop_AddSpecialPayment_Request::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CWorkshop_AddSpecialPayment_Request::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CWorkshop_AddSpecialPayment_Request::appid() const {
  // @@protoc_insertion_point(field_get:CWorkshop_AddSpecialPayment_Request.appid)
  return _internal_appid();
}
inline void CWorkshop_AddSpecialPayment_Request::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.appid_ = value;
}
inline void CWorkshop_AddSpecialPayment_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CWorkshop_AddSpecialPayment_Request.appid)
}

// optional uint32 gameitemid = 2;
inline bool CWorkshop_AddSpecialPayment_Request::_internal_has_gameitemid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CWorkshop_AddSpecialPayment_Request::has_gameitemid() const {
  return _internal_has_gameitemid();
}
inline void CWorkshop_AddSpecialPayment_Request::clear_gameitemid() {
  _impl_.gameitemid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CWorkshop_AddSpecialPayment_Request::_internal_gameitemid() const {
  return _impl_.gameitemid_;
}
inline uint32_t CWorkshop_AddSpecialPayment_Request::gameitemid() const {
  // @@protoc_insertion_point(field_get:CWorkshop_AddSpecialPayment_Request.gameitemid)
  return _internal_gameitemid();
}
inline void CWorkshop_AddSpecialPayment_Request::_internal_set_gameitemid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.gameitemid_ = value;
}
inline void CWorkshop_AddSpecialPayment_Request::set_gameitemid(uint32_t value) {
  _internal_set_gameitemid(value);
  // @@protoc_insertion_point(field_set:CWorkshop_AddSpecialPayment_Request.gameitemid)
}

// optional string date = 3;
inline bool CWorkshop_AddSpecialPayment_Request::_internal_has_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CWorkshop_AddSpecialPayment_Request::has_date() const {
  return _internal_has_date();
}
inline void CWorkshop_AddSpecialPayment_Request::clear_date() {
  _impl_.date_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CWorkshop_AddSpecialPayment_Request::date() const {
  // @@protoc_insertion_point(field_get:CWorkshop_AddSpecialPayment_Request.date)
  return _internal_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CWorkshop_AddSpecialPayment_Request::set_date(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CWorkshop_AddSpecialPayment_Request.date)
}
inline std::string* CWorkshop_AddSpecialPayment_Request::mutable_date() {
  std::string* _s = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:CWorkshop_AddSpecialPayment_Request.date)
  return _s;
}
inline const std::string& CWorkshop_AddSpecialPayment_Request::_internal_date() const {
  return _impl_.date_.Get();
}
inline void CWorkshop_AddSpecialPayment_Request::_internal_set_date(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.date_.Set(value, GetArenaForAllocation());
}
inline std::string* CWorkshop_AddSpecialPayment_Request::_internal_mutable_date() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.date_.Mutable(GetArenaForAllocation());
}
inline std::string* CWorkshop_AddSpecialPayment_Request::release_date() {
  // @@protoc_insertion_point(field_release:CWorkshop_AddSpecialPayment_Request.date)
  if (!_internal_has_date()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.date_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.date_.IsDefault()) {
    _impl_.date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CWorkshop_AddSpecialPayment_Request::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.date_.SetAllocated(date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.date_.IsDefault()) {
    _impl_.date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CWorkshop_AddSpecialPayment_Request.date)
}

// optional uint64 payment_us_usd = 4;
inline bool CWorkshop_AddSpecialPayment_Request::_internal_has_payment_us_usd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CWorkshop_AddSpecialPayment_Request::has_payment_us_usd() const {
  return _internal_has_payment_us_usd();
}
inline void CWorkshop_AddSpecialPayment_Request::clear_payment_us_usd() {
  _impl_.payment_us_usd_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CWorkshop_AddSpecialPayment_Request::_internal_payment_us_usd() const {
  return _impl_.payment_us_usd_;
}
inline uint64_t CWorkshop_AddSpecialPayment_Request::payment_us_usd() const {
  // @@protoc_insertion_point(field_get:CWorkshop_AddSpecialPayment_Request.payment_us_usd)
  return _internal_payment_us_usd();
}
inline void CWorkshop_AddSpecialPayment_Request::_internal_set_payment_us_usd(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.payment_us_usd_ = value;
}
inline void CWorkshop_AddSpecialPayment_Request::set_payment_us_usd(uint64_t value) {
  _internal_set_payment_us_usd(value);
  // @@protoc_insertion_point(field_set:CWorkshop_AddSpecialPayment_Request.payment_us_usd)
}

// optional uint64 payment_row_usd = 5;
inline bool CWorkshop_AddSpecialPayment_Request::_internal_has_payment_row_usd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CWorkshop_AddSpecialPayment_Request::has_payment_row_usd() const {
  return _internal_has_payment_row_usd();
}
inline void CWorkshop_AddSpecialPayment_Request::clear_payment_row_usd() {
  _impl_.payment_row_usd_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CWorkshop_AddSpecialPayment_Request::_internal_payment_row_usd() const {
  return _impl_.payment_row_usd_;
}
inline uint64_t CWorkshop_AddSpecialPayment_Request::payment_row_usd() const {
  // @@protoc_insertion_point(field_get:CWorkshop_AddSpecialPayment_Request.payment_row_usd)
  return _internal_payment_row_usd();
}
inline void CWorkshop_AddSpecialPayment_Request::_internal_set_payment_row_usd(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.payment_row_usd_ = value;
}
inline void CWorkshop_AddSpecialPayment_Request::set_payment_row_usd(uint64_t value) {
  _internal_set_payment_row_usd(value);
  // @@protoc_insertion_point(field_set:CWorkshop_AddSpecialPayment_Request.payment_row_usd)
}

// -------------------------------------------------------------------

// CWorkshop_AddSpecialPayment_Response

// -------------------------------------------------------------------

// CWorkshop_GetSpecialPayments_Request

// optional uint32 appid = 1;
inline bool CWorkshop_GetSpecialPayments_Request::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CWorkshop_GetSpecialPayments_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CWorkshop_GetSpecialPayments_Request::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CWorkshop_GetSpecialPayments_Request::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CWorkshop_GetSpecialPayments_Request::appid() const {
  // @@protoc_insertion_point(field_get:CWorkshop_GetSpecialPayments_Request.appid)
  return _internal_appid();
}
inline void CWorkshop_GetSpecialPayments_Request::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.appid_ = value;
}
inline void CWorkshop_GetSpecialPayments_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CWorkshop_GetSpecialPayments_Request.appid)
}

// optional uint32 gameitemid = 2;
inline bool CWorkshop_GetSpecialPayments_Request::_internal_has_gameitemid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CWorkshop_GetSpecialPayments_Request::has_gameitemid() const {
  return _internal_has_gameitemid();
}
inline void CWorkshop_GetSpecialPayments_Request::clear_gameitemid() {
  _impl_.gameitemid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CWorkshop_GetSpecialPayments_Request::_internal_gameitemid() const {
  return _impl_.gameitemid_;
}
inline uint32_t CWorkshop_GetSpecialPayments_Request::gameitemid() const {
  // @@protoc_insertion_point(field_get:CWorkshop_GetSpecialPayments_Request.gameitemid)
  return _internal_gameitemid();
}
inline void CWorkshop_GetSpecialPayments_Request::_internal_set_gameitemid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.gameitemid_ = value;
}
inline void CWorkshop_GetSpecialPayments_Request::set_gameitemid(uint32_t value) {
  _internal_set_gameitemid(value);
  // @@protoc_insertion_point(field_set:CWorkshop_GetSpecialPayments_Request.gameitemid)
}

// optional string date = 3;
inline bool CWorkshop_GetSpecialPayments_Request::_internal_has_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CWorkshop_GetSpecialPayments_Request::has_date() const {
  return _internal_has_date();
}
inline void CWorkshop_GetSpecialPayments_Request::clear_date() {
  _impl_.date_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CWorkshop_GetSpecialPayments_Request::date() const {
  // @@protoc_insertion_point(field_get:CWorkshop_GetSpecialPayments_Request.date)
  return _internal_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CWorkshop_GetSpecialPayments_Request::set_date(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CWorkshop_GetSpecialPayments_Request.date)
}
inline std::string* CWorkshop_GetSpecialPayments_Request::mutable_date() {
  std::string* _s = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:CWorkshop_GetSpecialPayments_Request.date)
  return _s;
}
inline const std::string& CWorkshop_GetSpecialPayments_Request::_internal_date() const {
  return _impl_.date_.Get();
}
inline void CWorkshop_GetSpecialPayments_Request::_internal_set_date(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.date_.Set(value, GetArenaForAllocation());
}
inline std::string* CWorkshop_GetSpecialPayments_Request::_internal_mutable_date() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.date_.Mutable(GetArenaForAllocation());
}
inline std::string* CWorkshop_GetSpecialPayments_Request::release_date() {
  // @@protoc_insertion_point(field_release:CWorkshop_GetSpecialPayments_Request.date)
  if (!_internal_has_date()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.date_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.date_.IsDefault()) {
    _impl_.date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CWorkshop_GetSpecialPayments_Request::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.date_.SetAllocated(date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.date_.IsDefault()) {
    _impl_.date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CWorkshop_GetSpecialPayments_Request.date)
}

// -------------------------------------------------------------------

// CWorkshop_GetSpecialPayments_Response_SpecialPayment

// optional uint32 appid = 1;
inline bool CWorkshop_GetSpecialPayments_Response_SpecialPayment::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CWorkshop_GetSpecialPayments_Response_SpecialPayment::has_appid() const {
  return _internal_has_appid();
}
inline void CWorkshop_GetSpecialPayments_Response_SpecialPayment::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CWorkshop_GetSpecialPayments_Response_SpecialPayment::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CWorkshop_GetSpecialPayments_Response_SpecialPayment::appid() const {
  // @@protoc_insertion_point(field_get:CWorkshop_GetSpecialPayments_Response.SpecialPayment.appid)
  return _internal_appid();
}
inline void CWorkshop_GetSpecialPayments_Response_SpecialPayment::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.appid_ = value;
}
inline void CWorkshop_GetSpecialPayments_Response_SpecialPayment::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CWorkshop_GetSpecialPayments_Response.SpecialPayment.appid)
}

// optional uint32 gameitemid = 2;
inline bool CWorkshop_GetSpecialPayments_Response_SpecialPayment::_internal_has_gameitemid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CWorkshop_GetSpecialPayments_Response_SpecialPayment::has_gameitemid() const {
  return _internal_has_gameitemid();
}
inline void CWorkshop_GetSpecialPayments_Response_SpecialPayment::clear_gameitemid() {
  _impl_.gameitemid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CWorkshop_GetSpecialPayments_Response_SpecialPayment::_internal_gameitemid() const {
  return _impl_.gameitemid_;
}
inline uint32_t CWorkshop_GetSpecialPayments_Response_SpecialPayment::gameitemid() const {
  // @@protoc_insertion_point(field_get:CWorkshop_GetSpecialPayments_Response.SpecialPayment.gameitemid)
  return _internal_gameitemid();
}
inline void CWorkshop_GetSpecialPayments_Response_SpecialPayment::_internal_set_gameitemid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.gameitemid_ = value;
}
inline void CWorkshop_GetSpecialPayments_Response_SpecialPayment::set_gameitemid(uint32_t value) {
  _internal_set_gameitemid(value);
  // @@protoc_insertion_point(field_set:CWorkshop_GetSpecialPayments_Response.SpecialPayment.gameitemid)
}

// optional string date = 3;
inline bool CWorkshop_GetSpecialPayments_Response_SpecialPayment::_internal_has_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CWorkshop_GetSpecialPayments_Response_SpecialPayment::has_date() const {
  return _internal_has_date();
}
inline void CWorkshop_GetSpecialPayments_Response_SpecialPayment::clear_date() {
  _impl_.date_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CWorkshop_GetSpecialPayments_Response_SpecialPayment::date() const {
  // @@protoc_insertion_point(field_get:CWorkshop_GetSpecialPayments_Response.SpecialPayment.date)
  return _internal_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CWorkshop_GetSpecialPayments_Response_SpecialPayment::set_date(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CWorkshop_GetSpecialPayments_Response.SpecialPayment.date)
}
inline std::string* CWorkshop_GetSpecialPayments_Response_SpecialPayment::mutable_date() {
  std::string* _s = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:CWorkshop_GetSpecialPayments_Response.SpecialPayment.date)
  return _s;
}
inline const std::string& CWorkshop_GetSpecialPayments_Response_SpecialPayment::_internal_date() const {
  return _impl_.date_.Get();
}
inline void CWorkshop_GetSpecialPayments_Response_SpecialPayment::_internal_set_date(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.date_.Set(value, GetArenaForAllocation());
}
inline std::string* CWorkshop_GetSpecialPayments_Response_SpecialPayment::_internal_mutable_date() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.date_.Mutable(GetArenaForAllocation());
}
inline std::string* CWorkshop_GetSpecialPayments_Response_SpecialPayment::release_date() {
  // @@protoc_insertion_point(field_release:CWorkshop_GetSpecialPayments_Response.SpecialPayment.date)
  if (!_internal_has_date()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.date_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.date_.IsDefault()) {
    _impl_.date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CWorkshop_GetSpecialPayments_Response_SpecialPayment::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.date_.SetAllocated(date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.date_.IsDefault()) {
    _impl_.date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CWorkshop_GetSpecialPayments_Response.SpecialPayment.date)
}

// optional uint64 net_payment_us_usd = 4;
inline bool CWorkshop_GetSpecialPayments_Response_SpecialPayment::_internal_has_net_payment_us_usd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CWorkshop_GetSpecialPayments_Response_SpecialPayment::has_net_payment_us_usd() const {
  return _internal_has_net_payment_us_usd();
}
inline void CWorkshop_GetSpecialPayments_Response_SpecialPayment::clear_net_payment_us_usd() {
  _impl_.net_payment_us_usd_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CWorkshop_GetSpecialPayments_Response_SpecialPayment::_internal_net_payment_us_usd() const {
  return _impl_.net_payment_us_usd_;
}
inline uint64_t CWorkshop_GetSpecialPayments_Response_SpecialPayment::net_payment_us_usd() const {
  // @@protoc_insertion_point(field_get:CWorkshop_GetSpecialPayments_Response.SpecialPayment.net_payment_us_usd)
  return _internal_net_payment_us_usd();
}
inline void CWorkshop_GetSpecialPayments_Response_SpecialPayment::_internal_set_net_payment_us_usd(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.net_payment_us_usd_ = value;
}
inline void CWorkshop_GetSpecialPayments_Response_SpecialPayment::set_net_payment_us_usd(uint64_t value) {
  _internal_set_net_payment_us_usd(value);
  // @@protoc_insertion_point(field_set:CWorkshop_GetSpecialPayments_Response.SpecialPayment.net_payment_us_usd)
}

// optional uint64 net_payment_row_usd = 5;
inline bool CWorkshop_GetSpecialPayments_Response_SpecialPayment::_internal_has_net_payment_row_usd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CWorkshop_GetSpecialPayments_Response_SpecialPayment::has_net_payment_row_usd() const {
  return _internal_has_net_payment_row_usd();
}
inline void CWorkshop_GetSpecialPayments_Response_SpecialPayment::clear_net_payment_row_usd() {
  _impl_.net_payment_row_usd_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CWorkshop_GetSpecialPayments_Response_SpecialPayment::_internal_net_payment_row_usd() const {
  return _impl_.net_payment_row_usd_;
}
inline uint64_t CWorkshop_GetSpecialPayments_Response_SpecialPayment::net_payment_row_usd() const {
  // @@protoc_insertion_point(field_get:CWorkshop_GetSpecialPayments_Response.SpecialPayment.net_payment_row_usd)
  return _internal_net_payment_row_usd();
}
inline void CWorkshop_GetSpecialPayments_Response_SpecialPayment::_internal_set_net_payment_row_usd(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.net_payment_row_usd_ = value;
}
inline void CWorkshop_GetSpecialPayments_Response_SpecialPayment::set_net_payment_row_usd(uint64_t value) {
  _internal_set_net_payment_row_usd(value);
  // @@protoc_insertion_point(field_set:CWorkshop_GetSpecialPayments_Response.SpecialPayment.net_payment_row_usd)
}

// -------------------------------------------------------------------

// CWorkshop_GetSpecialPayments_Response

// repeated .CWorkshop_GetSpecialPayments_Response.SpecialPayment special_payments = 1;
inline int CWorkshop_GetSpecialPayments_Response::_internal_special_payments_size() const {
  return _impl_.special_payments_.size();
}
inline int CWorkshop_GetSpecialPayments_Response::special_payments_size() const {
  return _internal_special_payments_size();
}
inline void CWorkshop_GetSpecialPayments_Response::clear_special_payments() {
  _impl_.special_payments_.Clear();
}
inline ::CWorkshop_GetSpecialPayments_Response_SpecialPayment* CWorkshop_GetSpecialPayments_Response::mutable_special_payments(int index) {
  // @@protoc_insertion_point(field_mutable:CWorkshop_GetSpecialPayments_Response.special_payments)
  return _impl_.special_payments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CWorkshop_GetSpecialPayments_Response_SpecialPayment >*
CWorkshop_GetSpecialPayments_Response::mutable_special_payments() {
  // @@protoc_insertion_point(field_mutable_list:CWorkshop_GetSpecialPayments_Response.special_payments)
  return &_impl_.special_payments_;
}
inline const ::CWorkshop_GetSpecialPayments_Response_SpecialPayment& CWorkshop_GetSpecialPayments_Response::_internal_special_payments(int index) const {
  return _impl_.special_payments_.Get(index);
}
inline const ::CWorkshop_GetSpecialPayments_Response_SpecialPayment& CWorkshop_GetSpecialPayments_Response::special_payments(int index) const {
  // @@protoc_insertion_point(field_get:CWorkshop_GetSpecialPayments_Response.special_payments)
  return _internal_special_payments(index);
}
inline ::CWorkshop_GetSpecialPayments_Response_SpecialPayment* CWorkshop_GetSpecialPayments_Response::_internal_add_special_payments() {
  return _impl_.special_payments_.Add();
}
inline ::CWorkshop_GetSpecialPayments_Response_SpecialPayment* CWorkshop_GetSpecialPayments_Response::add_special_payments() {
  ::CWorkshop_GetSpecialPayments_Response_SpecialPayment* _add = _internal_add_special_payments();
  // @@protoc_insertion_point(field_add:CWorkshop_GetSpecialPayments_Response.special_payments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CWorkshop_GetSpecialPayments_Response_SpecialPayment >&
CWorkshop_GetSpecialPayments_Response::special_payments() const {
  // @@protoc_insertion_point(field_list:CWorkshop_GetSpecialPayments_Response.special_payments)
  return _impl_.special_payments_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CMsgGCRoutingInfo_RoutingMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGCRoutingInfo_RoutingMethod>() {
  return ::CMsgGCRoutingInfo_RoutingMethod_descriptor();
}
template <> struct is_proto_enum< ::CMsgGCMsgSetOptions_Option> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGCMsgSetOptions_Option>() {
  return ::CMsgGCMsgSetOptions_Option_descriptor();
}
template <> struct is_proto_enum< ::CMsgGCMsgSetOptions_GCSQLVersion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGCMsgSetOptions_GCSQLVersion>() {
  return ::CMsgGCMsgSetOptions_GCSQLVersion_descriptor();
}
template <> struct is_proto_enum< ::CMsgDPPartnerMicroTxnsResponse_EErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDPPartnerMicroTxnsResponse_EErrorCode>() {
  return ::CMsgDPPartnerMicroTxnsResponse_EErrorCode_descriptor();
}
template <> struct is_proto_enum< ::EMobilePaymentProvider> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EMobilePaymentProvider>() {
  return ::EMobilePaymentProvider_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fint_2eproto
