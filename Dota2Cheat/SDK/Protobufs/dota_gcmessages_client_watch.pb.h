// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_watch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fwatch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fwatch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dota_gcmessages_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fwatch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto;
class CDOTABroadcasterInfo;
struct CDOTABroadcasterInfoDefaultTypeInternal;
extern CDOTABroadcasterInfoDefaultTypeInternal _CDOTABroadcasterInfo_default_instance_;
class CDOTAReplayDownloadInfo;
struct CDOTAReplayDownloadInfoDefaultTypeInternal;
extern CDOTAReplayDownloadInfoDefaultTypeInternal _CDOTAReplayDownloadInfo_default_instance_;
class CDOTAReplayDownloadInfo_Highlight;
struct CDOTAReplayDownloadInfo_HighlightDefaultTypeInternal;
extern CDOTAReplayDownloadInfo_HighlightDefaultTypeInternal _CDOTAReplayDownloadInfo_Highlight_default_instance_;
class CMsgCancelWatchGame;
struct CMsgCancelWatchGameDefaultTypeInternal;
extern CMsgCancelWatchGameDefaultTypeInternal _CMsgCancelWatchGame_default_instance_;
class CMsgClientToGCFindTopSourceTVGames;
struct CMsgClientToGCFindTopSourceTVGamesDefaultTypeInternal;
extern CMsgClientToGCFindTopSourceTVGamesDefaultTypeInternal _CMsgClientToGCFindTopSourceTVGames_default_instance_;
class CMsgClientToGCMatchesMinimalRequest;
struct CMsgClientToGCMatchesMinimalRequestDefaultTypeInternal;
extern CMsgClientToGCMatchesMinimalRequestDefaultTypeInternal _CMsgClientToGCMatchesMinimalRequest_default_instance_;
class CMsgClientToGCMatchesMinimalResponse;
struct CMsgClientToGCMatchesMinimalResponseDefaultTypeInternal;
extern CMsgClientToGCMatchesMinimalResponseDefaultTypeInternal _CMsgClientToGCMatchesMinimalResponse_default_instance_;
class CMsgClientToGCTopFriendMatchesRequest;
struct CMsgClientToGCTopFriendMatchesRequestDefaultTypeInternal;
extern CMsgClientToGCTopFriendMatchesRequestDefaultTypeInternal _CMsgClientToGCTopFriendMatchesRequest_default_instance_;
class CMsgClientToGCTopLeagueMatchesRequest;
struct CMsgClientToGCTopLeagueMatchesRequestDefaultTypeInternal;
extern CMsgClientToGCTopLeagueMatchesRequestDefaultTypeInternal _CMsgClientToGCTopLeagueMatchesRequest_default_instance_;
class CMsgDOTASeries;
struct CMsgDOTASeriesDefaultTypeInternal;
extern CMsgDOTASeriesDefaultTypeInternal _CMsgDOTASeries_default_instance_;
class CMsgDOTASeries_LiveGame;
struct CMsgDOTASeries_LiveGameDefaultTypeInternal;
extern CMsgDOTASeries_LiveGameDefaultTypeInternal _CMsgDOTASeries_LiveGame_default_instance_;
class CMsgDOTASeries_TeamInfo;
struct CMsgDOTASeries_TeamInfoDefaultTypeInternal;
extern CMsgDOTASeries_TeamInfoDefaultTypeInternal _CMsgDOTASeries_TeamInfo_default_instance_;
class CMsgGCToClientFindTopSourceTVGamesResponse;
struct CMsgGCToClientFindTopSourceTVGamesResponseDefaultTypeInternal;
extern CMsgGCToClientFindTopSourceTVGamesResponseDefaultTypeInternal _CMsgGCToClientFindTopSourceTVGamesResponse_default_instance_;
class CMsgGCToClientTopFriendMatchesResponse;
struct CMsgGCToClientTopFriendMatchesResponseDefaultTypeInternal;
extern CMsgGCToClientTopFriendMatchesResponseDefaultTypeInternal _CMsgGCToClientTopFriendMatchesResponse_default_instance_;
class CMsgGCToClientTopLeagueMatchesResponse;
struct CMsgGCToClientTopLeagueMatchesResponseDefaultTypeInternal;
extern CMsgGCToClientTopLeagueMatchesResponseDefaultTypeInternal _CMsgGCToClientTopLeagueMatchesResponse_default_instance_;
class CMsgGCToClientTopWeekendTourneyGames;
struct CMsgGCToClientTopWeekendTourneyGamesDefaultTypeInternal;
extern CMsgGCToClientTopWeekendTourneyGamesDefaultTypeInternal _CMsgGCToClientTopWeekendTourneyGames_default_instance_;
class CMsgPartyLeaderWatchGamePrompt;
struct CMsgPartyLeaderWatchGamePromptDefaultTypeInternal;
extern CMsgPartyLeaderWatchGamePromptDefaultTypeInternal _CMsgPartyLeaderWatchGamePrompt_default_instance_;
class CMsgSpectateFriendGame;
struct CMsgSpectateFriendGameDefaultTypeInternal;
extern CMsgSpectateFriendGameDefaultTypeInternal _CMsgSpectateFriendGame_default_instance_;
class CMsgSpectateFriendGameResponse;
struct CMsgSpectateFriendGameResponseDefaultTypeInternal;
extern CMsgSpectateFriendGameResponseDefaultTypeInternal _CMsgSpectateFriendGameResponse_default_instance_;
class CMsgWatchGame;
struct CMsgWatchGameDefaultTypeInternal;
extern CMsgWatchGameDefaultTypeInternal _CMsgWatchGame_default_instance_;
class CMsgWatchGameResponse;
struct CMsgWatchGameResponseDefaultTypeInternal;
extern CMsgWatchGameResponseDefaultTypeInternal _CMsgWatchGameResponse_default_instance_;
class CSourceTVGameSmall;
struct CSourceTVGameSmallDefaultTypeInternal;
extern CSourceTVGameSmallDefaultTypeInternal _CSourceTVGameSmall_default_instance_;
class CSourceTVGameSmall_Player;
struct CSourceTVGameSmall_PlayerDefaultTypeInternal;
extern CSourceTVGameSmall_PlayerDefaultTypeInternal _CSourceTVGameSmall_Player_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CDOTABroadcasterInfo* Arena::CreateMaybeMessage<::CDOTABroadcasterInfo>(Arena*);
template<> ::CDOTAReplayDownloadInfo* Arena::CreateMaybeMessage<::CDOTAReplayDownloadInfo>(Arena*);
template<> ::CDOTAReplayDownloadInfo_Highlight* Arena::CreateMaybeMessage<::CDOTAReplayDownloadInfo_Highlight>(Arena*);
template<> ::CMsgCancelWatchGame* Arena::CreateMaybeMessage<::CMsgCancelWatchGame>(Arena*);
template<> ::CMsgClientToGCFindTopSourceTVGames* Arena::CreateMaybeMessage<::CMsgClientToGCFindTopSourceTVGames>(Arena*);
template<> ::CMsgClientToGCMatchesMinimalRequest* Arena::CreateMaybeMessage<::CMsgClientToGCMatchesMinimalRequest>(Arena*);
template<> ::CMsgClientToGCMatchesMinimalResponse* Arena::CreateMaybeMessage<::CMsgClientToGCMatchesMinimalResponse>(Arena*);
template<> ::CMsgClientToGCTopFriendMatchesRequest* Arena::CreateMaybeMessage<::CMsgClientToGCTopFriendMatchesRequest>(Arena*);
template<> ::CMsgClientToGCTopLeagueMatchesRequest* Arena::CreateMaybeMessage<::CMsgClientToGCTopLeagueMatchesRequest>(Arena*);
template<> ::CMsgDOTASeries* Arena::CreateMaybeMessage<::CMsgDOTASeries>(Arena*);
template<> ::CMsgDOTASeries_LiveGame* Arena::CreateMaybeMessage<::CMsgDOTASeries_LiveGame>(Arena*);
template<> ::CMsgDOTASeries_TeamInfo* Arena::CreateMaybeMessage<::CMsgDOTASeries_TeamInfo>(Arena*);
template<> ::CMsgGCToClientFindTopSourceTVGamesResponse* Arena::CreateMaybeMessage<::CMsgGCToClientFindTopSourceTVGamesResponse>(Arena*);
template<> ::CMsgGCToClientTopFriendMatchesResponse* Arena::CreateMaybeMessage<::CMsgGCToClientTopFriendMatchesResponse>(Arena*);
template<> ::CMsgGCToClientTopLeagueMatchesResponse* Arena::CreateMaybeMessage<::CMsgGCToClientTopLeagueMatchesResponse>(Arena*);
template<> ::CMsgGCToClientTopWeekendTourneyGames* Arena::CreateMaybeMessage<::CMsgGCToClientTopWeekendTourneyGames>(Arena*);
template<> ::CMsgPartyLeaderWatchGamePrompt* Arena::CreateMaybeMessage<::CMsgPartyLeaderWatchGamePrompt>(Arena*);
template<> ::CMsgSpectateFriendGame* Arena::CreateMaybeMessage<::CMsgSpectateFriendGame>(Arena*);
template<> ::CMsgSpectateFriendGameResponse* Arena::CreateMaybeMessage<::CMsgSpectateFriendGameResponse>(Arena*);
template<> ::CMsgWatchGame* Arena::CreateMaybeMessage<::CMsgWatchGame>(Arena*);
template<> ::CMsgWatchGameResponse* Arena::CreateMaybeMessage<::CMsgWatchGameResponse>(Arena*);
template<> ::CSourceTVGameSmall* Arena::CreateMaybeMessage<::CSourceTVGameSmall>(Arena*);
template<> ::CSourceTVGameSmall_Player* Arena::CreateMaybeMessage<::CSourceTVGameSmall_Player>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CMsgSpectateFriendGameResponse_EWatchLiveResult : int {
  CMsgSpectateFriendGameResponse_EWatchLiveResult_SUCCESS = 0,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_GENERIC = 1,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_NO_PLUS = 2,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_NOT_FRIENDS = 3,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_LOBBY_NOT_FOUND = 4,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_SPECTATOR_IN_A_LOBBY = 5,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_LOBBY_IS_LAN = 6,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_WRONG_LOBBY_TYPE = 7,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_WRONG_LOBBY_STATE = 8,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_PLAYER_NOT_PLAYER = 9,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_TOO_MANY_SPECTATORS = 10,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_SPECTATOR_SWITCHED_TEAMS = 11,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_FRIENDS_ON_BOTH_SIDES = 12,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_SPECTATOR_IN_THIS_LOBBY = 13,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_LOBBY_IS_LEAGUE = 14
};
bool CMsgSpectateFriendGameResponse_EWatchLiveResult_IsValid(int value);
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse_EWatchLiveResult_EWatchLiveResult_MIN = CMsgSpectateFriendGameResponse_EWatchLiveResult_SUCCESS;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse_EWatchLiveResult_EWatchLiveResult_MAX = CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_LOBBY_IS_LEAGUE;
constexpr int CMsgSpectateFriendGameResponse_EWatchLiveResult_EWatchLiveResult_ARRAYSIZE = CMsgSpectateFriendGameResponse_EWatchLiveResult_EWatchLiveResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgSpectateFriendGameResponse_EWatchLiveResult_descriptor();
template<typename T>
inline const std::string& CMsgSpectateFriendGameResponse_EWatchLiveResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgSpectateFriendGameResponse_EWatchLiveResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgSpectateFriendGameResponse_EWatchLiveResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgSpectateFriendGameResponse_EWatchLiveResult_descriptor(), enum_t_value);
}
inline bool CMsgSpectateFriendGameResponse_EWatchLiveResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgSpectateFriendGameResponse_EWatchLiveResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgSpectateFriendGameResponse_EWatchLiveResult>(
    CMsgSpectateFriendGameResponse_EWatchLiveResult_descriptor(), name, value);
}
enum CMsgWatchGameResponse_WatchGameResult : int {
  CMsgWatchGameResponse_WatchGameResult_PENDING = 0,
  CMsgWatchGameResponse_WatchGameResult_READY = 1,
  CMsgWatchGameResponse_WatchGameResult_GAMESERVERNOTFOUND = 2,
  CMsgWatchGameResponse_WatchGameResult_UNAVAILABLE = 3,
  CMsgWatchGameResponse_WatchGameResult_CANCELLED = 4,
  CMsgWatchGameResponse_WatchGameResult_INCOMPATIBLEVERSION = 5,
  CMsgWatchGameResponse_WatchGameResult_MISSINGLEAGUESUBSCRIPTION = 6,
  CMsgWatchGameResponse_WatchGameResult_LOBBYNOTFOUND = 7
};
bool CMsgWatchGameResponse_WatchGameResult_IsValid(int value);
constexpr CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MIN = CMsgWatchGameResponse_WatchGameResult_PENDING;
constexpr CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MAX = CMsgWatchGameResponse_WatchGameResult_LOBBYNOTFOUND;
constexpr int CMsgWatchGameResponse_WatchGameResult_WatchGameResult_ARRAYSIZE = CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgWatchGameResponse_WatchGameResult_descriptor();
template<typename T>
inline const std::string& CMsgWatchGameResponse_WatchGameResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgWatchGameResponse_WatchGameResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgWatchGameResponse_WatchGameResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgWatchGameResponse_WatchGameResult_descriptor(), enum_t_value);
}
inline bool CMsgWatchGameResponse_WatchGameResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgWatchGameResponse_WatchGameResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgWatchGameResponse_WatchGameResult>(
    CMsgWatchGameResponse_WatchGameResult_descriptor(), name, value);
}
// ===================================================================

class CSourceTVGameSmall_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSourceTVGameSmall.Player) */ {
 public:
  inline CSourceTVGameSmall_Player() : CSourceTVGameSmall_Player(nullptr) {}
  ~CSourceTVGameSmall_Player() override;
  explicit PROTOBUF_CONSTEXPR CSourceTVGameSmall_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSourceTVGameSmall_Player(const CSourceTVGameSmall_Player& from);
  CSourceTVGameSmall_Player(CSourceTVGameSmall_Player&& from) noexcept
    : CSourceTVGameSmall_Player() {
    *this = ::std::move(from);
  }

  inline CSourceTVGameSmall_Player& operator=(const CSourceTVGameSmall_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSourceTVGameSmall_Player& operator=(CSourceTVGameSmall_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSourceTVGameSmall_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSourceTVGameSmall_Player* internal_default_instance() {
    return reinterpret_cast<const CSourceTVGameSmall_Player*>(
               &_CSourceTVGameSmall_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSourceTVGameSmall_Player& a, CSourceTVGameSmall_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CSourceTVGameSmall_Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSourceTVGameSmall_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSourceTVGameSmall_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSourceTVGameSmall_Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSourceTVGameSmall_Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSourceTVGameSmall_Player& from) {
    CSourceTVGameSmall_Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSourceTVGameSmall_Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSourceTVGameSmall.Player";
  }
  protected:
  explicit CSourceTVGameSmall_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kHeroIdFieldNumber = 2,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSourceTVGameSmall.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    uint32_t hero_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CSourceTVGameSmall final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSourceTVGameSmall) */ {
 public:
  inline CSourceTVGameSmall() : CSourceTVGameSmall(nullptr) {}
  ~CSourceTVGameSmall() override;
  explicit PROTOBUF_CONSTEXPR CSourceTVGameSmall(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSourceTVGameSmall(const CSourceTVGameSmall& from);
  CSourceTVGameSmall(CSourceTVGameSmall&& from) noexcept
    : CSourceTVGameSmall() {
    *this = ::std::move(from);
  }

  inline CSourceTVGameSmall& operator=(const CSourceTVGameSmall& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSourceTVGameSmall& operator=(CSourceTVGameSmall&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSourceTVGameSmall& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSourceTVGameSmall* internal_default_instance() {
    return reinterpret_cast<const CSourceTVGameSmall*>(
               &_CSourceTVGameSmall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CSourceTVGameSmall& a, CSourceTVGameSmall& b) {
    a.Swap(&b);
  }
  inline void Swap(CSourceTVGameSmall* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSourceTVGameSmall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSourceTVGameSmall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSourceTVGameSmall>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSourceTVGameSmall& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSourceTVGameSmall& from) {
    CSourceTVGameSmall::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSourceTVGameSmall* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSourceTVGameSmall";
  }
  protected:
  explicit CSourceTVGameSmall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSourceTVGameSmall_Player Player;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 22,
    kTeamNameRadiantFieldNumber = 15,
    kTeamNameDireFieldNumber = 16,
    kActivateTimeFieldNumber = 1,
    kDeactivateTimeFieldNumber = 2,
    kServerSteamIdFieldNumber = 3,
    kLobbyIdFieldNumber = 4,
    kLeagueIdFieldNumber = 5,
    kLobbyTypeFieldNumber = 6,
    kGameTimeFieldNumber = 7,
    kDelayFieldNumber = 8,
    kSpectatorsFieldNumber = 9,
    kGameModeFieldNumber = 10,
    kMatchIdFieldNumber = 12,
    kAverageMmrFieldNumber = 11,
    kSeriesIdFieldNumber = 13,
    kSortScoreFieldNumber = 17,
    kLastUpdateTimeFieldNumber = 18,
    kRadiantLeadFieldNumber = 19,
    kRadiantScoreFieldNumber = 20,
    kDireScoreFieldNumber = 21,
    kBuildingStateFieldNumber = 23,
    kTeamLogoRadiantFieldNumber = 24,
    kTeamLogoDireFieldNumber = 25,
    kWeekendTourneyTournamentIdFieldNumber = 26,
    kWeekendTourneyDivisionFieldNumber = 27,
    kWeekendTourneySkillLevelFieldNumber = 28,
    kWeekendTourneyBracketRoundFieldNumber = 29,
    kTeamIdRadiantFieldNumber = 30,
    kTeamIdDireFieldNumber = 31,
    kCustomGameDifficultyFieldNumber = 32,
  };
  // repeated .CSourceTVGameSmall.Player players = 22;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CSourceTVGameSmall_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSourceTVGameSmall_Player >*
      mutable_players();
  private:
  const ::CSourceTVGameSmall_Player& _internal_players(int index) const;
  ::CSourceTVGameSmall_Player* _internal_add_players();
  public:
  const ::CSourceTVGameSmall_Player& players(int index) const;
  ::CSourceTVGameSmall_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSourceTVGameSmall_Player >&
      players() const;

  // optional string team_name_radiant = 15;
  bool has_team_name_radiant() const;
  private:
  bool _internal_has_team_name_radiant() const;
  public:
  void clear_team_name_radiant();
  const std::string& team_name_radiant() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_name_radiant(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_name_radiant();
  PROTOBUF_NODISCARD std::string* release_team_name_radiant();
  void set_allocated_team_name_radiant(std::string* team_name_radiant);
  private:
  const std::string& _internal_team_name_radiant() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_name_radiant(const std::string& value);
  std::string* _internal_mutable_team_name_radiant();
  public:

  // optional string team_name_dire = 16;
  bool has_team_name_dire() const;
  private:
  bool _internal_has_team_name_dire() const;
  public:
  void clear_team_name_dire();
  const std::string& team_name_dire() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_name_dire(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_name_dire();
  PROTOBUF_NODISCARD std::string* release_team_name_dire();
  void set_allocated_team_name_dire(std::string* team_name_dire);
  private:
  const std::string& _internal_team_name_dire() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_name_dire(const std::string& value);
  std::string* _internal_mutable_team_name_dire();
  public:

  // optional uint32 activate_time = 1;
  bool has_activate_time() const;
  private:
  bool _internal_has_activate_time() const;
  public:
  void clear_activate_time();
  uint32_t activate_time() const;
  void set_activate_time(uint32_t value);
  private:
  uint32_t _internal_activate_time() const;
  void _internal_set_activate_time(uint32_t value);
  public:

  // optional uint32 deactivate_time = 2;
  bool has_deactivate_time() const;
  private:
  bool _internal_has_deactivate_time() const;
  public:
  void clear_deactivate_time();
  uint32_t deactivate_time() const;
  void set_deactivate_time(uint32_t value);
  private:
  uint32_t _internal_deactivate_time() const;
  void _internal_set_deactivate_time(uint32_t value);
  public:

  // optional uint64 server_steam_id = 3;
  bool has_server_steam_id() const;
  private:
  bool _internal_has_server_steam_id() const;
  public:
  void clear_server_steam_id();
  uint64_t server_steam_id() const;
  void set_server_steam_id(uint64_t value);
  private:
  uint64_t _internal_server_steam_id() const;
  void _internal_set_server_steam_id(uint64_t value);
  public:

  // optional uint64 lobby_id = 4;
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  uint64_t lobby_id() const;
  void set_lobby_id(uint64_t value);
  private:
  uint64_t _internal_lobby_id() const;
  void _internal_set_lobby_id(uint64_t value);
  public:

  // optional uint32 league_id = 5;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // optional uint32 lobby_type = 6;
  bool has_lobby_type() const;
  private:
  bool _internal_has_lobby_type() const;
  public:
  void clear_lobby_type();
  uint32_t lobby_type() const;
  void set_lobby_type(uint32_t value);
  private:
  uint32_t _internal_lobby_type() const;
  void _internal_set_lobby_type(uint32_t value);
  public:

  // optional int32 game_time = 7;
  bool has_game_time() const;
  private:
  bool _internal_has_game_time() const;
  public:
  void clear_game_time();
  int32_t game_time() const;
  void set_game_time(int32_t value);
  private:
  int32_t _internal_game_time() const;
  void _internal_set_game_time(int32_t value);
  public:

  // optional uint32 delay = 8;
  bool has_delay() const;
  private:
  bool _internal_has_delay() const;
  public:
  void clear_delay();
  uint32_t delay() const;
  void set_delay(uint32_t value);
  private:
  uint32_t _internal_delay() const;
  void _internal_set_delay(uint32_t value);
  public:

  // optional uint32 spectators = 9;
  bool has_spectators() const;
  private:
  bool _internal_has_spectators() const;
  public:
  void clear_spectators();
  uint32_t spectators() const;
  void set_spectators(uint32_t value);
  private:
  uint32_t _internal_spectators() const;
  void _internal_set_spectators(uint32_t value);
  public:

  // optional uint32 game_mode = 10;
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  uint32_t game_mode() const;
  void set_game_mode(uint32_t value);
  private:
  uint32_t _internal_game_mode() const;
  void _internal_set_game_mode(uint32_t value);
  public:

  // optional uint64 match_id = 12;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint32 average_mmr = 11;
  bool has_average_mmr() const;
  private:
  bool _internal_has_average_mmr() const;
  public:
  void clear_average_mmr();
  uint32_t average_mmr() const;
  void set_average_mmr(uint32_t value);
  private:
  uint32_t _internal_average_mmr() const;
  void _internal_set_average_mmr(uint32_t value);
  public:

  // optional uint32 series_id = 13;
  bool has_series_id() const;
  private:
  bool _internal_has_series_id() const;
  public:
  void clear_series_id();
  uint32_t series_id() const;
  void set_series_id(uint32_t value);
  private:
  uint32_t _internal_series_id() const;
  void _internal_set_series_id(uint32_t value);
  public:

  // optional uint32 sort_score = 17;
  bool has_sort_score() const;
  private:
  bool _internal_has_sort_score() const;
  public:
  void clear_sort_score();
  uint32_t sort_score() const;
  void set_sort_score(uint32_t value);
  private:
  uint32_t _internal_sort_score() const;
  void _internal_set_sort_score(uint32_t value);
  public:

  // optional float last_update_time = 18;
  bool has_last_update_time() const;
  private:
  bool _internal_has_last_update_time() const;
  public:
  void clear_last_update_time();
  float last_update_time() const;
  void set_last_update_time(float value);
  private:
  float _internal_last_update_time() const;
  void _internal_set_last_update_time(float value);
  public:

  // optional int32 radiant_lead = 19;
  bool has_radiant_lead() const;
  private:
  bool _internal_has_radiant_lead() const;
  public:
  void clear_radiant_lead();
  int32_t radiant_lead() const;
  void set_radiant_lead(int32_t value);
  private:
  int32_t _internal_radiant_lead() const;
  void _internal_set_radiant_lead(int32_t value);
  public:

  // optional uint32 radiant_score = 20;
  bool has_radiant_score() const;
  private:
  bool _internal_has_radiant_score() const;
  public:
  void clear_radiant_score();
  uint32_t radiant_score() const;
  void set_radiant_score(uint32_t value);
  private:
  uint32_t _internal_radiant_score() const;
  void _internal_set_radiant_score(uint32_t value);
  public:

  // optional uint32 dire_score = 21;
  bool has_dire_score() const;
  private:
  bool _internal_has_dire_score() const;
  public:
  void clear_dire_score();
  uint32_t dire_score() const;
  void set_dire_score(uint32_t value);
  private:
  uint32_t _internal_dire_score() const;
  void _internal_set_dire_score(uint32_t value);
  public:

  // optional fixed32 building_state = 23;
  bool has_building_state() const;
  private:
  bool _internal_has_building_state() const;
  public:
  void clear_building_state();
  uint32_t building_state() const;
  void set_building_state(uint32_t value);
  private:
  uint32_t _internal_building_state() const;
  void _internal_set_building_state(uint32_t value);
  public:

  // optional fixed64 team_logo_radiant = 24;
  bool has_team_logo_radiant() const;
  private:
  bool _internal_has_team_logo_radiant() const;
  public:
  void clear_team_logo_radiant();
  uint64_t team_logo_radiant() const;
  void set_team_logo_radiant(uint64_t value);
  private:
  uint64_t _internal_team_logo_radiant() const;
  void _internal_set_team_logo_radiant(uint64_t value);
  public:

  // optional fixed64 team_logo_dire = 25;
  bool has_team_logo_dire() const;
  private:
  bool _internal_has_team_logo_dire() const;
  public:
  void clear_team_logo_dire();
  uint64_t team_logo_dire() const;
  void set_team_logo_dire(uint64_t value);
  private:
  uint64_t _internal_team_logo_dire() const;
  void _internal_set_team_logo_dire(uint64_t value);
  public:

  // optional uint32 weekend_tourney_tournament_id = 26;
  bool has_weekend_tourney_tournament_id() const;
  private:
  bool _internal_has_weekend_tourney_tournament_id() const;
  public:
  void clear_weekend_tourney_tournament_id();
  uint32_t weekend_tourney_tournament_id() const;
  void set_weekend_tourney_tournament_id(uint32_t value);
  private:
  uint32_t _internal_weekend_tourney_tournament_id() const;
  void _internal_set_weekend_tourney_tournament_id(uint32_t value);
  public:

  // optional uint32 weekend_tourney_division = 27;
  bool has_weekend_tourney_division() const;
  private:
  bool _internal_has_weekend_tourney_division() const;
  public:
  void clear_weekend_tourney_division();
  uint32_t weekend_tourney_division() const;
  void set_weekend_tourney_division(uint32_t value);
  private:
  uint32_t _internal_weekend_tourney_division() const;
  void _internal_set_weekend_tourney_division(uint32_t value);
  public:

  // optional uint32 weekend_tourney_skill_level = 28;
  bool has_weekend_tourney_skill_level() const;
  private:
  bool _internal_has_weekend_tourney_skill_level() const;
  public:
  void clear_weekend_tourney_skill_level();
  uint32_t weekend_tourney_skill_level() const;
  void set_weekend_tourney_skill_level(uint32_t value);
  private:
  uint32_t _internal_weekend_tourney_skill_level() const;
  void _internal_set_weekend_tourney_skill_level(uint32_t value);
  public:

  // optional uint32 weekend_tourney_bracket_round = 29;
  bool has_weekend_tourney_bracket_round() const;
  private:
  bool _internal_has_weekend_tourney_bracket_round() const;
  public:
  void clear_weekend_tourney_bracket_round();
  uint32_t weekend_tourney_bracket_round() const;
  void set_weekend_tourney_bracket_round(uint32_t value);
  private:
  uint32_t _internal_weekend_tourney_bracket_round() const;
  void _internal_set_weekend_tourney_bracket_round(uint32_t value);
  public:

  // optional uint32 team_id_radiant = 30;
  bool has_team_id_radiant() const;
  private:
  bool _internal_has_team_id_radiant() const;
  public:
  void clear_team_id_radiant();
  uint32_t team_id_radiant() const;
  void set_team_id_radiant(uint32_t value);
  private:
  uint32_t _internal_team_id_radiant() const;
  void _internal_set_team_id_radiant(uint32_t value);
  public:

  // optional uint32 team_id_dire = 31;
  bool has_team_id_dire() const;
  private:
  bool _internal_has_team_id_dire() const;
  public:
  void clear_team_id_dire();
  uint32_t team_id_dire() const;
  void set_team_id_dire(uint32_t value);
  private:
  uint32_t _internal_team_id_dire() const;
  void _internal_set_team_id_dire(uint32_t value);
  public:

  // optional uint32 custom_game_difficulty = 32;
  bool has_custom_game_difficulty() const;
  private:
  bool _internal_has_custom_game_difficulty() const;
  public:
  void clear_custom_game_difficulty();
  uint32_t custom_game_difficulty() const;
  void set_custom_game_difficulty(uint32_t value);
  private:
  uint32_t _internal_custom_game_difficulty() const;
  void _internal_set_custom_game_difficulty(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSourceTVGameSmall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSourceTVGameSmall_Player > players_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_radiant_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_dire_;
    uint32_t activate_time_;
    uint32_t deactivate_time_;
    uint64_t server_steam_id_;
    uint64_t lobby_id_;
    uint32_t league_id_;
    uint32_t lobby_type_;
    int32_t game_time_;
    uint32_t delay_;
    uint32_t spectators_;
    uint32_t game_mode_;
    uint64_t match_id_;
    uint32_t average_mmr_;
    uint32_t series_id_;
    uint32_t sort_score_;
    float last_update_time_;
    int32_t radiant_lead_;
    uint32_t radiant_score_;
    uint32_t dire_score_;
    uint32_t building_state_;
    uint64_t team_logo_radiant_;
    uint64_t team_logo_dire_;
    uint32_t weekend_tourney_tournament_id_;
    uint32_t weekend_tourney_division_;
    uint32_t weekend_tourney_skill_level_;
    uint32_t weekend_tourney_bracket_round_;
    uint32_t team_id_radiant_;
    uint32_t team_id_dire_;
    uint32_t custom_game_difficulty_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCFindTopSourceTVGames final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCFindTopSourceTVGames) */ {
 public:
  inline CMsgClientToGCFindTopSourceTVGames() : CMsgClientToGCFindTopSourceTVGames(nullptr) {}
  ~CMsgClientToGCFindTopSourceTVGames() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCFindTopSourceTVGames(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCFindTopSourceTVGames(const CMsgClientToGCFindTopSourceTVGames& from);
  CMsgClientToGCFindTopSourceTVGames(CMsgClientToGCFindTopSourceTVGames&& from) noexcept
    : CMsgClientToGCFindTopSourceTVGames() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCFindTopSourceTVGames& operator=(const CMsgClientToGCFindTopSourceTVGames& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCFindTopSourceTVGames& operator=(CMsgClientToGCFindTopSourceTVGames&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCFindTopSourceTVGames& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCFindTopSourceTVGames* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCFindTopSourceTVGames*>(
               &_CMsgClientToGCFindTopSourceTVGames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgClientToGCFindTopSourceTVGames& a, CMsgClientToGCFindTopSourceTVGames& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCFindTopSourceTVGames* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCFindTopSourceTVGames* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCFindTopSourceTVGames* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCFindTopSourceTVGames>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCFindTopSourceTVGames& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCFindTopSourceTVGames& from) {
    CMsgClientToGCFindTopSourceTVGames::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCFindTopSourceTVGames* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCFindTopSourceTVGames";
  }
  protected:
  explicit CMsgClientToGCFindTopSourceTVGames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLobbyIdsFieldNumber = 6,
    kSearchKeyFieldNumber = 1,
    kLeagueIdFieldNumber = 2,
    kHeroIdFieldNumber = 3,
    kStartGameFieldNumber = 4,
    kGameListIndexFieldNumber = 5,
  };
  // repeated uint64 lobby_ids = 6;
  int lobby_ids_size() const;
  private:
  int _internal_lobby_ids_size() const;
  public:
  void clear_lobby_ids();
  private:
  uint64_t _internal_lobby_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_lobby_ids() const;
  void _internal_add_lobby_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_lobby_ids();
  public:
  uint64_t lobby_ids(int index) const;
  void set_lobby_ids(int index, uint64_t value);
  void add_lobby_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      lobby_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_lobby_ids();

  // optional string search_key = 1;
  bool has_search_key() const;
  private:
  bool _internal_has_search_key() const;
  public:
  void clear_search_key();
  const std::string& search_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_search_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_search_key();
  PROTOBUF_NODISCARD std::string* release_search_key();
  void set_allocated_search_key(std::string* search_key);
  private:
  const std::string& _internal_search_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_search_key(const std::string& value);
  std::string* _internal_mutable_search_key();
  public:

  // optional uint32 league_id = 2;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 start_game = 4;
  bool has_start_game() const;
  private:
  bool _internal_has_start_game() const;
  public:
  void clear_start_game();
  uint32_t start_game() const;
  void set_start_game(uint32_t value);
  private:
  uint32_t _internal_start_game() const;
  void _internal_set_start_game(uint32_t value);
  public:

  // optional uint32 game_list_index = 5;
  bool has_game_list_index() const;
  private:
  bool _internal_has_game_list_index() const;
  public:
  void clear_game_list_index();
  uint32_t game_list_index() const;
  void set_game_list_index(uint32_t value);
  private:
  uint32_t _internal_game_list_index() const;
  void _internal_set_game_list_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCFindTopSourceTVGames)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > lobby_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_key_;
    uint32_t league_id_;
    uint32_t hero_id_;
    uint32_t start_game_;
    uint32_t game_list_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientFindTopSourceTVGamesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToClientFindTopSourceTVGamesResponse) */ {
 public:
  inline CMsgGCToClientFindTopSourceTVGamesResponse() : CMsgGCToClientFindTopSourceTVGamesResponse(nullptr) {}
  ~CMsgGCToClientFindTopSourceTVGamesResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToClientFindTopSourceTVGamesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToClientFindTopSourceTVGamesResponse(const CMsgGCToClientFindTopSourceTVGamesResponse& from);
  CMsgGCToClientFindTopSourceTVGamesResponse(CMsgGCToClientFindTopSourceTVGamesResponse&& from) noexcept
    : CMsgGCToClientFindTopSourceTVGamesResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientFindTopSourceTVGamesResponse& operator=(const CMsgGCToClientFindTopSourceTVGamesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToClientFindTopSourceTVGamesResponse& operator=(CMsgGCToClientFindTopSourceTVGamesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToClientFindTopSourceTVGamesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToClientFindTopSourceTVGamesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientFindTopSourceTVGamesResponse*>(
               &_CMsgGCToClientFindTopSourceTVGamesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgGCToClientFindTopSourceTVGamesResponse& a, CMsgGCToClientFindTopSourceTVGamesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToClientFindTopSourceTVGamesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToClientFindTopSourceTVGamesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToClientFindTopSourceTVGamesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToClientFindTopSourceTVGamesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToClientFindTopSourceTVGamesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToClientFindTopSourceTVGamesResponse& from) {
    CMsgGCToClientFindTopSourceTVGamesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientFindTopSourceTVGamesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToClientFindTopSourceTVGamesResponse";
  }
  protected:
  explicit CMsgGCToClientFindTopSourceTVGamesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameListFieldNumber = 7,
    kSearchKeyFieldNumber = 1,
    kBotGameFieldNumber = 9,
    kLeagueIdFieldNumber = 2,
    kHeroIdFieldNumber = 3,
    kStartGameFieldNumber = 4,
    kNumGamesFieldNumber = 5,
    kGameListIndexFieldNumber = 6,
    kSpecificGamesFieldNumber = 8,
  };
  // repeated .CSourceTVGameSmall game_list = 7;
  int game_list_size() const;
  private:
  int _internal_game_list_size() const;
  public:
  void clear_game_list();
  ::CSourceTVGameSmall* mutable_game_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSourceTVGameSmall >*
      mutable_game_list();
  private:
  const ::CSourceTVGameSmall& _internal_game_list(int index) const;
  ::CSourceTVGameSmall* _internal_add_game_list();
  public:
  const ::CSourceTVGameSmall& game_list(int index) const;
  ::CSourceTVGameSmall* add_game_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSourceTVGameSmall >&
      game_list() const;

  // optional string search_key = 1;
  bool has_search_key() const;
  private:
  bool _internal_has_search_key() const;
  public:
  void clear_search_key();
  const std::string& search_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_search_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_search_key();
  PROTOBUF_NODISCARD std::string* release_search_key();
  void set_allocated_search_key(std::string* search_key);
  private:
  const std::string& _internal_search_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_search_key(const std::string& value);
  std::string* _internal_mutable_search_key();
  public:

  // optional .CSourceTVGameSmall bot_game = 9;
  bool has_bot_game() const;
  private:
  bool _internal_has_bot_game() const;
  public:
  void clear_bot_game();
  const ::CSourceTVGameSmall& bot_game() const;
  PROTOBUF_NODISCARD ::CSourceTVGameSmall* release_bot_game();
  ::CSourceTVGameSmall* mutable_bot_game();
  void set_allocated_bot_game(::CSourceTVGameSmall* bot_game);
  private:
  const ::CSourceTVGameSmall& _internal_bot_game() const;
  ::CSourceTVGameSmall* _internal_mutable_bot_game();
  public:
  void unsafe_arena_set_allocated_bot_game(
      ::CSourceTVGameSmall* bot_game);
  ::CSourceTVGameSmall* unsafe_arena_release_bot_game();

  // optional uint32 league_id = 2;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 start_game = 4;
  bool has_start_game() const;
  private:
  bool _internal_has_start_game() const;
  public:
  void clear_start_game();
  uint32_t start_game() const;
  void set_start_game(uint32_t value);
  private:
  uint32_t _internal_start_game() const;
  void _internal_set_start_game(uint32_t value);
  public:

  // optional uint32 num_games = 5;
  bool has_num_games() const;
  private:
  bool _internal_has_num_games() const;
  public:
  void clear_num_games();
  uint32_t num_games() const;
  void set_num_games(uint32_t value);
  private:
  uint32_t _internal_num_games() const;
  void _internal_set_num_games(uint32_t value);
  public:

  // optional uint32 game_list_index = 6;
  bool has_game_list_index() const;
  private:
  bool _internal_has_game_list_index() const;
  public:
  void clear_game_list_index();
  uint32_t game_list_index() const;
  void set_game_list_index(uint32_t value);
  private:
  uint32_t _internal_game_list_index() const;
  void _internal_set_game_list_index(uint32_t value);
  public:

  // optional bool specific_games = 8;
  bool has_specific_games() const;
  private:
  bool _internal_has_specific_games() const;
  public:
  void clear_specific_games();
  bool specific_games() const;
  void set_specific_games(bool value);
  private:
  bool _internal_specific_games() const;
  void _internal_set_specific_games(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToClientFindTopSourceTVGamesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSourceTVGameSmall > game_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_key_;
    ::CSourceTVGameSmall* bot_game_;
    uint32_t league_id_;
    uint32_t hero_id_;
    uint32_t start_game_;
    uint32_t num_games_;
    uint32_t game_list_index_;
    bool specific_games_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientTopWeekendTourneyGames final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToClientTopWeekendTourneyGames) */ {
 public:
  inline CMsgGCToClientTopWeekendTourneyGames() : CMsgGCToClientTopWeekendTourneyGames(nullptr) {}
  ~CMsgGCToClientTopWeekendTourneyGames() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToClientTopWeekendTourneyGames(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToClientTopWeekendTourneyGames(const CMsgGCToClientTopWeekendTourneyGames& from);
  CMsgGCToClientTopWeekendTourneyGames(CMsgGCToClientTopWeekendTourneyGames&& from) noexcept
    : CMsgGCToClientTopWeekendTourneyGames() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientTopWeekendTourneyGames& operator=(const CMsgGCToClientTopWeekendTourneyGames& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToClientTopWeekendTourneyGames& operator=(CMsgGCToClientTopWeekendTourneyGames&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToClientTopWeekendTourneyGames& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToClientTopWeekendTourneyGames* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientTopWeekendTourneyGames*>(
               &_CMsgGCToClientTopWeekendTourneyGames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgGCToClientTopWeekendTourneyGames& a, CMsgGCToClientTopWeekendTourneyGames& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToClientTopWeekendTourneyGames* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToClientTopWeekendTourneyGames* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToClientTopWeekendTourneyGames* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToClientTopWeekendTourneyGames>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToClientTopWeekendTourneyGames& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToClientTopWeekendTourneyGames& from) {
    CMsgGCToClientTopWeekendTourneyGames::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientTopWeekendTourneyGames* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToClientTopWeekendTourneyGames";
  }
  protected:
  explicit CMsgGCToClientTopWeekendTourneyGames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiveGamesFieldNumber = 1,
  };
  // repeated .CSourceTVGameSmall live_games = 1;
  int live_games_size() const;
  private:
  int _internal_live_games_size() const;
  public:
  void clear_live_games();
  ::CSourceTVGameSmall* mutable_live_games(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSourceTVGameSmall >*
      mutable_live_games();
  private:
  const ::CSourceTVGameSmall& _internal_live_games(int index) const;
  ::CSourceTVGameSmall* _internal_add_live_games();
  public:
  const ::CSourceTVGameSmall& live_games(int index) const;
  ::CSourceTVGameSmall* add_live_games();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSourceTVGameSmall >&
      live_games() const;

  // @@protoc_insertion_point(class_scope:CMsgGCToClientTopWeekendTourneyGames)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSourceTVGameSmall > live_games_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCTopLeagueMatchesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgClientToGCTopLeagueMatchesRequest) */ {
 public:
  inline CMsgClientToGCTopLeagueMatchesRequest() : CMsgClientToGCTopLeagueMatchesRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCTopLeagueMatchesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCTopLeagueMatchesRequest(const CMsgClientToGCTopLeagueMatchesRequest& from);
  CMsgClientToGCTopLeagueMatchesRequest(CMsgClientToGCTopLeagueMatchesRequest&& from) noexcept
    : CMsgClientToGCTopLeagueMatchesRequest() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCTopLeagueMatchesRequest& operator=(const CMsgClientToGCTopLeagueMatchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCTopLeagueMatchesRequest& operator=(CMsgClientToGCTopLeagueMatchesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCTopLeagueMatchesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCTopLeagueMatchesRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCTopLeagueMatchesRequest*>(
               &_CMsgClientToGCTopLeagueMatchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgClientToGCTopLeagueMatchesRequest& a, CMsgClientToGCTopLeagueMatchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCTopLeagueMatchesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCTopLeagueMatchesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCTopLeagueMatchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCTopLeagueMatchesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgClientToGCTopLeagueMatchesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgClientToGCTopLeagueMatchesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCTopLeagueMatchesRequest";
  }
  protected:
  explicit CMsgClientToGCTopLeagueMatchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgClientToGCTopLeagueMatchesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCTopFriendMatchesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgClientToGCTopFriendMatchesRequest) */ {
 public:
  inline CMsgClientToGCTopFriendMatchesRequest() : CMsgClientToGCTopFriendMatchesRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCTopFriendMatchesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCTopFriendMatchesRequest(const CMsgClientToGCTopFriendMatchesRequest& from);
  CMsgClientToGCTopFriendMatchesRequest(CMsgClientToGCTopFriendMatchesRequest&& from) noexcept
    : CMsgClientToGCTopFriendMatchesRequest() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCTopFriendMatchesRequest& operator=(const CMsgClientToGCTopFriendMatchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCTopFriendMatchesRequest& operator=(CMsgClientToGCTopFriendMatchesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCTopFriendMatchesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCTopFriendMatchesRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCTopFriendMatchesRequest*>(
               &_CMsgClientToGCTopFriendMatchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgClientToGCTopFriendMatchesRequest& a, CMsgClientToGCTopFriendMatchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCTopFriendMatchesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCTopFriendMatchesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCTopFriendMatchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCTopFriendMatchesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgClientToGCTopFriendMatchesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgClientToGCTopFriendMatchesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCTopFriendMatchesRequest";
  }
  protected:
  explicit CMsgClientToGCTopFriendMatchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgClientToGCTopFriendMatchesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCMatchesMinimalRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCMatchesMinimalRequest) */ {
 public:
  inline CMsgClientToGCMatchesMinimalRequest() : CMsgClientToGCMatchesMinimalRequest(nullptr) {}
  ~CMsgClientToGCMatchesMinimalRequest() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCMatchesMinimalRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCMatchesMinimalRequest(const CMsgClientToGCMatchesMinimalRequest& from);
  CMsgClientToGCMatchesMinimalRequest(CMsgClientToGCMatchesMinimalRequest&& from) noexcept
    : CMsgClientToGCMatchesMinimalRequest() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCMatchesMinimalRequest& operator=(const CMsgClientToGCMatchesMinimalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCMatchesMinimalRequest& operator=(CMsgClientToGCMatchesMinimalRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCMatchesMinimalRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCMatchesMinimalRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCMatchesMinimalRequest*>(
               &_CMsgClientToGCMatchesMinimalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgClientToGCMatchesMinimalRequest& a, CMsgClientToGCMatchesMinimalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCMatchesMinimalRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCMatchesMinimalRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCMatchesMinimalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCMatchesMinimalRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCMatchesMinimalRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCMatchesMinimalRequest& from) {
    CMsgClientToGCMatchesMinimalRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCMatchesMinimalRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCMatchesMinimalRequest";
  }
  protected:
  explicit CMsgClientToGCMatchesMinimalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdsFieldNumber = 1,
  };
  // repeated uint64 match_ids = 1;
  int match_ids_size() const;
  private:
  int _internal_match_ids_size() const;
  public:
  void clear_match_ids();
  private:
  uint64_t _internal_match_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_match_ids() const;
  void _internal_add_match_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_match_ids();
  public:
  uint64_t match_ids(int index) const;
  void set_match_ids(int index, uint64_t value);
  void add_match_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      match_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_match_ids();

  // @@protoc_insertion_point(class_scope:CMsgClientToGCMatchesMinimalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > match_ids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCMatchesMinimalResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCMatchesMinimalResponse) */ {
 public:
  inline CMsgClientToGCMatchesMinimalResponse() : CMsgClientToGCMatchesMinimalResponse(nullptr) {}
  ~CMsgClientToGCMatchesMinimalResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCMatchesMinimalResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCMatchesMinimalResponse(const CMsgClientToGCMatchesMinimalResponse& from);
  CMsgClientToGCMatchesMinimalResponse(CMsgClientToGCMatchesMinimalResponse&& from) noexcept
    : CMsgClientToGCMatchesMinimalResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCMatchesMinimalResponse& operator=(const CMsgClientToGCMatchesMinimalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCMatchesMinimalResponse& operator=(CMsgClientToGCMatchesMinimalResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCMatchesMinimalResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCMatchesMinimalResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCMatchesMinimalResponse*>(
               &_CMsgClientToGCMatchesMinimalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgClientToGCMatchesMinimalResponse& a, CMsgClientToGCMatchesMinimalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCMatchesMinimalResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCMatchesMinimalResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCMatchesMinimalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCMatchesMinimalResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCMatchesMinimalResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCMatchesMinimalResponse& from) {
    CMsgClientToGCMatchesMinimalResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCMatchesMinimalResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCMatchesMinimalResponse";
  }
  protected:
  explicit CMsgClientToGCMatchesMinimalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchesFieldNumber = 1,
    kLastMatchFieldNumber = 2,
  };
  // repeated .CMsgDOTAMatchMinimal matches = 1;
  int matches_size() const;
  private:
  int _internal_matches_size() const;
  public:
  void clear_matches();
  ::CMsgDOTAMatchMinimal* mutable_matches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal >*
      mutable_matches();
  private:
  const ::CMsgDOTAMatchMinimal& _internal_matches(int index) const;
  ::CMsgDOTAMatchMinimal* _internal_add_matches();
  public:
  const ::CMsgDOTAMatchMinimal& matches(int index) const;
  ::CMsgDOTAMatchMinimal* add_matches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal >&
      matches() const;

  // optional bool last_match = 2;
  bool has_last_match() const;
  private:
  bool _internal_has_last_match() const;
  public:
  void clear_last_match();
  bool last_match() const;
  void set_last_match(bool value);
  private:
  bool _internal_last_match() const;
  void _internal_set_last_match(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCMatchesMinimalResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal > matches_;
    bool last_match_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientTopLeagueMatchesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToClientTopLeagueMatchesResponse) */ {
 public:
  inline CMsgGCToClientTopLeagueMatchesResponse() : CMsgGCToClientTopLeagueMatchesResponse(nullptr) {}
  ~CMsgGCToClientTopLeagueMatchesResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToClientTopLeagueMatchesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToClientTopLeagueMatchesResponse(const CMsgGCToClientTopLeagueMatchesResponse& from);
  CMsgGCToClientTopLeagueMatchesResponse(CMsgGCToClientTopLeagueMatchesResponse&& from) noexcept
    : CMsgGCToClientTopLeagueMatchesResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientTopLeagueMatchesResponse& operator=(const CMsgGCToClientTopLeagueMatchesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToClientTopLeagueMatchesResponse& operator=(CMsgGCToClientTopLeagueMatchesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToClientTopLeagueMatchesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToClientTopLeagueMatchesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientTopLeagueMatchesResponse*>(
               &_CMsgGCToClientTopLeagueMatchesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgGCToClientTopLeagueMatchesResponse& a, CMsgGCToClientTopLeagueMatchesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToClientTopLeagueMatchesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToClientTopLeagueMatchesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToClientTopLeagueMatchesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToClientTopLeagueMatchesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToClientTopLeagueMatchesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToClientTopLeagueMatchesResponse& from) {
    CMsgGCToClientTopLeagueMatchesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientTopLeagueMatchesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToClientTopLeagueMatchesResponse";
  }
  protected:
  explicit CMsgGCToClientTopLeagueMatchesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchesFieldNumber = 2,
  };
  // repeated .CMsgDOTAMatchMinimal matches = 2;
  int matches_size() const;
  private:
  int _internal_matches_size() const;
  public:
  void clear_matches();
  ::CMsgDOTAMatchMinimal* mutable_matches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal >*
      mutable_matches();
  private:
  const ::CMsgDOTAMatchMinimal& _internal_matches(int index) const;
  ::CMsgDOTAMatchMinimal* _internal_add_matches();
  public:
  const ::CMsgDOTAMatchMinimal& matches(int index) const;
  ::CMsgDOTAMatchMinimal* add_matches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal >&
      matches() const;

  // @@protoc_insertion_point(class_scope:CMsgGCToClientTopLeagueMatchesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal > matches_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientTopFriendMatchesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToClientTopFriendMatchesResponse) */ {
 public:
  inline CMsgGCToClientTopFriendMatchesResponse() : CMsgGCToClientTopFriendMatchesResponse(nullptr) {}
  ~CMsgGCToClientTopFriendMatchesResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToClientTopFriendMatchesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToClientTopFriendMatchesResponse(const CMsgGCToClientTopFriendMatchesResponse& from);
  CMsgGCToClientTopFriendMatchesResponse(CMsgGCToClientTopFriendMatchesResponse&& from) noexcept
    : CMsgGCToClientTopFriendMatchesResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientTopFriendMatchesResponse& operator=(const CMsgGCToClientTopFriendMatchesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToClientTopFriendMatchesResponse& operator=(CMsgGCToClientTopFriendMatchesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToClientTopFriendMatchesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToClientTopFriendMatchesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientTopFriendMatchesResponse*>(
               &_CMsgGCToClientTopFriendMatchesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgGCToClientTopFriendMatchesResponse& a, CMsgGCToClientTopFriendMatchesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToClientTopFriendMatchesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToClientTopFriendMatchesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToClientTopFriendMatchesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToClientTopFriendMatchesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToClientTopFriendMatchesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToClientTopFriendMatchesResponse& from) {
    CMsgGCToClientTopFriendMatchesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientTopFriendMatchesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToClientTopFriendMatchesResponse";
  }
  protected:
  explicit CMsgGCToClientTopFriendMatchesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchesFieldNumber = 1,
  };
  // repeated .CMsgDOTAMatchMinimal matches = 1;
  int matches_size() const;
  private:
  int _internal_matches_size() const;
  public:
  void clear_matches();
  ::CMsgDOTAMatchMinimal* mutable_matches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal >*
      mutable_matches();
  private:
  const ::CMsgDOTAMatchMinimal& _internal_matches(int index) const;
  ::CMsgDOTAMatchMinimal* _internal_add_matches();
  public:
  const ::CMsgDOTAMatchMinimal& matches(int index) const;
  ::CMsgDOTAMatchMinimal* add_matches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal >&
      matches() const;

  // @@protoc_insertion_point(class_scope:CMsgGCToClientTopFriendMatchesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal > matches_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgSpectateFriendGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSpectateFriendGame) */ {
 public:
  inline CMsgSpectateFriendGame() : CMsgSpectateFriendGame(nullptr) {}
  ~CMsgSpectateFriendGame() override;
  explicit PROTOBUF_CONSTEXPR CMsgSpectateFriendGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSpectateFriendGame(const CMsgSpectateFriendGame& from);
  CMsgSpectateFriendGame(CMsgSpectateFriendGame&& from) noexcept
    : CMsgSpectateFriendGame() {
    *this = ::std::move(from);
  }

  inline CMsgSpectateFriendGame& operator=(const CMsgSpectateFriendGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSpectateFriendGame& operator=(CMsgSpectateFriendGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSpectateFriendGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSpectateFriendGame* internal_default_instance() {
    return reinterpret_cast<const CMsgSpectateFriendGame*>(
               &_CMsgSpectateFriendGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgSpectateFriendGame& a, CMsgSpectateFriendGame& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSpectateFriendGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSpectateFriendGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSpectateFriendGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSpectateFriendGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSpectateFriendGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSpectateFriendGame& from) {
    CMsgSpectateFriendGame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSpectateFriendGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSpectateFriendGame";
  }
  protected:
  explicit CMsgSpectateFriendGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdFieldNumber = 1,
    kLiveFieldNumber = 2,
  };
  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // optional bool live = 2;
  bool has_live() const;
  private:
  bool _internal_has_live() const;
  public:
  void clear_live();
  bool live() const;
  void set_live(bool value);
  private:
  bool _internal_live() const;
  void _internal_set_live(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSpectateFriendGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t steam_id_;
    bool live_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgSpectateFriendGameResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSpectateFriendGameResponse) */ {
 public:
  inline CMsgSpectateFriendGameResponse() : CMsgSpectateFriendGameResponse(nullptr) {}
  ~CMsgSpectateFriendGameResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgSpectateFriendGameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSpectateFriendGameResponse(const CMsgSpectateFriendGameResponse& from);
  CMsgSpectateFriendGameResponse(CMsgSpectateFriendGameResponse&& from) noexcept
    : CMsgSpectateFriendGameResponse() {
    *this = ::std::move(from);
  }

  inline CMsgSpectateFriendGameResponse& operator=(const CMsgSpectateFriendGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSpectateFriendGameResponse& operator=(CMsgSpectateFriendGameResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSpectateFriendGameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSpectateFriendGameResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgSpectateFriendGameResponse*>(
               &_CMsgSpectateFriendGameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgSpectateFriendGameResponse& a, CMsgSpectateFriendGameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSpectateFriendGameResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSpectateFriendGameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSpectateFriendGameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSpectateFriendGameResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSpectateFriendGameResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSpectateFriendGameResponse& from) {
    CMsgSpectateFriendGameResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSpectateFriendGameResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSpectateFriendGameResponse";
  }
  protected:
  explicit CMsgSpectateFriendGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSpectateFriendGameResponse_EWatchLiveResult EWatchLiveResult;
  static constexpr EWatchLiveResult SUCCESS =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_SUCCESS;
  static constexpr EWatchLiveResult ERROR_GENERIC =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_GENERIC;
  static constexpr EWatchLiveResult ERROR_NO_PLUS =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_NO_PLUS;
  static constexpr EWatchLiveResult ERROR_NOT_FRIENDS =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_NOT_FRIENDS;
  static constexpr EWatchLiveResult ERROR_LOBBY_NOT_FOUND =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_LOBBY_NOT_FOUND;
  static constexpr EWatchLiveResult ERROR_SPECTATOR_IN_A_LOBBY =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_SPECTATOR_IN_A_LOBBY;
  static constexpr EWatchLiveResult ERROR_LOBBY_IS_LAN =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_LOBBY_IS_LAN;
  static constexpr EWatchLiveResult ERROR_WRONG_LOBBY_TYPE =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_WRONG_LOBBY_TYPE;
  static constexpr EWatchLiveResult ERROR_WRONG_LOBBY_STATE =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_WRONG_LOBBY_STATE;
  static constexpr EWatchLiveResult ERROR_PLAYER_NOT_PLAYER =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_PLAYER_NOT_PLAYER;
  static constexpr EWatchLiveResult ERROR_TOO_MANY_SPECTATORS =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_TOO_MANY_SPECTATORS;
  static constexpr EWatchLiveResult ERROR_SPECTATOR_SWITCHED_TEAMS =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_SPECTATOR_SWITCHED_TEAMS;
  static constexpr EWatchLiveResult ERROR_FRIENDS_ON_BOTH_SIDES =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_FRIENDS_ON_BOTH_SIDES;
  static constexpr EWatchLiveResult ERROR_SPECTATOR_IN_THIS_LOBBY =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_SPECTATOR_IN_THIS_LOBBY;
  static constexpr EWatchLiveResult ERROR_LOBBY_IS_LEAGUE =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_LOBBY_IS_LEAGUE;
  static inline bool EWatchLiveResult_IsValid(int value) {
    return CMsgSpectateFriendGameResponse_EWatchLiveResult_IsValid(value);
  }
  static constexpr EWatchLiveResult EWatchLiveResult_MIN =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_EWatchLiveResult_MIN;
  static constexpr EWatchLiveResult EWatchLiveResult_MAX =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_EWatchLiveResult_MAX;
  static constexpr int EWatchLiveResult_ARRAYSIZE =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_EWatchLiveResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EWatchLiveResult_descriptor() {
    return CMsgSpectateFriendGameResponse_EWatchLiveResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EWatchLiveResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EWatchLiveResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EWatchLiveResult_Name.");
    return CMsgSpectateFriendGameResponse_EWatchLiveResult_Name(enum_t_value);
  }
  static inline bool EWatchLiveResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EWatchLiveResult* value) {
    return CMsgSpectateFriendGameResponse_EWatchLiveResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kServerSteamidFieldNumber = 4,
    kWatchLiveResultFieldNumber = 5,
  };
  // optional fixed64 server_steamid = 4;
  bool has_server_steamid() const;
  private:
  bool _internal_has_server_steamid() const;
  public:
  void clear_server_steamid();
  uint64_t server_steamid() const;
  void set_server_steamid(uint64_t value);
  private:
  uint64_t _internal_server_steamid() const;
  void _internal_set_server_steamid(uint64_t value);
  public:

  // optional .CMsgSpectateFriendGameResponse.EWatchLiveResult watch_live_result = 5 [default = SUCCESS];
  bool has_watch_live_result() const;
  private:
  bool _internal_has_watch_live_result() const;
  public:
  void clear_watch_live_result();
  ::CMsgSpectateFriendGameResponse_EWatchLiveResult watch_live_result() const;
  void set_watch_live_result(::CMsgSpectateFriendGameResponse_EWatchLiveResult value);
  private:
  ::CMsgSpectateFriendGameResponse_EWatchLiveResult _internal_watch_live_result() const;
  void _internal_set_watch_live_result(::CMsgSpectateFriendGameResponse_EWatchLiveResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSpectateFriendGameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t server_steamid_;
    int watch_live_result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CDOTAReplayDownloadInfo_Highlight final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAReplayDownloadInfo.Highlight) */ {
 public:
  inline CDOTAReplayDownloadInfo_Highlight() : CDOTAReplayDownloadInfo_Highlight(nullptr) {}
  ~CDOTAReplayDownloadInfo_Highlight() override;
  explicit PROTOBUF_CONSTEXPR CDOTAReplayDownloadInfo_Highlight(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAReplayDownloadInfo_Highlight(const CDOTAReplayDownloadInfo_Highlight& from);
  CDOTAReplayDownloadInfo_Highlight(CDOTAReplayDownloadInfo_Highlight&& from) noexcept
    : CDOTAReplayDownloadInfo_Highlight() {
    *this = ::std::move(from);
  }

  inline CDOTAReplayDownloadInfo_Highlight& operator=(const CDOTAReplayDownloadInfo_Highlight& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAReplayDownloadInfo_Highlight& operator=(CDOTAReplayDownloadInfo_Highlight&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAReplayDownloadInfo_Highlight& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAReplayDownloadInfo_Highlight* internal_default_instance() {
    return reinterpret_cast<const CDOTAReplayDownloadInfo_Highlight*>(
               &_CDOTAReplayDownloadInfo_Highlight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CDOTAReplayDownloadInfo_Highlight& a, CDOTAReplayDownloadInfo_Highlight& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAReplayDownloadInfo_Highlight* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAReplayDownloadInfo_Highlight* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAReplayDownloadInfo_Highlight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAReplayDownloadInfo_Highlight>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAReplayDownloadInfo_Highlight& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAReplayDownloadInfo_Highlight& from) {
    CDOTAReplayDownloadInfo_Highlight::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAReplayDownloadInfo_Highlight* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAReplayDownloadInfo.Highlight";
  }
  protected:
  explicit CDOTAReplayDownloadInfo_Highlight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // optional string description = 2;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional uint32 timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAReplayDownloadInfo.Highlight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    uint32_t timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CDOTAReplayDownloadInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAReplayDownloadInfo) */ {
 public:
  inline CDOTAReplayDownloadInfo() : CDOTAReplayDownloadInfo(nullptr) {}
  ~CDOTAReplayDownloadInfo() override;
  explicit PROTOBUF_CONSTEXPR CDOTAReplayDownloadInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAReplayDownloadInfo(const CDOTAReplayDownloadInfo& from);
  CDOTAReplayDownloadInfo(CDOTAReplayDownloadInfo&& from) noexcept
    : CDOTAReplayDownloadInfo() {
    *this = ::std::move(from);
  }

  inline CDOTAReplayDownloadInfo& operator=(const CDOTAReplayDownloadInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAReplayDownloadInfo& operator=(CDOTAReplayDownloadInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAReplayDownloadInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAReplayDownloadInfo* internal_default_instance() {
    return reinterpret_cast<const CDOTAReplayDownloadInfo*>(
               &_CDOTAReplayDownloadInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CDOTAReplayDownloadInfo& a, CDOTAReplayDownloadInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAReplayDownloadInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAReplayDownloadInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAReplayDownloadInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAReplayDownloadInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAReplayDownloadInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAReplayDownloadInfo& from) {
    CDOTAReplayDownloadInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAReplayDownloadInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAReplayDownloadInfo";
  }
  protected:
  explicit CDOTAReplayDownloadInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDOTAReplayDownloadInfo_Highlight Highlight;

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 5,
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kMatchFieldNumber = 1,
    kSizeFieldNumber = 4,
    kExistsOnDiskFieldNumber = 6,
  };
  // repeated string tags = 5;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // optional string title = 2;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string description = 3;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional .CMsgDOTAMatchMinimal match = 1;
  bool has_match() const;
  private:
  bool _internal_has_match() const;
  public:
  void clear_match();
  const ::CMsgDOTAMatchMinimal& match() const;
  PROTOBUF_NODISCARD ::CMsgDOTAMatchMinimal* release_match();
  ::CMsgDOTAMatchMinimal* mutable_match();
  void set_allocated_match(::CMsgDOTAMatchMinimal* match);
  private:
  const ::CMsgDOTAMatchMinimal& _internal_match() const;
  ::CMsgDOTAMatchMinimal* _internal_mutable_match();
  public:
  void unsafe_arena_set_allocated_match(
      ::CMsgDOTAMatchMinimal* match);
  ::CMsgDOTAMatchMinimal* unsafe_arena_release_match();

  // optional uint32 size = 4;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // optional bool exists_on_disk = 6;
  bool has_exists_on_disk() const;
  private:
  bool _internal_has_exists_on_disk() const;
  public:
  void clear_exists_on_disk();
  bool exists_on_disk() const;
  void set_exists_on_disk(bool value);
  private:
  bool _internal_exists_on_disk() const;
  void _internal_set_exists_on_disk(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAReplayDownloadInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::CMsgDOTAMatchMinimal* match_;
    uint32_t size_;
    bool exists_on_disk_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgWatchGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgWatchGame) */ {
 public:
  inline CMsgWatchGame() : CMsgWatchGame(nullptr) {}
  ~CMsgWatchGame() override;
  explicit PROTOBUF_CONSTEXPR CMsgWatchGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgWatchGame(const CMsgWatchGame& from);
  CMsgWatchGame(CMsgWatchGame&& from) noexcept
    : CMsgWatchGame() {
    *this = ::std::move(from);
  }

  inline CMsgWatchGame& operator=(const CMsgWatchGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgWatchGame& operator=(CMsgWatchGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgWatchGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgWatchGame* internal_default_instance() {
    return reinterpret_cast<const CMsgWatchGame*>(
               &_CMsgWatchGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMsgWatchGame& a, CMsgWatchGame& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgWatchGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgWatchGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgWatchGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgWatchGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgWatchGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgWatchGame& from) {
    CMsgWatchGame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgWatchGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgWatchGame";
  }
  protected:
  explicit CMsgWatchGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionsFieldNumber = 5,
    kServerSteamidFieldNumber = 1,
    kWatchServerSteamidFieldNumber = 3,
    kLobbyIdFieldNumber = 4,
    kClientVersionFieldNumber = 2,
  };
  // repeated uint32 regions = 5;
  int regions_size() const;
  private:
  int _internal_regions_size() const;
  public:
  void clear_regions();
  private:
  uint32_t _internal_regions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_regions() const;
  void _internal_add_regions(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_regions();
  public:
  uint32_t regions(int index) const;
  void set_regions(int index, uint32_t value);
  void add_regions(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      regions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_regions();

  // optional fixed64 server_steamid = 1;
  bool has_server_steamid() const;
  private:
  bool _internal_has_server_steamid() const;
  public:
  void clear_server_steamid();
  uint64_t server_steamid() const;
  void set_server_steamid(uint64_t value);
  private:
  uint64_t _internal_server_steamid() const;
  void _internal_set_server_steamid(uint64_t value);
  public:

  // optional fixed64 watch_server_steamid = 3;
  bool has_watch_server_steamid() const;
  private:
  bool _internal_has_watch_server_steamid() const;
  public:
  void clear_watch_server_steamid();
  uint64_t watch_server_steamid() const;
  void set_watch_server_steamid(uint64_t value);
  private:
  uint64_t _internal_watch_server_steamid() const;
  void _internal_set_watch_server_steamid(uint64_t value);
  public:

  // optional uint64 lobby_id = 4;
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  uint64_t lobby_id() const;
  void set_lobby_id(uint64_t value);
  private:
  uint64_t _internal_lobby_id() const;
  void _internal_set_lobby_id(uint64_t value);
  public:

  // optional uint32 client_version = 2;
  bool has_client_version() const;
  private:
  bool _internal_has_client_version() const;
  public:
  void clear_client_version();
  uint32_t client_version() const;
  void set_client_version(uint32_t value);
  private:
  uint32_t _internal_client_version() const;
  void _internal_set_client_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgWatchGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > regions_;
    uint64_t server_steamid_;
    uint64_t watch_server_steamid_;
    uint64_t lobby_id_;
    uint32_t client_version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgCancelWatchGame final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgCancelWatchGame) */ {
 public:
  inline CMsgCancelWatchGame() : CMsgCancelWatchGame(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CMsgCancelWatchGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgCancelWatchGame(const CMsgCancelWatchGame& from);
  CMsgCancelWatchGame(CMsgCancelWatchGame&& from) noexcept
    : CMsgCancelWatchGame() {
    *this = ::std::move(from);
  }

  inline CMsgCancelWatchGame& operator=(const CMsgCancelWatchGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgCancelWatchGame& operator=(CMsgCancelWatchGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgCancelWatchGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgCancelWatchGame* internal_default_instance() {
    return reinterpret_cast<const CMsgCancelWatchGame*>(
               &_CMsgCancelWatchGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMsgCancelWatchGame& a, CMsgCancelWatchGame& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgCancelWatchGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgCancelWatchGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgCancelWatchGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgCancelWatchGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgCancelWatchGame& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgCancelWatchGame& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgCancelWatchGame";
  }
  protected:
  explicit CMsgCancelWatchGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgCancelWatchGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgWatchGameResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgWatchGameResponse) */ {
 public:
  inline CMsgWatchGameResponse() : CMsgWatchGameResponse(nullptr) {}
  ~CMsgWatchGameResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgWatchGameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgWatchGameResponse(const CMsgWatchGameResponse& from);
  CMsgWatchGameResponse(CMsgWatchGameResponse&& from) noexcept
    : CMsgWatchGameResponse() {
    *this = ::std::move(from);
  }

  inline CMsgWatchGameResponse& operator=(const CMsgWatchGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgWatchGameResponse& operator=(CMsgWatchGameResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgWatchGameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgWatchGameResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgWatchGameResponse*>(
               &_CMsgWatchGameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgWatchGameResponse& a, CMsgWatchGameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgWatchGameResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgWatchGameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgWatchGameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgWatchGameResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgWatchGameResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgWatchGameResponse& from) {
    CMsgWatchGameResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgWatchGameResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgWatchGameResponse";
  }
  protected:
  explicit CMsgWatchGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgWatchGameResponse_WatchGameResult WatchGameResult;
  static constexpr WatchGameResult PENDING =
    CMsgWatchGameResponse_WatchGameResult_PENDING;
  static constexpr WatchGameResult READY =
    CMsgWatchGameResponse_WatchGameResult_READY;
  static constexpr WatchGameResult GAMESERVERNOTFOUND =
    CMsgWatchGameResponse_WatchGameResult_GAMESERVERNOTFOUND;
  static constexpr WatchGameResult UNAVAILABLE =
    CMsgWatchGameResponse_WatchGameResult_UNAVAILABLE;
  static constexpr WatchGameResult CANCELLED =
    CMsgWatchGameResponse_WatchGameResult_CANCELLED;
  static constexpr WatchGameResult INCOMPATIBLEVERSION =
    CMsgWatchGameResponse_WatchGameResult_INCOMPATIBLEVERSION;
  static constexpr WatchGameResult MISSINGLEAGUESUBSCRIPTION =
    CMsgWatchGameResponse_WatchGameResult_MISSINGLEAGUESUBSCRIPTION;
  static constexpr WatchGameResult LOBBYNOTFOUND =
    CMsgWatchGameResponse_WatchGameResult_LOBBYNOTFOUND;
  static inline bool WatchGameResult_IsValid(int value) {
    return CMsgWatchGameResponse_WatchGameResult_IsValid(value);
  }
  static constexpr WatchGameResult WatchGameResult_MIN =
    CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MIN;
  static constexpr WatchGameResult WatchGameResult_MAX =
    CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MAX;
  static constexpr int WatchGameResult_ARRAYSIZE =
    CMsgWatchGameResponse_WatchGameResult_WatchGameResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WatchGameResult_descriptor() {
    return CMsgWatchGameResponse_WatchGameResult_descriptor();
  }
  template<typename T>
  static inline const std::string& WatchGameResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WatchGameResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WatchGameResult_Name.");
    return CMsgWatchGameResponse_WatchGameResult_Name(enum_t_value);
  }
  static inline bool WatchGameResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WatchGameResult* value) {
    return CMsgWatchGameResponse_WatchGameResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWatchGameResultFieldNumber = 1,
    kSourceTvPublicAddrFieldNumber = 2,
    kSourceTvPrivateAddrFieldNumber = 3,
    kSourceTvPortFieldNumber = 4,
    kGameServerSteamidFieldNumber = 5,
    kWatchServerSteamidFieldNumber = 6,
    kWatchTvUniqueSecretCodeFieldNumber = 7,
  };
  // optional .CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
  bool has_watch_game_result() const;
  private:
  bool _internal_has_watch_game_result() const;
  public:
  void clear_watch_game_result();
  ::CMsgWatchGameResponse_WatchGameResult watch_game_result() const;
  void set_watch_game_result(::CMsgWatchGameResponse_WatchGameResult value);
  private:
  ::CMsgWatchGameResponse_WatchGameResult _internal_watch_game_result() const;
  void _internal_set_watch_game_result(::CMsgWatchGameResponse_WatchGameResult value);
  public:

  // optional uint32 source_tv_public_addr = 2;
  bool has_source_tv_public_addr() const;
  private:
  bool _internal_has_source_tv_public_addr() const;
  public:
  void clear_source_tv_public_addr();
  uint32_t source_tv_public_addr() const;
  void set_source_tv_public_addr(uint32_t value);
  private:
  uint32_t _internal_source_tv_public_addr() const;
  void _internal_set_source_tv_public_addr(uint32_t value);
  public:

  // optional uint32 source_tv_private_addr = 3;
  bool has_source_tv_private_addr() const;
  private:
  bool _internal_has_source_tv_private_addr() const;
  public:
  void clear_source_tv_private_addr();
  uint32_t source_tv_private_addr() const;
  void set_source_tv_private_addr(uint32_t value);
  private:
  uint32_t _internal_source_tv_private_addr() const;
  void _internal_set_source_tv_private_addr(uint32_t value);
  public:

  // optional uint32 source_tv_port = 4;
  bool has_source_tv_port() const;
  private:
  bool _internal_has_source_tv_port() const;
  public:
  void clear_source_tv_port();
  uint32_t source_tv_port() const;
  void set_source_tv_port(uint32_t value);
  private:
  uint32_t _internal_source_tv_port() const;
  void _internal_set_source_tv_port(uint32_t value);
  public:

  // optional fixed64 game_server_steamid = 5;
  bool has_game_server_steamid() const;
  private:
  bool _internal_has_game_server_steamid() const;
  public:
  void clear_game_server_steamid();
  uint64_t game_server_steamid() const;
  void set_game_server_steamid(uint64_t value);
  private:
  uint64_t _internal_game_server_steamid() const;
  void _internal_set_game_server_steamid(uint64_t value);
  public:

  // optional fixed64 watch_server_steamid = 6;
  bool has_watch_server_steamid() const;
  private:
  bool _internal_has_watch_server_steamid() const;
  public:
  void clear_watch_server_steamid();
  uint64_t watch_server_steamid() const;
  void set_watch_server_steamid(uint64_t value);
  private:
  uint64_t _internal_watch_server_steamid() const;
  void _internal_set_watch_server_steamid(uint64_t value);
  public:

  // optional fixed64 watch_tv_unique_secret_code = 7;
  bool has_watch_tv_unique_secret_code() const;
  private:
  bool _internal_has_watch_tv_unique_secret_code() const;
  public:
  void clear_watch_tv_unique_secret_code();
  uint64_t watch_tv_unique_secret_code() const;
  void set_watch_tv_unique_secret_code(uint64_t value);
  private:
  uint64_t _internal_watch_tv_unique_secret_code() const;
  void _internal_set_watch_tv_unique_secret_code(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgWatchGameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int watch_game_result_;
    uint32_t source_tv_public_addr_;
    uint32_t source_tv_private_addr_;
    uint32_t source_tv_port_;
    uint64_t game_server_steamid_;
    uint64_t watch_server_steamid_;
    uint64_t watch_tv_unique_secret_code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyLeaderWatchGamePrompt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyLeaderWatchGamePrompt) */ {
 public:
  inline CMsgPartyLeaderWatchGamePrompt() : CMsgPartyLeaderWatchGamePrompt(nullptr) {}
  ~CMsgPartyLeaderWatchGamePrompt() override;
  explicit PROTOBUF_CONSTEXPR CMsgPartyLeaderWatchGamePrompt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyLeaderWatchGamePrompt(const CMsgPartyLeaderWatchGamePrompt& from);
  CMsgPartyLeaderWatchGamePrompt(CMsgPartyLeaderWatchGamePrompt&& from) noexcept
    : CMsgPartyLeaderWatchGamePrompt() {
    *this = ::std::move(from);
  }

  inline CMsgPartyLeaderWatchGamePrompt& operator=(const CMsgPartyLeaderWatchGamePrompt& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyLeaderWatchGamePrompt& operator=(CMsgPartyLeaderWatchGamePrompt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPartyLeaderWatchGamePrompt& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyLeaderWatchGamePrompt* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyLeaderWatchGamePrompt*>(
               &_CMsgPartyLeaderWatchGamePrompt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgPartyLeaderWatchGamePrompt& a, CMsgPartyLeaderWatchGamePrompt& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyLeaderWatchGamePrompt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyLeaderWatchGamePrompt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPartyLeaderWatchGamePrompt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPartyLeaderWatchGamePrompt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPartyLeaderWatchGamePrompt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgPartyLeaderWatchGamePrompt& from) {
    CMsgPartyLeaderWatchGamePrompt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyLeaderWatchGamePrompt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyLeaderWatchGamePrompt";
  }
  protected:
  explicit CMsgPartyLeaderWatchGamePrompt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameServerSteamidFieldNumber = 5,
  };
  // optional fixed64 game_server_steamid = 5;
  bool has_game_server_steamid() const;
  private:
  bool _internal_has_game_server_steamid() const;
  public:
  void clear_game_server_steamid();
  uint64_t game_server_steamid() const;
  void set_game_server_steamid(uint64_t value);
  private:
  uint64_t _internal_game_server_steamid() const;
  void _internal_set_game_server_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPartyLeaderWatchGamePrompt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t game_server_steamid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CDOTABroadcasterInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTABroadcasterInfo) */ {
 public:
  inline CDOTABroadcasterInfo() : CDOTABroadcasterInfo(nullptr) {}
  ~CDOTABroadcasterInfo() override;
  explicit PROTOBUF_CONSTEXPR CDOTABroadcasterInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTABroadcasterInfo(const CDOTABroadcasterInfo& from);
  CDOTABroadcasterInfo(CDOTABroadcasterInfo&& from) noexcept
    : CDOTABroadcasterInfo() {
    *this = ::std::move(from);
  }

  inline CDOTABroadcasterInfo& operator=(const CDOTABroadcasterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTABroadcasterInfo& operator=(CDOTABroadcasterInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTABroadcasterInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTABroadcasterInfo* internal_default_instance() {
    return reinterpret_cast<const CDOTABroadcasterInfo*>(
               &_CDOTABroadcasterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CDOTABroadcasterInfo& a, CDOTABroadcasterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTABroadcasterInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTABroadcasterInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTABroadcasterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTABroadcasterInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTABroadcasterInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTABroadcasterInfo& from) {
    CDOTABroadcasterInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTABroadcasterInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTABroadcasterInfo";
  }
  protected:
  explicit CDOTABroadcasterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamNameRadiantFieldNumber = 4,
    kTeamNameDireFieldNumber = 5,
    kNodeNameFieldNumber = 12,
    kServerSteamIdFieldNumber = 2,
    kAccountIdFieldNumber = 1,
    kLiveFieldNumber = 3,
    kAllowLiveVideoFieldNumber = 10,
    kSeriesGameFieldNumber = 7,
    kUpcomingBroadcastTimestampFieldNumber = 9,
    kNodeTypeFieldNumber = 11,
  };
  // optional string team_name_radiant = 4;
  bool has_team_name_radiant() const;
  private:
  bool _internal_has_team_name_radiant() const;
  public:
  void clear_team_name_radiant();
  const std::string& team_name_radiant() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_name_radiant(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_name_radiant();
  PROTOBUF_NODISCARD std::string* release_team_name_radiant();
  void set_allocated_team_name_radiant(std::string* team_name_radiant);
  private:
  const std::string& _internal_team_name_radiant() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_name_radiant(const std::string& value);
  std::string* _internal_mutable_team_name_radiant();
  public:

  // optional string team_name_dire = 5;
  bool has_team_name_dire() const;
  private:
  bool _internal_has_team_name_dire() const;
  public:
  void clear_team_name_dire();
  const std::string& team_name_dire() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_name_dire(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_name_dire();
  PROTOBUF_NODISCARD std::string* release_team_name_dire();
  void set_allocated_team_name_dire(std::string* team_name_dire);
  private:
  const std::string& _internal_team_name_dire() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_name_dire(const std::string& value);
  std::string* _internal_mutable_team_name_dire();
  public:

  // optional string node_name = 12;
  bool has_node_name() const;
  private:
  bool _internal_has_node_name() const;
  public:
  void clear_node_name();
  const std::string& node_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_name();
  PROTOBUF_NODISCARD std::string* release_node_name();
  void set_allocated_node_name(std::string* node_name);
  private:
  const std::string& _internal_node_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_name(const std::string& value);
  std::string* _internal_mutable_node_name();
  public:

  // optional fixed64 server_steam_id = 2;
  bool has_server_steam_id() const;
  private:
  bool _internal_has_server_steam_id() const;
  public:
  void clear_server_steam_id();
  uint64_t server_steam_id() const;
  void set_server_steam_id(uint64_t value);
  private:
  uint64_t _internal_server_steam_id() const;
  void _internal_set_server_steam_id(uint64_t value);
  public:

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional bool live = 3;
  bool has_live() const;
  private:
  bool _internal_has_live() const;
  public:
  void clear_live();
  bool live() const;
  void set_live(bool value);
  private:
  bool _internal_live() const;
  void _internal_set_live(bool value);
  public:

  // optional bool allow_live_video = 10;
  bool has_allow_live_video() const;
  private:
  bool _internal_has_allow_live_video() const;
  public:
  void clear_allow_live_video();
  bool allow_live_video() const;
  void set_allow_live_video(bool value);
  private:
  bool _internal_allow_live_video() const;
  void _internal_set_allow_live_video(bool value);
  public:

  // optional uint32 series_game = 7;
  bool has_series_game() const;
  private:
  bool _internal_has_series_game() const;
  public:
  void clear_series_game();
  uint32_t series_game() const;
  void set_series_game(uint32_t value);
  private:
  uint32_t _internal_series_game() const;
  void _internal_set_series_game(uint32_t value);
  public:

  // optional uint32 upcoming_broadcast_timestamp = 9;
  bool has_upcoming_broadcast_timestamp() const;
  private:
  bool _internal_has_upcoming_broadcast_timestamp() const;
  public:
  void clear_upcoming_broadcast_timestamp();
  uint32_t upcoming_broadcast_timestamp() const;
  void set_upcoming_broadcast_timestamp(uint32_t value);
  private:
  uint32_t _internal_upcoming_broadcast_timestamp() const;
  void _internal_set_upcoming_broadcast_timestamp(uint32_t value);
  public:

  // optional uint32 node_type = 11;
  bool has_node_type() const;
  private:
  bool _internal_has_node_type() const;
  public:
  void clear_node_type();
  uint32_t node_type() const;
  void set_node_type(uint32_t value);
  private:
  uint32_t _internal_node_type() const;
  void _internal_set_node_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTABroadcasterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_radiant_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_dire_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_name_;
    uint64_t server_steam_id_;
    uint32_t account_id_;
    bool live_;
    bool allow_live_video_;
    uint32_t series_game_;
    uint32_t upcoming_broadcast_timestamp_;
    uint32_t node_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTASeries_TeamInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTASeries.TeamInfo) */ {
 public:
  inline CMsgDOTASeries_TeamInfo() : CMsgDOTASeries_TeamInfo(nullptr) {}
  ~CMsgDOTASeries_TeamInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTASeries_TeamInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTASeries_TeamInfo(const CMsgDOTASeries_TeamInfo& from);
  CMsgDOTASeries_TeamInfo(CMsgDOTASeries_TeamInfo&& from) noexcept
    : CMsgDOTASeries_TeamInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASeries_TeamInfo& operator=(const CMsgDOTASeries_TeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTASeries_TeamInfo& operator=(CMsgDOTASeries_TeamInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTASeries_TeamInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTASeries_TeamInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASeries_TeamInfo*>(
               &_CMsgDOTASeries_TeamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMsgDOTASeries_TeamInfo& a, CMsgDOTASeries_TeamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTASeries_TeamInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTASeries_TeamInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTASeries_TeamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTASeries_TeamInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTASeries_TeamInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTASeries_TeamInfo& from) {
    CMsgDOTASeries_TeamInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTASeries_TeamInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTASeries.TeamInfo";
  }
  protected:
  explicit CMsgDOTASeries_TeamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamNameFieldNumber = 2,
    kTeamLogoUrlFieldNumber = 3,
    kTeamIdFieldNumber = 1,
    kWagerCountFieldNumber = 4,
  };
  // optional string team_name = 2;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_name();
  PROTOBUF_NODISCARD std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional string team_logo_url = 3;
  bool has_team_logo_url() const;
  private:
  bool _internal_has_team_logo_url() const;
  public:
  void clear_team_logo_url();
  const std::string& team_logo_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_logo_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_logo_url();
  PROTOBUF_NODISCARD std::string* release_team_logo_url();
  void set_allocated_team_logo_url(std::string* team_logo_url);
  private:
  const std::string& _internal_team_logo_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_logo_url(const std::string& value);
  std::string* _internal_mutable_team_logo_url();
  public:

  // optional uint32 team_id = 1;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional uint32 wager_count = 4;
  bool has_wager_count() const;
  private:
  bool _internal_has_wager_count() const;
  public:
  void clear_wager_count();
  uint32_t wager_count() const;
  void set_wager_count(uint32_t value);
  private:
  uint32_t _internal_wager_count() const;
  void _internal_set_wager_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTASeries.TeamInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_logo_url_;
    uint32_t team_id_;
    uint32_t wager_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTASeries_LiveGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTASeries.LiveGame) */ {
 public:
  inline CMsgDOTASeries_LiveGame() : CMsgDOTASeries_LiveGame(nullptr) {}
  ~CMsgDOTASeries_LiveGame() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTASeries_LiveGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTASeries_LiveGame(const CMsgDOTASeries_LiveGame& from);
  CMsgDOTASeries_LiveGame(CMsgDOTASeries_LiveGame&& from) noexcept
    : CMsgDOTASeries_LiveGame() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASeries_LiveGame& operator=(const CMsgDOTASeries_LiveGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTASeries_LiveGame& operator=(CMsgDOTASeries_LiveGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTASeries_LiveGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTASeries_LiveGame* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASeries_LiveGame*>(
               &_CMsgDOTASeries_LiveGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMsgDOTASeries_LiveGame& a, CMsgDOTASeries_LiveGame& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTASeries_LiveGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTASeries_LiveGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTASeries_LiveGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTASeries_LiveGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTASeries_LiveGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTASeries_LiveGame& from) {
    CMsgDOTASeries_LiveGame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTASeries_LiveGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTASeries.LiveGame";
  }
  protected:
  explicit CMsgDOTASeries_LiveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamRadiantFieldNumber = 2,
    kTeamDireFieldNumber = 3,
    kServerSteamIdFieldNumber = 1,
    kTeamRadiantScoreFieldNumber = 4,
    kTeamDireScoreFieldNumber = 5,
  };
  // optional .CMsgDOTASeries.TeamInfo team_radiant = 2;
  bool has_team_radiant() const;
  private:
  bool _internal_has_team_radiant() const;
  public:
  void clear_team_radiant();
  const ::CMsgDOTASeries_TeamInfo& team_radiant() const;
  PROTOBUF_NODISCARD ::CMsgDOTASeries_TeamInfo* release_team_radiant();
  ::CMsgDOTASeries_TeamInfo* mutable_team_radiant();
  void set_allocated_team_radiant(::CMsgDOTASeries_TeamInfo* team_radiant);
  private:
  const ::CMsgDOTASeries_TeamInfo& _internal_team_radiant() const;
  ::CMsgDOTASeries_TeamInfo* _internal_mutable_team_radiant();
  public:
  void unsafe_arena_set_allocated_team_radiant(
      ::CMsgDOTASeries_TeamInfo* team_radiant);
  ::CMsgDOTASeries_TeamInfo* unsafe_arena_release_team_radiant();

  // optional .CMsgDOTASeries.TeamInfo team_dire = 3;
  bool has_team_dire() const;
  private:
  bool _internal_has_team_dire() const;
  public:
  void clear_team_dire();
  const ::CMsgDOTASeries_TeamInfo& team_dire() const;
  PROTOBUF_NODISCARD ::CMsgDOTASeries_TeamInfo* release_team_dire();
  ::CMsgDOTASeries_TeamInfo* mutable_team_dire();
  void set_allocated_team_dire(::CMsgDOTASeries_TeamInfo* team_dire);
  private:
  const ::CMsgDOTASeries_TeamInfo& _internal_team_dire() const;
  ::CMsgDOTASeries_TeamInfo* _internal_mutable_team_dire();
  public:
  void unsafe_arena_set_allocated_team_dire(
      ::CMsgDOTASeries_TeamInfo* team_dire);
  ::CMsgDOTASeries_TeamInfo* unsafe_arena_release_team_dire();

  // optional fixed64 server_steam_id = 1;
  bool has_server_steam_id() const;
  private:
  bool _internal_has_server_steam_id() const;
  public:
  void clear_server_steam_id();
  uint64_t server_steam_id() const;
  void set_server_steam_id(uint64_t value);
  private:
  uint64_t _internal_server_steam_id() const;
  void _internal_set_server_steam_id(uint64_t value);
  public:

  // optional uint32 team_radiant_score = 4;
  bool has_team_radiant_score() const;
  private:
  bool _internal_has_team_radiant_score() const;
  public:
  void clear_team_radiant_score();
  uint32_t team_radiant_score() const;
  void set_team_radiant_score(uint32_t value);
  private:
  uint32_t _internal_team_radiant_score() const;
  void _internal_set_team_radiant_score(uint32_t value);
  public:

  // optional uint32 team_dire_score = 5;
  bool has_team_dire_score() const;
  private:
  bool _internal_has_team_dire_score() const;
  public:
  void clear_team_dire_score();
  uint32_t team_dire_score() const;
  void set_team_dire_score(uint32_t value);
  private:
  uint32_t _internal_team_dire_score() const;
  void _internal_set_team_dire_score(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTASeries.LiveGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgDOTASeries_TeamInfo* team_radiant_;
    ::CMsgDOTASeries_TeamInfo* team_dire_;
    uint64_t server_steam_id_;
    uint32_t team_radiant_score_;
    uint32_t team_dire_score_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTASeries final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTASeries) */ {
 public:
  inline CMsgDOTASeries() : CMsgDOTASeries(nullptr) {}
  ~CMsgDOTASeries() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTASeries(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTASeries(const CMsgDOTASeries& from);
  CMsgDOTASeries(CMsgDOTASeries&& from) noexcept
    : CMsgDOTASeries() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASeries& operator=(const CMsgDOTASeries& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTASeries& operator=(CMsgDOTASeries&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTASeries& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTASeries* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASeries*>(
               &_CMsgDOTASeries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CMsgDOTASeries& a, CMsgDOTASeries& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTASeries* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTASeries* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTASeries* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTASeries>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTASeries& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTASeries& from) {
    CMsgDOTASeries::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTASeries* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTASeries";
  }
  protected:
  explicit CMsgDOTASeries(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTASeries_TeamInfo TeamInfo;
  typedef CMsgDOTASeries_LiveGame LiveGame;

  // accessors -------------------------------------------------------

  enum : int {
    kMatchMinimalFieldNumber = 5,
    kTeam1FieldNumber = 3,
    kTeam2FieldNumber = 4,
    kLiveGameFieldNumber = 6,
    kSeriesIdFieldNumber = 1,
    kSeriesTypeFieldNumber = 2,
  };
  // repeated .CMsgDOTAMatchMinimal match_minimal = 5;
  int match_minimal_size() const;
  private:
  int _internal_match_minimal_size() const;
  public:
  void clear_match_minimal();
  ::CMsgDOTAMatchMinimal* mutable_match_minimal(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal >*
      mutable_match_minimal();
  private:
  const ::CMsgDOTAMatchMinimal& _internal_match_minimal(int index) const;
  ::CMsgDOTAMatchMinimal* _internal_add_match_minimal();
  public:
  const ::CMsgDOTAMatchMinimal& match_minimal(int index) const;
  ::CMsgDOTAMatchMinimal* add_match_minimal();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal >&
      match_minimal() const;

  // optional .CMsgDOTASeries.TeamInfo team_1 = 3;
  bool has_team_1() const;
  private:
  bool _internal_has_team_1() const;
  public:
  void clear_team_1();
  const ::CMsgDOTASeries_TeamInfo& team_1() const;
  PROTOBUF_NODISCARD ::CMsgDOTASeries_TeamInfo* release_team_1();
  ::CMsgDOTASeries_TeamInfo* mutable_team_1();
  void set_allocated_team_1(::CMsgDOTASeries_TeamInfo* team_1);
  private:
  const ::CMsgDOTASeries_TeamInfo& _internal_team_1() const;
  ::CMsgDOTASeries_TeamInfo* _internal_mutable_team_1();
  public:
  void unsafe_arena_set_allocated_team_1(
      ::CMsgDOTASeries_TeamInfo* team_1);
  ::CMsgDOTASeries_TeamInfo* unsafe_arena_release_team_1();

  // optional .CMsgDOTASeries.TeamInfo team_2 = 4;
  bool has_team_2() const;
  private:
  bool _internal_has_team_2() const;
  public:
  void clear_team_2();
  const ::CMsgDOTASeries_TeamInfo& team_2() const;
  PROTOBUF_NODISCARD ::CMsgDOTASeries_TeamInfo* release_team_2();
  ::CMsgDOTASeries_TeamInfo* mutable_team_2();
  void set_allocated_team_2(::CMsgDOTASeries_TeamInfo* team_2);
  private:
  const ::CMsgDOTASeries_TeamInfo& _internal_team_2() const;
  ::CMsgDOTASeries_TeamInfo* _internal_mutable_team_2();
  public:
  void unsafe_arena_set_allocated_team_2(
      ::CMsgDOTASeries_TeamInfo* team_2);
  ::CMsgDOTASeries_TeamInfo* unsafe_arena_release_team_2();

  // optional .CMsgDOTASeries.LiveGame live_game = 6;
  bool has_live_game() const;
  private:
  bool _internal_has_live_game() const;
  public:
  void clear_live_game();
  const ::CMsgDOTASeries_LiveGame& live_game() const;
  PROTOBUF_NODISCARD ::CMsgDOTASeries_LiveGame* release_live_game();
  ::CMsgDOTASeries_LiveGame* mutable_live_game();
  void set_allocated_live_game(::CMsgDOTASeries_LiveGame* live_game);
  private:
  const ::CMsgDOTASeries_LiveGame& _internal_live_game() const;
  ::CMsgDOTASeries_LiveGame* _internal_mutable_live_game();
  public:
  void unsafe_arena_set_allocated_live_game(
      ::CMsgDOTASeries_LiveGame* live_game);
  ::CMsgDOTASeries_LiveGame* unsafe_arena_release_live_game();

  // optional uint32 series_id = 1;
  bool has_series_id() const;
  private:
  bool _internal_has_series_id() const;
  public:
  void clear_series_id();
  uint32_t series_id() const;
  void set_series_id(uint32_t value);
  private:
  uint32_t _internal_series_id() const;
  void _internal_set_series_id(uint32_t value);
  public:

  // optional uint32 series_type = 2;
  bool has_series_type() const;
  private:
  bool _internal_has_series_type() const;
  public:
  void clear_series_type();
  uint32_t series_type() const;
  void set_series_type(uint32_t value);
  private:
  uint32_t _internal_series_type() const;
  void _internal_set_series_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTASeries)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal > match_minimal_;
    ::CMsgDOTASeries_TeamInfo* team_1_;
    ::CMsgDOTASeries_TeamInfo* team_2_;
    ::CMsgDOTASeries_LiveGame* live_game_;
    uint32_t series_id_;
    uint32_t series_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSourceTVGameSmall_Player

// optional uint32 account_id = 1;
inline bool CSourceTVGameSmall_Player::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSourceTVGameSmall_Player::has_account_id() const {
  return _internal_has_account_id();
}
inline void CSourceTVGameSmall_Player::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CSourceTVGameSmall_Player::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CSourceTVGameSmall_Player::account_id() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.Player.account_id)
  return _internal_account_id();
}
inline void CSourceTVGameSmall_Player::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CSourceTVGameSmall_Player::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.Player.account_id)
}

// optional uint32 hero_id = 2;
inline bool CSourceTVGameSmall_Player::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSourceTVGameSmall_Player::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CSourceTVGameSmall_Player::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CSourceTVGameSmall_Player::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CSourceTVGameSmall_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.Player.hero_id)
  return _internal_hero_id();
}
inline void CSourceTVGameSmall_Player::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hero_id_ = value;
}
inline void CSourceTVGameSmall_Player::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.Player.hero_id)
}

// -------------------------------------------------------------------

// CSourceTVGameSmall

// optional uint32 activate_time = 1;
inline bool CSourceTVGameSmall::_internal_has_activate_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_activate_time() const {
  return _internal_has_activate_time();
}
inline void CSourceTVGameSmall::clear_activate_time() {
  _impl_.activate_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CSourceTVGameSmall::_internal_activate_time() const {
  return _impl_.activate_time_;
}
inline uint32_t CSourceTVGameSmall::activate_time() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.activate_time)
  return _internal_activate_time();
}
inline void CSourceTVGameSmall::_internal_set_activate_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.activate_time_ = value;
}
inline void CSourceTVGameSmall::set_activate_time(uint32_t value) {
  _internal_set_activate_time(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.activate_time)
}

// optional uint32 deactivate_time = 2;
inline bool CSourceTVGameSmall::_internal_has_deactivate_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_deactivate_time() const {
  return _internal_has_deactivate_time();
}
inline void CSourceTVGameSmall::clear_deactivate_time() {
  _impl_.deactivate_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CSourceTVGameSmall::_internal_deactivate_time() const {
  return _impl_.deactivate_time_;
}
inline uint32_t CSourceTVGameSmall::deactivate_time() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.deactivate_time)
  return _internal_deactivate_time();
}
inline void CSourceTVGameSmall::_internal_set_deactivate_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.deactivate_time_ = value;
}
inline void CSourceTVGameSmall::set_deactivate_time(uint32_t value) {
  _internal_set_deactivate_time(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.deactivate_time)
}

// optional uint64 server_steam_id = 3;
inline bool CSourceTVGameSmall::_internal_has_server_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_server_steam_id() const {
  return _internal_has_server_steam_id();
}
inline void CSourceTVGameSmall::clear_server_steam_id() {
  _impl_.server_steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CSourceTVGameSmall::_internal_server_steam_id() const {
  return _impl_.server_steam_id_;
}
inline uint64_t CSourceTVGameSmall::server_steam_id() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.server_steam_id)
  return _internal_server_steam_id();
}
inline void CSourceTVGameSmall::_internal_set_server_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.server_steam_id_ = value;
}
inline void CSourceTVGameSmall::set_server_steam_id(uint64_t value) {
  _internal_set_server_steam_id(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.server_steam_id)
}

// optional uint64 lobby_id = 4;
inline bool CSourceTVGameSmall::_internal_has_lobby_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CSourceTVGameSmall::clear_lobby_id() {
  _impl_.lobby_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CSourceTVGameSmall::_internal_lobby_id() const {
  return _impl_.lobby_id_;
}
inline uint64_t CSourceTVGameSmall::lobby_id() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.lobby_id)
  return _internal_lobby_id();
}
inline void CSourceTVGameSmall::_internal_set_lobby_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.lobby_id_ = value;
}
inline void CSourceTVGameSmall::set_lobby_id(uint64_t value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.lobby_id)
}

// optional uint32 league_id = 5;
inline bool CSourceTVGameSmall::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_league_id() const {
  return _internal_has_league_id();
}
inline void CSourceTVGameSmall::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CSourceTVGameSmall::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CSourceTVGameSmall::league_id() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.league_id)
  return _internal_league_id();
}
inline void CSourceTVGameSmall::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.league_id_ = value;
}
inline void CSourceTVGameSmall::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.league_id)
}

// optional uint32 lobby_type = 6;
inline bool CSourceTVGameSmall::_internal_has_lobby_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_lobby_type() const {
  return _internal_has_lobby_type();
}
inline void CSourceTVGameSmall::clear_lobby_type() {
  _impl_.lobby_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CSourceTVGameSmall::_internal_lobby_type() const {
  return _impl_.lobby_type_;
}
inline uint32_t CSourceTVGameSmall::lobby_type() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.lobby_type)
  return _internal_lobby_type();
}
inline void CSourceTVGameSmall::_internal_set_lobby_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.lobby_type_ = value;
}
inline void CSourceTVGameSmall::set_lobby_type(uint32_t value) {
  _internal_set_lobby_type(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.lobby_type)
}

// optional int32 game_time = 7;
inline bool CSourceTVGameSmall::_internal_has_game_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_game_time() const {
  return _internal_has_game_time();
}
inline void CSourceTVGameSmall::clear_game_time() {
  _impl_.game_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t CSourceTVGameSmall::_internal_game_time() const {
  return _impl_.game_time_;
}
inline int32_t CSourceTVGameSmall::game_time() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.game_time)
  return _internal_game_time();
}
inline void CSourceTVGameSmall::_internal_set_game_time(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.game_time_ = value;
}
inline void CSourceTVGameSmall::set_game_time(int32_t value) {
  _internal_set_game_time(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.game_time)
}

// optional uint32 delay = 8;
inline bool CSourceTVGameSmall::_internal_has_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_delay() const {
  return _internal_has_delay();
}
inline void CSourceTVGameSmall::clear_delay() {
  _impl_.delay_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CSourceTVGameSmall::_internal_delay() const {
  return _impl_.delay_;
}
inline uint32_t CSourceTVGameSmall::delay() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.delay)
  return _internal_delay();
}
inline void CSourceTVGameSmall::_internal_set_delay(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.delay_ = value;
}
inline void CSourceTVGameSmall::set_delay(uint32_t value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.delay)
}

// optional uint32 spectators = 9;
inline bool CSourceTVGameSmall::_internal_has_spectators() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_spectators() const {
  return _internal_has_spectators();
}
inline void CSourceTVGameSmall::clear_spectators() {
  _impl_.spectators_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CSourceTVGameSmall::_internal_spectators() const {
  return _impl_.spectators_;
}
inline uint32_t CSourceTVGameSmall::spectators() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.spectators)
  return _internal_spectators();
}
inline void CSourceTVGameSmall::_internal_set_spectators(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.spectators_ = value;
}
inline void CSourceTVGameSmall::set_spectators(uint32_t value) {
  _internal_set_spectators(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.spectators)
}

// optional uint32 game_mode = 10;
inline bool CSourceTVGameSmall::_internal_has_game_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CSourceTVGameSmall::clear_game_mode() {
  _impl_.game_mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CSourceTVGameSmall::_internal_game_mode() const {
  return _impl_.game_mode_;
}
inline uint32_t CSourceTVGameSmall::game_mode() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.game_mode)
  return _internal_game_mode();
}
inline void CSourceTVGameSmall::_internal_set_game_mode(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.game_mode_ = value;
}
inline void CSourceTVGameSmall::set_game_mode(uint32_t value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.game_mode)
}

// optional uint32 average_mmr = 11;
inline bool CSourceTVGameSmall::_internal_has_average_mmr() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_average_mmr() const {
  return _internal_has_average_mmr();
}
inline void CSourceTVGameSmall::clear_average_mmr() {
  _impl_.average_mmr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CSourceTVGameSmall::_internal_average_mmr() const {
  return _impl_.average_mmr_;
}
inline uint32_t CSourceTVGameSmall::average_mmr() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.average_mmr)
  return _internal_average_mmr();
}
inline void CSourceTVGameSmall::_internal_set_average_mmr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.average_mmr_ = value;
}
inline void CSourceTVGameSmall::set_average_mmr(uint32_t value) {
  _internal_set_average_mmr(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.average_mmr)
}

// optional uint64 match_id = 12;
inline bool CSourceTVGameSmall::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_match_id() const {
  return _internal_has_match_id();
}
inline void CSourceTVGameSmall::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint64_t CSourceTVGameSmall::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CSourceTVGameSmall::match_id() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.match_id)
  return _internal_match_id();
}
inline void CSourceTVGameSmall::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.match_id_ = value;
}
inline void CSourceTVGameSmall::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.match_id)
}

// optional uint32 series_id = 13;
inline bool CSourceTVGameSmall::_internal_has_series_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_series_id() const {
  return _internal_has_series_id();
}
inline void CSourceTVGameSmall::clear_series_id() {
  _impl_.series_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CSourceTVGameSmall::_internal_series_id() const {
  return _impl_.series_id_;
}
inline uint32_t CSourceTVGameSmall::series_id() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.series_id)
  return _internal_series_id();
}
inline void CSourceTVGameSmall::_internal_set_series_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.series_id_ = value;
}
inline void CSourceTVGameSmall::set_series_id(uint32_t value) {
  _internal_set_series_id(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.series_id)
}

// optional string team_name_radiant = 15;
inline bool CSourceTVGameSmall::_internal_has_team_name_radiant() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_team_name_radiant() const {
  return _internal_has_team_name_radiant();
}
inline void CSourceTVGameSmall::clear_team_name_radiant() {
  _impl_.team_name_radiant_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSourceTVGameSmall::team_name_radiant() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.team_name_radiant)
  return _internal_team_name_radiant();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSourceTVGameSmall::set_team_name_radiant(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.team_name_radiant_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.team_name_radiant)
}
inline std::string* CSourceTVGameSmall::mutable_team_name_radiant() {
  std::string* _s = _internal_mutable_team_name_radiant();
  // @@protoc_insertion_point(field_mutable:CSourceTVGameSmall.team_name_radiant)
  return _s;
}
inline const std::string& CSourceTVGameSmall::_internal_team_name_radiant() const {
  return _impl_.team_name_radiant_.Get();
}
inline void CSourceTVGameSmall::_internal_set_team_name_radiant(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_name_radiant_.Set(value, GetArenaForAllocation());
}
inline std::string* CSourceTVGameSmall::_internal_mutable_team_name_radiant() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.team_name_radiant_.Mutable(GetArenaForAllocation());
}
inline std::string* CSourceTVGameSmall::release_team_name_radiant() {
  // @@protoc_insertion_point(field_release:CSourceTVGameSmall.team_name_radiant)
  if (!_internal_has_team_name_radiant()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.team_name_radiant_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_radiant_.IsDefault()) {
    _impl_.team_name_radiant_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSourceTVGameSmall::set_allocated_team_name_radiant(std::string* team_name_radiant) {
  if (team_name_radiant != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.team_name_radiant_.SetAllocated(team_name_radiant, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_radiant_.IsDefault()) {
    _impl_.team_name_radiant_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSourceTVGameSmall.team_name_radiant)
}

// optional string team_name_dire = 16;
inline bool CSourceTVGameSmall::_internal_has_team_name_dire() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_team_name_dire() const {
  return _internal_has_team_name_dire();
}
inline void CSourceTVGameSmall::clear_team_name_dire() {
  _impl_.team_name_dire_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSourceTVGameSmall::team_name_dire() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.team_name_dire)
  return _internal_team_name_dire();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSourceTVGameSmall::set_team_name_dire(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.team_name_dire_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.team_name_dire)
}
inline std::string* CSourceTVGameSmall::mutable_team_name_dire() {
  std::string* _s = _internal_mutable_team_name_dire();
  // @@protoc_insertion_point(field_mutable:CSourceTVGameSmall.team_name_dire)
  return _s;
}
inline const std::string& CSourceTVGameSmall::_internal_team_name_dire() const {
  return _impl_.team_name_dire_.Get();
}
inline void CSourceTVGameSmall::_internal_set_team_name_dire(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.team_name_dire_.Set(value, GetArenaForAllocation());
}
inline std::string* CSourceTVGameSmall::_internal_mutable_team_name_dire() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.team_name_dire_.Mutable(GetArenaForAllocation());
}
inline std::string* CSourceTVGameSmall::release_team_name_dire() {
  // @@protoc_insertion_point(field_release:CSourceTVGameSmall.team_name_dire)
  if (!_internal_has_team_name_dire()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.team_name_dire_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_dire_.IsDefault()) {
    _impl_.team_name_dire_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSourceTVGameSmall::set_allocated_team_name_dire(std::string* team_name_dire) {
  if (team_name_dire != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.team_name_dire_.SetAllocated(team_name_dire, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_dire_.IsDefault()) {
    _impl_.team_name_dire_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSourceTVGameSmall.team_name_dire)
}

// optional fixed64 team_logo_radiant = 24;
inline bool CSourceTVGameSmall::_internal_has_team_logo_radiant() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_team_logo_radiant() const {
  return _internal_has_team_logo_radiant();
}
inline void CSourceTVGameSmall::clear_team_logo_radiant() {
  _impl_.team_logo_radiant_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline uint64_t CSourceTVGameSmall::_internal_team_logo_radiant() const {
  return _impl_.team_logo_radiant_;
}
inline uint64_t CSourceTVGameSmall::team_logo_radiant() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.team_logo_radiant)
  return _internal_team_logo_radiant();
}
inline void CSourceTVGameSmall::_internal_set_team_logo_radiant(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.team_logo_radiant_ = value;
}
inline void CSourceTVGameSmall::set_team_logo_radiant(uint64_t value) {
  _internal_set_team_logo_radiant(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.team_logo_radiant)
}

// optional fixed64 team_logo_dire = 25;
inline bool CSourceTVGameSmall::_internal_has_team_logo_dire() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_team_logo_dire() const {
  return _internal_has_team_logo_dire();
}
inline void CSourceTVGameSmall::clear_team_logo_dire() {
  _impl_.team_logo_dire_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline uint64_t CSourceTVGameSmall::_internal_team_logo_dire() const {
  return _impl_.team_logo_dire_;
}
inline uint64_t CSourceTVGameSmall::team_logo_dire() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.team_logo_dire)
  return _internal_team_logo_dire();
}
inline void CSourceTVGameSmall::_internal_set_team_logo_dire(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.team_logo_dire_ = value;
}
inline void CSourceTVGameSmall::set_team_logo_dire(uint64_t value) {
  _internal_set_team_logo_dire(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.team_logo_dire)
}

// optional uint32 team_id_radiant = 30;
inline bool CSourceTVGameSmall::_internal_has_team_id_radiant() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_team_id_radiant() const {
  return _internal_has_team_id_radiant();
}
inline void CSourceTVGameSmall::clear_team_id_radiant() {
  _impl_.team_id_radiant_ = 0u;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline uint32_t CSourceTVGameSmall::_internal_team_id_radiant() const {
  return _impl_.team_id_radiant_;
}
inline uint32_t CSourceTVGameSmall::team_id_radiant() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.team_id_radiant)
  return _internal_team_id_radiant();
}
inline void CSourceTVGameSmall::_internal_set_team_id_radiant(uint32_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.team_id_radiant_ = value;
}
inline void CSourceTVGameSmall::set_team_id_radiant(uint32_t value) {
  _internal_set_team_id_radiant(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.team_id_radiant)
}

// optional uint32 team_id_dire = 31;
inline bool CSourceTVGameSmall::_internal_has_team_id_dire() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_team_id_dire() const {
  return _internal_has_team_id_dire();
}
inline void CSourceTVGameSmall::clear_team_id_dire() {
  _impl_.team_id_dire_ = 0u;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline uint32_t CSourceTVGameSmall::_internal_team_id_dire() const {
  return _impl_.team_id_dire_;
}
inline uint32_t CSourceTVGameSmall::team_id_dire() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.team_id_dire)
  return _internal_team_id_dire();
}
inline void CSourceTVGameSmall::_internal_set_team_id_dire(uint32_t value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.team_id_dire_ = value;
}
inline void CSourceTVGameSmall::set_team_id_dire(uint32_t value) {
  _internal_set_team_id_dire(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.team_id_dire)
}

// optional uint32 sort_score = 17;
inline bool CSourceTVGameSmall::_internal_has_sort_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_sort_score() const {
  return _internal_has_sort_score();
}
inline void CSourceTVGameSmall::clear_sort_score() {
  _impl_.sort_score_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CSourceTVGameSmall::_internal_sort_score() const {
  return _impl_.sort_score_;
}
inline uint32_t CSourceTVGameSmall::sort_score() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.sort_score)
  return _internal_sort_score();
}
inline void CSourceTVGameSmall::_internal_set_sort_score(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.sort_score_ = value;
}
inline void CSourceTVGameSmall::set_sort_score(uint32_t value) {
  _internal_set_sort_score(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.sort_score)
}

// optional float last_update_time = 18;
inline bool CSourceTVGameSmall::_internal_has_last_update_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_last_update_time() const {
  return _internal_has_last_update_time();
}
inline void CSourceTVGameSmall::clear_last_update_time() {
  _impl_.last_update_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline float CSourceTVGameSmall::_internal_last_update_time() const {
  return _impl_.last_update_time_;
}
inline float CSourceTVGameSmall::last_update_time() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.last_update_time)
  return _internal_last_update_time();
}
inline void CSourceTVGameSmall::_internal_set_last_update_time(float value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.last_update_time_ = value;
}
inline void CSourceTVGameSmall::set_last_update_time(float value) {
  _internal_set_last_update_time(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.last_update_time)
}

// optional int32 radiant_lead = 19;
inline bool CSourceTVGameSmall::_internal_has_radiant_lead() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_radiant_lead() const {
  return _internal_has_radiant_lead();
}
inline void CSourceTVGameSmall::clear_radiant_lead() {
  _impl_.radiant_lead_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline int32_t CSourceTVGameSmall::_internal_radiant_lead() const {
  return _impl_.radiant_lead_;
}
inline int32_t CSourceTVGameSmall::radiant_lead() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.radiant_lead)
  return _internal_radiant_lead();
}
inline void CSourceTVGameSmall::_internal_set_radiant_lead(int32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.radiant_lead_ = value;
}
inline void CSourceTVGameSmall::set_radiant_lead(int32_t value) {
  _internal_set_radiant_lead(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.radiant_lead)
}

// optional uint32 radiant_score = 20;
inline bool CSourceTVGameSmall::_internal_has_radiant_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_radiant_score() const {
  return _internal_has_radiant_score();
}
inline void CSourceTVGameSmall::clear_radiant_score() {
  _impl_.radiant_score_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint32_t CSourceTVGameSmall::_internal_radiant_score() const {
  return _impl_.radiant_score_;
}
inline uint32_t CSourceTVGameSmall::radiant_score() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.radiant_score)
  return _internal_radiant_score();
}
inline void CSourceTVGameSmall::_internal_set_radiant_score(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.radiant_score_ = value;
}
inline void CSourceTVGameSmall::set_radiant_score(uint32_t value) {
  _internal_set_radiant_score(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.radiant_score)
}

// optional uint32 dire_score = 21;
inline bool CSourceTVGameSmall::_internal_has_dire_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_dire_score() const {
  return _internal_has_dire_score();
}
inline void CSourceTVGameSmall::clear_dire_score() {
  _impl_.dire_score_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CSourceTVGameSmall::_internal_dire_score() const {
  return _impl_.dire_score_;
}
inline uint32_t CSourceTVGameSmall::dire_score() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.dire_score)
  return _internal_dire_score();
}
inline void CSourceTVGameSmall::_internal_set_dire_score(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.dire_score_ = value;
}
inline void CSourceTVGameSmall::set_dire_score(uint32_t value) {
  _internal_set_dire_score(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.dire_score)
}

// repeated .CSourceTVGameSmall.Player players = 22;
inline int CSourceTVGameSmall::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CSourceTVGameSmall::players_size() const {
  return _internal_players_size();
}
inline void CSourceTVGameSmall::clear_players() {
  _impl_.players_.Clear();
}
inline ::CSourceTVGameSmall_Player* CSourceTVGameSmall::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CSourceTVGameSmall.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSourceTVGameSmall_Player >*
CSourceTVGameSmall::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CSourceTVGameSmall.players)
  return &_impl_.players_;
}
inline const ::CSourceTVGameSmall_Player& CSourceTVGameSmall::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::CSourceTVGameSmall_Player& CSourceTVGameSmall::players(int index) const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.players)
  return _internal_players(index);
}
inline ::CSourceTVGameSmall_Player* CSourceTVGameSmall::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::CSourceTVGameSmall_Player* CSourceTVGameSmall::add_players() {
  ::CSourceTVGameSmall_Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CSourceTVGameSmall.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSourceTVGameSmall_Player >&
CSourceTVGameSmall::players() const {
  // @@protoc_insertion_point(field_list:CSourceTVGameSmall.players)
  return _impl_.players_;
}

// optional fixed32 building_state = 23;
inline bool CSourceTVGameSmall::_internal_has_building_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_building_state() const {
  return _internal_has_building_state();
}
inline void CSourceTVGameSmall::clear_building_state() {
  _impl_.building_state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CSourceTVGameSmall::_internal_building_state() const {
  return _impl_.building_state_;
}
inline uint32_t CSourceTVGameSmall::building_state() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.building_state)
  return _internal_building_state();
}
inline void CSourceTVGameSmall::_internal_set_building_state(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.building_state_ = value;
}
inline void CSourceTVGameSmall::set_building_state(uint32_t value) {
  _internal_set_building_state(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.building_state)
}

// optional uint32 weekend_tourney_tournament_id = 26;
inline bool CSourceTVGameSmall::_internal_has_weekend_tourney_tournament_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_weekend_tourney_tournament_id() const {
  return _internal_has_weekend_tourney_tournament_id();
}
inline void CSourceTVGameSmall::clear_weekend_tourney_tournament_id() {
  _impl_.weekend_tourney_tournament_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline uint32_t CSourceTVGameSmall::_internal_weekend_tourney_tournament_id() const {
  return _impl_.weekend_tourney_tournament_id_;
}
inline uint32_t CSourceTVGameSmall::weekend_tourney_tournament_id() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.weekend_tourney_tournament_id)
  return _internal_weekend_tourney_tournament_id();
}
inline void CSourceTVGameSmall::_internal_set_weekend_tourney_tournament_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.weekend_tourney_tournament_id_ = value;
}
inline void CSourceTVGameSmall::set_weekend_tourney_tournament_id(uint32_t value) {
  _internal_set_weekend_tourney_tournament_id(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.weekend_tourney_tournament_id)
}

// optional uint32 weekend_tourney_division = 27;
inline bool CSourceTVGameSmall::_internal_has_weekend_tourney_division() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_weekend_tourney_division() const {
  return _internal_has_weekend_tourney_division();
}
inline void CSourceTVGameSmall::clear_weekend_tourney_division() {
  _impl_.weekend_tourney_division_ = 0u;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline uint32_t CSourceTVGameSmall::_internal_weekend_tourney_division() const {
  return _impl_.weekend_tourney_division_;
}
inline uint32_t CSourceTVGameSmall::weekend_tourney_division() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.weekend_tourney_division)
  return _internal_weekend_tourney_division();
}
inline void CSourceTVGameSmall::_internal_set_weekend_tourney_division(uint32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.weekend_tourney_division_ = value;
}
inline void CSourceTVGameSmall::set_weekend_tourney_division(uint32_t value) {
  _internal_set_weekend_tourney_division(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.weekend_tourney_division)
}

// optional uint32 weekend_tourney_skill_level = 28;
inline bool CSourceTVGameSmall::_internal_has_weekend_tourney_skill_level() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_weekend_tourney_skill_level() const {
  return _internal_has_weekend_tourney_skill_level();
}
inline void CSourceTVGameSmall::clear_weekend_tourney_skill_level() {
  _impl_.weekend_tourney_skill_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint32_t CSourceTVGameSmall::_internal_weekend_tourney_skill_level() const {
  return _impl_.weekend_tourney_skill_level_;
}
inline uint32_t CSourceTVGameSmall::weekend_tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.weekend_tourney_skill_level)
  return _internal_weekend_tourney_skill_level();
}
inline void CSourceTVGameSmall::_internal_set_weekend_tourney_skill_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.weekend_tourney_skill_level_ = value;
}
inline void CSourceTVGameSmall::set_weekend_tourney_skill_level(uint32_t value) {
  _internal_set_weekend_tourney_skill_level(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.weekend_tourney_skill_level)
}

// optional uint32 weekend_tourney_bracket_round = 29;
inline bool CSourceTVGameSmall::_internal_has_weekend_tourney_bracket_round() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_weekend_tourney_bracket_round() const {
  return _internal_has_weekend_tourney_bracket_round();
}
inline void CSourceTVGameSmall::clear_weekend_tourney_bracket_round() {
  _impl_.weekend_tourney_bracket_round_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint32_t CSourceTVGameSmall::_internal_weekend_tourney_bracket_round() const {
  return _impl_.weekend_tourney_bracket_round_;
}
inline uint32_t CSourceTVGameSmall::weekend_tourney_bracket_round() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.weekend_tourney_bracket_round)
  return _internal_weekend_tourney_bracket_round();
}
inline void CSourceTVGameSmall::_internal_set_weekend_tourney_bracket_round(uint32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.weekend_tourney_bracket_round_ = value;
}
inline void CSourceTVGameSmall::set_weekend_tourney_bracket_round(uint32_t value) {
  _internal_set_weekend_tourney_bracket_round(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.weekend_tourney_bracket_round)
}

// optional uint32 custom_game_difficulty = 32;
inline bool CSourceTVGameSmall::_internal_has_custom_game_difficulty() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CSourceTVGameSmall::has_custom_game_difficulty() const {
  return _internal_has_custom_game_difficulty();
}
inline void CSourceTVGameSmall::clear_custom_game_difficulty() {
  _impl_.custom_game_difficulty_ = 0u;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline uint32_t CSourceTVGameSmall::_internal_custom_game_difficulty() const {
  return _impl_.custom_game_difficulty_;
}
inline uint32_t CSourceTVGameSmall::custom_game_difficulty() const {
  // @@protoc_insertion_point(field_get:CSourceTVGameSmall.custom_game_difficulty)
  return _internal_custom_game_difficulty();
}
inline void CSourceTVGameSmall::_internal_set_custom_game_difficulty(uint32_t value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.custom_game_difficulty_ = value;
}
inline void CSourceTVGameSmall::set_custom_game_difficulty(uint32_t value) {
  _internal_set_custom_game_difficulty(value);
  // @@protoc_insertion_point(field_set:CSourceTVGameSmall.custom_game_difficulty)
}

// -------------------------------------------------------------------

// CMsgClientToGCFindTopSourceTVGames

// optional string search_key = 1;
inline bool CMsgClientToGCFindTopSourceTVGames::_internal_has_search_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCFindTopSourceTVGames::has_search_key() const {
  return _internal_has_search_key();
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_search_key() {
  _impl_.search_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientToGCFindTopSourceTVGames::search_key() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFindTopSourceTVGames.search_key)
  return _internal_search_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientToGCFindTopSourceTVGames::set_search_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.search_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientToGCFindTopSourceTVGames.search_key)
}
inline std::string* CMsgClientToGCFindTopSourceTVGames::mutable_search_key() {
  std::string* _s = _internal_mutable_search_key();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCFindTopSourceTVGames.search_key)
  return _s;
}
inline const std::string& CMsgClientToGCFindTopSourceTVGames::_internal_search_key() const {
  return _impl_.search_key_.Get();
}
inline void CMsgClientToGCFindTopSourceTVGames::_internal_set_search_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.search_key_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgClientToGCFindTopSourceTVGames::_internal_mutable_search_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.search_key_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgClientToGCFindTopSourceTVGames::release_search_key() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCFindTopSourceTVGames.search_key)
  if (!_internal_has_search_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.search_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.search_key_.IsDefault()) {
    _impl_.search_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_allocated_search_key(std::string* search_key) {
  if (search_key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.search_key_.SetAllocated(search_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.search_key_.IsDefault()) {
    _impl_.search_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCFindTopSourceTVGames.search_key)
}

// optional uint32 league_id = 2;
inline bool CMsgClientToGCFindTopSourceTVGames::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCFindTopSourceTVGames::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCFindTopSourceTVGames::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CMsgClientToGCFindTopSourceTVGames::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFindTopSourceTVGames.league_id)
  return _internal_league_id();
}
inline void CMsgClientToGCFindTopSourceTVGames::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.league_id_ = value;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFindTopSourceTVGames.league_id)
}

// optional uint32 hero_id = 3;
inline bool CMsgClientToGCFindTopSourceTVGames::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientToGCFindTopSourceTVGames::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientToGCFindTopSourceTVGames::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgClientToGCFindTopSourceTVGames::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFindTopSourceTVGames.hero_id)
  return _internal_hero_id();
}
inline void CMsgClientToGCFindTopSourceTVGames::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hero_id_ = value;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFindTopSourceTVGames.hero_id)
}

// optional uint32 start_game = 4;
inline bool CMsgClientToGCFindTopSourceTVGames::_internal_has_start_game() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientToGCFindTopSourceTVGames::has_start_game() const {
  return _internal_has_start_game();
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_start_game() {
  _impl_.start_game_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientToGCFindTopSourceTVGames::_internal_start_game() const {
  return _impl_.start_game_;
}
inline uint32_t CMsgClientToGCFindTopSourceTVGames::start_game() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFindTopSourceTVGames.start_game)
  return _internal_start_game();
}
inline void CMsgClientToGCFindTopSourceTVGames::_internal_set_start_game(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.start_game_ = value;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_start_game(uint32_t value) {
  _internal_set_start_game(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFindTopSourceTVGames.start_game)
}

// optional uint32 game_list_index = 5;
inline bool CMsgClientToGCFindTopSourceTVGames::_internal_has_game_list_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientToGCFindTopSourceTVGames::has_game_list_index() const {
  return _internal_has_game_list_index();
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_game_list_index() {
  _impl_.game_list_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgClientToGCFindTopSourceTVGames::_internal_game_list_index() const {
  return _impl_.game_list_index_;
}
inline uint32_t CMsgClientToGCFindTopSourceTVGames::game_list_index() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFindTopSourceTVGames.game_list_index)
  return _internal_game_list_index();
}
inline void CMsgClientToGCFindTopSourceTVGames::_internal_set_game_list_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.game_list_index_ = value;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_game_list_index(uint32_t value) {
  _internal_set_game_list_index(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFindTopSourceTVGames.game_list_index)
}

// repeated uint64 lobby_ids = 6;
inline int CMsgClientToGCFindTopSourceTVGames::_internal_lobby_ids_size() const {
  return _impl_.lobby_ids_.size();
}
inline int CMsgClientToGCFindTopSourceTVGames::lobby_ids_size() const {
  return _internal_lobby_ids_size();
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_lobby_ids() {
  _impl_.lobby_ids_.Clear();
}
inline uint64_t CMsgClientToGCFindTopSourceTVGames::_internal_lobby_ids(int index) const {
  return _impl_.lobby_ids_.Get(index);
}
inline uint64_t CMsgClientToGCFindTopSourceTVGames::lobby_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFindTopSourceTVGames.lobby_ids)
  return _internal_lobby_ids(index);
}
inline void CMsgClientToGCFindTopSourceTVGames::set_lobby_ids(int index, uint64_t value) {
  _impl_.lobby_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFindTopSourceTVGames.lobby_ids)
}
inline void CMsgClientToGCFindTopSourceTVGames::_internal_add_lobby_ids(uint64_t value) {
  _impl_.lobby_ids_.Add(value);
}
inline void CMsgClientToGCFindTopSourceTVGames::add_lobby_ids(uint64_t value) {
  _internal_add_lobby_ids(value);
  // @@protoc_insertion_point(field_add:CMsgClientToGCFindTopSourceTVGames.lobby_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgClientToGCFindTopSourceTVGames::_internal_lobby_ids() const {
  return _impl_.lobby_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgClientToGCFindTopSourceTVGames::lobby_ids() const {
  // @@protoc_insertion_point(field_list:CMsgClientToGCFindTopSourceTVGames.lobby_ids)
  return _internal_lobby_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgClientToGCFindTopSourceTVGames::_internal_mutable_lobby_ids() {
  return &_impl_.lobby_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgClientToGCFindTopSourceTVGames::mutable_lobby_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientToGCFindTopSourceTVGames.lobby_ids)
  return _internal_mutable_lobby_ids();
}

// -------------------------------------------------------------------

// CMsgGCToClientFindTopSourceTVGamesResponse

// optional string search_key = 1;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::_internal_has_search_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_search_key() const {
  return _internal_has_search_key();
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_search_key() {
  _impl_.search_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCToClientFindTopSourceTVGamesResponse::search_key() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
  return _internal_search_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCToClientFindTopSourceTVGamesResponse::set_search_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.search_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
}
inline std::string* CMsgGCToClientFindTopSourceTVGamesResponse::mutable_search_key() {
  std::string* _s = _internal_mutable_search_key();
  // @@protoc_insertion_point(field_mutable:CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
  return _s;
}
inline const std::string& CMsgGCToClientFindTopSourceTVGamesResponse::_internal_search_key() const {
  return _impl_.search_key_.Get();
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::_internal_set_search_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.search_key_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGCToClientFindTopSourceTVGamesResponse::_internal_mutable_search_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.search_key_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGCToClientFindTopSourceTVGamesResponse::release_search_key() {
  // @@protoc_insertion_point(field_release:CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
  if (!_internal_has_search_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.search_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.search_key_.IsDefault()) {
    _impl_.search_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_allocated_search_key(std::string* search_key) {
  if (search_key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.search_key_.SetAllocated(search_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.search_key_.IsDefault()) {
    _impl_.search_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
}

// optional uint32 league_id = 2;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGCToClientFindTopSourceTVGamesResponse::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CMsgGCToClientFindTopSourceTVGamesResponse::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFindTopSourceTVGamesResponse.league_id)
  return _internal_league_id();
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.league_id_ = value;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientFindTopSourceTVGamesResponse.league_id)
}

// optional uint32 hero_id = 3;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgGCToClientFindTopSourceTVGamesResponse::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgGCToClientFindTopSourceTVGamesResponse::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFindTopSourceTVGamesResponse.hero_id)
  return _internal_hero_id();
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.hero_id_ = value;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientFindTopSourceTVGamesResponse.hero_id)
}

// optional uint32 start_game = 4;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::_internal_has_start_game() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_start_game() const {
  return _internal_has_start_game();
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_start_game() {
  _impl_.start_game_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgGCToClientFindTopSourceTVGamesResponse::_internal_start_game() const {
  return _impl_.start_game_;
}
inline uint32_t CMsgGCToClientFindTopSourceTVGamesResponse::start_game() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFindTopSourceTVGamesResponse.start_game)
  return _internal_start_game();
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::_internal_set_start_game(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.start_game_ = value;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_start_game(uint32_t value) {
  _internal_set_start_game(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientFindTopSourceTVGamesResponse.start_game)
}

// optional uint32 num_games = 5;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::_internal_has_num_games() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_num_games() const {
  return _internal_has_num_games();
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_num_games() {
  _impl_.num_games_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgGCToClientFindTopSourceTVGamesResponse::_internal_num_games() const {
  return _impl_.num_games_;
}
inline uint32_t CMsgGCToClientFindTopSourceTVGamesResponse::num_games() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFindTopSourceTVGamesResponse.num_games)
  return _internal_num_games();
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::_internal_set_num_games(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.num_games_ = value;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_num_games(uint32_t value) {
  _internal_set_num_games(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientFindTopSourceTVGamesResponse.num_games)
}

// optional uint32 game_list_index = 6;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::_internal_has_game_list_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_game_list_index() const {
  return _internal_has_game_list_index();
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_game_list_index() {
  _impl_.game_list_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgGCToClientFindTopSourceTVGamesResponse::_internal_game_list_index() const {
  return _impl_.game_list_index_;
}
inline uint32_t CMsgGCToClientFindTopSourceTVGamesResponse::game_list_index() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFindTopSourceTVGamesResponse.game_list_index)
  return _internal_game_list_index();
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::_internal_set_game_list_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.game_list_index_ = value;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_game_list_index(uint32_t value) {
  _internal_set_game_list_index(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientFindTopSourceTVGamesResponse.game_list_index)
}

// repeated .CSourceTVGameSmall game_list = 7;
inline int CMsgGCToClientFindTopSourceTVGamesResponse::_internal_game_list_size() const {
  return _impl_.game_list_.size();
}
inline int CMsgGCToClientFindTopSourceTVGamesResponse::game_list_size() const {
  return _internal_game_list_size();
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_game_list() {
  _impl_.game_list_.Clear();
}
inline ::CSourceTVGameSmall* CMsgGCToClientFindTopSourceTVGamesResponse::mutable_game_list(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return _impl_.game_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSourceTVGameSmall >*
CMsgGCToClientFindTopSourceTVGamesResponse::mutable_game_list() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return &_impl_.game_list_;
}
inline const ::CSourceTVGameSmall& CMsgGCToClientFindTopSourceTVGamesResponse::_internal_game_list(int index) const {
  return _impl_.game_list_.Get(index);
}
inline const ::CSourceTVGameSmall& CMsgGCToClientFindTopSourceTVGamesResponse::game_list(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return _internal_game_list(index);
}
inline ::CSourceTVGameSmall* CMsgGCToClientFindTopSourceTVGamesResponse::_internal_add_game_list() {
  return _impl_.game_list_.Add();
}
inline ::CSourceTVGameSmall* CMsgGCToClientFindTopSourceTVGamesResponse::add_game_list() {
  ::CSourceTVGameSmall* _add = _internal_add_game_list();
  // @@protoc_insertion_point(field_add:CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSourceTVGameSmall >&
CMsgGCToClientFindTopSourceTVGamesResponse::game_list() const {
  // @@protoc_insertion_point(field_list:CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return _impl_.game_list_;
}

// optional bool specific_games = 8;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::_internal_has_specific_games() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_specific_games() const {
  return _internal_has_specific_games();
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_specific_games() {
  _impl_.specific_games_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::_internal_specific_games() const {
  return _impl_.specific_games_;
}
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::specific_games() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFindTopSourceTVGamesResponse.specific_games)
  return _internal_specific_games();
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::_internal_set_specific_games(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.specific_games_ = value;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_specific_games(bool value) {
  _internal_set_specific_games(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientFindTopSourceTVGamesResponse.specific_games)
}

// optional .CSourceTVGameSmall bot_game = 9;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::_internal_has_bot_game() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bot_game_ != nullptr);
  return value;
}
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_bot_game() const {
  return _internal_has_bot_game();
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_bot_game() {
  if (_impl_.bot_game_ != nullptr) _impl_.bot_game_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CSourceTVGameSmall& CMsgGCToClientFindTopSourceTVGamesResponse::_internal_bot_game() const {
  const ::CSourceTVGameSmall* p = _impl_.bot_game_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSourceTVGameSmall&>(
      ::_CSourceTVGameSmall_default_instance_);
}
inline const ::CSourceTVGameSmall& CMsgGCToClientFindTopSourceTVGamesResponse::bot_game() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFindTopSourceTVGamesResponse.bot_game)
  return _internal_bot_game();
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::unsafe_arena_set_allocated_bot_game(
    ::CSourceTVGameSmall* bot_game) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bot_game_);
  }
  _impl_.bot_game_ = bot_game;
  if (bot_game) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCToClientFindTopSourceTVGamesResponse.bot_game)
}
inline ::CSourceTVGameSmall* CMsgGCToClientFindTopSourceTVGamesResponse::release_bot_game() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CSourceTVGameSmall* temp = _impl_.bot_game_;
  _impl_.bot_game_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSourceTVGameSmall* CMsgGCToClientFindTopSourceTVGamesResponse::unsafe_arena_release_bot_game() {
  // @@protoc_insertion_point(field_release:CMsgGCToClientFindTopSourceTVGamesResponse.bot_game)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CSourceTVGameSmall* temp = _impl_.bot_game_;
  _impl_.bot_game_ = nullptr;
  return temp;
}
inline ::CSourceTVGameSmall* CMsgGCToClientFindTopSourceTVGamesResponse::_internal_mutable_bot_game() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.bot_game_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSourceTVGameSmall>(GetArenaForAllocation());
    _impl_.bot_game_ = p;
  }
  return _impl_.bot_game_;
}
inline ::CSourceTVGameSmall* CMsgGCToClientFindTopSourceTVGamesResponse::mutable_bot_game() {
  ::CSourceTVGameSmall* _msg = _internal_mutable_bot_game();
  // @@protoc_insertion_point(field_mutable:CMsgGCToClientFindTopSourceTVGamesResponse.bot_game)
  return _msg;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_allocated_bot_game(::CSourceTVGameSmall* bot_game) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bot_game_;
  }
  if (bot_game) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bot_game);
    if (message_arena != submessage_arena) {
      bot_game = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_game, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.bot_game_ = bot_game;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCToClientFindTopSourceTVGamesResponse.bot_game)
}

// -------------------------------------------------------------------

// CMsgGCToClientTopWeekendTourneyGames

// repeated .CSourceTVGameSmall live_games = 1;
inline int CMsgGCToClientTopWeekendTourneyGames::_internal_live_games_size() const {
  return _impl_.live_games_.size();
}
inline int CMsgGCToClientTopWeekendTourneyGames::live_games_size() const {
  return _internal_live_games_size();
}
inline void CMsgGCToClientTopWeekendTourneyGames::clear_live_games() {
  _impl_.live_games_.Clear();
}
inline ::CSourceTVGameSmall* CMsgGCToClientTopWeekendTourneyGames::mutable_live_games(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCToClientTopWeekendTourneyGames.live_games)
  return _impl_.live_games_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSourceTVGameSmall >*
CMsgGCToClientTopWeekendTourneyGames::mutable_live_games() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCToClientTopWeekendTourneyGames.live_games)
  return &_impl_.live_games_;
}
inline const ::CSourceTVGameSmall& CMsgGCToClientTopWeekendTourneyGames::_internal_live_games(int index) const {
  return _impl_.live_games_.Get(index);
}
inline const ::CSourceTVGameSmall& CMsgGCToClientTopWeekendTourneyGames::live_games(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientTopWeekendTourneyGames.live_games)
  return _internal_live_games(index);
}
inline ::CSourceTVGameSmall* CMsgGCToClientTopWeekendTourneyGames::_internal_add_live_games() {
  return _impl_.live_games_.Add();
}
inline ::CSourceTVGameSmall* CMsgGCToClientTopWeekendTourneyGames::add_live_games() {
  ::CSourceTVGameSmall* _add = _internal_add_live_games();
  // @@protoc_insertion_point(field_add:CMsgGCToClientTopWeekendTourneyGames.live_games)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSourceTVGameSmall >&
CMsgGCToClientTopWeekendTourneyGames::live_games() const {
  // @@protoc_insertion_point(field_list:CMsgGCToClientTopWeekendTourneyGames.live_games)
  return _impl_.live_games_;
}

// -------------------------------------------------------------------

// CMsgClientToGCTopLeagueMatchesRequest

// -------------------------------------------------------------------

// CMsgClientToGCTopFriendMatchesRequest

// -------------------------------------------------------------------

// CMsgClientToGCMatchesMinimalRequest

// repeated uint64 match_ids = 1;
inline int CMsgClientToGCMatchesMinimalRequest::_internal_match_ids_size() const {
  return _impl_.match_ids_.size();
}
inline int CMsgClientToGCMatchesMinimalRequest::match_ids_size() const {
  return _internal_match_ids_size();
}
inline void CMsgClientToGCMatchesMinimalRequest::clear_match_ids() {
  _impl_.match_ids_.Clear();
}
inline uint64_t CMsgClientToGCMatchesMinimalRequest::_internal_match_ids(int index) const {
  return _impl_.match_ids_.Get(index);
}
inline uint64_t CMsgClientToGCMatchesMinimalRequest::match_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCMatchesMinimalRequest.match_ids)
  return _internal_match_ids(index);
}
inline void CMsgClientToGCMatchesMinimalRequest::set_match_ids(int index, uint64_t value) {
  _impl_.match_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCMatchesMinimalRequest.match_ids)
}
inline void CMsgClientToGCMatchesMinimalRequest::_internal_add_match_ids(uint64_t value) {
  _impl_.match_ids_.Add(value);
}
inline void CMsgClientToGCMatchesMinimalRequest::add_match_ids(uint64_t value) {
  _internal_add_match_ids(value);
  // @@protoc_insertion_point(field_add:CMsgClientToGCMatchesMinimalRequest.match_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgClientToGCMatchesMinimalRequest::_internal_match_ids() const {
  return _impl_.match_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgClientToGCMatchesMinimalRequest::match_ids() const {
  // @@protoc_insertion_point(field_list:CMsgClientToGCMatchesMinimalRequest.match_ids)
  return _internal_match_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgClientToGCMatchesMinimalRequest::_internal_mutable_match_ids() {
  return &_impl_.match_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgClientToGCMatchesMinimalRequest::mutable_match_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientToGCMatchesMinimalRequest.match_ids)
  return _internal_mutable_match_ids();
}

// -------------------------------------------------------------------

// CMsgClientToGCMatchesMinimalResponse

// repeated .CMsgDOTAMatchMinimal matches = 1;
inline int CMsgClientToGCMatchesMinimalResponse::_internal_matches_size() const {
  return _impl_.matches_.size();
}
inline int CMsgClientToGCMatchesMinimalResponse::matches_size() const {
  return _internal_matches_size();
}
inline ::CMsgDOTAMatchMinimal* CMsgClientToGCMatchesMinimalResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCMatchesMinimalResponse.matches)
  return _impl_.matches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal >*
CMsgClientToGCMatchesMinimalResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientToGCMatchesMinimalResponse.matches)
  return &_impl_.matches_;
}
inline const ::CMsgDOTAMatchMinimal& CMsgClientToGCMatchesMinimalResponse::_internal_matches(int index) const {
  return _impl_.matches_.Get(index);
}
inline const ::CMsgDOTAMatchMinimal& CMsgClientToGCMatchesMinimalResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCMatchesMinimalResponse.matches)
  return _internal_matches(index);
}
inline ::CMsgDOTAMatchMinimal* CMsgClientToGCMatchesMinimalResponse::_internal_add_matches() {
  return _impl_.matches_.Add();
}
inline ::CMsgDOTAMatchMinimal* CMsgClientToGCMatchesMinimalResponse::add_matches() {
  ::CMsgDOTAMatchMinimal* _add = _internal_add_matches();
  // @@protoc_insertion_point(field_add:CMsgClientToGCMatchesMinimalResponse.matches)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal >&
CMsgClientToGCMatchesMinimalResponse::matches() const {
  // @@protoc_insertion_point(field_list:CMsgClientToGCMatchesMinimalResponse.matches)
  return _impl_.matches_;
}

// optional bool last_match = 2;
inline bool CMsgClientToGCMatchesMinimalResponse::_internal_has_last_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCMatchesMinimalResponse::has_last_match() const {
  return _internal_has_last_match();
}
inline void CMsgClientToGCMatchesMinimalResponse::clear_last_match() {
  _impl_.last_match_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgClientToGCMatchesMinimalResponse::_internal_last_match() const {
  return _impl_.last_match_;
}
inline bool CMsgClientToGCMatchesMinimalResponse::last_match() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCMatchesMinimalResponse.last_match)
  return _internal_last_match();
}
inline void CMsgClientToGCMatchesMinimalResponse::_internal_set_last_match(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.last_match_ = value;
}
inline void CMsgClientToGCMatchesMinimalResponse::set_last_match(bool value) {
  _internal_set_last_match(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCMatchesMinimalResponse.last_match)
}

// -------------------------------------------------------------------

// CMsgGCToClientTopLeagueMatchesResponse

// repeated .CMsgDOTAMatchMinimal matches = 2;
inline int CMsgGCToClientTopLeagueMatchesResponse::_internal_matches_size() const {
  return _impl_.matches_.size();
}
inline int CMsgGCToClientTopLeagueMatchesResponse::matches_size() const {
  return _internal_matches_size();
}
inline ::CMsgDOTAMatchMinimal* CMsgGCToClientTopLeagueMatchesResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCToClientTopLeagueMatchesResponse.matches)
  return _impl_.matches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal >*
CMsgGCToClientTopLeagueMatchesResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCToClientTopLeagueMatchesResponse.matches)
  return &_impl_.matches_;
}
inline const ::CMsgDOTAMatchMinimal& CMsgGCToClientTopLeagueMatchesResponse::_internal_matches(int index) const {
  return _impl_.matches_.Get(index);
}
inline const ::CMsgDOTAMatchMinimal& CMsgGCToClientTopLeagueMatchesResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientTopLeagueMatchesResponse.matches)
  return _internal_matches(index);
}
inline ::CMsgDOTAMatchMinimal* CMsgGCToClientTopLeagueMatchesResponse::_internal_add_matches() {
  return _impl_.matches_.Add();
}
inline ::CMsgDOTAMatchMinimal* CMsgGCToClientTopLeagueMatchesResponse::add_matches() {
  ::CMsgDOTAMatchMinimal* _add = _internal_add_matches();
  // @@protoc_insertion_point(field_add:CMsgGCToClientTopLeagueMatchesResponse.matches)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal >&
CMsgGCToClientTopLeagueMatchesResponse::matches() const {
  // @@protoc_insertion_point(field_list:CMsgGCToClientTopLeagueMatchesResponse.matches)
  return _impl_.matches_;
}

// -------------------------------------------------------------------

// CMsgGCToClientTopFriendMatchesResponse

// repeated .CMsgDOTAMatchMinimal matches = 1;
inline int CMsgGCToClientTopFriendMatchesResponse::_internal_matches_size() const {
  return _impl_.matches_.size();
}
inline int CMsgGCToClientTopFriendMatchesResponse::matches_size() const {
  return _internal_matches_size();
}
inline ::CMsgDOTAMatchMinimal* CMsgGCToClientTopFriendMatchesResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCToClientTopFriendMatchesResponse.matches)
  return _impl_.matches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal >*
CMsgGCToClientTopFriendMatchesResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCToClientTopFriendMatchesResponse.matches)
  return &_impl_.matches_;
}
inline const ::CMsgDOTAMatchMinimal& CMsgGCToClientTopFriendMatchesResponse::_internal_matches(int index) const {
  return _impl_.matches_.Get(index);
}
inline const ::CMsgDOTAMatchMinimal& CMsgGCToClientTopFriendMatchesResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientTopFriendMatchesResponse.matches)
  return _internal_matches(index);
}
inline ::CMsgDOTAMatchMinimal* CMsgGCToClientTopFriendMatchesResponse::_internal_add_matches() {
  return _impl_.matches_.Add();
}
inline ::CMsgDOTAMatchMinimal* CMsgGCToClientTopFriendMatchesResponse::add_matches() {
  ::CMsgDOTAMatchMinimal* _add = _internal_add_matches();
  // @@protoc_insertion_point(field_add:CMsgGCToClientTopFriendMatchesResponse.matches)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal >&
CMsgGCToClientTopFriendMatchesResponse::matches() const {
  // @@protoc_insertion_point(field_list:CMsgGCToClientTopFriendMatchesResponse.matches)
  return _impl_.matches_;
}

// -------------------------------------------------------------------

// CMsgSpectateFriendGame

// optional fixed64 steam_id = 1;
inline bool CMsgSpectateFriendGame::_internal_has_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSpectateFriendGame::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgSpectateFriendGame::clear_steam_id() {
  _impl_.steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgSpectateFriendGame::_internal_steam_id() const {
  return _impl_.steam_id_;
}
inline uint64_t CMsgSpectateFriendGame::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgSpectateFriendGame.steam_id)
  return _internal_steam_id();
}
inline void CMsgSpectateFriendGame::_internal_set_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steam_id_ = value;
}
inline void CMsgSpectateFriendGame::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgSpectateFriendGame.steam_id)
}

// optional bool live = 2;
inline bool CMsgSpectateFriendGame::_internal_has_live() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSpectateFriendGame::has_live() const {
  return _internal_has_live();
}
inline void CMsgSpectateFriendGame::clear_live() {
  _impl_.live_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgSpectateFriendGame::_internal_live() const {
  return _impl_.live_;
}
inline bool CMsgSpectateFriendGame::live() const {
  // @@protoc_insertion_point(field_get:CMsgSpectateFriendGame.live)
  return _internal_live();
}
inline void CMsgSpectateFriendGame::_internal_set_live(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.live_ = value;
}
inline void CMsgSpectateFriendGame::set_live(bool value) {
  _internal_set_live(value);
  // @@protoc_insertion_point(field_set:CMsgSpectateFriendGame.live)
}

// -------------------------------------------------------------------

// CMsgSpectateFriendGameResponse

// optional fixed64 server_steamid = 4;
inline bool CMsgSpectateFriendGameResponse::_internal_has_server_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSpectateFriendGameResponse::has_server_steamid() const {
  return _internal_has_server_steamid();
}
inline void CMsgSpectateFriendGameResponse::clear_server_steamid() {
  _impl_.server_steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgSpectateFriendGameResponse::_internal_server_steamid() const {
  return _impl_.server_steamid_;
}
inline uint64_t CMsgSpectateFriendGameResponse::server_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgSpectateFriendGameResponse.server_steamid)
  return _internal_server_steamid();
}
inline void CMsgSpectateFriendGameResponse::_internal_set_server_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.server_steamid_ = value;
}
inline void CMsgSpectateFriendGameResponse::set_server_steamid(uint64_t value) {
  _internal_set_server_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgSpectateFriendGameResponse.server_steamid)
}

// optional .CMsgSpectateFriendGameResponse.EWatchLiveResult watch_live_result = 5 [default = SUCCESS];
inline bool CMsgSpectateFriendGameResponse::_internal_has_watch_live_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSpectateFriendGameResponse::has_watch_live_result() const {
  return _internal_has_watch_live_result();
}
inline void CMsgSpectateFriendGameResponse::clear_watch_live_result() {
  _impl_.watch_live_result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::_internal_watch_live_result() const {
  return static_cast< ::CMsgSpectateFriendGameResponse_EWatchLiveResult >(_impl_.watch_live_result_);
}
inline ::CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::watch_live_result() const {
  // @@protoc_insertion_point(field_get:CMsgSpectateFriendGameResponse.watch_live_result)
  return _internal_watch_live_result();
}
inline void CMsgSpectateFriendGameResponse::_internal_set_watch_live_result(::CMsgSpectateFriendGameResponse_EWatchLiveResult value) {
  assert(::CMsgSpectateFriendGameResponse_EWatchLiveResult_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.watch_live_result_ = value;
}
inline void CMsgSpectateFriendGameResponse::set_watch_live_result(::CMsgSpectateFriendGameResponse_EWatchLiveResult value) {
  _internal_set_watch_live_result(value);
  // @@protoc_insertion_point(field_set:CMsgSpectateFriendGameResponse.watch_live_result)
}

// -------------------------------------------------------------------

// CDOTAReplayDownloadInfo_Highlight

// optional uint32 timestamp = 1;
inline bool CDOTAReplayDownloadInfo_Highlight::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAReplayDownloadInfo_Highlight::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CDOTAReplayDownloadInfo_Highlight::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDOTAReplayDownloadInfo_Highlight::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CDOTAReplayDownloadInfo_Highlight::timestamp() const {
  // @@protoc_insertion_point(field_get:CDOTAReplayDownloadInfo.Highlight.timestamp)
  return _internal_timestamp();
}
inline void CDOTAReplayDownloadInfo_Highlight::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_ = value;
}
inline void CDOTAReplayDownloadInfo_Highlight::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CDOTAReplayDownloadInfo.Highlight.timestamp)
}

// optional string description = 2;
inline bool CDOTAReplayDownloadInfo_Highlight::_internal_has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAReplayDownloadInfo_Highlight::has_description() const {
  return _internal_has_description();
}
inline void CDOTAReplayDownloadInfo_Highlight::clear_description() {
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTAReplayDownloadInfo_Highlight::description() const {
  // @@protoc_insertion_point(field_get:CDOTAReplayDownloadInfo.Highlight.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDOTAReplayDownloadInfo_Highlight::set_description(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDOTAReplayDownloadInfo.Highlight.description)
}
inline std::string* CDOTAReplayDownloadInfo_Highlight::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:CDOTAReplayDownloadInfo.Highlight.description)
  return _s;
}
inline const std::string& CDOTAReplayDownloadInfo_Highlight::_internal_description() const {
  return _impl_.description_.Get();
}
inline void CDOTAReplayDownloadInfo_Highlight::_internal_set_description(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* CDOTAReplayDownloadInfo_Highlight::_internal_mutable_description() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* CDOTAReplayDownloadInfo_Highlight::release_description() {
  // @@protoc_insertion_point(field_release:CDOTAReplayDownloadInfo.Highlight.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDOTAReplayDownloadInfo_Highlight::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDOTAReplayDownloadInfo.Highlight.description)
}

// -------------------------------------------------------------------

// CDOTAReplayDownloadInfo

// optional .CMsgDOTAMatchMinimal match = 1;
inline bool CDOTAReplayDownloadInfo::_internal_has_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.match_ != nullptr);
  return value;
}
inline bool CDOTAReplayDownloadInfo::has_match() const {
  return _internal_has_match();
}
inline const ::CMsgDOTAMatchMinimal& CDOTAReplayDownloadInfo::_internal_match() const {
  const ::CMsgDOTAMatchMinimal* p = _impl_.match_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAMatchMinimal&>(
      ::_CMsgDOTAMatchMinimal_default_instance_);
}
inline const ::CMsgDOTAMatchMinimal& CDOTAReplayDownloadInfo::match() const {
  // @@protoc_insertion_point(field_get:CDOTAReplayDownloadInfo.match)
  return _internal_match();
}
inline void CDOTAReplayDownloadInfo::unsafe_arena_set_allocated_match(
    ::CMsgDOTAMatchMinimal* match) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.match_);
  }
  _impl_.match_ = match;
  if (match) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDOTAReplayDownloadInfo.match)
}
inline ::CMsgDOTAMatchMinimal* CDOTAReplayDownloadInfo::release_match() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgDOTAMatchMinimal* temp = _impl_.match_;
  _impl_.match_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTAMatchMinimal* CDOTAReplayDownloadInfo::unsafe_arena_release_match() {
  // @@protoc_insertion_point(field_release:CDOTAReplayDownloadInfo.match)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgDOTAMatchMinimal* temp = _impl_.match_;
  _impl_.match_ = nullptr;
  return temp;
}
inline ::CMsgDOTAMatchMinimal* CDOTAReplayDownloadInfo::_internal_mutable_match() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.match_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAMatchMinimal>(GetArenaForAllocation());
    _impl_.match_ = p;
  }
  return _impl_.match_;
}
inline ::CMsgDOTAMatchMinimal* CDOTAReplayDownloadInfo::mutable_match() {
  ::CMsgDOTAMatchMinimal* _msg = _internal_mutable_match();
  // @@protoc_insertion_point(field_mutable:CDOTAReplayDownloadInfo.match)
  return _msg;
}
inline void CDOTAReplayDownloadInfo::set_allocated_match(::CMsgDOTAMatchMinimal* match) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.match_);
  }
  if (match) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(match));
    if (message_arena != submessage_arena) {
      match = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.match_ = match;
  // @@protoc_insertion_point(field_set_allocated:CDOTAReplayDownloadInfo.match)
}

// optional string title = 2;
inline bool CDOTAReplayDownloadInfo::_internal_has_title() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAReplayDownloadInfo::has_title() const {
  return _internal_has_title();
}
inline void CDOTAReplayDownloadInfo::clear_title() {
  _impl_.title_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTAReplayDownloadInfo::title() const {
  // @@protoc_insertion_point(field_get:CDOTAReplayDownloadInfo.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDOTAReplayDownloadInfo::set_title(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDOTAReplayDownloadInfo.title)
}
inline std::string* CDOTAReplayDownloadInfo::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:CDOTAReplayDownloadInfo.title)
  return _s;
}
inline const std::string& CDOTAReplayDownloadInfo::_internal_title() const {
  return _impl_.title_.Get();
}
inline void CDOTAReplayDownloadInfo::_internal_set_title(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* CDOTAReplayDownloadInfo::_internal_mutable_title() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* CDOTAReplayDownloadInfo::release_title() {
  // @@protoc_insertion_point(field_release:CDOTAReplayDownloadInfo.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDOTAReplayDownloadInfo::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDOTAReplayDownloadInfo.title)
}

// optional string description = 3;
inline bool CDOTAReplayDownloadInfo::_internal_has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAReplayDownloadInfo::has_description() const {
  return _internal_has_description();
}
inline void CDOTAReplayDownloadInfo::clear_description() {
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CDOTAReplayDownloadInfo::description() const {
  // @@protoc_insertion_point(field_get:CDOTAReplayDownloadInfo.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDOTAReplayDownloadInfo::set_description(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDOTAReplayDownloadInfo.description)
}
inline std::string* CDOTAReplayDownloadInfo::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:CDOTAReplayDownloadInfo.description)
  return _s;
}
inline const std::string& CDOTAReplayDownloadInfo::_internal_description() const {
  return _impl_.description_.Get();
}
inline void CDOTAReplayDownloadInfo::_internal_set_description(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* CDOTAReplayDownloadInfo::_internal_mutable_description() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* CDOTAReplayDownloadInfo::release_description() {
  // @@protoc_insertion_point(field_release:CDOTAReplayDownloadInfo.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDOTAReplayDownloadInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDOTAReplayDownloadInfo.description)
}

// optional uint32 size = 4;
inline bool CDOTAReplayDownloadInfo::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAReplayDownloadInfo::has_size() const {
  return _internal_has_size();
}
inline void CDOTAReplayDownloadInfo::clear_size() {
  _impl_.size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CDOTAReplayDownloadInfo::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t CDOTAReplayDownloadInfo::size() const {
  // @@protoc_insertion_point(field_get:CDOTAReplayDownloadInfo.size)
  return _internal_size();
}
inline void CDOTAReplayDownloadInfo::_internal_set_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.size_ = value;
}
inline void CDOTAReplayDownloadInfo::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:CDOTAReplayDownloadInfo.size)
}

// repeated string tags = 5;
inline int CDOTAReplayDownloadInfo::_internal_tags_size() const {
  return _impl_.tags_.size();
}
inline int CDOTAReplayDownloadInfo::tags_size() const {
  return _internal_tags_size();
}
inline void CDOTAReplayDownloadInfo::clear_tags() {
  _impl_.tags_.Clear();
}
inline std::string* CDOTAReplayDownloadInfo::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:CDOTAReplayDownloadInfo.tags)
  return _s;
}
inline const std::string& CDOTAReplayDownloadInfo::_internal_tags(int index) const {
  return _impl_.tags_.Get(index);
}
inline const std::string& CDOTAReplayDownloadInfo::tags(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAReplayDownloadInfo.tags)
  return _internal_tags(index);
}
inline std::string* CDOTAReplayDownloadInfo::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAReplayDownloadInfo.tags)
  return _impl_.tags_.Mutable(index);
}
inline void CDOTAReplayDownloadInfo::set_tags(int index, const std::string& value) {
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CDOTAReplayDownloadInfo.tags)
}
inline void CDOTAReplayDownloadInfo::set_tags(int index, std::string&& value) {
  _impl_.tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CDOTAReplayDownloadInfo.tags)
}
inline void CDOTAReplayDownloadInfo::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CDOTAReplayDownloadInfo.tags)
}
inline void CDOTAReplayDownloadInfo::set_tags(int index, const char* value, size_t size) {
  _impl_.tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CDOTAReplayDownloadInfo.tags)
}
inline std::string* CDOTAReplayDownloadInfo::_internal_add_tags() {
  return _impl_.tags_.Add();
}
inline void CDOTAReplayDownloadInfo::add_tags(const std::string& value) {
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CDOTAReplayDownloadInfo.tags)
}
inline void CDOTAReplayDownloadInfo::add_tags(std::string&& value) {
  _impl_.tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CDOTAReplayDownloadInfo.tags)
}
inline void CDOTAReplayDownloadInfo::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CDOTAReplayDownloadInfo.tags)
}
inline void CDOTAReplayDownloadInfo::add_tags(const char* value, size_t size) {
  _impl_.tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CDOTAReplayDownloadInfo.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CDOTAReplayDownloadInfo::tags() const {
  // @@protoc_insertion_point(field_list:CDOTAReplayDownloadInfo.tags)
  return _impl_.tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CDOTAReplayDownloadInfo::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAReplayDownloadInfo.tags)
  return &_impl_.tags_;
}

// optional bool exists_on_disk = 6;
inline bool CDOTAReplayDownloadInfo::_internal_has_exists_on_disk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAReplayDownloadInfo::has_exists_on_disk() const {
  return _internal_has_exists_on_disk();
}
inline void CDOTAReplayDownloadInfo::clear_exists_on_disk() {
  _impl_.exists_on_disk_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CDOTAReplayDownloadInfo::_internal_exists_on_disk() const {
  return _impl_.exists_on_disk_;
}
inline bool CDOTAReplayDownloadInfo::exists_on_disk() const {
  // @@protoc_insertion_point(field_get:CDOTAReplayDownloadInfo.exists_on_disk)
  return _internal_exists_on_disk();
}
inline void CDOTAReplayDownloadInfo::_internal_set_exists_on_disk(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.exists_on_disk_ = value;
}
inline void CDOTAReplayDownloadInfo::set_exists_on_disk(bool value) {
  _internal_set_exists_on_disk(value);
  // @@protoc_insertion_point(field_set:CDOTAReplayDownloadInfo.exists_on_disk)
}

// -------------------------------------------------------------------

// CMsgWatchGame

// optional fixed64 server_steamid = 1;
inline bool CMsgWatchGame::_internal_has_server_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgWatchGame::has_server_steamid() const {
  return _internal_has_server_steamid();
}
inline void CMsgWatchGame::clear_server_steamid() {
  _impl_.server_steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgWatchGame::_internal_server_steamid() const {
  return _impl_.server_steamid_;
}
inline uint64_t CMsgWatchGame::server_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGame.server_steamid)
  return _internal_server_steamid();
}
inline void CMsgWatchGame::_internal_set_server_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.server_steamid_ = value;
}
inline void CMsgWatchGame::set_server_steamid(uint64_t value) {
  _internal_set_server_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgWatchGame.server_steamid)
}

// optional uint32 client_version = 2;
inline bool CMsgWatchGame::_internal_has_client_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgWatchGame::has_client_version() const {
  return _internal_has_client_version();
}
inline void CMsgWatchGame::clear_client_version() {
  _impl_.client_version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgWatchGame::_internal_client_version() const {
  return _impl_.client_version_;
}
inline uint32_t CMsgWatchGame::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGame.client_version)
  return _internal_client_version();
}
inline void CMsgWatchGame::_internal_set_client_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.client_version_ = value;
}
inline void CMsgWatchGame::set_client_version(uint32_t value) {
  _internal_set_client_version(value);
  // @@protoc_insertion_point(field_set:CMsgWatchGame.client_version)
}

// optional fixed64 watch_server_steamid = 3;
inline bool CMsgWatchGame::_internal_has_watch_server_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgWatchGame::has_watch_server_steamid() const {
  return _internal_has_watch_server_steamid();
}
inline void CMsgWatchGame::clear_watch_server_steamid() {
  _impl_.watch_server_steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgWatchGame::_internal_watch_server_steamid() const {
  return _impl_.watch_server_steamid_;
}
inline uint64_t CMsgWatchGame::watch_server_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGame.watch_server_steamid)
  return _internal_watch_server_steamid();
}
inline void CMsgWatchGame::_internal_set_watch_server_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.watch_server_steamid_ = value;
}
inline void CMsgWatchGame::set_watch_server_steamid(uint64_t value) {
  _internal_set_watch_server_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgWatchGame.watch_server_steamid)
}

// optional uint64 lobby_id = 4;
inline bool CMsgWatchGame::_internal_has_lobby_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgWatchGame::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CMsgWatchGame::clear_lobby_id() {
  _impl_.lobby_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgWatchGame::_internal_lobby_id() const {
  return _impl_.lobby_id_;
}
inline uint64_t CMsgWatchGame::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGame.lobby_id)
  return _internal_lobby_id();
}
inline void CMsgWatchGame::_internal_set_lobby_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lobby_id_ = value;
}
inline void CMsgWatchGame::set_lobby_id(uint64_t value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CMsgWatchGame.lobby_id)
}

// repeated uint32 regions = 5;
inline int CMsgWatchGame::_internal_regions_size() const {
  return _impl_.regions_.size();
}
inline int CMsgWatchGame::regions_size() const {
  return _internal_regions_size();
}
inline void CMsgWatchGame::clear_regions() {
  _impl_.regions_.Clear();
}
inline uint32_t CMsgWatchGame::_internal_regions(int index) const {
  return _impl_.regions_.Get(index);
}
inline uint32_t CMsgWatchGame::regions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgWatchGame.regions)
  return _internal_regions(index);
}
inline void CMsgWatchGame::set_regions(int index, uint32_t value) {
  _impl_.regions_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgWatchGame.regions)
}
inline void CMsgWatchGame::_internal_add_regions(uint32_t value) {
  _impl_.regions_.Add(value);
}
inline void CMsgWatchGame::add_regions(uint32_t value) {
  _internal_add_regions(value);
  // @@protoc_insertion_point(field_add:CMsgWatchGame.regions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgWatchGame::_internal_regions() const {
  return _impl_.regions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgWatchGame::regions() const {
  // @@protoc_insertion_point(field_list:CMsgWatchGame.regions)
  return _internal_regions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgWatchGame::_internal_mutable_regions() {
  return &_impl_.regions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgWatchGame::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgWatchGame.regions)
  return _internal_mutable_regions();
}

// -------------------------------------------------------------------

// CMsgCancelWatchGame

// -------------------------------------------------------------------

// CMsgWatchGameResponse

// optional .CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
inline bool CMsgWatchGameResponse::_internal_has_watch_game_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgWatchGameResponse::has_watch_game_result() const {
  return _internal_has_watch_game_result();
}
inline void CMsgWatchGameResponse::clear_watch_game_result() {
  _impl_.watch_game_result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::_internal_watch_game_result() const {
  return static_cast< ::CMsgWatchGameResponse_WatchGameResult >(_impl_.watch_game_result_);
}
inline ::CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::watch_game_result() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGameResponse.watch_game_result)
  return _internal_watch_game_result();
}
inline void CMsgWatchGameResponse::_internal_set_watch_game_result(::CMsgWatchGameResponse_WatchGameResult value) {
  assert(::CMsgWatchGameResponse_WatchGameResult_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.watch_game_result_ = value;
}
inline void CMsgWatchGameResponse::set_watch_game_result(::CMsgWatchGameResponse_WatchGameResult value) {
  _internal_set_watch_game_result(value);
  // @@protoc_insertion_point(field_set:CMsgWatchGameResponse.watch_game_result)
}

// optional uint32 source_tv_public_addr = 2;
inline bool CMsgWatchGameResponse::_internal_has_source_tv_public_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgWatchGameResponse::has_source_tv_public_addr() const {
  return _internal_has_source_tv_public_addr();
}
inline void CMsgWatchGameResponse::clear_source_tv_public_addr() {
  _impl_.source_tv_public_addr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgWatchGameResponse::_internal_source_tv_public_addr() const {
  return _impl_.source_tv_public_addr_;
}
inline uint32_t CMsgWatchGameResponse::source_tv_public_addr() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGameResponse.source_tv_public_addr)
  return _internal_source_tv_public_addr();
}
inline void CMsgWatchGameResponse::_internal_set_source_tv_public_addr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.source_tv_public_addr_ = value;
}
inline void CMsgWatchGameResponse::set_source_tv_public_addr(uint32_t value) {
  _internal_set_source_tv_public_addr(value);
  // @@protoc_insertion_point(field_set:CMsgWatchGameResponse.source_tv_public_addr)
}

// optional uint32 source_tv_private_addr = 3;
inline bool CMsgWatchGameResponse::_internal_has_source_tv_private_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgWatchGameResponse::has_source_tv_private_addr() const {
  return _internal_has_source_tv_private_addr();
}
inline void CMsgWatchGameResponse::clear_source_tv_private_addr() {
  _impl_.source_tv_private_addr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgWatchGameResponse::_internal_source_tv_private_addr() const {
  return _impl_.source_tv_private_addr_;
}
inline uint32_t CMsgWatchGameResponse::source_tv_private_addr() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGameResponse.source_tv_private_addr)
  return _internal_source_tv_private_addr();
}
inline void CMsgWatchGameResponse::_internal_set_source_tv_private_addr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.source_tv_private_addr_ = value;
}
inline void CMsgWatchGameResponse::set_source_tv_private_addr(uint32_t value) {
  _internal_set_source_tv_private_addr(value);
  // @@protoc_insertion_point(field_set:CMsgWatchGameResponse.source_tv_private_addr)
}

// optional uint32 source_tv_port = 4;
inline bool CMsgWatchGameResponse::_internal_has_source_tv_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgWatchGameResponse::has_source_tv_port() const {
  return _internal_has_source_tv_port();
}
inline void CMsgWatchGameResponse::clear_source_tv_port() {
  _impl_.source_tv_port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgWatchGameResponse::_internal_source_tv_port() const {
  return _impl_.source_tv_port_;
}
inline uint32_t CMsgWatchGameResponse::source_tv_port() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGameResponse.source_tv_port)
  return _internal_source_tv_port();
}
inline void CMsgWatchGameResponse::_internal_set_source_tv_port(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.source_tv_port_ = value;
}
inline void CMsgWatchGameResponse::set_source_tv_port(uint32_t value) {
  _internal_set_source_tv_port(value);
  // @@protoc_insertion_point(field_set:CMsgWatchGameResponse.source_tv_port)
}

// optional fixed64 game_server_steamid = 5;
inline bool CMsgWatchGameResponse::_internal_has_game_server_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgWatchGameResponse::has_game_server_steamid() const {
  return _internal_has_game_server_steamid();
}
inline void CMsgWatchGameResponse::clear_game_server_steamid() {
  _impl_.game_server_steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CMsgWatchGameResponse::_internal_game_server_steamid() const {
  return _impl_.game_server_steamid_;
}
inline uint64_t CMsgWatchGameResponse::game_server_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGameResponse.game_server_steamid)
  return _internal_game_server_steamid();
}
inline void CMsgWatchGameResponse::_internal_set_game_server_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.game_server_steamid_ = value;
}
inline void CMsgWatchGameResponse::set_game_server_steamid(uint64_t value) {
  _internal_set_game_server_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgWatchGameResponse.game_server_steamid)
}

// optional fixed64 watch_server_steamid = 6;
inline bool CMsgWatchGameResponse::_internal_has_watch_server_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgWatchGameResponse::has_watch_server_steamid() const {
  return _internal_has_watch_server_steamid();
}
inline void CMsgWatchGameResponse::clear_watch_server_steamid() {
  _impl_.watch_server_steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CMsgWatchGameResponse::_internal_watch_server_steamid() const {
  return _impl_.watch_server_steamid_;
}
inline uint64_t CMsgWatchGameResponse::watch_server_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGameResponse.watch_server_steamid)
  return _internal_watch_server_steamid();
}
inline void CMsgWatchGameResponse::_internal_set_watch_server_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.watch_server_steamid_ = value;
}
inline void CMsgWatchGameResponse::set_watch_server_steamid(uint64_t value) {
  _internal_set_watch_server_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgWatchGameResponse.watch_server_steamid)
}

// optional fixed64 watch_tv_unique_secret_code = 7;
inline bool CMsgWatchGameResponse::_internal_has_watch_tv_unique_secret_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgWatchGameResponse::has_watch_tv_unique_secret_code() const {
  return _internal_has_watch_tv_unique_secret_code();
}
inline void CMsgWatchGameResponse::clear_watch_tv_unique_secret_code() {
  _impl_.watch_tv_unique_secret_code_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CMsgWatchGameResponse::_internal_watch_tv_unique_secret_code() const {
  return _impl_.watch_tv_unique_secret_code_;
}
inline uint64_t CMsgWatchGameResponse::watch_tv_unique_secret_code() const {
  // @@protoc_insertion_point(field_get:CMsgWatchGameResponse.watch_tv_unique_secret_code)
  return _internal_watch_tv_unique_secret_code();
}
inline void CMsgWatchGameResponse::_internal_set_watch_tv_unique_secret_code(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.watch_tv_unique_secret_code_ = value;
}
inline void CMsgWatchGameResponse::set_watch_tv_unique_secret_code(uint64_t value) {
  _internal_set_watch_tv_unique_secret_code(value);
  // @@protoc_insertion_point(field_set:CMsgWatchGameResponse.watch_tv_unique_secret_code)
}

// -------------------------------------------------------------------

// CMsgPartyLeaderWatchGamePrompt

// optional fixed64 game_server_steamid = 5;
inline bool CMsgPartyLeaderWatchGamePrompt::_internal_has_game_server_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPartyLeaderWatchGamePrompt::has_game_server_steamid() const {
  return _internal_has_game_server_steamid();
}
inline void CMsgPartyLeaderWatchGamePrompt::clear_game_server_steamid() {
  _impl_.game_server_steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgPartyLeaderWatchGamePrompt::_internal_game_server_steamid() const {
  return _impl_.game_server_steamid_;
}
inline uint64_t CMsgPartyLeaderWatchGamePrompt::game_server_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgPartyLeaderWatchGamePrompt.game_server_steamid)
  return _internal_game_server_steamid();
}
inline void CMsgPartyLeaderWatchGamePrompt::_internal_set_game_server_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.game_server_steamid_ = value;
}
inline void CMsgPartyLeaderWatchGamePrompt::set_game_server_steamid(uint64_t value) {
  _internal_set_game_server_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgPartyLeaderWatchGamePrompt.game_server_steamid)
}

// -------------------------------------------------------------------

// CDOTABroadcasterInfo

// optional uint32 account_id = 1;
inline bool CDOTABroadcasterInfo::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTABroadcasterInfo::has_account_id() const {
  return _internal_has_account_id();
}
inline void CDOTABroadcasterInfo::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CDOTABroadcasterInfo::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CDOTABroadcasterInfo::account_id() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcasterInfo.account_id)
  return _internal_account_id();
}
inline void CDOTABroadcasterInfo::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.account_id_ = value;
}
inline void CDOTABroadcasterInfo::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcasterInfo.account_id)
}

// optional fixed64 server_steam_id = 2;
inline bool CDOTABroadcasterInfo::_internal_has_server_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTABroadcasterInfo::has_server_steam_id() const {
  return _internal_has_server_steam_id();
}
inline void CDOTABroadcasterInfo::clear_server_steam_id() {
  _impl_.server_steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CDOTABroadcasterInfo::_internal_server_steam_id() const {
  return _impl_.server_steam_id_;
}
inline uint64_t CDOTABroadcasterInfo::server_steam_id() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcasterInfo.server_steam_id)
  return _internal_server_steam_id();
}
inline void CDOTABroadcasterInfo::_internal_set_server_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.server_steam_id_ = value;
}
inline void CDOTABroadcasterInfo::set_server_steam_id(uint64_t value) {
  _internal_set_server_steam_id(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcasterInfo.server_steam_id)
}

// optional bool live = 3;
inline bool CDOTABroadcasterInfo::_internal_has_live() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDOTABroadcasterInfo::has_live() const {
  return _internal_has_live();
}
inline void CDOTABroadcasterInfo::clear_live() {
  _impl_.live_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CDOTABroadcasterInfo::_internal_live() const {
  return _impl_.live_;
}
inline bool CDOTABroadcasterInfo::live() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcasterInfo.live)
  return _internal_live();
}
inline void CDOTABroadcasterInfo::_internal_set_live(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.live_ = value;
}
inline void CDOTABroadcasterInfo::set_live(bool value) {
  _internal_set_live(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcasterInfo.live)
}

// optional string team_name_radiant = 4;
inline bool CDOTABroadcasterInfo::_internal_has_team_name_radiant() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTABroadcasterInfo::has_team_name_radiant() const {
  return _internal_has_team_name_radiant();
}
inline void CDOTABroadcasterInfo::clear_team_name_radiant() {
  _impl_.team_name_radiant_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTABroadcasterInfo::team_name_radiant() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcasterInfo.team_name_radiant)
  return _internal_team_name_radiant();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDOTABroadcasterInfo::set_team_name_radiant(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.team_name_radiant_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDOTABroadcasterInfo.team_name_radiant)
}
inline std::string* CDOTABroadcasterInfo::mutable_team_name_radiant() {
  std::string* _s = _internal_mutable_team_name_radiant();
  // @@protoc_insertion_point(field_mutable:CDOTABroadcasterInfo.team_name_radiant)
  return _s;
}
inline const std::string& CDOTABroadcasterInfo::_internal_team_name_radiant() const {
  return _impl_.team_name_radiant_.Get();
}
inline void CDOTABroadcasterInfo::_internal_set_team_name_radiant(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_name_radiant_.Set(value, GetArenaForAllocation());
}
inline std::string* CDOTABroadcasterInfo::_internal_mutable_team_name_radiant() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.team_name_radiant_.Mutable(GetArenaForAllocation());
}
inline std::string* CDOTABroadcasterInfo::release_team_name_radiant() {
  // @@protoc_insertion_point(field_release:CDOTABroadcasterInfo.team_name_radiant)
  if (!_internal_has_team_name_radiant()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.team_name_radiant_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_radiant_.IsDefault()) {
    _impl_.team_name_radiant_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDOTABroadcasterInfo::set_allocated_team_name_radiant(std::string* team_name_radiant) {
  if (team_name_radiant != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.team_name_radiant_.SetAllocated(team_name_radiant, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_radiant_.IsDefault()) {
    _impl_.team_name_radiant_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDOTABroadcasterInfo.team_name_radiant)
}

// optional string team_name_dire = 5;
inline bool CDOTABroadcasterInfo::_internal_has_team_name_dire() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTABroadcasterInfo::has_team_name_dire() const {
  return _internal_has_team_name_dire();
}
inline void CDOTABroadcasterInfo::clear_team_name_dire() {
  _impl_.team_name_dire_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CDOTABroadcasterInfo::team_name_dire() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcasterInfo.team_name_dire)
  return _internal_team_name_dire();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDOTABroadcasterInfo::set_team_name_dire(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.team_name_dire_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDOTABroadcasterInfo.team_name_dire)
}
inline std::string* CDOTABroadcasterInfo::mutable_team_name_dire() {
  std::string* _s = _internal_mutable_team_name_dire();
  // @@protoc_insertion_point(field_mutable:CDOTABroadcasterInfo.team_name_dire)
  return _s;
}
inline const std::string& CDOTABroadcasterInfo::_internal_team_name_dire() const {
  return _impl_.team_name_dire_.Get();
}
inline void CDOTABroadcasterInfo::_internal_set_team_name_dire(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.team_name_dire_.Set(value, GetArenaForAllocation());
}
inline std::string* CDOTABroadcasterInfo::_internal_mutable_team_name_dire() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.team_name_dire_.Mutable(GetArenaForAllocation());
}
inline std::string* CDOTABroadcasterInfo::release_team_name_dire() {
  // @@protoc_insertion_point(field_release:CDOTABroadcasterInfo.team_name_dire)
  if (!_internal_has_team_name_dire()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.team_name_dire_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_dire_.IsDefault()) {
    _impl_.team_name_dire_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDOTABroadcasterInfo::set_allocated_team_name_dire(std::string* team_name_dire) {
  if (team_name_dire != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.team_name_dire_.SetAllocated(team_name_dire, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_dire_.IsDefault()) {
    _impl_.team_name_dire_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDOTABroadcasterInfo.team_name_dire)
}

// optional uint32 series_game = 7;
inline bool CDOTABroadcasterInfo::_internal_has_series_game() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CDOTABroadcasterInfo::has_series_game() const {
  return _internal_has_series_game();
}
inline void CDOTABroadcasterInfo::clear_series_game() {
  _impl_.series_game_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CDOTABroadcasterInfo::_internal_series_game() const {
  return _impl_.series_game_;
}
inline uint32_t CDOTABroadcasterInfo::series_game() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcasterInfo.series_game)
  return _internal_series_game();
}
inline void CDOTABroadcasterInfo::_internal_set_series_game(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.series_game_ = value;
}
inline void CDOTABroadcasterInfo::set_series_game(uint32_t value) {
  _internal_set_series_game(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcasterInfo.series_game)
}

// optional uint32 upcoming_broadcast_timestamp = 9;
inline bool CDOTABroadcasterInfo::_internal_has_upcoming_broadcast_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CDOTABroadcasterInfo::has_upcoming_broadcast_timestamp() const {
  return _internal_has_upcoming_broadcast_timestamp();
}
inline void CDOTABroadcasterInfo::clear_upcoming_broadcast_timestamp() {
  _impl_.upcoming_broadcast_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CDOTABroadcasterInfo::_internal_upcoming_broadcast_timestamp() const {
  return _impl_.upcoming_broadcast_timestamp_;
}
inline uint32_t CDOTABroadcasterInfo::upcoming_broadcast_timestamp() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcasterInfo.upcoming_broadcast_timestamp)
  return _internal_upcoming_broadcast_timestamp();
}
inline void CDOTABroadcasterInfo::_internal_set_upcoming_broadcast_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.upcoming_broadcast_timestamp_ = value;
}
inline void CDOTABroadcasterInfo::set_upcoming_broadcast_timestamp(uint32_t value) {
  _internal_set_upcoming_broadcast_timestamp(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcasterInfo.upcoming_broadcast_timestamp)
}

// optional bool allow_live_video = 10;
inline bool CDOTABroadcasterInfo::_internal_has_allow_live_video() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CDOTABroadcasterInfo::has_allow_live_video() const {
  return _internal_has_allow_live_video();
}
inline void CDOTABroadcasterInfo::clear_allow_live_video() {
  _impl_.allow_live_video_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool CDOTABroadcasterInfo::_internal_allow_live_video() const {
  return _impl_.allow_live_video_;
}
inline bool CDOTABroadcasterInfo::allow_live_video() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcasterInfo.allow_live_video)
  return _internal_allow_live_video();
}
inline void CDOTABroadcasterInfo::_internal_set_allow_live_video(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.allow_live_video_ = value;
}
inline void CDOTABroadcasterInfo::set_allow_live_video(bool value) {
  _internal_set_allow_live_video(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcasterInfo.allow_live_video)
}

// optional uint32 node_type = 11;
inline bool CDOTABroadcasterInfo::_internal_has_node_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CDOTABroadcasterInfo::has_node_type() const {
  return _internal_has_node_type();
}
inline void CDOTABroadcasterInfo::clear_node_type() {
  _impl_.node_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CDOTABroadcasterInfo::_internal_node_type() const {
  return _impl_.node_type_;
}
inline uint32_t CDOTABroadcasterInfo::node_type() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcasterInfo.node_type)
  return _internal_node_type();
}
inline void CDOTABroadcasterInfo::_internal_set_node_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.node_type_ = value;
}
inline void CDOTABroadcasterInfo::set_node_type(uint32_t value) {
  _internal_set_node_type(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcasterInfo.node_type)
}

// optional string node_name = 12;
inline bool CDOTABroadcasterInfo::_internal_has_node_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTABroadcasterInfo::has_node_name() const {
  return _internal_has_node_name();
}
inline void CDOTABroadcasterInfo::clear_node_name() {
  _impl_.node_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CDOTABroadcasterInfo::node_name() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcasterInfo.node_name)
  return _internal_node_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDOTABroadcasterInfo::set_node_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.node_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDOTABroadcasterInfo.node_name)
}
inline std::string* CDOTABroadcasterInfo::mutable_node_name() {
  std::string* _s = _internal_mutable_node_name();
  // @@protoc_insertion_point(field_mutable:CDOTABroadcasterInfo.node_name)
  return _s;
}
inline const std::string& CDOTABroadcasterInfo::_internal_node_name() const {
  return _impl_.node_name_.Get();
}
inline void CDOTABroadcasterInfo::_internal_set_node_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.node_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CDOTABroadcasterInfo::_internal_mutable_node_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.node_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CDOTABroadcasterInfo::release_node_name() {
  // @@protoc_insertion_point(field_release:CDOTABroadcasterInfo.node_name)
  if (!_internal_has_node_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.node_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.node_name_.IsDefault()) {
    _impl_.node_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDOTABroadcasterInfo::set_allocated_node_name(std::string* node_name) {
  if (node_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.node_name_.SetAllocated(node_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.node_name_.IsDefault()) {
    _impl_.node_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDOTABroadcasterInfo.node_name)
}

// -------------------------------------------------------------------

// CMsgDOTASeries_TeamInfo

// optional uint32 team_id = 1;
inline bool CMsgDOTASeries_TeamInfo::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTASeries_TeamInfo::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgDOTASeries_TeamInfo::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTASeries_TeamInfo::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgDOTASeries_TeamInfo::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeries.TeamInfo.team_id)
  return _internal_team_id();
}
inline void CMsgDOTASeries_TeamInfo::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.team_id_ = value;
}
inline void CMsgDOTASeries_TeamInfo::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeries.TeamInfo.team_id)
}

// optional string team_name = 2;
inline bool CMsgDOTASeries_TeamInfo::_internal_has_team_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTASeries_TeamInfo::has_team_name() const {
  return _internal_has_team_name();
}
inline void CMsgDOTASeries_TeamInfo::clear_team_name() {
  _impl_.team_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTASeries_TeamInfo::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeries.TeamInfo.team_name)
  return _internal_team_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTASeries_TeamInfo::set_team_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.team_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTASeries.TeamInfo.team_name)
}
inline std::string* CMsgDOTASeries_TeamInfo::mutable_team_name() {
  std::string* _s = _internal_mutable_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeries.TeamInfo.team_name)
  return _s;
}
inline const std::string& CMsgDOTASeries_TeamInfo::_internal_team_name() const {
  return _impl_.team_name_.Get();
}
inline void CMsgDOTASeries_TeamInfo::_internal_set_team_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTASeries_TeamInfo::_internal_mutable_team_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.team_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTASeries_TeamInfo::release_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTASeries.TeamInfo.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.team_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTASeries_TeamInfo::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.team_name_.SetAllocated(team_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTASeries.TeamInfo.team_name)
}

// optional string team_logo_url = 3;
inline bool CMsgDOTASeries_TeamInfo::_internal_has_team_logo_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTASeries_TeamInfo::has_team_logo_url() const {
  return _internal_has_team_logo_url();
}
inline void CMsgDOTASeries_TeamInfo::clear_team_logo_url() {
  _impl_.team_logo_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTASeries_TeamInfo::team_logo_url() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeries.TeamInfo.team_logo_url)
  return _internal_team_logo_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTASeries_TeamInfo::set_team_logo_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.team_logo_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTASeries.TeamInfo.team_logo_url)
}
inline std::string* CMsgDOTASeries_TeamInfo::mutable_team_logo_url() {
  std::string* _s = _internal_mutable_team_logo_url();
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeries.TeamInfo.team_logo_url)
  return _s;
}
inline const std::string& CMsgDOTASeries_TeamInfo::_internal_team_logo_url() const {
  return _impl_.team_logo_url_.Get();
}
inline void CMsgDOTASeries_TeamInfo::_internal_set_team_logo_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.team_logo_url_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTASeries_TeamInfo::_internal_mutable_team_logo_url() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.team_logo_url_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTASeries_TeamInfo::release_team_logo_url() {
  // @@protoc_insertion_point(field_release:CMsgDOTASeries.TeamInfo.team_logo_url)
  if (!_internal_has_team_logo_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.team_logo_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_logo_url_.IsDefault()) {
    _impl_.team_logo_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTASeries_TeamInfo::set_allocated_team_logo_url(std::string* team_logo_url) {
  if (team_logo_url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.team_logo_url_.SetAllocated(team_logo_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_logo_url_.IsDefault()) {
    _impl_.team_logo_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTASeries.TeamInfo.team_logo_url)
}

// optional uint32 wager_count = 4;
inline bool CMsgDOTASeries_TeamInfo::_internal_has_wager_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTASeries_TeamInfo::has_wager_count() const {
  return _internal_has_wager_count();
}
inline void CMsgDOTASeries_TeamInfo::clear_wager_count() {
  _impl_.wager_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTASeries_TeamInfo::_internal_wager_count() const {
  return _impl_.wager_count_;
}
inline uint32_t CMsgDOTASeries_TeamInfo::wager_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeries.TeamInfo.wager_count)
  return _internal_wager_count();
}
inline void CMsgDOTASeries_TeamInfo::_internal_set_wager_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.wager_count_ = value;
}
inline void CMsgDOTASeries_TeamInfo::set_wager_count(uint32_t value) {
  _internal_set_wager_count(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeries.TeamInfo.wager_count)
}

// -------------------------------------------------------------------

// CMsgDOTASeries_LiveGame

// optional fixed64 server_steam_id = 1;
inline bool CMsgDOTASeries_LiveGame::_internal_has_server_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTASeries_LiveGame::has_server_steam_id() const {
  return _internal_has_server_steam_id();
}
inline void CMsgDOTASeries_LiveGame::clear_server_steam_id() {
  _impl_.server_steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgDOTASeries_LiveGame::_internal_server_steam_id() const {
  return _impl_.server_steam_id_;
}
inline uint64_t CMsgDOTASeries_LiveGame::server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeries.LiveGame.server_steam_id)
  return _internal_server_steam_id();
}
inline void CMsgDOTASeries_LiveGame::_internal_set_server_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.server_steam_id_ = value;
}
inline void CMsgDOTASeries_LiveGame::set_server_steam_id(uint64_t value) {
  _internal_set_server_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeries.LiveGame.server_steam_id)
}

// optional .CMsgDOTASeries.TeamInfo team_radiant = 2;
inline bool CMsgDOTASeries_LiveGame::_internal_has_team_radiant() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.team_radiant_ != nullptr);
  return value;
}
inline bool CMsgDOTASeries_LiveGame::has_team_radiant() const {
  return _internal_has_team_radiant();
}
inline void CMsgDOTASeries_LiveGame::clear_team_radiant() {
  if (_impl_.team_radiant_ != nullptr) _impl_.team_radiant_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgDOTASeries_TeamInfo& CMsgDOTASeries_LiveGame::_internal_team_radiant() const {
  const ::CMsgDOTASeries_TeamInfo* p = _impl_.team_radiant_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTASeries_TeamInfo&>(
      ::_CMsgDOTASeries_TeamInfo_default_instance_);
}
inline const ::CMsgDOTASeries_TeamInfo& CMsgDOTASeries_LiveGame::team_radiant() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeries.LiveGame.team_radiant)
  return _internal_team_radiant();
}
inline void CMsgDOTASeries_LiveGame::unsafe_arena_set_allocated_team_radiant(
    ::CMsgDOTASeries_TeamInfo* team_radiant) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.team_radiant_);
  }
  _impl_.team_radiant_ = team_radiant;
  if (team_radiant) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTASeries.LiveGame.team_radiant)
}
inline ::CMsgDOTASeries_TeamInfo* CMsgDOTASeries_LiveGame::release_team_radiant() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTASeries_TeamInfo* temp = _impl_.team_radiant_;
  _impl_.team_radiant_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTASeries_TeamInfo* CMsgDOTASeries_LiveGame::unsafe_arena_release_team_radiant() {
  // @@protoc_insertion_point(field_release:CMsgDOTASeries.LiveGame.team_radiant)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTASeries_TeamInfo* temp = _impl_.team_radiant_;
  _impl_.team_radiant_ = nullptr;
  return temp;
}
inline ::CMsgDOTASeries_TeamInfo* CMsgDOTASeries_LiveGame::_internal_mutable_team_radiant() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.team_radiant_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTASeries_TeamInfo>(GetArenaForAllocation());
    _impl_.team_radiant_ = p;
  }
  return _impl_.team_radiant_;
}
inline ::CMsgDOTASeries_TeamInfo* CMsgDOTASeries_LiveGame::mutable_team_radiant() {
  ::CMsgDOTASeries_TeamInfo* _msg = _internal_mutable_team_radiant();
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeries.LiveGame.team_radiant)
  return _msg;
}
inline void CMsgDOTASeries_LiveGame::set_allocated_team_radiant(::CMsgDOTASeries_TeamInfo* team_radiant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.team_radiant_;
  }
  if (team_radiant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(team_radiant);
    if (message_arena != submessage_arena) {
      team_radiant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team_radiant, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.team_radiant_ = team_radiant;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTASeries.LiveGame.team_radiant)
}

// optional .CMsgDOTASeries.TeamInfo team_dire = 3;
inline bool CMsgDOTASeries_LiveGame::_internal_has_team_dire() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.team_dire_ != nullptr);
  return value;
}
inline bool CMsgDOTASeries_LiveGame::has_team_dire() const {
  return _internal_has_team_dire();
}
inline void CMsgDOTASeries_LiveGame::clear_team_dire() {
  if (_impl_.team_dire_ != nullptr) _impl_.team_dire_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgDOTASeries_TeamInfo& CMsgDOTASeries_LiveGame::_internal_team_dire() const {
  const ::CMsgDOTASeries_TeamInfo* p = _impl_.team_dire_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTASeries_TeamInfo&>(
      ::_CMsgDOTASeries_TeamInfo_default_instance_);
}
inline const ::CMsgDOTASeries_TeamInfo& CMsgDOTASeries_LiveGame::team_dire() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeries.LiveGame.team_dire)
  return _internal_team_dire();
}
inline void CMsgDOTASeries_LiveGame::unsafe_arena_set_allocated_team_dire(
    ::CMsgDOTASeries_TeamInfo* team_dire) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.team_dire_);
  }
  _impl_.team_dire_ = team_dire;
  if (team_dire) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTASeries.LiveGame.team_dire)
}
inline ::CMsgDOTASeries_TeamInfo* CMsgDOTASeries_LiveGame::release_team_dire() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgDOTASeries_TeamInfo* temp = _impl_.team_dire_;
  _impl_.team_dire_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTASeries_TeamInfo* CMsgDOTASeries_LiveGame::unsafe_arena_release_team_dire() {
  // @@protoc_insertion_point(field_release:CMsgDOTASeries.LiveGame.team_dire)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgDOTASeries_TeamInfo* temp = _impl_.team_dire_;
  _impl_.team_dire_ = nullptr;
  return temp;
}
inline ::CMsgDOTASeries_TeamInfo* CMsgDOTASeries_LiveGame::_internal_mutable_team_dire() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.team_dire_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTASeries_TeamInfo>(GetArenaForAllocation());
    _impl_.team_dire_ = p;
  }
  return _impl_.team_dire_;
}
inline ::CMsgDOTASeries_TeamInfo* CMsgDOTASeries_LiveGame::mutable_team_dire() {
  ::CMsgDOTASeries_TeamInfo* _msg = _internal_mutable_team_dire();
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeries.LiveGame.team_dire)
  return _msg;
}
inline void CMsgDOTASeries_LiveGame::set_allocated_team_dire(::CMsgDOTASeries_TeamInfo* team_dire) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.team_dire_;
  }
  if (team_dire) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(team_dire);
    if (message_arena != submessage_arena) {
      team_dire = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team_dire, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.team_dire_ = team_dire;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTASeries.LiveGame.team_dire)
}

// optional uint32 team_radiant_score = 4;
inline bool CMsgDOTASeries_LiveGame::_internal_has_team_radiant_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTASeries_LiveGame::has_team_radiant_score() const {
  return _internal_has_team_radiant_score();
}
inline void CMsgDOTASeries_LiveGame::clear_team_radiant_score() {
  _impl_.team_radiant_score_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTASeries_LiveGame::_internal_team_radiant_score() const {
  return _impl_.team_radiant_score_;
}
inline uint32_t CMsgDOTASeries_LiveGame::team_radiant_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeries.LiveGame.team_radiant_score)
  return _internal_team_radiant_score();
}
inline void CMsgDOTASeries_LiveGame::_internal_set_team_radiant_score(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.team_radiant_score_ = value;
}
inline void CMsgDOTASeries_LiveGame::set_team_radiant_score(uint32_t value) {
  _internal_set_team_radiant_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeries.LiveGame.team_radiant_score)
}

// optional uint32 team_dire_score = 5;
inline bool CMsgDOTASeries_LiveGame::_internal_has_team_dire_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTASeries_LiveGame::has_team_dire_score() const {
  return _internal_has_team_dire_score();
}
inline void CMsgDOTASeries_LiveGame::clear_team_dire_score() {
  _impl_.team_dire_score_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTASeries_LiveGame::_internal_team_dire_score() const {
  return _impl_.team_dire_score_;
}
inline uint32_t CMsgDOTASeries_LiveGame::team_dire_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeries.LiveGame.team_dire_score)
  return _internal_team_dire_score();
}
inline void CMsgDOTASeries_LiveGame::_internal_set_team_dire_score(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.team_dire_score_ = value;
}
inline void CMsgDOTASeries_LiveGame::set_team_dire_score(uint32_t value) {
  _internal_set_team_dire_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeries.LiveGame.team_dire_score)
}

// -------------------------------------------------------------------

// CMsgDOTASeries

// optional uint32 series_id = 1;
inline bool CMsgDOTASeries::_internal_has_series_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTASeries::has_series_id() const {
  return _internal_has_series_id();
}
inline void CMsgDOTASeries::clear_series_id() {
  _impl_.series_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTASeries::_internal_series_id() const {
  return _impl_.series_id_;
}
inline uint32_t CMsgDOTASeries::series_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeries.series_id)
  return _internal_series_id();
}
inline void CMsgDOTASeries::_internal_set_series_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.series_id_ = value;
}
inline void CMsgDOTASeries::set_series_id(uint32_t value) {
  _internal_set_series_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeries.series_id)
}

// optional uint32 series_type = 2;
inline bool CMsgDOTASeries::_internal_has_series_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTASeries::has_series_type() const {
  return _internal_has_series_type();
}
inline void CMsgDOTASeries::clear_series_type() {
  _impl_.series_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTASeries::_internal_series_type() const {
  return _impl_.series_type_;
}
inline uint32_t CMsgDOTASeries::series_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeries.series_type)
  return _internal_series_type();
}
inline void CMsgDOTASeries::_internal_set_series_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.series_type_ = value;
}
inline void CMsgDOTASeries::set_series_type(uint32_t value) {
  _internal_set_series_type(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASeries.series_type)
}

// optional .CMsgDOTASeries.TeamInfo team_1 = 3;
inline bool CMsgDOTASeries::_internal_has_team_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.team_1_ != nullptr);
  return value;
}
inline bool CMsgDOTASeries::has_team_1() const {
  return _internal_has_team_1();
}
inline void CMsgDOTASeries::clear_team_1() {
  if (_impl_.team_1_ != nullptr) _impl_.team_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgDOTASeries_TeamInfo& CMsgDOTASeries::_internal_team_1() const {
  const ::CMsgDOTASeries_TeamInfo* p = _impl_.team_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTASeries_TeamInfo&>(
      ::_CMsgDOTASeries_TeamInfo_default_instance_);
}
inline const ::CMsgDOTASeries_TeamInfo& CMsgDOTASeries::team_1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeries.team_1)
  return _internal_team_1();
}
inline void CMsgDOTASeries::unsafe_arena_set_allocated_team_1(
    ::CMsgDOTASeries_TeamInfo* team_1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.team_1_);
  }
  _impl_.team_1_ = team_1;
  if (team_1) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTASeries.team_1)
}
inline ::CMsgDOTASeries_TeamInfo* CMsgDOTASeries::release_team_1() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTASeries_TeamInfo* temp = _impl_.team_1_;
  _impl_.team_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTASeries_TeamInfo* CMsgDOTASeries::unsafe_arena_release_team_1() {
  // @@protoc_insertion_point(field_release:CMsgDOTASeries.team_1)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTASeries_TeamInfo* temp = _impl_.team_1_;
  _impl_.team_1_ = nullptr;
  return temp;
}
inline ::CMsgDOTASeries_TeamInfo* CMsgDOTASeries::_internal_mutable_team_1() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.team_1_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTASeries_TeamInfo>(GetArenaForAllocation());
    _impl_.team_1_ = p;
  }
  return _impl_.team_1_;
}
inline ::CMsgDOTASeries_TeamInfo* CMsgDOTASeries::mutable_team_1() {
  ::CMsgDOTASeries_TeamInfo* _msg = _internal_mutable_team_1();
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeries.team_1)
  return _msg;
}
inline void CMsgDOTASeries::set_allocated_team_1(::CMsgDOTASeries_TeamInfo* team_1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.team_1_;
  }
  if (team_1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(team_1);
    if (message_arena != submessage_arena) {
      team_1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team_1, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.team_1_ = team_1;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTASeries.team_1)
}

// optional .CMsgDOTASeries.TeamInfo team_2 = 4;
inline bool CMsgDOTASeries::_internal_has_team_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.team_2_ != nullptr);
  return value;
}
inline bool CMsgDOTASeries::has_team_2() const {
  return _internal_has_team_2();
}
inline void CMsgDOTASeries::clear_team_2() {
  if (_impl_.team_2_ != nullptr) _impl_.team_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgDOTASeries_TeamInfo& CMsgDOTASeries::_internal_team_2() const {
  const ::CMsgDOTASeries_TeamInfo* p = _impl_.team_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTASeries_TeamInfo&>(
      ::_CMsgDOTASeries_TeamInfo_default_instance_);
}
inline const ::CMsgDOTASeries_TeamInfo& CMsgDOTASeries::team_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeries.team_2)
  return _internal_team_2();
}
inline void CMsgDOTASeries::unsafe_arena_set_allocated_team_2(
    ::CMsgDOTASeries_TeamInfo* team_2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.team_2_);
  }
  _impl_.team_2_ = team_2;
  if (team_2) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTASeries.team_2)
}
inline ::CMsgDOTASeries_TeamInfo* CMsgDOTASeries::release_team_2() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgDOTASeries_TeamInfo* temp = _impl_.team_2_;
  _impl_.team_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTASeries_TeamInfo* CMsgDOTASeries::unsafe_arena_release_team_2() {
  // @@protoc_insertion_point(field_release:CMsgDOTASeries.team_2)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgDOTASeries_TeamInfo* temp = _impl_.team_2_;
  _impl_.team_2_ = nullptr;
  return temp;
}
inline ::CMsgDOTASeries_TeamInfo* CMsgDOTASeries::_internal_mutable_team_2() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.team_2_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTASeries_TeamInfo>(GetArenaForAllocation());
    _impl_.team_2_ = p;
  }
  return _impl_.team_2_;
}
inline ::CMsgDOTASeries_TeamInfo* CMsgDOTASeries::mutable_team_2() {
  ::CMsgDOTASeries_TeamInfo* _msg = _internal_mutable_team_2();
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeries.team_2)
  return _msg;
}
inline void CMsgDOTASeries::set_allocated_team_2(::CMsgDOTASeries_TeamInfo* team_2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.team_2_;
  }
  if (team_2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(team_2);
    if (message_arena != submessage_arena) {
      team_2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team_2, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.team_2_ = team_2;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTASeries.team_2)
}

// repeated .CMsgDOTAMatchMinimal match_minimal = 5;
inline int CMsgDOTASeries::_internal_match_minimal_size() const {
  return _impl_.match_minimal_.size();
}
inline int CMsgDOTASeries::match_minimal_size() const {
  return _internal_match_minimal_size();
}
inline ::CMsgDOTAMatchMinimal* CMsgDOTASeries::mutable_match_minimal(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeries.match_minimal)
  return _impl_.match_minimal_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal >*
CMsgDOTASeries::mutable_match_minimal() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTASeries.match_minimal)
  return &_impl_.match_minimal_;
}
inline const ::CMsgDOTAMatchMinimal& CMsgDOTASeries::_internal_match_minimal(int index) const {
  return _impl_.match_minimal_.Get(index);
}
inline const ::CMsgDOTAMatchMinimal& CMsgDOTASeries::match_minimal(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeries.match_minimal)
  return _internal_match_minimal(index);
}
inline ::CMsgDOTAMatchMinimal* CMsgDOTASeries::_internal_add_match_minimal() {
  return _impl_.match_minimal_.Add();
}
inline ::CMsgDOTAMatchMinimal* CMsgDOTASeries::add_match_minimal() {
  ::CMsgDOTAMatchMinimal* _add = _internal_add_match_minimal();
  // @@protoc_insertion_point(field_add:CMsgDOTASeries.match_minimal)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAMatchMinimal >&
CMsgDOTASeries::match_minimal() const {
  // @@protoc_insertion_point(field_list:CMsgDOTASeries.match_minimal)
  return _impl_.match_minimal_;
}

// optional .CMsgDOTASeries.LiveGame live_game = 6;
inline bool CMsgDOTASeries::_internal_has_live_game() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.live_game_ != nullptr);
  return value;
}
inline bool CMsgDOTASeries::has_live_game() const {
  return _internal_has_live_game();
}
inline void CMsgDOTASeries::clear_live_game() {
  if (_impl_.live_game_ != nullptr) _impl_.live_game_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgDOTASeries_LiveGame& CMsgDOTASeries::_internal_live_game() const {
  const ::CMsgDOTASeries_LiveGame* p = _impl_.live_game_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTASeries_LiveGame&>(
      ::_CMsgDOTASeries_LiveGame_default_instance_);
}
inline const ::CMsgDOTASeries_LiveGame& CMsgDOTASeries::live_game() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASeries.live_game)
  return _internal_live_game();
}
inline void CMsgDOTASeries::unsafe_arena_set_allocated_live_game(
    ::CMsgDOTASeries_LiveGame* live_game) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.live_game_);
  }
  _impl_.live_game_ = live_game;
  if (live_game) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTASeries.live_game)
}
inline ::CMsgDOTASeries_LiveGame* CMsgDOTASeries::release_live_game() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgDOTASeries_LiveGame* temp = _impl_.live_game_;
  _impl_.live_game_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTASeries_LiveGame* CMsgDOTASeries::unsafe_arena_release_live_game() {
  // @@protoc_insertion_point(field_release:CMsgDOTASeries.live_game)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgDOTASeries_LiveGame* temp = _impl_.live_game_;
  _impl_.live_game_ = nullptr;
  return temp;
}
inline ::CMsgDOTASeries_LiveGame* CMsgDOTASeries::_internal_mutable_live_game() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.live_game_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTASeries_LiveGame>(GetArenaForAllocation());
    _impl_.live_game_ = p;
  }
  return _impl_.live_game_;
}
inline ::CMsgDOTASeries_LiveGame* CMsgDOTASeries::mutable_live_game() {
  ::CMsgDOTASeries_LiveGame* _msg = _internal_mutable_live_game();
  // @@protoc_insertion_point(field_mutable:CMsgDOTASeries.live_game)
  return _msg;
}
inline void CMsgDOTASeries::set_allocated_live_game(::CMsgDOTASeries_LiveGame* live_game) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.live_game_;
  }
  if (live_game) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(live_game);
    if (message_arena != submessage_arena) {
      live_game = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, live_game, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.live_game_ = live_game;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTASeries.live_game)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CMsgSpectateFriendGameResponse_EWatchLiveResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgSpectateFriendGameResponse_EWatchLiveResult>() {
  return ::CMsgSpectateFriendGameResponse_EWatchLiveResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgWatchGameResponse_WatchGameResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgWatchGameResponse_WatchGameResult>() {
  return ::CMsgWatchGameResponse_WatchGameResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fwatch_2eproto
